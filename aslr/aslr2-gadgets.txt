0x00001007: and al, 0; add [rax-0x7b], cl; shl byte ptr [rdx+rax-1], 0xd0; add rsp, 8; ret;
0x00001008: and al, 0; add [rax-0x7b], cl; shl byte ptr [rdx+rax-1], 0xd0; add rsp, 8; ret;
0x0000100a: add [rax-0x7b], cl; shl byte ptr [rdx+rax-1], 0xd0; add rsp, 8; ret;
0x0000100d: shl byte ptr [rdx+rax-1], 0xd0; add rsp, 8; ret;
0x00001010: call rax;
0x000011c2: adc eax, 0x96058b48; and al, [rax]; add [rax-0x7b], cl; shl byte ptr [rcx+rcx-1], 0xe0; nop [rax]; ret;
0x000011c6: xchg esi, eax; and al, [rax]; add [rax-0x7b], cl; shl byte ptr [rcx+rcx-1], 0xe0; nop [rax]; ret;
0x000011c7: and al, [rax]; add [rax-0x7b], cl; shl byte ptr [rcx+rcx-1], 0xe0; nop [rax]; ret;
0x000011c9: add [rax-0x7b], cl; shl byte ptr [rcx+rcx-1], 0xe0; nop [rax]; ret;
0x000011cc: shl byte ptr [rcx+rcx-1], 0xe0; nop [rax]; ret;
0x00001207: insd [rdi], dx; and al, [rax]; add [rax-0x7b], cl; shl byte ptr [rax+rcx-1], 0xe0; nop [rax+rax]; ret;
0x00001208: and al, [rax]; add [rax-0x7b], cl; shl byte ptr [rax+rcx-1], 0xe0; nop [rax+rax]; ret;
0x0000120a: add [rax-0x7b], cl; shl byte ptr [rax+rcx-1], 0xe0; nop [rax+rax]; ret;
0x0000120d: shl byte ptr [rax+rcx-1], 0xe0; nop [rax+rax]; ret;
0x00001210: jmp rax;
0x00001212: nop [rax+rax]; ret;
0x00001213: nop [rax+rax]; ret;
0x00001215: add [rax], r8b; ret;
0x0000123f: sub eax, 0xe8ffffff; push 0xffffffffc6ffffff; add eax, 0x2339; add [rbp-0x3d], ebx; nop [rax]; ret;
0x00001244: push 0xffffffffc6ffffff; add eax, 0x2339; add [rbp-0x3d], ebx; nop [rax]; ret;
0x00001247: inc esi; add eax, 0x2339; add [rbp-0x3d], ebx; nop [rax]; ret;
0x00001248: mov byte ptr [rip+0x2339], 1; pop rbp; ret;
0x00001249: add eax, 0x2339; add [rbp-0x3d], ebx; nop [rax]; ret;
0x0000124a: cmp [rbx], esp; add [rax], al; add [rbp-0x3d], ebx; nop [rax]; ret;
0x0000124b: and eax, [rax]; add [rcx], al; pop rbp; ret;
0x0000124c: add [rax], al; add [rbp-0x3d], ebx; nop [rax]; ret;
0x0000124d: add [rcx], al; pop rbp; ret;
0x0000124e: add [rbp-0x3d], ebx; nop [rax]; ret;
0x00001251: nop [rax]; ret;
0x00001253: add byte ptr [rax], 0; add [rax], al; ret;
0x00001254: add [rax], al; add [rax], al; ret;
0x00001256: add [rax], al; ret;
0x00001264: call qword ptr [rbp+0x48];
0x000012ad: cmp [rsi-0x3a], edi; mov eax, [rbp-4]; pop rbp; ret;
0x000012b0: mov eax, [rbp-4]; pop rbp; ret;
0x000012b2: cld; pop rbp; ret;
0x000012b3: pop rbp; ret;
0x0000137e: mov dh, 0x90; leave; ret;
0x000013a5: call qword ptr [rax+0x4855c3c9];
0x000013a6: nop; leave; ret;
0x000014af: jmp qword ptr [rsi-0x77];
0x00001613: call qword ptr [rax-0xe717];
0x00001619: dec ecx; ret;
0x0000161a: leave; ret;
0x00001653: xor ebx, ebx; nop [rax]; mov rdx, r14; mov rsi, r13; mov edi, r12d; call qword ptr [r15+rbx*8];
0x00001655: nop [rax]; mov rdx, r14; mov rsi, r13; mov edi, r12d; call qword ptr [r15+rbx*8];
0x00001657: add [rcx+rcx*4-0xe], cl; mov rsi, r13; mov edi, r12d; call qword ptr [r15+rbx*8];
0x00001658: mov rdx, r14; mov rsi, r13; mov edi, r12d; call qword ptr [r15+rbx*8];
0x00001659: mov edx, esi; mov rsi, r13; mov edi, r12d; call qword ptr [r15+rbx*8];
0x0000165b: mov rsi, r13; mov edi, r12d; call qword ptr [r15+rbx*8];
0x0000165c: mov esi, ebp; mov edi, r12d; call qword ptr [r15+rbx*8];
0x0000165d: out dx, al; mov edi, r12d; call qword ptr [r15+rbx*8];
0x0000165e: mov edi, r12d; call qword ptr [r15+rbx*8];
0x0000165f: mov edi, esp; call qword ptr [r15+rbx*8];
0x00001660: out 0x41, eax; call qword ptr [rdi+rbx*8];
0x00001661: call qword ptr [r15+rbx*8];
0x00001662: call qword ptr [rdi+rbx*8];
0x00001664: fisttp word ptr [rax-0x7d], st; ret;
0x00001671: or [rbx+0x5d], bl; pop r12; pop r13; pop r14; pop r15; ret;
0x00001673: pop rbp; pop r12; pop r13; pop r14; pop r15; ret;
0x00001674: pop r12; pop r13; pop r14; pop r15; ret;
0x00001675: pop rsp; pop r13; pop r14; pop r15; ret;
0x00001676: pop r13; pop r14; pop r15; ret;
0x00001677: pop rbp; pop r14; pop r15; ret;
0x00001678: pop r14; pop r15; ret;
0x00001679: pop rsi; pop r15; ret;
0x0000167a: pop r15; ret;
0x0000167b: pop rdi; ret;
0x0000167d: nop [rax]; ret;
0x00001682: add [rax], al; sub rsp, 8; add rsp, 8; ret;
0x00001684: sub rsp, 8; add rsp, 8; ret;
0x00001685: sub esp, 8; add rsp, 8; ret;
0x00001688: add rsp, 8; ret;
0x00001689: add esp, 8; ret;
0x0000168c: ret;
