0x00401007: xchg ebp, eax; and eax, [rax]; add [rax-0x7b], cl; shl byte ptr [rdx+rax-1], 0xd0; add rsp, 8; ret;
0x00401008: and eax, [rax]; add [rax-0x7b], cl; shl byte ptr [rdx+rax-1], 0xd0; add rsp, 8; ret;
0x0040100a: add [rax-0x7b], cl; shl byte ptr [rdx+rax-1], 0xd0; add rsp, 8; ret;
0x0040100d: shl byte ptr [rdx+rax-1], 0xd0; add rsp, 8; ret;
0x00401010: call rax;
0x00401142: add dil, dil; adc eax, 0x224e; hlt; nop [rax+rax]; ret;
0x00401143: add bh, bh; adc eax, 0x224e; hlt; nop [rax+rax]; ret;
0x00401145: adc eax, 0x224e; hlt; nop [rax+rax]; ret;
0x00401146: and r8b, [rax]; add ah, dh; nop [rax+rax]; ret;
0x00401147: and al, [rax]; add ah, dh; nop [rax+rax]; ret;
0x00401148: add [rax], al; hlt; nop [rax+rax]; ret;
0x00401149: add ah, dh; nop [rax+rax]; ret;
0x0040114a: hlt; nop [rax+rax]; ret;
0x00401176: or [rdi+0x403448], edi; jmp rax;
0x0040117e: xchg ax, ax; ret;
0x0040117f: nop; ret;
0x004011b9: mov edi, 0x403448; jmp rax;
0x004011be: jmp rax;
0x004011e1: inc esi; add eax, 0x229f; add [rbp-0x3d], ebx; nop [rax+rax]; ret;
0x004011e2: mov byte ptr [rip+0x229f], 1; pop rbp; ret;
0x004011e3: add eax, 0x229f; add [rbp-0x3d], ebx; nop [rax+rax]; ret;
0x004011e4: lahf; and al, [rax]; add [rcx], al; pop rbp; ret;
0x004011e5: and al, [rax]; add [rcx], al; pop rbp; ret;
0x004011e6: add [rax], al; add [rbp-0x3d], ebx; nop [rax+rax]; ret;
0x004011e7: add [rcx], al; pop rbp; ret;
0x004011e8: add [rbp-0x3d], ebx; nop [rax+rax]; ret;
0x004011eb: nop [rax+rax]; ret;
0x004011ed: add [rax], r8b; ret;
0x004011ee: add [rax], al; ret;
0x004011fe: add bl, bpl; mov ss, [rbp+0x48]; mov ebp, esp; add [r15], rdi; ret;
0x004011ff: add bl, ch; mov ss, [rbp+0x48]; mov ebp, esp; add [r15], rdi; ret;
0x00401201: mov ss, [rbp+0x48]; mov ebp, esp; add [r15], rdi; ret;
0x00401202: push rbp; mov rbp, rsp; add [r15], rdi; ret;
0x00401203: mov rbp, rsp; add [r15], rdi; ret;
0x00401204: mov ebp, esp; add [r15], rdi; ret;
0x00401205: in eax, 0x49; add [rdi], edi; ret;
0x00401206: add [r15], rdi; ret;
0x00401207: add [rdi], edi; ret;
0x0040120a: nop; pop rbp; ret;
0x0040120b: pop rbp; ret;
0x00401251: call qword ptr [rax+0x4855c3c9];
0x00401252: nop; leave; ret;
0x00401343: jmp qword ptr [rsi-0x77];
0x00401443: call qword ptr [rax-0xb117];
0x00401449: dec ecx; ret;
0x0040144a: leave; ret;
0x00401483: xor ebx, ebx; nop [rax]; mov rdx, r14; mov rsi, r13; mov edi, r12d; call qword ptr [r15+rbx*8];
0x00401485: nop [rax]; mov rdx, r14; mov rsi, r13; mov edi, r12d; call qword ptr [r15+rbx*8];
0x00401487: add [rcx+rcx*4-0xe], cl; mov rsi, r13; mov edi, r12d; call qword ptr [r15+rbx*8];
0x00401488: mov rdx, r14; mov rsi, r13; mov edi, r12d; call qword ptr [r15+rbx*8];
0x00401489: mov edx, esi; mov rsi, r13; mov edi, r12d; call qword ptr [r15+rbx*8];
0x0040148b: mov rsi, r13; mov edi, r12d; call qword ptr [r15+rbx*8];
0x0040148c: mov esi, ebp; mov edi, r12d; call qword ptr [r15+rbx*8];
0x0040148d: out dx, al; mov edi, r12d; call qword ptr [r15+rbx*8];
0x0040148e: mov edi, r12d; call qword ptr [r15+rbx*8];
0x0040148f: mov edi, esp; call qword ptr [r15+rbx*8];
0x00401490: out 0x41, eax; call qword ptr [rdi+rbx*8];
0x00401491: call qword ptr [r15+rbx*8];
0x00401492: call qword ptr [rdi+rbx*8];
0x00401494: fisttp word ptr [rax-0x7d], st; ret;
0x004014a1: or [rbx+0x5d], bl; pop r12; pop r13; pop r14; pop r15; ret;
0x004014a3: pop rbp; pop r12; pop r13; pop r14; pop r15; ret;
0x004014a4: pop r12; pop r13; pop r14; pop r15; ret;
0x004014a5: pop rsp; pop r13; pop r14; pop r15; ret;
0x004014a6: pop r13; pop r14; pop r15; ret;
0x004014a7: pop rbp; pop r14; pop r15; ret;
0x004014a8: pop r14; pop r15; ret;
0x004014a9: pop rsi; pop r15; ret;
0x004014aa: pop r15; ret;
0x004014ab: pop rdi; ret;
0x004014ad: nop [rax]; ret;
0x004014b2: add [rax], al; sub rsp, 8; add rsp, 8; ret;
0x004014b4: sub rsp, 8; add rsp, 8; ret;
0x004014b5: sub esp, 8; add rsp, 8; ret;
0x004014b8: add rsp, 8; ret;
0x004014b9: add esp, 8; ret;
0x004014bc: ret;
