0x00025092: ret 0x198f;
0x00025292: ret 0x198e;
0x00025359: and esp, [rip-0x76b7ffef]; ret;
0x0002535a: and eax, 0x89480011; ret;
0x00025396: mov [rip+0x19b29b], rax; mov [rip+0x19b28c], rdx; pop rax; pop rbx; pop rbp; ret;
0x00025397: mov [rip+0x19b29b], eax; mov [rip+0x19b28c], rdx; pop rax; pop rbx; pop rbp; ret;
0x00025398: add eax, 0x19b29b; mov [rip+0x19b28c], rdx; pop rax; pop rbx; pop rbp; ret;
0x0002539b: sbb [rax], eax; mov [rip+0x19b28c], rdx; pop rax; pop rbx; pop rbp; ret;
0x0002539c: add [rax-0x77], cl; adc eax, 0x19b28c; pop rax; pop rbx; pop rbp; ret;
0x0002539d: mov [rip+0x19b28c], rdx; pop rax; pop rbx; pop rbp; ret;
0x0002539e: mov [rip+0x19b28c], edx; pop rax; pop rbx; pop rbp; ret;
0x0002539f: adc eax, 0x19b28c; pop rax; pop rbx; pop rbp; ret;
0x000253a1: mov dl, 0x19; add [rax+0x5b], bl; pop rbp; ret;
0x000253a2: sbb [rax], eax; pop rax; pop rbx; pop rbp; ret;
0x000253a3: add [rax+0x5b], bl; pop rbp; ret;
0x00025511: sbb eax, [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x19b565]; syscall;
0x00025512: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x19b565]; syscall;
0x00025513: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x19b565]; syscall;
0x00025514: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x19b565]; syscall;
0x00025515: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x19b565]; syscall;
0x00025516: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x19b565]; syscall;
0x00025517: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x19b565]; syscall;
0x00025518: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x19b565]; syscall;
0x00025519: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x19b565]; syscall;
0x0002551a: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x19b565]; syscall;
0x0002551b: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x19b565; syscall;
0x0002551c: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0x19b565]; syscall;
0x0002551d: add [rax], al; mov eax, 0xca; lea rdi, [rip+0x19b565]; syscall;
0x0002551e: add [rax+0xca], bh; lea rdi, [rip+0x19b565]; syscall;
0x0002551f: mov eax, 0xca; lea rdi, [rip+0x19b565]; syscall;
0x00025521: add [rax], al; add [rax-0x73], cl; cmp eax, 0x19b565; syscall;
0x00025522: add [rax], al; lea rdi, [rip+0x19b565]; syscall;
0x00025523: add [rax-0x73], cl; cmp eax, 0x19b565; syscall;
0x00025524: lea rdi, [rip+0x19b565]; syscall;
0x00025525: lea edi, [rip+0x19b565]; syscall;
0x00025526: cmp eax, 0x19b565; syscall;
0x000265e8: add [rsi-0xf], edi; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x000265ea: int1; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x00026664: add [rsp+rbx+0x48], dh; lea eax, [rip+0x588d2]; xor rax, fs:[0x30]; rol rax, 0x11; mov [rip+0x19afa6], rax; ret;
0x00026666: sbb al, 0x48; lea eax, [rip+0x588d2]; xor rax, fs:[0x30]; rol rax, 0x11; mov [rip+0x19afa6], rax; ret;
0x00026667: lea rax, [rip+0x588d2]; xor rax, fs:[0x30]; rol rax, 0x11; mov [rip+0x19afa6], rax; ret;
0x00026668: lea eax, [rip+0x588d2]; xor rax, fs:[0x30]; rol rax, 0x11; mov [rip+0x19afa6], rax; ret;
0x00026669: add eax, 0x588d2; xor rax, fs:[0x30]; rol rax, 0x11; mov [rip+0x19afa6], rax; ret;
0x0002666a: ror byte ptr [rax+0x48640005], cl; xor eax, [0x30]; rol rax, 0x11; mov [rip+0x19afa6], rax; ret;
0x0002666e: xor rax, fs:[0x30]; rol rax, 0x11; mov [rip+0x19afa6], rax; ret;
0x0002666f: xor rax, [0x30]; rol rax, 0x11; mov [rip+0x19afa6], rax; ret;
0x00026670: xor eax, [0x30]; rol rax, 0x11; mov [rip+0x19afa6], rax; ret;
0x00026671: add al, 0x25; xor [rax], al; add [rax], al; rol rax, 0x11; mov [rip+0x19afa6], rax; ret;
0x00026672: and eax, 0x30; rol rax, 0x11; mov [rip+0x19afa6], rax; ret;
0x00026673: xor [rax], al; add [rax], al; rol rax, 0x11; mov [rip+0x19afa6], rax; ret;
0x00026674: add [rax], al; add [rax-0x3f], cl; rcl byte ptr [rcx], 0x48; mov [rip+0x19afa6], eax; ret;
0x00026675: add [rax], al; rol rax, 0x11; mov [rip+0x19afa6], rax; ret;
0x00026676: add [rax-0x3f], cl; rcl byte ptr [rcx], 0x48; mov [rip+0x19afa6], eax; ret;
0x00026677: rol rax, 0x11; mov [rip+0x19afa6], rax; ret;
0x00026678: rol eax, 0x11; mov [rip+0x19afa6], rax; ret;
0x00026679: rcl byte ptr [rcx], 0x48; mov [rip+0x19afa6], eax; ret;
0x0002667a: adc [rax-0x77], ecx; add eax, 0x19afa6; ret;
0x0002667b: mov [rip+0x19afa6], rax; ret;
0x0002667c: mov [rip+0x19afa6], eax; ret;
0x0002667d: add eax, 0x19afa6; ret;
0x0002667e: cmpsb [rsi], [rdi]; scasd [rdi]; sbb [rax], eax; ret;
0x0002667f: scasd [rdi]; sbb [rax], eax; ret;
0x0002669e: add [rax], al; add [rbp-0x3c], dh; ret;
0x000266a0: add [rbp-0x3c], dh; ret;
0x00026850: ret 0xe683;
0x00026914: mov ecx, 0x1b80ce9; add [rax], al; add [rbx-0x76bef01f], al; ret 0xd341;
0x0002691a: add [rax], al; add [rbx-0x76bef01f], al; ret 0xd341;
0x0002691c: add [rbx-0x76bef01f], al; ret 0xd341;
0x00026a20: ret 0xca21;
0x00026aed: xchg [rcx+0x48fffffd], edx; lea ecx, [rip+0x15ea4b]; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx;
0x00026af1: dec dword ptr [rax-0x73]; or eax, 0x15ea4b; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx;
0x00026af2: lea rcx, [rip+0x15ea4b]; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx;
0x00026af3: lea ecx, [rip+0x15ea4b]; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx;
0x00026af4: or eax, 0x15ea4b; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx;
0x00026af7: adc eax, 0x14634800; xchg ecx, eax; add rdx, rcx; jmp rdx;
0x00026c85: adc al, 0x48; mov eax, [rip+0x197223]; mov rsi, [rsp]; mov edi, [rsp+0xc]; mov rdx, [rax]; call rbp;
0x00026c86: mov rax, [rip+0x197223]; mov rsi, [rsp]; mov edi, [rsp+0xc]; mov rdx, [rax]; call rbp;
0x00026c87: mov eax, [rip+0x197223]; mov rsi, [rsp]; mov edi, [rsp+0xc]; mov rdx, [rax]; call rbp;
0x00026c88: add eax, 0x197223; mov rsi, [rsp]; mov edi, [rsp+0xc]; mov rdx, [rax]; call rbp;
0x00026c89: and esi, [rdx+0x19]; add [rax-0x75], cl; xor al, 0x24; mov edi, [rsp+0xc]; mov rdx, [rax]; call rbp;
0x00026c8b: sbb [rax], eax; mov rsi, [rsp]; mov edi, [rsp+0xc]; mov rdx, [rax]; call rbp;
0x00026c8c: add [rax-0x75], cl; xor al, 0x24; mov edi, [rsp+0xc]; mov rdx, [rax]; call rbp;
0x00026c8d: mov rsi, [rsp]; mov edi, [rsp+0xc]; mov rdx, [rax]; call rbp;
0x00026c8e: mov esi, [rsp]; mov edi, [rsp+0xc]; mov rdx, [rax]; call rbp;
0x00026c8f: xor al, 0x24; mov edi, [rsp+0xc]; mov rdx, [rax]; call rbp;
0x00026c91: mov edi, [rsp+0xc]; mov rdx, [rax]; call rbp;
0x00026c93: and al, 0xc; mov rdx, [rax]; call rbp;
0x00026c94: or al, 0x48; mov edx, [rax]; call rbp;
0x00026c95: mov rdx, [rax]; call rbp;
0x00026c96: mov edx, [rax]; call rbp;
0x00026cf1: mov rax, [rip+0x1971b8]; mov edi, [rsp+0xc]; mov rsi, [rsp]; mov rdx, [rax]; mov rax, [rsp+0x10]; call rax;
0x00026cf2: mov eax, [rip+0x1971b8]; mov edi, [rsp+0xc]; mov rsi, [rsp]; mov rdx, [rax]; mov rax, [rsp+0x10]; call rax;
0x00026cf3: add eax, 0x1971b8; mov edi, [rsp+0xc]; mov rsi, [rsp]; mov rdx, [rax]; mov rax, [rsp+0x10]; call rax;
0x00026cf6: sbb [rax], eax; mov edi, [rsp+0xc]; mov rsi, [rsp]; mov rdx, [rax]; mov rax, [rsp+0x10]; call rax;
0x00026cf7: add [rbx+0x480c247c], cl; mov esi, [rsp]; mov rdx, [rax]; mov rax, [rsp+0x10]; call rax;
0x00026cf8: mov edi, [rsp+0xc]; mov rsi, [rsp]; mov rdx, [rax]; mov rax, [rsp+0x10]; call rax;
0x00026cfa: and al, 0xc; mov rsi, [rsp]; mov rdx, [rax]; mov rax, [rsp+0x10]; call rax;
0x00026cfb: or al, 0x48; mov esi, [rsp]; mov rdx, [rax]; mov rax, [rsp+0x10]; call rax;
0x00026cfc: mov rsi, [rsp]; mov rdx, [rax]; mov rax, [rsp+0x10]; call rax;
0x00026cfd: mov esi, [rsp]; mov rdx, [rax]; mov rax, [rsp+0x10]; call rax;
0x00026cfe: xor al, 0x24; mov rdx, [rax]; mov rax, [rsp+0x10]; call rax;
0x00026cff: and al, 0x48; mov edx, [rax]; mov rax, [rsp+0x10]; call rax;
0x00026d00: mov rdx, [rax]; mov rax, [rsp+0x10]; call rax;
0x00026d01: mov edx, [rax]; mov rax, [rsp+0x10]; call rax;
0x00026d02: adc [rax-0x75], cl; and al, 0x10; call rax;
0x00026d03: mov rax, [rsp+0x10]; call rax;
0x00026d04: mov eax, [rsp+0x10]; call rax;
0x00026d0f: add [rax], eax; mov rax, [rsp]; lea rdi, [rip+0x162d0c]; mov rsi, [rax]; xor eax, eax; call qword ptr [rdx+0x1d8];
0x00026d10: add [rax-0x75], cl; add al, 0x24; lea rdi, [rip+0x162d0c]; mov rsi, [rax]; xor eax, eax; call qword ptr [rdx+0x1d8];
0x00026d11: mov rax, [rsp]; lea rdi, [rip+0x162d0c]; mov rsi, [rax]; xor eax, eax; call qword ptr [rdx+0x1d8];
0x00026d12: mov eax, [rsp]; lea rdi, [rip+0x162d0c]; mov rsi, [rax]; xor eax, eax; call qword ptr [rdx+0x1d8];
0x00026d13: add al, 0x24; lea rdi, [rip+0x162d0c]; mov rsi, [rax]; xor eax, eax; call qword ptr [rdx+0x1d8];
0x00026d14: and al, 0x48; lea edi, [rip+0x162d0c]; mov rsi, [rax]; xor eax, eax; call qword ptr [rdx+0x1d8];
0x00026d15: lea rdi, [rip+0x162d0c]; mov rsi, [rax]; xor eax, eax; call qword ptr [rdx+0x1d8];
0x00026d16: lea edi, [rip+0x162d0c]; mov rsi, [rax]; xor eax, eax; call qword ptr [rdx+0x1d8];
0x00026d17: cmp eax, 0x162d0c; mov rsi, [rax]; xor eax, eax; call qword ptr [rdx+0x1d8];
0x00026d2b: dec dword ptr [rax-0x75]; add eax, 0x19aac5; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00026d2c: mov rax, [rip+0x19aac5]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00026d2d: mov eax, [rip+0x19aac5]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00026d2e: add eax, 0x19aac5; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00026d30: stosb [rdi]; sbb [rax], eax; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00026d31: sbb [rax], eax; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00026d58: or [rdi], cl; xchg esp, eax; ret 0xd284;
0x00026d5a: xchg esp, eax; ret 0xd284;
0x00026d5d: shl byte ptr [rbp+0x10], cl; mov edx, 0x3c; nop [rax]; xor edi, edi; mov eax, edx; syscall;
0x00026d5f: adc [rdx+0x3c], bh; nop [rax]; xor edi, edi; mov eax, edx; syscall;
0x00026d60: mov edx, 0x3c; nop [rax]; xor edi, edi; mov eax, edx; syscall;
0x00026d61: cmp al, 0; add [rax], al; nop [rax]; xor edi, edi; mov eax, edx; syscall;
0x00026d63: add [rax], al; nop [rax]; xor edi, edi; mov eax, edx; syscall;
0x00026d65: nop [rax]; xor edi, edi; mov eax, edx; syscall;
0x00026d68: xor edi, edi; mov eax, edx; syscall;
0x00026da4: mov rcx, [rip+0x197045]; mov rdi, r15; add rcx, 0x988; cmp [rsp+0x18], rcx; cmovne rdi, r14; call rdx;
0x00026da5: mov ecx, [rip+0x197045]; mov rdi, r15; add rcx, 0x988; cmp [rsp+0x18], rcx; cmovne rdi, r14; call rdx;
0x00026da6: or eax, 0x197045; mov rdi, r15; add rcx, 0x988; cmp [rsp+0x18], rcx; cmovne rdi, r14; call rdx;
0x00026da9: sbb [rax], eax; mov rdi, r15; add rcx, 0x988; cmp [rsp+0x18], rcx; cmovne rdi, r14; call rdx;
0x00026daa: add [rcx+rcx*4-1], cl; add rcx, 0x988; cmp [rsp+0x18], rcx; cmovne rdi, r14; call rdx;
0x00026dab: mov rdi, r15; add rcx, 0x988; cmp [rsp+0x18], rcx; cmovne rdi, r14; call rdx;
0x00026dac: mov edi, edi; add rcx, 0x988; cmp [rsp+0x18], rcx; cmovne rdi, r14; call rdx;
0x00026dad: dec dword ptr [rax-0x7f]; ror dword ptr [rax+0x48000009], 0x39; and al, 0x18; cmovne rdi, r14; call rdx;
0x00026dae: add rcx, 0x988; cmp [rsp+0x18], rcx; cmovne rdi, r14; call rdx;
0x00026daf: add ecx, 0x988; cmp [rsp+0x18], rcx; cmovne rdi, r14; call rdx;
0x00026db0: ror dword ptr [rax+0x48000009], 0x39; and al, 0x18; cmovne rdi, r14; call rdx;
0x00026db1: mov [rcx], cl; add [rax], al; cmp [rsp+0x18], rcx; cmovne rdi, r14; call rdx;
0x00026db2: or [rax], eax; add [rax+0x39], cl; and al, 0x18; cmovne rdi, r14; call rdx;
0x00026db3: add [rax], al; cmp [rsp+0x18], rcx; cmovne rdi, r14; call rdx;
0x00026db4: add [rax+0x39], cl; and al, 0x18; cmovne rdi, r14; call rdx;
0x00026db5: cmp [rsp+0x18], rcx; cmovne rdi, r14; call rdx;
0x00026db6: cmp [rsp+0x18], ecx; cmovne rdi, r14; call rdx;
0x00026db8: and al, 0x18; cmovne rdi, r14; call rdx;
0x00026dba: cmovne rdi, r14; call rdx;
0x00026dbb: cmovne edi, esi; call rdx;
0x00026dda: mov rax, [rsp]; mov rdx, [rip+0x19707b]; lea rdi, [rip+0x162c56]; mov rsi, [rax]; xor eax, eax; call qword ptr [rdx+0x1d8];
0x00026ddb: mov eax, [rsp]; mov rdx, [rip+0x19707b]; lea rdi, [rip+0x162c56]; mov rsi, [rax]; xor eax, eax; call qword ptr [rdx+0x1d8];
0x00026ddc: add al, 0x24; mov rdx, [rip+0x19707b]; lea rdi, [rip+0x162c56]; mov rsi, [rax]; xor eax, eax; call qword ptr [rdx+0x1d8];
0x00026ddd: and al, 0x48; mov edx, [rip+0x19707b]; lea rdi, [rip+0x162c56]; mov rsi, [rax]; xor eax, eax; call qword ptr [rdx+0x1d8];
0x00026dde: mov rdx, [rip+0x19707b]; lea rdi, [rip+0x162c56]; mov rsi, [rax]; xor eax, eax; call qword ptr [rdx+0x1d8];
0x00026ddf: mov edx, [rip+0x19707b]; lea rdi, [rip+0x162c56]; mov rsi, [rax]; xor eax, eax; call qword ptr [rdx+0x1d8];
0x00026de0: adc eax, 0x19707b; lea rdi, [rip+0x162c56]; mov rsi, [rax]; xor eax, eax; call qword ptr [rdx+0x1d8];
0x00026de3: sbb [rax], eax; lea rdi, [rip+0x162c56]; mov rsi, [rax]; xor eax, eax; call qword ptr [rdx+0x1d8];
0x00026de4: add [rax-0x73], cl; cmp eax, 0x162c56; mov rsi, [rax]; xor eax, eax; call qword ptr [rdx+0x1d8];
0x00026de5: lea rdi, [rip+0x162c56]; mov rsi, [rax]; xor eax, eax; call qword ptr [rdx+0x1d8];
0x00026de6: lea edi, [rip+0x162c56]; mov rsi, [rax]; xor eax, eax; call qword ptr [rdx+0x1d8];
0x00026de7: cmp eax, 0x162c56; mov rsi, [rax]; xor eax, eax; call qword ptr [rdx+0x1d8];
0x00026dec: mov rsi, [rax]; xor eax, eax; call qword ptr [rdx+0x1d8];
0x00026ded: mov esi, [rax]; xor eax, eax; call qword ptr [rdx+0x1d8];
0x00026def: xor eax, eax; call qword ptr [rdx+0x1d8];
0x00026df1: call qword ptr [rdx+0x1d8];
0x00026e0e: add [rax], al; add cl, ch; or al, [rcx+0x2e66000c]; nop [rax+rax]; lea rax, [rip+0x162c37]; ret;
0x00026e10: add cl, ch; or al, [rcx+0x2e66000c]; nop [rax+rax]; lea rax, [rip+0x162c37]; ret;
0x00026e12: or al, [rcx+0x2e66000c]; nop [rax+rax]; lea rax, [rip+0x162c37]; ret;
0x00026e13: or dword ptr [rax+rax], 0x1f0f2e66; test [rax], al; add [rax], al; add [rax], al; lea rax, [rip+0x162c37]; ret;
0x00026e14: or al, 0; nop [rax+rax]; lea rax, [rip+0x162c37]; ret;
0x00026e15: add [rsi+0x2e], ah; nop [rax+rax]; lea rax, [rip+0x162c37]; ret;
0x00026e16: nop [rax+rax]; lea rax, [rip+0x162c37]; ret;
0x00026e17: nop [rax+rax]; lea rax, [rip+0x162c37]; ret;
0x00026e18: nop [rax+rax]; lea rax, [rip+0x162c37]; ret;
0x00026e1a: test [rax], al; add [rax], al; add [rax], al; lea rax, [rip+0x162c37]; ret;
0x00026e1b: add [rax], al; add [rax], al; add [rax-0x73], cl; add eax, 0x162c37; ret;
0x00026e1c: add [rax], al; add [rax], al; lea rax, [rip+0x162c37]; ret;
0x00026e1d: add [rax], al; add [rax-0x73], cl; add eax, 0x162c37; ret;
0x00026e1e: add [rax], al; lea rax, [rip+0x162c37]; ret;
0x00026e1f: add [rax-0x73], cl; add eax, 0x162c37; ret;
0x00026e20: lea rax, [rip+0x162c37]; ret;
0x00026e21: lea eax, [rip+0x162c37]; ret;
0x00026e22: add eax, 0x162c37; ret;
0x00026e24: sub al, 0x16; add bl, al; nop [rax+rax]; lea rax, [rip+0x1649d5]; ret;
0x00026e26: add bl, al; nop [rax+rax]; lea rax, [rip+0x1649d5]; ret;
0x00026e28: nop [rax+rax]; lea rax, [rip+0x1649d5]; ret;
0x00026e2a: test [rax], al; add [rax], al; add [rax], al; lea rax, [rip+0x1649d5]; ret;
0x00026e2b: add [rax], al; add [rax], al; add [rax-0x73], cl; add eax, 0x1649d5; ret;
0x00026e2c: add [rax], al; add [rax], al; lea rax, [rip+0x1649d5]; ret;
0x00026e2d: add [rax], al; add [rax-0x73], cl; add eax, 0x1649d5; ret;
0x00026e2e: add [rax], al; lea rax, [rip+0x1649d5]; ret;
0x00026e2f: add [rax-0x73], cl; add eax, 0x1649d5; ret;
0x00026e30: lea rax, [rip+0x1649d5]; ret;
0x00026e31: lea eax, [rip+0x1649d5]; ret;
0x00026e32: add eax, 0x1649d5; ret;
0x00026e8b: add [rbx+0xf74fff8], al; add rsp, 0x90; pop rbx; pop rbp; pop r12; ret;
0x00026e8e: push qword ptr [rdi+rcx+0x48]; add esp, 0x90; pop rbx; pop rbp; pop r12; ret;
0x00026e90: cmovs eax, [rcx+0x90c4]; add [rbx+0x5d], bl; pop r12; ret;
0x00026ec3: sahf; sub edx, [rsi]; add [rdi], cl; xchg ebp, eax; ret;
0x00026ec4: sub edx, [rsi]; add [rdi], cl; xchg ebp, eax; ret;
0x00026ec6: add [rdi], cl; xchg ebp, eax; ret;
0x00026ed5: add [rax], eax; add [rcx], dh; shr al, 0xf1; iretd;
0x00026ed7: add [rcx], dh; shr al, 0xf1; iretd;
0x00026ed9: shr al, 0xf1; iretd;
0x00026f71: in al, 0xff; dec dword ptr [rax-0x3f]; enter 0x6411, 0x48; xor eax, [0x30]; call rax;
0x00026fa4: add rsp, 0x28; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00026fa5: add esp, 0x28; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00026fa7: sub [rax-0x3f], cl; enter 0x6411, 0x48; xor eax, [0x30]; jmp rax;
0x00026fb7: nop [rax+rax]; mov rax, [rip+0x196ea9]; add rax, fs:[0]; ret;
0x00026fb8: nop [rax+rax]; mov rax, [rip+0x196ea9]; add rax, fs:[0]; ret;
0x00026fba: test [rax], al; add [rax], al; add [rax], al; mov rax, [rip+0x196ea9]; add rax, fs:[0]; ret;
0x00026fbb: add [rax], al; add [rax], al; add [rax-0x75], cl; add eax, 0x196ea9; add rax, fs:[0]; ret;
0x00026fbc: add [rax], al; add [rax], al; mov rax, [rip+0x196ea9]; add rax, fs:[0]; ret;
0x00026fbd: add [rax], al; add [rax-0x75], cl; add eax, 0x196ea9; add rax, fs:[0]; ret;
0x00026fbe: add [rax], al; mov rax, [rip+0x196ea9]; add rax, fs:[0]; ret;
0x00026fbf: add [rax-0x75], cl; add eax, 0x196ea9; add rax, fs:[0]; ret;
0x00026fc0: mov rax, [rip+0x196ea9]; add rax, fs:[0]; ret;
0x00026fc1: mov eax, [rip+0x196ea9]; add rax, fs:[0]; ret;
0x00026fc2: add eax, 0x196ea9; add rax, fs:[0]; ret;
0x00026fc3: test eax, 0x6400196e; add rax, [0]; ret;
0x00026fc4: outsb dx, [rsi]; sbb [rax], eax; add rax, fs:[0]; ret;
0x00026fc5: sbb [rax], eax; add rax, fs:[0]; ret;
0x00027042: add [rax], al; add [rbp+0x31], dh; add rsp, 0x38; pop rbx; pop rbp; ret;
0x00027044: add [rbp+0x31], dh; add rsp, 0x38; pop rbx; pop rbp; ret;
0x000270fa: add [rbx+0x747708f8], al; lea rdx, [rip+0x148ef9]; mov eax, eax; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000270fd: or [rdi+0x74], dh; lea rdx, [rip+0x148ef9]; mov eax, eax; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x00027100: lea rdx, [rip+0x148ef9]; mov eax, eax; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x00027101: lea edx, [rip+0x148ef9]; mov eax, eax; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x00027102: adc eax, 0x148ef9; mov eax, eax; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x00027103: stc; mov ss, [rax+rax]; mov eax, eax; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x00027104: mov ss, [rax+rax]; mov eax, eax; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x00027105: adc al, 0; mov eax, eax; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x00027107: mov eax, eax; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x0002726c: add eax, 0xc0850000; setne al; add rsp, 8; movzx eax, al; neg eax; ret;
0x0002726e: add [rbp-0x3f6af040], al; add rsp, 8; movzx eax, al; neg eax; ret;
0x0002726f: test eax, eax; setne al; add rsp, 8; movzx eax, al; neg eax; ret;
0x00027270: ror byte ptr [rdi], 0x95; ror byte ptr [rax-0x7d], 0xc4; or [rdi], cl; mov dh, 0xc0; neg eax; ret;
0x0002727c: fadd st, st(3); xchg ax, ax; mov rax, [rip+0x196be9]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret;
0x0002727e: xchg ax, ax; mov rax, [rip+0x196be9]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret;
0x0002727f: nop; mov rax, [rip+0x196be9]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret;
0x00027282: add eax, 0x196be9; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret;
0x00027284: imul ebx, [rcx], 0; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret;
0x00027285: sbb [rax], eax; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret;
0x000272cf: rol byte ptr [rax+0xf00117f], 0xb6; adc [r15], r9b; xchg ebp, eax; ret;
0x000272d3: add [rdi], cl; mov dh, 0x47; adc [rdi], cl; xchg ebp, eax; ret;
0x000272d5: mov dh, 0x47; adc [rdi], cl; xchg ebp, eax; ret;
0x000272d6: adc [r15], r9b; xchg ebp, eax; ret;
0x000272d7: adc [rdi], cl; xchg ebp, eax; ret;
0x00027348: mov al, [0x415c415bd8658d48]; pop rbp; pop r14; pop r15; pop rbp; ret;
0x0002745b: cmp al, ch; iretd;
0x0002753c: xor [rcx+0x19], ch; add [rbp-0x73], cl; jmp qword ptr [esp+eax*2-0x75];
0x0002753d: imul ebx, [rcx], 0x678d4d00; jmp qword ptr [rsp+rax*2-0x75];
0x0002753f: add [rbp-0x73], cl; jmp qword ptr [esp+eax*2-0x75];
0x00027542: jmp qword ptr [esp+eax*2-0x75];
0x000276ad: mov rdx, rbp; push 0; mov r9, r14; mov rsi, [rsp+0x18]; xor r8d, r8d; call rbx;
0x000276ae: mov edx, ebp; push 0; mov r9, r14; mov rsi, [rsp+0x18]; xor r8d, r8d; call rbx;
0x000276b0: push 0; mov r9, r14; mov rsi, [rsp+0x18]; xor r8d, r8d; call rbx;
0x000276b1: add [rbp-0x77], cl; int1; mov rsi, [rsp+0x18]; xor r8d, r8d; call rbx;
0x000276b2: mov r9, r14; mov rsi, [rsp+0x18]; xor r8d, r8d; call rbx;
0x000276b3: mov ecx, esi; mov rsi, [rsp+0x18]; xor r8d, r8d; call rbx;
0x000276b4: int1; mov rsi, [rsp+0x18]; xor r8d, r8d; call rbx;
0x000276b5: mov rsi, [rsp+0x18]; xor r8d, r8d; call rbx;
0x000276b6: mov esi, [rsp+0x18]; xor r8d, r8d; call rbx;
0x000276b8: and al, 0x18; xor r8d, r8d; call rbx;
0x000276ba: xor r8d, r8d; call rbx;
0x000276bb: xor eax, eax; call rbx;
0x00027724: add [rbx+0x314500d0], al; shl byte ptr [rcx], 0xc9; xor edx, edx; push rax; call rbx;
0x00027725: adc eax, 0; xor r8d, r8d; xor ecx, ecx; xor edx, edx; push rax; call rbx;
0x00027726: rol byte ptr [rax], 1; xor r8d, r8d; xor ecx, ecx; xor edx, edx; push rax; call rbx;
0x00027727: add [rbp+0x31], al; shl byte ptr [rcx], 0xc9; xor edx, edx; push rax; call rbx;
0x00027728: xor r8d, r8d; xor ecx, ecx; xor edx, edx; push rax; call rbx;
0x00027729: xor eax, eax; xor ecx, ecx; xor edx, edx; push rax; call rbx;
0x0002772a: shl byte ptr [rcx], 0xc9; xor edx, edx; push rax; call rbx;
0x0002772b: xor ecx, ecx; xor edx, edx; push rax; call rbx;
0x0002772c: leave; xor edx, edx; push rax; call rbx;
0x0002772d: xor edx, edx; push rax; call rbx;
0x00027741: add [rax], eax; add [rax], al; add [rax-0x7d], cl; ret 0x4801;
0x0002786e: xchg ax, ax; add rsp, 8; pop rbx; pop rbp; ret;
0x0002786f: nop; add rsp, 8; pop rbx; pop rbp; ret;
0x00027877: nop [rax+rax]; mov rax, [rip+0x198dc1]; ret;
0x00027878: nop [rax+rax]; mov rax, [rip+0x198dc1]; ret;
0x0002787a: test [rax], al; add [rax], al; add [rax], al; mov rax, [rip+0x198dc1]; ret;
0x0002787b: add [rax], al; add [rax], al; add [rax-0x75], cl; add eax, 0x198dc1; ret;
0x0002787c: add [rax], al; add [rax], al; mov rax, [rip+0x198dc1]; ret;
0x0002787d: add [rax], al; add [rax-0x75], cl; add eax, 0x198dc1; ret;
0x0002787e: add [rax], al; mov rax, [rip+0x198dc1]; ret;
0x0002787f: add [rax-0x75], cl; add eax, 0x198dc1; ret;
0x00027880: mov rax, [rip+0x198dc1]; ret;
0x00027881: mov eax, [rip+0x198dc1]; ret;
0x00027882: add eax, 0x198dc1; ret;
0x00027883: ror dword ptr [rbp+0xfc30019], 0x1f; test [rax], al; add [rax], al; add [rax], al; mov rax, [rip+0x198db9]; ret;
0x00027884: lea ebx, [rcx]; add bl, al; nop [rax+rax]; mov rax, [rip+0x198db9]; ret;
0x00027886: add bl, al; nop [rax+rax]; mov rax, [rip+0x198db9]; ret;
0x00027888: nop [rax+rax]; mov rax, [rip+0x198db9]; ret;
0x0002788a: test [rax], al; add [rax], al; add [rax], al; mov rax, [rip+0x198db9]; ret;
0x0002788b: add [rax], al; add [rax], al; add [rax-0x75], cl; add eax, 0x198db9; ret;
0x0002788c: add [rax], al; add [rax], al; mov rax, [rip+0x198db9]; ret;
0x0002788d: add [rax], al; add [rax-0x75], cl; add eax, 0x198db9; ret;
0x0002788e: add [rax], al; mov rax, [rip+0x198db9]; ret;
0x0002788f: add [rax-0x75], cl; add eax, 0x198db9; ret;
0x00027890: mov rax, [rip+0x198db9]; ret;
0x00027891: mov eax, [rip+0x198db9]; ret;
0x00027892: add eax, 0x198db9; ret;
0x00027895: sbb [rax], eax; ret;
0x000278d1: mov edi, ebp; adc [rax], al; mov rdi, rbx; call rbp;
0x000278d2: std; adc [rax], al; mov rdi, rbx; call rbp;
0x000278d3: adc [rax], al; mov rdi, rbx; call rbp;
0x000278d5: mov rdi, rbx; call rbp;
0x000278d6: mov edi, ebx; call rbp;
0x000278e0: add [rax], al; mov qword ptr [rbx], 0; add rsp, 8; pop rbx; pop rbp; ret;
0x00027a57: cld; adc [rax], al; mov rdi, rbx; call r12;
0x00027c9e: call qword ptr [rax+0x50bd8b4c];
0x00027d2e: call qword ptr [rax+0x14673945];
0x00027f03: add ebp, eax; call rbx;
0x00028029: xor esi, esi; adc [rax], al; mov rax, [rbp-0x70]; mov rdi, r12; call rax;
0x0002802a: not byte ptr [rax]; add [rax-0x75], cl; xchg r8d, eax; mov rdi, r12; call rax;
0x0002802b: adc [rax], al; mov rax, [rbp-0x70]; mov rdi, r12; call rax;
0x0002802c: add [rax-0x75], cl; xchg r8d, eax; mov rdi, r12; call rax;
0x0002802d: mov rax, [rbp-0x70]; mov rdi, r12; call rax;
0x0002802e: mov eax, [rbp-0x70]; mov rdi, r12; call rax;
0x0002802f: xchg r8d, eax; mov rdi, r12; call rax;
0x00028030: nop; mov rdi, r12; call rax;
0x000281a0: cld; iretd;
0x00028226: add [rax], al; add al, ch; ret 0xd1e;
0x00028228: add al, ch; ret 0xd1e;
0x0002822a: ret 0xd1e;
0x00028242: cmovs eax, [rbx-0x76b30f20]; and [rax-0x77], cl; ret;
0x000282c2: ror byte ptr [rax-0x73], 0x5b; jmp qword ptr [rax+rcx*2+0x33];
0x000282c5: pop rbx; jmp qword ptr [rax+rcx*2+0x33];
0x000283a2: inc dword ptr [rbp+0x31]; imul al; insd [rdi], dx; iretd;
0x000283a5: imul al; insd [rdi], dx; iretd;
0x000283a7: insd [rdi], dx; iretd;
0x000283b0: iretd;
0x000283b7: sub al, 0x5b; iretd;
0x000283b9: pop rbx; iretd;
0x0002841d: call qword ptr [rcx+0xe];
0x000286ca: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x197f66; syscall;
0x000286d0: add [rax], al; add [rax-0x73], cl; cmp eax, 0x197f66; syscall;
0x000286d2: add [rax-0x73], cl; cmp eax, 0x197f66; syscall;
0x000286d5: cmp eax, 0x197f66; syscall;
0x00028706: mov byte ptr [rip-0x1af1700], 0xff; jmp qword ptr [rsi-0x70];
0x000287c2: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x197e6e; syscall;
0x000287c8: add [rax], al; add [rax-0x73], cl; cmp eax, 0x197e6e; syscall;
0x000287ca: add [rax-0x73], cl; cmp eax, 0x197e6e; syscall;
0x000287cd: cmp eax, 0x197e6e; syscall;
0x0002888e: imul eax; int3; in eax, dx; adc [rax], al; mov rdi, rbx; call r14;
0x00028890: int3; in eax, dx; adc [rax], al; mov rdi, rbx; call r14;
0x00028891: in eax, dx; adc [rax], al; mov rdi, rbx; call r14;
0x00028892: adc [rax], al; mov rdi, rbx; call r14;
0x00028894: mov rdi, rbx; call r14;
0x00028895: mov edi, ebx; call r14;
0x00028900: sub eax, 0x197d3a; add [rbx+0x31], ebx; rcr byte ptr [rbp+0x41], 0x5c; pop r13; pop r14; ret;
0x00028903: sbb [rax], eax; add [rbx+0x31], ebx; rcr byte ptr [rbp+0x41], 0x5c; pop r13; pop r14; ret;
0x00028905: add [rbx+0x31], ebx; rcr byte ptr [rbp+0x41], 0x5c; pop r13; pop r14; ret;
0x0002892e: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x197d02; syscall;
0x00028934: add [rax], al; add [rax-0x73], cl; cmp eax, 0x197d02; syscall;
0x00028936: add [rax-0x73], cl; cmp eax, 0x197d02; syscall;
0x00028939: cmp eax, 0x197d02; syscall;
0x0002893c: sbb [rax], eax; syscall;
0x00028963: add al, ch; xlat [rbx]; ret;
0x000289eb: add [rcx], dh; div byte ptr [rcx]; jmp qword ptr [rsi+0xf];
0x000289ed: div byte ptr [rcx]; jmp qword ptr [rsi+0xf];
0x00028abe: add al, [rax]; add [rax-0x7d], cl; ret;
0x00028b53: adc [rbx+0x19], edi; add [rax-0x77], cl; ret 0x2b48;
0x00028b56: add [rax-0x77], cl; ret 0x2b48;
0x00028ef7: inc dword ptr [rcx+0xf]; mov dh, 4; and al, 0x84; ror byte ptr [rdi], 0x84; ret;
0x00028efa: mov dh, 4; and al, 0x84; ror byte ptr [rdi], 0x84; ret;
0x00028efc: and al, 0x84; ror byte ptr [rdi], 0x84; ret;
0x00028f67: ror byte ptr [rcx-0x77], 1; dec byte ptr [rbp-0x77]; iretd;
0x00028f6a: dec byte ptr [rbp-0x77]; iretd;
0x00029319: add [rax], al; add [rax-0x77], cl; fsubp st(0), st; lodsb [rsi]; ret;
0x0002931b: add [rax-0x77], cl; fsubp st(0), st; lodsb [rsi]; ret;
0x0002931e: fsubp st(0), st; lodsb [rsi]; ret;
0x0002933e: mov ebp, 0x8948ffff; ret 0x8548;
0x000294d0: add [rbx-0x8373], cl; jmp qword ptr [rcx+rcx*4+8];
0x000294d2: lea edi, [rdi+rdi*8-1]; jmp qword ptr [rcx+rcx*4+8];
0x000294de: call qword ptr [rax+0x35448d4b];
0x00029582: mov esi, 0x83480142; ret 0x4801;
0x000296a9: mov rax, [rip+0x1980ef]; lea rsi, [rip-0x4d8]; lea rdi, [rip+0x196fbd]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x000296aa: mov rax, [rip+0x1980ef]; lea rsi, [rip-0x4d8]; lea rdi, [rip+0x196fbd]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x000296ab: mov eax, [rip+0x1980ef]; lea rsi, [rip-0x4d8]; lea rdi, [rip+0x196fbd]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x000296ac: add eax, 0x1980ef; lea rsi, [rip-0x4d8]; lea rdi, [rip+0x196fbd]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x000296ae: sbb byte ptr [rcx], 0; lea rsi, [rip-0x4d8]; lea rdi, [rip+0x196fbd]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x000296af: sbb [rax], eax; lea rsi, [rip-0x4d8]; lea rdi, [rip+0x196fbd]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x000296b0: add [rax-0x73], cl; xor eax, 0xfffffb28; lea rdi, [rip+0x196fbd]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x000296b1: lea rsi, [rip-0x4d8]; lea rdi, [rip+0x196fbd]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x000296b2: lea esi, [rip-0x4d8]; lea rdi, [rip+0x196fbd]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x000296b3: xor eax, 0xfffffb28; lea rdi, [rip+0x196fbd]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x000296b7: dec dword ptr [rax-0x73]; cmp eax, 0x196fbd; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x000296b8: lea rdi, [rip+0x196fbd]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x000296b9: lea edi, [rip+0x196fbd]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x000296ba: cmp eax, 0x196fbd; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x000296bb: mov ebp, 0x4800196f; ror eax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x000296bc: outsd dx, [rsi]; sbb [rax], eax; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x000296bd: sbb [rax], eax; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x000296e8: inc dword ptr [rbx+0x196f8c0d]; add [rdx], al; add rsp, 8; ret;
0x000296e9: or dword ptr [rip+0x196f8c], 2; add rsp, 8; ret;
0x000296eb: mov [rdi+0x19], gs; add [rdx], al; add rsp, 8; ret;
0x00029739: shl byte ptr [rsp+rbp+0x48], 0x83; ret;
0x00029772: add eax, 0x2444c749; cmp [rax], al; add [rax], al; add [rax+1], cl; ret;
0x00029777: cmp [rax], al; add [rax], al; add [rax+1], cl; ret;
0x000297ed: nop [rax]; movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret;
0x000297ef: add [rax+0xf], al; mov dh, 0xc6; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret;
0x000297f0: movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret;
0x000297f1: movzx eax, dh; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret;
0x000297f2: mov dh, 0xc6; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret;
0x000297f3: mov byte ptr [rax-0x7c], 0xf6; mov edx, 0xffffffff; cmovs eax, edx; ret;
0x000297f4: test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret;
0x000297f5: test dh, dh; mov edx, 0xffffffff; cmovs eax, edx; ret;
0x000297f6: idiv byte ptr [rdx-1]; cmovs eax, edx; ret;
0x000297f7: mov edx, 0xffffffff; cmovs eax, edx; ret;
0x000297fb: dec dword ptr [rdi]; ret 0x41c3;
0x000298f6: mov dh, 0x70; dec dword ptr [rax-0x7d]; ret 0x4001;
0x000298f8: dec dword ptr [rax-0x7d]; ret 0x4001;
0x00029901: add ecx, [rcx+0x39]; ret;
0x0002997d: ror dword ptr [rax-0x77], 1; enter 0xf49, 0x4f; ret 0x8548;
0x00029980: enter 0xf49, 0x4f; ret 0x8548;
0x00029a37: push rsi; push 0; mov rsi, [rsp+0x50]; mov rdi, [rsp+0x58]; mov rax, [rsp+0x20]; call rax;
0x00029a38: push 0; mov rsi, [rsp+0x50]; mov rdi, [rsp+0x58]; mov rax, [rsp+0x20]; call rax;
0x00029a3a: mov rsi, [rsp+0x50]; mov rdi, [rsp+0x58]; mov rax, [rsp+0x20]; call rax;
0x00029a3b: mov esi, [rsp+0x50]; mov rdi, [rsp+0x58]; mov rax, [rsp+0x20]; call rax;
0x00029a3d: and al, 0x50; mov rdi, [rsp+0x58]; mov rax, [rsp+0x20]; call rax;
0x00029a3e: push rax; mov rdi, [rsp+0x58]; mov rax, [rsp+0x20]; call rax;
0x00029a3f: mov rdi, [rsp+0x58]; mov rax, [rsp+0x20]; call rax;
0x00029a40: mov edi, [rsp+0x58]; mov rax, [rsp+0x20]; call rax;
0x00029a42: and al, 0x58; mov rax, [rsp+0x20]; call rax;
0x00029a43: pop rax; mov rax, [rsp+0x20]; call rax;
0x00029f3d: mov rcx, [rsp+0x28]; mov rdx, [rsp+0x68]; mov rsi, [rsp+0x58]; mov rdi, [rsp+0x60]; mov rax, [rsp+0x18]; call rax;
0x00029f3e: mov ecx, [rsp+0x28]; mov rdx, [rsp+0x68]; mov rsi, [rsp+0x58]; mov rdi, [rsp+0x60]; mov rax, [rsp+0x18]; call rax;
0x00029f40: and al, 0x28; mov rdx, [rsp+0x68]; mov rsi, [rsp+0x58]; mov rdi, [rsp+0x60]; mov rax, [rsp+0x18]; call rax;
0x00029f42: mov rdx, [rsp+0x68]; mov rsi, [rsp+0x58]; mov rdi, [rsp+0x60]; mov rax, [rsp+0x18]; call rax;
0x00029f43: mov edx, [rsp+0x68]; mov rsi, [rsp+0x58]; mov rdi, [rsp+0x60]; mov rax, [rsp+0x18]; call rax;
0x00029f44: push rsp; and al, 0x68; mov rsi, [rsp+0x58]; mov rdi, [rsp+0x60]; mov rax, [rsp+0x18]; call rax;
0x00029f45: and al, 0x68; mov rsi, [rsp+0x58]; mov rdi, [rsp+0x60]; mov rax, [rsp+0x18]; call rax;
0x00029f46: push 0x24748b48; pop rax; mov rdi, [rsp+0x60]; mov rax, [rsp+0x18]; call rax;
0x00029f47: mov rsi, [rsp+0x58]; mov rdi, [rsp+0x60]; mov rax, [rsp+0x18]; call rax;
0x00029f48: mov esi, [rsp+0x58]; mov rdi, [rsp+0x60]; mov rax, [rsp+0x18]; call rax;
0x00029f4a: and al, 0x58; mov rdi, [rsp+0x60]; mov rax, [rsp+0x18]; call rax;
0x00029f4b: pop rax; mov rdi, [rsp+0x60]; mov rax, [rsp+0x18]; call rax;
0x00029f4c: mov rdi, [rsp+0x60]; mov rax, [rsp+0x18]; call rax;
0x00029f4d: mov edi, [rsp+0x60]; mov rax, [rsp+0x18]; call rax;
0x00029f4f: and al, 0x60; mov rax, [rsp+0x18]; call rax;
0x0002a50d: push 0; mov r9, [rsp+0x18]; mov rsi, [rsp+0x50]; mov rdi, [rsp+0x58]; mov rax, [rsp+0x28]; call rax;
0x0002a50e: add [rbx+rcx*4+0x4c], cl; and al, 0x18; mov rsi, [rsp+0x50]; mov rdi, [rsp+0x58]; mov rax, [rsp+0x28]; call rax;
0x0002a50f: mov r9, [rsp+0x18]; mov rsi, [rsp+0x50]; mov rdi, [rsp+0x58]; mov rax, [rsp+0x28]; call rax;
0x0002a510: mov ecx, [rsp+0x18]; mov rsi, [rsp+0x50]; mov rdi, [rsp+0x58]; mov rax, [rsp+0x28]; call rax;
0x0002a512: and al, 0x18; mov rsi, [rsp+0x50]; mov rdi, [rsp+0x58]; mov rax, [rsp+0x28]; call rax;
0x0002a514: mov rsi, [rsp+0x50]; mov rdi, [rsp+0x58]; mov rax, [rsp+0x28]; call rax;
0x0002a515: mov esi, [rsp+0x50]; mov rdi, [rsp+0x58]; mov rax, [rsp+0x28]; call rax;
0x0002a517: and al, 0x50; mov rdi, [rsp+0x58]; mov rax, [rsp+0x28]; call rax;
0x0002a518: push rax; mov rdi, [rsp+0x58]; mov rax, [rsp+0x28]; call rax;
0x0002a519: mov rdi, [rsp+0x58]; mov rax, [rsp+0x28]; call rax;
0x0002a51a: mov edi, [rsp+0x58]; mov rax, [rsp+0x28]; call rax;
0x0002a51c: and al, 0x58; mov rax, [rsp+0x28]; call rax;
0x0002a51d: pop rax; mov rax, [rsp+0x28]; call rax;
0x0002a67b: and [rax+0x39], cl; ret 0xf48;
0x0002a763: push 0x5c415d5b; pop r13; pop r14; pop r15; jmp rax;
0x0002a8b7: ror dword ptr [rbp-0x77], cl; iretd;
0x0002aa2b: add [rax], al; add [rax], al; add [rbp+0x31], al; ror byte ptr [rax+0x39], cl; ret;
0x0002aa2d: add [rax], al; add [rbp+0x31], al; ror byte ptr [rax+0x39], cl; ret;
0x0002aa2f: add [rbp+0x31], al; ror byte ptr [rax+0x39], cl; ret;
0x0002aa38: add eax, [rcx+0xf]; xchg ebp, eax; ret 0x8348;
0x0002aadb: mov rcx, [rsp+0x38]; mov rdx, [rsp+0x68]; mov rsi, [rsp+0x58]; mov rdi, [rsp+0x60]; mov rax, [rsp+0x20]; call rax;
0x0002aadc: mov ecx, [rsp+0x38]; mov rdx, [rsp+0x68]; mov rsi, [rsp+0x58]; mov rdi, [rsp+0x60]; mov rax, [rsp+0x20]; call rax;
0x0002aade: and al, 0x38; mov rdx, [rsp+0x68]; mov rsi, [rsp+0x58]; mov rdi, [rsp+0x60]; mov rax, [rsp+0x20]; call rax;
0x0002aae0: mov rdx, [rsp+0x68]; mov rsi, [rsp+0x58]; mov rdi, [rsp+0x60]; mov rax, [rsp+0x20]; call rax;
0x0002aae1: mov edx, [rsp+0x68]; mov rsi, [rsp+0x58]; mov rdi, [rsp+0x60]; mov rax, [rsp+0x20]; call rax;
0x0002aae2: push rsp; and al, 0x68; mov rsi, [rsp+0x58]; mov rdi, [rsp+0x60]; mov rax, [rsp+0x20]; call rax;
0x0002aae3: and al, 0x68; mov rsi, [rsp+0x58]; mov rdi, [rsp+0x60]; mov rax, [rsp+0x20]; call rax;
0x0002aae4: push 0x24748b48; pop rax; mov rdi, [rsp+0x60]; mov rax, [rsp+0x20]; call rax;
0x0002aae5: mov rsi, [rsp+0x58]; mov rdi, [rsp+0x60]; mov rax, [rsp+0x20]; call rax;
0x0002aae6: mov esi, [rsp+0x58]; mov rdi, [rsp+0x60]; mov rax, [rsp+0x20]; call rax;
0x0002aae8: and al, 0x58; mov rdi, [rsp+0x60]; mov rax, [rsp+0x20]; call rax;
0x0002aae9: pop rax; mov rdi, [rsp+0x60]; mov rax, [rsp+0x20]; call rax;
0x0002aaea: mov rdi, [rsp+0x60]; mov rax, [rsp+0x20]; call rax;
0x0002aaeb: mov edi, [rsp+0x60]; mov rax, [rsp+0x20]; call rax;
0x0002aaed: and al, 0x60; mov rax, [rsp+0x20]; call rax;
0x0002ab47: add [rcx-0x77], cl; add ecx, [rax+0x39]; ret;
0x0002ab4a: add ecx, [rax+0x39]; ret;
0x0002abfe: test esi, edi; add al, [rax]; add [rcx-0x75], cl; add ecx, [rax+0x63]; ror byte ptr [rax+0x39], cl; ret;
0x0002ac00: add al, [rax]; add [rcx-0x75], cl; add ecx, [rax+0x63]; ror byte ptr [rax+0x39], cl; ret;
0x0002ac02: add [rcx-0x75], cl; add ecx, [rax+0x63]; ror byte ptr [rax+0x39], cl; ret;
0x0002ac05: add ecx, [rax+0x63]; ror byte ptr [rax+0x39], cl; ret;
0x0002ac08: ror byte ptr [rax+0x39], cl; ret;
0x0002ac26: cli; add al, 0x74; and [rcx-0x77], cl; add eax, [rdi+rcx-0x4a]; dec dword ptr [rax-0x7d]; ret 0x4401;
0x0002ac27: add al, 0x74; and [rcx-0x77], cl; add eax, [rdi+rcx-0x4a]; dec dword ptr [rax-0x7d]; ret 0x4401;
0x0002ac29: and [rcx-0x77], cl; add eax, [rdi+rcx-0x4a]; dec dword ptr [rax-0x7d]; ret 0x4401;
0x0002ac2c: add eax, [rdi+rcx-0x4a]; dec dword ptr [rax-0x7d]; ret 0x4401;
0x0002ac2f: mov dh, 0x40; dec dword ptr [rax-0x7d]; ret 0x4401;
0x0002ac31: dec dword ptr [rax-0x7d]; ret 0x4401;
0x0002af1a: add al, ch; add [rdi-0x76bf0000], dl; ret 0x4ee9;
0x0002af1c: add [rdi-0x76bf0000], dl; ret 0x4ee9;
0x0002af1f: add [rcx-0x77], al; ret 0x4ee9;
0x0002af22: ret 0x4ee9;
0x0002afe8: add [rax], al; add [rax+0xf], cl; ret 0x3145;
0x0002afea: add [rax+0xf], cl; ret 0x3145;
0x0002b0dd: push 0; mov r9, [rsp+0x30]; mov rsi, [rsp+0x40]; mov rdi, [rsp+0x48]; mov rax, [rsp+0x20]; call rax;
0x0002b0de: add [rbx+rcx*4+0x4c], cl; and al, 0x30; mov rsi, [rsp+0x40]; mov rdi, [rsp+0x48]; mov rax, [rsp+0x20]; call rax;
0x0002b0df: mov r9, [rsp+0x30]; mov rsi, [rsp+0x40]; mov rdi, [rsp+0x48]; mov rax, [rsp+0x20]; call rax;
0x0002b0e0: mov ecx, [rsp+0x30]; mov rsi, [rsp+0x40]; mov rdi, [rsp+0x48]; mov rax, [rsp+0x20]; call rax;
0x0002b0e2: and al, 0x30; mov rsi, [rsp+0x40]; mov rdi, [rsp+0x48]; mov rax, [rsp+0x20]; call rax;
0x0002b0e4: mov rsi, [rsp+0x40]; mov rdi, [rsp+0x48]; mov rax, [rsp+0x20]; call rax;
0x0002b0e5: mov esi, [rsp+0x40]; mov rdi, [rsp+0x48]; mov rax, [rsp+0x20]; call rax;
0x0002b0e7: and al, 0x40; mov rdi, [rsp+0x48]; mov rax, [rsp+0x20]; call rax;
0x0002b1a8: add eax, 0xe9000000; iretd;
0x0002b22c: add [rax], eax; add [rdi], cl; mov dh, 0x71; dec dword ptr [rbp+rcx*4+0x59]; dec dword ptr [rcx-0x77]; iretd;
0x0002b22e: add [rdi], cl; mov dh, 0x71; dec dword ptr [rbp+rcx*4+0x59]; dec dword ptr [rcx-0x77]; iretd;
0x0002b230: mov dh, 0x71; dec dword ptr [rbp+rcx*4+0x59]; dec dword ptr [rcx-0x77]; iretd;
0x0002b232: dec dword ptr [rbp+rcx*4+0x59]; dec dword ptr [rcx-0x77]; iretd;
0x0002b235: pop rcx; dec dword ptr [rcx-0x77]; iretd;
0x0002b374: inc dword ptr [rcx-0x77]; ret 0xf9e9;
0x0002b377: ret 0xf9e9;
0x0002b56a: add [rdi], ecx; test edi, edx; add al, [rax]; add [rcx+0x39], cl; iretd;
0x0002b56c: test edi, edx; add al, [rax]; add [rcx+0x39], cl; iretd;
0x0002b56d: xlat [rbx]; add al, [rax]; add [rcx+0x39], cl; iretd;
0x0002b56e: add al, [rax]; add [rcx+0x39], cl; iretd;
0x0002b5aa: rcl byte ptr [rax+0x6a], 0; mov r9, [rsp+0x18]; mov rcx, [rsp+0x28]; mov rsi, [rsp+0x58]; mov rdi, [rsp+0x50]; call r14;
0x0002b5ac: push 0; mov r9, [rsp+0x18]; mov rcx, [rsp+0x28]; mov rsi, [rsp+0x58]; mov rdi, [rsp+0x50]; call r14;
0x0002b5ad: add [rbx+rcx*4+0x4c], cl; and al, 0x18; mov rcx, [rsp+0x28]; mov rsi, [rsp+0x58]; mov rdi, [rsp+0x50]; call r14;
0x0002b5ae: mov r9, [rsp+0x18]; mov rcx, [rsp+0x28]; mov rsi, [rsp+0x58]; mov rdi, [rsp+0x50]; call r14;
0x0002b5af: mov ecx, [rsp+0x18]; mov rcx, [rsp+0x28]; mov rsi, [rsp+0x58]; mov rdi, [rsp+0x50]; call r14;
0x0002b5b1: and al, 0x18; mov rcx, [rsp+0x28]; mov rsi, [rsp+0x58]; mov rdi, [rsp+0x50]; call r14;
0x0002b5b2: sbb [rax-0x75], cl; and al, 0x28; mov rsi, [rsp+0x58]; mov rdi, [rsp+0x50]; call r14;
0x0002b5b3: mov rcx, [rsp+0x28]; mov rsi, [rsp+0x58]; mov rdi, [rsp+0x50]; call r14;
0x0002b5b4: mov ecx, [rsp+0x28]; mov rsi, [rsp+0x58]; mov rdi, [rsp+0x50]; call r14;
0x0002b5b6: and al, 0x28; mov rsi, [rsp+0x58]; mov rdi, [rsp+0x50]; call r14;
0x0002b5b8: mov rsi, [rsp+0x58]; mov rdi, [rsp+0x50]; call r14;
0x0002b5b9: mov esi, [rsp+0x58]; mov rdi, [rsp+0x50]; call r14;
0x0002b5bb: and al, 0x58; mov rdi, [rsp+0x50]; call r14;
0x0002b5bc: pop rax; mov rdi, [rsp+0x50]; call r14;
0x0002b5bd: mov rdi, [rsp+0x50]; call r14;
0x0002b5be: mov edi, [rsp+0x50]; call r14;
0x0002b5c0: and al, 0x50; call r14;
0x0002b5c1: push rax; call r14;
0x0002bb0d: dec dword ptr [rax-0x75]; mov [rax+rax*4], fs; add [rax], al; add [rax-0x77], cl; ret 0x8b48;
0x0002bb10: mov [rax+rax*4], fs; add [rax], al; add [rax-0x77], cl; ret 0x8b48;
0x0002bb11: and al, 0x80; add [rax], al; add [rax-0x77], cl; ret 0x8b48;
0x0002bb12: add byte ptr [rax], 0; add [rax-0x77], cl; ret 0x8b48;
0x0002bd25: dec dword ptr [rax-0x77]; ret 0xebe9;
0x0002bd28: ret 0xebe9;
0x0002c0fa: add [rax-0x7d], cl; rol byte ptr [rax+rcx*2], 0x89; test [rax+rax*4], ah; add [rax], al; add [rax+0x39], cl; ret;
0x0002c0fd: rol byte ptr [rax+rcx*2], 0x89; test [rax+rax*4], ah; add [rax], al; add [rax+0x39], cl; ret;
0x0002c101: test [rax+rax*4], ah; add [rax], al; add [rax+0x39], cl; ret;
0x0002c16a: push rax; push 0; mov r9, [rsp+0x40]; mov rsi, [rsp+0x58]; mov rdi, [rsp+0x50]; call r15;
0x0002c16b: push 0; mov r9, [rsp+0x40]; mov rsi, [rsp+0x58]; mov rdi, [rsp+0x50]; call r15;
0x0002c16c: add [rbx+rcx*4+0x4c], cl; and al, 0x40; mov rsi, [rsp+0x58]; mov rdi, [rsp+0x50]; call r15;
0x0002c16d: mov r9, [rsp+0x40]; mov rsi, [rsp+0x58]; mov rdi, [rsp+0x50]; call r15;
0x0002c16e: mov ecx, [rsp+0x40]; mov rsi, [rsp+0x58]; mov rdi, [rsp+0x50]; call r15;
0x0002c170: and al, 0x40; mov rsi, [rsp+0x58]; mov rdi, [rsp+0x50]; call r15;
0x0002c172: mov rsi, [rsp+0x58]; mov rdi, [rsp+0x50]; call r15;
0x0002c173: mov esi, [rsp+0x58]; mov rdi, [rsp+0x50]; call r15;
0x0002c175: and al, 0x58; mov rdi, [rsp+0x50]; call r15;
0x0002c176: pop rax; mov rdi, [rsp+0x50]; call r15;
0x0002c177: mov rdi, [rsp+0x50]; call r15;
0x0002c178: mov edi, [rsp+0x50]; call r15;
0x0002c17a: and al, 0x50; call r15;
0x0002c17b: push rax; call r15;
0x0002c2be: call qword ptr [rax+0x41d78945];
0x0002c330: sbb [rbx-0x3c7cb6fe], ecx; add [rbx+0x394907e0], eax; ret;
0x0002c336: add [rbx+0x394907e0], eax; ret;
0x0002c344: fmul st, dword ptr [rax-0x7d]; rol byte ptr [rax+rcx*2], 0x39; ret;
0x0002c36a: test [rax+rax*4], ah; add [rax], al; add [rdi], cl; mov dh, 0x50; dec dword ptr [rcx-0x7d]; ret;
0x0002c36b: and al, 0x80; add [rax], al; add [rdi], cl; mov dh, 0x50; dec dword ptr [rcx-0x7d]; ret;
0x0002c36c: add byte ptr [rax], 0; add [rdi], cl; mov dh, 0x50; dec dword ptr [rcx-0x7d]; ret;
0x0002c36d: add [rax], al; add [rdi], cl; mov dh, 0x50; dec dword ptr [rcx-0x7d]; ret;
0x0002c36f: add [rdi], cl; mov dh, 0x50; dec dword ptr [rcx-0x7d]; ret;
0x0002c371: mov dh, 0x50; dec dword ptr [rcx-0x7d]; ret;
0x0002c372: push rax; dec dword ptr [rcx-0x7d]; ret;
0x0002c481: fimul st, word ptr [rdi]; sbb dword ptr [rsp+rax-0x7cb80000], 0xffffffc0; add [rax-0x7d], ecx; ret 0x4901;
0x0002c483: sbb dword ptr [rsp+rax-0x7cb80000], 0xffffffc0; add [rax-0x7d], ecx; ret 0x4901;
0x0002c48b: add [rax-0x7d], ecx; ret 0x4901;
0x0002c4ae: call qword ptr [rax-0x162876bb];
0x0002c4fb: add [rax], eax; add [rcx+0x39], cl; ret 0x860f;
0x0002c4fd: add [rcx+0x39], cl; ret 0x860f;
0x0002c6d0: xchg [rsi], dl; add al, [rax]; add [rbp+0xe880fd2], al; add al, [rax]; add bh, dh; ret 0xf800;
0x0002c6d2: add al, [rax]; add [rbp+0xe880fd2], al; add al, [rax]; add bh, dh; ret 0xf800;
0x0002c6d4: add [rbp+0xe880fd2], al; add al, [rax]; add bh, dh; ret 0xf800;
0x0002c6d6: ror byte ptr [rdi], cl; mov [rsi], cl; add al, [rax]; add bh, dh; ret 0xf800;
0x0002c6d8: mov [rsi], cl; add al, [rax]; add bh, dh; ret 0xf800;
0x0002c6da: add al, [rax]; add bh, dh; ret 0xf800;
0x0002c6dc: add bh, dh; ret 0xf800;
0x0002c6e2: dec dword ptr [rdi]; test [rcx], dh; add al, [rax]; add bh, dh; ret 0;
0x0002c6e4: test [rcx], dh; add al, [rax]; add bh, dh; ret 0;
0x0002c6f1: add al, gs:[rax]; add bh, dh; ret 0;
0x0002c6f2: add al, [rax]; add bh, dh; ret 0;
0x0002c6f4: add bh, dh; ret 0;
0x0002c7a9: sbb [rcx-0x77], al; ret 0x840f;
0x0002cdb8: sar byte ptr [rcx-0x2b], 0x2d; ret 0;
0x0002ce22: ret 0xd341;
0x0002ce34: inc dword ptr [rcx+0x7fff9]; add [rdi], cl; xchg bh, bl; add [rax], al; add [rbp-0x77], cl; ret;
0x0002ce3a: add [rdi], cl; xchg bh, bl; add [rax], al; add [rbp-0x77], cl; ret;
0x0002ce3c: xchg bh, bl; add [rax], al; add [rbp-0x77], cl; ret;
0x0002cea8: push 0x4c006a56; mov ecx, [rsp+0x38]; mov rsi, [rsp+0x48]; mov rdi, [rsp+0x40]; mov rax, [rsp+0x28]; call rax;
0x0002ceaa: push 0; mov r9, [rsp+0x38]; mov rsi, [rsp+0x48]; mov rdi, [rsp+0x40]; mov rax, [rsp+0x28]; call rax;
0x0002ceab: add [rbx+rcx*4+0x4c], cl; and al, 0x38; mov rsi, [rsp+0x48]; mov rdi, [rsp+0x40]; mov rax, [rsp+0x28]; call rax;
0x0002ceac: mov r9, [rsp+0x38]; mov rsi, [rsp+0x48]; mov rdi, [rsp+0x40]; mov rax, [rsp+0x28]; call rax;
0x0002cead: mov ecx, [rsp+0x38]; mov rsi, [rsp+0x48]; mov rdi, [rsp+0x40]; mov rax, [rsp+0x28]; call rax;
0x0002ceaf: and al, 0x38; mov rsi, [rsp+0x48]; mov rdi, [rsp+0x40]; mov rax, [rsp+0x28]; call rax;
0x0002ceb1: mov rsi, [rsp+0x48]; mov rdi, [rsp+0x40]; mov rax, [rsp+0x28]; call rax;
0x0002ceb2: mov esi, [rsp+0x48]; mov rdi, [rsp+0x40]; mov rax, [rsp+0x28]; call rax;
0x0002ceb4: and al, 0x48; mov rdi, [rsp+0x40]; mov rax, [rsp+0x28]; call rax;
0x0002ceb6: mov rdi, [rsp+0x40]; mov rax, [rsp+0x28]; call rax;
0x0002ceb7: mov edi, [rsp+0x40]; mov rax, [rsp+0x28]; call rax;
0x0002ceb9: and al, 0x40; mov rax, [rsp+0x28]; call rax;
0x0002cebb: mov rax, [rsp+0x28]; call rax;
0x0002cebc: mov eax, [rsp+0x28]; call rax;
0x0002cebe: and al, 0x28; call rax;
0x0002d051: stc; add [rdi], ecx; xchg [rax+rcx-0x157f0000], dl; ret 0;
0x0002d052: add [rdi], ecx; xchg [rax+rcx-0x157f0000], dl; ret 0;
0x0002d054: xchg [rax+rcx-0x157f0000], dl; ret 0;
0x0002d238: rol dword ptr [rdx+rdx*8-0x157e2c87], 1; ret 0;
0x0002d2e7: or [rbp+0x31850fd2], al; add [rax], eax; add [rbp-0x77], cl; iretd;
0x0002d2e9: ror byte ptr [rdi], cl; test [rcx], esi; add [rax], eax; add [rbp-0x77], cl; iretd;
0x0002d2eb: test [rcx], esi; add [rax], eax; add [rbp-0x77], cl; iretd;
0x0002d4fd: fisttp dword ptr [rcx-0x7d], st; ret;
0x0002d8fe: adc eax, 0x3d8d4800; cli; ret;
0x0002daad: sgdt [rax]; add [rax-0x77], cl; shr bl, 1; ret 0x2e66;
0x0002daae: add [rax], eax; add [rax-0x77], cl; shr bl, 1; ret 0x2e66;
0x0002dab0: add [rax-0x77], cl; shr bl, 1; ret 0x2e66;
0x0002dab3: shr bl, 1; ret 0x2e66;
0x0002db27: push 0; mov r9, [rsp+0x30]; mov rsi, [rsp+0x50]; mov rdi, [rsp+0x48]; mov rax, [rsp+0x20]; call rax;
0x0002db28: add [rbx+rcx*4+0x4c], cl; and al, 0x30; mov rsi, [rsp+0x50]; mov rdi, [rsp+0x48]; mov rax, [rsp+0x20]; call rax;
0x0002db29: mov r9, [rsp+0x30]; mov rsi, [rsp+0x50]; mov rdi, [rsp+0x48]; mov rax, [rsp+0x20]; call rax;
0x0002dca6: add al, [rcx-0x77]; ret 0x8341;
0x0002dd3f: or [rcx+0x29], cl; iretd;
0x0002df1b: add al, ch; jmp qword ptr [rsi];
0x0002df77: dec byte ptr [rcx+0x29]; iretd;
0x0002ee19: test byte ptr [rdi], 0x85; push rax; add al, [rax]; add [rbp+0x31], al; ror byte ptr [rbp-0x77], cl; iretd;
0x0002ee1c: push rax; add al, [rax]; add [rbp+0x31], al; ror byte ptr [rbp-0x77], cl; iretd;
0x0002ee1d: add al, [rax]; add [rbp+0x31], al; ror byte ptr [rbp-0x77], cl; iretd;
0x0002ee1f: add [rbp+0x31], al; ror byte ptr [rbp-0x77], cl; iretd;
0x0002ee22: ror byte ptr [rbp-0x77], cl; iretd;
0x0002ee86: ror dword ptr [rdi], cl; test bl, ah; add al, [rax]; add [rax-0x73], cl; add cl, [rax+0x39]; ret;
0x0002ee88: test bl, ah; add al, [rax]; add [rax-0x73], cl; add cl, [rax+0x39]; ret;
0x0002ee8a: add al, [rax]; add [rax-0x73], cl; add cl, [rax+0x39]; ret;
0x0002ee8c: add [rax-0x73], cl; add cl, [rax+0x39]; ret;
0x0002eea4: add [rax], eax; add [rax-0x77], cl; ret 0xb7eb;
0x0002eea6: add [rax-0x77], cl; ret 0xb7eb;
0x0002eea9: ret 0xb7eb;
0x0002eec3: ret 0xbb41;
0x0002ef27: push 0; mov rcx, [rsp+0x30]; mov rsi, [rsp+0x50]; mov rdi, [rsp+0x48]; mov rax, [rsp+0x20]; call rax;
0x0002ef28: add [rax-0x75], cl; and al, 0x30; mov rsi, [rsp+0x50]; mov rdi, [rsp+0x48]; mov rax, [rsp+0x20]; call rax;
0x0002ef29: mov rcx, [rsp+0x30]; mov rsi, [rsp+0x50]; mov rdi, [rsp+0x48]; mov rax, [rsp+0x20]; call rax;
0x0002ef2a: mov ecx, [rsp+0x30]; mov rsi, [rsp+0x50]; mov rdi, [rsp+0x48]; mov rax, [rsp+0x20]; call rax;
0x0002ef2c: and al, 0x30; mov rsi, [rsp+0x50]; mov rdi, [rsp+0x48]; mov rax, [rsp+0x20]; call rax;
0x0002ef2e: mov rsi, [rsp+0x50]; mov rdi, [rsp+0x48]; mov rax, [rsp+0x20]; call rax;
0x0002ef2f: mov esi, [rsp+0x50]; mov rdi, [rsp+0x48]; mov rax, [rsp+0x20]; call rax;
0x0002ef31: and al, 0x50; mov rdi, [rsp+0x48]; mov rax, [rsp+0x20]; call rax;
0x0002ef32: push rax; mov rdi, [rsp+0x48]; mov rax, [rsp+0x20]; call rax;
0x0002ef33: mov rdi, [rsp+0x48]; mov rax, [rsp+0x20]; call rax;
0x0002ef34: mov edi, [rsp+0x48]; mov rax, [rsp+0x20]; call rax;
0x0002ef36: and al, 0x48; mov rax, [rsp+0x20]; call rax;
0x0002ef38: mov rax, [rsp+0x20]; call rax;
0x0002ef39: mov eax, [rsp+0x20]; call rax;
0x0002f0df: ret 0x8d08;
0x0002f125: add al, [rbx+rcx*4+0x5d]; adc [rbp-0x77], cl; iretd;
0x0002f128: pop rbp; adc [rbp-0x77], cl; iretd;
0x0002f129: adc [rbp-0x77], cl; iretd;
0x0002f421: xchg ebx, eax; test al, 0x15; add al, ch; not byte ptr [rcx]; add [rcx-0x77], al; ret;
0x0002f422: test al, 0x15; add al, ch; not byte ptr [rcx]; add [rcx-0x77], al; ret;
0x0002f424: add al, ch; not byte ptr [rcx]; add [rcx-0x77], al; ret;
0x0002f426: not byte ptr [rcx]; add [rcx-0x77], al; ret;
0x0002f443: adc eax, 0x3d8d4800; test al, 0x15; add al, ch; iretd;
0x0002f449: test al, 0x15; add al, ch; iretd;
0x0002f643: add [rax-0x77], cl; xchg esp, eax; and al, 0x80; add [rax], al; add [rax+0x39], cl; ret;
0x0002f646: xchg esp, eax; and al, 0x80; add [rax], al; add [rax+0x39], cl; ret;
0x0002f647: and al, 0x80; add [rax], al; add [rax+0x39], cl; ret;
0x0002f648: add byte ptr [rax], 0; add [rax+0x39], cl; ret;
0x0002f6b2: rcl byte ptr [rax+0x6a], 0; mov r9, [rsp+0x18]; mov rcx, [rsp+0x28]; mov rsi, [rsp+0x60]; mov rdi, [rsp+0x58]; call r13;
0x0002f6b4: push 0; mov r9, [rsp+0x18]; mov rcx, [rsp+0x28]; mov rsi, [rsp+0x60]; mov rdi, [rsp+0x58]; call r13;
0x0002f6b5: add [rbx+rcx*4+0x4c], cl; and al, 0x18; mov rcx, [rsp+0x28]; mov rsi, [rsp+0x60]; mov rdi, [rsp+0x58]; call r13;
0x0002f6b6: mov r9, [rsp+0x18]; mov rcx, [rsp+0x28]; mov rsi, [rsp+0x60]; mov rdi, [rsp+0x58]; call r13;
0x0002f6b7: mov ecx, [rsp+0x18]; mov rcx, [rsp+0x28]; mov rsi, [rsp+0x60]; mov rdi, [rsp+0x58]; call r13;
0x0002f6b9: and al, 0x18; mov rcx, [rsp+0x28]; mov rsi, [rsp+0x60]; mov rdi, [rsp+0x58]; call r13;
0x0002f6ba: sbb [rax-0x75], cl; and al, 0x28; mov rsi, [rsp+0x60]; mov rdi, [rsp+0x58]; call r13;
0x0002f6bb: mov rcx, [rsp+0x28]; mov rsi, [rsp+0x60]; mov rdi, [rsp+0x58]; call r13;
0x0002f6bc: mov ecx, [rsp+0x28]; mov rsi, [rsp+0x60]; mov rdi, [rsp+0x58]; call r13;
0x0002f6be: and al, 0x28; mov rsi, [rsp+0x60]; mov rdi, [rsp+0x58]; call r13;
0x0002f6c0: mov rsi, [rsp+0x60]; mov rdi, [rsp+0x58]; call r13;
0x0002f6c1: mov esi, [rsp+0x60]; mov rdi, [rsp+0x58]; call r13;
0x0002f6c3: and al, 0x60; mov rdi, [rsp+0x58]; call r13;
0x0002f6c5: mov rdi, [rsp+0x58]; call r13;
0x0002f6c6: mov edi, [rsp+0x58]; call r13;
0x0002f6c8: and al, 0x58; call r13;
0x0002f6c9: pop rax; call r13;
0x0002f888: adc [rbx-0x3d7cb6fe], ecx; add [rbx+0x394907e0], eax; ret 0xe872;
0x0002f88a: add cl, [rcx-0x7d]; ret 0x8301;
0x0002f88e: add [rbx+0x394907e0], eax; ret 0xe872;
0x0002f894: ret 0xe872;
0x0002f89c: ror byte ptr [rax-0x7d], 1; rol byte ptr [rax+rcx*2], 0x39; ret;
0x0002f8cd: add [rcx-0x7d], ecx; ret 0x4801;
0x0002fbb5: add eax, [rax]; add [rcx+0x39], cl; iretd;
0x0002fc54: add [rbx+0x5d], bl; pop r12; pop r13; pop r14; pop r15; jmp rax;
0x0002fd6a: add [rcx-0x7d], ecx; ret 0x4c01;
0x000303bd: add [rax-0x7d], cl; rol byte ptr [rax+rcx*2], 0x83; ret;
0x000303c0: rol byte ptr [rax+rcx*2], 0x83; ret;
0x000303f4: push 0; mov r8, [rsp+0x48]; mov rcx, [rsp+0x18]; mov rsi, [rsp+0x40]; mov rdi, [rsp+0x38]; call r15;
0x000303f5: add [rbx+rcx*4+0x44], cl; and al, 0x48; mov rcx, [rsp+0x18]; mov rsi, [rsp+0x40]; mov rdi, [rsp+0x38]; call r15;
0x000303f6: mov r8, [rsp+0x48]; mov rcx, [rsp+0x18]; mov rsi, [rsp+0x40]; mov rdi, [rsp+0x38]; call r15;
0x000303f7: mov eax, [rsp+0x48]; mov rcx, [rsp+0x18]; mov rsi, [rsp+0x40]; mov rdi, [rsp+0x38]; call r15;
0x000303f9: and al, 0x48; mov rcx, [rsp+0x18]; mov rsi, [rsp+0x40]; mov rdi, [rsp+0x38]; call r15;
0x000303fb: mov rcx, [rsp+0x18]; mov rsi, [rsp+0x40]; mov rdi, [rsp+0x38]; call r15;
0x000303fc: mov ecx, [rsp+0x18]; mov rsi, [rsp+0x40]; mov rdi, [rsp+0x38]; call r15;
0x000303fe: and al, 0x18; mov rsi, [rsp+0x40]; mov rdi, [rsp+0x38]; call r15;
0x00030400: mov rsi, [rsp+0x40]; mov rdi, [rsp+0x38]; call r15;
0x00030401: mov esi, [rsp+0x40]; mov rdi, [rsp+0x38]; call r15;
0x00030403: and al, 0x40; mov rdi, [rsp+0x38]; call r15;
0x00030405: mov rdi, [rsp+0x38]; call r15;
0x00030406: mov edi, [rsp+0x38]; call r15;
0x00030408: and al, 0x38; call r15;
0x00030556: add [rdx], ch; xor r9d, r9d; mov rsi, [rsp+0x40]; mov rdi, [rsp+0x38]; lea r8, [rsp+0xa0]; call r15;
0x00030557: push 0; xor r9d, r9d; mov rsi, [rsp+0x40]; mov rdi, [rsp+0x38]; lea r8, [rsp+0xa0]; call r15;
0x00030558: add [rbp+0x31], al; leave; mov rsi, [rsp+0x40]; mov rdi, [rsp+0x38]; lea r8, [rsp+0xa0]; call r15;
0x00030559: xor r9d, r9d; mov rsi, [rsp+0x40]; mov rdi, [rsp+0x38]; lea r8, [rsp+0xa0]; call r15;
0x0003055a: xor ecx, ecx; mov rsi, [rsp+0x40]; mov rdi, [rsp+0x38]; lea r8, [rsp+0xa0]; call r15;
0x0003055b: leave; mov rsi, [rsp+0x40]; mov rdi, [rsp+0x38]; lea r8, [rsp+0xa0]; call r15;
0x0003055c: mov rsi, [rsp+0x40]; mov rdi, [rsp+0x38]; lea r8, [rsp+0xa0]; call r15;
0x0003055d: mov esi, [rsp+0x40]; mov rdi, [rsp+0x38]; lea r8, [rsp+0xa0]; call r15;
0x0003055f: and al, 0x40; mov rdi, [rsp+0x38]; lea r8, [rsp+0xa0]; call r15;
0x00030561: mov rdi, [rsp+0x38]; lea r8, [rsp+0xa0]; call r15;
0x00030562: mov edi, [rsp+0x38]; lea r8, [rsp+0xa0]; call r15;
0x00030564: and al, 0x38; lea r8, [rsp+0xa0]; call r15;
0x00030566: lea r8, [rsp+0xa0]; call r15;
0x00030567: lea eax, [rsp+0xa0]; call r15;
0x0003056c: add [rax], al; call r15;
0x000307b2: out 0xe8, eax; test al, 0x6e; adc [rax], al; mov rdi, rbx; call r12;
0x000307b4: test al, 0x6e; adc [rax], al; mov rdi, rbx; call r12;
0x000307b5: outsb dx, [rsi]; adc [rax], al; mov rdi, rbx; call r12;
0x000307b6: adc [rax], al; mov rdi, rbx; call r12;
0x000307f8: and al, 0xce; or eax, 0x401f0f00; add [rax-0x75], cl; add eax, 0x18fe89; ret;
0x000307fa: or eax, 0x401f0f00; add [rax-0x75], cl; add eax, 0x18fe89; ret;
0x000307fc: nop [rax]; mov rax, [rip+0x18fe89]; ret;
0x000307ff: add [rax-0x75], cl; add eax, 0x18fe89; ret;
0x00030800: mov rax, [rip+0x18fe89]; ret;
0x00030801: mov eax, [rip+0x18fe89]; ret;
0x00030802: add eax, 0x18fe89; ret;
0x00030803: mov esi, edi; sbb [rax], al; ret;
0x000308e0: ret 0x3573;
0x00030928: add al, ch; ret 0xc82;
0x0003092a: ret 0xc82;
0x00030954: add [rax], al; add rsp, 0xb8; mov eax, r8d; pop rbp; pop r12; ret;
0x00030956: add rsp, 0xb8; mov eax, r8d; pop rbp; pop r12; ret;
0x00030957: add esp, 0xb8; mov eax, r8d; pop rbp; pop r12; ret;
0x00030959: mov eax, 0x44000000; mov eax, eax; pop rbp; pop r12; ret;
0x0003095a: add [rax], al; add [rcx+rcx*4-0x40], al; pop rbp; pop r12; ret;
0x0003095b: add [rax], al; mov eax, r8d; pop rbp; pop r12; ret;
0x0003095c: add [rcx+rcx*4-0x40], al; pop rbp; pop r12; ret;
0x00030a75: add [rbp+0x35], dh; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret;
0x00030a77: xor eax, 0x20c48348; pop rbx; pop rbp; pop r12; ret;
0x00030aa3: adc ebp, ebx; ret 0xffb8;
0x00030d57: dec dword ptr [rax+0x63]; ror byte ptr [rcx-0x2d94b73b], 1; push 0xffffffffe9fa014c; ret 0xfffe;
0x00030d5a: ror byte ptr [rcx-0x2d94b73b], 1; push 0xffffffffe9fa014c; ret 0xfffe;
0x00030d60: push 0xffffffffe9fa014c; ret 0xfffe;
0x00030e6e: call qword ptr [rax+0x76148d48];
0x00030fae: call qword ptr [rax+0xf2e66c3];
0x00030ff3: or eax, [rbx+0x438901e8]; or [rbx+0x1974fdf8], al; pop rbx; ret;
0x00030ff8: or [r11+0x1974fdf8], al; pop rbx; ret;
0x00030ff9: or [rbx+0x1974fdf8], al; pop rbx; ret;
0x0003100c: sub eax, 1; mov [rdx+8], eax; pop rbx; ret;
0x0003100f: mov [rdx+8], eax; pop rbx; ret;
0x0003101e: push qword ptr [rsi+rbx*8-0x18]; push 0x6a; adc [rax], al; mov qword ptr [rbx+0x10], 0; pop rbx; ret;
0x00031020: fsubp st(0), st; push 0x6a; adc [rax], al; mov qword ptr [rbx+0x10], 0; pop rbx; ret;
0x00031022: push 0x6a; adc [rax], al; mov qword ptr [rbx+0x10], 0; pop rbx; ret;
0x00031024: adc [rax], al; mov qword ptr [rbx+0x10], 0; pop rbx; ret;
0x00031026: mov qword ptr [rbx+0x10], 0; pop rbx; ret;
0x00031027: mov dword ptr [rbx+0x10], 0; pop rbx; ret;
0x00031094: adc [rbx-0x72f00108], al; ret 0;
0x00031147: add [rax], al; add [rax-0x3f], cl; ret 0x4911;
0x00031149: add [rax-0x3f], cl; ret 0x4911;
0x0003114c: ret 0x4911;
0x0003114e: mov [r12+0x20], rdx; add rsp, 0x10; pop rbp; pop r12; pop r13; ret;
0x0003114f: mov [rsp+0x20], edx; add rsp, 0x10; pop rbp; pop r12; pop r13; ret;
0x00031151: and al, 0x20; add rsp, 0x10; pop rbp; pop r12; pop r13; ret;
0x0003115f: add [rax-0x7b], cl; shl byte ptr [rdx+rdx-0x7b], cl; sar byte ptr [rdx], 0xf; ret 0xc083;
0x00031162: shl byte ptr [rdx+rdx-0x7b], cl; sar byte ptr [rdx], 0xf; ret 0xc083;
0x00031166: sar byte ptr [rdx], 0xf; ret 0xc083;
0x00031169: add [rax], al; add [rdi], cl; ret 0xc083;
0x0003116b: add [rdi], cl; ret 0xc083;
0x00031177: add rsp, 0x10; mov rax, r12; pop rbp; pop r12; pop r13; ret;
0x00031178: add esp, 0x10; mov rax, r12; pop rbp; pop r12; pop r13; ret;
0x000311fa: xor r12d, r12d; mov rax, r12; pop rbp; pop r12; pop r13; ret;
0x000311fb: xor esp, esp; mov rax, r12; pop rbp; pop r12; pop r13; ret;
0x000311fc: in al, 0x4c; mov eax, esp; pop rbp; pop r12; pop r13; ret;
0x000312bb: cli; sub al, 0xf; xchg esp, eax; ret 0xd108;
0x000312bc: sub al, 0xf; xchg esp, eax; ret 0xd108;
0x000312c9: shl byte ptr [rbp-0x2c], 0x41; mov byte ptr [rsp], 0; pop rbx; pop rbp; pop r12; ret;
0x000312cc: mov byte ptr [r12], 0; pop rbx; pop rbp; pop r12; ret;
0x000312cd: mov byte ptr [rsp], 0; pop rbx; pop rbp; pop r12; ret;
0x000312ce: add al, 0x24; add [rbx+0x5d], bl; pop r12; ret;
0x000312cf: and al, 0; pop rbx; pop rbp; pop r12; ret;
0x000316b3: cmp al, 0xff; jmp qword ptr [rsi+0x2e];
0x00031917: lea r13, [rbx+0x10]; mov rax, [rip+0x18fe8e]; lea rdi, [rip+0x18ed77]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00031918: lea ebp, [rbx+0x10]; mov rax, [rip+0x18fe8e]; lea rdi, [rip+0x18ed77]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00031919: imul edx, [rax], 0x48; mov eax, [rip+0x18fe8e]; lea rdi, [rip+0x18ed77]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0003191a: adc [rax-0x75], cl; add eax, 0x18fe8e; lea rdi, [rip+0x18ed77]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0003191d: add eax, 0x18fe8e; lea rdi, [rip+0x18ed77]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00031921: add [rax-0x73], cl; cmp eax, 0x18ed77; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00031924: cmp eax, 0x18ed77; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00031959: shl byte ptr [rsp+0x48], 0x8b; add eax, 0x18fe55; lea rdi, [rip+0x18ed36]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0003195b: and al, 0x48; mov eax, [rip+0x18fe55]; lea rdi, [rip+0x18ed36]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0003195e: add eax, 0x18fe55; lea rdi, [rip+0x18ed36]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00031962: add [rax-0x73], cl; cmp eax, 0x18ed36; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00031965: cmp eax, 0x18ed36; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00031966: in eax, dx; sbb [rax], al; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00031967: in eax, dx; sbb [rax], al; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00031b5c: add eax, 0x18fc57; lea rdi, [rip+0x18eb38]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00031b5e: cld; sbb [rax], al; lea rdi, [rip+0x18eb38]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00031b60: add [rax-0x73], cl; cmp eax, 0x18eb38; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00031b63: cmp eax, 0x18eb38; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00031b64: cmp bl, ch; sbb [rax], al; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00031bd5: add [rbp+0x481d74ff], al; mov eax, [rip+0x18fbd7]; lea rdi, [rip+0x18eab8]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00031bd7: push qword ptr [rbp+rbx+0x48]; mov eax, [rip+0x18fbd7]; lea rdi, [rip+0x18eab8]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00031bdc: add eax, 0x18fbd7; lea rdi, [rip+0x18eab8]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00031be0: add [rax-0x73], cl; cmp eax, 0x18eab8; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00031be3: cmp eax, 0x18eab8; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00031be4: mov eax, 0x480018ea; ror eax, 0x11; xor rax, fs:[0x30]; call rax;
0x00031bfe: call qword ptr [rax-0x66fa72b8];
0x00031c1d: add [rbp+0x481e74c9], al; mov eax, [rip+0x18fb8f]; lea rdi, [rip+0x18ea70]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00031c24: add eax, 0x18fb8f; lea rdi, [rip+0x18ea70]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00031c26: sti; sbb [rax], al; lea rdi, [rip+0x18eab8]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00031c28: add [rax-0x73], cl; cmp eax, 0x18ea70; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00031c2b: cmp eax, 0x18ea70; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00031d78: shl byte ptr [rbp+rbx+0x48], 0x8b; add eax, 0x18fa36; lea rdi, [rip+0x18e917]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00031d7d: add eax, 0x18fa36; lea rdi, [rip+0x18e917]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00031d7e: cli; sbb [rax], al; lea rdi, [rip+0x18e917]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00031d7f: cli; sbb [rax], al; lea rdi, [rip+0x18e917]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00031d81: add [rax-0x73], cl; cmp eax, 0x18e917; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00031d84: cmp eax, 0x18e917; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00031db6: ret 0x15;
0x00031f87: add [rax-0x7d], cl; rol byte ptr [rcx], 0x83; ret 0x4801;
0x00031f8a: rol byte ptr [rcx], 0x83; ret 0x4801;
0x00031fbd: test [rsi+0x48fffff9], bh; mov eax, [rip+0x18f7ef]; lea rdi, [rip+0x18e6d0]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00031fbe: mov esi, 0x48fffff9; mov eax, [rip+0x18f7ef]; lea rdi, [rip+0x18e6d0]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00031fc1: dec dword ptr [rax-0x75]; add eax, 0x18f7ef; lea rdi, [rip+0x18e6d0]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00031fc4: add eax, 0x18f7ef; lea rdi, [rip+0x18e6d0]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00031fc6: neg dword ptr [rax]; add [rax-0x73], cl; cmp eax, 0x18e6d0; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00031fc8: add [rax-0x73], cl; cmp eax, 0x18e6d0; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00031fcb: cmp eax, 0x18e6d0; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00031fcc: shl dh, 1; sbb [rax], al; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00031fcd: out 0x18, al; add [rax-0x3f], cl; enter 0x6411, 0x48; xor eax, [0x30]; call rax;
0x000322ae: add [rcx-0x8373], cl; dec dword ptr [rcx+1]; ret 0x8d48;
0x000322b0: lea edi, [rdi+rdi*8-1]; dec dword ptr [rcx+1]; ret 0x8d48;
0x000322b4: dec dword ptr [rcx+1]; ret 0x8d48;
0x000325b6: mov dword ptr [rcx], 0xfff4788; mov dh, 0x53; add [rax-0x7d], ecx; ret;
0x000325b7: add [rax-0x49f000b9], ecx; push rbx; add [rax-0x7d], ecx; ret;
0x000325b9: dec dword ptr [r15]; mov dh, 0x53; add [rax-0x7d], ecx; ret;
0x000325ba: dec dword ptr [rdi]; mov dh, 0x53; add [rax-0x7d], ecx; ret;
0x0003273e: call qword ptr [rax+0x247c8b49];
0x00032843: add eax, 0x2e660000; nop [rax+rax]; ret;
0x00032844: add [rax], al; nop [rax+rax]; ret;
0x00032845: add [rsi+0x2e], ah; nop [rax+rax]; ret;
0x0003292e: and [rbx-0x78f0f303], eax; cmp [rcx], al; add [rax], al; movsxd rcx, [rdi+r9*4]; add rcx, rdi; jmp rcx;
0x00032933: xchg [rax], edi; add [rax], eax; add [rdx+0x63], cl; or al, 0x8f; add rcx, rdi; jmp rcx;
0x00032934: cmp [rcx], al; add [rax], al; movsxd rcx, [rdi+r9*4]; add rcx, rdi; jmp rcx;
0x00032935: add [rax], eax; add [rdx+0x63], cl; or al, 0x8f; add rcx, rdi; jmp rcx;
0x00032936: add [rax], al; movsxd rcx, [rdi+r9*4]; add rcx, rdi; jmp rcx;
0x00032937: add [rdx+0x63], cl; or al, 0x8f; add rcx, rdi; jmp rcx;
0x00032938: movsxd rcx, [rdi+r9*4]; add rcx, rdi; jmp rcx;
0x00032939: movsxd ecx, [rdi+rcx*4]; add rcx, rdi; jmp rcx;
0x0003293a: or al, 0x8f; add rcx, rdi; jmp rcx;
0x0003293c: add rcx, rdi; jmp rcx;
0x0003293d: add ecx, edi; jmp rcx;
0x0003293e: stc; jmp rcx;
0x00032a3e: call qword ptr [rax+0x9e3d48];
0x00032ddb: adc [rsi+0xc], ebx; add cl, ch; ret 0xfffd;
0x00032e4f: and al, 0xff; jmp qword ptr [rsi+0xf];
0x00033073: add [rcx-0x77], cl; ret 0x850f;
0x00033086: add [rax], al; add [rcx], dh; ror byte ptr [rax-0x77], cl; fldpi; or ecx, [rax-0x7d]; ret 0x8301;
0x00033088: add [rcx], dh; ror byte ptr [rax-0x77], cl; fldpi; or ecx, [rax-0x7d]; ret 0x8301;
0x0003308a: ror byte ptr [rax-0x77], cl; fldpi; or ecx, [rax-0x7d]; ret 0x8301;
0x0003308d: fldpi; or ecx, [rax-0x7d]; ret 0x8301;
0x0003308f: or ecx, [rax-0x7d]; ret 0x8301;
0x000330aa: or [rbp+rcx*4+4], al; cmp [rbp+0x39], al; ret 0x820f;
0x000330ae: cmp [rbp+0x39], al; ret 0x820f;
0x00033330: mov cl, [rax+0x39]; ror byte ptr [rax+0xf], 1; ret 0x8b41;
0x00033333: ror byte ptr [rax+0xf], 1; ret 0x8b41;
0x00033344: ror byte ptr [rax+0xf], 1; ret 0x3949;
0x000335b8: movzx eax, byte ptr [rax]; cmp al, 0xff; cmove eax, edx; mov [rip+0x18d2d7], al; lea rax, [rip+0x18d273]; ret;
0x000335b9: mov dh, 0; cmp al, 0xff; cmove eax, edx; mov [rip+0x18d2d7], al; lea rax, [rip+0x18d273]; ret;
0x000335ba: add [rdi+rdi*8], bh; cmove eax, edx; mov [rip+0x18d2d7], al; lea rax, [rip+0x18d273]; ret;
0x000335bb: cmp al, 0xff; cmove eax, edx; mov [rip+0x18d2d7], al; lea rax, [rip+0x18d273]; ret;
0x000335bc: dec dword ptr [rdi]; ret 0x588;
0x000335bd: cmove eax, edx; mov [rip+0x18d2d7], al; lea rax, [rip+0x18d273]; ret;
0x000335bf: ret 0x588;
0x000335c0: mov [rip+0x18d2d7], al; lea rax, [rip+0x18d273]; ret;
0x000335c1: add eax, 0x18d2d7; lea rax, [rip+0x18d273]; ret;
0x000335c2: xlat [rbx]; rcr byte ptr [rax], cl; add [rax-0x73], cl; add eax, 0x18d273; ret;
0x000335c3: rcr byte ptr [rax], cl; add [rax-0x73], cl; add eax, 0x18d273; ret;
0x000335c4: sbb [rax], al; lea rax, [rip+0x18d273]; ret;
0x000335c5: add [rax-0x73], cl; add eax, 0x18d273; ret;
0x000335c6: lea rax, [rip+0x18d273]; ret;
0x000335c7: lea eax, [rip+0x18d273]; ret;
0x000335c8: add eax, 0x18d273; ret;
0x00033603: imul edx, [rip+0x387a3900], 0x8b481376; cli; ret;
0x00033604: imul edx, [rip+0x387a3900], 0x8b481376; cli; ret;
0x00033609: cmp [rsi+0x13], dh; mov rax, [rdx+rdi*8+0x40]; ret;
0x0003360b: adc ecx, [rax-0x75]; cli; ret;
0x0003360c: mov rax, [rdx+rdi*8+0x40]; ret;
0x0003360d: mov eax, [rdx+rdi*8+0x40]; ret;
0x0003360f: cli; ret;
0x00033612: nop [rax+rax]; lea rax, [rip+0x15691e]; ret;
0x00033613: nop [rax+rax]; lea rax, [rip+0x15691e]; ret;
0x00033615: add [rax], r8b; lea rax, [rip+0x15691e]; ret;
0x00033616: add [rax], al; lea rax, [rip+0x15691e]; ret;
0x00033617: add [rax-0x73], cl; add eax, 0x15691e; ret;
0x00033618: lea rax, [rip+0x15691e]; ret;
0x00033619: lea eax, [rip+0x15691e]; ret;
0x0003361a: add eax, 0x15691e; ret;
0x0003361c: imul edx, [rip-0x74b73d00], 0x80c684; add [rax], al; ret;
0x0003361e: add bl, al; mov rax, [rsi+rax*8+0x80]; ret;
0x00033620: mov rax, [rsi+rax*8+0x80]; ret;
0x00033621: mov eax, [rsi+rax*8+0x80]; ret;
0x00033629: nop [rax]; mov rax, [rip+0x18a791]; mov rax, fs:[rax]; mov rax, [rax]; mov eax, [rax+0xa8]; ret;
0x0003362e: add [rax], al; mov rax, [rip+0x18a791]; mov rax, fs:[rax]; mov rax, [rax]; mov eax, [rax+0xa8]; ret;
0x0003362f: add [rax-0x75], cl; add eax, 0x18a791; mov rax, fs:[rax]; mov rax, [rax]; mov eax, [rax+0xa8]; ret;
0x00033630: mov rax, [rip+0x18a791]; mov rax, fs:[rax]; mov rax, [rax]; mov eax, [rax+0xa8]; ret;
0x00033631: mov eax, [rip+0x18a791]; mov rax, fs:[rax]; mov rax, [rax]; mov eax, [rax+0xa8]; ret;
0x00033632: add eax, 0x18a791; mov rax, fs:[rax]; mov rax, [rax]; mov eax, [rax+0xa8]; ret;
0x00033634: cmpsd [rsi], [rdi]; sbb [rax], al; mov rax, fs:[rax]; mov rax, [rax]; mov eax, [rax+0xa8]; ret;
0x00033635: sbb [rax], al; mov rax, fs:[rax]; mov rax, [rax]; mov eax, [rax+0xa8]; ret;
0x00033637: mov rax, fs:[rax]; mov rax, [rax]; mov eax, [rax+0xa8]; ret;
0x00033638: mov rax, [rax]; mov rax, [rax]; mov eax, [rax+0xa8]; ret;
0x00033639: mov eax, [rax]; mov rax, [rax]; mov eax, [rax+0xa8]; ret;
0x0003363b: mov rax, [rax]; mov eax, [rax+0xa8]; ret;
0x0003363c: mov eax, [rax]; mov eax, [rax+0xa8]; ret;
0x0003363e: mov eax, [rax+0xa8]; ret;
0x000338e3: mov [rbp+0x31450018], esp; jmp qword ptr [rdi+rax*8];
0x0003393d: jmp qword ptr [rax+0x110f0018];
0x00033add: inc dword ptr [rax]; add [rax], al; add [rcx-0x1c363], cl; dec dword ptr [rax-0x77]; ret;
0x00033adf: add [rax], al; add [rcx-0x1c363], cl; dec dword ptr [rax-0x77]; ret;
0x00033ae1: add [rcx-0x1c363], cl; dec dword ptr [rax-0x77]; ret;
0x00033be5: add [rbp+0x481d74c9], al; mov eax, [rip+0x18dbbf]; lea rdi, [rip+0x18caa8]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00033bec: add eax, 0x18dbbf; lea rdi, [rip+0x18caa8]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00033bed: mov edi, 0x480018db; lea edi, [rip+0x18caa8]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00033bee: fistp dword ptr [rax], st; add [rax-0x73], cl; cmp eax, 0x18caa8; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00033bf0: add [rax-0x73], cl; cmp eax, 0x18caa8; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00033bf3: cmp eax, 0x18caa8; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00033bf4: test al, 0xca; sbb [rax], al; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00033dd7: test [rbp+0x48fffffa], cl; mov eax, [rip+0x18d9d5]; lea rdi, [rip+0x18c8b6]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00033ddb: dec dword ptr [rax-0x75]; add eax, 0x18d9d5; lea rdi, [rip+0x18c8b6]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00033dde: add eax, 0x18d9d5; lea rdi, [rip+0x18c8b6]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00033de0: fstp dword ptr [rax], st; add [rax-0x73], cl; cmp eax, 0x18c8b6; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00033de2: add [rax-0x73], cl; cmp eax, 0x18c8b6; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00033de5: cmp eax, 0x18c8b6; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00033de6: mov dh, 0xc8; sbb [rax], al; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00033e42: add eax, 0x18d971; lea rdi, [rip+0x18c852]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00033e44: fstp dword ptr [rax], st; add [rax-0x73], cl; cmp eax, 0x18c852; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00033e46: add [rax-0x73], cl; cmp eax, 0x18c852; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00033e49: cmp eax, 0x18c852; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00033e4a: push rdx; enter 0x18, 0x48; ror eax, 0x11; xor rax, fs:[0x30]; call rax;
0x00033e4b: enter 0x18, 0x48; ror eax, 0x11; xor rax, fs:[0x30]; call rax;
0x00034175: add eax, 0x18d63e; lea rdi, [rip+0x18c51f]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00034179: add [rax-0x73], cl; cmp eax, 0x18c51f; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0003417c: cmp eax, 0x18c51f; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000341a2: nop [rax+rax]; mov rax, [rip+0x18d601]; lea rdi, [rip+0x18c4ea]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000341a3: nop [rax+rax]; mov rax, [rip+0x18d601]; lea rdi, [rip+0x18c4ea]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000341a5: add [rax], r8b; mov rax, [rip+0x18d601]; lea rdi, [rip+0x18c4ea]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000341a7: add [rax-0x75], cl; add eax, 0x18d601; lea rdi, [rip+0x18c4ea]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000341aa: add eax, 0x18d601; lea rdi, [rip+0x18c4ea]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000341ab: add esi, edx; sbb [rax], al; lea rdi, [rip+0x18c4ea]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000341ae: add [rax-0x73], cl; cmp eax, 0x18c4ea; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000341b1: cmp eax, 0x18c4ea; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00034204: fucomi st, st(3); or eax, 0x841f0f66; add [rax], al; add [rax], al; add [rax-0x7d], cl; ret;
0x00034239: shl byte ptr [rbp+rbx+0x48], 0x8b; add eax, 0x18d575; lea rdi, [rip+0x18c456]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0003423e: add eax, 0x18d575; lea rdi, [rip+0x18c456]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00034242: add [rax-0x73], cl; cmp eax, 0x18c456; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00034245: cmp eax, 0x18c456; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00034264: adc bh, bh; jmp qword ptr [rsi+0xf];
0x00034267: nop [rax+rax]; mov rax, [rip+0x18d539]; lea rdi, [rip+0x18c422]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00034268: nop [rax+rax]; mov rax, [rip+0x18d539]; lea rdi, [rip+0x18c422]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0003426f: add [rax-0x75], cl; add eax, 0x18d539; lea rdi, [rip+0x18c422]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00034272: add eax, 0x18d539; lea rdi, [rip+0x18c422]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00034273: cmp ebp, edx; sbb [rax], al; lea rdi, [rip+0x18c422]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00034276: add [rax-0x73], cl; cmp eax, 0x18c422; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00034279: cmp eax, 0x18c422; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0003427a: and al, ah; sbb [rax], al; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000342e8: mov rsi, [rdi+0x78]; mov fs:[rcx], rsi; cmp rax, rdx; mov rdx, 0xffffffffffffffff; cmove rax, rdx; ret;
0x000342e9: mov esi, [rdi+0x78]; mov fs:[rcx], rsi; cmp rax, rdx; mov rdx, 0xffffffffffffffff; cmove rax, rdx; ret;
0x000342ec: mov fs:[rcx], rsi; cmp rax, rdx; mov rdx, 0xffffffffffffffff; cmove rax, rdx; ret;
0x000342ed: mov [rcx], rsi; cmp rax, rdx; mov rdx, 0xffffffffffffffff; cmove rax, rdx; ret;
0x000342ee: mov [rcx], esi; cmp rax, rdx; mov rdx, 0xffffffffffffffff; cmove rax, rdx; ret;
0x000342ef: xor [rax+0x39], ecx; ror byte ptr [rax-0x39], 1; ret 0xffff;
0x000342f0: cmp rax, rdx; mov rdx, 0xffffffffffffffff; cmove rax, rdx; ret;
0x000342f1: cmp eax, edx; mov rdx, 0xffffffffffffffff; cmove rax, rdx; ret;
0x000342f3: mov rdx, 0xffffffffffffffff; cmove rax, rdx; ret;
0x000342f4: mov edx, 0xffffffff; cmove rax, rdx; ret;
0x000342f9: dec dword ptr [rax+0xf]; ret 0x90c3;
0x00034332: add al, [rax]; add [rax-0x7f], cl; ret 0x200;
0x00034334: add [rax-0x7f], cl; ret 0x200;
0x000343af: mov rdx, [rip+0x189c22]; mov [rdx], rcx; mov rdx, [rax+0xc0]; mov rax, [rip+0x189a21]; mov [rax], rdx; ret;
0x000343b0: mov edx, [rip+0x189c22]; mov [rdx], rcx; mov rdx, [rax+0xc0]; mov rax, [rip+0x189a21]; mov [rax], rdx; ret;
0x000343b1: adc eax, 0x189c22; mov [rdx], rcx; mov rdx, [rax+0xc0]; mov rax, [rip+0x189a21]; mov [rax], rdx; ret;
0x000343b2: and bl, [rax+rbx+0xa894800]; mov rdx, [rax+0xc0]; mov rax, [rip+0x189a21]; mov [rax], rdx; ret;
0x000343b4: sbb [rax], al; mov [rdx], rcx; mov rdx, [rax+0xc0]; mov rax, [rip+0x189a21]; mov [rax], rdx; ret;
0x000343b6: mov [rdx], rcx; mov rdx, [rax+0xc0]; mov rax, [rip+0x189a21]; mov [rax], rdx; ret;
0x000343b7: mov [rdx], ecx; mov rdx, [rax+0xc0]; mov rax, [rip+0x189a21]; mov [rax], rdx; ret;
0x000343b9: mov rdx, [rax+0xc0]; mov rax, [rip+0x189a21]; mov [rax], rdx; ret;
0x000343ba: mov edx, [rax+0xc0]; mov rax, [rip+0x189a21]; mov [rax], rdx; ret;
0x000343bb: nop; rol byte ptr [rax], 0; add [rax-0x75], cl; add eax, 0x189a21; mov [rax], rdx; ret;
0x000343bc: rol byte ptr [rax], 0; add [rax-0x75], cl; add eax, 0x189a21; mov [rax], rdx; ret;
0x000343bd: add [rax], al; add [rax-0x75], cl; add eax, 0x189a21; mov [rax], rdx; ret;
0x000343be: add [rax], al; mov rax, [rip+0x189a21]; mov [rax], rdx; ret;
0x000343bf: add [rax-0x75], cl; add eax, 0x189a21; mov [rax], rdx; ret;
0x000343c0: mov rax, [rip+0x189a21]; mov [rax], rdx; ret;
0x000343c1: mov eax, [rip+0x189a21]; mov [rax], rdx; ret;
0x000343c2: add eax, 0x189a21; mov [rax], rdx; ret;
0x000343c5: sbb [rax], al; mov [rax], rdx; ret;
0x000343f6: nop [rax+rax]; mov rax, [rip+0x1899c1]; movsxd rdi, edi; mov rax, fs:[rax]; mov rax, [rax+rdi*8+0x80]; ret;
0x000343f7: nop [rax+rax]; mov rax, [rip+0x1899c1]; movsxd rdi, edi; mov rax, fs:[rax]; mov rax, [rax+rdi*8+0x80]; ret;
0x000343f8: nop [rax+rax]; mov rax, [rip+0x1899c1]; movsxd rdi, edi; mov rax, fs:[rax]; mov rax, [rax+rdi*8+0x80]; ret;
0x000343fe: add [rax], al; mov rax, [rip+0x1899c1]; movsxd rdi, edi; mov rax, fs:[rax]; mov rax, [rax+rdi*8+0x80]; ret;
0x000343ff: add [rax-0x75], cl; add eax, 0x1899c1; movsxd rdi, edi; mov rax, fs:[rax]; mov rax, [rax+rdi*8+0x80]; ret;
0x00034400: mov rax, [rip+0x1899c1]; movsxd rdi, edi; mov rax, fs:[rax]; mov rax, [rax+rdi*8+0x80]; ret;
0x00034401: mov eax, [rip+0x1899c1]; movsxd rdi, edi; mov rax, fs:[rax]; mov rax, [rax+rdi*8+0x80]; ret;
0x00034402: add eax, 0x1899c1; movsxd rdi, edi; mov rax, fs:[rax]; mov rax, [rax+rdi*8+0x80]; ret;
0x00034403: rcr dword ptr [rcx+0x63480018], 0xff; mov rax, fs:[rax]; mov rax, [rax+rdi*8+0x80]; ret;
0x00034404: cdq; sbb [rax], al; movsxd rdi, edi; mov rax, fs:[rax]; mov rax, [rax+rdi*8+0x80]; ret;
0x00034405: sbb [rax], al; movsxd rdi, edi; mov rax, fs:[rax]; mov rax, [rax+rdi*8+0x80]; ret;
0x00034407: movsxd rdi, edi; mov rax, fs:[rax]; mov rax, [rax+rdi*8+0x80]; ret;
0x00034408: movsxd edi, edi; mov rax, fs:[rax]; mov rax, [rax+rdi*8+0x80]; ret;
0x0003440a: mov rax, fs:[rax]; mov rax, [rax+rdi*8+0x80]; ret;
0x0003440b: mov rax, [rax]; mov rax, [rax+rdi*8+0x80]; ret;
0x0003440c: mov eax, [rax]; mov rax, [rax+rdi*8+0x80]; ret;
0x0003440e: mov rax, [rax+rdi*8+0x80]; ret;
0x0003440f: mov eax, [rax+rdi*8+0x80]; ret;
0x00034448: add al, [rbp+0x440b75c0]; mov eax, eax; ret;
0x0003444a: shl byte ptr [rbp+0xb], 0x44; mov eax, eax; ret;
0x0003444c: or eax, [rcx+rcx*4-0x40]; ret;
0x0003449d: shl byte ptr [rbx+rcx+0x23], 0x77; adc [rax-0x73], cl; adc al, 0xb7; mov r8d, [rdx+rax]; mov eax, r8d; ret;
0x000344a0: and esi, [rdi+0x10]; lea rdx, [rdi+rsi*4]; mov r8d, [rdx+rax]; mov eax, r8d; ret;
0x000344a2: adc [rax-0x73], cl; adc al, 0xb7; mov r8d, [rdx+rax]; mov eax, r8d; ret;
0x000344a3: lea rdx, [rdi+rsi*4]; mov r8d, [rdx+rax]; mov eax, r8d; ret;
0x000344a4: lea edx, [rdi+rsi*4]; mov r8d, [rdx+rax]; mov eax, r8d; ret;
0x000344a5: adc al, 0xb7; mov r8d, [rdx+rax]; mov eax, r8d; ret;
0x000344a6: mov bh, 0x44; mov eax, [rdx+rax]; mov eax, r8d; ret;
0x000344a7: mov r8d, [rdx+rax]; mov eax, r8d; ret;
0x000344a8: mov eax, [rdx+rax]; mov eax, r8d; ret;
0x000344a9: add al, 2; mov eax, r8d; ret;
0x000344e5: mov rax, [rip+0x18d29c]; xor esi, esi; mov edi, 1; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000344e6: mov eax, [rip+0x18d29c]; xor esi, esi; mov edi, 1; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000344e7: add eax, 0x18d29c; xor esi, esi; mov edi, 1; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000344e9: rcr byte ptr [rax], cl; add [rcx], dh; idiv byte ptr [rdi+1]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000344ea: sbb [rax], al; xor esi, esi; mov edi, 1; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000344eb: add [rcx], dh; idiv byte ptr [rdi+1]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000344ec: xor esi, esi; mov edi, 1; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000344ed: idiv byte ptr [rdi+1]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000345ae: imul al; mov [rbp+0xc], es; add [rax-0x77], cl; ret;
0x000345b0: mov [rbp+0xc], es; add [rax-0x77], cl; ret;
0x000346f0: mov rax, [rip+0x189711]; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 8; ret;
0x000346f1: mov eax, [rip+0x189711]; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 8; ret;
0x000346f2: add eax, 0x189711; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 8; ret;
0x000346f3: adc [rdi+0x63480018], edx; jmp qword ptr [rax+rcx*2-0x75];
0x000346f5: sbb [rax], al; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 8; ret;
0x000346f7: movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 8; ret;
0x000346f8: movsxd edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 8; ret;
0x00034710: mov rax, [rip+0x1896f1]; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret;
0x00034711: mov eax, [rip+0x1896f1]; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret;
0x00034712: add eax, 0x1896f1; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret;
0x00034715: sbb [rax], al; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret;
0x00034717: movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret;
0x00034718: movsxd edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret;
0x00034730: mov rax, [rip+0x1896d1]; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 2; ret;
0x00034731: mov eax, [rip+0x1896d1]; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 2; ret;
0x00034732: add eax, 0x1896d1; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 2; ret;
0x00034733: rcl dword ptr [rsi+0x63480018], 1; jmp qword ptr [rax+rcx*2-0x75];
0x00034735: sbb [rax], al; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 2; ret;
0x00034737: movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 2; ret;
0x00034738: movsxd edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 2; ret;
0x00034750: mov rax, [rip+0x1896b1]; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x800; ret;
0x00034751: mov eax, [rip+0x1896b1]; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x800; ret;
0x00034752: add eax, 0x1896b1; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x800; ret;
0x00034755: sbb [rax], al; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x800; ret;
0x00034757: movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x800; ret;
0x00034758: movsxd edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x800; ret;
0x0003475a: mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x800; ret;
0x0003475b: mov rax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x800; ret;
0x0003475c: mov eax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x800; ret;
0x00034770: mov rax, [rip+0x189691]; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x200; ret;
0x00034771: mov eax, [rip+0x189691]; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x200; ret;
0x00034772: add eax, 0x189691; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x200; ret;
0x00034775: sbb [rax], al; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x200; ret;
0x00034777: movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x200; ret;
0x00034778: movsxd edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x200; ret;
0x00034790: mov rax, [rip+0x189671]; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8000; ret;
0x00034791: mov eax, [rip+0x189671]; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8000; ret;
0x00034792: add eax, 0x189671; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8000; ret;
0x00034795: sbb [rax], al; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8000; ret;
0x00034797: movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8000; ret;
0x00034798: movsxd edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8000; ret;
0x000347b0: mov rax, [rip+0x189651]; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4000; ret;
0x000347b1: mov eax, [rip+0x189651]; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4000; ret;
0x000347b2: add eax, 0x189651; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4000; ret;
0x000347b5: sbb [rax], al; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4000; ret;
0x000347b7: movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4000; ret;
0x000347b8: movsxd edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4000; ret;
0x000347d0: mov rax, [rip+0x189631]; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 4; ret;
0x000347d1: mov eax, [rip+0x189631]; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 4; ret;
0x000347d2: add eax, 0x189631; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 4; ret;
0x000347d3: xor [rsi+0x63480018], edx; jmp qword ptr [rax+rcx*2-0x75];
0x000347d5: sbb [rax], al; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 4; ret;
0x000347d7: movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 4; ret;
0x000347d8: movsxd edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 4; ret;
0x000347f0: mov rax, [rip+0x189611]; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2000; ret;
0x000347f1: mov eax, [rip+0x189611]; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2000; ret;
0x000347f2: add eax, 0x189611; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2000; ret;
0x000347f3: adc [rsi+0x63480018], edx; jmp qword ptr [rax+rcx*2-0x75];
0x000347f5: sbb [rax], al; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2000; ret;
0x000347f7: movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2000; ret;
0x000347f8: movsxd edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2000; ret;
0x00034810: mov rax, [rip+0x1895f1]; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x100; ret;
0x00034811: mov eax, [rip+0x1895f1]; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x100; ret;
0x00034812: add eax, 0x1895f1; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x100; ret;
0x00034815: sbb [rax], al; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x100; ret;
0x00034817: movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x100; ret;
0x00034818: movsxd edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x100; ret;
0x00034830: mov rax, [rip+0x1895d1]; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1000; ret;
0x00034831: mov eax, [rip+0x1895d1]; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1000; ret;
0x00034832: add eax, 0x1895d1; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1000; ret;
0x00034833: rcl dword ptr [rbp+0x63480018], 1; jmp qword ptr [rax+rcx*2-0x75];
0x00034835: sbb [rax], al; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1000; ret;
0x00034837: movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1000; ret;
0x00034838: movsxd edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1000; ret;
0x00034867: movsxd rdx, edx; mov rax, fs:[rax]; mov rax, [rax]; mov rax, [rax+0x58]; mov eax, [rax+rdx*4]; ret;
0x00034868: movsxd edx, edx; mov rax, fs:[rax]; mov rax, [rax]; mov rax, [rax+0x58]; mov eax, [rax+rdx*4]; ret;
0x00034869: shl byte ptr [rax+rcx*2-0x75], cl; add [rax-0x75], cl; add [rax-0x75], cl; pop rax; mov eax, [rax+rdx*4]; ret;
0x0003486a: mov rax, fs:[rax]; mov rax, [rax]; mov rax, [rax+0x58]; mov eax, [rax+rdx*4]; ret;
0x0003486b: mov rax, [rax]; mov rax, [rax]; mov rax, [rax+0x58]; mov eax, [rax+rdx*4]; ret;
0x0003486c: mov eax, [rax]; mov rax, [rax]; mov rax, [rax+0x58]; mov eax, [rax+rdx*4]; ret;
0x0003486d: add [rax-0x75], cl; add [rax-0x75], cl; pop rax; mov eax, [rax+rdx*4]; ret;
0x0003486e: mov rax, [rax]; mov rax, [rax+0x58]; mov eax, [rax+rdx*4]; ret;
0x0003486f: mov eax, [rax]; mov rax, [rax+0x58]; mov eax, [rax+rdx*4]; ret;
0x00034870: add [rax-0x75], cl; pop rax; mov eax, [rax+rdx*4]; ret;
0x00034871: mov rax, [rax+0x58]; mov eax, [rax+rdx*4]; ret;
0x00034872: mov eax, [rax+0x58]; mov eax, [rax+rdx*4]; ret;
0x00034874: pop rax; mov eax, [rax+rdx*4]; ret;
0x00034893: xor [rbp+0x63480018], edx; shl byte ptr [rax+rcx*2-0x75], cl; add [rax-0x75], cl; add [rax-0x75], cl; mov rax, [rax+rdx*4]; ret;
0x00034896: add [rax+0x63], cl; shl byte ptr [rax+rcx*2-0x75], cl; add [rax-0x75], cl; add [rax-0x75], cl; mov rax, [rax+rdx*4]; ret;
0x00034897: movsxd rdx, edx; mov rax, fs:[rax]; mov rax, [rax]; mov rax, [rax+0x48]; mov eax, [rax+rdx*4]; ret;
0x00034898: movsxd edx, edx; mov rax, fs:[rax]; mov rax, [rax]; mov rax, [rax+0x48]; mov eax, [rax+rdx*4]; ret;
0x00034899: shl byte ptr [rax+rcx*2-0x75], cl; add [rax-0x75], cl; add [rax-0x75], cl; mov rax, [rax+rdx*4]; ret;
0x0003489a: mov rax, fs:[rax]; mov rax, [rax]; mov rax, [rax+0x48]; mov eax, [rax+rdx*4]; ret;
0x0003489b: mov rax, [rax]; mov rax, [rax]; mov rax, [rax+0x48]; mov eax, [rax+rdx*4]; ret;
0x0003489c: mov eax, [rax]; mov rax, [rax]; mov rax, [rax+0x48]; mov eax, [rax+rdx*4]; ret;
0x0003489d: add [rax-0x75], cl; add [rax-0x75], cl; mov rax, [rax+rdx*4]; ret;
0x0003489e: mov rax, [rax]; mov rax, [rax+0x48]; mov eax, [rax+rdx*4]; ret;
0x0003489f: mov eax, [rax]; mov rax, [rax+0x48]; mov eax, [rax+rdx*4]; ret;
0x000348a0: add [rax-0x75], cl; mov rax, [rax+rdx*4]; ret;
0x000348a1: mov rax, [rax+0x48]; mov eax, [rax+rdx*4]; ret;
0x000348a2: mov eax, [rax+0x48]; mov eax, [rax+rdx*4]; ret;
0x000348a4: mov rax, [rax+rdx*4]; ret;
0x000348a5: mov eax, [rax+rdx*4]; ret;
0x000348a6: add al, 0x90; ret;
0x000348b0: mov rax, [rip+0x189551]; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 1; ret;
0x000348b1: mov eax, [rip+0x189551]; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 1; ret;
0x000348b2: add eax, 0x189551; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 1; ret;
0x000348b5: sbb [rax], al; movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 1; ret;
0x000348b7: movsxd rdi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 1; ret;
0x000348b8: movsxd edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 1; ret;
0x000348d7: movsxd rdi, edi; mov rax, fs:[rax]; mov rax, [rax]; mov rax, [rax+0x58]; mov eax, [rax+rdi*4+0x200]; ret;
0x000348d8: movsxd edi, edi; mov rax, fs:[rax]; mov rax, [rax]; mov rax, [rax+0x58]; mov eax, [rax+rdi*4+0x200]; ret;
0x000348da: mov rax, fs:[rax]; mov rax, [rax]; mov rax, [rax+0x58]; mov eax, [rax+rdi*4+0x200]; ret;
0x000348db: mov rax, [rax]; mov rax, [rax]; mov rax, [rax+0x58]; mov eax, [rax+rdi*4+0x200]; ret;
0x000348dc: mov eax, [rax]; mov rax, [rax]; mov rax, [rax+0x58]; mov eax, [rax+rdi*4+0x200]; ret;
0x000348dd: add [rax-0x75], cl; add [rax-0x75], cl; pop rax; mov eax, [rax+rdi*4+0x200]; ret;
0x000348de: mov rax, [rax]; mov rax, [rax+0x58]; mov eax, [rax+rdi*4+0x200]; ret;
0x000348df: mov eax, [rax]; mov rax, [rax+0x58]; mov eax, [rax+rdi*4+0x200]; ret;
0x000348e0: add [rax-0x75], cl; pop rax; mov eax, [rax+rdi*4+0x200]; ret;
0x000348e1: mov rax, [rax+0x58]; mov eax, [rax+rdi*4+0x200]; ret;
0x000348e2: mov eax, [rax+0x58]; mov eax, [rax+rdi*4+0x200]; ret;
0x000348e4: pop rax; mov eax, [rax+rdi*4+0x200]; ret;
0x000348f3: rcl dword ptr [rax+rbx-0x9cb800], 1; mov rax, fs:[rax]; mov rax, [rax]; mov rax, [rax+0x48]; mov eax, [rax+rdi*4+0x200]; ret;
0x000348f7: movsxd rdi, edi; mov rax, fs:[rax]; mov rax, [rax]; mov rax, [rax+0x48]; mov eax, [rax+rdi*4+0x200]; ret;
0x000348f8: movsxd edi, edi; mov rax, fs:[rax]; mov rax, [rax]; mov rax, [rax+0x48]; mov eax, [rax+rdi*4+0x200]; ret;
0x000348fa: mov rax, fs:[rax]; mov rax, [rax]; mov rax, [rax+0x48]; mov eax, [rax+rdi*4+0x200]; ret;
0x000348fb: mov rax, [rax]; mov rax, [rax]; mov rax, [rax+0x48]; mov eax, [rax+rdi*4+0x200]; ret;
0x000348fc: mov eax, [rax]; mov rax, [rax]; mov rax, [rax+0x48]; mov eax, [rax+rdi*4+0x200]; ret;
0x000348fd: add [rax-0x75], cl; add [rax-0x75], cl; mov rax, [rax+rdi*4+0x200]; ret;
0x000348fe: mov rax, [rax]; mov rax, [rax+0x48]; mov eax, [rax+rdi*4+0x200]; ret;
0x000348ff: mov eax, [rax]; mov rax, [rax+0x48]; mov eax, [rax+rdi*4+0x200]; ret;
0x00034900: add [rax-0x75], cl; mov rax, [rax+rdi*4+0x200]; ret;
0x00034901: mov rax, [rax+0x48]; mov eax, [rax+rdi*4+0x200]; ret;
0x00034902: mov eax, [rax+0x48]; mov eax, [rax+rdi*4+0x200]; ret;
0x00034904: mov rax, [rax+rdi*4+0x200]; ret;
0x00034905: mov eax, [rax+rdi*4+0x200]; ret;
0x00034906: test [rax+0x200], bh; ret;
0x00034907: mov eax, 0x200; ret;
0x00034909: add al, [rax]; add bl, al; nop [rax]; mov eax, edi; and eax, 0x7f; ret;
0x0003490b: add bl, al; nop [rax]; mov eax, edi; and eax, 0x7f; ret;
0x0003490d: nop [rax]; mov eax, edi; and eax, 0x7f; ret;
0x0003490f: add [rcx+0x7fe083f8], cl; ret;
0x00034910: mov eax, edi; and eax, 0x7f; ret;
0x00034911: clc; and eax, 0x7f; ret;
0x00034916: nop [rax+rax]; xor eax, eax; and edi, 0xffffff80; sete al; ret;
0x00034917: nop [rax+rax]; xor eax, eax; and edi, 0xffffff80; sete al; ret;
0x00034918: nop [rax+rax]; xor eax, eax; and edi, 0xffffff80; sete al; ret;
0x0003491b: add [rax], al; add [rax], al; add [rcx], dh; rol byte ptr [rbx-0x6bf07f19], 0xc0; ret;
0x0003491c: add [rax], al; add [rax], al; xor eax, eax; and edi, 0xffffff80; sete al; ret;
0x0003491d: add [rax], al; add [rcx], dh; rol byte ptr [rbx-0x6bf07f19], 0xc0; ret;
0x0003491e: add [rax], al; xor eax, eax; and edi, 0xffffff80; sete al; ret;
0x0003491f: add [rcx], dh; rol byte ptr [rbx-0x6bf07f19], 0xc0; ret;
0x00034920: xor eax, eax; and edi, 0xffffff80; sete al; ret;
0x00034921: rol byte ptr [rbx-0x6bf07f19], 0xc0; ret;
0x00034922: and edi, 0xffffff80; sete al; ret;
0x00034923: out 0x80, eax; sete al; ret;
0x00034929: nop [rax]; mov rax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 1; ret;
0x0003492e: add [rax], al; mov rax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 1; ret;
0x00034930: mov rax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 1; ret;
0x00034931: mov eax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 1; ret;
0x00034934: movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 1; ret;
0x00034935: movsxd edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 1; ret;
0x0003493f: nop; mov rax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 8; ret;
0x00034940: mov rax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 8; ret;
0x00034941: mov eax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 8; ret;
0x00034944: movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 8; ret;
0x00034945: movsxd edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 8; ret;
0x0003494f: nop; mov rax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret;
0x00034950: mov rax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret;
0x00034951: mov eax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret;
0x00034954: movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret;
0x00034955: movsxd edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret;
0x0003496c: nop [rax]; mov rax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 2; ret;
0x00034970: mov rax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 2; ret;
0x00034971: mov eax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 2; ret;
0x00034974: movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 2; ret;
0x00034975: movsxd edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 2; ret;
0x0003497f: nop; mov rax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x800; ret;
0x00034980: mov rax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x800; ret;
0x00034981: mov eax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x800; ret;
0x00034984: movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x800; ret;
0x00034985: movsxd edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x800; ret;
0x00034987: movzx eax, word ptr [rax+rdi*2]; and eax, 0x800; ret;
0x00034989: add al, 0x78; and eax, 0x800; ret;
0x0003498b: and eax, 0x800; ret;
0x0003498c: add [rax], cl; add [rax], al; ret;
0x0003499c: nop [rax]; mov rax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x200; ret;
0x000349a0: mov rax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x200; ret;
0x000349a1: mov eax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x200; ret;
0x000349a4: movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x200; ret;
0x000349a5: movsxd edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x200; ret;
0x000349bc: nop [rax]; mov rax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8000; ret;
0x000349c0: mov rax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8000; ret;
0x000349c1: mov eax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8000; ret;
0x000349c4: movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8000; ret;
0x000349c5: movsxd edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8000; ret;
0x000349dc: nop [rax]; mov rax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4000; ret;
0x000349e0: mov rax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4000; ret;
0x000349e1: mov eax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4000; ret;
0x000349e4: movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4000; ret;
0x000349e5: movsxd edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4000; ret;
0x000349fc: nop [rax]; mov rax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 4; ret;
0x00034a00: mov rax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 4; ret;
0x00034a01: mov eax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 4; ret;
0x00034a04: movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 4; ret;
0x00034a05: movsxd edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 4; ret;
0x00034a0f: nop; mov rax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2000; ret;
0x00034a10: mov rax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2000; ret;
0x00034a11: mov eax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2000; ret;
0x00034a14: movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2000; ret;
0x00034a15: movsxd edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2000; ret;
0x00034a2c: nop [rax]; mov rax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x100; ret;
0x00034a30: mov rax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x100; ret;
0x00034a31: mov eax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x100; ret;
0x00034a34: movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x100; ret;
0x00034a35: movsxd edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x100; ret;
0x00034a4c: nop [rax]; mov rax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1000; ret;
0x00034a50: mov rax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1000; ret;
0x00034a51: mov eax, [rsi+0x68]; movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1000; ret;
0x00034a54: movsxd rdi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1000; ret;
0x00034a55: movsxd edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1000; ret;
0x00034a62: nop [rax+rax]; nop [rax]; mov rax, [rsi+0x70]; movsxd rdi, edi; mov eax, [rax+rdi*4]; ret;
0x00034a63: nop [rax+rax]; nop [rax]; mov rax, [rsi+0x70]; movsxd rdi, edi; mov eax, [rax+rdi*4]; ret;
0x00034a64: nop [rax+rax]; nop [rax]; mov rax, [rsi+0x70]; movsxd rdi, edi; mov eax, [rax+rdi*4]; ret;
0x00034a6a: add [rax], al; nop [rax]; mov rax, [rsi+0x70]; movsxd rdi, edi; mov eax, [rax+rdi*4]; ret;
0x00034a6c: nop [rax]; mov rax, [rsi+0x70]; movsxd rdi, edi; mov eax, [rax+rdi*4]; ret;
0x00034a70: mov rax, [rsi+0x70]; movsxd rdi, edi; mov eax, [rax+rdi*4]; ret;
0x00034a71: mov eax, [rsi+0x70]; movsxd rdi, edi; mov eax, [rax+rdi*4]; ret;
0x00034a79: mov eax, 0x441f0fc3; add [rax], al; mov rax, [rsi+0x78]; movsxd rdi, edi; mov eax, [rax+rdi*4]; ret;
0x00034a7b: nop [rax+rax]; mov rax, [rsi+0x78]; movsxd rdi, edi; mov eax, [rax+rdi*4]; ret;
0x00034a7d: add [rax], r8b; mov rax, [rsi+0x78]; movsxd rdi, edi; mov eax, [rax+rdi*4]; ret;
0x00034a7e: add [rax], al; mov rax, [rsi+0x78]; movsxd rdi, edi; mov eax, [rax+rdi*4]; ret;
0x00034a80: mov rax, [rsi+0x78]; movsxd rdi, edi; mov eax, [rax+rdi*4]; ret;
0x00034a81: mov eax, [rsi+0x78]; movsxd rdi, edi; mov eax, [rax+rdi*4]; ret;
0x00034a84: movsxd rdi, edi; mov eax, [rax+rdi*4]; ret;
0x00034a85: movsxd edi, edi; mov eax, [rax+rdi*4]; ret;
0x00034a93: xor [rbx+0x63480018], edx; jmp qword ptr [rax+rcx*2-0x75];
0x00034a96: add [rax+0x63], cl; jmp qword ptr [rax+rcx*2-0x75];
0x00034a9a: mov rax, fs:[rax]; mov rax, [rax]; mov rax, [rax+0x40]; movzx eax, word ptr [rax+rdi*2+0x100]; and eax, esi; ret;
0x00034a9b: mov rax, [rax]; mov rax, [rax]; mov rax, [rax+0x40]; movzx eax, word ptr [rax+rdi*2+0x100]; and eax, esi; ret;
0x00034a9c: mov eax, [rax]; mov rax, [rax]; mov rax, [rax+0x40]; movzx eax, word ptr [rax+rdi*2+0x100]; and eax, esi; ret;
0x00034a9d: add [rax-0x75], cl; add [rax-0x75], cl; movzx eax, word ptr [rax+rdi*2+0x100]; and eax, esi; ret;
0x00034a9e: mov rax, [rax]; mov rax, [rax+0x40]; movzx eax, word ptr [rax+rdi*2+0x100]; and eax, esi; ret;
0x00034a9f: mov eax, [rax]; mov rax, [rax+0x40]; movzx eax, word ptr [rax+rdi*2+0x100]; and eax, esi; ret;
0x00034aa0: add [rax-0x75], cl; movzx eax, word ptr [rax+rdi*2+0x100]; and eax, esi; ret;
0x00034aa1: mov rax, [rax+0x40]; movzx eax, word ptr [rax+rdi*2+0x100]; and eax, esi; ret;
0x00034aa2: mov eax, [rax+0x40]; movzx eax, word ptr [rax+rdi*2+0x100]; and eax, esi; ret;
0x00034aa5: movzx eax, word ptr [rax+rdi*2+0x100]; and eax, esi; ret;
0x00034aa9: add [rcx], al; add [rax], al; and eax, esi; ret;
0x00034aab: add [rax], al; and eax, esi; ret;
0x00034aad: and eax, esi; ret;
0x00034ab0: mov rax, [rip+0x189351]; add rax, fs:[0]; ret;
0x00034ab1: mov eax, [rip+0x189351]; add rax, fs:[0]; ret;
0x00034ab2: add eax, 0x189351; add rax, fs:[0]; ret;
0x00034ab3: push rcx; xchg ebx, eax; sbb [rax], al; add rax, fs:[0]; ret;
0x00034ab4: xchg ebx, eax; sbb [rax], al; add rax, fs:[0]; ret;
0x00034abf: add bl, al; nop [rax+rax]; nop [rax]; mov rax, [rip+0x189411]; add rax, fs:[0]; ret;
0x00034ac2: nop [rax+rax]; nop [rax]; mov rax, [rip+0x189411]; add rax, fs:[0]; ret;
0x00034ac3: nop [rax+rax]; nop [rax]; mov rax, [rip+0x189411]; add rax, fs:[0]; ret;
0x00034ac4: nop [rax+rax]; nop [rax]; mov rax, [rip+0x189411]; add rax, fs:[0]; ret;
0x00034ac8: add [rax], al; add [rax], al; nop [rax]; mov rax, [rip+0x189411]; add rax, fs:[0]; ret;
0x00034aca: add [rax], al; nop [rax]; mov rax, [rip+0x189411]; add rax, fs:[0]; ret;
0x00034acc: nop [rax]; mov rax, [rip+0x189411]; add rax, fs:[0]; ret;
0x00034acf: add [rax-0x75], cl; add eax, 0x189411; add rax, fs:[0]; ret;
0x00034ad0: mov rax, [rip+0x189411]; add rax, fs:[0]; ret;
0x00034ad1: mov eax, [rip+0x189411]; add rax, fs:[0]; ret;
0x00034ad2: add eax, 0x189411; add rax, fs:[0]; ret;
0x00034ad3: adc [rax+rbx+0x3486400], edx; add al, 0x25; add [rax], al; add [rax], al; ret;
0x00034adf: add bl, al; nop [rax+rax]; nop [rax]; mov rax, [rip+0x189431]; add rax, fs:[0]; ret;
0x00034ae2: nop [rax+rax]; nop [rax]; mov rax, [rip+0x189431]; add rax, fs:[0]; ret;
0x00034ae3: nop [rax+rax]; nop [rax]; mov rax, [rip+0x189431]; add rax, fs:[0]; ret;
0x00034ae4: nop [rax+rax]; nop [rax]; mov rax, [rip+0x189431]; add rax, fs:[0]; ret;
0x00034ae8: add [rax], al; add [rax], al; nop [rax]; mov rax, [rip+0x189431]; add rax, fs:[0]; ret;
0x00034aea: add [rax], al; nop [rax]; mov rax, [rip+0x189431]; add rax, fs:[0]; ret;
0x00034aec: nop [rax]; mov rax, [rip+0x189431]; add rax, fs:[0]; ret;
0x00034aef: add [rax-0x75], cl; add eax, 0x189431; add rax, fs:[0]; ret;
0x00034af0: mov rax, [rip+0x189431]; add rax, fs:[0]; ret;
0x00034af1: mov eax, [rip+0x189431]; add rax, fs:[0]; ret;
0x00034af2: add eax, 0x189431; add rax, fs:[0]; ret;
0x00034af3: xor [rax+rbx+0x3486400], edx; add al, 0x25; add [rax], al; add [rax], al; ret;
0x00034af4: xchg esp, eax; sbb [rax], al; add rax, fs:[0]; ret;
0x00034af5: sbb [rax], al; add rax, fs:[0]; ret;
0x00034b46: mov fs:[rcx], rdx; mov rax, [rax+0x58]; mov rdx, [rip+0x1893d3]; add rax, 0x200; mov fs:[rdx], rax; ret;
0x00034b47: mov [rcx], rdx; mov rax, [rax+0x58]; mov rdx, [rip+0x1893d3]; add rax, 0x200; mov fs:[rdx], rax; ret;
0x00034b48: mov [rcx], edx; mov rax, [rax+0x58]; mov rdx, [rip+0x1893d3]; add rax, 0x200; mov fs:[rdx], rax; ret;
0x00034b49: adc [rax-0x75], ecx; pop rax; mov rdx, [rip+0x1893d3]; add rax, 0x200; mov fs:[rdx], rax; ret;
0x00034b4a: mov rax, [rax+0x58]; mov rdx, [rip+0x1893d3]; add rax, 0x200; mov fs:[rdx], rax; ret;
0x00034b4b: mov eax, [rax+0x58]; mov rdx, [rip+0x1893d3]; add rax, 0x200; mov fs:[rdx], rax; ret;
0x00034b4d: pop rax; mov rdx, [rip+0x1893d3]; add rax, 0x200; mov fs:[rdx], rax; ret;
0x00034b4e: mov rdx, [rip+0x1893d3]; add rax, 0x200; mov fs:[rdx], rax; ret;
0x00034b4f: mov edx, [rip+0x1893d3]; add rax, 0x200; mov fs:[rdx], rax; ret;
0x00034b50: adc eax, 0x1893d3; add rax, 0x200; mov fs:[rdx], rax; ret;
0x00034b51: rcl dword ptr [rbx+0x5480018], cl; add [rdx], al; add [rax], al; mov fs:[rdx], rax; ret;
0x00034b52: xchg ebx, eax; sbb [rax], al; add rax, 0x200; mov fs:[rdx], rax; ret;
0x00034b53: sbb [rax], al; add rax, 0x200; mov fs:[rdx], rax; ret;
0x00034b54: add [rax+5], cl; add [rdx], al; add [rax], al; mov fs:[rdx], rax; ret;
0x00034b55: add rax, 0x200; mov fs:[rdx], rax; ret;
0x00034b56: add eax, 0x200; mov fs:[rdx], rax; ret;
0x00034b57: add [rdx], al; add [rax], al; mov fs:[rdx], rax; ret;
0x00034b59: add [rax], al; mov fs:[rdx], rax; ret;
0x00034b5b: mov fs:[rdx], rax; ret;
0x00034b7c: add [rbp+0x481d74d2], al; mov eax, [rip+0x18cc28]; lea rdi, [rip+0x18bd11]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00034b83: add eax, 0x18cc28; lea rdi, [rip+0x18bd11]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00034b84: sub ah, cl; sbb [rax], al; lea rdi, [rip+0x18bd11]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00034b85: int3; sbb [rax], al; lea rdi, [rip+0x18bd11]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00034b87: add [rax-0x73], cl; cmp eax, 0x18bd11; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00034b8a: cmp eax, 0x18bd11; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00034b8b: adc [rbp-0x3eb7ffe8], edi; enter 0x6411, 0x48; xor eax, [0x30]; call rax;
0x00034b8c: mov ebp, 0xc1480018; enter 0x6411, 0x48; xor eax, [0x30]; call rax;
0x00034cc7: add [rbx+0x58b0100], al; iretd;
0x00034ced: xor rax, fs:[0x30]; pop r12; pop r13; pop r14; pop r15; jmp rax;
0x00034cee: xor rax, [0x30]; pop r12; pop r13; pop r14; pop r15; jmp rax;
0x00034cef: xor eax, [0x30]; pop r12; pop r13; pop r14; pop r15; jmp rax;
0x00034cf1: and eax, 0x30; pop r12; pop r13; pop r14; pop r15; jmp rax;
0x00034cf3: add [rax], al; add [rcx+0x5c], al; pop r13; pop r14; pop r15; jmp rax;
0x00034cf4: add [rax], al; pop r12; pop r13; pop r14; pop r15; jmp rax;
0x00034cf5: add [rcx+0x5c], al; pop r13; pop r14; pop r15; jmp rax;
0x00034f52: ret 0xff03;
0x00035010: dec dword ptr [rax-0x75]; and al, 8; add rsp, 0x18; ret;
0x00035086: sete r12b; mov rax, r12; pop rbx; pop rbp; pop r12; ret;
0x00035087: sete ah; mov rax, r12; pop rbx; pop rbp; pop r12; ret;
0x000350b9: add [rax-0x75], cl; pop rsp; ret;
0x000350f6: add eax, [rbx+0x27770af8]; lea rdx, [rip+0x149e5d]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000350f8: clc; or dh, [rdi+0x27]; lea rdx, [rip+0x149e5d]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000350f9: or dh, [rdi+0x27]; lea rdx, [rip+0x149e5d]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000350fc: lea rdx, [rip+0x149e5d]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000350fd: lea edx, [rip+0x149e5d]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000350fe: adc eax, 0x149e5d; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000350ff: pop rbp; sahf; adc al, 0; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x00035100: sahf; adc al, 0; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x00035101: adc al, 0; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x00035122: or eax, 0x5be43145; pop rbp; mov rax, r12; pop r12; ret;
0x0003528c: mov eax, [rbp+8]; sub eax, [rbx+8]; add rsp, 8; pop rbx; pop rbp; ret;
0x0003528f: sub eax, [rbx+8]; add rsp, 8; pop rbx; pop rbp; ret;
0x000352ef: dec dword ptr [rcx-0x9f73]; jmp qword ptr [rax+rcx*2-0x75];
0x000354f7: add al, 0xe9; ret;
0x000355bc: add byte ptr [r13+0x482674c0], 0x8b; add eax, 0x18c1df; lea rdi, [r13+0x80]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000355bd: add byte ptr [rbp+0x482674c0], 0x8b; add eax, 0x18c1df; lea rdi, [r13+0x80]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000355bf: shl byte ptr [rsi+0x48], 0x8b; add eax, 0x18c1df; lea rdi, [r13+0x80]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000355c1: mov rax, [rip+0x18c1df]; lea rdi, [r13+0x80]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000355c2: mov rax, [rip+0x18c1df]; lea rdi, [r13+0x80]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000355c3: mov eax, [rip+0x18c1df]; lea rdi, [r13+0x80]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000355c4: add eax, 0x18c1df; lea rdi, [r13+0x80]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000355c5: ffreep st(1); sbb [rax], al; lea rdi, [r13+0x80]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000355c6: rcr dword ptr [rax], 0; lea rdi, [r13+0x80]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0003572b: add al, ch; call qword ptr [rdx-0x7ab7fffb];
0x0003572d: call qword ptr [rdx-0x7ab7fffb];
0x0003587a: dec dword ptr [rax-0x75]; add eax, 0x18bf36; lea rdi, [r13+0x80]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0003587d: add eax, 0x18bf36; lea rdi, [r13+0x80]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0003587e: mov edi, 0x8d490018; mov ebp, 0x80; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0003587f: mov edi, 0x8d490018; mov ebp, 0x80; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0003589d: lea r12, [r13+0x80]; mov rax, [rip+0x18bf0d]; mov rdi, r12; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0003589e: lea esp, [rbp+0x80]; mov rax, [rip+0x18bf0d]; mov rdi, r12; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000358a2: add [rax], al; mov rax, [rip+0x18bf0d]; mov rdi, r12; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000358a3: add [rax-0x75], cl; add eax, 0x18bf0d; mov rdi, r12; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000358a4: mov rax, [rip+0x18bf0d]; mov rdi, r12; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000358a5: mov eax, [rip+0x18bf0d]; mov rdi, r12; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000358a6: add eax, 0x18bf0d; mov rdi, r12; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000358a7: or eax, 0x4c0018bf; mov edi, esp; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000358a8: mov edi, 0x894c0018; out 0x48, eax; ror eax, 0x11; xor rax, fs:[0x30]; call rax;
0x000358c2: add [rbp+0x481974ff], al; mov eax, [rip+0x18bee2]; mov rdi, r12; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000358c4: push qword ptr [rcx+rbx+0x48]; mov eax, [rip+0x18bee2]; mov rdi, r12; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000358c6: sbb [rax-0x75], ecx; add eax, 0x18bee2; mov rdi, r12; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000358c7: mov rax, [rip+0x18bee2]; mov rdi, r12; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000358c8: mov eax, [rip+0x18bee2]; mov rdi, r12; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000358c9: add eax, 0x18bee2; mov rdi, r12; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000358cb: mov esi, 0x894c0018; out 0x48, eax; ror eax, 0x11; xor rax, fs:[0x30]; call rax;
0x000358cc: sbb [rax], al; mov rdi, r12; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000358cd: add [rcx+rcx*4-0x19], cl; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000358ce: mov rdi, r12; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00035ab1: add [rbp+0x481d74f6], al; mov eax, [rip+0x18bcfb]; lea rdi, [r13+0x80]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00035ab3: div byte ptr [rbp+rbx+0x48]; mov eax, [rip+0x18bcfb]; lea rdi, [r13+0x80]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00035ab5: sbb eax, 0xfb058b48; mov esp, 0x8d490018; mov ebp, 0x80; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00035ab8: add eax, 0x18bcfb; lea rdi, [r13+0x80]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00035ab9: sti; mov esp, 0x8d490018; mov ebp, 0x80; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00035aba: mov esp, 0x8d490018; mov ebp, 0x80; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00035c32: add [rbp+0x481d74c0], al; mov eax, [rip+0x18bb7a]; lea rdi, [r13+0x80]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00035c34: shl byte ptr [rbp+rbx+0x48], 0x8b; add eax, 0x18bb7a; lea rdi, [r13+0x80]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00035c36: sbb eax, 0x7a058b48; mov ebx, 0x8d490018; mov ebp, 0x80; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00035c37: mov rax, [rip+0x18bf36]; lea rdi, [r13+0x80]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00035c38: mov eax, [rip+0x18bf36]; lea rdi, [r13+0x80]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00035c39: add eax, 0x18bb7a; lea rdi, [r13+0x80]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00035c3b: mov ebx, 0x8d490018; mov ebp, 0x80; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00035c3c: sbb [rax], al; lea rdi, [r13+0x80]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00035c3d: add [rcx-0x73], cl; mov ebp, 0x80; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00035c3e: lea rdi, [r13+0x80]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00035c3f: lea edi, [rbp+0x80]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00035c40: mov ebp, 0x80; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00035c41: add byte ptr [rax], 0; add [rax-0x3f], cl; enter 0x6411, 0x48; xor eax, [0x30]; call rax;
0x00035c89: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x18ac67; syscall;
0x00035c8f: add [rax], al; add [rax-0x73], cl; cmp eax, 0x18ac67; syscall;
0x00035c91: add [rax-0x73], cl; cmp eax, 0x18ac67; syscall;
0x00035c94: cmp eax, 0x18ac67; syscall;
0x00035c95: lodsb [esi]; sbb [rax], al; syscall;
0x00035c96: lodsb [rsi]; sbb [rax], al; syscall;
0x00035d55: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x18ac67]; syscall;
0x00035d5f: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x18ab91; syscall;
0x00035d65: add [rax], al; add [rax-0x73], cl; cmp eax, 0x18ab91; syscall;
0x00035d67: add [rax-0x73], cl; cmp eax, 0x18ab91; syscall;
0x00035d6a: cmp eax, 0x18ab91; syscall;
0x00035d6b: xchg ecx, eax; stosd [rdi]; sbb [rax], al; syscall;
0x00035d70: add eax, 0x31458deb; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x18ab74]; syscall;
0x00035d72: lea eax, [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x18ab74]; syscall;
0x00035d73: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x18ac67]; syscall;
0x00035d74: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x18ac67]; syscall;
0x00035d75: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x18ac67]; syscall;
0x00035d76: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x18ac67]; syscall;
0x00035d77: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x18ac67]; syscall;
0x00035d78: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x18ac67]; syscall;
0x00035d79: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x18ac67]; syscall;
0x00035d7a: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x18ac67]; syscall;
0x00035d7b: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x18ac67]; syscall;
0x00035d7c: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x18ab74; syscall;
0x00035d7d: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0x18ac67]; syscall;
0x00035d7e: add [rax], al; mov eax, 0xca; lea rdi, [rip+0x18ac67]; syscall;
0x00035d7f: add [rax+0xca], bh; lea rdi, [rip+0x18ac67]; syscall;
0x00035d80: mov eax, 0xca; lea rdi, [rip+0x18ac67]; syscall;
0x00035d82: add [rax], al; add [rax-0x73], cl; cmp eax, 0x18ab74; syscall;
0x00035d83: add [rax], al; lea rdi, [rip+0x18ac67]; syscall;
0x00035d84: add [rax-0x73], cl; cmp eax, 0x18ab74; syscall;
0x00035d85: lea rdi, [rip+0x18ac67]; syscall;
0x00035d86: lea edi, [rip+0x18ac67]; syscall;
0x00035d87: cmp eax, 0x18ab74; syscall;
0x00035d89: stosd [rdi]; sbb [rax], al; syscall;
0x00035dd1: lea ecx, [rdi+rdi*8-1]; jmp qword ptr [rax+rcx*2-0x75];
0x00035e29: shl byte ptr [rsp+rax*2+0x48], 0x8b; add eax, 0x18b975; lea rdi, [rip+0x18a866]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00035e2c: mov rax, [rip+0x18b975]; lea rdi, [rip+0x18a866]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00035e2d: mov eax, [rip+0x18b975]; lea rdi, [rip+0x18a866]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00035e2e: add eax, 0x18b975; lea rdi, [rip+0x18a866]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00035e30: mov ecx, 0x8d480018; cmp eax, 0x18a866; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00035e32: add [rax-0x73], cl; cmp eax, 0x18a866; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00035e35: cmp eax, 0x18a866; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00035e37: test al, 0x18; add [rax-0x3f], cl; enter 0x6411, 0x48; xor eax, [0x30]; call rax;
0x00035e4e: add [rbp+0x481d74ff], al; mov eax, [rip+0x18b94e]; lea rdi, [rip+0x18aa3f]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00035e50: push qword ptr [rbp+rbx+0x48]; mov eax, [rip+0x18b94e]; lea rdi, [rip+0x18aa3f]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00035e52: sbb eax, 0x4e058b48; mov ecx, 0x8d480018; cmp eax, 0x18aa3f; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00035e53: mov rax, [rip+0x18b94e]; lea rdi, [rip+0x18aa3f]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00035e54: mov eax, [rip+0x18b94e]; lea rdi, [rip+0x18aa3f]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00035e55: add eax, 0x18b94e; lea rdi, [rip+0x18aa3f]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00035e56: mov rcx, 0x18aa3f3d8d480018; add [rax-0x3f], cl; enter 0x6411, 0x48; xor eax, [0x30]; call rax;
0x00035e57: mov ecx, 0x8d480018; cmp eax, 0x18aa3f; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00035e59: add [rax-0x73], cl; cmp eax, 0x18aa3f; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00035e5c: cmp eax, 0x18aa3f; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00035eb4: div byte ptr [rbp+rbx+0x48]; mov eax, [rip+0x18b8ea]; lea rdi, [rip+0x18aa5b]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00035eb6: sbb eax, 0xea058b48; mov eax, 0x8d480018; cmp eax, 0x18aa5b; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00035eb7: mov rax, [rip+0x18b8ea]; lea rdi, [rip+0x18aa5b]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00035eb8: mov eax, [rip+0x18b8ea]; lea rdi, [rip+0x18aa5b]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00035eb9: add eax, 0x18b8ea; lea rdi, [rip+0x18aa5b]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00035ebb: mov eax, 0x8d480018; cmp eax, 0x18aa5b; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00035ebd: add [rax-0x73], cl; cmp eax, 0x18aa5b; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00035ec0: cmp eax, 0x18aa5b; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00035ec1: pop rbx; stosb [rdi]; sbb [rax], al; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00035ef7: inc dword ptr [rbp+0x481d74c9]; mov eax, [rip+0x18b8b5]; lea rdi, [rip+0x18aa16]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00035efb: sbb eax, 0xb5058b48; mov eax, 0x8d480018; cmp eax, 0x18aa16; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00035efe: add eax, 0x18b8b5; lea rdi, [rip+0x18aa16]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00035eff: mov ch, 0xb8; sbb [rax], al; lea rdi, [rip+0x18aa16]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00035f00: mov eax, 0x8d480018; cmp eax, 0x18aa16; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00035f02: add [rax-0x73], cl; cmp eax, 0x18aa16; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00035f05: cmp eax, 0x18aa16; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00035f07: stosb [rdi]; sbb [rax], al; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00035f80: in al, 0xff; inc dword ptr [rax-0x76b7bcc8]; ret;
0x00035f82: inc dword ptr [rax-0x76b7bcc8]; ret;
0x000360d6: add [rbp+0x484474c9], al; mov eax, [rip+0x18b6d6]; lea rdi, [rip+0x18a7b7]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000360dd: add eax, 0x18b6d6; lea rdi, [rip+0x18a7b7]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000360df: mov dh, 0x18; add [rax-0x73], cl; cmp eax, 0x18a7b7; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000360e1: add [rax-0x73], cl; cmp eax, 0x18a7b7; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000360e4: cmp eax, 0x18a7b7; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000360e5: mov bh, 0xa7; sbb [rax], al; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000360e6: cmpsd [rsi], [rdi]; sbb [rax], al; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000360fa: mov [0x481d74d2850018b5], al; mov eax, [rip+0x18b6af]; lea rdi, [rip+0x18a590]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00036104: add eax, 0x18b6af; lea rdi, [rip+0x18a590]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00036106: mov dh, 0x18; add [rax-0x73], cl; cmp eax, 0x18a590; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00036108: add [rax-0x73], cl; cmp eax, 0x18a590; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0003610b: cmp eax, 0x18a590; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0003610c: nop; movsd [rdi], [rsi]; sbb [rax], al; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00036367: add [rbp+0x484474c0], al; mov eax, [rip+0x18b445]; lea rdi, [rip+0x18a526]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00036369: shl byte ptr [rsp+rax*2+0x48], 0x8b; add eax, 0x18b445; lea rdi, [rip+0x18a526]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0003636e: add eax, 0x18b445; lea rdi, [rip+0x18a526]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0003636f: mov r12b, 0x18; add [rax-0x73], cl; cmp eax, 0x18a526; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00036370: mov ah, 0x18; add [rax-0x73], cl; cmp eax, 0x18a526; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00036372: add [rax-0x73], cl; cmp eax, 0x18a526; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00036375: cmp eax, 0x18a526; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00036376: movsd [rdi], [rsi]; sbb [rax], al; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00036377: movsd [rdi], [rsi]; sbb [rax], al; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00036390: shl byte ptr [rbp+rbx+0x48], 0x8b; add eax, 0x18b41e; lea rdi, [rip+0x18a2ff]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00036395: add eax, 0x18b41e; lea rdi, [rip+0x18a2ff]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00036397: mov ah, 0x18; add [rax-0x73], cl; cmp eax, 0x18a2ff; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00036399: add [rax-0x73], cl; cmp eax, 0x18a2ff; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0003639c: cmp eax, 0x18a2ff; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0003639d: jmp qword ptr [rdx-0x3eb7ffe8];
0x000363eb: dec dword ptr [rbp-0x75]; push rsp; ret 0x4820;
0x000363ee: push rsp; ret 0x4820;
0x00036448: add [rbx-0xd373], cl; jmp qword ptr [rcx+rcx*4+8];
0x0003646f: dec dword ptr [rax-0x75]; add eax, 0x18b341; lea rdi, [rip+0x18a422]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00036472: add eax, 0x18b341; lea rdi, [rip+0x18a422]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00036473: mov r11b, 0x18; add [rax-0x73], cl; cmp eax, 0x18a422; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00036474: mov bl, 0x18; add [rax-0x73], cl; cmp eax, 0x18a422; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00036476: add [rax-0x73], cl; cmp eax, 0x18a422; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00036479: cmp eax, 0x18a422; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0003647a: and ah, [rax+rbx-0x373eb800]; adc [rax+rcx*2+0x33], esp; add al, 0x25; xor [rax], al; add [rax], al; call rax;
0x0003647b: movsb [rdi], [rsi]; sbb [rax], al; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00036496: test [rbx+0x48fffffc], dh; mov eax, [rip+0x18b316]; lea rdi, [rip+0x18a1f7]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0003649a: dec dword ptr [rax-0x75]; add eax, 0x18b316; lea rdi, [rip+0x18a1f7]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0003649d: add eax, 0x18b316; lea rdi, [rip+0x18a1f7]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0003649f: mov bl, 0x18; add [rax-0x73], cl; cmp eax, 0x18a1f7; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000364a0: sbb [rax], al; lea rdi, [rip+0x18ed77]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000364a1: add [rax-0x73], cl; cmp eax, 0x18a1f7; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000364a4: cmp eax, 0x18a1f7; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000364a5: mul dword ptr [rcx-0x3eb7ffe8]; enter 0x6411, 0x48; xor eax, [0x30]; call rax;
0x00036660: mov [rbp-0x98], r10; mov rax, [rip+0x18b142]; lea rdi, [rip+0x18a2ab]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00036661: mov [rbp-0x98], edx; mov rax, [rip+0x18b142]; lea rdi, [rip+0x18a2ab]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00036663: push 0x48ffffff; mov eax, [rip+0x18b142]; lea rdi, [rip+0x18a2ab]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00036666: dec dword ptr [rax-0x75]; add eax, 0x18b142; lea rdi, [rip+0x18a2ab]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00036667: mov rax, [rip+0x18b142]; lea rdi, [rip+0x18a2ab]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00036668: mov eax, [rip+0x18b142]; lea rdi, [rip+0x18a2ab]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00036669: add eax, 0x18b142; lea rdi, [rip+0x18a2ab]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0003666b: mov cl, 0x18; add [rax-0x73], cl; cmp eax, 0x18a2ab; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0003666d: add [rax-0x73], cl; cmp eax, 0x18a2ab; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00036670: cmp eax, 0x18a2ab; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00036671: stosd [rdi]; mov [0x486411c8c1480018], al; xor eax, [0x30]; call rax;
0x000366bd: and al, 0x48; mov eax, [rip+0x18b0f3]; lea rdi, [rip+0x18a254]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000366be: mov rax, [rip+0x18b8b5]; lea rdi, [rip+0x18aa16]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000366bf: mov eax, [rip+0x18b8b5]; lea rdi, [rip+0x18aa16]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000366c0: add eax, 0x18b0f3; lea rdi, [rip+0x18a254]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000366c2: mov al, 0x18; add [rax-0x73], cl; cmp eax, 0x18a254; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000366c3: sbb [rax], al; lea rdi, [rip+0x18aa5b]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000366c4: add [rax-0x73], cl; cmp eax, 0x18a254; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000366c5: lea rdi, [rip+0x18aa5b]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000366c6: lea edi, [rip+0x18aa5b]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000366c7: cmp eax, 0x18a254; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000366c8: push rsp; mov [0x486411c8c1480018], al; xor eax, [0x30]; call rax;
0x000366c9: mov [0x486411c8c1480018], al; xor eax, [0x30]; call rax;
0x00036786: mov rax, [rip+0x18b01b]; lea rdi, [rip+0x18a1cc]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00036787: mov eax, [rip+0x18b01b]; lea rdi, [rip+0x18a1cc]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00036788: add eax, 0x18b01b; lea rdi, [rip+0x18a1cc]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00036789: sbb esi, [rax-0x72b7ffe8]; cmp eax, 0x18a1cc; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0003678a: mov al, 0x18; add [rax-0x73], cl; cmp eax, 0x18a1cc; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0003678c: add [rax-0x73], cl; cmp eax, 0x18a1cc; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0003678f: cmp eax, 0x18a1cc; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00036790: int3; mov eax, [0x486411c8c1480018]; xor eax, [0x30]; call rax;
0x000367e3: shl byte ptr [rbp+rbx+0x48], cl; mov eax, [rip+0x18afcb]; lea rdi, [rip+0x18a16c]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000367e8: add eax, 0x18afcb; lea rdi, [rip+0x18a16c]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000367ea: scasd [rdi]; sbb [rax], al; lea rdi, [rip+0x18a16c]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000367ec: add [rax-0x73], cl; cmp eax, 0x18a16c; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000367ef: cmp eax, 0x18a16c; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000367f0: insb [rdi], dx; mov eax, [0x486411c8c1480018]; xor eax, [0x30]; call rax;
0x000367f1: mov eax, [0x486411c8c1480018]; xor eax, [0x30]; call rax;
0x00036914: add [rbp+0x481d74f6], al; mov eax, [rip+0x18ae90]; lea rdi, [rip+0x18a039]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00036916: div byte ptr [rbp+rbx+0x48]; mov eax, [rip+0x18ae90]; lea rdi, [rip+0x18a039]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00036919: mov rax, [rip+0x18ae90]; lea rdi, [rip+0x18a039]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0003691a: mov eax, [rip+0x18ae90]; lea rdi, [rip+0x18a039]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0003691b: add eax, 0x18ae90; lea rdi, [rip+0x18a039]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0003691f: add [rax-0x73], cl; cmp eax, 0x18a039; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00036922: cmp eax, 0x18a039; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00036923: cmp [rax-0x3eb7ffe8], esp; enter 0x6411, 0x48; xor eax, [0x30]; call rax;
0x00036924: mov al, [0x486411c8c1480018]; xor eax, [0x30]; call rax;
0x0003697d: mov byte ptr [rbp+0x481d74c9], 0x8b; add eax, 0x18ae2f; lea rdi, [rip+0x189fd0]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00036982: mov rax, [rip+0x18afcb]; lea rdi, [rip+0x18a16c]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00036983: mov eax, [rip+0x18afcb]; lea rdi, [rip+0x18a16c]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00036984: add eax, 0x18ae2f; lea rdi, [rip+0x189fd0]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00036986: scasb [rdi]; sbb [rax], al; lea rdi, [rip+0x18a039]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00036987: sbb [rax], al; lea rdi, [rip+0x18a1cc]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00036988: add [rax-0x73], cl; cmp eax, 0x189fd0; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00036989: lea rdi, [rip+0x18a1cc]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0003698a: lea edi, [rip+0x18a1cc]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0003698b: cmp eax, 0x189fd0; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0003698c: rcr byte ptr [rdi-0x3eb7ffe8], 1; enter 0x6411, 0x48; xor eax, [0x30]; call rax;
0x0003698d: lahf; sbb [rax], al; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00036be9: sub [rbx+0xf410c4b], cl; iretd;
0x00036cb9: ror dword ptr [rax-0x7d], 1; ret 0x4901;
0x00036d51: fild st, word ptr [rax-0x80]; call far fword ptr [rax+0x74];
0x00036d54: call far fword ptr [rax+0x74];
0x00036dde: call qword ptr [rax-0x77cb8];
0x00036e6b: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x189b2c]; syscall;
0x00036e6c: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x189b2c]; syscall;
0x00036e6d: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x189b2c]; syscall;
0x00036e6e: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x189b2c]; syscall;
0x00036e6f: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x189b2c]; syscall;
0x00036e70: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x189b2c]; syscall;
0x00036e71: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x189b2c]; syscall;
0x00036e72: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x189b2c]; syscall;
0x00036e73: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x189b2c]; syscall;
0x00036e74: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x189b2c; syscall;
0x00036e75: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0x189b2c]; syscall;
0x00036e76: add [rax], al; mov eax, 0xca; lea rdi, [rip+0x189b2c]; syscall;
0x00036e77: add [rax+0xca], bh; lea rdi, [rip+0x189b2c]; syscall;
0x00036e78: mov eax, 0xca; lea rdi, [rip+0x189b2c]; syscall;
0x00036e7a: add [rax], al; add [rax-0x73], cl; cmp eax, 0x189b2c; syscall;
0x00036e7b: add [rax], al; lea rdi, [rip+0x189b2c]; syscall;
0x00036e7c: add [rax-0x73], cl; cmp eax, 0x189b2c; syscall;
0x00036e7d: lea rdi, [rip+0x189b2c]; syscall;
0x00036e7e: lea edi, [rip+0x189b2c]; syscall;
0x00036e7f: cmp eax, 0x189b2c; syscall;
0x00036e80: sub al, 0x9b; sbb [rax], al; syscall;
0x00036e81: fwait; sbb [rax], al; syscall;
0x00037074: out 0xe8, eax; cmpsb [rsi], [rdi]; iretd;
0x00037076: cmpsb [rsi], [rdi]; iretd;
0x000370b1: ror byte ptr [rdi], 0x84; ret 0xfffa;
0x0003715e: add [rax], al; add [rbp-0x77], cl; iretd;
0x0003723b: sar esp, 0xff; call qword ptr [rax+0xfed8548];
0x0003723e: call qword ptr [rax+0xfed8548];
0x00037430: add cl, ch; cmp al, 0xff; jmp qword ptr [rsi+0x2e];
0x00037432: cmp al, 0xff; jmp qword ptr [rsi+0x2e];
0x0003755c: add cl, ch; push rsp; idiv edi; jmp qword ptr [rsi+0xf];
0x0003755e: push rsp; idiv edi; jmp qword ptr [rsi+0xf];
0x00037612: sub eax, 0x9ce90015; idiv bh; jmp qword ptr [rsi+0xf];
0x00037614: add cl, ch; pushfq; idiv bh; jmp qword ptr [rsi+0xf];
0x00037616: pushfq; idiv bh; jmp qword ptr [rsi+0xf];
0x000378c4: or [rbx-0x7bf00008], al; cmp esi, 0xffffffff; dec dword ptr [rax-0x7d]; ret 0xeb04;
0x000378ca: cmp esi, 0xffffffff; dec dword ptr [rax-0x7d]; ret 0xeb04;
0x000378cd: dec dword ptr [rax-0x7d]; ret 0xeb04;
0x000378d0: ret 0xeb04;
0x000378d7: add [rbx-0x7cb7f3be], cl; ret 0x8908;
0x000378de: or [rcx+0xff685c7], cl; iretd;
0x0003794a: ret 0xc8b;
0x00037bee: add cl, ch; ret 0xfff0;
0x0003804b: ret 0x151f;
0x0003809d: outsb dx, [rsi]; sar esi, cl; jmp qword ptr [rsi+0x2e];
0x000380bc: add cl, ch; sar dh, 1; jmp qword ptr [rsi+0x66];
0x000380be: sar dh, 1; jmp qword ptr [rsi+0x66];
0x000380bf: sar dh, 1; jmp qword ptr [rsi+0x66];
0x0003828f: add [rax+rax*8-0x49f0e78c], al; ror byte ptr [rax-0x77], 1; fisttp word ptr [rdi], st; mov dh, 0x43; add [rax-0x7d], ecx; ret;
0x00038291: shl byte ptr [rax+rbx+0xf], 0xb6; ror byte ptr [rax-0x77], 1; fisttp word ptr [rdi], st; mov dh, 0x43; add [rax-0x7d], ecx; ret;
0x00038296: ror byte ptr [rax-0x77], 1; fisttp word ptr [rdi], st; mov dh, 0x43; add [rax-0x7d], ecx; ret;
0x00038299: fisttp word ptr [rdi], st; mov dh, 0x43; add [rax-0x7d], ecx; ret;
0x000382bb: add [rax], al; add [rax], al; add [rdi], cl; mov dh, 0x53; add [rax-0x7d], ecx; ret;
0x000382bd: add [rax], al; add [rdi], cl; mov dh, 0x53; add [rax-0x7d], ecx; ret;
0x000382bf: add [rdi], cl; mov dh, 0x53; add [rax-0x7d], ecx; ret;
0x0003873d: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x188291]; syscall;
0x0003873e: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x188291]; syscall;
0x0003873f: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x188291]; syscall;
0x00038740: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x188291]; syscall;
0x00038741: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x188291]; syscall;
0x00038742: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x188291]; syscall;
0x00038743: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x188291]; syscall;
0x00038744: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x188291]; syscall;
0x00038745: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x188291]; syscall;
0x00038746: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x188291]; syscall;
0x00038747: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x188291; syscall;
0x00038748: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0x188291]; syscall;
0x00038749: add [rax], al; mov eax, 0xca; lea rdi, [rip+0x188291]; syscall;
0x0003874a: add [rax+0xca], bh; lea rdi, [rip+0x188291]; syscall;
0x0003874b: mov eax, 0xca; lea rdi, [rip+0x188291]; syscall;
0x0003874d: add [rax], al; add [rax-0x73], cl; cmp eax, 0x188291; syscall;
0x0003874e: add [rax], al; lea rdi, [rip+0x188291]; syscall;
0x0003874f: add [rax-0x73], cl; cmp eax, 0x188291; syscall;
0x00038750: lea rdi, [rip+0x188291]; syscall;
0x00038751: lea edi, [rip+0x188291]; syscall;
0x00038752: cmp eax, 0x188291; syscall;
0x00038756: add [rdi], cl; add eax, 0xfffefbe9; jmp qword ptr [rsi-0x70];
0x00038758: add eax, 0xfffefbe9; jmp qword ptr [rsi-0x70];
0x0003877f: shl byte ptr [rbp+rbx+0x48], cl; mov eax, [rip+0x18cc28]; lea rdi, [rip+0x18bd11]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00038782: mov rax, [rip+0x18cc28]; lea rdi, [rip+0x18bd11]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00038783: mov eax, [rip+0x18cc28]; lea rdi, [rip+0x18bd11]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00038784: add eax, 0x189027; lea rdi, [rip+0x188110]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00038786: nop; sbb [rax], al; lea rdi, [rip+0x188110]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00038788: add [rax-0x73], cl; cmp eax, 0x188110; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0003878b: cmp eax, 0x188110; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0003878c: adc [rcx-0x3eb7ffe8], al; enter 0x6411, 0x48; xor eax, [0x30]; call rax;
0x0003878d: sbb dword ptr [rax], 0xc8c14800; adc [rax+rcx*2+0x33], esp; add al, 0x25; xor [rax], al; add [rax], al; call rax;
0x000387de: add [rbp+0x481d74c0], al; mov eax, [rip+0x188fce]; lea rdi, [rip+0x1880af]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000387e0: shl byte ptr [rbp+rbx+0x48], 0x8b; add eax, 0x188fce; lea rdi, [rip+0x1880af]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000387e3: mov rax, [rip+0x18b6d6]; lea rdi, [rip+0x18a7b7]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000387e4: mov eax, [rip+0x18b6d6]; lea rdi, [rip+0x18a7b7]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000387e5: add eax, 0x188fce; lea rdi, [rip+0x1880af]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000387e8: sbb [rax], al; lea rdi, [rip+0x18bd11]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000387e9: add [rax-0x73], cl; cmp eax, 0x1880af; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000387ea: lea rdi, [rip+0x18bd11]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000387eb: lea edi, [rip+0x18bd11]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000387ec: cmp eax, 0x1880af; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000387ed: scasd [rdi]; sbb byte ptr [rax], 0; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000387ee: sbb byte ptr [rax], 0; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000387ef: sbb [rax], al; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000387fd: add bh, bh; ror byte ptr [rcx+rcx*4-0x20], 1; pop rbp; pop r12; pop r13; ret;
0x000387ff: ror byte ptr [rcx+rcx*4-0x20], 1; pop rbp; pop r12; pop r13; ret;
0x00038a88: ret 0x3325;
0x00038a8b: xor eax, [rax]; add cl, al; cli; add al, [rcx-0xccc1e]; inc dword ptr [rcx]; ret 0xd089;
0x00038a8d: add cl, al; cli; add al, [rcx-0xccc1e]; inc dword ptr [rcx]; ret 0xd089;
0x00038a8f: cli; add al, [rcx-0xccc1e]; inc dword ptr [rcx]; ret 0xd089;
0x00038a90: add al, [rcx-0xccc1e]; inc dword ptr [rcx]; ret 0xd089;
0x00038a96: inc dword ptr [rcx]; ret 0xd089;
0x00038d1b: add eax, ebp; pop rdi; ret;
0x00038e4d: mov byte ptr [rcx], 0; mov rax, r8; pop rbx; pop rbp; pop r12; ret;
0x00038e4e: add [rax], eax; mov rax, r8; pop rbx; pop rbp; pop r12; ret;
0x00038e91: or eax, [rbp+0x31]; rcr byte ptr [rbx+0x5d], 0x4c; mov eax, eax; pop r12; ret;
0x00038f84: mov ebx, 0x850f5f3c; out dx, eax; add [rax], al; add [rax-0x7d], cl; ret;
0x00038f88: test edi, ebp; add [rax], al; add [rax-0x7d], cl; ret;
0x00038f89: out dx, eax; add [rax], al; add [rax-0x7d], cl; ret;
0x00038feb: add [rax], al; add [rax], al; add [rcx-0x77], cl; fisttp word ptr [rax-0x7d], st; ret;
0x00038fed: add [rax], al; add [rcx-0x77], cl; fisttp word ptr [rax-0x7d], st; ret;
0x00038fef: add [rcx-0x77], cl; fisttp word ptr [rax-0x7d], st; ret;
0x00038ff2: fisttp word ptr [rax-0x7d], st; ret;
0x000390af: ret 0xfffe;
0x000390bb: sbb al, ch; iretd;
0x000391e6: or [rbx-0x7cb70029], al; ret 0x8908;
0x000391e8: xlat [rbx]; dec dword ptr [rax-0x7d]; ret 0x8908;
0x000391e9: dec dword ptr [rax-0x7d]; ret 0x8908;
0x000391ec: ret 0x8908;
0x000392e5: or eax, 0x8d4c6c77; adc eax, 0x145cb1; mov r8d, r8d; movsxd rdi, [r10+r8*4]; add rdi, r10; jmp rdi;
0x000392e7: insb [rdi], dx; lea r10, [rip+0x145cb1]; mov r8d, r8d; movsxd rdi, [r10+r8*4]; add rdi, r10; jmp rdi;
0x000392e8: lea r10, [rip+0x145cb1]; mov r8d, r8d; movsxd rdi, [r10+r8*4]; add rdi, r10; jmp rdi;
0x000392e9: lea edx, [rip+0x145cb1]; mov r8d, r8d; movsxd rdi, [r10+r8*4]; add rdi, r10; jmp rdi;
0x000392ea: adc eax, 0x145cb1; mov r8d, r8d; movsxd rdi, [r10+r8*4]; add rdi, r10; jmp rdi;
0x000392eb: mov cl, 0x5c; adc al, 0; mov r8d, r8d; movsxd rdi, [r10+r8*4]; add rdi, r10; jmp rdi;
0x000392ec: pop rsp; adc al, 0; mov r8d, r8d; movsxd rdi, [r10+r8*4]; add rdi, r10; jmp rdi;
0x000392ed: adc al, 0; mov r8d, r8d; movsxd rdi, [r10+r8*4]; add rdi, r10; jmp rdi;
0x000392ef: mov r8d, r8d; movsxd rdi, [r10+r8*4]; add rdi, r10; jmp rdi;
0x000392f0: mov eax, eax; movsxd rdi, [r10+r8*4]; add rdi, r10; jmp rdi;
0x000392f2: movsxd rdi, [r10+r8*4]; add rdi, r10; jmp rdi;
0x000392f3: movsxd edi, [rdx+rax*4]; add rdi, r10; jmp rdi;
0x000392f4: cmp al, 0x82; add rdi, r10; jmp rdi;
0x000392f6: add rdi, r10; jmp rdi;
0x000392f7: add edi, edx; jmp rdi;
0x000392f8: xlat [rbx]; jmp rdi;
0x000392f9: jmp rdi;
0x0003950e: add [rax-0x80], eax; jmp qword ptr [rax];
0x00039528: xchg [rbx+0x4c000003], edx; lea edi, [rip+0x145aa4]; movzx r11d, r11b; movsxd r11, [r15+r11*4]; add r11, r15; jmp r11;
0x0003952b: add [rax], al; lea r15, [rip+0x145aa4]; movzx r11d, r11b; movsxd r11, [r15+r11*4]; add r11, r15; jmp r11;
0x0003952d: lea r15, [rip+0x145aa4]; movzx r11d, r11b; movsxd r11, [r15+r11*4]; add r11, r15; jmp r11;
0x0003952e: lea edi, [rip+0x145aa4]; movzx r11d, r11b; movsxd r11, [r15+r11*4]; add r11, r15; jmp r11;
0x0003952f: cmp eax, 0x145aa4; movzx r11d, r11b; movsxd r11, [r15+r11*4]; add r11, r15; jmp r11;
0x00039531: pop rdx; adc al, 0; movzx r11d, r11b; movsxd r11, [r15+r11*4]; add r11, r15; jmp r11;
0x00039532: adc al, 0; movzx r11d, r11b; movsxd r11, [r15+r11*4]; add r11, r15; jmp r11;
0x00039533: add [rbp+0xf], al; mov dh, 0xdb; movsxd r11, [r15+r11*4]; add r11, r15; jmp r11;
0x00039534: movzx r11d, r11b; movsxd r11, [r15+r11*4]; add r11, r15; jmp r11;
0x00039535: movzx ebx, bl; movsxd r11, [r15+r11*4]; add r11, r15; jmp r11;
0x00039536: mov dh, 0xdb; movsxd r11, [r15+r11*4]; add r11, r15; jmp r11;
0x00039537: fisttp dword ptr [rdi+0x63], st; sbb al, 0x9f; add r11, r15; jmp r11;
0x00039538: movsxd r11, [r15+r11*4]; add r11, r15; jmp r11;
0x00039539: movsxd ebx, [rdi+rbx*4]; add r11, r15; jmp r11;
0x0003953a: sbb al, 0x9f; add r11, r15; jmp r11;
0x0003953b: lahf; add r11, r15; jmp r11;
0x0003953c: add r11, r15; jmp r11;
0x0003953d: add ebx, edi; jmp r11;
0x0003953e: sti; jmp r11;
0x0003953f: jmp r11;
0x00039540: jmp rbx;
0x000395fd: sbb [rbx], al; add [rax], al; add [rax-0x7d], cl; ret 0x4808;
0x000395ff: add [rax], al; add [rax-0x7d], cl; ret 0x4808;
0x00039a35: cmp [rax-0x7d], cl; iretd;
0x00039b4d: xor [rcx-0x7d], cl; ret 0x4102;
0x00039c05: inc dword ptr [rcx+0x18]; add [rax+rcx*2-0x75], ah; or ch, bl; or eax, 0x43b60f90; add [rax-0x7d], ecx; ret;
0x00039c08: add [rax+rcx*2-0x75], ah; or ch, bl; or eax, 0x43b60f90; add [rax-0x7d], ecx; ret;
0x00039c0c: or ch, bl; or eax, 0x43b60f90; add [rax-0x7d], ecx; ret;
0x00039c0e: or eax, 0x43b60f90; add [rax-0x7d], ecx; ret;
0x00039cd3: add [rax+1], ecx; ror byte ptr [rax-0x77], 1; ret 0xe281;
0x00039cd6: ror byte ptr [rax-0x77], 1; ret 0xe281;
0x00039cf0: shl byte ptr [rbp-0x27], cl; ret;
0x00039cf2: fld st, st(3); nop [rax]; xor eax, eax; ret;
0x00039d5a: mov ch, 0xfe; call far fword ptr [rbp+0x4c];
0x00039d5e: mov rax, r12; pop r12; pop r13; pop r14; pop r15; ret;
0x00039d5f: mov eax, esp; pop r12; pop r13; pop r14; pop r15; ret;
0x00039df2: mov dl, 0xfe; jmp qword ptr [rsi+0xf];
0x00039f1b: or [r8-0x75], r9b; sbb [r15], r9b; scasd [rdi]; ret 0xd231;
0x00039f1c: or [rax-0x75], cl; sbb [r15], r9b; scasd [rdi]; ret 0xd231;
0x00039f1f: sbb [r15], r9b; scasd [rdi]; ret 0xd231;
0x00039f20: sbb [rdi], cl; scasd [rdi]; ret 0xd231;
0x00039f22: scasd [rdi]; ret 0xd231;
0x00039f54: add qword ptr [rsi*2+0x548b44e7], 0x34c0881; push rdi; and [rcx+rcx*4-0x30], cl; ret;
0x00039f55: add dword ptr [rsi*2+0x548b44e7], 0x34c0881; push rdi; and [rcx+rcx*4-0x30], cl; ret;
0x00039f56: add al, 0x75; out 0x44, eax; mov edx, [rcx+rax*4+8]; add r10, [rdi+0x20]; mov rax, r10; ret;
0x00039f58: out 0x44, eax; mov edx, [rcx+rax*4+8]; add r10, [rdi+0x20]; mov rax, r10; ret;
0x00039f59: mov r10d, [rcx+rax*4+8]; add r10, [rdi+0x20]; mov rax, r10; ret;
0x00039f5a: mov edx, [rcx+rax*4+8]; add r10, [rdi+0x20]; mov rax, r10; ret;
0x00039f5b: push rsp; or dword ptr [rax], 0x2057034c; mov rax, r10; ret;
0x00039f5c: or dword ptr [rax], 0x2057034c; mov rax, r10; ret;
0x00039f5d: or [rbx+rax+0x57], cl; and [rcx+rcx*4-0x30], cl; ret;
0x00039f5e: add r10, [rdi+0x20]; mov rax, r10; ret;
0x00039f5f: add edx, [rdi+0x20]; mov rax, r10; ret;
0x00039f60: push rdi; and [rcx+rcx*4-0x30], cl; ret;
0x00039f61: and [rcx+rcx*4-0x30], cl; ret;
0x00039f64: rol bl, 1; nop [rax+rax]; mov rax, [rip+0x183ef9]; mov dword ptr fs:[rax], 0x2a; mov rax, r10; ret;
0x00039f66: nop [rax+rax]; mov rax, [rip+0x183ef9]; mov dword ptr fs:[rax], 0x2a; mov rax, r10; ret;
0x00039f67: nop [rax+rax]; mov rax, [rip+0x183ef9]; mov dword ptr fs:[rax], 0x2a; mov rax, r10; ret;
0x00039f68: nop [rax+rax]; mov rax, [rip+0x183ef9]; mov dword ptr fs:[rax], 0x2a; mov rax, r10; ret;
0x00039f6c: add [rax], al; add [rax], al; mov rax, [rip+0x183ef9]; mov dword ptr fs:[rax], 0x2a; mov rax, r10; ret;
0x00039f6d: add [rax], al; add [rax-0x75], cl; add eax, 0x183ef9; mov dword ptr fs:[rax], 0x2a; mov rax, r10; ret;
0x00039f6e: add [rax], al; mov rax, [rip+0x183ef9]; mov dword ptr fs:[rax], 0x2a; mov rax, r10; ret;
0x00039f6f: add [rax-0x75], cl; add eax, 0x183ef9; mov dword ptr fs:[rax], 0x2a; mov rax, r10; ret;
0x00039f70: mov rax, [rip+0x183ef9]; mov dword ptr fs:[rax], 0x2a; mov rax, r10; ret;
0x00039f71: mov eax, [rip+0x183ef9]; mov dword ptr fs:[rax], 0x2a; mov rax, r10; ret;
0x00039f72: add eax, 0x183ef9; mov dword ptr fs:[rax], 0x2a; mov rax, r10; ret;
0x00039f73: stc; sbb [rax], al; mov dword ptr fs:[rax], 0x2a; mov rax, r10; ret;
0x00039f74: sbb [rax], al; mov dword ptr fs:[rax], 0x2a; mov rax, r10; ret;
0x00039f75: sbb [rax], al; mov dword ptr fs:[rax], 0x2a; mov rax, r10; ret;
0x00039f76: add [rdi+rax*8], ah; sub al, [rax]; add [rax], al; mov rax, r10; ret;
0x00039f77: mov dword ptr fs:[rax], 0x2a; mov rax, r10; ret;
0x00039f78: mov dword ptr [rax], 0x2a; mov rax, r10; ret;
0x00039f79: add [rdx], ch; add [rax], al; add [rcx+rcx*4-0x30], cl; ret;
0x00039f7a: sub al, [rax]; add [rax], al; mov rax, r10; ret;
0x00039f7b: add [rax], al; add [rcx+rcx*4-0x30], cl; ret;
0x00039fce: fist word ptr [rax-0x66fa74b8], st; sbb [rax], al; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; pop rbp; ret;
0x00039fcf: nop; mov rax, [rip+0x183e99]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; pop rbp; ret;
0x00039fd0: mov rax, [rip+0x183e99]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; pop rbp; ret;
0x00039fd1: mov eax, [rip+0x183e99]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; pop rbp; ret;
0x00039fd2: add eax, 0x183e99; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; pop rbp; ret;
0x00039fd3: cdq; sbb [rax], al; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; pop rbp; ret;
0x00039fd4: sbb [rax], al; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; pop rbp; ret;
0x00039fd5: sbb [rax], al; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; pop rbp; ret;
0x00039fd6: add [rdi+rax*8], ah; or [rax], eax; add [rax], al; mov eax, 0xffffffff; pop rbp; ret;
0x00039fd7: mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; pop rbp; ret;
0x00039fd8: mov dword ptr [rax], 9; mov eax, 0xffffffff; pop rbp; ret;
0x00039fd9: add [rcx], cl; add [rax], al; add [rax-1], bh; pop rbp; ret;
0x00039fda: or [rax], eax; add [rax], al; mov eax, 0xffffffff; pop rbp; ret;
0x0003a1d3: adc [rbx-0x76b7f7a9], cl; or [r8+0xf], cl; scasd [rdi]; ret 0x8b48;
0x0003a1d5: push rdi; or [rax-0x77], cl; or [r8+0xf], cl; scasd [rdi]; ret 0x8b48;
0x0003a1d6: or [rax-0x77], cl; or [r8+0xf], cl; scasd [rdi]; ret 0x8b48;
0x0003a1d9: or [r8+0xf], cl; scasd [rdi]; ret 0x8b48;
0x0003a1da: or [rax+0xf], cl; scasd [rdi]; ret 0x8b48;
0x0003a1dd: scasd [rdi]; ret 0x8b48;
0x0003a21d: ret 0x4903;
0x0003a25e: add eax, [rax]; add [rax-0x7d], cl; ret 0x8001;
0x0003a3b9: fimul st, dword ptr [rax-0x7d]; ret;
0x0003a44c: add [rax-0x77], cl; ret 0x394c;
0x0003a4b7: add [rax], eax; add [rcx-0x77], cl; ror byte ptr [rax-0x7d], 1; ret 0x4c01;
0x0003a4b9: add [rcx-0x77], cl; ror byte ptr [rax-0x7d], 1; ret 0x4c01;
0x0003a5d6: ror byte ptr [rax-0x7d], 1; ret 0x4c01;
0x0003a63e: call qword ptr [rax+0x4dd58948];
0x0003a883: mov ecx, 1; sar eax, 0x1f; sub ecx, edx; not eax; and eax, ecx; ret;
0x0003a886: add [rax], al; sar eax, 0x1f; sub ecx, edx; not eax; and eax, ecx; ret;
0x0003a888: sar eax, 0x1f; sub ecx, edx; not eax; and eax, ecx; ret;
0x0003a88b: sub ecx, edx; not eax; and eax, ecx; ret;
0x0003a8c3: ret 0xd8f7;
0x0003a8cd: shr eax, 0x1f; or eax, ecx; sub edx, eax; mov eax, edx; sar eax, 0x10; ret;
0x0003a8d0: or eax, ecx; sub edx, eax; mov eax, edx; sar eax, 0x10; ret;
0x0003a8d2: sub edx, eax; mov eax, edx; sar eax, 0x10; ret;
0x0003a8d4: mov eax, edx; sar eax, 0x10; ret;
0x0003a8d6: sar eax, 0x10; ret;
0x0003a8da: nop [rax+rax]; mov eax, [rsp+0x10]; or eax, 0xffff8000; inc eax; shr eax, 0x1f; ret;
0x0003a8db: nop [rax+rax]; mov eax, [rsp+0x10]; or eax, 0xffff8000; inc eax; shr eax, 0x1f; ret;
0x0003a8dd: add [rax], r8b; mov eax, [rsp+0x10]; or eax, 0xffff8000; inc eax; shr eax, 0x1f; ret;
0x0003a8de: add [rax], al; mov eax, [rsp+0x10]; or eax, 0xffff8000; inc eax; shr eax, 0x1f; ret;
0x0003a8df: add [rbx+0xd102444], cl; add [rax-0x3f000001], al; shr eax, 0x1f; ret;
0x0003a8e0: mov eax, [rsp+0x10]; or eax, 0xffff8000; inc eax; shr eax, 0x1f; ret;
0x0003a8e2: and al, 0x10; or eax, 0xffff8000; inc eax; shr eax, 0x1f; ret;
0x0003a8e3: adc [rip-0x8000], cl; inc eax; shr eax, 0x1f; ret;
0x0003a8e4: or eax, 0xffff8000; inc eax; shr eax, 0x1f; ret;
0x0003a8e5: add [rax-0x3f000001], al; shr eax, 0x1f; ret;
0x0003a8e6: cmp bh, 0xff; inc eax; shr eax, 0x1f; ret;
0x0003a8e9: inc eax; shr eax, 0x1f; ret;
0x0003a8f7: adc [rcx+0x8000e2], al; add [rip+0x7fff], ah; or eax, edx; mov [rsp+0x10], eax; fld st, tbyte ptr [rsp+8]; ret;
0x0003a8f8: and edx, 0x8000; and eax, 0x7fff; or eax, edx; mov [rsp+0x10], eax; fld st, tbyte ptr [rsp+8]; ret;
0x0003a8fb: add byte ptr [rax], 0; and eax, 0x7fff; or eax, edx; mov [rsp+0x10], eax; fld st, tbyte ptr [rsp+8]; ret;
0x0003a8fc: add [rax], al; and eax, 0x7fff; or eax, edx; mov [rsp+0x10], eax; fld st, tbyte ptr [rsp+8]; ret;
0x0003a8fd: add [rip+0x7fff], ah; or eax, edx; mov [rsp+0x10], eax; fld st, tbyte ptr [rsp+8]; ret;
0x0003a8fe: and eax, 0x7fff; or eax, edx; mov [rsp+0x10], eax; fld st, tbyte ptr [rsp+8]; ret;
0x0003a901: add [rax], al; or eax, edx; mov [rsp+0x10], eax; fld st, tbyte ptr [rsp+8]; ret;
0x0003a902: add [rcx], cl; ror byte ptr [rcx-0x24efdbbc], 1; insb [rdi], dx; and al, 8; ret;
0x0003a903: or eax, edx; mov [rsp+0x10], eax; fld st, tbyte ptr [rsp+8]; ret;
0x0003a904: ror byte ptr [rcx-0x24efdbbc], 1; insb [rdi], dx; and al, 8; ret;
0x0003a905: mov [rsp+0x10], eax; fld st, tbyte ptr [rsp+8]; ret;
0x0003a907: and al, 0x10; fld st, tbyte ptr [rsp+8]; ret;
0x0003a908: adc bl, bl; insb [rdi], dx; and al, 8; ret;
0x0003a954: and ax, 0x8000; mov qword ptr [rsp-0x18], 0; mov [rsp-0x10], ax; fstp tbyte ptr [rdi], st; fld st, tbyte ptr [rsp-0x18]; ret;
0x0003a958: mov qword ptr [rsp-0x18], 0; mov [rsp-0x10], ax; fstp tbyte ptr [rdi], st; fld st, tbyte ptr [rsp-0x18]; ret;
0x0003a959: mov dword ptr [rsp-0x18], 0; mov [rsp-0x10], ax; fstp tbyte ptr [rdi], st; fld st, tbyte ptr [rsp-0x18]; ret;
0x0003a95d: add [rax], al; add [rax], al; mov [rsp-0x10], ax; fstp tbyte ptr [rdi], st; fld st, tbyte ptr [rsp-0x18]; ret;
0x0003a95e: add [rax], al; add [rsi-0x77], ah; and al, 0xf0; fstp tbyte ptr [rdi], st; fld st, tbyte ptr [rsp-0x18]; ret;
0x0003a95f: add [rax], al; mov [rsp-0x10], ax; fstp tbyte ptr [rdi], st; fld st, tbyte ptr [rsp-0x18]; ret;
0x0003a960: add [rsi-0x77], ah; and al, 0xf0; fstp tbyte ptr [rdi], st; fld st, tbyte ptr [rsp-0x18]; ret;
0x0003a961: mov [rsp-0x10], ax; fstp tbyte ptr [rdi], st; fld st, tbyte ptr [rsp-0x18]; ret;
0x0003a962: mov [rsp-0x10], eax; fstp tbyte ptr [rdi], st; fld st, tbyte ptr [rsp-0x18]; ret;
0x0003a964: and al, 0xf0; fstp tbyte ptr [rdi], st; fld st, tbyte ptr [rsp-0x18]; ret;
0x0003a966: fstp tbyte ptr [rdi], st; fld st, tbyte ptr [rsp-0x18]; ret;
0x0003a9a0: fstp st(0), st; and ax, 0x8000; mov [rsp-0x10], ax; mov qword ptr [rsp-0x18], 0; fld st, tbyte ptr [rsp-0x18]; ret;
0x0003a9a2: and ax, 0x8000; mov [rsp-0x10], ax; mov qword ptr [rsp-0x18], 0; fld st, tbyte ptr [rsp-0x18]; ret;
0x0003a9a3: and eax, 0x89668000; and al, 0xf0; mov qword ptr [rsp-0x18], 0; fld st, tbyte ptr [rsp-0x18]; ret;
0x0003a9a5: and byte ptr [rsi-0x77], 0x44; and al, 0xf0; mov qword ptr [rsp-0x18], 0; fld st, tbyte ptr [rsp-0x18]; ret;
0x0003a9a6: mov [rsp-0x10], ax; mov qword ptr [rsp-0x18], 0; fld st, tbyte ptr [rsp-0x18]; ret;
0x0003a9a7: mov [rsp-0x10], eax; mov qword ptr [rsp-0x18], 0; fld st, tbyte ptr [rsp-0x18]; ret;
0x0003a9a9: and al, 0xf0; mov qword ptr [rsp-0x18], 0; fld st, tbyte ptr [rsp-0x18]; ret;
0x0003a9ab: mov qword ptr [rsp-0x18], 0; fld st, tbyte ptr [rsp-0x18]; ret;
0x0003a9ac: mov dword ptr [rsp-0x18], 0; fld st, tbyte ptr [rsp-0x18]; ret;
0x0003a9ae: and al, 0xe8; add [rax], al; add [rax], al; fld st, tbyte ptr [rsp-0x18]; ret;
0x0003a9b0: add [rax], al; add [rax], al; fld st, tbyte ptr [rsp-0x18]; ret;
0x0003a9b1: add [rax], al; add bl, bl; insb [rdi], dx; and al, 0xe8; ret;
0x0003a9b2: add [rax], al; fld st, tbyte ptr [rsp-0x18]; ret;
0x0003a9b3: add bl, bl; insb [rdi], dx; and al, 0xe8; ret;
0x0003a9fe: fld st, tbyte ptr [rsp-0x18]; fld st, st(0); fstp tbyte ptr [rdi], st; fld st, tbyte ptr [rsp+8]; fsubrp; ret;
0x0003aa00: and al, 0xe8; fld st, st(0); fstp tbyte ptr [rdi], st; fld st, tbyte ptr [rsp+8]; fsubrp; ret;
0x0003aa02: fld st, st(0); fstp tbyte ptr [rdi], st; fld st, tbyte ptr [rsp+8]; fsubrp; ret;
0x0003aa03: rcr bl, 0x3f; fld st, tbyte ptr [rsp+8]; fsubrp; ret;
0x0003aa04: fstp tbyte ptr [rdi], st; fld st, tbyte ptr [rsp+8]; fsubrp; ret;
0x0003aa06: fld st, tbyte ptr [rsp+8]; fsubrp; ret;
0x0003aa07: insb [rdi], dx; and al, 8; fsubrp; ret;
0x0003aa08: and al, 8; fsubrp; ret;
0x0003aa0a: fsubrp; ret;
0x0003aa19: and ax, 0x8000; mov [rsp-0x10], ax; fld st, tbyte ptr [rsp-0x18]; fstp tbyte ptr [rdi], st; fld st, tbyte ptr [rsp+8]; ret;
0x0003aa1a: and eax, 0x89668000; and al, 0xf0; fld st, tbyte ptr [rsp-0x18]; fstp tbyte ptr [rdi], st; fld st, tbyte ptr [rsp+8]; ret;
0x0003aa1c: and byte ptr [rsi-0x77], 0x44; and al, 0xf0; fld st, tbyte ptr [rsp-0x18]; fstp tbyte ptr [rdi], st; fld st, tbyte ptr [rsp+8]; ret;
0x0003aa1d: mov [rsp-0x10], ax; fld st, tbyte ptr [rsp-0x18]; fstp tbyte ptr [rdi], st; fld st, tbyte ptr [rsp+8]; ret;
0x0003aa1e: mov [rsp-0x10], eax; fld st, tbyte ptr [rsp-0x18]; fstp tbyte ptr [rdi], st; fld st, tbyte ptr [rsp+8]; ret;
0x0003aa20: and al, 0xf0; fld st, tbyte ptr [rsp-0x18]; fstp tbyte ptr [rdi], st; fld st, tbyte ptr [rsp+8]; ret;
0x0003aa22: fld st, tbyte ptr [rsp-0x18]; fstp tbyte ptr [rdi], st; fld st, tbyte ptr [rsp+8]; ret;
0x0003aa23: insb [rdi], dx; and al, 0xe8; fstp tbyte ptr [rdi], st; fld st, tbyte ptr [rsp+8]; ret;
0x0003aa24: and al, 0xe8; fstp tbyte ptr [rdi], st; fld st, tbyte ptr [rsp+8]; ret;
0x0003aa26: fstp tbyte ptr [rdi], st; fld st, tbyte ptr [rsp+8]; ret;
0x0003aa28: fld st, tbyte ptr [rsp+8]; ret;
0x0003aa29: insb [rdi], dx; and al, 8; ret;
0x0003aa2a: and al, 8; ret;
0x0003aa5f: add [rcx-0x2403db84], cl; and al, 0xfc; fld st, tbyte ptr [rsp+8]; fscale; fstp st(1), st; ret;
0x0003aa60: mov [rsp-4], edi; fild st, dword ptr [rsp-4]; fld st, tbyte ptr [rsp+8]; fscale; fstp st(1), st; ret;
0x0003aa62: and al, 0xfc; fild st, dword ptr [rsp-4]; fld st, tbyte ptr [rsp+8]; fscale; fstp st(1), st; ret;
0x0003aa63: cld; fild st, dword ptr [rsp-4]; fld st, tbyte ptr [rsp+8]; fscale; fstp st(1), st; ret;
0x0003aa64: fild st, dword ptr [rsp-4]; fld st, tbyte ptr [rsp+8]; fscale; fstp st(1), st; ret;
0x0003aa66: and al, 0xfc; fld st, tbyte ptr [rsp+8]; fscale; fstp st(1), st; ret;
0x0003aa67: cld; fld st, tbyte ptr [rsp+8]; fscale; fstp st(1), st; ret;
0x0003aa68: fld st, tbyte ptr [rsp+8]; fscale; fstp st(1), st; ret;
0x0003aa69: insb [rdi], dx; and al, 8; fscale; fstp st(1), st; ret;
0x0003aa6a: and al, 8; fscale; fstp st(1), st; ret;
0x0003aa6b: or cl, bl; std; fstp st(1), st; ret;
0x0003aa6c: fscale; fstp st(1), st; ret;
0x0003aa6d: std; fstp st(1), st; ret;
0x0003aa6e: fstp st(1), st; ret;
0x0003aac9: or eax, 0x3ffe; mov [rdi], edx; fstp tbyte ptr [rsp-0x18], st; mov [rsp-0x10], ax; fld st, tbyte ptr [rsp-0x18]; ret;
0x0003aacc: add [rax], al; mov [rdi], edx; fstp tbyte ptr [rsp-0x18], st; mov [rsp-0x10], ax; fld st, tbyte ptr [rsp-0x18]; ret;
0x0003aace: mov [rdi], edx; fstp tbyte ptr [rsp-0x18], st; mov [rsp-0x10], ax; fld st, tbyte ptr [rsp-0x18]; ret;
0x0003aad0: fstp tbyte ptr [rsp-0x18], st; mov [rsp-0x10], ax; fld st, tbyte ptr [rsp-0x18]; ret;
0x0003aad2: and al, 0xe8; mov [rsp-0x10], ax; fld st, tbyte ptr [rsp-0x18]; ret;
0x0003aad4: mov [rsp-0x10], ax; fld st, tbyte ptr [rsp-0x18]; ret;
0x0003aad5: mov [rsp-0x10], eax; fld st, tbyte ptr [rsp-0x18]; ret;
0x0003ab02: mov ebx, 0x441f0f; add bl, bl; insb [rdi], dx; and al, 8; fadd st, st(0); ret;
0x0003ab03: nop [rax+rax]; fld st, tbyte ptr [rsp+8]; fadd st, st(0); ret;
0x0003ab05: add [rax], r8b; fld st, tbyte ptr [rsp+8]; fadd st, st(0); ret;
0x0003ab06: add [rax], al; fld st, tbyte ptr [rsp+8]; fadd st, st(0); ret;
0x0003ab07: add bl, bl; insb [rdi], dx; and al, 8; fadd st, st(0); ret;
0x0003ab08: fld st, tbyte ptr [rsp+8]; fadd st, st(0); ret;
0x0003ab09: insb [rdi], dx; and al, 8; fadd st, st(0); ret;
0x0003ab0a: and al, 8; fadd st, st(0); ret;
0x0003ab0c: fadd st, st(0); ret;
0x0003ab10: fld st, tbyte ptr [rsp+8]; fxam; fnstsw ax; fstp st(0), st; and eax, 0x200; ret;
0x0003ab12: and al, 8; fxam; fnstsw ax; fstp st(0), st; and eax, 0x200; ret;
0x0003ab14: fxam; fnstsw ax; fstp st(0), st; and eax, 0x200; ret;
0x0003ab16: fnstsw ax; fstp st(0), st; and eax, 0x200; ret;
0x0003ab18: fstp st(0), st; and eax, 0x200; ret;
0x0003ab19: fsub st, dword ptr [rip+0x200]; ret;
0x0003ab44: fadd st, st(0); add rsp, 8; ret;
0x0003ab79: int3; mov rax, [rip+0x1832ef]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret;
0x0003ab7c: add eax, 0x1832ef; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret;
0x0003ab7e: xor bl, [rax]; add [rdi+rax*8], ah; and al, [rax]; add [rax], al; add rsp, 8; ret;
0x0003ab99: ret 0xb948;
0x0003abb2: enter 0xf748, 0xd8; or rax, rcx; sar rax, 0x3f; not eax; and eax, edx; ret;
0x0003abb3: neg rax; or rax, rcx; sar rax, 0x3f; not eax; and eax, edx; ret;
0x0003abb4: neg eax; or rax, rcx; sar rax, 0x3f; not eax; and eax, edx; ret;
0x0003abb6: or rax, rcx; sar rax, 0x3f; not eax; and eax, edx; ret;
0x0003abb7: or eax, ecx; sar rax, 0x3f; not eax; and eax, edx; ret;
0x0003abb9: sar rax, 0x3f; not eax; and eax, edx; ret;
0x0003abba: sar eax, 0x3f; not eax; and eax, edx; ret;
0x0003abd0: mov rax, 0x7ff0000000000000; movq rdx, xmm0; btr rdx, 0x3f; sub rax, rdx; shr rax, 0x3f; ret;
0x0003abda: movq rdx, xmm0; btr rdx, 0x3f; sub rax, rdx; shr rax, 0x3f; ret;
0x0003abdb: movq rdx, mm0; btr rdx, 0x3f; sub rax, rdx; shr rax, 0x3f; ret;
0x0003abdc: movd edx, mm0; btr rdx, 0x3f; sub rax, rdx; shr rax, 0x3f; ret;
0x0003abdf: btr rdx, 0x3f; sub rax, rdx; shr rax, 0x3f; ret;
0x0003abe0: btr edx, 0x3f; sub rax, rdx; shr rax, 0x3f; ret;
0x0003abfa: movq [rsp-8], xmm0; mov rax, rdx; and rax, [rsp-8]; sub rax, rdx; shr rax, 0x3f; ret;
0x0003abfe: and al, 0xf8; mov rax, rdx; and rax, [rsp-8]; sub rax, rdx; shr rax, 0x3f; ret;
0x0003abff: clc; mov rax, rdx; and rax, [rsp-8]; sub rax, rdx; shr rax, 0x3f; ret;
0x0003ac00: mov rax, rdx; and rax, [rsp-8]; sub rax, rdx; shr rax, 0x3f; ret;
0x0003ac01: mov eax, edx; and rax, [rsp-8]; sub rax, rdx; shr rax, 0x3f; ret;
0x0003ac02: ror byte ptr [rax+0x23], 1; and al, 0xf8; sub rax, rdx; shr rax, 0x3f; ret;
0x0003ac03: and rax, [rsp-8]; sub rax, rdx; shr rax, 0x3f; ret;
0x0003ac04: and eax, [rsp-8]; sub rax, rdx; shr rax, 0x3f; ret;
0x0003ac06: and al, 0xf8; sub rax, rdx; shr rax, 0x3f; ret;
0x0003ac07: clc; sub rax, rdx; shr rax, 0x3f; ret;
0x0003ac10: andpd xmm0, [rip+0x157688]; andpd xmm1, [rip+0x157670]; orpd xmm0, xmm1; ret;
0x0003ac11: andps xmm0, [rip+0x157688]; andpd xmm1, [rip+0x157670]; orpd xmm0, xmm1; ret;
0x0003ac12: push rsp; add eax, 0x157688; andpd xmm1, [rip+0x157670]; orpd xmm0, xmm1; ret;
0x0003ac13: add eax, 0x157688; andpd xmm1, [rip+0x157670]; orpd xmm0, xmm1; ret;
0x0003ac14: mov [rsi+0x15], dh; add [rsi+0xf], ah; push rsp; or eax, 0x157670; orpd xmm0, xmm1; ret;
0x0003ac16: adc eax, 0x540f6600; or eax, 0x157670; orpd xmm0, xmm1; ret;
0x0003ac17: add [rsi+0xf], ah; push rsp; or eax, 0x157670; orpd xmm0, xmm1; ret;
0x0003ac18: andpd xmm1, [rip+0x157670]; orpd xmm0, xmm1; ret;
0x0003ac19: andps xmm1, [rip+0x157670]; orpd xmm0, xmm1; ret;
0x0003ac1a: push rsp; or eax, 0x157670; orpd xmm0, xmm1; ret;
0x0003ac1b: or eax, 0x157670; orpd xmm0, xmm1; ret;
0x0003ac20: orpd xmm0, xmm1; ret;
0x0003ac21: orps xmm0, xmm1; ret;
0x0003ac66: ret 0x5775;
0x0003ac68: push rdi; mov rax, 0x8000000000000000; movsd [rdi], xmm0; and rdx, rax; movq xmm0, rdx; ret;
0x0003ac69: mov rax, 0x8000000000000000; movsd [rdi], xmm0; and rdx, rax; movq xmm0, rdx; ret;
0x0003ac6a: mov eax, 0; add [rax], al; add [rax+0x7110ff2], al; and rdx, rax; movq xmm0, rdx; ret;
0x0003ac6d: add [rax], al; add [rax], al; add [rax+0x7110ff2], al; and rdx, rax; movq xmm0, rdx; ret;
0x0003ac6f: add [rax], al; add [rax+0x7110ff2], al; and rdx, rax; movq xmm0, rdx; ret;
0x0003ac70: add [rax], al; xor dl, 0xf; adc [rdi], eax; and rdx, rax; movq xmm0, rdx; ret;
0x0003ac71: add [rax+0x7110ff2], al; and rdx, rax; movq xmm0, rdx; ret;
0x0003ac72: xor dl, 0xf; adc [rdi], eax; and rdx, rax; movq xmm0, rdx; ret;
0x0003ac73: movsd [rdi], xmm0; and rdx, rax; movq xmm0, rdx; ret;
0x0003ac74: movups [rdi], xmm0; and rdx, rax; movq xmm0, rdx; ret;
0x0003ac75: adc [rdi], eax; and rdx, rax; movq xmm0, rdx; ret;
0x0003ac7d: outsb dx, [rsi]; ret 0xf2c3;
0x0003ac7e: ret 0xf2c3;
0x0003ac9b: dec dword ptr [rdi]; add [rax-0x7b], cl; ret 0x574;
0x0003ac9c: str [rax-0x7b]; ret 0x574;
0x0003ac9d: add [rax-0x7b], cl; ret 0x574;
0x0003aca4: nop [rax]; mov rax, 0x8000000000000000; and rdx, rax; movq xmm0, rdx; ret;
0x0003aca8: mov rax, 0x8000000000000000; and rdx, rax; movq xmm0, rdx; ret;
0x0003aca9: mov eax, 0; add [rax], al; add [rax+0x66c22148], al; movq mm0, rdx; ret;
0x0003acaa: add [rax], al; add [rax], al; add [rax], al; add [rax+0x66c22148], al; movq mm0, rdx; ret;
0x0003acab: add [rax], al; add [rax], al; add [rax], al; or byte ptr [rax+0x21], 0xc2; movq xmm0, rdx; ret;
0x0003acac: add [rax], al; add [rax], al; add [rax+0x66c22148], al; movq mm0, rdx; ret;
0x0003acad: add [rax], al; add [rax], al; or byte ptr [rax+0x21], 0xc2; movq xmm0, rdx; ret;
0x0003acae: add [rax], al; add [rax+0x66c22148], al; movq mm0, rdx; ret;
0x0003acaf: add [rax], al; or byte ptr [rax+0x21], 0xc2; movq xmm0, rdx; ret;
0x0003acb0: add [rax+0x66c22148], al; movq mm0, rdx; ret;
0x0003acb1: or byte ptr [rax+0x21], 0xc2; movq xmm0, rdx; ret;
0x0003acb2: and rdx, rax; movq xmm0, rdx; ret;
0x0003acb3: and edx, eax; movq xmm0, rdx; ret;
0x0003acb5: movq xmm0, rdx; ret;
0x0003acb6: movq mm0, rdx; ret;
0x0003acb7: movd mm0, edx; ret;
0x0003acb8: outsb dx, [rsi]; ret 0xfc3;
0x0003acc0: not rax; and rax, rdx; movq xmm1, rax; mov [rdi], rax; subsd xmm0, xmm1; ret;
0x0003acc1: not eax; and rax, rdx; movq xmm1, rax; mov [rdi], rax; subsd xmm0, xmm1; ret;
0x0003acc2: ror byte ptr [rax+0x21], 1; shl byte ptr [rsi+0x48], 1; movd mm1, eax; mov [rdi], rax; subsd xmm0, xmm1; ret;
0x0003acc3: and rax, rdx; movq xmm1, rax; mov [rdi], rax; subsd xmm0, xmm1; ret;
0x0003acc4: and eax, edx; movq xmm1, rax; mov [rdi], rax; subsd xmm0, xmm1; ret;
0x0003acc5: shl byte ptr [rsi+0x48], 1; movd mm1, eax; mov [rdi], rax; subsd xmm0, xmm1; ret;
0x0003acc6: movq xmm1, rax; mov [rdi], rax; subsd xmm0, xmm1; ret;
0x0003acc7: movq mm1, rax; mov [rdi], rax; subsd xmm0, xmm1; ret;
0x0003acc8: movd mm1, eax; mov [rdi], rax; subsd xmm0, xmm1; ret;
0x0003acc9: outsb dx, [rsi]; enter 0x8948, 7; subsd xmm0, xmm1; ret;
0x0003acca: enter 0x8948, 7; subsd xmm0, xmm1; ret;
0x0003accb: mov [rdi], rax; subsd xmm0, xmm1; ret;
0x0003accc: mov [rdi], eax; subsd xmm0, xmm1; ret;
0x0003acce: subsd xmm0, xmm1; ret;
0x0003acd3: nop [rax+rax]; mov rax, 0x8000000000000000; and rdx, rax; mov [rdi], rdx; ret;
0x0003acd5: add [rax], r8b; mov rax, 0x8000000000000000; and rdx, rax; mov [rdi], rdx; ret;
0x0003acd6: add [rax], al; mov rax, 0x8000000000000000; and rdx, rax; mov [rdi], rdx; ret;
0x0003acd8: mov rax, 0x8000000000000000; and rdx, rax; mov [rdi], rdx; ret;
0x0003acd9: mov eax, 0; add [rax], al; add [rax+0x48c22148], al; mov [rdi], edx; ret;
0x0003acda: add [rax], al; add [rax], al; add [rax], al; add [rax+0x48c22148], al; mov [rdi], edx; ret;
0x0003acdb: add [rax], al; add [rax], al; add [rax], al; or byte ptr [rax+0x21], 0xc2; mov [rdi], rdx; ret;
0x0003acdc: add [rax], al; add [rax], al; add [rax+0x48c22148], al; mov [rdi], edx; ret;
0x0003acdd: add [rax], al; add [rax], al; or byte ptr [rax+0x21], 0xc2; mov [rdi], rdx; ret;
0x0003acde: add [rax], al; add [rax+0x48c22148], al; mov [rdi], edx; ret;
0x0003acdf: add [rax], al; or byte ptr [rax+0x21], 0xc2; mov [rdi], rdx; ret;
0x0003ace0: add [rax+0x48c22148], al; mov [rdi], edx; ret;
0x0003ace1: or byte ptr [rax+0x21], 0xc2; mov [rdi], rdx; ret;
0x0003ace2: and rdx, rax; mov [rdi], rdx; ret;
0x0003ace3: and edx, eax; mov [rdi], rdx; ret;
0x0003ad22: call qword ptr [rax-0x3d];
0x0003ad3c: mov rdx, 0x800fffffffffffff; shl rax, 0x34; and rcx, rdx; or rcx, rax; movq xmm0, rcx; ret;
0x0003ad45: or byte ptr [rax-0x3f], 0xe0; xor al, 0x48; and ecx, edx; or rcx, rax; movq xmm0, rcx; ret;
0x0003ad46: shl rax, 0x34; and rcx, rdx; or rcx, rax; movq xmm0, rcx; ret;
0x0003ad47: shl eax, 0x34; and rcx, rdx; or rcx, rax; movq xmm0, rcx; ret;
0x0003ad49: xor al, 0x48; and ecx, edx; or rcx, rax; movq xmm0, rcx; ret;
0x0003ad4a: and rcx, rdx; or rcx, rax; movq xmm0, rcx; ret;
0x0003ad4b: and ecx, edx; or rcx, rax; movq xmm0, rcx; ret;
0x0003ad4d: or rcx, rax; movq xmm0, rcx; ret;
0x0003ad4e: or ecx, eax; movq xmm0, rcx; ret;
0x0003ad50: movq xmm0, rcx; ret;
0x0003ad51: movq mm0, rcx; ret;
0x0003ad52: movd mm0, ecx; ret;
0x0003ad56: nop [rax+rax]; andpd xmm1, [rip+0x157528]; movsd xmm0, [rip+0x157808]; orpd xmm1, [rip+0x157548]; mulsd xmm0, xmm1; ret;
0x0003ad57: nop [rax+rax]; andpd xmm1, [rip+0x157528]; movsd xmm0, [rip+0x157808]; orpd xmm1, [rip+0x157548]; mulsd xmm0, xmm1; ret;
0x0003ad58: nop [rax+rax]; andpd xmm1, [rip+0x157528]; movsd xmm0, [rip+0x157808]; orpd xmm1, [rip+0x157548]; mulsd xmm0, xmm1; ret;
0x0003ad5e: add [rax], al; andpd xmm1, [rip+0x157528]; movsd xmm0, [rip+0x157808]; orpd xmm1, [rip+0x157548]; mulsd xmm0, xmm1; ret;
0x0003ad60: andpd xmm1, [rip+0x157528]; movsd xmm0, [rip+0x157808]; orpd xmm1, [rip+0x157548]; mulsd xmm0, xmm1; ret;
0x0003ad61: andps xmm1, [rip+0x157528]; movsd xmm0, [rip+0x157808]; orpd xmm1, [rip+0x157548]; mulsd xmm0, xmm1; ret;
0x0003ad62: push rsp; or eax, 0x157528; movsd xmm0, [rip+0x157808]; orpd xmm1, [rip+0x157548]; mulsd xmm0, xmm1; ret;
0x0003ad63: or eax, 0x157528; movsd xmm0, [rip+0x157808]; orpd xmm1, [rip+0x157548]; mulsd xmm0, xmm1; ret;
0x0003ad64: sub [rbp+0x15], dh; add dl, dh; movups xmm0, [rip+0x157808]; orpd xmm1, [rip+0x157548]; mulsd xmm0, xmm1; ret;
0x0003ad66: adc eax, 0x100ff200; add eax, 0x157808; orpd xmm1, [rip+0x157548]; mulsd xmm0, xmm1; ret;
0x0003ad67: add dl, dh; movups xmm0, [rip+0x157808]; orpd xmm1, [rip+0x157548]; mulsd xmm0, xmm1; ret;
0x0003ad68: movsd xmm0, [rip+0x157808]; orpd xmm1, [rip+0x157548]; mulsd xmm0, xmm1; ret;
0x0003ad69: movups xmm0, [rip+0x157808]; orpd xmm1, [rip+0x157548]; mulsd xmm0, xmm1; ret;
0x0003ad6a: adc [rip+0x157808], al; orpd xmm1, [rip+0x157548]; mulsd xmm0, xmm1; ret;
0x0003ad6b: add eax, 0x157808; orpd xmm1, [rip+0x157548]; mulsd xmm0, xmm1; ret;
0x0003ad6c: or [rax+0x15], bh; add [rsi+0xf], ah; push rsi; or eax, 0x157548; mulsd xmm0, xmm1; ret;
0x0003ad6e: adc eax, 0x560f6600; or eax, 0x157548; mulsd xmm0, xmm1; ret;
0x0003ad6f: add [rsi+0xf], ah; push rsi; or eax, 0x157548; mulsd xmm0, xmm1; ret;
0x0003ad70: orpd xmm1, [rip+0x157548]; mulsd xmm0, xmm1; ret;
0x0003ad71: orps xmm1, [rip+0x157548]; mulsd xmm0, xmm1; ret;
0x0003ad72: push rsi; or eax, 0x157548; mulsd xmm0, xmm1; ret;
0x0003ad73: or eax, 0x157548; mulsd xmm0, xmm1; ret;
0x0003ad85: pop rdx; andpd xmm1, [rip+0x157502]; movsd xmm0, [rip+0x1577da]; orpd xmm1, [rip+0x157512]; mulsd xmm0, xmm1; ret;
0x0003ad86: andpd xmm1, [rip+0x157502]; movsd xmm0, [rip+0x1577da]; orpd xmm1, [rip+0x157512]; mulsd xmm0, xmm1; ret;
0x0003ad87: andps xmm1, [rip+0x157502]; movsd xmm0, [rip+0x1577da]; orpd xmm1, [rip+0x157512]; mulsd xmm0, xmm1; ret;
0x0003ad88: push rsp; or eax, 0x157502; movsd xmm0, [rip+0x1577da]; orpd xmm1, [rip+0x157512]; mulsd xmm0, xmm1; ret;
0x0003ad89: or eax, 0x157502; movsd xmm0, [rip+0x1577da]; orpd xmm1, [rip+0x157512]; mulsd xmm0, xmm1; ret;
0x0003ad8a: add dh, [rbp+0x15]; add dl, dh; movups xmm0, [rip+0x1577da]; orpd xmm1, [rip+0x157512]; mulsd xmm0, xmm1; ret;
0x0003ad8c: adc eax, 0x100ff200; add eax, 0x1577da; orpd xmm1, [rip+0x157512]; mulsd xmm0, xmm1; ret;
0x0003ad8d: add dl, dh; movups xmm0, [rip+0x1577da]; orpd xmm1, [rip+0x157512]; mulsd xmm0, xmm1; ret;
0x0003ad8e: movsd xmm0, [rip+0x1577da]; orpd xmm1, [rip+0x157512]; mulsd xmm0, xmm1; ret;
0x0003ad8f: movups xmm0, [rip+0x1577da]; orpd xmm1, [rip+0x157512]; mulsd xmm0, xmm1; ret;
0x0003ad90: adc [rip+0x1577da], al; orpd xmm1, [rip+0x157512]; mulsd xmm0, xmm1; ret;
0x0003ad91: add eax, 0x1577da; orpd xmm1, [rip+0x157512]; mulsd xmm0, xmm1; ret;
0x0003ad92: fidiv st, dword ptr [rdi+0x15]; add [rsi+0xf], ah; push rsi; or eax, 0x157512; mulsd xmm0, xmm1; ret;
0x0003ad94: adc eax, 0x560f6600; or eax, 0x157512; mulsd xmm0, xmm1; ret;
0x0003ad95: add [rsi+0xf], ah; push rsi; or eax, 0x157512; mulsd xmm0, xmm1; ret;
0x0003ad96: orpd xmm1, [rip+0x157512]; mulsd xmm0, xmm1; ret;
0x0003ad97: orps xmm1, [rip+0x157512]; mulsd xmm0, xmm1; ret;
0x0003ad98: push rsi; or eax, 0x157512; mulsd xmm0, xmm1; ret;
0x0003ad99: or eax, 0x157512; mulsd xmm0, xmm1; ret;
0x0003ad9a: adc dh, [rbp+0x15]; add dl, dh; mulps xmm0, xmm1; ret;
0x0003ad9d: add dl, dh; mulps xmm0, xmm1; ret;
0x0003ad9e: mulsd xmm0, xmm1; ret;
0x0003ad9f: mulps xmm0, xmm1; ret;
0x0003aded: shl rax, 0x34; and rcx, rdx; or rax, rcx; movq xmm0, rax; mulsd xmm0, [rip+0x15777b]; ret;
0x0003adee: shl rax, 0x34; and rcx, rdx; or rax, rcx; movq xmm0, rax; mulsd xmm0, [rip+0x15777b]; ret;
0x0003adef: shl eax, 0x34; and rcx, rdx; or rax, rcx; movq xmm0, rax; mulsd xmm0, [rip+0x15777b]; ret;
0x0003adf1: xor al, 0x48; and ecx, edx; or rax, rcx; movq xmm0, rax; mulsd xmm0, [rip+0x15777b]; ret;
0x0003adf2: and rcx, rdx; or rax, rcx; movq xmm0, rax; mulsd xmm0, [rip+0x15777b]; ret;
0x0003adf3: and ecx, edx; or rax, rcx; movq xmm0, rax; mulsd xmm0, [rip+0x15777b]; ret;
0x0003adf5: or rax, rcx; movq xmm0, rax; mulsd xmm0, [rip+0x15777b]; ret;
0x0003adf6: or eax, ecx; movq xmm0, rax; mulsd xmm0, [rip+0x15777b]; ret;
0x0003adf7: enter 0x4866, 0xf; outsb dx, [rsi]; shl dl, 0xf; pop rcx; add eax, 0x15777b; ret;
0x0003adf8: movq xmm0, rax; mulsd xmm0, [rip+0x15777b]; ret;
0x0003adf9: movq mm0, rax; mulsd xmm0, [rip+0x15777b]; ret;
0x0003adfa: movd mm0, eax; mulsd xmm0, [rip+0x15777b]; ret;
0x0003adfb: outsb dx, [rsi]; shl dl, 0xf; pop rcx; add eax, 0x15777b; ret;
0x0003adfc: shl dl, 0xf; pop rcx; add eax, 0x15777b; ret;
0x0003adfd: mulsd xmm0, [rip+0x15777b]; ret;
0x0003adfe: mulps xmm0, [rip+0x15777b]; ret;
0x0003adff: pop rcx; add eax, 0x15777b; ret;
0x0003ae00: add eax, 0x15777b; ret;
0x0003ae03: adc eax, 0x2e66c300; nop [rax+rax]; addsd xmm1, xmm0; movapd xmm0, xmm1; ret;
0x0003ae04: add bl, al; nop [rax+rax]; addsd xmm1, xmm0; movapd xmm0, xmm1; ret;
0x0003ae06: nop [rax+rax]; addsd xmm1, xmm0; movapd xmm0, xmm1; ret;
0x0003ae07: nop [rax+rax]; addsd xmm1, xmm0; movapd xmm0, xmm1; ret;
0x0003ae08: nop [rax+rax]; addsd xmm1, xmm0; movapd xmm0, xmm1; ret;
0x0003ae0a: test [rax], al; add [rax], al; add [rax], al; addsd xmm1, xmm0; movapd xmm0, xmm1; ret;
0x0003ae0b: add [rax], al; add [rax], al; add dl, dh; addps xmm1, xmm0; movapd xmm0, xmm1; ret;
0x0003ae0c: add [rax], al; add [rax], al; addsd xmm1, xmm0; movapd xmm0, xmm1; ret;
0x0003ae0d: add [rax], al; add dl, dh; addps xmm1, xmm0; movapd xmm0, xmm1; ret;
0x0003ae0e: add [rax], al; addsd xmm1, xmm0; movapd xmm0, xmm1; ret;
0x0003ae0f: add dl, dh; addps xmm1, xmm0; movapd xmm0, xmm1; ret;
0x0003ae10: addsd xmm1, xmm0; movapd xmm0, xmm1; ret;
0x0003ae11: addps xmm1, xmm0; movapd xmm0, xmm1; ret;
0x0003ae14: movapd xmm0, xmm1; ret;
0x0003ae15: movaps xmm0, xmm1; ret;
0x0003ae16: sub cl, al; ret;
0x0003ae67: mov [rdi], ecx; and rax, rdx; mov rdx, 0x3fe0000000000000; or rax, rdx; movq xmm0, rax; ret;
0x0003ae69: and rax, rdx; mov rdx, 0x3fe0000000000000; or rax, rdx; movq xmm0, rax; ret;
0x0003ae6a: and eax, edx; mov rdx, 0x3fe0000000000000; or rax, rdx; movq xmm0, rax; ret;
0x0003ae6c: mov rdx, 0x3fe0000000000000; or rax, rdx; movq xmm0, rax; ret;
0x0003ae76: or rax, rdx; movq xmm0, rax; ret;
0x0003ae77: or eax, edx; movq xmm0, rax; ret;
0x0003ae78: shl byte ptr [rsi+0x48], 1; movd mm0, eax; ret;
0x0003ae7c: outsb dx, [rsi]; rol bl, 0x90; xor ecx, ecx; addsd xmm0, xmm0; mov [rdi], ecx; ret;
0x0003ae7d: rol bl, 0x90; xor ecx, ecx; addsd xmm0, xmm0; mov [rdi], ecx; ret;
0x0003ae7f: nop; xor ecx, ecx; addsd xmm0, xmm0; mov [rdi], ecx; ret;
0x0003ae80: xor ecx, ecx; addsd xmm0, xmm0; mov [rdi], ecx; ret;
0x0003ae81: leave; addsd xmm0, xmm0; mov [rdi], ecx; ret;
0x0003ae82: addsd xmm0, xmm0; mov [rdi], ecx; ret;
0x0003ae83: addps xmm0, xmm0; mov [rdi], ecx; ret;
0x0003aeb4: nop [rax+rax]; xchg ax, ax; pmovmskb eax, xmm0; and eax, 0x80; ret;
0x0003aeb5: nop [rax+rax]; xchg ax, ax; pmovmskb eax, xmm0; and eax, 0x80; ret;
0x0003aeb6: nop [rax+rax]; xchg ax, ax; pmovmskb eax, xmm0; and eax, 0x80; ret;
0x0003aeb9: add [rax], al; add [rax], al; add [rsi-0x70], ah; pmovmskb eax, xmm0; and eax, 0x80; ret;
0x0003aeba: add [rax], al; add [rax], al; xchg ax, ax; pmovmskb eax, xmm0; and eax, 0x80; ret;
0x0003aebb: add [rax], al; add [rsi-0x70], ah; pmovmskb eax, xmm0; and eax, 0x80; ret;
0x0003aebc: add [rax], al; xchg ax, ax; pmovmskb eax, xmm0; and eax, 0x80; ret;
0x0003aebd: add [rsi-0x70], ah; pmovmskb eax, xmm0; and eax, 0x80; ret;
0x0003aebe: xchg ax, ax; pmovmskb eax, xmm0; and eax, 0x80; ret;
0x0003aebf: nop; pmovmskb eax, xmm0; and eax, 0x80; ret;
0x0003aec0: pmovmskb eax, xmm0; and eax, 0x80; ret;
0x0003aec1: pmovmskb eax, mm0; and eax, 0x80; ret;
0x0003aec4: and eax, 0x80; ret;
0x0003aef7: or [rbp+6], dh; addsd xmm0, xmm0; ret;
0x0003aefa: addsd xmm0, xmm0; ret;
0x0003af25: add eax, 0x182f46; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret;
0x0003af53: shl byte ptr [rsi+0xf], 0x7e; ret 0xff25;
0x0003af62: add [rax-0x83e7681], al; fmul st, dword ptr [rcx]; enter 0xf8c1, 0x1f; not eax; and eax, edx; ret;
0x0003af66: shl edi, 0xd8; or eax, ecx; sar eax, 0x1f; not eax; and eax, edx; ret;
0x0003af67: neg eax; or eax, ecx; sar eax, 0x1f; not eax; and eax, edx; ret;
0x0003af68: fmul st, dword ptr [rcx]; enter 0xf8c1, 0x1f; not eax; and eax, edx; ret;
0x0003af69: or eax, ecx; sar eax, 0x1f; not eax; and eax, edx; ret;
0x0003af6a: enter 0xf8c1, 0x1f; not eax; and eax, edx; ret;
0x0003af6b: sar eax, 0x1f; not eax; and eax, edx; ret;
0x0003af6e: not eax; and eax, edx; ret;
0x0003af70: and eax, edx; ret;
0x0003af80: movd edx, xmm0; mov eax, 0x7f800000; and edx, 0x7fffffff; sub eax, edx; shr eax, 0x1f; ret;
0x0003af81: movd edx, mm0; mov eax, 0x7f800000; and edx, 0x7fffffff; sub eax, edx; shr eax, 0x1f; ret;
0x0003af84: mov eax, 0x7f800000; and edx, 0x7fffffff; sub eax, edx; shr eax, 0x1f; ret;
0x0003af89: and edx, 0x7fffffff; sub eax, edx; shr eax, 0x1f; ret;
0x0003af8f: sub eax, edx; shr eax, 0x1f; ret;
0x0003afa0: movd [rsp-4], xmm0; mov eax, 0x7f800000; and eax, [rsp-4]; sub eax, 0x7f800000; shr eax, 0x1f; ret;
0x0003afa1: movd [rsp-4], mm0; mov eax, 0x7f800000; and eax, [rsp-4]; sub eax, 0x7f800000; shr eax, 0x1f; ret;
0x0003afa4: and al, 0xfc; mov eax, 0x7f800000; and eax, [rsp-4]; sub eax, 0x7f800000; shr eax, 0x1f; ret;
0x0003afa5: cld; mov eax, 0x7f800000; and eax, [rsp-4]; sub eax, 0x7f800000; shr eax, 0x1f; ret;
0x0003afa6: mov eax, 0x7f800000; and eax, [rsp-4]; sub eax, 0x7f800000; shr eax, 0x1f; ret;
0x0003afa7: add [rax], al; cmp byte ptr [rdi+0x23], 0x44; and al, 0xfc; sub eax, 0x7f800000; shr eax, 0x1f; ret;
0x0003afa8: add [rax+0x2444237f], al; cld; sub eax, 0x7f800000; shr eax, 0x1f; ret;
0x0003afa9: cmp byte ptr [rdi+0x23], 0x44; and al, 0xfc; sub eax, 0x7f800000; shr eax, 0x1f; ret;
0x0003afab: and eax, [rsp-4]; sub eax, 0x7f800000; shr eax, 0x1f; ret;
0x0003afad: and al, 0xfc; sub eax, 0x7f800000; shr eax, 0x1f; ret;
0x0003afae: cld; sub eax, 0x7f800000; shr eax, 0x1f; ret;
0x0003afaf: sub eax, 0x7f800000; shr eax, 0x1f; ret;
0x0003afb1: add [rax+0x1fe8c17f], al; ret;
0x0003afb8: nop [rax+rax]; movss xmm3, [rip+0x144418]; andps xmm0, xmm3; andnps xmm3, xmm1; orps xmm0, xmm3; ret;
0x0003afbe: add [rax], al; movss xmm3, [rip+0x144418]; andps xmm0, xmm3; andnps xmm3, xmm1; orps xmm0, xmm3; ret;
0x0003afbf: add bl, dh; movups xmm3, [rip+0x144418]; andps xmm0, xmm3; andnps xmm3, xmm1; orps xmm0, xmm3; ret;
0x0003afc0: movss xmm3, [rip+0x144418]; andps xmm0, xmm3; andnps xmm3, xmm1; orps xmm0, xmm3; ret;
0x0003afc1: movups xmm3, [rip+0x144418]; andps xmm0, xmm3; andnps xmm3, xmm1; orps xmm0, xmm3; ret;
0x0003afc2: adc [rip+0x144418], bl; andps xmm0, xmm3; andnps xmm3, xmm1; orps xmm0, xmm3; ret;
0x0003afc3: sbb eax, 0x144418; andps xmm0, xmm3; andnps xmm3, xmm1; orps xmm0, xmm3; ret;
0x0003afc4: sbb [rsp+rdx], al; andps xmm0, xmm3; andnps xmm3, xmm1; orps xmm0, xmm3; ret;
0x0003afc6: adc al, 0; andps xmm0, xmm3; andnps xmm3, xmm1; orps xmm0, xmm3; ret;
0x0003afc7: add [rdi], cl; push rsp; ret;
0x0003afc8: andps xmm0, xmm3; andnps xmm3, xmm1; orps xmm0, xmm3; ret;
0x0003afcb: andnps xmm3, xmm1; orps xmm0, xmm3; ret;
0x0003afce: orps xmm0, xmm3; ret;
0x0003afcf: push rsi; ret;
0x0003b006: shl byte ptr [rbp+0x17], 1; and esi, 0x80000000; movss [rdi], xmm0; movd xmm0, esi; ret;
0x0003b009: and esi, 0x80000000; movss [rdi], xmm0; movd xmm0, esi; ret;
0x0003b00a: out 0, al; add [rax], al; xor bl, 0xf; adc [rdi], eax; movd xmm0, esi; ret;
0x0003b00b: add [rax], al; add [rax+0x7110ff3], al; movd xmm0, esi; ret;
0x0003b00c: add [rax], al; xor bl, 0xf; adc [rdi], eax; movd xmm0, esi; ret;
0x0003b00d: add [rax+0x7110ff3], al; movd xmm0, esi; ret;
0x0003b00e: xor bl, 0xf; adc [rdi], eax; movd xmm0, esi; ret;
0x0003b00f: movss [rdi], xmm0; movd xmm0, esi; ret;
0x0003b010: movups [rdi], xmm0; movd xmm0, esi; ret;
0x0003b011: adc [rdi], eax; movd xmm0, esi; ret;
0x0003b01b: add [rax], al; add [rax], al; add bh, dh; shl byte ptr [rcx], cl; ret 0xf66;
0x0003b01d: add [rax], al; add bh, dh; shl byte ptr [rcx], cl; ret 0xf66;
0x0003b01f: add bh, dh; shl byte ptr [rcx], cl; ret 0xf66;
0x0003b020: not edx; and edx, eax; movd xmm1, edx; mov [rdi], edx; subss xmm0, xmm1; ret;
0x0003b021: shl byte ptr [rcx], cl; ret 0xf66;
0x0003b022: and edx, eax; movd xmm1, edx; mov [rdi], edx; subss xmm0, xmm1; ret;
0x0003b024: movd xmm1, edx; mov [rdi], edx; subss xmm0, xmm1; ret;
0x0003b025: movd mm1, edx; mov [rdi], edx; subss xmm0, xmm1; ret;
0x0003b028: mov [rdi], edx; subss xmm0, xmm1; ret;
0x0003b02a: subss xmm0, xmm1; ret;
0x0003b02b: subps xmm0, xmm1; ret;
0x0003b02c: pop rsp; rol ebx, 0x90; and esi, 0x80000000; mov [rdi], esi; ret;
0x0003b02d: rol ebx, 0x90; and esi, 0x80000000; mov [rdi], esi; ret;
0x0003b02f: nop; and esi, 0x80000000; mov [rdi], esi; ret;
0x0003b030: and esi, 0x80000000; mov [rdi], esi; ret;
0x0003b058: add [rbp+rax-0x3d], dh; nop [rax]; and esi, 0x80000000; movd xmm0, esi; ret;
0x0003b05c: nop [rax]; and esi, 0x80000000; movd xmm0, esi; ret;
0x0003b060: and esi, 0x80000000; movd xmm0, esi; ret;
0x0003b062: add [rax], al; add [rax-0x3991f09a], al; ret;
0x0003b064: add [rax-0x3991f09a], al; ret;
0x0003b0a2: cli; push rax; ret;
0x0003b0b2: sbb eax, 0x397eff85; and esi, 0x807fffff; shl edi, 0x17; or esi, edi; movd xmm0, esi; ret;
0x0003b0b7: and esi, 0x807fffff; shl edi, 0x17; or esi, edi; movd xmm0, esi; ret;
0x0003b0bd: shl edi, 0x17; or esi, edi; movd xmm0, esi; ret;
0x0003b0be: out 0x17, eax; or esi, edi; movd xmm0, esi; ret;
0x0003b0c0: or esi, edi; movd xmm0, esi; ret;
0x0003b0c7: nop [rax+rax]; movd xmm0, ecx; andps xmm0, [rip+0x1571f5]; orps xmm0, [rip+0x15720e]; mulss xmm0, [rip+0x157b2a]; ret;
0x0003b0c8: nop [rax+rax]; movd xmm0, ecx; andps xmm0, [rip+0x1571f5]; orps xmm0, [rip+0x15720e]; mulss xmm0, [rip+0x157b2a]; ret;
0x0003b0ce: add [rax], al; movd xmm0, ecx; andps xmm0, [rip+0x1571f5]; orps xmm0, [rip+0x15720e]; mulss xmm0, [rip+0x157b2a]; ret;
0x0003b0d0: movd xmm0, ecx; andps xmm0, [rip+0x1571f5]; orps xmm0, [rip+0x15720e]; mulss xmm0, [rip+0x157b2a]; ret;
0x0003b0d1: movd mm0, ecx; andps xmm0, [rip+0x1571f5]; orps xmm0, [rip+0x15720e]; mulss xmm0, [rip+0x157b2a]; ret;
0x0003b0d2: outsb dx, [rsi]; ror dword ptr [rdi], 0x54; add eax, 0x1571f5; orps xmm0, [rip+0x15720e]; mulss xmm0, [rip+0x157b2a]; ret;
0x0003b0d3: ror dword ptr [rdi], 0x54; add eax, 0x1571f5; orps xmm0, [rip+0x15720e]; mulss xmm0, [rip+0x157b2a]; ret;
0x0003b0d4: andps xmm0, [rip+0x1571f5]; orps xmm0, [rip+0x15720e]; mulss xmm0, [rip+0x157b2a]; ret;
0x0003b0d5: push rsp; add eax, 0x1571f5; orps xmm0, [rip+0x15720e]; mulss xmm0, [rip+0x157b2a]; ret;
0x0003b0d6: add eax, 0x1571f5; orps xmm0, [rip+0x15720e]; mulss xmm0, [rip+0x157b2a]; ret;
0x0003b0da: add [rdi], cl; push rsi; add eax, 0x15720e; mulss xmm0, [rip+0x157b2a]; ret;
0x0003b0db: orps xmm0, [rip+0x15720e]; mulss xmm0, [rip+0x157b2a]; ret;
0x0003b0dc: push rsi; add eax, 0x15720e; mulss xmm0, [rip+0x157b2a]; ret;
0x0003b0dd: add eax, 0x15720e; mulss xmm0, [rip+0x157b2a]; ret;
0x0003b0e0: adc eax, 0x590ff300; add eax, 0x157b2a; ret;
0x0003b0e1: add bl, dh; mulps xmm0, [rip+0x157b2a]; ret;
0x0003b0e2: mulss xmm0, [rip+0x157b2a]; ret;
0x0003b0e3: mulps xmm0, [rip+0x157b2a]; ret;
0x0003b0e4: pop rcx; add eax, 0x157b2a; ret;
0x0003b0e5: add eax, 0x157b2a; ret;
0x0003b0ef: add [rbx+0x4b7de8ff], al; movd xmm0, ecx; andps xmm0, [rip+0x1571d0]; orps xmm0, [rip+0x1571d9]; mulss xmm0, [rip+0x157b01]; ret;
0x0003b0f5: movd xmm0, ecx; andps xmm0, [rip+0x1571d0]; orps xmm0, [rip+0x1571d9]; mulss xmm0, [rip+0x157b01]; ret;
0x0003b0f6: movd mm0, ecx; andps xmm0, [rip+0x1571d0]; orps xmm0, [rip+0x1571d9]; mulss xmm0, [rip+0x157b01]; ret;
0x0003b0f7: outsb dx, [rsi]; ror dword ptr [rdi], 0x54; add eax, 0x1571d0; orps xmm0, [rip+0x1571d9]; mulss xmm0, [rip+0x157b01]; ret;
0x0003b0f8: ror dword ptr [rdi], 0x54; add eax, 0x1571d0; orps xmm0, [rip+0x1571d9]; mulss xmm0, [rip+0x157b01]; ret;
0x0003b0f9: andps xmm0, [rip+0x1571d0]; orps xmm0, [rip+0x1571d9]; mulss xmm0, [rip+0x157b01]; ret;
0x0003b0fa: push rsp; add eax, 0x1571d0; orps xmm0, [rip+0x1571d9]; mulss xmm0, [rip+0x157b01]; ret;
0x0003b0fb: add eax, 0x1571d0; orps xmm0, [rip+0x1571d9]; mulss xmm0, [rip+0x157b01]; ret;
0x0003b0fc: shl byte ptr [rcx+0x15], 1; add [rdi], cl; push rsi; add eax, 0x1571d9; mulss xmm0, [rip+0x157b01]; ret;
0x0003b0fe: adc eax, 0x5560f00; fnstenv [rcx+0x15]; add bl, dh; mulps xmm0, [rip+0x157b01]; ret;
0x0003b0ff: add [rdi], cl; push rsi; add eax, 0x1571d9; mulss xmm0, [rip+0x157b01]; ret;
0x0003b100: orps xmm0, [rip+0x1571d9]; mulss xmm0, [rip+0x157b01]; ret;
0x0003b101: push rsi; add eax, 0x1571d9; mulss xmm0, [rip+0x157b01]; ret;
0x0003b102: add eax, 0x1571d9; mulss xmm0, [rip+0x157b01]; ret;
0x0003b103: fnstenv [rcx+0x15]; add bl, dh; mulps xmm0, [rip+0x157b01]; ret;
0x0003b105: adc eax, 0x590ff300; add eax, 0x157b01; ret;
0x0003b106: add bl, dh; mulps xmm0, [rip+0x157b01]; ret;
0x0003b107: mulss xmm0, [rip+0x157b01]; ret;
0x0003b108: mulps xmm0, [rip+0x157b01]; ret;
0x0003b109: pop rcx; add eax, 0x157b01; ret;
0x0003b10a: add eax, 0x157b01; ret;
0x0003b143: and esi, 0x807fffff; shl edi, 0x17; or edi, esi; movd xmm0, edi; mulss xmm0, [rip+0x157abe]; ret;
0x0003b149: shl edi, 0x17; or edi, esi; movd xmm0, edi; mulss xmm0, [rip+0x157abe]; ret;
0x0003b14a: out 0x17, eax; or edi, esi; movd xmm0, edi; mulss xmm0, [rip+0x157abe]; ret;
0x0003b14c: or edi, esi; movd xmm0, edi; mulss xmm0, [rip+0x157abe]; ret;
0x0003b14e: movd xmm0, edi; mulss xmm0, [rip+0x157abe]; ret;
0x0003b14f: movd mm0, edi; mulss xmm0, [rip+0x157abe]; ret;
0x0003b152: mulss xmm0, [rip+0x157abe]; ret;
0x0003b153: mulps xmm0, [rip+0x157abe]; ret;
0x0003b154: pop rcx; add eax, 0x157abe; ret;
0x0003b155: add eax, 0x157abe; ret;
0x0003b156: mov esi, 0xc300157a; nop [rax+rax]; addss xmm0, xmm0; ret;
0x0003b158: adc eax, 0x1f0fc300; add [rax], r8b; addss xmm0, xmm0; ret;
0x0003b159: add bl, al; nop [rax+rax]; addss xmm0, xmm0; ret;
0x0003b15b: nop [rax+rax]; addss xmm0, xmm0; ret;
0x0003b15d: add [rax], r8b; addss xmm0, xmm0; ret;
0x0003b15e: add [rax], al; addss xmm0, xmm0; ret;
0x0003b173: ret 0x7c7;
0x0003b1b7: and eax, 0x807fffff; lea edx, [rcx+rdx-0x7e]; or eax, 0x3f000000; mov [rdi], edx; movd xmm0, eax; ret;
0x0003b1bc: lea edx, [rcx+rdx-0x7e]; or eax, 0x3f000000; mov [rdi], edx; movd xmm0, eax; ret;
0x0003b1c0: or eax, 0x3f000000; mov [rdi], edx; movd xmm0, eax; ret;
0x0003b1c1: add [rax], al; add [rdi], bh; mov [rdi], edx; movd xmm0, eax; ret;
0x0003b1c3: add [rdi], bh; mov [rdi], edx; movd xmm0, eax; ret;
0x0003b1c5: mov [rdi], edx; movd xmm0, eax; ret;
0x0003b1c7: movd xmm0, eax; ret;
0x0003b1cc: nop [rax]; addss xmm0, xmm0; ret;
0x0003b1ce: add bl, sil; addps xmm0, xmm0; ret;
0x0003b1cf: add bl, dh; addps xmm0, xmm0; ret;
0x0003b1d3: rol bl, 0x66; nop [rax+rax]; nop; pmovmskb eax, xmm0; and eax, 8; ret;
0x0003b1d5: nop [rax+rax]; nop; pmovmskb eax, xmm0; and eax, 8; ret;
0x0003b1d6: nop [rax+rax]; nop; pmovmskb eax, xmm0; and eax, 8; ret;
0x0003b1d7: nop [rax+rax]; nop; pmovmskb eax, xmm0; and eax, 8; ret;
0x0003b1da: add [rax], al; add [rax], al; add [rax-0x3f28f09a], dl; and eax, 8; ret;
0x0003b1db: add [rax], al; add [rax], al; nop; pmovmskb eax, xmm0; and eax, 8; ret;
0x0003b1dc: add [rax], al; add [rax-0x3f28f09a], dl; and eax, 8; ret;
0x0003b1dd: add [rax], al; nop; pmovmskb eax, xmm0; and eax, 8; ret;
0x0003b1de: add [rax-0x3f28f09a], dl; and eax, 8; ret;
0x0003b1df: nop; pmovmskb eax, xmm0; and eax, 8; ret;
0x0003b1e0: pmovmskb eax, xmm0; and eax, 8; ret;
0x0003b1e1: pmovmskb eax, mm0; and eax, 8; ret;
0x0003b213: or al, 0x75; or dh, bl; addps xmm0, xmm0; ret;
0x0003b215: or dh, bl; addps xmm0, xmm0; ret;
0x0003b216: addss xmm0, xmm0; ret;
0x0003b217: addps xmm0, xmm0; ret;
0x0003b241: mov rax, [rip+0x1832ef]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret;
0x0003b242: mov eax, [rip+0x1832ef]; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret;
0x0003b243: add eax, 0x182c28; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret;
0x0003b244: sub [rax+rbx], ch; add [rdi+rax*8], ah; and al, [rax]; add [rax], al; add rsp, 8; ret;
0x0003b245: sub al, 0x18; add [rdi+rax*8], ah; and al, [rax]; add [rax], al; add rsp, 8; ret;
0x0003b246: sbb [rax], al; mov dword ptr fs:[rax], 0x22; add rsp, 8; ret;
0x0003b247: add [rdi+rax*8], ah; and al, [rax]; add [rax], al; add rsp, 8; ret;
0x0003b248: mov dword ptr fs:[rax], 0x22; add rsp, 8; ret;
0x0003b249: mov dword ptr [rax], 0x22; add rsp, 8; ret;
0x0003b24b: and al, [rax]; add [rax], al; add rsp, 8; ret;
0x0003b29e: neg rax; or rax, rdx; sar rax, 0x3f; not eax; and eax, ecx; ret;
0x0003b29f: neg eax; or rax, rdx; sar rax, 0x3f; not eax; and eax, ecx; ret;
0x0003b2a1: or rax, rdx; sar rax, 0x3f; not eax; and eax, ecx; ret;
0x0003b2a2: or eax, edx; sar rax, 0x3f; not eax; and eax, ecx; ret;
0x0003b2a4: sar rax, 0x3f; not eax; and eax, ecx; ret;
0x0003b2a5: sar eax, 0x3f; not eax; and eax, ecx; ret;
0x0003b2a8: not eax; and eax, ecx; ret;
0x0003b2aa: and eax, ecx; ret;
0x0003b2c4: fimul st, dword ptr [rax+9]; ret 0x8948;
0x0003b2d0: shr rdx, 0x3f; or rdx, rax; mov rax, 0x7fff000000000000; sub rax, rdx; shr rax, 0x3f; ret;
0x0003b2d1: shr edx, 0x3f; or rdx, rax; mov rax, 0x7fff000000000000; sub rax, rdx; shr rax, 0x3f; ret;
0x0003b2d4: or rdx, rax; mov rax, 0x7fff000000000000; sub rax, rdx; shr rax, 0x3f; ret;
0x0003b2d5: or edx, eax; mov rax, 0x7fff000000000000; sub rax, rdx; shr rax, 0x3f; ret;
0x0003b2d7: mov rax, 0x7fff000000000000; sub rax, rdx; shr rax, 0x3f; ret;
0x0003b2fa: movaps [rsp-0x18], xmm0; mov rax, [rsp-0x10]; and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret;
0x0003b2fb: sub [rsp-0x18], eax; mov rax, [rsp-0x10]; and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret;
0x0003b2fd: and al, 0xe8; mov rax, [rsp-0x10]; and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret;
0x0003b2ff: mov rax, [rsp-0x10]; and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret;
0x0003b300: mov eax, [rsp-0x10]; and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret;
0x0003b302: and al, 0xf0; and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret;
0x0003b304: and rax, rdx; sub rax, rdx; shr rax, 0x3f; ret;
0x0003b305: and eax, edx; sub rax, rdx; shr rax, 0x3f; ret;
0x0003b307: sub rax, rdx; shr rax, 0x3f; ret;
0x0003b308: sub eax, edx; shr rax, 0x3f; ret;
0x0003b30a: shr rax, 0x3f; ret;
0x0003b30b: shr eax, 0x3f; ret;
0x0003b30f: nop; pand xmm1, [rip+0x156ff8]; pand xmm0, [rip+0x157000]; por xmm0, xmm1; ret;
0x0003b310: pand xmm1, [rip+0x156ff8]; pand xmm0, [rip+0x157000]; por xmm0, xmm1; ret;
0x0003b311: pand mm1, [rip+0x156ff8]; pand xmm0, [rip+0x157000]; por xmm0, xmm1; ret;
0x0003b312: fisttp dword ptr [rip+0x156ff8], st; pand xmm0, [rip+0x157000]; por xmm0, xmm1; ret;
0x0003b313: or eax, 0x156ff8; pand xmm0, [rip+0x157000]; por xmm0, xmm1; ret;
0x0003b314: clc; outsd dx, [rsi]; adc eax, 0xdb0f6600; add eax, 0x157000; por xmm0, xmm1; ret;
0x0003b315: outsd dx, [rsi]; adc eax, 0xdb0f6600; add eax, 0x157000; por xmm0, xmm1; ret;
0x0003b316: adc eax, 0xdb0f6600; add eax, 0x157000; por xmm0, xmm1; ret;
0x0003b317: add [rsi+0xf], ah; fild st, dword ptr [rip+0x157000]; por xmm0, xmm1; ret;
0x0003b318: pand xmm0, [rip+0x157000]; por xmm0, xmm1; ret;
0x0003b319: pand mm0, [rip+0x157000]; por xmm0, xmm1; ret;
0x0003b31a: fild st, dword ptr [rip+0x157000]; por xmm0, xmm1; ret;
0x0003b31b: add eax, 0x157000; por xmm0, xmm1; ret;
0x0003b320: por xmm0, xmm1; ret;
0x0003b321: por mm0, mm1; ret;
0x0003b41e: call qword ptr [rax+0x66d0f748];
0x0003b4f9: mov edx, 0x9483ff2; ret 0x840f;
0x0003b52e: cmp al, 0xff; dec dword ptr [rdi]; mov [rcx-0x7f000000], cs; sti; push rax; ret;
0x0003b530: dec dword ptr [rdi]; mov [rcx-0x7f000000], cs; sti; push rax; ret;
0x0003b532: mov [rcx-0x7f000000], cs; sti; push rax; ret;
0x0003b538: sti; push rax; ret;
0x0003b5b2: mov ch, dl; adc al, [rax]; add rsp, 0x10; pop rbx; ret;
0x0003b5b4: adc al, [rax]; add rsp, 0x10; pop rbx; ret;
0x0003b5da: insd [rdi], dx; adc eax, 0x99ee800; adc eax, [rax]; add rsp, 0x10; pop rbx; ret;
0x0003b5db: adc eax, 0x99ee800; adc eax, [rax]; add rsp, 0x10; pop rbx; ret;
0x0003b60a: insd [rdi], dx; adc eax, 0x96ee800; adc eax, [rax]; add rsp, 0x10; pop rbx; ret;
0x0003b60b: adc eax, 0x96ee800; adc eax, [rax]; add rsp, 0x10; pop rbx; ret;
0x0003b610: adc eax, [rax]; add rsp, 0x10; pop rbx; ret;
0x0003b6ec: mov [rsp+8], rdx; movdqa xmm0, [rsp]; add rsp, 0x18; pop rbx; pop rbp; ret;
0x0003b6ed: mov [rsp+8], edx; movdqa xmm0, [rsp]; add rsp, 0x18; pop rbx; pop rbp; ret;
0x0003b6ef: and al, 8; movdqa xmm0, [rsp]; add rsp, 0x18; pop rbx; pop rbp; ret;
0x0003b6f1: movdqa xmm0, [rsp]; add rsp, 0x18; pop rbx; pop rbp; ret;
0x0003b6f2: movq mm0, [rsp]; add rsp, 0x18; pop rbx; pop rbp; ret;
0x0003b6f3: outsd dx, [rsi]; add al, 0x24; add rsp, 0x18; pop rbx; pop rbp; ret;
0x0003b6f4: add al, 0x24; add rsp, 0x18; pop rbx; pop rbp; ret;
0x0003b6f5: and al, 0x48; add esp, 0x18; pop rbx; pop rbp; ret;
0x0003b70a: xor ch, cl; adc al, [rax]; add rsp, 0x18; pop rbx; pop rbp; ret;
0x0003b70c: adc al, [rax]; add rsp, 0x18; pop rbx; pop rbp; ret;
0x0003b715: nop [rax+rax]; nop; movmskps eax, xmm0; and eax, 8; ret;
0x0003b716: nop [rax+rax]; nop; movmskps eax, xmm0; and eax, 8; ret;
0x0003b717: nop [rax+rax]; nop; movmskps eax, xmm0; and eax, 8; ret;
0x0003b71b: add [rax], al; add [rax], al; nop; movmskps eax, xmm0; and eax, 8; ret;
0x0003b71d: add [rax], al; nop; movmskps eax, xmm0; and eax, 8; ret;
0x0003b71f: nop; movmskps eax, xmm0; and eax, 8; ret;
0x0003b720: movmskps eax, xmm0; and eax, 8; ret;
0x0003b7a1: outsd dx, [rsi]; ret 0x98e8;
0x0003b7a2: ret 0x98e8;
0x0003b7a6: adc al, [rax]; movdqa xmm2, xmm0; add rsp, 0x20; movdqa xmm0, xmm2; pop rbp; ret;
0x0003b7a8: movdqa xmm2, xmm0; add rsp, 0x20; movdqa xmm0, xmm2; pop rbp; ret;
0x0003b7a9: movq mm2, mm0; add rsp, 0x20; movdqa xmm0, xmm2; pop rbp; ret;
0x0003b7ac: add rsp, 0x20; movdqa xmm0, xmm2; pop rbp; ret;
0x0003b7ad: add esp, 0x20; movdqa xmm0, xmm2; pop rbp; ret;
0x0003b7af: and [rsi+0xf], ah; outsd dx, [rsi]; ret 0xc35d;
0x0003b7b0: movdqa xmm0, xmm2; pop rbp; ret;
0x0003b7b1: movq mm0, mm2; pop rbp; ret;
0x0003b7b2: outsd dx, [rsi]; ret 0xc35d;
0x0003b7b3: ret 0xc35d;
0x0003b7bb: add [rax], al; add [rax], al; add [rcx+0x6f0f66ef], cl; ret 0x5e8;
0x0003b7bd: add [rax], al; add [rcx+0x6f0f66ef], cl; ret 0x5e8;
0x0003b7bf: add [rcx+0x6f0f66ef], cl; ret 0x5e8;
0x0003b7c4: outsd dx, [rsi]; ret 0x5e8;
0x0003b7c5: ret 0x5e8;
0x0003b817: sbb esp, [rsi+0xf]; outsd dx, [rsi]; ret 0xf66;
0x0003b833: mov rax, [rip+0x182636]; movdqa xmm0, xmm2; mov dword ptr fs:[rax], 0x22; add rsp, 0x20; pop rbp; ret;
0x0003b834: mov eax, [rip+0x182636]; movdqa xmm0, xmm2; mov dword ptr fs:[rax], 0x22; add rsp, 0x20; pop rbp; ret;
0x0003b835: add eax, 0x182636; movdqa xmm0, xmm2; mov dword ptr fs:[rax], 0x22; add rsp, 0x20; pop rbp; ret;
0x0003b837: sbb [rax], al; movdqa xmm0, xmm2; mov dword ptr fs:[rax], 0x22; add rsp, 0x20; pop rbp; ret;
0x0003b838: sbb [rax], al; movdqa xmm0, xmm2; mov dword ptr fs:[rax], 0x22; add rsp, 0x20; pop rbp; ret;
0x0003b839: add [rsi+0xf], ah; outsd dx, [rsi]; ret 0xc764;
0x0003b83a: movdqa xmm0, xmm2; mov dword ptr fs:[rax], 0x22; add rsp, 0x20; pop rbp; ret;
0x0003b83b: movq mm0, mm2; mov dword ptr fs:[rax], 0x22; add rsp, 0x20; pop rbp; ret;
0x0003b83c: outsd dx, [rsi]; ret 0xc764;
0x0003b83d: ret 0xc764;
0x0003b83e: mov dword ptr fs:[rax], 0x22; add rsp, 0x20; pop rbp; ret;
0x0003b83f: mov dword ptr [rax], 0x22; add rsp, 0x20; pop rbp; ret;
0x0003b841: and al, [rax]; add [rax], al; add rsp, 0x20; pop rbp; ret;
0x0003b843: add [rax], al; add rsp, 0x20; pop rbp; ret;
0x0003b905: div byte ptr [rbp+8]; mov [rbx+0x40], esi; xor eax, eax; pop rbx; ret;
0x0003b907: or [rcx-0x3fcebf8d], cl; pop rbx; ret;
0x0003b908: mov [rbx+0x40], esi; xor eax, eax; pop rbx; ret;
0x0003b91c: add [rcx], dh; test byte ptr [rbp-0x6bf0bf40], 0xc6; xor eax, eax; mov [rbx+0x40], esi; pop rbx; ret;
0x0003b91e: test byte ptr [rbp-0x6bf0bf40], 0xc6; xor eax, eax; mov [rbx+0x40], esi; pop rbx; ret;
0x0003b91f: test eax, eax; sete sil; xor eax, eax; mov [rbx+0x40], esi; pop rbx; ret;
0x0003b921: sete sil; xor eax, eax; mov [rbx+0x40], esi; pop rbx; ret;
0x0003b922: sete dh; xor eax, eax; mov [rbx+0x40], esi; pop rbx; ret;
0x0003b925: xor eax, eax; mov [rbx+0x40], esi; pop rbx; ret;
0x0003b927: mov [rbx+0x40], esi; pop rbx; ret;
0x0003ba45: add [rbp+0x481e74c0], al; mov eax, [rip+0x185d47]; mov rsi, rsp; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0003ba47: shl byte ptr [rsi+rbx+0x48], 0x8b; add eax, 0x185d47; mov rsi, rsp; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0003ba4a: mov rax, [rip+0x185d47]; mov rsi, rsp; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0003ba4b: mov eax, [rip+0x185d47]; mov rsi, rsp; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0003ba4c: add eax, 0x185d47; mov rsi, rsp; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0003ba4d: pop r13; sbb [rax], al; mov rsi, rsp; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0003ba4e: pop rbp; sbb [rax], al; mov rsi, rsp; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0003ba4f: sbb [rax], al; mov rsi, rsp; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0003ba50: add [rax-0x77], cl; out 0x48, al; ror eax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0003ba51: mov rsi, rsp; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0003ba52: mov esi, esp; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0003ba53: out 0x48, al; ror eax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0003bb5a: ret 0xd1a;
0x0003bb7f: add [rax-0x75], cl; add eax, 0x1822e9; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret;
0x0003bb82: add eax, 0x1822e9; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret;
0x0003bbad: add [rax], al; add [rcx], dh; jmp qword ptr [rax+rcx*2-0x75];
0x0003bbaf: add [rcx], dh; jmp qword ptr [rax+rcx*2-0x75];
0x0003bc62: mov qword ptr [rsp+0xd8], 0xffffffffffffffff; mov qword ptr [rsp+0xe0], 0xffffffffffffffff; mov qword ptr [rsp+0xe8], 0xffffffffffffffff; mov qword ptr [rsp+0xf0], 0xffffffffffffffff; mov qword ptr [rsp+0xf8], 0xffffffffffffffff; syscall;
0x0003bc63: mov dword ptr [rsp+0xd8], 0xffffffff; mov qword ptr [rsp+0xe0], 0xffffffffffffffff; mov qword ptr [rsp+0xe8], 0xffffffffffffffff; mov qword ptr [rsp+0xf0], 0xffffffffffffffff; mov qword ptr [rsp+0xf8], 0xffffffffffffffff; syscall;
0x0003bc6e: mov qword ptr [rsp+0xe0], 0xffffffffffffffff; mov qword ptr [rsp+0xe8], 0xffffffffffffffff; mov qword ptr [rsp+0xf0], 0xffffffffffffffff; mov qword ptr [rsp+0xf8], 0xffffffffffffffff; syscall;
0x0003bc6f: mov dword ptr [rsp+0xe0], 0xffffffff; mov qword ptr [rsp+0xe8], 0xffffffffffffffff; mov qword ptr [rsp+0xf0], 0xffffffffffffffff; mov qword ptr [rsp+0xf8], 0xffffffffffffffff; syscall;
0x0003bc7a: mov qword ptr [rsp+0xe8], 0xffffffffffffffff; mov qword ptr [rsp+0xf0], 0xffffffffffffffff; mov qword ptr [rsp+0xf8], 0xffffffffffffffff; syscall;
0x0003bc7b: mov dword ptr [rsp+0xe8], 0xffffffff; mov qword ptr [rsp+0xf0], 0xffffffffffffffff; mov qword ptr [rsp+0xf8], 0xffffffffffffffff; syscall;
0x0003bc86: mov qword ptr [rsp+0xf0], 0xffffffffffffffff; mov qword ptr [rsp+0xf8], 0xffffffffffffffff; syscall;
0x0003bc86: mov qword ptr [rsp+0xf0], 0xffffffffffffffff; mov qword ptr [rsp+0xf8], 0xffffffffffffffff; syscall; mov ecx, 0x27; mov eax, ecx; syscall;
0x0003bc87: mov dword ptr [rsp+0xf0], 0xffffffff; mov qword ptr [rsp+0xf8], 0xffffffffffffffff; syscall;
0x0003bc87: mov dword ptr [rsp+0xf0], 0xffffffff; mov qword ptr [rsp+0xf8], 0xffffffffffffffff; syscall; mov ecx, 0x27; mov eax, ecx; syscall;
0x0003bc92: mov qword ptr [rsp+0xf8], 0xffffffffffffffff; syscall;
0x0003bc92: mov qword ptr [rsp+0xf8], 0xffffffffffffffff; syscall; mov ecx, 0x27; mov eax, ecx; syscall;
0x0003bc93: mov dword ptr [rsp+0xf8], 0xffffffff; syscall; mov ecx, 0x27; mov eax, ecx; syscall;
0x0003bc93: mov dword ptr [rsp+0xf8], 0xffffffff; syscall;
0x0003bc9d: dec dword ptr [rdi]; add eax, 0x27b9; add [rcx+0x48050fc8], cl; mov edi, eax; mov eax, 0xba; syscall;
0x0003bc9e: syscall; mov ecx, 0x27; mov eax, ecx; syscall;
0x0003bc9f: add eax, 0x27b9; add [rcx+0x48050fc8], cl; mov edi, eax; mov eax, 0xba; syscall;
0x0003bca0: mov ecx, 0x27; mov eax, ecx; syscall; mov rdi, rax; mov eax, 0xba; syscall;
0x0003bca0: mov ecx, 0x27; mov eax, ecx; syscall;
0x0003bca2: add [rax], al; add [rcx+0x48050fc8], cl; mov edi, eax; mov eax, 0xba; syscall;
0x0003bca3: add [rax], al; mov eax, ecx; syscall; mov rdi, rax; mov eax, 0xba; syscall;
0x0003bca3: add [rax], al; mov eax, ecx; syscall;
0x0003bca4: add [rcx+0x48050fc8], cl; mov edi, eax; mov eax, 0xba; syscall;
0x0003bca5: mov eax, ecx; syscall; mov rdi, rax; mov eax, 0xba; syscall;
0x0003bca6: enter 0x50f, 0x48; mov edi, eax; mov eax, 0xba; syscall;
0x0003bca7: syscall; mov rdi, rax; mov eax, 0xba; syscall;
0x0003bca8: add eax, 0xb8c78948; mov edx, 0xf000000; add eax, 0x8944c689; ret 0xeab8;
0x0003bca9: mov rdi, rax; mov eax, 0xba; syscall;
0x0003bcaa: mov edi, eax; mov eax, 0xba; syscall;
0x0003bcac: mov eax, 0xba; syscall; mov esi, eax; mov edx, r8d; mov eax, 0xea; syscall;
0x0003bcad: mov edx, 0xf000000; add eax, 0x8944c689; ret 0xeab8;
0x0003bcae: add [rax], al; add [rdi], cl; add eax, 0x8944c689; ret 0xeab8;
0x0003bcaf: add [rax], al; syscall; mov esi, eax; mov edx, r8d; mov eax, 0xea; syscall;
0x0003bcb0: add [rdi], cl; add eax, 0x8944c689; ret 0xeab8;
0x0003bcb1: syscall; mov esi, eax; mov edx, r8d; mov eax, 0xea; syscall;
0x0003bcb2: add eax, 0x8944c689; ret 0xeab8;
0x0003bcb3: mov esi, eax; mov edx, r8d; mov eax, 0xea; syscall;
0x0003bcb5: mov edx, r8d; mov eax, 0xea; syscall;
0x0003bcb6: mov edx, eax; mov eax, 0xea; syscall;
0x0003bcb7: ret 0xeab8;
0x0003bcca: mov r10d, 8; xor edx, edx; mov rsi, r9; mov edi, 2; mov eax, 0xe; syscall;
0x0003bccb: mov edx, 8; xor edx, edx; mov rsi, r9; mov edi, 2; mov eax, 0xe; syscall;
0x0003bccd: add [rax], al; add [rcx], dh; ror byte ptr [rcx+rcx*4-0x32], cl; mov edi, 2; mov eax, 0xe; syscall;
0x0003bcce: add [rax], al; xor edx, edx; mov rsi, r9; mov edi, 2; mov eax, 0xe; syscall;
0x0003bccf: add [rcx], dh; ror byte ptr [rcx+rcx*4-0x32], cl; mov edi, 2; mov eax, 0xe; syscall;
0x0003bcd0: xor edx, edx; mov rsi, r9; mov edi, 2; mov eax, 0xe; syscall;
0x0003bcd1: ror byte ptr [rcx+rcx*4-0x32], cl; mov edi, 2; mov eax, 0xe; syscall;
0x0003bcd2: mov rsi, r9; mov edi, 2; mov eax, 0xe; syscall;
0x0003bcd3: mov esi, ecx; mov edi, 2; mov eax, 0xe; syscall;
0x0003bcef: add [rax], al; add [rbp+0x20], dh; mov eax, r8d; add rsp, 0x118; ret;
0x0003bcf1: add [rbp+0x20], dh; mov eax, r8d; add rsp, 0x118; ret;
0x0003bcf3: and [rcx+rcx*4-0x40], al; add rsp, 0x118; ret;
0x0003bcf4: mov eax, r8d; add rsp, 0x118; ret;
0x0003bcf5: mov eax, eax; add rsp, 0x118; ret;
0x0003bcf6: ror byte ptr [rax-0x7f], 0xc4; sbb [rcx], al; add [rax], al; ret;
0x0003bd29: add [rax], al; nop [rax+rax]; mov rax, [rip+0x182139]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x0003bd2f: add [rax-0x75], cl; add eax, 0x182139; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x0003bd32: add eax, 0x182139; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x0003bd33: cmp [rcx], esp; sbb [rax], al; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x0003bd4d: add [rsi-0x70], ah; nop; nop [rax+rax]; nop [rax]; mov rax, 0xf; syscall;
0x0003bd4e: xchg ax, ax; nop; nop [rax+rax]; nop [rax]; mov rax, 0xf; syscall;
0x0003bd4f: nop; nop; nop [rax+rax]; nop [rax]; mov rax, 0xf; syscall;
0x0003bd50: nop; nop [rax+rax]; nop [rax]; mov rax, 0xf; syscall;
0x0003bd52: nop [rax+rax]; nop [rax]; mov rax, 0xf; syscall;
0x0003bd53: nop [rax+rax]; nop [rax]; mov rax, 0xf; syscall;
0x0003bd54: nop [rax+rax]; nop [rax]; mov rax, 0xf; syscall;
0x0003bd56: test [rax], al; add [rax], al; add [rax], al; nop [rax]; mov rax, 0xf; syscall;
0x0003bd58: add [rax], al; add [rax], al; nop [rax]; mov rax, 0xf; syscall;
0x0003bd5a: add [rax], al; nop [rax]; mov rax, 0xf; syscall;
0x0003bd5c: nop [rax]; mov rax, 0xf; syscall;
0x0003bd5f: add [rax-0x39], cl; ror byte ptr [rdi], 0; add [rax], al; syscall;
0x0003bd60: mov rax, 0xf; syscall;
0x0003bd61: mov eax, 0xf; syscall;
0x0003bd62: ror byte ptr [rdi], 0; add [rax], al; syscall;
0x0003be13: movups [rsp+0x68], xmm5; movups [rsp+0x78], xmm6; movups [rsp+0x88], xmm7; mov r10d, 8; mov eax, 0xd; syscall;
0x0003be14: adc [rsp+0x68], ebp; movups [rsp+0x78], xmm6; movups [rsp+0x88], xmm7; mov r10d, 8; mov eax, 0xd; syscall;
0x0003be16: and al, 0x68; movups [rsp+0x78], xmm6; movups [rsp+0x88], xmm7; mov r10d, 8; mov eax, 0xd; syscall;
0x0003be18: movups [rsp+0x78], xmm6; movups [rsp+0x88], xmm7; mov r10d, 8; mov eax, 0xd; syscall;
0x0003be19: adc [rsp+0x78], esi; movups [rsp+0x88], xmm7; mov r10d, 8; mov eax, 0xd; syscall;
0x0003be1b: and al, 0x78; movups [rsp+0x88], xmm7; mov r10d, 8; mov eax, 0xd; syscall;
0x0003be1d: movups [rsp+0x88], xmm7; mov r10d, 8; mov eax, 0xd; syscall;
0x0003be1e: adc [rsp+0x88], edi; mov r10d, 8; mov eax, 0xd; syscall;
0x0003be1f: mov esp, 0x8824; add [rcx-0x46], al; or [rax], al; add [rax], al; mov eax, 0xd; syscall;
0x0003be21: mov [rax], al; add [rax], al; mov r10d, 8; mov eax, 0xd; syscall;
0x0003be22: add [rax], al; add [rcx-0x46], al; or [rax], al; add [rax], al; mov eax, 0xd; syscall;
0x0003be23: add [rax], al; mov r10d, 8; mov eax, 0xd; syscall;
0x0003be24: add [rcx-0x46], al; or [rax], al; add [rax], al; mov eax, 0xd; syscall;
0x0003be25: mov r10d, 8; mov eax, 0xd; syscall;
0x0003be26: mov edx, 8; mov eax, 0xd; syscall;
0x0003be27: or [rax], al; add [rax], al; mov eax, 0xd; syscall;
0x0003be28: add [rax], al; add [rax+0xd], bh; syscall;
0x0003be29: add [rax], al; mov eax, 0xd; syscall;
0x0003be2a: add [rax+0xd], bh; syscall;
0x0003be2b: mov eax, 0xd; syscall;
0x0003bef9: add [rax], al; add [rbp+0x46], dh; mov eax, r9d; add rsp, 0x148; ret;
0x0003befb: add [rbp+0x46], dh; mov eax, r9d; add rsp, 0x148; ret;
0x0003befe: mov eax, r9d; add rsp, 0x148; ret;
0x0003beff: mov eax, ecx; add rsp, 0x148; ret;
0x0003bf67: add [rax-0x75], cl; add eax, 0x181f01; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x0003bf6a: add eax, 0x181f01; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x0003bf6b: add [rdi], ebx; sbb [rax], al; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x0003bfb1: enter 0x4475, 0x49; mov eax, esi; mov r10d, 8; mov rsi, r8; mov eax, 0xe; syscall;
0x0003bfb4: mov r8, rsi; mov r10d, 8; mov rsi, r8; mov eax, 0xe; syscall;
0x0003bfb5: mov eax, esi; mov r10d, 8; mov rsi, r8; mov eax, 0xe; syscall;
0x0003bfb7: mov r10d, 8; mov rsi, r8; mov eax, 0xe; syscall;
0x0003bfb8: mov edx, 8; mov rsi, r8; mov eax, 0xe; syscall;
0x0003bfb9: or [rax], al; add [rax], al; mov rsi, r8; mov eax, 0xe; syscall;
0x0003bfba: add [rax], al; add [rcx+rcx*4-0x3a], cl; mov eax, 0xe; syscall;
0x0003bfbb: add [rax], al; mov rsi, r8; mov eax, 0xe; syscall;
0x0003bfbc: add [rcx+rcx*4-0x3a], cl; mov eax, 0xe; syscall;
0x0003bfbd: mov rsi, r8; mov eax, 0xe; syscall;
0x0003bfbe: mov esi, eax; mov eax, 0xe; syscall;
0x0003bfe6: mov [rax], es; add [rax], al; add rsp, 0x98; ret;
0x0003bfe8: add [rax], al; add rsp, 0x98; ret;
0x0003c05e: call qword ptr [rax+0x9158b48];
0x0003c077: movsd [rdi], [rsi]; adc eax, 0x1f0f000d; add [rax], r8b; mov eax, 0x3e; syscall;
0x0003c078: adc eax, 0x1f0f000d; add [rax], r8b; mov eax, 0x3e; syscall;
0x0003c079: or eax, 0x441f0f00; add [rax], al; mov eax, 0x3e; syscall;
0x0003c07b: nop [rax+rax]; mov eax, 0x3e; syscall;
0x0003c07d: add [rax], r8b; mov eax, 0x3e; syscall;
0x0003c07e: add [rax], al; mov eax, 0x3e; syscall;
0x0003c07f: add [rax+0x3e], bh; syscall;
0x0003c092: or eax, 0x181dd9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x0003c093: fstp dword ptr [rip-0x2708ffe8], st; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x0003c094: sbb eax, 0xd8f70018; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x0003c09e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov esi, 8; mov eax, 0x7f; syscall;
0x0003c09f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov esi, 8; mov eax, 0x7f; syscall;
0x0003c0a1: nop [rax+rax]; nop [rax+rax]; mov esi, 8; mov eax, 0x7f; syscall;
0x0003c0a2: nop [rax+rax]; nop [rax+rax]; mov esi, 8; mov eax, 0x7f; syscall;
0x0003c0a3: nop [rax+rax]; nop [rax+rax]; mov esi, 8; mov eax, 0x7f; syscall;
0x0003c0a7: add [rax], al; add [rax], al; nop [rax+rax]; mov esi, 8; mov eax, 0x7f; syscall;
0x0003c0a9: add [rax], al; nop [rax+rax]; mov esi, 8; mov eax, 0x7f; syscall;
0x0003c0ab: nop [rax+rax]; mov esi, 8; mov eax, 0x7f; syscall;
0x0003c0ad: add [rax], r8b; mov esi, 8; mov eax, 0x7f; syscall;
0x0003c0ae: add [rax], al; mov esi, 8; mov eax, 0x7f; syscall;
0x0003c0af: add [rsi+8], bh; mov eax, 0x7f; syscall;
0x0003c0b0: mov esi, 8; mov eax, 0x7f; syscall;
0x0003c0b1: or [rax], al; add [rax], al; mov eax, 0x7f; syscall;
0x0003c0b2: add [rax], al; add [rax+0x7f], bh; syscall;
0x0003c0b3: add [rax], al; mov eax, 0x7f; syscall;
0x0003c0b4: add [rax+0x7f], bh; syscall;
0x0003c0b5: mov eax, 0x7f; syscall;
0x0003c0c7: add [rax-0x75], cl; adc eax, 0x181da1; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x0003c0ca: adc eax, 0x181da1; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x0003c0cb: mov eax, [0x28964d8f700181d]; mov eax, 0xffffffff; ret;
0x0003c0e5: add [rax], al; add [rbp-0x41e38a40], al; or [rax], al; add [rax], al; mov eax, 0x82; syscall;
0x0003c0e7: add [rbp-0x41e38a40], al; or [rax], al; add [rax], al; mov eax, 0x82; syscall;
0x0003c0e9: shl byte ptr [rbp+0x1c], 0xbe; or [rax], al; add [rax], al; mov eax, 0x82; syscall;
0x0003c0eb: sbb al, 0xbe; or [rax], al; add [rax], al; mov eax, 0x82; syscall;
0x0003c0ec: mov esi, 8; mov eax, 0x82; syscall;
0x0003c0ed: or [rax], al; add [rax], al; mov eax, 0x82; syscall;
0x0003c0ee: add [rax], al; add [rax+0x82], bh; syscall;
0x0003c0ef: add [rax], al; mov eax, 0x82; syscall;
0x0003c0f0: add [rax+0x82], bh; syscall;
0x0003c0fd: push qword ptr [rdi+0x50]; ret;
0x0003c113: mov [rax+rax], es; mov rdi, [rsp+8]; mov esi, 8; mov r8d, eax; mov eax, 0x82; syscall;
0x0003c114: add al, 0; mov rdi, [rsp+8]; mov esi, 8; mov r8d, eax; mov eax, 0x82; syscall;
0x0003c116: mov rdi, [rsp+8]; mov esi, 8; mov r8d, eax; mov eax, 0x82; syscall;
0x0003c117: mov edi, [rsp+8]; mov esi, 8; mov r8d, eax; mov eax, 0x82; syscall;
0x0003c119: and al, 8; mov esi, 8; mov r8d, eax; mov eax, 0x82; syscall;
0x0003c11a: or [rsi+8], bh; mov r8d, eax; mov eax, 0x82; syscall;
0x0003c11b: mov esi, 8; mov r8d, eax; mov eax, 0x82; syscall;
0x0003c11c: or [rax], al; add [rax], al; mov r8d, eax; mov eax, 0x82; syscall;
0x0003c11e: add [rax], al; mov r8d, eax; mov eax, 0x82; syscall;
0x0003c120: mov r8d, eax; mov eax, 0x82; syscall;
0x0003c121: mov eax, eax; mov eax, 0x82; syscall;
0x0003c123: mov eax, 0x82; syscall;
0x0003c138: or al, ch; mov [0x480824448b00048c], al; add esp, 0x18; ret;
0x0003c13a: mov [0x480824448b00048c], al; add esp, 0x18; ret;
0x0003c13b: mov [rax+rax], es; mov eax, [rsp+8]; add rsp, 0x18; ret;
0x0003c13c: add al, 0; mov eax, [rsp+8]; add rsp, 0x18; ret;
0x0003c13d: add [rbx+0x48082444], cl; add esp, 0x18; ret;
0x0003c14f: add [rax-0x75], cl; adc eax, 0x181d19; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x0003c152: adc eax, 0x181d19; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x0003c153: sbb [rip-0x2708ffe8], ebx; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x0003c154: sbb eax, 0xd8f70018; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x0003c155: sbb [rax], al; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x0003c1e9: add [rbp+0xc], dh; add rsp, 0x90; pop rbx; pop rbp; pop r12; ret;
0x0003c1eb: or al, 0x48; add esp, 0x90; pop rbx; pop rbp; pop r12; ret;
0x0003c2e0: add [rax], al; add [rbp+0xf], dh; add rsp, 0x118; ret;
0x0003c2e2: add [rbp+0xf], dh; add rsp, 0x118; ret;
0x0003c2e5: add rsp, 0x118; ret;
0x0003c2e6: add esp, 0x118; ret;
0x0003c2e8: sbb [rcx], al; add [rax], al; ret;
0x0003c356: add [rax], al; add [rbp+0x3d], dh; add rsp, 0x98; pop rbp; pop r12; ret;
0x0003c358: add [rbp+0x3d], dh; add rsp, 0x98; pop rbp; pop r12; ret;
0x0003c35a: cmp eax, 0x98c48148; add [rax], al; add [rbp+0x41], bl; pop rsp; ret;
0x0003c456: add [rax], al; add [rbp+0x1c], dh; add rsp, 0x98; pop rbp; pop r12; ret;
0x0003c458: add [rbp+0x1c], dh; add rsp, 0x98; pop rbp; pop r12; ret;
0x0003c45a: sbb al, 0x48; add esp, 0x98; pop rbp; pop r12; ret;
0x0003c533: leave; add edi, esi; ret 0;
0x0003c534: add edi, esi; ret 0;
0x0003c56c: add [rax], al; add [rbp+0x14], dh; add rsp, 0x140; mov eax, r8d; pop rbx; ret;
0x0003c56e: add [rbp+0x14], dh; add rsp, 0x140; mov eax, r8d; pop rbx; ret;
0x0003c570: adc al, 0x48; add esp, 0x140; mov eax, r8d; pop rbx; ret;
0x0003c571: add rsp, 0x140; mov eax, r8d; pop rbx; ret;
0x0003c572: add esp, 0x140; mov eax, r8d; pop rbx; ret;
0x0003c5c7: and al, 0xf; xchg ebp, eax; ret 0x8948;
0x0003c5ff: add [rax], al; add [rbp+0x31], dh; add rsp, 0x40; pop rbx; ret;
0x0003c601: add [rbp+0x31], dh; add rsp, 0x40; pop rbx; ret;
0x0003c62c: div byte ptr [rcx]; call far fword ptr [rbx-0x17];
0x0003c62e: call far fword ptr [rbx-0x17];
0x0003c634: add al, ch; out 0xf, al; or eax, 0x1f0f6600; add [rax], r8b; mov eax, 0x83; syscall;
0x0003c636: out 0xf, al; or eax, 0x1f0f6600; add [rax], r8b; mov eax, 0x83; syscall;
0x0003c637: prefetch_exclusive [rax]; nop [rax+rax]; mov eax, 0x83; syscall;
0x0003c638: or eax, 0x1f0f6600; add [rax], r8b; mov eax, 0x83; syscall;
0x0003c63a: nop [rax+rax]; mov eax, 0x83; syscall;
0x0003c63b: nop [rax+rax]; mov eax, 0x83; syscall;
0x0003c63d: add [rax], r8b; mov eax, 0x83; syscall;
0x0003c63e: add [rax], al; mov eax, 0x83; syscall;
0x0003c63f: add [rax+0x83], bh; syscall;
0x0003c652: or eax, 0x181819; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x0003c653: sbb [rax], ebx; sbb [rax], al; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x0003c654: sbb [rax], bl; add bh, dh; fsub st, dword ptr [rcx+rcx*4+1]; or rax, 0xffffffffffffffff; ret;
0x0003c655: sbb [rax], al; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x0003c705: add [rbp+0x2d], dh; add rsp, 0xa0; pop rbx; pop rbp; pop r12; ret;
0x0003c707: sub eax, 0xa0c48148; add [rax], al; add [rbx+0x5d], bl; pop r12; ret;
0x0003c766: add cl, 0xe9; add esi, ebx; stosq [rdi]; ret;
0x0003c770: add eax, 0x1816fb; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x0003c7b8: movups [rdi+0x28], xmm0; movups [rdi+0x38], xmm0; movups [rdi+0x48], xmm0; movups [rdi+0x58], xmm0; movups [rdi+0x68], xmm0; ret;
0x0003c7b9: adc [rdi+0x28], eax; movups [rdi+0x38], xmm0; movups [rdi+0x48], xmm0; movups [rdi+0x58], xmm0; movups [rdi+0x68], xmm0; ret;
0x0003c7ba: sub [r15], r9b; adc [rdi+0x38], eax; movups [rdi+0x48], xmm0; movups [rdi+0x58], xmm0; movups [rdi+0x68], xmm0; ret;
0x0003c7bb: sub [rdi], cl; adc [rdi+0x38], eax; movups [rdi+0x48], xmm0; movups [rdi+0x58], xmm0; movups [rdi+0x68], xmm0; ret;
0x0003c7bc: movups [rdi+0x38], xmm0; movups [rdi+0x48], xmm0; movups [rdi+0x58], xmm0; movups [rdi+0x68], xmm0; ret;
0x0003c7bd: adc [rdi+0x38], eax; movups [rdi+0x48], xmm0; movups [rdi+0x58], xmm0; movups [rdi+0x68], xmm0; ret;
0x0003c7be: cmp [r15], r9b; adc [rdi+0x48], eax; movups [rdi+0x58], xmm0; movups [rdi+0x68], xmm0; ret;
0x0003c7bf: cmp [rdi], cl; adc [rdi+0x48], eax; movups [rdi+0x58], xmm0; movups [rdi+0x68], xmm0; ret;
0x0003c7c0: movups [rdi+0x48], xmm0; movups [rdi+0x58], xmm0; movups [rdi+0x68], xmm0; ret;
0x0003c7c1: adc [rdi+0x48], eax; movups [rdi+0x58], xmm0; movups [rdi+0x68], xmm0; ret;
0x0003c7c4: movups [rdi+0x58], xmm0; movups [rdi+0x68], xmm0; ret;
0x0003c7c5: adc [rdi+0x58], eax; movups [rdi+0x68], xmm0; ret;
0x0003c7c6: pop r8; movups [rdi+0x68], xmm0; ret;
0x0003c7c7: pop rax; movups [rdi+0x68], xmm0; ret;
0x0003c7c8: movups [rdi+0x68], xmm0; ret;
0x0003c7c9: adc [rdi+0x68], eax; ret;
0x0003c7cf: add eax, 0x18169c; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x0003c7ff: and [rbx+0x137601fe], al; mov eax, 1; shl rax, cl; or [rdi], rax; xor eax, eax; ret;
0x0003c802: add [rsi+0x13], esi; mov eax, 1; shl rax, cl; or [rdi], rax; xor eax, eax; ret;
0x0003c804: adc edi, [rax+1]; shl rax, cl; or [rdi], rax; xor eax, eax; ret;
0x0003c805: mov eax, 1; shl rax, cl; or [rdi], rax; xor eax, eax; ret;
0x0003c806: add [rax], eax; add [rax], al; shl rax, cl; or [rdi], rax; xor eax, eax; ret;
0x0003c808: add [rax], al; shl rax, cl; or [rdi], rax; xor eax, eax; ret;
0x0003c80a: shl rax, cl; or [rdi], rax; xor eax, eax; ret;
0x0003c80b: shl eax, cl; or [rdi], rax; xor eax, eax; ret;
0x0003c80d: or [rdi], rax; xor eax, eax; ret;
0x0003c80e: or [rdi], eax; xor eax, eax; ret;
0x0003c817: add [rax-0x75], cl; add eax, 0x181651; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x0003c81a: add eax, 0x181651; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x0003c83f: and [rbx+0x137601fe], al; mov rax, 0xfffffffffffffffe; rol rax, cl; and [rdi], rax; xor eax, eax; ret;
0x0003c842: add [rsi+0x13], esi; mov rax, 0xfffffffffffffffe; rol rax, cl; and [rdi], rax; xor eax, eax; ret;
0x0003c845: mov rax, 0xfffffffffffffffe; rol rax, cl; and [rdi], rax; xor eax, eax; ret;
0x0003c846: mov eax, 0xfffffffe; rol rax, cl; and [rdi], rax; xor eax, eax; ret;
0x0003c84b: dec dword ptr [rax-0x2d]; ror byte ptr [rax+0x21], 7; xor eax, eax; ret;
0x0003c84c: rol rax, cl; and [rdi], rax; xor eax, eax; ret;
0x0003c84d: rol eax, cl; and [rdi], rax; xor eax, eax; ret;
0x0003c84e: ror byte ptr [rax+0x21], 7; xor eax, eax; ret;
0x0003c84f: and [rdi], rax; xor eax, eax; ret;
0x0003c850: and [rdi], eax; xor eax, eax; ret;
0x0003c857: add [rax-0x75], cl; add eax, 0x181611; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x0003c85a: add eax, 0x181611; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x0003c85b: adc [rsi], edx; sbb [rax], al; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x0003c87c: adc edi, [rax+1]; shl rax, cl; and rax, [rdi]; setne al; movzx eax, al; ret;
0x0003c87d: mov eax, 1; shl rax, cl; and rax, [rdi]; setne al; movzx eax, al; ret;
0x0003c880: add [rax], al; shl rax, cl; and rax, [rdi]; setne al; movzx eax, al; ret;
0x0003c882: shl rax, cl; and rax, [rdi]; setne al; movzx eax, al; ret;
0x0003c883: shl eax, cl; and rax, [rdi]; setne al; movzx eax, al; ret;
0x0003c885: and rax, [rdi]; setne al; movzx eax, al; ret;
0x0003c886: and eax, [rdi]; setne al; movzx eax, al; ret;
0x0003c88a: ror byte ptr [rdi], 0xb6; rol bl, 0x90; mov rax, [rip+0x1815d9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x0003c88d: rol bl, 0x90; mov rax, [rip+0x1815d9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x0003c88f: nop; mov rax, [rip+0x1815d9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x0003c892: add eax, 0x1815d9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x0003c893: fst dword ptr [rip-0x389bffe8], st; add [rsi], dl; add [rax], al; add [rax-1], bh; ret;
0x0003c894: adc eax, 0xc7640018; add [rsi], dl; add [rax], al; add [rax-1], bh; ret;
0x0003c8a4: nop [rax+rax]; xchg ax, ax; mov rax, [rip+0x1815b9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x0003c8a5: nop [rax+rax]; xchg ax, ax; mov rax, [rip+0x1815b9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x0003c8a6: nop [rax+rax]; xchg ax, ax; mov rax, [rip+0x1815b9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x0003c8ab: add [rax], al; add [rsi-0x70], ah; mov rax, [rip+0x1815b9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x0003c8ac: add [rax], al; xchg ax, ax; mov rax, [rip+0x1815b9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x0003c8ad: add [rsi-0x70], ah; mov rax, [rip+0x1815b9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x0003c8ae: xchg ax, ax; mov rax, [rip+0x1815b9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x0003c8b2: add eax, 0x1815b9; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x0003c8b3: mov ecx, 0x64001815; mov dword ptr [rax], 0x26; mov eax, 0xffffffff; ret;
0x0003c8b4: adc eax, 0xc7640018; add [rsi], ah; add [rax], al; add [rax-1], bh; ret;
0x0003c8b5: sbb [rax], al; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x0003c94f: add [rax], al; add [rbp+8], dh; add rsp, 0x148; ret;
0x0003c951: add [rbp+8], dh; add rsp, 0x148; ret;
0x0003c954: add rsp, 0x148; ret;
0x0003c955: add esp, 0x148; ret;
0x0003c983: nop [rax+rax]; mov rax, [rip+0x1822e9]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret;
0x0003c985: add [rax], r8b; mov rax, [rip+0x1822e9]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret;
0x0003c986: add [rax], al; mov rax, [rip+0x1822e9]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret;
0x0003c987: add [rax-0x75], cl; add eax, 0x1814e1; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret;
0x0003c98a: add eax, 0x1814e1; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret;
0x0003c98d: sbb [rax], al; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret;
0x0003c9d1: out dx, al; mov r8d, 1; mov eax, r8d; ret;
0x0003c9dc: nop [rax]; mov rax, [rip+0x181489]; mov r8d, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, r8d; ret;
0x0003c9df: add [rax-0x75], cl; add eax, 0x181489; mov r8d, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, r8d; ret;
0x0003c9e0: mov rax, [rip+0x181489]; mov r8d, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, r8d; ret;
0x0003c9e1: mov eax, [rip+0x181489]; mov r8d, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, r8d; ret;
0x0003c9e2: add eax, 0x181489; mov r8d, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, r8d; ret;
0x0003c9e5: sbb [rax], al; mov r8d, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, r8d; ret;
0x0003c9e7: mov r8d, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, r8d; ret;
0x0003c9e8: mov eax, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, r8d; ret;
0x0003c9ed: mov dword ptr fs:[rax], 0x16; mov eax, r8d; ret;
0x0003c9ee: mov dword ptr [rax], 0x16; mov eax, r8d; ret;
0x0003c9ef: add [rsi], dl; add [rax], al; add [rcx+rcx*4-0x40], al; ret;
0x0003ca3b: add eax, 0x181430; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x0003ca4f: add [rax-0x77], cl; ror dword ptr [rax-0x7b], 1; test byte ptr [rdi], 0x94; ret 0x8548;
0x0003ca52: ror dword ptr [rax-0x7b], 1; test byte ptr [rdi], 0x94; ret 0x8548;
0x0003ca55: test byte ptr [rdi], 0x94; ret 0x8548;
0x0003ca60: ret 0x2675;
0x0003ca8b: add eax, 0x1813e0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x0003ca8e: sbb [rax], al; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x0003ca9b: inc ebx; nop [rax]; mov eax, [rip+0x181706]; ret;
0x0003ca9d: nop [rax]; mov eax, [rip+0x181706]; ret;
0x0003ca9f: add [rbx+0x18170605], cl; add bl, al; nop [rax+rax]; mov eax, [rip+0x1816f2]; ret;
0x0003caa0: mov eax, [rip+0x181706]; ret;
0x0003caa1: add eax, 0x181706; ret;
0x0003caa5: add bl, al; nop [rax+rax]; mov eax, [rip+0x1816f2]; ret;
0x0003caa7: nop [rax+rax]; mov eax, [rip+0x1816f2]; ret;
0x0003caa8: nop [rax+rax]; mov eax, [rip+0x1816f2]; ret;
0x0003caaa: test [rax], al; add [rax], al; add [rax], al; mov eax, [rip+0x1816f2]; ret;
0x0003caac: add [rax], al; add [rax], al; mov eax, [rip+0x1816f2]; ret;
0x0003caae: add [rax], al; mov eax, [rip+0x1816f2]; ret;
0x0003cab0: mov eax, [rip+0x1816f2]; ret;
0x0003cab1: add eax, 0x1816f2; ret;
0x0003cad9: lea edx, [rax+1]; mov [rip+0x1816ca], edx; ret;
0x0003cada: push rax; add [rcx+0x1816ca15], ecx; add bl, al; nop [rax+rax]; mov eax, 0xffffffff; ret;
0x0003cadb: add [rcx+0x1816ca15], ecx; add bl, al; nop [rax+rax]; mov eax, 0xffffffff; ret;
0x0003cadc: mov [rip+0x1816ca], edx; ret;
0x0003cadd: adc eax, 0x1816ca; ret;
0x0003cae0: sbb [rax], al; ret;
0x0003cae1: add bl, al; nop [rax+rax]; mov eax, 0xffffffff; ret;
0x0003caec: inc ebx; xchg ax, ax; lea eax, [rdx-1]; mov [rip+0x1816af], eax; mov eax, edx; ret;
0x0003caee: xchg ax, ax; lea eax, [rdx-1]; mov [rip+0x1816af], eax; mov eax, edx; ret;
0x0003caef: nop; lea eax, [rdx-1]; mov [rip+0x1816af], eax; mov eax, edx; ret;
0x0003caf0: lea eax, [rdx-1]; mov [rip+0x1816af], eax; mov eax, edx; ret;
0x0003caf3: mov [rip+0x1816af], eax; mov eax, edx; ret;
0x0003caf4: add eax, 0x1816af; mov eax, edx; ret;
0x0003caf7: sbb [rax], al; mov eax, edx; ret;
0x0003cb1b: shl byte ptr [rbp+0x5a], 0x41; mov edx, 8; mov eax, 0x80; syscall;
0x0003cb1d: pop rdx; mov r10d, 8; mov eax, 0x80; syscall;
0x0003cb67: add rsp, 0x10; mov eax, r12d; pop rbx; pop rbp; pop r12; ret;
0x0003cb68: add esp, 0x10; mov eax, r12d; pop rbx; pop rbp; pop r12; ret;
0x0003cb6a: adc [rcx+rcx*4-0x20], al; pop rbx; pop rbp; pop r12; ret;
0x0003cb8b: mov rdi, [rsp]; mov rsi, rbx; mov r8d, eax; mov r10d, 8; mov eax, 0x80; syscall;
0x0003cb8c: mov edi, [rsp]; mov rsi, rbx; mov r8d, eax; mov r10d, 8; mov eax, 0x80; syscall;
0x0003cb8d: cmp al, 0x24; mov rsi, rbx; mov r8d, eax; mov r10d, 8; mov eax, 0x80; syscall;
0x0003cb8e: and al, 0x48; mov esi, ebx; mov r8d, eax; mov r10d, 8; mov eax, 0x80; syscall;
0x0003cb8f: mov rsi, rbx; mov r8d, eax; mov r10d, 8; mov eax, 0x80; syscall;
0x0003cb90: mov esi, ebx; mov r8d, eax; mov r10d, 8; mov eax, 0x80; syscall;
0x0003cb91: fiadd st, word ptr [rcx-0x77]; rol byte ptr [rcx-0x46], 8; add [rax], al; add [rax+0x80], bh; syscall;
0x0003cb92: mov r8d, eax; mov r10d, 8; mov eax, 0x80; syscall;
0x0003cb93: mov eax, eax; mov r10d, 8; mov eax, 0x80; syscall;
0x0003cb94: rol byte ptr [rcx-0x46], 8; add [rax], al; add [rax+0x80], bh; syscall;
0x0003cb95: mov r10d, 8; mov eax, 0x80; syscall;
0x0003cb96: mov edx, 8; mov eax, 0x80; syscall;
0x0003cb97: or [rax], al; add [rax], al; mov eax, 0x80; syscall;
0x0003cb98: add [rax], al; add [rax+0x80], bh; syscall;
0x0003cb99: add [rax], al; mov eax, 0x80; syscall;
0x0003cb9a: add [rax+0x80], bh; syscall;
0x0003cb9b: mov eax, 0x80; syscall;
0x0003cbf7: add dword ptr [rax+rax], 0xffff4ee9; call qword ptr [rax-0x6162dcf];
0x0003cbfe: call qword ptr [rax-0x6162dcf];
0x0003cc63: sbb [rcx+rcx*4-0x16], cl; mov esi, ebp; mov [rsp+0x14], eax; mov edi, r12d; mov eax, 0x81; syscall;
0x0003cc64: mov rdx, r13; mov esi, ebp; mov [rsp+0x14], eax; mov edi, r12d; mov eax, 0x81; syscall;
0x0003cc65: mov edx, ebp; mov esi, ebp; mov [rsp+0x14], eax; mov edi, r12d; mov eax, 0x81; syscall;
0x0003cc67: mov esi, ebp; mov [rsp+0x14], eax; mov edi, r12d; mov eax, 0x81; syscall;
0x0003cc68: out dx, al; mov [rsp+0x14], eax; mov edi, r12d; mov eax, 0x81; syscall;
0x0003cc69: mov [rsp+0x14], eax; mov edi, r12d; mov eax, 0x81; syscall;
0x0003cc6b: and al, 0x14; mov edi, r12d; mov eax, 0x81; syscall;
0x0003cc6c: adc al, 0x44; mov edi, esp; mov eax, 0x81; syscall;
0x0003cc6d: mov edi, r12d; mov eax, 0x81; syscall;
0x0003cc6e: mov edi, esp; mov eax, 0x81; syscall;
0x0003cc92: add rsp, 0x98; pop rbx; pop rbp; pop r12; pop r13; ret;
0x0003cc93: add esp, 0x98; pop rbx; pop rbp; pop r12; pop r13; ret;
0x0003cc95: cwde; add [rax], al; add [rbx+0x5d], bl; pop r12; pop r13; ret;
0x0003cd12: add [rax], al; add [rbp+0x18], dh; add rsp, 0x98; pop rbp; pop r12; ret;
0x0003cd14: add [rbp+0x18], dh; add rsp, 0x98; pop rbp; pop r12; ret;
0x0003cd95: add [rax], al; add [rbp+0x15], dh; add rsp, 0x98; pop rbp; pop r12; ret;
0x0003cd97: add [rbp+0x15], dh; add rsp, 0x98; pop rbp; pop r12; ret;
0x0003cd99: adc eax, 0x98c48148; add [rax], al; add [rbp+0x41], bl; pop rsp; ret;
0x0003cd9a: add rsp, 0x98; pop rbp; pop r12; ret;
0x0003cd9b: add esp, 0x98; pop rbp; pop r12; ret;
0x0003cd9d: cwde; add [rax], al; add [rbp+0x41], bl; pop rsp; ret;
0x0003cf69: adc eax, 0x48c48148; add al, [rax]; add [rbx+0x5d], bl; pop r12; pop r13; ret;
0x0003cf6a: add rsp, 0x248; pop rbx; pop rbp; pop r12; pop r13; ret;
0x0003cf6b: add esp, 0x248; pop rbx; pop rbp; pop r12; pop r13; ret;
0x0003cf6e: add al, [rax]; add [rbx+0x5d], bl; pop r12; pop r13; ret;
0x0003d023: and eax, 0xef894800; shr rbx, 1; imul r15, rbx; add r15, [rsp]; mov rsi, r15; call r14;
0x0003d025: mov rdi, rbp; shr rbx, 1; imul r15, rbx; add r15, [rsp]; mov rsi, r15; call r14;
0x0003d026: mov edi, ebp; shr rbx, 1; imul r15, rbx; add r15, [rsp]; mov rsi, r15; call r14;
0x0003d027: out dx, eax; shr rbx, 1; imul r15, rbx; add r15, [rsp]; mov rsi, r15; call r14;
0x0003d028: shr rbx, 1; imul r15, rbx; add r15, [rsp]; mov rsi, r15; call r14;
0x0003d029: shr ebx, 1; imul r15, rbx; add r15, [rsp]; mov rsi, r15; call r14;
0x0003d02b: imul r15, rbx; add r15, [rsp]; mov rsi, r15; call r14;
0x0003d02c: imul edi, ebx; add r15, [rsp]; mov rsi, r15; call r14;
0x0003d02d: scasd [rdi]; sti; add r15, [rsp]; mov rsi, r15; call r14;
0x0003d02e: sti; add r15, [rsp]; mov rsi, r15; call r14;
0x0003d02f: add r15, [rsp]; mov rsi, r15; call r14;
0x0003d030: add edi, [rsp]; mov rsi, r15; call r14;
0x0003d031: cmp al, 0x24; mov rsi, r15; call r14;
0x0003d032: and al, 0x4c; mov esi, edi; call r14;
0x0003d033: mov rsi, r15; call r14;
0x0003d034: mov esi, edi; call r14;
0x0003d036: call r14;
0x0003d0a7: sub [rax-0x73], cl; dec dword ptr [rax+0xf]; scasd [rdi]; ret 0x148;
0x0003d0ab: dec dword ptr [rax+0xf]; scasd [rdi]; ret 0x148;
0x0003d0ae: scasd [rdi]; ret 0x148;
0x0003d118: test dword ptr [rax-0x77], 0xe8d148ea; imul rax, rdi; lea r12, [rcx+rax]; mov rdi, r12; call rbx;
0x0003d119: mov rdx, rbp; shr rax, 1; imul rax, rdi; lea r12, [rcx+rax]; mov rdi, r12; call rbx;
0x0003d11a: mov edx, ebp; shr rax, 1; imul rax, rdi; lea r12, [rcx+rax]; mov rdi, r12; call rbx;
0x0003d11c: shr rax, 1; imul rax, rdi; lea r12, [rcx+rax]; mov rdi, r12; call rbx;
0x0003d11d: shr eax, 1; imul rax, rdi; lea r12, [rcx+rax]; mov rdi, r12; call rbx;
0x0003d11f: imul rax, rdi; lea r12, [rcx+rax]; mov rdi, r12; call rbx;
0x0003d120: imul eax, edi; lea r12, [rcx+rax]; mov rdi, r12; call rbx;
0x0003d123: lea r12, [rcx+rax]; mov rdi, r12; call rbx;
0x0003d124: lea esp, [rcx+rax]; mov rdi, r12; call rbx;
0x0003d125: and al, 1; mov rdi, r12; call rbx;
0x0003d126: add [rcx+rcx*4-0x19], ecx; call rbx;
0x0003d132: add [rax], al; mov rdi, [rsp+8]; mov rdx, rbp; mov rsi, r12; call rbx;
0x0003d134: mov rdi, [rsp+8]; mov rdx, rbp; mov rsi, r12; call rbx;
0x0003d135: mov edi, [rsp+8]; mov rdx, rbp; mov rsi, r12; call rbx;
0x0003d137: and al, 8; mov rdx, rbp; mov rsi, r12; call rbx;
0x0003d139: mov rdx, rbp; mov rsi, r12; call rbx;
0x0003d13a: mov edx, ebp; mov rsi, r12; call rbx;
0x0003d13c: mov rsi, r12; call rbx;
0x0003d13d: mov esi, esp; call rbx;
0x0003d157: lea r14, [rax+r13]; nop [rax+rax]; mov rdx, rbp; mov rsi, r12; mov rdi, r15; call rbx;
0x0003d158: lea esi, [rax+rbp]; nop [rax+rax]; mov rdx, rbp; mov rsi, r12; mov rdi, r15; call rbx;
0x0003d159: xor al, 0x28; nop [rax+rax]; mov rdx, rbp; mov rsi, r12; mov rdi, r15; call rbx;
0x0003d15b: nop [rax+rax]; mov rdx, rbp; mov rsi, r12; mov rdi, r15; call rbx;
0x0003d15d: add [rax], r8b; mov rdx, rbp; mov rsi, r12; mov rdi, r15; call rbx;
0x0003d15e: add [rax], al; mov rdx, rbp; mov rsi, r12; mov rdi, r15; call rbx;
0x0003d160: mov rdx, rbp; mov rsi, r12; mov rdi, r15; call rbx;
0x0003d161: mov edx, ebp; mov rsi, r12; mov rdi, r15; call rbx;
0x0003d163: mov rsi, r12; mov rdi, r15; call rbx;
0x0003d164: mov esi, esp; mov rdi, r15; call rbx;
0x0003d165: out 0x4c, al; mov edi, edi; call rbx;
0x0003d166: mov rdi, r15; call rbx;
0x0003d167: mov edi, edi; call rbx;
0x0003d174: nop [rax]; add r14, r13; mov rdx, rbp; mov rsi, r14; mov rdi, r12; call rbx;
0x0003d177: add [rbp+1], cl; out dx, al; mov rdx, rbp; mov rsi, r14; mov rdi, r12; call rbx;
0x0003d178: add r14, r13; mov rdx, rbp; mov rsi, r14; mov rdi, r12; call rbx;
0x0003d179: add esi, ebp; mov rdx, rbp; mov rsi, r14; mov rdi, r12; call rbx;
0x0003d17a: out dx, al; mov rdx, rbp; mov rsi, r14; mov rdi, r12; call rbx;
0x0003d17b: mov rdx, rbp; mov rsi, r14; mov rdi, r12; call rbx;
0x0003d17c: mov edx, ebp; mov rsi, r14; mov rdi, r12; call rbx;
0x0003d17e: mov rsi, r14; mov rdi, r12; call rbx;
0x0003d17f: mov esi, esi; mov rdi, r12; call rbx;
0x0003d222: nop [rax+rax]; mov rsi, r15; mov rdi, r12; mov rdx, rbp; call rbx;
0x0003d223: nop [rax+rax]; mov rsi, r15; mov rdi, r12; mov rdx, rbp; call rbx;
0x0003d225: add [rax], r8b; mov rsi, r15; mov rdi, r12; mov rdx, rbp; call rbx;
0x0003d226: add [rax], al; mov rsi, r15; mov rdi, r12; mov rdx, rbp; call rbx;
0x0003d227: add [rcx+rcx*4-2], cl; mov rdi, r12; mov rdx, rbp; call rbx;
0x0003d228: mov rsi, r15; mov rdi, r12; mov rdx, rbp; call rbx;
0x0003d229: mov esi, edi; mov rdi, r12; mov rdx, rbp; call rbx;
0x0003d22a: dec byte ptr [rcx+rcx*4-0x19]; mov rdx, rbp; call rbx;
0x0003d22b: mov rdi, r12; mov rdx, rbp; call rbx;
0x0003d22c: mov edi, esp; mov rdx, rbp; call rbx;
0x0003d22d: out 0x48, eax; mov edx, ebp; call rbx;
0x0003d22e: mov rdx, rbp; call rbx;
0x0003d296: nop [rax+rax]; add r12, r15; mov rdx, rbp; mov rsi, r12; mov rdi, r13; call rbx;
0x0003d297: nop [rax+rax]; add r12, r15; mov rdx, rbp; mov rsi, r12; mov rdi, r13; call rbx;
0x0003d298: nop [rax+rax]; add r12, r15; mov rdx, rbp; mov rsi, r12; mov rdi, r13; call rbx;
0x0003d29e: add [rax], al; add r12, r15; mov rdx, rbp; mov rsi, r12; mov rdi, r13; call rbx;
0x0003d29f: add [rbp+1], cl; cld; mov rdx, rbp; mov rsi, r12; mov rdi, r13; call rbx;
0x0003d2a0: add r12, r15; mov rdx, rbp; mov rsi, r12; mov rdi, r13; call rbx;
0x0003d2a1: add esp, edi; mov rdx, rbp; mov rsi, r12; mov rdi, r13; call rbx;
0x0003d2a2: cld; mov rdx, rbp; mov rsi, r12; mov rdi, r13; call rbx;
0x0003d2a3: mov rdx, rbp; mov rsi, r12; mov rdi, r13; call rbx;
0x0003d2a4: mov edx, ebp; mov rsi, r12; mov rdi, r13; call rbx;
0x0003d2a6: mov rsi, r12; mov rdi, r13; call rbx;
0x0003d2a7: mov esi, esp; mov rdi, r13; call rbx;
0x0003d2a8: out 0x4c, al; mov edi, ebp; call rbx;
0x0003d2a9: mov rdi, r13; call rbx;
0x0003d3e9: adc [rax+0x39], cl; ret 0x8e0f;
0x0003d449: out 0x48, al; mov esi, [rsp+0x10]; mov rdx, rbp; mov rdi, r12; call rbx;
0x0003d44a: mov rsi, [rsp+0x10]; mov rdx, rbp; mov rdi, r12; call rbx;
0x0003d44b: mov esi, [rsp+0x10]; mov rdx, rbp; mov rdi, r12; call rbx;
0x0003d44d: and al, 0x10; mov rdx, rbp; mov rdi, r12; call rbx;
0x0003d44f: mov rdx, rbp; mov rdi, r12; call rbx;
0x0003d450: mov edx, ebp; mov rdi, r12; call rbx;
0x0003d480: out 0xe9, al; ret;
0x0003d4a9: add [rax-0x7d], ecx; ret 0x4001;
0x0003d61b: add [rax], al; mov rsi, [r13]; mov rdi, [r12]; mov rdx, r14; mov rax, [rsp+8]; call rax;
0x0003d61d: mov rsi, [r13]; mov rdi, [r12]; mov rdx, r14; mov rax, [rsp+8]; call rax;
0x0003d61e: mov esi, [rbp]; mov rdi, [r12]; mov rdx, r14; mov rax, [rsp+8]; call rax;
0x0003d620: add [rcx-0x75], cl; cmp al, 0x24; mov rdx, r14; mov rax, [rsp+8]; call rax;
0x0003d621: mov rdi, [r12]; mov rdx, r14; mov rax, [rsp+8]; call rax;
0x0003d622: mov edi, [rsp]; mov rdx, r14; mov rax, [rsp+8]; call rax;
0x0003d623: cmp al, 0x24; mov rdx, r14; mov rax, [rsp+8]; call rax;
0x0003d624: and al, 0x4c; mov edx, esi; mov rax, [rsp+8]; call rax;
0x0003d625: mov rdx, r14; mov rax, [rsp+8]; call rax;
0x0003d626: mov edx, esi; mov rax, [rsp+8]; call rax;
0x0003d628: mov rax, [rsp+8]; call rax;
0x0003d629: mov eax, [rsp+8]; call rax;
0x0003d6e3: add [rax], al; mov rax, [rsp+8]; mov rdx, r14; mov rsi, r13; mov rdi, r12; call rax;
0x0003d6e4: add [rax-0x75], cl; and al, 8; mov rdx, r14; mov rsi, r13; mov rdi, r12; call rax;
0x0003d6e5: mov rax, [rsp+8]; mov rdx, r14; mov rsi, r13; mov rdi, r12; call rax;
0x0003d6e6: mov eax, [rsp+8]; mov rdx, r14; mov rsi, r13; mov rdi, r12; call rax;
0x0003d6e8: and al, 8; mov rdx, r14; mov rsi, r13; mov rdi, r12; call rax;
0x0003d6e9: or [rcx+rcx*4-0xe], cl; mov rsi, r13; mov rdi, r12; call rax;
0x0003d6ea: mov rdx, r14; mov rsi, r13; mov rdi, r12; call rax;
0x0003d6eb: mov edx, esi; mov rsi, r13; mov rdi, r12; call rax;
0x0003d743: test [rdi+0x4c000000], bl; mov edx, esi; mov rax, [rsp+8]; mov rsi, r13; mov rdi, r12; call rax;
0x0003d745: add [rax], al; add [rcx+rcx*4-0xe], cl; mov rax, [rsp+8]; mov rsi, r13; mov rdi, r12; call rax;
0x0003d746: add [rax], al; mov rdx, r14; mov rax, [rsp+8]; mov rsi, r13; mov rdi, r12; call rax;
0x0003d747: add [rcx+rcx*4-0xe], cl; mov rax, [rsp+8]; mov rsi, r13; mov rdi, r12; call rax;
0x0003d748: mov rdx, r14; mov rax, [rsp+8]; mov rsi, r13; mov rdi, r12; call rax;
0x0003d749: mov edx, esi; mov rax, [rsp+8]; mov rsi, r13; mov rdi, r12; call rax;
0x0003d74b: mov rax, [rsp+8]; mov rsi, r13; mov rdi, r12; call rax;
0x0003d74c: mov eax, [rsp+8]; mov rsi, r13; mov rdi, r12; call rax;
0x0003d74e: and al, 8; mov rsi, r13; mov rdi, r12; call rax;
0x0003d74f: or [rcx+rcx*4-0x12], cl; mov rdi, r12; call rax;
0x0003d750: mov rsi, r13; mov rdi, r12; call rax;
0x0003d795: mov rcx, [rsp+8]; mov rdx, r14; mov rsi, r13; add r15, [rsp]; mov rdi, r12; call rcx;
0x0003d796: mov ecx, [rsp+8]; mov rdx, r14; mov rsi, r13; add r15, [rsp]; mov rdi, r12; call rcx;
0x0003d798: and al, 8; mov rdx, r14; mov rsi, r13; add r15, [rsp]; mov rdi, r12; call rcx;
0x0003d799: or [rcx+rcx*4-0xe], cl; mov rsi, r13; add r15, [rsp]; mov rdi, r12; call rcx;
0x0003d79a: mov rdx, r14; mov rsi, r13; add r15, [rsp]; mov rdi, r12; call rcx;
0x0003d79b: mov edx, esi; mov rsi, r13; add r15, [rsp]; mov rdi, r12; call rcx;
0x0003d79d: mov rsi, r13; add r15, [rsp]; mov rdi, r12; call rcx;
0x0003d79e: mov esi, ebp; add r15, [rsp]; mov rdi, r12; call rcx;
0x0003d79f: out dx, al; add r15, [rsp]; mov rdi, r12; call rcx;
0x0003d7a0: add r15, [rsp]; mov rdi, r12; call rcx;
0x0003d7a1: add edi, [rsp]; mov rdi, r12; call rcx;
0x0003d7a2: cmp al, 0x24; mov rdi, r12; call rcx;
0x0003d7a3: and al, 0x4c; mov edi, esp; call rcx;
0x0003dc27: add [rbx+rcx*4+0x63], cl; or [rax-0x7d], cl; ret;
0x0003de13: test al, bl; add [rax], al; add [rbx+rcx*4+0x7b], cl; or [rax-0x7d], cl; ret;
0x0003de15: add [rax], al; add [rbx+rcx*4+0x7b], cl; or [rax-0x7d], cl; ret;
0x0003de17: add [rbx+rcx*4+0x7b], cl; or [rax-0x7d], cl; ret;
0x0003e043: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x182a6b]; syscall;
0x0003e04d: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x182a6b; syscall;
0x0003e053: add [rax], al; add [rax-0x73], cl; cmp eax, 0x182a6b; syscall;
0x0003e055: add [rax-0x73], cl; cmp eax, 0x182a6b; syscall;
0x0003e058: cmp eax, 0x182a6b; syscall;
0x0003e0c9: mov eax, 0xfe7249e8; dec dword ptr [rcx+rcx*4+0x65]; mov eax, 0xfffdd1e9; jmp qword ptr [rbx+rcx*4+4];
0x0003e0ce: dec dword ptr [rcx+rcx*4+0x65]; mov eax, 0xfffdd1e9; jmp qword ptr [rbx+rcx*4+4];
0x0003e0d1: mov eax, 0xfffdd1e9; jmp qword ptr [rbx+rcx*4+4];
0x0003e0d2: mov eax, 0xfffdd1e9; jmp qword ptr [rbx+rcx*4+4];
0x0003e112: add [rbp+0x31], al; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x18299c]; syscall;
0x0003e11c: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x18299c; syscall;
0x0003e122: add [rax], al; add [rax-0x73], cl; cmp eax, 0x18299c; syscall;
0x0003e124: add [rax-0x73], cl; cmp eax, 0x18299c; syscall;
0x0003e127: cmp eax, 0x18299c; syscall;
0x0003e177: mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; pop rbp; pop r12; pop r13; ret;
0x0003e178: mov dword ptr [rax], 0x16; mov eax, 0xffffffff; pop rbp; pop r12; pop r13; ret;
0x0003e2af: mov eax, [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x1827ff]; syscall;
0x0003e2b9: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x1827ff; syscall;
0x0003e2bf: add [rax], al; add [rax-0x73], cl; cmp eax, 0x1827ff; syscall;
0x0003e2c1: add [rax-0x73], cl; cmp eax, 0x1827ff; syscall;
0x0003e2c4: cmp eax, 0x1827ff; syscall;
0x0003e2c5: jmp qword ptr [rdi];
0x0003e337: sub [rbx+0x1827892d], al; add [rcx], al; xor eax, eax; pop rbx; ret;
0x0003e338: sub dword ptr [rip+0x182789], 1; xor eax, eax; pop rbx; ret;
0x0003e33d: add [rcx], al; xor eax, eax; pop rbx; ret;
0x0003e36c: rol byte ptr [rbp+0x31], cl; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x182742]; syscall;
0x0003e36d: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x182a6b]; syscall;
0x0003e36e: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x182a6b]; syscall;
0x0003e36f: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x182a6b]; syscall;
0x0003e370: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x182a6b]; syscall;
0x0003e371: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x182a6b]; syscall;
0x0003e372: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x182a6b]; syscall;
0x0003e373: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x182a6b]; syscall;
0x0003e374: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x182a6b]; syscall;
0x0003e375: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x182a6b]; syscall;
0x0003e376: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x182742; syscall;
0x0003e377: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0x182a6b]; syscall;
0x0003e378: add [rax], al; mov eax, 0xca; lea rdi, [rip+0x182a6b]; syscall;
0x0003e379: add [rax+0xca], bh; lea rdi, [rip+0x182a6b]; syscall;
0x0003e37a: mov eax, 0xca; lea rdi, [rip+0x182a6b]; syscall;
0x0003e37c: add [rax], al; add [rax-0x73], cl; cmp eax, 0x182742; syscall;
0x0003e37d: add [rax], al; lea rdi, [rip+0x182a6b]; syscall;
0x0003e37e: add [rax-0x73], cl; cmp eax, 0x182742; syscall;
0x0003e37f: lea rdi, [rip+0x182a6b]; syscall;
0x0003e380: lea edi, [rip+0x182a6b]; syscall;
0x0003e381: cmp eax, 0x182742; syscall;
0x0003e3ae: imul eax, [rax+rax], 0xffff57e9; jmp qword ptr [rsi+0x2e];
0x0003e3c6: add [rbx+0x75c08500], cl; or ebp, ecx; mov esi, 0x66fffff7; nop [rax+rax]; xor eax, eax; ret;
0x0003e3c8: add [rbp-0x16f48a40], al; mov esi, 0x66fffff7; nop [rax+rax]; xor eax, eax; ret;
0x0003e3ca: shl byte ptr [rbp+0xb], 0xe9; mov esi, 0x66fffff7; nop [rax+rax]; xor eax, eax; ret;
0x0003e3cc: or ebp, ecx; mov esi, 0x66fffff7; nop [rax+rax]; xor eax, eax; ret;
0x0003e3ce: mov esi, 0x66fffff7; nop [rax+rax]; xor eax, eax; ret;
0x0003e4ba: mov rdi, [rax+0x20]; mov qword ptr [rax+0x10], 0; mov esi, ebp; ror rdx, 0x11; xor rdx, fs:[0x30]; call rdx;
0x0003e4bb: mov edi, [rax+0x20]; mov qword ptr [rax+0x10], 0; mov esi, ebp; ror rdx, 0x11; xor rdx, fs:[0x30]; call rdx;
0x0003e4be: mov qword ptr [rax+0x10], 0; mov esi, ebp; ror rdx, 0x11; xor rdx, fs:[0x30]; call rdx;
0x0003e4bf: mov dword ptr [rax+0x10], 0; mov esi, ebp; ror rdx, 0x11; xor rdx, fs:[0x30]; call rdx;
0x0003e4c2: add [rax], al; add [rax], al; mov esi, ebp; ror rdx, 0x11; xor rdx, fs:[0x30]; call rdx;
0x0003e4c4: add [rax], al; mov esi, ebp; ror rdx, 0x11; xor rdx, fs:[0x30]; call rdx;
0x0003e4c5: add [rcx-0x353eb712], cl; adc [rax+rcx*2+0x33], esp; adc al, 0x25; xor [rax], al; add [rax], al; call rdx;
0x0003e4c6: mov esi, ebp; ror rdx, 0x11; xor rdx, fs:[0x30]; call rdx;
0x0003e4c7: out dx, al; ror rdx, 0x11; xor rdx, fs:[0x30]; call rdx;
0x0003e4dc: nop [rax]; mov rax, [rax+0x18]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0003e4df: add [rax-0x75], cl; sbb [rax-0x3f], cl; enter 0x6411, 0x48; xor eax, [0x30]; call rax;
0x0003e4e0: mov rax, [rax+0x18]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0003e4e1: mov eax, [rax+0x18]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0003e4e3: sbb [rax-0x3f], cl; enter 0x6411, 0x48; xor eax, [0x30]; call rax;
0x0003e500: mov rdx, [rax+0x18]; mov rsi, [rax+0x20]; mov edi, ebp; ror rdx, 0x11; xor rdx, fs:[0x30]; call rdx;
0x0003e501: mov edx, [rax+0x18]; mov rsi, [rax+0x20]; mov edi, ebp; ror rdx, 0x11; xor rdx, fs:[0x30]; call rdx;
0x0003e504: mov rsi, [rax+0x20]; mov edi, ebp; ror rdx, 0x11; xor rdx, fs:[0x30]; call rdx;
0x0003e505: mov esi, [rax+0x20]; mov edi, ebp; ror rdx, 0x11; xor rdx, fs:[0x30]; call rdx;
0x0003e507: and [rcx-0x353eb711], cl; adc [rax+rcx*2+0x33], esp; adc al, 0x25; xor [rax], al; add [rax], al; call rdx;
0x0003e508: mov edi, ebp; ror rdx, 0x11; xor rdx, fs:[0x30]; call rdx;
0x0003e509: out dx, eax; ror rdx, 0x11; xor rdx, fs:[0x30]; call rdx;
0x0003e50a: ror rdx, 0x11; xor rdx, fs:[0x30]; call rdx;
0x0003e50b: ror edx, 0x11; xor rdx, fs:[0x30]; call rdx;
0x0003e50d: adc [rax+rcx*2+0x33], esp; adc al, 0x25; xor [rax], al; add [rax], al; call rdx;
0x0003e50e: xor rdx, fs:[0x30]; call rdx;
0x0003e50f: xor rdx, [0x30]; call rdx;
0x0003e510: xor edx, [0x30]; call rdx;
0x0003e511: adc al, 0x25; xor [rax], al; add [rax], al; call rdx;
0x0003e512: and eax, 0x30; call rdx;
0x0003e513: xor [rax], al; add [rax], al; call rdx;
0x0003e515: add [rax], al; call rdx;
0x0003e5cd: nop [rax]; call qword ptr [rbx];
0x0003e63f: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov rdi, r14; mov eax, 0xca; syscall;
0x0003e640: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov rdi, r14; mov eax, 0xca; syscall;
0x0003e641: xor edx, edx; mov edx, 1; mov esi, 0x81; mov rdi, r14; mov eax, 0xca; syscall;
0x0003e642: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov rdi, r14; mov eax, 0xca; syscall;
0x0003e643: mov edx, 1; mov esi, 0x81; mov rdi, r14; mov eax, 0xca; syscall;
0x0003e644: add [rax], eax; add [rax], al; mov esi, 0x81; mov rdi, r14; mov eax, 0xca; syscall;
0x0003e645: add [rax], al; add [rsi+0x81], bh; mov rdi, r14; mov eax, 0xca; syscall;
0x0003e646: add [rax], al; mov esi, 0x81; mov rdi, r14; mov eax, 0xca; syscall;
0x0003e647: add [rsi+0x81], bh; mov rdi, r14; mov eax, 0xca; syscall;
0x0003e648: mov esi, 0x81; mov rdi, r14; mov eax, 0xca; syscall;
0x0003e649: add dword ptr [rax], 0x894c0000; idiv dword ptr [rax+0xca]; syscall;
0x0003e64a: add [rax], al; add [rcx+rcx*4-9], cl; mov eax, 0xca; syscall;
0x0003e64b: add [rax], al; mov rdi, r14; mov eax, 0xca; syscall;
0x0003e64c: add [rcx+rcx*4-9], cl; mov eax, 0xca; syscall;
0x0003e64d: mov rdi, r14; mov eax, 0xca; syscall;
0x0003e64e: mov edi, esi; mov eax, 0xca; syscall;
0x0003e64f: idiv dword ptr [rax+0xca]; syscall;
0x0003e6f1: sub dword ptr [r12], 1; pop rbx; mov eax, r8d; pop rbp; pop r12; ret;
0x0003e6f2: sub dword ptr [r12], 1; pop rbx; mov eax, r8d; pop rbp; pop r12; ret;
0x0003e6f3: sub dword ptr [rsp], 1; pop rbx; mov eax, r8d; pop rbp; pop r12; ret;
0x0003e6f4: sub al, 0x24; add [rbx+0x44], ebx; mov eax, eax; pop rbp; pop r12; ret;
0x0003e6f5: and al, 1; pop rbx; mov eax, r8d; pop rbp; pop r12; ret;
0x0003e838: add [rcx+rcx*4-0x40], cl; add qword ptr [rip+0x18229c], 1; add rsp, 8; pop rbx; pop rbp; ret;
0x0003e839: mov rax, r8; add qword ptr [rip+0x18229c], 1; add rsp, 8; pop rbx; pop rbp; ret;
0x0003e83a: mov eax, eax; add qword ptr [rip+0x18229c], 1; add rsp, 8; pop rbx; pop rbp; ret;
0x0003e83c: add qword ptr [rip+0x18229c], 1; add rsp, 8; pop rbx; pop rbp; ret;
0x0003e83d: add dword ptr [rip+0x18229c], 1; add rsp, 8; pop rbx; pop rbp; ret;
0x0003e840: and bl, [rax]; add [rcx], al; add rsp, 8; pop rbx; pop rbp; ret;
0x0003e895: mov bh, 0x14; add al, ch; sbb dword ptr [rbp-1], 0xffffffff; xor r8d, r8d; mov rax, r8; ret;
0x0003e897: add al, ch; sbb dword ptr [rbp-1], 0xffffffff; xor r8d, r8d; mov rax, r8; ret;
0x0003e899: sbb dword ptr [rbp-1], 0xffffffff; xor r8d, r8d; mov rax, r8; ret;
0x0003e8a4: add rsp, 8; xor r8d, r8d; mov rax, r8; pop rbx; pop rbp; ret;
0x0003e8a5: add esp, 8; xor r8d, r8d; mov rax, r8; pop rbx; pop rbp; ret;
0x0003e8a7: or [rbp+0x31], al; ror byte ptr [rcx+rcx*4-0x40], 0x5b; pop rbp; ret;
0x0003e8a8: xor r8d, r8d; mov rax, r8; pop rbx; pop rbp; ret;
0x0003e8a9: xor eax, eax; mov rax, r8; pop rbx; pop rbp; ret;
0x0003e8aa: ror byte ptr [rcx+rcx*4-0x40], 0x5b; pop rbp; ret;
0x0003eab7: add [rax], al; sub dword ptr [r13], 1; xor esi, esi; mov rdi, r9; call r8;
0x0003eab8: add [rcx-0x7d], al; insd [rdi], dx; add [rcx], al; xor esi, esi; mov rdi, r9; call r8;
0x0003eab9: sub dword ptr [r13], 1; xor esi, esi; mov rdi, r9; call r8;
0x0003eaba: sub dword ptr [rbp], 1; xor esi, esi; mov rdi, r9; call r8;
0x0003eabb: insd [rdi], dx; add [rcx], al; xor esi, esi; mov rdi, r9; call r8;
0x0003eabc: add [rcx], al; xor esi, esi; mov rdi, r9; call r8;
0x0003eabd: add [rcx], esi; test byte ptr [rcx+rcx*4-0x31], 0x41; call rax;
0x0003eabe: xor esi, esi; mov rdi, r9; call r8;
0x0003eabf: test byte ptr [rcx+rcx*4-0x31], 0x41; call rax;
0x0003eac0: mov rdi, r9; call r8;
0x0003eac1: mov edi, ecx; call r8;
0x0003eb49: and [rax+0x39], cl; ret 0x1577;
0x0003eb4c: ret 0x1577;
0x0003eb5e: and [rax+0x39], cl; ret 0xeb76;
0x0003eb61: ret 0xeb76;
0x0003ec08: add [rax], al; add [rdi], cl; add eax, 0xffff78e9; jmp qword ptr [rsi+0xf];
0x0003ec0a: add [rdi], cl; add eax, 0xffff78e9; jmp qword ptr [rsi+0xf];
0x0003ec0c: add eax, 0xffff78e9; jmp qword ptr [rsi+0xf];
0x0003ecae: dec dword ptr [rax-0x77]; sub [rax-0x77], cl; ret;
0x0003ecc0: mov rax, [rip+0x17f099]; lea rdi, [rbp+0x908]; mov rdx, fs:[rax]; mov [rbx+0x18], rdx; mov fs:[rax], rbx; call qword ptr [rbp+0xf08];
0x0003ecc1: mov eax, [rip+0x17f099]; lea rdi, [rbp+0x908]; mov rdx, fs:[rax]; mov [rbx+0x18], rdx; mov fs:[rax], rbx; call qword ptr [rbp+0xf08];
0x0003ecc2: add eax, 0x17f099; lea rdi, [rbp+0x908]; mov rdx, fs:[rax]; mov [rbx+0x18], rdx; mov fs:[rax], rbx; call qword ptr [rbp+0xf08];
0x0003ecc6: add [rax-0x73], cl; mov ebp, 0x908; mov rdx, fs:[rax]; mov [rbx+0x18], rdx; mov fs:[rax], rbx; call qword ptr [rbp+0xf08];
0x0003ecc7: lea rdi, [rbp+0x908]; mov rdx, fs:[rax]; mov [rbx+0x18], rdx; mov fs:[rax], rbx; call qword ptr [rbp+0xf08];
0x0003ecc8: lea edi, [rbp+0x908]; mov rdx, fs:[rax]; mov [rbx+0x18], rdx; mov fs:[rax], rbx; call qword ptr [rbp+0xf08];
0x0003ecc9: mov ebp, 0x908; mov rdx, fs:[rax]; mov [rbx+0x18], rdx; mov fs:[rax], rbx; call qword ptr [rbp+0xf08];
0x0003ecca: or [rcx], cl; add [rax], al; mov rdx, fs:[rax]; mov [rbx+0x18], rdx; mov fs:[rax], rbx; call qword ptr [rbp+0xf08];
0x0003eccc: add [rax], al; mov rdx, fs:[rax]; mov [rbx+0x18], rdx; mov fs:[rax], rbx; call qword ptr [rbp+0xf08];
0x0003ecce: mov rdx, fs:[rax]; mov [rbx+0x18], rdx; mov fs:[rax], rbx; call qword ptr [rbp+0xf08];
0x0003eccf: mov rdx, [rax]; mov [rbx+0x18], rdx; mov fs:[rax], rbx; call qword ptr [rbp+0xf08];
0x0003ecd0: mov edx, [rax]; mov [rbx+0x18], rdx; mov fs:[rax], rbx; call qword ptr [rbp+0xf08];
0x0003ecd2: mov [rbx+0x18], rdx; mov fs:[rax], rbx; call qword ptr [rbp+0xf08];
0x0003ecd3: mov [rbx+0x18], edx; mov fs:[rax], rbx; call qword ptr [rbp+0xf08];
0x0003ecd6: mov fs:[rax], rbx; call qword ptr [rbp+0xf08];
0x0003ecd7: mov [rax], rbx; call qword ptr [rbp+0xf08];
0x0003ecd8: mov [rax], ebx; call qword ptr [rbp+0xf08];
0x0003ecf0: and al, 0xf0; add qword ptr [rax+0x460], 1; lea rdi, [rbp+0x908]; call qword ptr [rbp+0xf10];
0x0003ecf2: add qword ptr [rax+0x460], 1; lea rdi, [rbp+0x908]; call qword ptr [rbp+0xf10];
0x0003ecf3: add dword ptr [rax+0x460], 1; lea rdi, [rbp+0x908]; call qword ptr [rbp+0xf10];
0x0003ecf4: and byte ptr [rax+4], 0; add [rcx], al; lea rdi, [rbp+0x908]; call qword ptr [rbp+0xf10];
0x0003ecf6: add al, 0; add [rcx], al; lea rdi, [rbp+0x908]; call qword ptr [rbp+0xf10];
0x0003ecf7: add [rax], al; add [rax-0x73], ecx; mov ebp, 0x908; call qword ptr [rbp+0xf10];
0x0003ecf8: add [rcx], al; lea rdi, [rbp+0x908]; call qword ptr [rbp+0xf10];
0x0003ecf9: add [rax-0x73], ecx; mov ebp, 0x908; call qword ptr [rbp+0xf10];
0x0003ecfa: lea rdi, [rbp+0x908]; call qword ptr [rbp+0xf10];
0x0003ecfb: lea edi, [rbp+0x908]; call qword ptr [rbp+0xf10];
0x0003ecfc: mov ebp, 0x908; call qword ptr [rbp+0xf10];
0x0003ecfd: or [rcx], cl; add [rax], al; call qword ptr [rbp+0xf10];
0x0003ecff: add [rax], al; call qword ptr [rbp+0xf10];
0x0003ed74: mov rax, [rbp]; ror rax, 0x11; xor rax, fs:[0x30]; mov fs:[rbx], rdx; mov rdi, [rbp+8]; call rax;
0x0003ed75: mov eax, [rbp]; ror rax, 0x11; xor rax, fs:[0x30]; mov fs:[rbx], rdx; mov rdi, [rbp+8]; call rax;
0x0003ed76: add [r8-0x3f], r9b; enter 0x6411, 0x48; xor eax, [0x30]; mov fs:[rbx], rdx; mov rdi, [rbp+8]; call rax;
0x0003ed77: add [rax-0x3f], cl; enter 0x6411, 0x48; xor eax, [0x30]; mov fs:[rbx], rdx; mov rdi, [rbp+8]; call rax;
0x0003ed78: ror rax, 0x11; xor rax, fs:[0x30]; mov fs:[rbx], rdx; mov rdi, [rbp+8]; call rax;
0x0003ed79: ror eax, 0x11; xor rax, fs:[0x30]; mov fs:[rbx], rdx; mov rdi, [rbp+8]; call rax;
0x0003ed7a: enter 0x6411, 0x48; xor eax, [0x30]; mov fs:[rbx], rdx; mov rdi, [rbp+8]; call rax;
0x0003ed7c: xor rax, fs:[0x30]; mov fs:[rbx], rdx; mov rdi, [rbp+8]; call rax;
0x0003ed7d: xor rax, [0x30]; mov fs:[rbx], rdx; mov rdi, [rbp+8]; call rax;
0x0003ed7e: xor eax, [0x30]; mov fs:[rbx], rdx; mov rdi, [rbp+8]; call rax;
0x0003ed7f: add al, 0x25; xor [rax], al; add [rax], al; mov fs:[rbx], rdx; mov rdi, [rbp+8]; call rax;
0x0003ed80: and eax, 0x30; mov fs:[rbx], rdx; mov rdi, [rbp+8]; call rax;
0x0003ed81: xor [rax], al; add [rax], al; mov fs:[rbx], rdx; mov rdi, [rbp+8]; call rax;
0x0003ed83: add [rax], al; mov fs:[rbx], rdx; mov rdi, [rbp+8]; call rax;
0x0003ed85: mov fs:[rbx], rdx; mov rdi, [rbp+8]; call rax;
0x0003ed86: mov [rbx], rdx; mov rdi, [rbp+8]; call rax;
0x0003ed87: mov [rbx], edx; mov rdi, [rbp+8]; call rax;
0x0003ed89: mov rdi, [rbp+8]; call rax;
0x0003ed8a: mov edi, [rbp+8]; call rax;
0x0003edbd: add [rsi-0x70], ah; mov eax, edi; cdq; xor eax, edx; sub eax, edx; ret;
0x0003edbe: xchg ax, ax; mov eax, edi; cdq; xor eax, edx; sub eax, edx; ret;
0x0003edbf: nop; mov eax, edi; cdq; xor eax, edx; sub eax, edx; ret;
0x0003edc0: mov eax, edi; cdq; xor eax, edx; sub eax, edx; ret;
0x0003edc1: clc; cdq; xor eax, edx; sub eax, edx; ret;
0x0003edc2: cdq; xor eax, edx; sub eax, edx; ret;
0x0003edc3: xor eax, edx; sub eax, edx; ret;
0x0003edc8: nop [rax+rax]; mov rax, rdi; cqo; xor rax, rdx; sub rax, rdx; ret;
0x0003edce: add [rax], al; mov rax, rdi; cqo; xor rax, rdx; sub rax, rdx; ret;
0x0003eddc: nop [rax]; mov rax, rdi; cqo; xor rax, rdx; sub rax, rdx; ret;
0x0003eddf: add [rax-0x77], cl; clc; cqo; xor rax, rdx; sub rax, rdx; ret;
0x0003ede0: mov rax, rdi; cqo; xor rax, rdx; sub rax, rdx; ret;
0x0003ede1: mov eax, edi; cqo; xor rax, rdx; sub rax, rdx; ret;
0x0003ede2: clc; cqo; xor rax, rdx; sub rax, rdx; ret;
0x0003ede3: cqo; xor rax, rdx; sub rax, rdx; ret;
0x0003ede4: cdq; xor rax, rdx; sub rax, rdx; ret;
0x0003ede5: xor rax, rdx; sub rax, rdx; ret;
0x0003ede6: xor eax, edx; sub rax, rdx; ret;
0x0003edef: add [rcx-0x1086608], cl; shl rdx, 0x20; or rax, rdx; ret;
0x0003edf0: mov eax, edi; cdq; idiv esi; shl rdx, 0x20; or rax, rdx; ret;
0x0003edf1: clc; cdq; idiv esi; shl rdx, 0x20; or rax, rdx; ret;
0x0003edf2: cdq; idiv esi; shl rdx, 0x20; or rax, rdx; ret;
0x0003edf3: idiv esi; shl rdx, 0x20; or rax, rdx; ret;
0x0003edf5: shl rdx, 0x20; or rax, rdx; ret;
0x0003edf6: shl edx, 0x20; or rax, rdx; ret;
0x0003edf9: or rax, rdx; ret;
0x0003edfb: rol bl, 1; nop [rax]; mov rax, rdi; cqo; idiv rsi; ret;
0x0003edfd: nop [rax]; mov rax, rdi; cqo; idiv rsi; ret;
0x0003ee07: inc bl; nop [rax]; mov rax, rdi; cqo; idiv rsi; ret;
0x0003ee09: nop [rax]; mov rax, rdi; cqo; idiv rsi; ret;
0x0003ee0b: add byte ptr [rax], 0; add [rax], al; mov rax, rdi; cqo; idiv rsi; ret;
0x0003ee0c: add [rax], al; add [rax], al; mov rax, rdi; cqo; idiv rsi; ret;
0x0003ee0d: add [rax], al; add [rax-0x77], cl; clc; cqo; idiv rsi; ret;
0x0003ee0e: add [rax], al; mov rax, rdi; cqo; idiv rsi; ret;
0x0003ee0f: add [rax-0x77], cl; clc; cqo; idiv rsi; ret;
0x0003ee10: mov rax, rdi; cqo; idiv rsi; ret;
0x0003ee11: mov eax, edi; cqo; idiv rsi; ret;
0x0003ee12: clc; cqo; idiv rsi; ret;
0x0003ee13: cqo; idiv rsi; ret;
0x0003ee14: cdq; idiv rsi; ret;
0x0003ee15: idiv rsi; ret;
0x0003ee16: idiv esi; ret;
0x0003ee23: push qword ptr [rdx+rdi+0x31]; rol byte ptr [rax+0x375003f], 0x5b; ret;
0x0003ee25: cmp dh, [rcx]; rol byte ptr [rax+0x375003f], 0x5b; ret;
0x0003ee27: rol byte ptr [rax+0x375003f], 0x5b; ret;
0x0003ee2a: add [rbp+3], dh; pop rbx; ret;
0x0003ee77: mov qword ptr [rip+0x1824ae], 0; mov rax, [rax]; pop rbx; mov eax, [rax+0x58]; ret;
0x0003ee78: mov dword ptr [rip+0x1824ae], 0; mov rax, [rax]; pop rbx; mov eax, [rax+0x58]; ret;
0x0003ef22: mov dword ptr [rdi], 0; pop rbx; ret;
0x0003ef3b: add [rdx-1], bh; pop rbx; test eax, eax; cmovs eax, edx; ret;
0x0003ef3c: mov edx, 0xffffffff; pop rbx; test eax, eax; cmovs eax, edx; ret;
0x0003ef40: call far fword ptr [rbx-0x7b];
0x0003ef41: pop rbx; test eax, eax; cmovs eax, edx; ret;
0x0003ef42: test eax, eax; cmovs eax, edx; ret;
0x0003ef43: ror byte ptr [rdi], 0x48; ret 0xfc3;
0x0003ef67: mov qword ptr [rip+0x1823c6], 0; mov rax, [rax]; pop rbx; mov eax, [rax+0x58]; ret;
0x0003ef68: mov dword ptr [rip+0x1823c6], 0; mov rax, [rax]; pop rbx; mov eax, [rax+0x58]; ret;
0x0003ef6d: add [rax], al; add [rax], al; add [rax-0x75], cl; add [rbx-0x75], bl; pop rax; ret;
0x0003ef6e: add [rax], al; add [rax], al; mov rax, [rax]; pop rbx; mov eax, [rax+0x58]; ret;
0x0003ef6f: add [rax], al; add [rax-0x75], cl; add [rbx-0x75], bl; pop rax; ret;
0x0003ef70: add [rax], al; mov rax, [rax]; pop rbx; mov eax, [rax+0x58]; ret;
0x0003ef71: add [rax-0x75], cl; add [rbx-0x75], bl; pop rax; ret;
0x0003ef72: mov rax, [rax]; pop rbx; mov eax, [rax+0x58]; ret;
0x0003ef73: mov eax, [rax]; pop rbx; mov eax, [rax+0x58]; ret;
0x0003ef74: add [rbx-0x75], bl; pop rax; ret;
0x0003ef75: pop rbx; mov eax, [rax+0x58]; ret;
0x0003f028: sub [r8-0x7b], cl; shl byte ptr [rcx+rbx+0x48], 0x8b; adc [rbx+0x48], bl; mov dword ptr [rip+0x182301], 0; mov eax, [rax+0x58]; ret;
0x0003f029: sub [rax-0x7b], cl; shl byte ptr [rcx+rbx+0x48], 0x8b; adc [rbx+0x48], bl; mov dword ptr [rip+0x182301], 0; mov eax, [rax+0x58]; ret;
0x0003f02c: shl byte ptr [rcx+rbx+0x48], 0x8b; adc [rbx+0x48], bl; mov dword ptr [rip+0x182301], 0; mov eax, [rax+0x58]; ret;
0x0003f02e: sbb [rax-0x75], ecx; adc [rbx+0x48], bl; mov dword ptr [rip+0x182301], 0; mov eax, [rax+0x58]; ret;
0x0003f02f: mov rax, [rax+0x10]; pop rbx; mov qword ptr [rip+0x182301], 0; mov eax, [rax+0x58]; ret;
0x0003f030: mov eax, [rax+0x10]; pop rbx; mov qword ptr [rip+0x182301], 0; mov eax, [rax+0x58]; ret;
0x0003f032: adc [rbx+0x48], bl; mov dword ptr [rip+0x182301], 0; mov eax, [rax+0x58]; ret;
0x0003f033: pop rbx; mov qword ptr [rip+0x182301], 0; mov eax, [rax+0x58]; ret;
0x0003f034: mov qword ptr [rip+0x182301], 0; mov eax, [rax+0x58]; ret;
0x0003f035: mov dword ptr [rip+0x182301], 0; mov eax, [rax+0x58]; ret;
0x0003f036: add eax, 0x182301; add [rax], al; add [rax], al; mov eax, [rax+0x58]; ret;
0x0003f037: add [rbx], esp; sbb [rax], al; add [rax], al; add [rax], al; mov eax, [rax+0x58]; ret;
0x0003f039: sbb [rax], al; add [rax], al; add [rax], al; mov eax, [rax+0x58]; ret;
0x0003f03b: add [rax], al; add [rax], al; mov eax, [rax+0x58]; ret;
0x0003f03d: add [rax], al; mov eax, [rax+0x58]; ret;
0x0003f0a4: sub eax, [rbx+0x18229c2d]; add [rcx], al; pop rbp; ret;
0x0003f0a5: sub dword ptr [rip+0x18229c], 1; pop rbp; ret;
0x0003f0a7: pushfq; and bl, [rax]; add [rcx], al; pop rbp; ret;
0x0003f0a8: and bl, [rax]; add [rcx], al; pop rbp; ret;
0x0003f0e4: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x182252]; syscall; pop rbp; ret;
0x0003f0e5: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x182252]; syscall; pop rbp; ret;
0x0003f0e6: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x182252; syscall;
0x0003f0e7: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0x182252]; syscall; pop rbp; ret;
0x0003f0e8: add [rax], al; mov eax, 0xca; lea rdi, [rip+0x182252]; syscall; pop rbp; ret;
0x0003f0e9: add [rax+0xca], bh; lea rdi, [rip+0x182252]; syscall; pop rbp; ret;
0x0003f0ea: mov eax, 0xca; lea rdi, [rip+0x182252]; syscall; pop rbp; ret;
0x0003f0ec: add [rax], al; add [rax-0x73], cl; cmp eax, 0x182252; syscall;
0x0003f0ec: add [rax], al; add [rax-0x73], cl; cmp eax, 0x182252; syscall; pop rbp; ret;
0x0003f0ed: add [rax], al; lea rdi, [rip+0x182252]; syscall; pop rbp; ret;
0x0003f0ee: add [rax-0x73], cl; cmp eax, 0x182252; syscall;
0x0003f0ee: add [rax-0x73], cl; cmp eax, 0x182252; syscall; pop rbp; ret;
0x0003f0ef: lea rdi, [rip+0x182252]; syscall; pop rbp; ret;
0x0003f0f0: lea edi, [rip+0x182252]; syscall; pop rbp; ret;
0x0003f0f1: cmp eax, 0x182252; syscall; pop rbp; ret;
0x0003f0f1: cmp eax, 0x182252; syscall;
0x0003f0f4: sbb [rax], al; syscall; pop rbp; ret;
0x0003f159: cmove r12, rax; add rsp, 0x18; pop rbp; mov rax, r12; pop r12; ret;
0x0003f15a: cmove esp, eax; add rsp, 0x18; pop rbp; mov rax, r12; pop r12; ret;
0x0003f15d: add rsp, 0x18; pop rbp; mov rax, r12; pop r12; ret;
0x0003f15e: add esp, 0x18; pop rbp; mov rax, r12; pop r12; ret;
0x0003f160: sbb [rbp+0x4c], bl; mov eax, esp; pop r12; ret;
0x0003f1be: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x18217a; syscall;
0x0003f1c4: add [rax], al; add [rax-0x73], cl; cmp eax, 0x18217a; syscall;
0x0003f1c6: add [rax-0x73], cl; cmp eax, 0x18217a; syscall;
0x0003f1c9: cmp eax, 0x18217a; syscall;
0x0003f1cb: and [rax], ebx; add [rdi], cl; add eax, 0xffff7be9; jmp qword ptr [rsi+0x66];
0x0003f1cd: add [rdi], cl; add eax, 0xffff7be9; jmp qword ptr [rsi+0x66];
0x0003f1cf: add eax, 0xffff7be9; jmp qword ptr [rsi+0x66];
0x0003f233: sub dword ptr [rip+0x18210e], 1; add rsp, 8; mov rax, r8; pop rbx; pop rbp; ret;
0x0003f238: add [rcx], al; add rsp, 8; mov rax, r8; pop rbx; pop rbp; ret;
0x0003f286: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x1820b2; syscall;
0x0003f28c: add [rax], al; add [rax-0x73], cl; cmp eax, 0x1820b2; syscall;
0x0003f28e: add [rax-0x73], cl; cmp eax, 0x1820b2; syscall;
0x0003f291: cmp eax, 0x1820b2; syscall;
0x0003f292: mov dl, 0x20; sbb [rax], al; syscall;
0x0003f300: add [rax], al; add [rbp+0x55], dh; add rsp, 0x18; ret;
0x0003f302: add [rbp+0x55], dh; add rsp, 0x18; ret;
0x0003f304: push rbp; add rsp, 0x18; ret;
0x0003f33d: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x182252]; syscall;
0x0003f33e: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x182252]; syscall;
0x0003f33f: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x182252]; syscall;
0x0003f340: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x182252]; syscall;
0x0003f341: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x182252]; syscall;
0x0003f342: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x182252]; syscall;
0x0003f343: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x182252]; syscall;
0x0003f344: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x182252]; syscall;
0x0003f345: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x182252]; syscall;
0x0003f346: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x181ff2; syscall;
0x0003f347: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0x182252]; syscall;
0x0003f348: add [rax], al; mov eax, 0xca; lea rdi, [rip+0x182252]; syscall;
0x0003f349: add [rax+0xca], bh; lea rdi, [rip+0x182252]; syscall;
0x0003f34a: mov eax, 0xca; lea rdi, [rip+0x182252]; syscall;
0x0003f34c: add [rax], al; add [rax-0x73], cl; cmp eax, 0x181ff2; syscall;
0x0003f34d: add [rax], al; lea rdi, [rip+0x182252]; syscall;
0x0003f34e: add [rax-0x73], cl; cmp eax, 0x181ff2; syscall;
0x0003f34f: lea rdi, [rip+0x182252]; syscall;
0x0003f350: lea edi, [rip+0x182252]; syscall;
0x0003f351: cmp eax, 0x181ff2; syscall;
0x0003f354: sbb [rax], al; syscall;
0x0003f3de: jmp qword ptr [rdi+0x1000041];
0x0003f440: or [rax-0x7d], cl; rol byte ptr [rax+rcx*2], 0x83; ret 0x4804;
0x0003f443: rol byte ptr [rax+rcx*2], 0x83; ret 0x4804;
0x0003f45a: push rsi; or [rbx-0x3786fe17], al; xor eax, eax; ret;
0x0003f45b: or [rbx-0x3786fe17], al; xor eax, eax; ret;
0x0003f45e: add [rcx-0x38], edi; xor eax, eax; ret;
0x0003f482: fsubp st(3), st; movsb [rdi], [rsi]; nop [rax]; mov eax, 0xffffffff; ret;
0x0003f484: movsb [rdi], [rsi]; nop [rax]; mov eax, 0xffffffff; ret;
0x0003f4fc: mov dword ptr [r11], 0; xor eax, eax; pop rbx; pop rbp; ret;
0x0003f4fd: mov dword ptr [rbx], 0; xor eax, eax; pop rbx; pop rbp; ret;
0x0003f4ff: add [rax], al; add [rax], al; xor eax, eax; pop rbx; pop rbp; ret;
0x0003f501: add [rax], al; xor eax, eax; pop rbx; pop rbp; ret;
0x0003f57a: add cl, [rbp-0x3cfe7ffc]; xor eax, eax; mov [r11], ebx; pop rbx; pop rbp; ret;
0x0003f57d: add byte ptr [rcx], 0xc3; xor eax, eax; mov [r11], ebx; pop rbx; pop rbp; ret;
0x0003f57e: add ebx, eax; xor eax, eax; mov [r11], ebx; pop rbx; pop rbp; ret;
0x0003f580: xor eax, eax; mov [r11], ebx; pop rbx; pop rbp; ret;
0x0003f581: rol byte ptr [rcx-0x77], 0x1b; pop rbx; pop rbp; ret;
0x0003f582: mov [r11], ebx; pop rbx; pop rbp; ret;
0x0003f583: mov [rbx], ebx; pop rbx; pop rbp; ret;
0x0003f584: sbb ebx, [rbx+0x5d]; ret;
0x0003f59d: mov [rcx], eax; iretd;
0x0003f6a9: mov [rsi], rax; lea rax, [r8+rcx*4]; mov [rsi+0x10], r8; mov [rsi+0x28], rax; xor eax, eax; ret;
0x0003f6aa: mov [rsi], eax; lea rax, [r8+rcx*4]; mov [rsi+0x10], r8; mov [rsi+0x28], rax; xor eax, eax; ret;
0x0003f6ac: lea rax, [r8+rcx*4]; mov [rsi+0x10], r8; mov [rsi+0x28], rax; xor eax, eax; ret;
0x0003f6ad: lea eax, [rax+rcx*4]; mov [rsi+0x10], r8; mov [rsi+0x28], rax; xor eax, eax; ret;
0x0003f6ae: add al, 0x88; mov [rsi+0x10], r8; mov [rsi+0x28], rax; xor eax, eax; ret;
0x0003f6b0: mov [rsi+0x10], r8; mov [rsi+0x28], rax; xor eax, eax; ret;
0x0003f6b1: mov [rsi+0x10], eax; mov [rsi+0x28], rax; xor eax, eax; ret;
0x0003f6b4: mov [rsi+0x28], rax; xor eax, eax; ret;
0x0003f6b5: mov [rsi+0x28], eax; xor eax, eax; ret;
0x0003f6d7: add [rax-0x75], cl; add eax, 0x17e791; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x0003f6da: add eax, 0x17e791; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x0003f711: add [rbx], eax; add cl, [rax-0x7d]; ret 0x4804;
0x0003f713: add cl, [rax-0x7d]; ret 0x4804;
0x0003f72c: xor ecx, [rcx+rcx*4-0x3f]; mov r8, rdx; mov [rdi], r8; xor eax, eax; mov [rdi+8], rcx; ret;
0x0003f72d: mov rcx, r8; mov r8, rdx; mov [rdi], r8; xor eax, eax; mov [rdi+8], rcx; ret;
0x0003f72e: mov ecx, eax; mov r8, rdx; mov [rdi], r8; xor eax, eax; mov [rdi+8], rcx; ret;
0x0003f72f: ror dword ptr [rcx-0x77], 0xd0; mov [rdi], r8; xor eax, eax; mov [rdi+8], rcx; ret;
0x0003f730: mov r8, rdx; mov [rdi], r8; xor eax, eax; mov [rdi+8], rcx; ret;
0x0003f731: mov eax, edx; mov [rdi], r8; xor eax, eax; mov [rdi+8], rcx; ret;
0x0003f732: ror byte ptr [rcx+rcx*4+7], 1; xor eax, eax; mov [rdi+8], rcx; ret;
0x0003f733: mov [rdi], r8; xor eax, eax; mov [rdi+8], rcx; ret;
0x0003f734: mov [rdi], eax; xor eax, eax; mov [rdi+8], rcx; ret;
0x0003f736: xor eax, eax; mov [rdi+8], rcx; ret;
0x0003f738: mov [rdi+8], rcx; ret;
0x0003f740: imul edx, [r8], 0x41c64e6d; add edx, 0x3039; and edx, 0x7fffffff; mov [r8], edx; mov [rsi], edx; ret;
0x0003f741: imul edx, [rax], 0x41c64e6d; add edx, 0x3039; and edx, 0x7fffffff; mov [r8], edx; mov [rsi], edx; ret;
0x0003f746: add r10d, 0x3039; and edx, 0x7fffffff; mov [r8], edx; mov [rsi], edx; ret;
0x0003f747: add edx, 0x3039; and edx, 0x7fffffff; mov [r8], edx; mov [rsi], edx; ret;
0x0003f749: cmp [rax], esi; add [rax], al; and edx, 0x7fffffff; mov [r8], edx; mov [rsi], edx; ret;
0x0003f74b: add [rax], al; and edx, 0x7fffffff; mov [r8], edx; mov [rsi], edx; ret;
0x0003f74d: and edx, 0x7fffffff; mov [r8], edx; mov [rsi], edx; ret;
0x0003f753: mov [r8], edx; mov [rsi], edx; ret;
0x0003f754: mov [rax], edx; mov [rsi], edx; ret;
0x0003f756: mov [rsi], edx; ret;
0x0003f759: nop [rax]; mov r8, rdx; mov [rdi+8], rcx; xor eax, eax; mov [rdi], r8; ret;
0x0003f75e: add [rax], al; mov r8, rdx; mov [rdi+8], rcx; xor eax, eax; mov [rdi], r8; ret;
0x0003f760: mov r8, rdx; mov [rdi+8], rcx; xor eax, eax; mov [rdi], r8; ret;
0x0003f761: mov eax, edx; mov [rdi+8], rcx; xor eax, eax; mov [rdi], r8; ret;
0x0003f763: mov [rdi+8], rcx; xor eax, eax; mov [rdi], r8; ret;
0x0003f764: mov [rdi+8], ecx; xor eax, eax; mov [rdi], r8; ret;
0x0003f767: xor eax, eax; mov [rdi], r8; ret;
0x0003f768: ror byte ptr [rcx+rcx*4+7], 0xc3; nop [rax]; mov rax, [rip+0x17e6f9]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x0003f769: mov [rdi], r8; ret;
0x0003f76a: mov [rdi], eax; ret;
0x0003f76f: add [rax-0x75], cl; add eax, 0x17e6f9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x0003f772: add eax, 0x17e6f9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x0003f7d1: ret 0x3039;
0x0003f7da: shl eax, 0xa; mov [rdi], edx; shr ecx, 0x10; and ecx, 0x3ff; xor eax, ecx; ret;
0x0003f7dc: or cl, [rcx+0x10e9c117]; and ecx, 0x3ff; xor eax, ecx; ret;
0x0003f7dd: mov [rdi], edx; shr ecx, 0x10; and ecx, 0x3ff; xor eax, ecx; ret;
0x0003f7df: shr ecx, 0x10; and ecx, 0x3ff; xor eax, ecx; ret;
0x0003f7e2: and ecx, 0x3ff; xor eax, ecx; ret;
0x0003f7e4: inc dword ptr [rbx]; add [rax], al; xor eax, ecx; ret;
0x0003f7e6: add [rax], al; xor eax, ecx; ret;
0x0003f7e8: xor eax, ecx; ret;
0x0003f9ea: add al, ch; add byte ptr [rcx], 0; add [rax-0x73], cl; add eax, 0x18195f; add rsp, 8; ret;
0x0003f9ec: add byte ptr [rcx], 0; add [rax-0x73], cl; add eax, 0x18195f; add rsp, 8; ret;
0x0003f9ed: add [rax], eax; add [rax-0x73], cl; add eax, 0x18195f; add rsp, 8; ret;
0x0003f9ee: add [rax], al; lea rax, [rip+0x18195f]; add rsp, 8; ret;
0x0003f9ef: add [rax-0x73], cl; add eax, 0x18195f; add rsp, 8; ret;
0x0003f9f0: lea rax, [rip+0x18195f]; add rsp, 8; ret;
0x0003f9f1: lea eax, [rip+0x18195f]; add rsp, 8; ret;
0x0003f9f2: add eax, 0x18195f; add rsp, 8; ret;
0x0003f9f5: sbb [rax], al; add rsp, 8; ret;
0x0003fa6d: sub dl, [rip-0xd3fcf00]; movups [rbx], xmm0; add rsp, 8; pop rbx; pop rbp; ret;
0x0003fa6e: adc eax, 0xf2c03100; movups [rbx], xmm0; add rsp, 8; pop rbx; pop rbp; ret;
0x0003fa70: xor eax, eax; movsd [rbx], xmm0; add rsp, 8; pop rbx; pop rbp; ret;
0x0003fa71: shl dl, 0xf; adc [rbx], eax; add rsp, 8; pop rbx; pop rbp; ret;
0x0003fa72: movsd [rbx], xmm0; add rsp, 8; pop rbx; pop rbp; ret;
0x0003fa73: movups [rbx], xmm0; add rsp, 8; pop rbx; pop rbp; ret;
0x0003fa74: adc [rbx], eax; add rsp, 8; pop rbx; pop rbp; ret;
0x0003fafc: adc [rax], al; add [rax], al; mov eax, 0xffffffff; ret;
0x0003fb24: adc [rax+0x63], ecx; add cl, [r8-0x77]; add [r9], r14b; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret;
0x0003fb27: add cl, [r8-0x77]; add [r9], r14b; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret;
0x0003fb28: add cl, [rax-0x77]; add [r9], r14b; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret;
0x0003fb29: mov [rbp], rax; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret;
0x0003fb2a: mov [rbp], eax; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret;
0x0003fb2b: add [r9], r14b; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret;
0x0003fb2c: add [rcx], dh; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret;
0x0003fb48: mov [rsi], ax; mov rax, 0x5deece66d; mov [rsi+0x10], rax; xor eax, eax; mov dword ptr [rsi+0xc], 0x1000b; ret;
0x0003fb49: mov [rsi], eax; mov rax, 0x5deece66d; mov [rsi+0x10], rax; xor eax, eax; mov dword ptr [rsi+0xc], 0x1000b; ret;
0x0003fb4b: mov rax, 0x5deece66d; mov [rsi+0x10], rax; xor eax, eax; mov dword ptr [rsi+0xc], 0x1000b; ret;
0x0003fb4c: mov eax, 0xdeece66d; add eax, 0x48000000; mov [rsi+0x10], eax; xor eax, eax; mov dword ptr [rsi+0xc], 0x1000b; ret;
0x0003fb4e: out 0xec, al; fiadd st, word ptr [rip+0x48000000]; mov [rsi+0x10], eax; xor eax, eax; mov dword ptr [rsi+0xc], 0x1000b; ret;
0x0003fb4f: in al, dx; fiadd st, word ptr [rip+0x48000000]; mov [rsi+0x10], eax; xor eax, eax; mov dword ptr [rsi+0xc], 0x1000b; ret;
0x0003fb50: fiadd st, word ptr [rip+0x48000000]; mov [rsi+0x10], eax; xor eax, eax; mov dword ptr [rsi+0xc], 0x1000b; ret;
0x0003fb51: add eax, 0x48000000; mov [rsi+0x10], eax; xor eax, eax; mov dword ptr [rsi+0xc], 0x1000b; ret;
0x0003fb53: add [rax], al; mov [rsi+0x10], rax; xor eax, eax; mov dword ptr [rsi+0xc], 0x1000b; ret;
0x0003fb55: mov [rsi+0x10], rax; xor eax, eax; mov dword ptr [rsi+0xc], 0x1000b; ret;
0x0003fb56: mov [rsi+0x10], eax; xor eax, eax; mov dword ptr [rsi+0xc], 0x1000b; ret;
0x0003fb59: xor eax, eax; mov dword ptr [rsi+0xc], 0x1000b; ret;
0x0003fb5b: mov dword ptr [rsi+0xc], 0x1000b; ret;
0x0003fb5e: or eax, [rax]; add [rax], eax; ret;
0x0003fb60: add [rax], eax; ret;
0x0003fb90: mov dword ptr [rsi+0xc], 0x1000b; mov [rsi], ax; mov rax, 0x5deece66d; mov [rsi+0x10], rax; xor eax, eax; ret;
0x0003fb95: add [rax], eax; mov [rsi], ax; mov rax, 0x5deece66d; mov [rsi+0x10], rax; xor eax, eax; ret;
0x0003fb97: mov [rsi], ax; mov rax, 0x5deece66d; mov [rsi+0x10], rax; xor eax, eax; ret;
0x0003fb98: mov [rsi], eax; mov rax, 0x5deece66d; mov [rsi+0x10], rax; xor eax, eax; ret;
0x0003fb9a: mov rax, 0x5deece66d; mov [rsi+0x10], rax; xor eax, eax; ret;
0x0003fb9b: mov eax, 0xdeece66d; add eax, 0x48000000; mov [rsi+0x10], eax; xor eax, eax; ret;
0x0003fb9c: insd [rdi], dx; out 0xec, al; fiadd st, word ptr [rip+0x48000000]; mov [rsi+0x10], eax; xor eax, eax; ret;
0x0003fb9d: out 0xec, al; fiadd st, word ptr [rip+0x48000000]; mov [rsi+0x10], eax; xor eax, eax; ret;
0x0003fb9e: in al, dx; fiadd st, word ptr [rip+0x48000000]; mov [rsi+0x10], eax; xor eax, eax; ret;
0x0003fb9f: fiadd st, word ptr [rip+0x48000000]; mov [rsi+0x10], eax; xor eax, eax; ret;
0x0003fba0: add eax, 0x48000000; mov [rsi+0x10], eax; xor eax, eax; ret;
0x0003fba2: add [rax], al; mov [rsi+0x10], rax; xor eax, eax; ret;
0x0003fba4: mov [rsi+0x10], rax; xor eax, eax; ret;
0x0003fba5: mov [rsi+0x10], eax; xor eax, eax; ret;
0x0003fbd9: movzx eax, word ptr [rdi+0xc]; mov [rsi+0xc], ax; mov eax, 1; mov [rsi+0xe], ax; xor eax, eax; ret;
0x0003fbdc: or al, 0x66; mov [rsi+0xc], eax; mov eax, 1; mov [rsi+0xe], ax; xor eax, eax; ret;
0x0003fbdd: mov [rsi+0xc], ax; mov eax, 1; mov [rsi+0xe], ax; xor eax, eax; ret;
0x0003fbde: mov [rsi+0xc], eax; mov eax, 1; mov [rsi+0xe], ax; xor eax, eax; ret;
0x0003fbe0: or al, 0xb8; add [rax], eax; add [rax], al; mov [rsi+0xe], ax; xor eax, eax; ret;
0x0003fbe1: mov eax, 1; mov [rsi+0xe], ax; xor eax, eax; ret;
0x0003fbe2: add [rax], eax; add [rax], al; mov [rsi+0xe], ax; xor eax, eax; ret;
0x0003fbe4: add [rax], al; mov [rsi+0xe], ax; xor eax, eax; ret;
0x0003fbe6: mov [rsi+0xe], ax; xor eax, eax; ret;
0x0003fbe7: mov [rsi+0xe], eax; xor eax, eax; ret;
0x0003fc1a: ror dword ptr [rax+1], 0xf0; mov [rdi], eax; shr rax, 0x20; mov [rdi+4], ax; xor eax, eax; ret;
0x0003fc1b: add rax, rsi; mov [rdi], eax; shr rax, 0x20; mov [rdi+4], ax; xor eax, eax; ret;
0x0003fc1c: add eax, esi; mov [rdi], eax; shr rax, 0x20; mov [rdi+4], ax; xor eax, eax; ret;
0x0003fc1e: mov [rdi], eax; shr rax, 0x20; mov [rdi+4], ax; xor eax, eax; ret;
0x0003fc20: shr rax, 0x20; mov [rdi+4], ax; xor eax, eax; ret;
0x0003fc21: shr eax, 0x20; mov [rdi+4], ax; xor eax, eax; ret;
0x0003fc24: mov [rdi+4], ax; xor eax, eax; ret;
0x0003fc25: mov [rdi+4], eax; xor eax, eax; ret;
0x0003fc86: add [rbx+0x481c2454], cl; mov esi, [rsp+0x10]; mov r8d, eax; mov rdi, [rsp+8]; mov eax, 0x13e; syscall;
0x0003fc87: mov edx, [rsp+0x1c]; mov rsi, [rsp+0x10]; mov r8d, eax; mov rdi, [rsp+8]; mov eax, 0x13e; syscall;
0x0003fc89: and al, 0x1c; mov rsi, [rsp+0x10]; mov r8d, eax; mov rdi, [rsp+8]; mov eax, 0x13e; syscall;
0x0003fc8a: sbb al, 0x48; mov esi, [rsp+0x10]; mov r8d, eax; mov rdi, [rsp+8]; mov eax, 0x13e; syscall;
0x0003fc8b: mov rsi, [rsp+0x10]; mov r8d, eax; mov rdi, [rsp+8]; mov eax, 0x13e; syscall;
0x0003fc8c: mov esi, [rsp+0x10]; mov r8d, eax; mov rdi, [rsp+8]; mov eax, 0x13e; syscall;
0x0003fc8e: and al, 0x10; mov r8d, eax; mov rdi, [rsp+8]; mov eax, 0x13e; syscall;
0x0003fc8f: adc [rcx-0x77], al; ror byte ptr [rax-0x75], 0x7c; and al, 8; mov eax, 0x13e; syscall;
0x0003fc90: mov r8d, eax; mov rdi, [rsp+8]; mov eax, 0x13e; syscall;
0x0003fc91: mov eax, eax; mov rdi, [rsp+8]; mov eax, 0x13e; syscall;
0x0003fc92: ror byte ptr [rax-0x75], 0x7c; and al, 8; mov eax, 0x13e; syscall;
0x0003fc93: mov rdi, [rsp+8]; mov eax, 0x13e; syscall;
0x0003fc94: mov edi, [rsp+8]; mov eax, 0x13e; syscall;
0x0003fc96: and al, 8; mov eax, 0x13e; syscall;
0x0003fc97: or [rax+0x13e], bh; syscall;
0x0003fc98: mov eax, 0x13e; syscall;
0x0003fcae: or al, ch; sub al, 0x51; add al, 0; mov rax, [rsp+8]; add rsp, 0x28; ret;
0x0003fcb0: sub al, 0x51; add al, 0; mov rax, [rsp+8]; add rsp, 0x28; ret;
0x0003fcb1: push rcx; add al, 0; mov rax, [rsp+8]; add rsp, 0x28; ret;
0x0003fcb2: add al, 0; mov rax, [rsp+8]; add rsp, 0x28; ret;
0x0003fcb3: add [rax-0x75], cl; and al, 8; add rsp, 0x28; ret;
0x0003fcc2: adc eax, 0x17e1a9; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x0003fcc3: test eax, 0xf70017e1; fsub st, dword ptr [rcx+rcx*4+2]; mov rax, 0xffffffffffffffff; ret;
0x0003fd0c: and al, 0x4c; mov esi, eax; xor edx, edx; mov eax, r9d; sub rsi, rdi; syscall;
0x0003fd0d: mov rsi, r8; xor edx, edx; mov eax, r9d; sub rsi, rdi; syscall;
0x0003fd0e: mov esi, eax; xor edx, edx; mov eax, r9d; sub rsi, rdi; syscall;
0x0003fd10: xor edx, edx; mov eax, r9d; sub rsi, rdi; syscall;
0x0003fd11: rol byte ptr [rcx+rcx*4-0x38], cl; sub rsi, rdi; syscall;
0x0003fd12: mov eax, r9d; sub rsi, rdi; syscall;
0x0003fd13: mov eax, ecx; sub rsi, rdi; syscall;
0x0003fd14: enter 0x2948, 0xfe; syscall;
0x0003fd15: sub rsi, rdi; syscall;
0x0003fd16: sub esi, edi; syscall;
0x0003fd41: add [rbx-0x3e8bfb08], al; mov eax, 0xffffffff; ret;
0x0003fd5d: in al, 0x66; nop; mov rax, [rip+0x17e109]; mov dword ptr fs:[rax], 5; mov eax, 0xffffffff; ret;
0x0003fd5e: xchg ax, ax; mov rax, [rip+0x17e109]; mov dword ptr fs:[rax], 5; mov eax, 0xffffffff; ret;
0x0003fd5f: nop; mov rax, [rip+0x17e109]; mov dword ptr fs:[rax], 5; mov eax, 0xffffffff; ret;
0x0003fd60: mov rax, [rip+0x17e109]; mov dword ptr fs:[rax], 5; mov eax, 0xffffffff; ret;
0x0003fd61: mov eax, [rip+0x17e109]; mov dword ptr fs:[rax], 5; mov eax, 0xffffffff; ret;
0x0003fd62: add eax, 0x17e109; mov dword ptr fs:[rax], 5; mov eax, 0xffffffff; ret;
0x0003fd67: mov dword ptr fs:[rax], 5; mov eax, 0xffffffff; ret;
0x0003fd68: mov dword ptr [rax], 5; mov eax, 0xffffffff; ret;
0x00040508: add [rdi], ecx; test [rcx-0x7cffffff], al; jmp qword ptr [rdi+rcx];
0x0004050a: test [rcx-0x7cffffff], al; jmp qword ptr [rdi+rcx];
0x00040789: rcl byte ptr [r15], cl; add [rbx+rcx*4+4], cl; ret 0x8d48;
0x0004078a: rcl byte ptr [rdi], cl; add [rbx+rcx*4+4], cl; ret 0x8d48;
0x0004078c: add [rbx+rcx*4+4], cl; ret 0x8d48;
0x000407b3: adc al, 1; add [rax], al; add [rax-0x7d], cl; ret;
0x00040a4d: adc eax, 0xf489066; mov esi, 0x83480153; ret;
0x00040e7d: out dx, eax; iretd;
0x00040eae: call qword ptr [rax+0x31c88949];
0x00041341: sti; mov al, 0; add [rax-0x7d], cl; ret;
0x00041342: mov al, 0; add [rax-0x7d], cl; ret;
0x000419ee: ror byte ptr [rdi], 0x84; adc al, 0; add [rax-0x80], al; jmp qword ptr [rbp+0xf];
0x00042417: stc; adc [rdi], cl; test al, ch; add eax, [rax]; add [rax-0x48], cl; ret 0xffff;
0x00042418: adc [rdi], cl; test al, ch; add eax, [rax]; add [rax-0x48], cl; ret 0xffff;
0x0004241a: test al, ch; add eax, [rax]; add [rax-0x48], cl; ret 0xffff;
0x0004241c: add eax, [rax]; add [rax-0x48], cl; ret 0xffff;
0x00042813: ror byte ptr [rdi], 0x87; iretd;
0x000428e1: push 0xfffffffffff6c9e9; jmp qword ptr [rsi+0xf];
0x000428e3: leave; idiv bh; jmp qword ptr [rsi+0xf];
0x0004294a: push 0xfffffffffff759e9; dec dword ptr [rax-0x77]; ret 0xf748;
0x0004294c: pop rcx; idiv edi; dec dword ptr [rax-0x77]; ret 0xf748;
0x000429da: ret 0x13ce;
0x00042a1e: push 0xfffffffffa0d8d48; iretd;
0x00042c2d: call qword ptr [rsi-0x74b80000];
0x00043636: jmp far fword ptr [rdx+0x14];
0x000436dd: jmp far fword ptr [rbx+0x3ae80014];
0x00043b41: sti; mov [rax], al; add [rax-0x7d], cl; ret;
0x00043b42: mov [rax], al; add [rax-0x7d], cl; ret;
0x000441f2: adc al, 0; add [rax-0x80], al; jmp qword ptr [rbp+0xf];
0x0004451a: fld st, qword ptr [rcx-0x77]; ret;
0x0004455a: ret 0x13b4;
0x000445c8: in eax, dx; add [rcx-0x77], ecx; fld st, qword ptr [rbp+1]; dec dword ptr [rax-0x77]; ret;
0x000445c9: add [rcx-0x77], ecx; fld st, qword ptr [rbp+1]; dec dword ptr [rax-0x77]; ret;
0x000445cc: fld st, qword ptr [rbp+1]; dec dword ptr [rax-0x77]; ret;
0x0004504d: fisttp qword ptr [rax-0x77], st; ret;
0x00045101: push 0xfffffffffff6b9e9; jmp qword ptr [rsi+0xf];
0x0004516a: push 0xfffffffffff749e9; dec dword ptr [rax-0x77]; ret 0xf748;
0x0004516c: idiv r15; dec dword ptr [rax-0x77]; ret 0xf748;
0x000452eb: ret 0xffec;
0x00045542: xchg edx, eax; ror byte ptr [rax-0x7d], 0xfa; add [rdi], ecx; xchg esp, eax; ret 0x2041;
0x00045543: ror byte ptr [rax-0x7d], 0xfa; add [rdi], ecx; xchg esp, eax; ret 0x2041;
0x00045546: cli; add [rdi], ecx; xchg esp, eax; ret 0x2041;
0x00045547: add [rdi], ecx; xchg esp, eax; ret 0x2041;
0x00045549: xchg esp, eax; ret 0x2041;
0x0004554a: ret 0x2041;
0x0004560e: call qword ptr [rax+0x74c08548];
0x00045f4e: add al, ch; int3; out 0xfe, al; jmp qword ptr [rsi+0x66];
0x00045f50: int3; out 0xfe, al; jmp qword ptr [rsi+0x66];
0x00045f51: out 0xfe, al; jmp qword ptr [rsi+0x66];
0x0004633d: jmp qword ptr [rax];
0x000469f2: adc eax, [rax]; add [rax-0x80], al; jmp qword ptr [rbp+0xf];
0x00046d5a: ret 0x138c;
0x000470a0: ret 0x7489;
0x0004731c: add [rax], al; add [rax-0x77], cl; ret 0xf4d;
0x0004731e: add [rax-0x77], cl; ret 0xf4d;
0x00047321: ret 0xf4d;
0x00047325: ret 0xf929;
0x0004757e: call qword ptr [rax+0x245c394c];
0x00047e37: test al, al; add al, 0; add [rax+0x39], cl; ret;
0x00047e39: add al, 0; add [rax+0x39], cl; ret;
0x000483aa: sbb eax, 0x6ee80014; ret 0xfffe;
0x000483ac: add al, ch; outsb dx, [rsi]; ret 0xfffe;
0x000483ae: outsb dx, [rsi]; ret 0xfffe;
0x000483cb: add al, ch; ret 0xfffe;
0x00048ac1: mov rax, [rip+0x178d18]; lea rdi, [rsp+0x30]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00048ac2: mov eax, [rip+0x178d18]; lea rdi, [rsp+0x30]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00048ac3: add eax, 0x178d18; lea rdi, [rsp+0x30]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00048ac8: lea rdi, [rsp+0x30]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00048ac9: lea edi, [rsp+0x30]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00048acb: and al, 0x30; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00048b47: add rsp, 0x378; pop rbx; pop rbp; pop r12; pop r13; ret;
0x00048b48: add esp, 0x378; pop rbx; pop rbp; pop r12; pop r13; ret;
0x00048b4b: add eax, [rax]; add [rbx+0x5d], bl; pop r12; pop r13; ret;
0x00048b5f: lea rdi, [rsp+0x30]; lea rdx, [rsp+0x10]; lea rsi, [rip+0x160]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00048b60: lea edi, [rsp+0x30]; lea rdx, [rsp+0x10]; lea rsi, [rip+0x160]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00048b62: and al, 0x30; lea rdx, [rsp+0x10]; lea rsi, [rip+0x160]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00048b64: lea rdx, [rsp+0x10]; lea rsi, [rip+0x160]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00048b65: lea edx, [rsp+0x10]; lea rsi, [rip+0x160]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00048b66: push rsp; and al, 0x10; lea rsi, [rip+0x160]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00048b67: and al, 0x10; lea rsi, [rip+0x160]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00048b68: adc [rax-0x73], cl; xor eax, 0x160; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00048b69: lea rsi, [rip+0x160]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00048b6a: lea esi, [rip+0x160]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00048b6b: xor eax, 0x160; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00048b6d: add [rax], eax; add [rax-0x3f], cl; enter 0x6411, 0x48; xor eax, [0x30]; call rax;
0x00048c4a: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x178726; syscall;
0x00048c50: add [rax], al; add [rax-0x73], cl; cmp eax, 0x178726; syscall;
0x00048c52: add [rax-0x73], cl; cmp eax, 0x178726; syscall;
0x00048c55: cmp eax, 0x178726; syscall;
0x00048ca0: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x178726]; syscall;
0x00048caa: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x1786c6; syscall;
0x00048cb0: add [rax], al; add [rax-0x73], cl; cmp eax, 0x1786c6; syscall;
0x00048cb2: add [rax-0x73], cl; cmp eax, 0x1786c6; syscall;
0x00048cb5: cmp eax, 0x1786c6; syscall;
0x00048cdc: adc [rbx+0x4864107f], cl; mov eax, [0x28]; mov [rsp+8], rax; xor eax, eax; mov eax, 0x3e; syscall;
0x00048cdd: mov edi, [rdi+0x10]; mov rax, fs:[0x28]; mov [rsp+8], rax; xor eax, eax; mov eax, 0x3e; syscall;
0x00048ce0: mov rax, fs:[0x28]; mov [rsp+8], rax; xor eax, eax; mov eax, 0x3e; syscall;
0x00048ce1: mov rax, [0x28]; mov [rsp+8], rax; xor eax, eax; mov eax, 0x3e; syscall;
0x00048ce2: mov eax, [0x28]; mov [rsp+8], rax; xor eax, eax; mov eax, 0x3e; syscall;
0x00048ce4: and eax, 0x28; mov [rsp+8], rax; xor eax, eax; mov eax, 0x3e; syscall;
0x00048ce5: sub [rax], al; add [rax], al; mov [rsp+8], rax; xor eax, eax; mov eax, 0x3e; syscall;
0x00048ce6: add [rax], al; add [rax-0x77], cl; and al, 8; xor eax, eax; mov eax, 0x3e; syscall;
0x00048ce7: add [rax], al; mov [rsp+8], rax; xor eax, eax; mov eax, 0x3e; syscall;
0x00048ce8: add [rax-0x77], cl; and al, 8; xor eax, eax; mov eax, 0x3e; syscall;
0x00048ce9: mov [rsp+8], rax; xor eax, eax; mov eax, 0x3e; syscall;
0x00048cea: mov [rsp+8], eax; xor eax, eax; mov eax, 0x3e; syscall;
0x00048cec: and al, 8; xor eax, eax; mov eax, 0x3e; syscall;
0x00048cee: xor eax, eax; mov eax, 0x3e; syscall;
0x00048d03: add eax, 0x178a80; lea rsi, [rsp+4]; mov edi, 1; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00048d04: or byte ptr [rdx-0x72b7ffe9], 0x74; and al, 4; mov edi, 1; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00048d52: add eax, 0x178a31; mov edi, [rsp+4]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00048d53: xor [rdx+0x7c8b0017], ecx; and al, 4; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00048dab: add [rax], al; add [rdi], cl; test [rcx+0x48000000], ecx; add esp, 0x10; pop rbx; ret;
0x00048dad: add [rdi], cl; test [rcx+0x48000000], ecx; add esp, 0x10; pop rbx; ret;
0x00048daf: test [rcx+0x48000000], ecx; add esp, 0x10; pop rbx; ret;
0x00048db0: mov [rax], eax; add [rax], al; add rsp, 0x10; pop rbx; ret;
0x00048db2: add [rax], al; add rsp, 0x10; pop rbx; ret;
0x00048e1c: add dword ptr [rbp+0x31], 0xffffffd2; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x17854a]; syscall;
0x00048e1d: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x178726]; syscall;
0x00048e1e: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x178726]; syscall;
0x00048e1f: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x178726]; syscall;
0x00048e20: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x178726]; syscall;
0x00048e21: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x178726]; syscall;
0x00048e22: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x178726]; syscall;
0x00048e23: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x178726]; syscall;
0x00048e24: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x178726]; syscall;
0x00048e25: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x178726]; syscall;
0x00048e26: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x17854a; syscall;
0x00048e27: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0x178726]; syscall;
0x00048e28: add [rax], al; mov eax, 0xca; lea rdi, [rip+0x178726]; syscall;
0x00048e29: add [rax+0xca], bh; lea rdi, [rip+0x178726]; syscall;
0x00048e2a: mov eax, 0xca; lea rdi, [rip+0x178726]; syscall;
0x00048e2c: add [rax], al; add [rax-0x73], cl; cmp eax, 0x17854a; syscall;
0x00048e2d: add [rax], al; lea rdi, [rip+0x178726]; syscall;
0x00048e2e: add [rax-0x73], cl; cmp eax, 0x17854a; syscall;
0x00048e2f: lea rdi, [rip+0x178726]; syscall;
0x00048e30: lea edi, [rip+0x178726]; syscall;
0x00048e31: cmp eax, 0x17854a; syscall;
0x00048f43: test [rdx], ch; add [rax], eax; add [rbp-0x77], cl; iretd;
0x00048fd1: add [rax-0x7f], ecx; ret;
0x0004907d: rol byte ptr [rcx-0x80], 0x7e; jmp far fword ptr [rdi];
0x0004922e: call qword ptr [rax+0x1ee8349];
0x00049437: mov dword ptr [rcx], 0x83c00949; stc; and al, 0x75; fisttp dword ptr [rcx+rcx*4-0x40], st; ret;
0x00049438: add [rcx+9], ecx; rol byte ptr [rbx-0x248adb07], 0x4c; mov eax, eax; ret;
0x0004943b: rol byte ptr [rbx-0x248adb07], 0x4c; mov eax, eax; ret;
0x0004943d: stc; and al, 0x75; fisttp dword ptr [rcx+rcx*4-0x40], st; ret;
0x0004943e: and al, 0x75; fisttp dword ptr [rcx+rcx*4-0x40], st; ret;
0x00049440: fisttp dword ptr [rcx+rcx*4-0x40], st; ret;
0x00049489: out 0x48, al; lea eax, [rip+0x17804f]; mov byte ptr [rax+rdx], 0; ret;
0x0004948a: lea rax, [rip+0x17804f]; mov byte ptr [rax+rdx], 0; ret;
0x0004948b: lea eax, [rip+0x17804f]; mov byte ptr [rax+rdx], 0; ret;
0x0004948c: add eax, 0x17804f; mov byte ptr [rax+rdx], 0; ret;
0x0004948d: adc byte ptr [r15], 0; mov byte ptr [rax+rdx], 0; ret;
0x0004948e: adc byte ptr [rdi], 0; mov byte ptr [rax+rdx], 0; ret;
0x00049491: mov byte ptr [rax+rdx], 0; ret;
0x00049493: adc [rax], al; ret;
0x0004950f: rol byte ptr [rcx+rcx*4-0x18], 0xf; ret;
0x00049552: inc dword ptr [rbp+0x5d0974c0]; ret;
0x0004956e: call far fword ptr [rbp+0x4c];
0x0004975f: xchg [rcx+rax], eax; add [rdi], cl; mov dh, 0xd2; movsxd rdx, [r9+rdx*4]; add rdx, r9; jmp rdx;
0x00049760: add [rax], r8d; add [rdi], cl; mov dh, 0xd2; movsxd rdx, [r9+rdx*4]; add rdx, r9; jmp rdx;
0x00049761: add [rax], eax; add [rdi], cl; mov dh, 0xd2; movsxd rdx, [r9+rdx*4]; add rdx, r9; jmp rdx;
0x00049762: add [rax], al; movzx edx, dl; movsxd rdx, [r9+rdx*4]; add rdx, r9; jmp rdx;
0x00049763: add [rdi], cl; mov dh, 0xd2; movsxd rdx, [r9+rdx*4]; add rdx, r9; jmp rdx;
0x00049764: movzx edx, dl; movsxd rdx, [r9+rdx*4]; add rdx, r9; jmp rdx;
0x00049765: mov dh, 0xd2; movsxd rdx, [r9+rdx*4]; add rdx, r9; jmp rdx;
0x00049766: ror byte ptr [rcx+0x63], cl; adc al, 0x91; add rdx, r9; jmp rdx;
0x00049767: movsxd rdx, [r9+rdx*4]; add rdx, r9; jmp rdx;
0x00049768: movsxd edx, [rcx+rdx*4]; add rdx, r9; jmp rdx;
0x00049769: adc al, 0x91; add rdx, r9; jmp rdx;
0x0004976a: xchg ecx, eax; add rdx, r9; jmp rdx;
0x0004976b: add rdx, r9; jmp rdx;
0x000497e5: add [rax], al; add [rax-0x39], cl; ret;
0x00049852: rol byte ptr [rcx], 0xc6; jmp qword ptr [rax];
0x00049853: add esi, eax; jmp qword ptr [rax];
0x00049931: add cl, [rdi]; mov esi, 0x89410252; ret;
0x00049933: mov esi, 0x89410252; ret;
0x00049934: push rdx; add al, [rcx-0x77]; ret;
0x00049935: add al, [rcx-0x77]; ret;
0x000499de: ret 0x4440;
0x00049a13: add [rbx-0x50c2fbb9], cl; add [rax], al; add [rdi], cl; xchg [rsi-0x76fffffc], ecx; ret 0xc083;
0x00049a16: add al, 0x3d; scasd [rdi]; add [rax], al; add [rdi], cl; xchg [rsi-0x76fffffc], ecx; ret 0xc083;
0x00049a18: scasd [rdi]; add [rax], al; add [rdi], cl; xchg [rsi-0x76fffffc], ecx; ret 0xc083;
0x00049a19: add [rax], al; add [rdi], cl; xchg [rsi-0x76fffffc], ecx; ret 0xc083;
0x00049a1b: add [rdi], cl; xchg [rsi-0x76fffffc], ecx; ret 0xc083;
0x00049a1d: xchg [rsi-0x76fffffc], ecx; ret 0xc083;
0x00049aa7: add [rax], al; add [rcx-0x75], cl; ret 0xc640;
0x00049aa9: add [rcx-0x75], cl; ret 0xc640;
0x00049aad: ret 0xc640;
0x00049ad1: clc; dec dword ptr [rdi]; ret 0x7c83;
0x00049ad2: dec dword ptr [rdi]; ret 0x7c83;
0x00049ad5: ret 0x7c83;
0x00049ce3: add [rbx+rcx*4-0x6c], cl; and al, 0x88; add [rax], al; add [rcx+1], cl; ret;
0x00049ce6: xchg esp, eax; and al, 0x88; add [rax], al; add [rcx+1], cl; ret;
0x00049ce7: and al, 0x88; add [rax], al; add [rcx+1], cl; ret;
0x00049e78: add [rax], al; add [rcx-0x75], cl; ret 0xf40;
0x00049e7a: add [rcx-0x75], cl; ret 0xf40;
0x00049f3f: or [rcx-0x75], cl; ret 0x8940;
0x00049f91: sub [rcx+1], al; ret;
0x0004a08e: call qword ptr [rax+0xf01f983];
0x0004a0e4: add [rax], al; add [rbx+rcx*4-0x64], al; and al, 0x80; add [rax], al; add [rbx+0x1602474], cl; ret 0x1f0f;
0x0004a0e6: add [rbx+rcx*4-0x64], al; and al, 0x80; add [rax], al; add [rbx+0x1602474], cl; ret 0x1f0f;
0x0004a0e9: pushfq; and al, 0x80; add [rax], al; add [rbx+0x1602474], cl; ret 0x1f0f;
0x0004a0ea: and al, 0x80; add [rax], al; add [rbx+0x1602474], cl; ret 0x1f0f;
0x0004a0eb: add byte ptr [rax], 0; add [rbx+0x1602474], cl; ret 0x1f0f;
0x0004a0ec: add [rax], al; add [rbx+0x1602474], cl; ret 0x1f0f;
0x0004a0ee: add [rbx+0x1602474], cl; ret 0x1f0f;
0x0004a365: and al, 8; add [rdi], ecx; xchg esp, eax; ret 0x7c8b;
0x0004a367: add [rdi], ecx; xchg esp, eax; ret 0x7c8b;
0x0004a369: xchg esp, eax; ret 0x7c8b;
0x0004a36a: ret 0x7c8b;
0x0004a4eb: add [rax], al; add [rbx+rcx*4-0x7c], cl; and al, 0x90; add [rax], al; add [rcx], al; ret 0xfbe9;
0x0004a4ed: add [rbx+rcx*4-0x7c], cl; and al, 0x90; add [rax], al; add [rcx], al; ret 0xfbe9;
0x0004a4f0: test [rax+rdx*4], ah; add [rax], al; add [rcx], al; ret 0xfbe9;
0x0004a4f1: and al, 0x90; add [rax], al; add [rcx], al; ret 0xfbe9;
0x0004a4f2: nop; add [rax], al; add [rcx], al; ret 0xfbe9;
0x0004a4f3: add [rax], al; add [rcx], al; ret 0xfbe9;
0x0004a4f5: add [rcx], al; ret 0xfbe9;
0x0004a4f7: ret 0xfbe9;
0x0004a57e: dec dword ptr [rbx-0x72f7dbb4]; inc byte ptr [r11-0x6bf00220]; ret 0xf983;
0x0004a584: inc byte ptr [r11-0x6bf00220]; ret 0xf983;
0x0004a585: inc byte ptr [rbx-0x6bf00220]; ret 0xf983;
0x0004a58a: xchg esp, eax; ret 0xf983;
0x0004a58b: ret 0xf983;
0x0004a5a5: cmp dword ptr [rdx+rsi*8-0x49f00001], 0xffffff84; and al, 0x9b; add [rax], al; add [rcx-0x7d], cl; ret;
0x0004a5a6: mov esp, 0xffffff2; mov dh, 0x84; and al, 0x9b; add [rax], al; add [rcx-0x7d], cl; ret;
0x0004a5a9: dec dword ptr [rdi]; mov dh, 0x84; and al, 0x9b; add [rax], al; add [rcx-0x7d], cl; ret;
0x0004a5ab: mov dh, 0x84; and al, 0x9b; add [rax], al; add [rcx-0x7d], cl; ret;
0x0004a5ac: test [rbx+rbx*4], ah; add [rax], al; add [rcx-0x7d], cl; ret;
0x0004a5ad: and al, 0x9b; add [rax], al; add [rcx-0x7d], cl; ret;
0x0004a5ae: fwait; add [rax], al; add [rcx-0x7d], cl; ret;
0x0004a5f7: adc [rcx-0x7d], cl; ret;
0x0004a650: dec dword ptr [rax-0x7d]; rol dword ptr [rcx], 0x88; add cl, [rax-0x7d]; ret 0xf01;
0x0004a653: rol dword ptr [rcx], 0x88; add cl, [rax-0x7d]; ret 0xf01;
0x0004a656: add cl, [rax-0x7d]; ret 0xf01;
0x0004a785: inc dword ptr [rbx+0xba02f9]; add [rax], al; add [rdi], cl; ret 0x81e9;
0x0004a78b: add [rax], al; add [rdi], cl; ret 0x81e9;
0x0004a78d: add [rdi], cl; ret 0x81e9;
0x0004a790: ret 0x81e9;
0x0004a7c8: dec dword ptr [rax-0x7d]; ret 0x4101;
0x0004a7cc: add [rcx-0x78], eax; add ecx, [rcx-0x7d]; ret;
0x0004a7cf: add ecx, [rcx-0x7d]; ret;
0x0004a8b8: dec dword ptr [rax-0x7d]; ret 0x8801;
0x0004a9e6: add [rax], al; add [rdi], cl; xchg esp, eax; ret 0x7ae9;
0x0004a9e8: add [rdi], cl; xchg esp, eax; ret 0x7ae9;
0x0004a9ea: xchg esp, eax; ret 0x7ae9;
0x0004a9eb: ret 0x7ae9;
0x0004a9fd: and [rcx-0x7d], cl; ret;
0x0004ac3c: adc [rax+0xf], cl; ret 0x8948;
0x0004ac87: add [rax], al; add al, ch; and [rsi-0x76b70003], esp; ret 0x8948;
0x0004ac89: add al, ch; and [rsi-0x76b70003], esp; ret 0x8948;
0x0004ac8b: and [rsi-0x76b70003], esp; ret 0x8948;
0x0004ac8c: cmpsb [rsi], [rdi]; std; dec dword ptr [rax-0x77]; ret 0x8948;
0x0004ac8d: std; dec dword ptr [rax-0x77]; ret 0x8948;
0x0004acbb: ret 0x7a80;
0x0004ace6: int1; pop rbx; ret;
0x0004ad07: add [rbp-0xa], dh; pop rbx; ret;
0x0004ad57: adc [rax-0x77], cl; outsd dx, [rsi]; or [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret;
0x0004ad58: mov [rdi+8], rbp; xor eax, eax; pop rbx; pop rbp; pop r12; ret;
0x0004ad59: mov [rdi+8], ebp; xor eax, eax; pop rbx; pop rbp; pop r12; ret;
0x0004ad5a: outsd dx, [rsi]; or [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret;
0x0004ad73: adc al, bpl; sahf; movsd [rdi], [rsi]; std; call far fword ptr [rbx+0x31];
0x0004ad74: adc al, ch; sahf; movsd [rdi], [rsi]; std; call far fword ptr [rbx+0x31];
0x0004ad76: sahf; movsd [rdi], [rsi]; std; call far fword ptr [rbx+0x31];
0x0004ad77: movsd [rdi], [rsi]; std; call far fword ptr [rbx+0x31];
0x0004ad78: std; call far fword ptr [rbx+0x31];
0x0004ad79: call far fword ptr [rbx+0x31];
0x0004ada4: push 0xffffffff89485b08; add eax, 0x1739c2; pop rbp; xor eax, eax; pop r12; ret;
0x0004ada5: or [rbx+0x48], bl; mov [rip+0x1739c2], eax; pop rbp; xor eax, eax; pop r12; ret;
0x0004ada6: pop rbx; mov [rip+0x1739c2], rax; pop rbp; xor eax, eax; pop r12; ret;
0x0004ada7: mov [rip+0x1739c2], rax; pop rbp; xor eax, eax; pop r12; ret;
0x0004ada8: mov [rip+0x1739c2], eax; pop rbp; xor eax, eax; pop r12; ret;
0x0004ada9: add eax, 0x1739c2; pop rbp; xor eax, eax; pop r12; ret;
0x0004adaa: ret 0x1739;
0x0004adae: pop rbp; xor eax, eax; pop r12; ret;
0x0004adaf: xor eax, eax; pop r12; ret;
0x0004ae05: xchg [rip-0x76b70001], ebp; ret;
0x0004ae06: sub eax, 0x8948ffff; ret;
0x0004ae80: fild st, dword ptr [rax+0xf3a007d]; xchg esp, eax; ret;
0x0004ae84: cmp cl, [rdi]; xchg esp, eax; ret;
0x0004afd9: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x1765c7; syscall;
0x0004afdf: add [rax], al; add [rax-0x73], cl; cmp eax, 0x1765c7; syscall;
0x0004afe1: add [rax-0x73], cl; cmp eax, 0x1765c7; syscall;
0x0004afe4: cmp eax, 0x1765c7; syscall;
0x0004b062: mov rax, [rip+0x176737]; lea rsi, [rip-0x2a0]; lea rdi, [rip+0x176531]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0004b063: mov eax, [rip+0x176737]; lea rsi, [rip-0x2a0]; lea rdi, [rip+0x176531]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0004b064: add eax, 0x176737; lea rsi, [rip-0x2a0]; lea rdi, [rip+0x176531]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0004b068: add [rax-0x73], cl; xor eax, 0xfffffd60; lea rdi, [rip+0x176531]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0004b069: lea rsi, [rip-0x2a0]; lea rdi, [rip+0x176531]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0004b06a: lea esi, [rip-0x2a0]; lea rdi, [rip+0x176531]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0004b06b: xor eax, 0xfffffd60; lea rdi, [rip+0x176531]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0004b06f: dec dword ptr [rax-0x73]; cmp eax, 0x176531; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0004b070: lea rdi, [rip+0x176531]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0004b071: lea edi, [rip+0x176531]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0004b072: cmp eax, 0x176531; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0004b073: xor [rbp+0x17], esp; add [rax-0x3f], cl; enter 0x6411, 0x48; xor eax, [0x30]; call rax;
0x0004b094: test al, 0xa0; std; dec dword ptr [rax-0x7b]; ror byte ptr [rdi], 0x84; iretd;
0x0004b095: mov al, [0xcf840fc08548fffd]; add eax, [rax]; add [rax-0x77], cl; ret 0xbf41;
0x0004b096: std; dec dword ptr [rax-0x7b]; ror byte ptr [rdi], 0x84; iretd;
0x0004b097: dec dword ptr [rax-0x7b]; ror byte ptr [rdi], 0x84; iretd;
0x0004b09c: test bh, cl; add eax, [rax]; add [rax-0x77], cl; ret 0xbf41;
0x0004b09e: add eax, [rax]; add [rax-0x77], cl; ret 0xbf41;
0x0004b0a0: add [rax-0x77], cl; ret 0xbf41;
0x0004b0a3: ret 0xbf41;
0x0004b0dc: mov rax, [rip+0x1766a5]; lea rsi, [rsp+0x24]; mov edi, 1; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0004b0dd: mov eax, [rip+0x1766a5]; lea rsi, [rsp+0x24]; mov edi, 1; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0004b0de: add eax, 0x1766a5; lea rsi, [rsp+0x24]; mov edi, 1; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0004b0e3: lea rsi, [rsp+0x24]; mov edi, 1; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0004b0e4: lea esi, [rsp+0x24]; mov edi, 1; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0004b0e6: and al, 0x24; mov edi, 1; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0004b0e7: and al, 0xbf; add [rax], eax; add [rax], al; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0004b227: mov rax, [rip+0x17655a]; mov edi, [rsp+0x24]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0004b228: mov eax, [rip+0x17655a]; mov edi, [rsp+0x24]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0004b229: add eax, 0x17655a; mov edi, [rsp+0x24]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0004b22e: mov edi, [rsp+0x24]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0004b230: and al, 0x24; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0004b28e: call qword ptr [rax-0x3f7b36cf];
0x0004b4b0: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x1765c7]; syscall;
0x0004b4ba: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x1760e6; syscall;
0x0004b4c0: add [rax], al; add [rax-0x73], cl; cmp eax, 0x1760e6; syscall;
0x0004b4c2: add [rax-0x73], cl; cmp eax, 0x1760e6; syscall;
0x0004b4c5: cmp eax, 0x1760e6; syscall;
0x0004b54e: call qword ptr [rax+0xf04ff83];
0x0004b58e: sub dword ptr [rip+0x17601b], 1; add rsp, 0x10; mov eax, r8d; pop rbp; ret;
0x0004b590: sbb esp, [rax+0x17]; add [rcx], al; add rsp, 0x10; mov eax, r8d; pop rbp; ret;
0x0004b5dd: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x1765c7]; syscall;
0x0004b5de: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x1765c7]; syscall;
0x0004b5df: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x1765c7]; syscall;
0x0004b5e0: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x1765c7]; syscall;
0x0004b5e1: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x1765c7]; syscall;
0x0004b5e2: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x1765c7]; syscall;
0x0004b5e3: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x1765c7]; syscall;
0x0004b5e4: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x1765c7]; syscall;
0x0004b5e5: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x1765c7]; syscall;
0x0004b5e6: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x175fba; syscall;
0x0004b5e7: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0x1765c7]; syscall;
0x0004b5e8: add [rax], al; mov eax, 0xca; lea rdi, [rip+0x1765c7]; syscall;
0x0004b5e9: add [rax+0xca], bh; lea rdi, [rip+0x1765c7]; syscall;
0x0004b5ea: mov eax, 0xca; lea rdi, [rip+0x1765c7]; syscall;
0x0004b5ec: add [rax], al; add [rax-0x73], cl; cmp eax, 0x175fba; syscall;
0x0004b5ed: add [rax], al; lea rdi, [rip+0x1765c7]; syscall;
0x0004b5ee: add [rax-0x73], cl; cmp eax, 0x175fba; syscall;
0x0004b5ef: lea rdi, [rip+0x1765c7]; syscall;
0x0004b5f0: lea edi, [rip+0x1765c7]; syscall;
0x0004b5f1: cmp eax, 0x175fba; syscall;
0x0004b5f9: fwait; nop [rax+rax]; mov r8d, 0xffffffff; mov eax, r8d; ret;
0x0004b5fa: nop [rax+rax]; mov r8d, 0xffffffff; mov eax, r8d; ret;
0x0004b5fb: nop [rax+rax]; mov r8d, 0xffffffff; mov eax, r8d; ret;
0x0004b5fd: add [rax], r8b; mov r8d, 0xffffffff; mov eax, r8d; ret;
0x0004b5fe: add [rax], al; mov r8d, 0xffffffff; mov eax, r8d; ret;
0x0004b623: mov [rsi-1], ecx; jmp qword ptr [rsi+0xf];
0x0004b6b9: lea rdx, [rdi+0x128]; xor esi, esi; xor edi, edi; mov r10d, 8; mov eax, 0xe; syscall;
0x0004b6ba: lea edx, [rdi+0x128]; xor esi, esi; xor edi, edi; mov r10d, 8; mov eax, 0xe; syscall;
0x0004b6be: add [rax], al; xor esi, esi; xor edi, edi; mov r10d, 8; mov eax, 0xe; syscall;
0x0004b6c0: xor esi, esi; xor edi, edi; mov r10d, 8; mov eax, 0xe; syscall;
0x0004b6c1: div byte ptr [rcx]; inc dword ptr [rcx-0x46]; or [rax], al; add [rax], al; mov eax, 0xe; syscall;
0x0004b6c2: xor edi, edi; mov r10d, 8; mov eax, 0xe; syscall;
0x0004b6c3: inc dword ptr [rcx-0x46]; or [rax], al; add [rax], al; mov eax, 0xe; syscall;
0x0004b6d6: push qword ptr [rbx+3]; xor eax, eax; ret;
0x0004b6de: or eax, 0x17278d; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x0004b6f1: lea rsi, [rdi+0x128]; xor edx, edx; mov edi, 2; mov r10d, 8; mov eax, 0xe; syscall;
0x0004b6f2: lea esi, [rdi+0x128]; xor edx, edx; mov edi, 2; mov r10d, 8; mov eax, 0xe; syscall;
0x0004b6f5: add [rax], eax; add [rcx], dh; sar byte ptr [rdi+2], cl; mov r10d, 8; mov eax, 0xe; syscall;
0x0004b6f6: add [rax], al; xor edx, edx; mov edi, 2; mov r10d, 8; mov eax, 0xe; syscall;
0x0004b6f7: add [rcx], dh; sar byte ptr [rdi+2], cl; mov r10d, 8; mov eax, 0xe; syscall;
0x0004b6f8: xor edx, edx; mov edi, 2; mov r10d, 8; mov eax, 0xe; syscall;
0x0004b6f9: sar byte ptr [rdi+2], cl; mov r10d, 8; mov eax, 0xe; syscall;
0x0004b772: or eax, 0x1726f9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x0004b7fa: and al, 0x18; add [rax], al; add [rcx+0xf], al; ret;
0x0004b7fc: add [rax], al; add [rcx+0xf], al; ret;
0x0004b7fe: add [rcx+0xf], al; ret;
0x0004b866: add [rax], al; add [rcx+0x146348c2], cl; xchg edi, eax; add rdx, rdi; cmp esi, 0x2f; jmp rdx;
0x0004b867: add [rax], al; mov edx, eax; movsxd rdx, [rdi+rdx*4]; add rdx, rdi; cmp esi, 0x2f; jmp rdx;
0x0004b868: add [rcx+0x146348c2], cl; xchg edi, eax; add rdx, rdi; cmp esi, 0x2f; jmp rdx;
0x0004b869: mov edx, eax; movsxd rdx, [rdi+rdx*4]; add rdx, rdi; cmp esi, 0x2f; jmp rdx;
0x0004b86b: movsxd rdx, [rdi+rdx*4]; add rdx, rdi; cmp esi, 0x2f; jmp rdx;
0x0004b86c: movsxd edx, [rdi+rdx*4]; add rdx, rdi; cmp esi, 0x2f; jmp rdx;
0x0004b86d: adc al, 0x97; add rdx, rdi; cmp esi, 0x2f; jmp rdx;
0x0004b86e: xchg edi, eax; add rdx, rdi; cmp esi, 0x2f; jmp rdx;
0x0004b86f: add rdx, rdi; cmp esi, 0x2f; jmp rdx;
0x0004b870: add edx, edi; cmp esi, 0x2f; jmp rdx;
0x0004b871: cli; cmp esi, 0x2f; jmp rdx;
0x0004b872: cmp esi, 0x2f; jmp rdx;
0x0004b89e: or [rcx+0x39], al; ret;
0x0004b8af: add [rax], al; add [rdi], cl; test [rcx+rax], esp; add [rax], al; add rsp, 0x58; ret;
0x0004b8b1: add [rdi], cl; test [rcx+rax], esp; add [rax], al; add rsp, 0x58; ret;
0x0004b8b3: test [rcx+rax], esp; add [rax], al; add rsp, 0x58; ret;
0x0004b8b4: and al, 1; add [rax], al; add rsp, 0x58; ret;
0x0004b8b6: add [rax], al; add rsp, 0x58; ret;
0x0004b9c5: ror byte ptr [rax], 0xe9; ret 0xfffe;
0x0004b9c6: or cl, ch; ret 0xfffe;
0x0004ba5d: lea rdx, [rdi+0x128]; lea rsi, [rsi+0x128]; mov edi, 2; mov r10d, 8; mov eax, 0xe; syscall;
0x0004ba5e: lea edx, [rdi+0x128]; lea rsi, [rsi+0x128]; mov edi, 2; mov r10d, 8; mov eax, 0xe; syscall;
0x0004ba62: add [rax], al; lea rsi, [rsi+0x128]; mov edi, 2; mov r10d, 8; mov eax, 0xe; syscall;
0x0004ba64: lea rsi, [rsi+0x128]; mov edi, 2; mov r10d, 8; mov eax, 0xe; syscall;
0x0004ba65: lea esi, [rsi+0x128]; mov edi, 2; mov r10d, 8; mov eax, 0xe; syscall;
0x0004ba66: mov dh, 0x28; add [rax], eax; add [rdi+2], bh; mov r10d, 8; mov eax, 0xe; syscall;
0x0004ba67: sub [rcx], al; add [rax], al; mov edi, 2; mov r10d, 8; mov eax, 0xe; syscall;
0x0004ba68: add [rax], eax; add [rdi+2], bh; mov r10d, 8; mov eax, 0xe; syscall;
0x0004ba69: add [rax], al; mov edi, 2; mov r10d, 8; mov eax, 0xe; syscall;
0x0004ba6a: add [rdi+2], bh; mov r10d, 8; mov eax, 0xe; syscall;
0x0004ba6b: mov edi, 2; mov r10d, 8; mov eax, 0xe; syscall;
0x0004ba6c: add al, [rax]; add [rax], al; mov r10d, 8; mov eax, 0xe; syscall;
0x0004ba6d: add [rax], al; add [rcx-0x46], al; or [rax], al; add [rax], al; mov eax, 0xe; syscall;
0x0004ba6e: add [rax], al; mov r10d, 8; mov eax, 0xe; syscall;
0x0004ba6f: add [rcx-0x46], al; or [rax], al; add [rax], al; mov eax, 0xe; syscall;
0x0004ba70: mov r10d, 8; mov eax, 0xe; syscall;
0x0004ba71: mov edx, 8; mov eax, 0xe; syscall;
0x0004ba72: or [rax], al; add [rax], al; mov eax, 0xe; syscall;
0x0004baca: mov rcx, [rdx+0x98]; mov r8, [rdx+0x28]; mov r9, [rdx+0x30]; mov rdx, [rdx+0x88]; xor eax, eax; ret;
0x0004bacb: mov ecx, [rdx+0x98]; mov r8, [rdx+0x28]; mov r9, [rdx+0x30]; mov rdx, [rdx+0x88]; xor eax, eax; ret;
0x0004bacc: mov bl, [rax+0x4c000000]; mov eax, [rdx+0x28]; mov r9, [rdx+0x30]; mov rdx, [rdx+0x88]; xor eax, eax; ret;
0x0004bacf: add [rax], al; mov r8, [rdx+0x28]; mov r9, [rdx+0x30]; mov rdx, [rdx+0x88]; xor eax, eax; ret;
0x0004bad1: mov r8, [rdx+0x28]; mov r9, [rdx+0x30]; mov rdx, [rdx+0x88]; xor eax, eax; ret;
0x0004bad2: mov eax, [rdx+0x28]; mov r9, [rdx+0x30]; mov rdx, [rdx+0x88]; xor eax, eax; ret;
0x0004bad5: mov r9, [rdx+0x30]; mov rdx, [rdx+0x88]; xor eax, eax; ret;
0x0004bad6: mov ecx, [rdx+0x30]; mov rdx, [rdx+0x88]; xor eax, eax; ret;
0x0004bad8: xor [rax-0x75], cl; xchg edx, eax; mov [rax], al; add [rax], al; xor eax, eax; ret;
0x0004bad9: mov rdx, [rdx+0x88]; xor eax, eax; ret;
0x0004bada: mov edx, [rdx+0x88]; xor eax, eax; ret;
0x0004badb: xchg edx, eax; mov [rax], al; add [rax], al; xor eax, eax; ret;
0x0004badc: mov [rax], al; add [rax], al; xor eax, eax; ret;
0x0004bae1: rol bl, 0x48; mov ecx, [rip+0x17278d]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x0004bae5: or eax, 0x172386; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x0004bae7: and edx, [rdi]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+1]; or rax, 0xffffffffffffffff; ret;
0x0004bc27: ror dword ptr [rax-0x7d], 0xc0; add [rax+0x39], ecx; ret 0xef75;
0x0004bc4f: ror byte ptr [rax-0x7d], 0xea; add [rbp-0x1e], esi; mov eax, 1; ret;
0x0004bc53: add [rbp-0x1e], esi; mov eax, 1; ret;
0x0004bd1d: fldpi; adc r10, r11; mov [rdi+8], r10; mov eax, ecx; adc eax, eax; ret;
0x0004bd20: adc r10, r11; mov [rdi+8], r10; mov eax, ecx; adc eax, eax; ret;
0x0004bd21: adc edx, ebx; mov [rdi+8], r10; mov eax, ecx; adc eax, eax; ret;
0x0004be57: add [rbx+rcx*4+0x57], cl; or [rcx+1], cl; ret 0x894c;
0x0004be5a: push rdi; or [rcx+1], cl; ret 0x894c;
0x0004be5b: or [rcx+1], cl; ret 0x894c;
0x0004be90: enter 0xed74, 0x48; cmp ecx, eax; sbb eax, eax; and eax, 2; sub eax, 1; ret;
0x0004be92: in eax, dx; cmp rcx, rax; sbb eax, eax; and eax, 2; sub eax, 1; ret;
0x0004be93: cmp rcx, rax; sbb eax, eax; and eax, 2; sub eax, 1; ret;
0x0004be94: cmp ecx, eax; sbb eax, eax; and eax, 2; sub eax, 1; ret;
0x0004be95: rcr dword ptr [rcx], 0xc0; and eax, 2; sub eax, 1; ret;
0x0004be96: sbb eax, eax; and eax, 2; sub eax, 1; ret;
0x0004be97: rol byte ptr [rbx-0x177cfd20], 1; ret;
0x0004be98: and eax, 2; sub eax, 1; ret;
0x0004be9a: add al, [rbx-0x6f3cfe18]; xor eax, eax; ret;
0x0004be9d: add ebx, eax; nop; xor eax, eax; ret;
0x0004bf35: add [rax], eax; add [rbp-0x77], cl; iretd;
0x0004bf5c: enter 0x8d4c, 0x24; ret 0x8d4a;
0x0004bffb: add eax, ebp; iretd;
0x0004c385: shl r9, cl; mov [rdi], r9; ret;
0x0004c386: shl ecx, cl; mov [rdi], r9; ret;
0x0004c3ae: cmp ecx, [rbp+0xf]; movsd [rdi], [rsi]; enter 0x894c, 7; shl r9, cl; mov [rdi-8], r9; ret;
0x0004c3af: shld r8, r9, cl; mov [rdi], r8; shl r9, cl; mov [rdi-8], r9; ret;
0x0004c3b0: shld eax, ecx, cl; mov [rdi], r8; shl r9, cl; mov [rdi-8], r9; ret;
0x0004c3b1: movsd [rdi], [rsi]; enter 0x894c, 7; shl r9, cl; mov [rdi-8], r9; ret;
0x0004c3b2: enter 0x894c, 7; shl r9, cl; mov [rdi-8], r9; ret;
0x0004c3b3: mov [rdi], r8; shl r9, cl; mov [rdi-8], r9; ret;
0x0004c3b4: mov [rdi], eax; shl r9, cl; mov [rdi-8], r9; ret;
0x0004c3b6: shl r9, cl; mov [rdi-8], r9; ret;
0x0004c3b7: shl ecx, cl; mov [rdi-8], r9; ret;
0x0004c3b9: mov [rdi-8], r9; ret;
0x0004c3df: add [rbp+0xf], cl; movsd [rdi], [rsi]; ret;
0x0004c420: mov [rdi], r11; shld r8, r9, cl; mov [rdi-8], r8; shl r9, cl; mov [rdi-0x10], r9; ret;
0x0004c421: mov [rdi], ebx; shld r8, r9, cl; mov [rdi-8], r8; shl r9, cl; mov [rdi-0x10], r9; ret;
0x0004c423: shld r8, r9, cl; mov [rdi-8], r8; shl r9, cl; mov [rdi-0x10], r9; ret;
0x0004c424: shld eax, ecx, cl; mov [rdi-8], r8; shl r9, cl; mov [rdi-0x10], r9; ret;
0x0004c425: movsd [rdi], [rsi]; enter 0x894c, 0x47; clc; shl r9, cl; mov [rdi-0x10], r9; ret;
0x0004c426: enter 0x894c, 0x47; clc; shl r9, cl; mov [rdi-0x10], r9; ret;
0x0004c427: mov [rdi-8], r8; shl r9, cl; mov [rdi-0x10], r9; ret;
0x0004c428: mov [rdi-8], eax; shl r9, cl; mov [rdi-0x10], r9; ret;
0x0004c42a: clc; shl r9, cl; mov [rdi-0x10], r9; ret;
0x0004c42b: shl r9, cl; mov [rdi-0x10], r9; ret;
0x0004c42c: shl ecx, cl; mov [rdi-0x10], r9; ret;
0x0004c42e: mov [rdi-0x10], r9; ret;
0x0004c42f: mov [rdi-0x10], ecx; ret;
0x0004c48f: shr r9, cl; mov [rdi], r9; ret;
0x0004c490: shr ecx, cl; mov [rdi], r9; ret;
0x0004c492: mov [rdi], r9; ret;
0x0004c4b9: shrd r8, r9, cl; mov [rdi], r8; shr r9, cl; mov [rdi+8], r9; ret;
0x0004c4ba: shrd eax, ecx, cl; mov [rdi], r8; shr r9, cl; mov [rdi+8], r9; ret;
0x0004c4bb: lodsd [rsi]; enter 0x894c, 7; shr r9, cl; mov [rdi+8], r9; ret;
0x0004c4bc: enter 0x894c, 7; shr r9, cl; mov [rdi+8], r9; ret;
0x0004c4bd: mov [rdi], r8; shr r9, cl; mov [rdi+8], r9; ret;
0x0004c4be: mov [rdi], eax; shr r9, cl; mov [rdi+8], r9; ret;
0x0004c4c0: shr r9, cl; mov [rdi+8], r9; ret;
0x0004c4c1: shr ecx, cl; mov [rdi+8], r9; ret;
0x0004c4c3: mov [rdi+8], r9; ret;
0x0004c4c4: mov [rdi+8], ecx; ret;
0x0004c4ef: add [rbp+0xf], cl; lodsd [rsi]; ret;
0x0004c52e: lodsd [rsi]; ret;
0x0004c530: mov [rdi], r11; shrd r8, r9, cl; mov [rdi+8], r8; shr r9, cl; mov [rdi+0x10], r9; ret;
0x0004c531: mov [rdi], ebx; shrd r8, r9, cl; mov [rdi+8], r8; shr r9, cl; mov [rdi+0x10], r9; ret;
0x0004c533: shrd r8, r9, cl; mov [rdi+8], r8; shr r9, cl; mov [rdi+0x10], r9; ret;
0x0004c534: shrd eax, ecx, cl; mov [rdi+8], r8; shr r9, cl; mov [rdi+0x10], r9; ret;
0x0004c537: mov [rdi+8], r8; shr r9, cl; mov [rdi+0x10], r9; ret;
0x0004c538: mov [rdi+8], eax; shr r9, cl; mov [rdi+0x10], r9; ret;
0x0004c53b: shr r9, cl; mov [rdi+0x10], r9; ret;
0x0004c53c: shr ecx, cl; mov [rdi+0x10], r9; ret;
0x0004c53e: mov [rdi+0x10], r9; ret;
0x0004c57e: test byte ptr [rax-0x7d], 0xe9; add [rbx-0xd], esi; mov rax, rdx; ret;
0x0004c582: add [rbx-0xd], esi; mov rax, rdx; ret;
0x0004c6fc: or [rax+3], cl; add [rdi], ecx; xchg edx, eax; ret 0x8948;
0x0004c6ff: add [rdi], ecx; xchg edx, eax; ret 0x8948;
0x0004c701: xchg edx, eax; ret 0x8948;
0x0004c715: push rbp; jmp qword ptr [rsi+0xf];
0x0004c82a: ret 0x70e8;
0x0004c84e: call qword ptr [rax+0x4ce9894c];
0x0004c9c1: fisttp dword ptr [rax-0x77], st; ret;
0x0004c9db: fisttp dword ptr [rcx-0x77], st; ret 0x8b4a;
0x0004ca3d: ret 0x8b4a;
0x0004ca58: ror dword ptr [rcx+rdx-0x3e], 0x4e; mov [rdi+rbx*8+8], ecx; add rdx, r8; mov rax, rdx; pop rbx; ret;
0x0004ca59: adc rdx, r8; mov [rdi+r11*8+8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret;
0x0004ca5a: adc edx, eax; mov [rdi+r11*8+8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret;
0x0004ca5b: ret 0x894e;
0x0004ca5c: mov [rdi+r11*8+8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret;
0x0004ca5d: mov [rdi+rbx*8+8], ecx; add rdx, r8; mov rax, rdx; pop rbx; ret;
0x0004ca5f: fisttp word ptr [rax], st; add rdx, r8; mov rax, rdx; pop rbx; ret;
0x0004ca60: or [rcx+rax-0x3e], cl; mov rax, rdx; pop rbx; ret;
0x0004ca61: add rdx, r8; mov rax, rdx; pop rbx; ret;
0x0004ca62: add edx, eax; mov rax, rdx; pop rbx; ret;
0x0004cf2c: or [rax-0x73], cl; push rdi; add [rcx-0x77], ecx; push rsp; ret;
0x0004cf2f: push rdi; add [rcx-0x77], ecx; push rsp; ret;
0x0004cfde: call qword ptr [rax+0x24348b48];
0x0004d0ab: fucomip st, st(0); iretd;
0x0004d4ac: or [rax-0x73], cl; push rsi; add [rcx-0x77], ecx; push rsp; ret;
0x0004d4af: push rsi; add [rcx-0x77], ecx; push rsp; ret;
0x0004d4b0: add [rcx-0x77], ecx; push rsp; ret;
0x0004d4b3: push rsp; ret;
0x0004d51f: call qword ptr [rbp+0x49];
0x0004d56b: add [rax], al; add [rbp+0x41], dh; leave; ret;
0x0004d56d: add [rbp+0x41], dh; leave; ret;
0x0004d60d: fldpi; sbb r10, r11; mov [rdi+8], r10; mov eax, ecx; adc eax, eax; ret;
0x0004d610: sbb r10, r11; mov [rdi+8], r10; mov eax, ecx; adc eax, eax; ret;
0x0004d611: sbb edx, ebx; mov [rdi+8], r10; mov eax, ecx; adc eax, eax; ret;
0x0004d613: mov [rdi+8], r10; mov eax, ecx; adc eax, eax; ret;
0x0004d614: mov [rdi+8], edx; mov eax, ecx; adc eax, eax; ret;
0x0004d617: mov eax, ecx; adc eax, eax; ret;
0x0004d619: adc eax, eax; ret;
0x0004d63e: enter 0x894c, 0x44; iretd;
0x0004d650: fimul st, dword ptr [rcx+rcx*4+0x54]; iretd;
0x0004d653: push rsp; iretd;
0x0004d660: enter 0x894c, 4; iretd;
0x0004d72c: ret 0x114d;
0x0004d747: add [rbx+rcx*4+0x57], cl; or [rcx+0x29], cl; ret 0x894c;
0x0004d74a: push rdi; or [rcx+0x29], cl; ret 0x894c;
0x0004d74b: or [rcx+0x29], cl; ret 0x894c;
0x0004d74f: mov [rdi+8], r10; mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret;
0x0004d750: mov [rdi+8], edx; mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret;
0x0004d751: push rdi; or [rcx-0x2feeb728], cl; pop rbp; pop rbx; ret;
0x0004d752: or [rcx-0x2feeb728], cl; pop rbp; pop rbx; ret;
0x0004d753: mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret;
0x0004d754: fmul st, dword ptr [rax+0x11]; rcr byte ptr [rbp+0x5b], 1; ret;
0x0004d755: adc rax, rdx; pop rbp; pop rbx; ret;
0x0004d756: adc eax, edx; pop rbp; pop rbx; ret;
0x0004d757: rcr byte ptr [rbp+0x5b], 1; ret;
0x0004d758: pop rbp; pop rbx; ret;
0x0004d767: ret 0x4866;
0x0004d791: dec dword ptr [rdi]; add [rax+0x21], cl; ret 0xc148;
0x0004d792: str [rax+0x21]; ret 0xc148;
0x0004d793: add [rax+0x21], cl; ret 0xc148;
0x0004d7a4: sbb ecx, [rax-0x7b]; shl byte ptr [rbp+0x26], cl; mov dword ptr [rsi], 0; mov eax, 1; ret;
0x0004d7a7: shl byte ptr [rbp+0x26], cl; mov dword ptr [rsi], 0; mov eax, 1; ret;
0x0004d7a9: mov dword ptr [rsi], 0; mov eax, 1; ret;
0x0004d7aa: mov dword ptr [rsi], 0; mov eax, 1; ret;
0x0004d7b4: add bl, al; nop [rax+rax]; bts rdx, 0x34; mov eax, 1; mov [rdi], rdx; ret;
0x0004d7b6: nop [rax+rax]; bts rdx, 0x34; mov eax, 1; mov [rdi], rdx; ret;
0x0004d7b7: nop [rax+rax]; bts rdx, 0x34; mov eax, 1; mov [rdi], rdx; ret;
0x0004d7b8: nop [rax+rax]; bts rdx, 0x34; mov eax, 1; mov [rdi], rdx; ret;
0x0004d7bc: add [rax], al; add [rax], al; bts rdx, 0x34; mov eax, 1; mov [rdi], rdx; ret;
0x0004d7be: add [rax], al; bts rdx, 0x34; mov eax, 1; mov [rdi], rdx; ret;
0x0004d7c0: bts rdx, 0x34; mov eax, 1; mov [rdi], rdx; ret;
0x0004d7c1: bts edx, 0x34; mov eax, 1; mov [rdi], rdx; ret;
0x0004d7c4: xor al, 0xb8; add [rax], eax; add [rax], al; mov [rdi], rdx; ret;
0x0004d7c5: mov eax, 1; mov [rdi], rdx; ret;
0x0004d7c6: add [rax], eax; add [rax], al; mov [rdi], rdx; ret;
0x0004d7df: or ebp, [rcx]; enter 0xd348, 0xe2; mov [rdi], rdx; mov [rsi], eax; mov eax, 1; ret;
0x0004d7e0: sub eax, ecx; shl rdx, cl; mov [rdi], rdx; mov [rsi], eax; mov eax, 1; ret;
0x0004d7e1: enter 0xd348, 0xe2; mov [rdi], rdx; mov [rsi], eax; mov eax, 1; ret;
0x0004d7e2: shl rdx, cl; mov [rdi], rdx; mov [rsi], eax; mov eax, 1; ret;
0x0004d7e3: shl edx, cl; mov [rdi], rdx; mov [rsi], eax; mov eax, 1; ret;
0x0004d7e5: mov [rdi], rdx; mov [rsi], eax; mov eax, 1; ret;
0x0004d7e6: mov [rdi], edx; mov [rsi], eax; mov eax, 1; ret;
0x0004d7e8: mov [rsi], eax; mov eax, 1; ret;
0x0004d832: adc eax, 0x75f68548; sub bh, al; add al, [rax]; add [rax], al; add [rax+1], bh; ret;
0x0004d835: div byte ptr [rbp+0x28]; mov dword ptr [rdx], 0; mov eax, 1; ret;
0x0004d837: sub bh, al; add al, [rax]; add [rax], al; add [rax+1], bh; ret;
0x0004d838: mov dword ptr [rdx], 0; mov eax, 1; ret;
0x0004d839: add al, [rax]; add [rax], al; add [rax+1], bh; ret;
0x0004d84e: cmp ecx, 0xe4757fff; mov eax, 1; ret;
0x0004d853: in al, 0xb8; add [rax], eax; add [rax], al; ret;
0x0004d875: mov [r8], rax; mov eax, 0xffffc002; sub eax, ecx; mov [rdx], eax; mov eax, 1; ret;
0x0004d876: mov [rax], eax; mov eax, 0xffffc002; sub eax, ecx; mov [rdx], eax; mov eax, 1; ret;
0x0004d877: add [rax-0x3ffe], bh; sub eax, ecx; mov [rdx], eax; mov eax, 1; ret;
0x0004d878: mov eax, 0xffffc002; sub eax, ecx; mov [rdx], eax; mov eax, 1; ret;
0x0004d87a: sar bh, 0xff; sub eax, ecx; mov [rdx], eax; mov eax, 1; ret;
0x0004d87d: sub eax, ecx; mov [rdx], eax; mov eax, 1; ret;
0x0004d887: nop [rax+rax]; mov rax, 0x8000000000000000; mov [r8], rax; mov eax, 1; mov dword ptr [rdx], 0xffffc002; ret;
0x0004d888: nop [rax+rax]; mov rax, 0x8000000000000000; mov [r8], rax; mov eax, 1; mov dword ptr [rdx], 0xffffc002; ret;
0x0004d88e: add [rax], al; mov rax, 0x8000000000000000; mov [r8], rax; mov eax, 1; mov dword ptr [rdx], 0xffffc002; ret;
0x0004d890: mov rax, 0x8000000000000000; mov [r8], rax; mov eax, 1; mov dword ptr [rdx], 0xffffc002; ret;
0x0004d895: add [rax], al; add [rax], al; or byte ptr [rcx-0x77], 0; mov eax, 1; mov dword ptr [rdx], 0xffffc002; ret;
0x0004d896: add [rax], al; add [rax-0x47ff76b7], al; add [rax], eax; add [rax], al; mov dword ptr [rdx], 0xffffc002; ret;
0x0004d897: add [rax], al; or byte ptr [rcx-0x77], 0; mov eax, 1; mov dword ptr [rdx], 0xffffc002; ret;
0x0004d898: add [rax-0x47ff76b7], al; add [rax], eax; add [rax], al; mov dword ptr [rdx], 0xffffc002; ret;
0x0004d899: or byte ptr [rcx-0x77], 0; mov eax, 1; mov dword ptr [rdx], 0xffffc002; ret;
0x0004d89a: mov [r8], rax; mov eax, 1; mov dword ptr [rdx], 0xffffc002; ret;
0x0004d89b: mov [rax], eax; mov eax, 1; mov dword ptr [rdx], 0xffffc002; ret;
0x0004d89c: add [rax+1], bh; mov dword ptr [rdx], 0xffffc002; ret;
0x0004d89d: mov eax, 1; mov dword ptr [rdx], 0xffffc002; ret;
0x0004d89e: add [rax], eax; add [rax], al; mov dword ptr [rdx], 0xffffc002; ret;
0x0004d89f: add [rax], al; add bh, al; add al, [rdx]; sar bh, 0xff; ret;
0x0004d8a0: add [rax], al; mov dword ptr [rdx], 0xffffc002; ret;
0x0004d8a1: add bh, al; add al, [rdx]; sar bh, 0xff; ret;
0x0004d8a2: mov dword ptr [rdx], 0xffffc002; ret;
0x0004d8a3: add al, [rdx]; sar bh, 0xff; ret;
0x0004d8a5: sar bh, 0xff; ret;
0x0004d8bd: shl esi, 0x17; and eax, 0x7fffff; or esi, eax; or esi, edx; movd xmm0, esi; ret;
0x0004d8be: out 0x17, al; and eax, 0x7fffff; or esi, eax; or esi, edx; movd xmm0, esi; ret;
0x0004d8c0: and eax, 0x7fffff; or esi, eax; or esi, edx; movd xmm0, esi; ret;
0x0004d8c5: or esi, eax; or esi, edx; movd xmm0, esi; ret;
0x0004d8c7: or esi, edx; movd xmm0, esi; ret;
0x0004d8c9: movd xmm0, esi; ret;
0x0004d8ca: movd mm0, esi; ret;
0x0004d8f3: or esi, ecx; or esi, edx; shl rsi, 0x20; or rax, rsi; movq xmm0, rax; ret;
0x0004d8f5: or esi, edx; shl rsi, 0x20; or rax, rsi; movq xmm0, rax; ret;
0x0004d8f7: shl rsi, 0x20; or rax, rsi; movq xmm0, rax; ret;
0x0004d8f8: shl esi, 0x20; or rax, rsi; movq xmm0, rax; ret;
0x0004d8f9: out 0x20, al; or rax, rsi; movq xmm0, rax; ret;
0x0004d8fb: or rax, rsi; movq xmm0, rax; ret;
0x0004d8fc: or eax, esi; movq xmm0, rax; ret;
0x0004d8fe: movq xmm0, rax; ret;
0x0004d8ff: movq mm0, rax; ret;
0x0004d900: movd mm0, eax; ret;
0x0004d91b: and si, 0x7fff; or esi, edx; mov [rsp-0x18], rax; mov [rsp-0x10], si; fld st, tbyte ptr [rsp-0x18]; ret;
0x0004d91c: and esi, 0xd6097fff; mov [rsp-0x18], rax; mov [rsp-0x10], si; fld st, tbyte ptr [rsp-0x18]; ret;
0x0004d920: or esi, edx; mov [rsp-0x18], rax; mov [rsp-0x10], si; fld st, tbyte ptr [rsp-0x18]; ret;
0x0004d922: mov [rsp-0x18], rax; mov [rsp-0x10], si; fld st, tbyte ptr [rsp-0x18]; ret;
0x0004d923: mov [rsp-0x18], eax; mov [rsp-0x10], si; fld st, tbyte ptr [rsp-0x18]; ret;
0x0004d925: and al, 0xe8; mov [rsp-0x10], si; fld st, tbyte ptr [rsp-0x18]; ret;
0x0004d927: mov [rsp-0x10], si; fld st, tbyte ptr [rsp-0x18]; ret;
0x0004d928: mov [rsp-0x10], esi; fld st, tbyte ptr [rsp-0x18]; ret;
0x0004d92a: and al, 0xf0; fld st, tbyte ptr [rsp-0x18]; ret;
0x0004d92c: fld st, tbyte ptr [rsp-0x18]; ret;
0x0004d92d: insb [rdi], dx; and al, 0xe8; ret;
0x0004d993: shl byte ptr [rbp+0x6a], cl; mov dword ptr [rsi], 0; mov eax, 2; ret;
0x0004d996: mov dword ptr [rsi], 0; mov eax, 2; ret;
0x0004d9a0: add bl, al; nop [rax+rax]; bts rdx, 0x30; mov eax, 2; mov [rdi+8], rdx; ret;
0x0004d9a2: nop [rax+rax]; bts rdx, 0x30; mov eax, 2; mov [rdi+8], rdx; ret;
0x0004d9a3: nop [rax+rax]; bts rdx, 0x30; mov eax, 2; mov [rdi+8], rdx; ret;
0x0004d9a5: add [rax], r8b; bts rdx, 0x30; mov eax, 2; mov [rdi+8], rdx; ret;
0x0004d9a6: add [rax], al; bts rdx, 0x30; mov eax, 2; mov [rdi+8], rdx; ret;
0x0004d9a8: bts rdx, 0x30; mov eax, 2; mov [rdi+8], rdx; ret;
0x0004d9a9: bts edx, 0x30; mov eax, 2; mov [rdi+8], rdx; ret;
0x0004d9ac: xor [rax+2], bh; mov [rdi+8], rdx; ret;
0x0004d9ad: mov eax, 2; mov [rdi+8], rdx; ret;
0x0004d9ae: add al, [rax]; add [rax], al; mov [rdi+8], rdx; ret;
0x0004d9b0: add [rax], al; mov [rdi+8], rdx; ret;
0x0004d9b2: mov [rdi+8], rdx; ret;
0x0004d9e2: mov [rdi+8], rax; mov eax, 0xffffbfd1; sub eax, r8d; mov [rsi], eax; mov eax, 2; ret;
0x0004d9e3: mov [rdi+8], eax; mov eax, 0xffffbfd1; sub eax, r8d; mov [rsi], eax; mov eax, 2; ret;
0x0004d9e4: or [r8-0x402f], r15b; sub eax, r8d; mov [rsi], eax; mov eax, 2; ret;
0x0004d9e5: or [rax-0x402f], bh; sub eax, r8d; mov [rsi], eax; mov eax, 2; ret;
0x0004d9e6: mov eax, 0xffffbfd1; sub eax, r8d; mov [rsi], eax; mov eax, 2; ret;
0x0004d9ea: inc dword ptr [rcx+rbp-0x40]; mov [rsi], eax; mov eax, 2; ret;
0x0004d9eb: sub eax, r8d; mov [rsi], eax; mov eax, 2; ret;
0x0004d9ec: sub eax, eax; mov [rsi], eax; mov eax, 2; ret;
0x0004d9fb: add [rax], al; add [rax], al; add [rdi+rcx-0x43], cl; ret 0x40b9;
0x0004d9fd: add [rax], al; add [rdi+rcx-0x43], cl; ret 0x40b9;
0x0004d9ff: add [rdi+rcx-0x43], cl; ret 0x40b9;
0x0004da03: ret 0x40b9;
0x0004da2a: dec dword ptr [rcx+rcx-0x36]; sub eax, r8d; mov [rdi+8], rdx; mov [rsi], eax; mov eax, 2; ret;
0x0004da2b: or rdx, r9; sub eax, r8d; mov [rdi+8], rdx; mov [rsi], eax; mov eax, 2; ret;
0x0004da2c: or edx, ecx; sub eax, r8d; mov [rdi+8], rdx; mov [rsi], eax; mov eax, 2; ret;
0x0004da2e: sub eax, r8d; mov [rdi+8], rdx; mov [rsi], eax; mov eax, 2; ret;
0x0004da2f: sub eax, eax; mov [rdi+8], rdx; mov [rsi], eax; mov eax, 2; ret;
0x0004da30: ror byte ptr [rax-0x77], 0x57; or [rcx+0x2b806], cl; add [rax], al; ret;
0x0004da31: mov [rdi+8], rdx; mov [rsi], eax; mov eax, 2; ret;
0x0004da32: mov [rdi+8], edx; mov [rsi], eax; mov eax, 2; ret;
0x0004da33: push rdi; or [rcx+0x2b806], cl; add [rax], al; ret;
0x0004da34: or [rcx+0x2b806], cl; add [rax], al; ret;
0x0004da35: mov [rsi], eax; mov eax, 2; ret;
0x0004da41: sldt [rax]; add [rcx-0x77], cl; ret 0xd129;
0x0004da42: add [rax], al; add [rcx-0x77], cl; ret 0xd129;
0x0004da44: add [rcx-0x77], cl; ret 0xd129;
0x0004df0a: ret 0x1444;
0x0004e01a: in al, 0xff; dec dword ptr [rax-0x7d]; ret;
0x0004e3ad: std; call qword ptr [rax-0x76b6a8bf];
0x0004e616: call word ptr [rbx];
0x0004e6b8: pop rdi; jmp qword ptr [rsi+0xf];
0x0004e6bf: add [rax-0x77], cl; fisttp word ptr [rax+0xf], st; mov esi, 0x83480143; ret;
0x0004e6c2: fisttp word ptr [rax+0xf], st; mov esi, 0x83480143; ret;
0x0004e6cb: add [rax-0x77], ecx; ret 0x44f6;
0x0004e809: mov esi, 0xf98341d4; adc [rbx-0x6af06ec4], cl; ret 0x8941;
0x0004e80d: stc; adc [rbx-0x6af06ec4], cl; ret 0x8941;
0x0004e80e: adc [rbx-0x6af06ec4], cl; ret 0x8941;
0x0004e813: xchg ebp, eax; ret 0x8941;
0x0004e97b: add [rax], al; add [rax], al; add [rax-0x7d], cl; ret 0x4101;
0x0004e97d: add [rax], al; add [rax-0x7d], cl; ret 0x4101;
0x0004e97f: add [rax-0x7d], cl; ret 0x4101;
0x0004e99e: ror byte ptr [rdi], 0x84; sti; adc eax, 0x80400000; jmp qword ptr [rbp+0xf];
0x0004e9a0: test bl, bh; adc eax, 0x80400000; jmp qword ptr [rbp+0xf];
0x0004e9a1: sti; adc eax, 0x80400000; jmp qword ptr [rbp+0xf];
0x0004e9a2: adc eax, 0x80400000; jmp qword ptr [rbp+0xf];
0x0004e9a4: add [rax-0x80], al; jmp qword ptr [rbp+0xf];
0x0004e9a7: jmp qword ptr [rbp+0xf];
0x0004ebee: ror dword ptr [rdi], 0x8f; ret 0x13;
0x0004f384: ror byte ptr [rdi], 0x85; ret 0xfff3;
0x0004f4c0: add [rax-0x77], ecx; ret 0xf641;
0x0004f4c3: ret 0xf641;
0x0004f63a: rol byte ptr [rbx-0x57ccf16], 1; or [rdi], ecx; xchg edi, eax; ret 0xd284;
0x0004f63d: xor [rbx-0x68f0f606], al; ret 0xd284;
0x0004f63f: cli; or [rdi], ecx; xchg edi, eax; ret 0xd284;
0x0004f640: or [rdi], ecx; xchg edi, eax; ret 0xd284;
0x0004f642: xchg edi, eax; ret 0xd284;
0x0004f6da: add cl, [rbp-0x7b]; ror byte ptr [rdi], cl; test edx, edi; adc [rax], al; add [rax-0x7af0cf06], al; ret 0x11;
0x0004f6dd: ror byte ptr [rdi], cl; test edx, edi; adc [rax], al; add [rax-0x7af0cf06], al; ret 0x11;
0x0004f6df: test edx, edi; adc [rax], al; add [rax-0x7af0cf06], al; ret 0x11;
0x0004f6e0: cli; adc [rax], al; add [rax-0x7af0cf06], al; ret 0x11;
0x0004f6e1: adc [rax], al; add [rax-0x7af0cf06], al; ret 0x11;
0x0004f6e3: add [rax-0x7af0cf06], al; ret 0x11;
0x0004f907: fiadd st, dword ptr [rbp-0x7b]; dec dword ptr [rax+0xf]; ret 0x8948;
0x0004fa9b: or al, ch; call qword ptr [rsi-3];
0x0004fa9d: call qword ptr [rsi-3];
0x0004fcca: cli; add [rdi], ecx; xchg esp, eax; ret 0x2040;
0x0004fccb: add [rdi], ecx; xchg esp, eax; ret 0x2040;
0x0004ff7e: or al, ch; lodsb [rsi]; ret;
0x0004ff80: lodsb [rsi]; ret;
0x00050049: test bl, bh; add eax, [rax]; add [rax+0x39], cl; ret;
0x0005004a: sti; add eax, [rax]; add [rax+0x39], cl; ret;
0x0005004b: add eax, [rax]; add [rax+0x39], cl; ret;
0x000501be: add al, ch; mov esp, 0xe90011bd; cwde; in eax, 0xff; jmp qword ptr [rsi+0xf];
0x000501c0: mov esp, 0xe90011bd; cwde; in eax, 0xff; jmp qword ptr [rsi+0xf];
0x000501c1: mov ebp, 0x98e90011; in eax, 0xff; jmp qword ptr [rsi+0xf];
0x000501c3: add cl, ch; cwde; in eax, 0xff; jmp qword ptr [rsi+0xf];
0x000501c5: cwde; in eax, 0xff; jmp qword ptr [rsi+0xf];
0x0005030b: imul ebp, ecx, 0xffffffff; jmp qword ptr [rsi+0xf];
0x00050526: add [rax], al; add [rcx], dh; imul al; add [rbp-3], cl; dec dword ptr [rcx-0x77]; ret;
0x00050528: add [rcx], dh; imul al; add [rbp-3], cl; dec dword ptr [rcx-0x77]; ret;
0x0005052a: imul al; add [rbp-3], cl; dec dword ptr [rcx-0x77]; ret;
0x0005052c: add [rbp-3], cl; dec dword ptr [rcx-0x77]; ret;
0x0005052e: std; dec dword ptr [rcx-0x77]; ret;
0x000509f6: mov rcx, 0xffff0000ffffffff; and rax, rcx; or rax, rdx; mov [rsp-0x10], rax; movdqa xmm0, [rsp-0x18]; ret;
0x000509fd: add bh, bh; dec dword ptr [rax+0x21]; enter 0x948, 0xd0; mov [rsp-0x10], rax; movdqa xmm0, [rsp-0x18]; ret;
0x000509ff: dec dword ptr [rax+0x21]; enter 0x948, 0xd0; mov [rsp-0x10], rax; movdqa xmm0, [rsp-0x18]; ret;
0x00050a00: and rax, rcx; or rax, rdx; mov [rsp-0x10], rax; movdqa xmm0, [rsp-0x18]; ret;
0x00050a01: and eax, ecx; or rax, rdx; mov [rsp-0x10], rax; movdqa xmm0, [rsp-0x18]; ret;
0x00050a02: enter 0x948, 0xd0; mov [rsp-0x10], rax; movdqa xmm0, [rsp-0x18]; ret;
0x00050a03: or rax, rdx; mov [rsp-0x10], rax; movdqa xmm0, [rsp-0x18]; ret;
0x00050a04: or eax, edx; mov [rsp-0x10], rax; movdqa xmm0, [rsp-0x18]; ret;
0x00050a05: ror byte ptr [rax-0x77], 1; and al, 0xf0; movdqa xmm0, [rsp-0x18]; ret;
0x00050a06: mov [rsp-0x10], rax; movdqa xmm0, [rsp-0x18]; ret;
0x00050a07: mov [rsp-0x10], eax; movdqa xmm0, [rsp-0x18]; ret;
0x00050ac3: add [rcx-0x7d], ecx; ret 0x8401;
0x00050adf: add [rax-0x77], cl; ret 0xc083;
0x00050c7c: mov eax, 0x4cf83949; cmovb eax, edi; mov rax, r8; ret;
0x00050c7d: cmp r8, rdi; cmovb r8, rdi; mov rax, r8; ret;
0x00050c7e: cmp eax, edi; cmovb r8, rdi; mov rax, r8; ret;
0x00050c7f: clc; cmovb r8, rdi; mov rax, r8; ret;
0x00050c80: cmovb r8, rdi; mov rax, r8; ret;
0x00050c81: cmovb eax, edi; mov rax, r8; ret;
0x00050d6c: mov rax, 0x7974742f7665642f; mov byte ptr [rdi+8], 0; mov [rdi], rax; mov rax, rdi; ret;
0x00050d76: mov byte ptr [rdi+8], 0; mov [rdi], rax; mov rax, rdi; ret;
0x00050d77: or [r8], r8b; mov [rdi], rax; mov rax, rdi; ret;
0x00050d78: or [rax], al; mov [rdi], rax; mov rax, rdi; ret;
0x00050d7a: mov [rdi], rax; mov rax, rdi; ret;
0x00050d7b: mov [rdi], eax; mov rax, rdi; ret;
0x00050e0c: add [rax], al; add [rbp+0x1f], dh; add rsp, 0x450; pop rbp; ret;
0x00050e0e: add [rbp+0x1f], dh; add rsp, 0x450; pop rbp; ret;
0x00050e11: add rsp, 0x450; pop rbp; ret;
0x00050e12: add esp, 0x450; pop rbp; ret;
0x00050f0a: clc; or [rdi-0x2e], esi; mov rax, r8; ret;
0x00050f0b: or [rdi-0x2e], esi; mov rax, r8; ret;
0x00050f0d: ror byte ptr [rcx+rcx*4-0x40], cl; ret;
0x00050f68: add [rax], al; add [rbp+0x10], dh; add rsp, 0x38; ret;
0x00050f6a: add [rbp+0x10], dh; add rsp, 0x38; ret;
0x0005101c: mov [rcx+rdx*8], rax; add rsp, 8; mov eax, r12d; pop rbx; pop r12; ret;
0x0005101d: mov [rcx+rdx*8], eax; add rsp, 8; mov eax, r12d; pop rbx; pop r12; ret;
0x0005101e: add al, 0xd1; add rsp, 8; mov eax, r12d; pop rbx; pop r12; ret;
0x0005104a: push rbx; xor [rcx-0x77], cl; ror byte ptr [rax-0x75], 0x43; sbb [rax+0x2b], cl; sub [r9+r9*4+4], cl; ret 0x8b48;
0x0005104b: xor [rcx-0x77], cl; ror byte ptr [rax-0x75], 0x43; sbb [rax+0x2b], cl; sub [r9+r9*4+4], cl; ret 0x8b48;
0x0005104e: ror byte ptr [rax-0x75], 0x43; sbb [rax+0x2b], cl; sub [r9+r9*4+4], cl; ret 0x8b48;
0x00051051: sbb [r8+0x2b], cl; sub [r9+r9*4+4], cl; ret 0x8b48;
0x00051052: sbb [rax+0x2b], cl; sub [r9+r9*4+4], cl; ret 0x8b48;
0x00051055: sub [r9+r9*4+4], cl; ret 0x8b48;
0x00051056: sub [rcx+rcx*4+4], cl; ret 0x8b48;
0x00051100: add r12d, 0x30; add rsp, 8; mov eax, r12d; pop rbx; pop r12; ret;
0x00051101: add esp, 0x30; add rsp, 8; mov eax, r12d; pop rbx; pop r12; ret;
0x0005111a: ret 0x1390;
0x00051233: imul eax; idiv dword ptr [rsi]; std; dec dword ptr [rax-0x77]; ret 0x2949;
0x00051235: idiv dword ptr [rsi]; std; dec dword ptr [rax-0x77]; ret 0x2949;
0x00051236: std; dec dword ptr [rax-0x77]; ret 0x2949;
0x00051237: std; dec dword ptr [rax-0x77]; ret 0x2949;
0x00051488: ret 0xc789;
0x00051514: test esi, eax; sbb eax, [rax]; add [rsi+0xf], ah; outsd dx, [rsi]; ret 0xf66;
0x00051516: sbb eax, [rax]; add [rsi+0xf], ah; outsd dx, [rsi]; ret 0xf66;
0x00051518: add [rsi+0xf], ah; outsd dx, [rsi]; ret 0xf66;
0x00051869: add [rcx-0x7d], al; out dx, eax; add eax, [rbp-0x7b]; dec dword ptr [rdi]; lahf; ret 0x87e;
0x0005186c: out dx, eax; add eax, [rbp-0x7b]; dec dword ptr [rdi]; lahf; ret 0x87e;
0x0005186d: add eax, [rbp-0x7b]; dec dword ptr [rdi]; lahf; ret 0x87e;
0x00051870: dec dword ptr [rdi]; lahf; ret 0x87e;
0x00051872: lahf; ret 0x87e;
0x00051873: ret 0x87e;
0x00051910: test [rsi-0x7cfffffa], ebx; ret;
0x00051986: dec dword ptr [rdi]; lahf; ret 0x8f0f;
0x00051988: lahf; ret 0x8f0f;
0x00051d60: ret 0xe57f;
0x00051d89: sar dh, 0xff; jmp qword ptr [rax+rcx*2-0x75];
0x00051d9c: mov cl, [rcx-0x14373]; inc dword ptr [rax-0x7bf09a07]; hlt; or [rax], eax; add [rax-0x14343], al; jmp qword ptr [rsi+0xf];
0x00051da2: inc dword ptr [rax-0x7bf09a07]; hlt; or [rax], eax; add [rax-0x14343], al; jmp qword ptr [rsi+0xf];
0x00051da7: test ah, dh; or [rax], eax; add [rax-0x14343], al; jmp qword ptr [rsi+0xf];
0x00051da8: hlt; or [rax], eax; add [rax-0x14343], al; jmp qword ptr [rsi+0xf];
0x00051da9: or [rax], eax; add [rax-0x14343], al; jmp qword ptr [rsi+0xf];
0x00051dab: add [rax-0x14343], al; jmp qword ptr [rsi+0xf];
0x00051ee5: call far fword ptr [rdx-0x77];
0x000520fe: lea ebx, [rdi+rdi*8-1]; jmp qword ptr [rsi+0xf];
0x00052105: outsd dx, [rsi]; ret 0x2be;
0x00052106: ret 0x2be;
0x000522c4: out 0x83, eax; ret;
0x00052368: jmp qword ptr [rsi+0x25];
0x000524e7: dec dword ptr [r8-0x77]; ret 0xf748;
0x00052595: mov byte ptr [rax+rcx*2], 0x89; iretd;
0x000525b8: jmp far fword ptr [rbp+0x7f];
0x0005262a: add [rdi], cl; test [rcx-0x16000004], edx; ret;
0x0005262c: test [rcx-0x16000004], edx; ret;
0x0005266e: call qword ptr [rax+0x4003d66];
0x0005274b: and al, 0x2f; std; call qword ptr [rax+0xb60f41];
0x0005274d: std; call qword ptr [rax+0xb60f41];
0x0005274e: call qword ptr [rax+0xb60f41];
0x0005279e: call qword ptr [rax-0x9b7a77];
0x000527e2: pop rdi; idiv bh; jmp qword ptr [rsi+0x2e];
0x0005287e: add eax, [rax]; add bh, al; test [rdi+rdi*8-1], esp; jmp qword ptr [rsi];
0x00052880: add bh, al; test [rdi+rdi*8-1], esp; jmp qword ptr [rsi];
0x0005290e: add edi, eax; test [rdi+rdi*8-1], esp; jmp qword ptr [rsi];
0x00052916: add [rax], al; add [rcx-0x1237b], cl; jmp far fword ptr [rcx];
0x00052918: add [rcx-0x1237b], cl; jmp far fword ptr [rcx];
0x0005298d: dec dword ptr [rcx+rcx*4+4]; ret 0x85c7;
0x00052991: ret 0x85c7;
0x00052a3a: add [rcx-0x7d], al; out dx, eax; add [rax+0x39], ecx; ret;
0x00052a3d: out dx, eax; add [rax+0x39], ecx; ret;
0x00052dd7: mov [rbp-0xf0], r9d; mov rdx, r8; mov rsi, r13; mov rdi, r12; mov [rbp-0xe8], r8; call rax;
0x00052dd8: mov [rbp-0xf0], ecx; mov rdx, r8; mov rsi, r13; mov rdi, r12; mov [rbp-0xe8], r8; call rax;
0x00052ddd: dec dword ptr [rcx+rcx*4-0x3e]; mov rsi, r13; mov rdi, r12; mov [rbp-0xe8], r8; call rax;
0x00052dde: mov rdx, r8; mov rsi, r13; mov rdi, r12; mov [rbp-0xe8], r8; call rax;
0x00052ddf: mov edx, eax; mov rsi, r13; mov rdi, r12; mov [rbp-0xe8], r8; call rax;
0x00052de1: mov rsi, r13; mov rdi, r12; mov [rbp-0xe8], r8; call rax;
0x00052de2: mov esi, ebp; mov rdi, r12; mov [rbp-0xe8], r8; call rax;
0x00052de3: out dx, al; mov rdi, r12; mov [rbp-0xe8], r8; call rax;
0x00052de4: mov rdi, r12; mov [rbp-0xe8], r8; call rax;
0x00052de5: mov edi, esp; mov [rbp-0xe8], r8; call rax;
0x00052de6: out 0x4c, eax; mov [rbp-0xe8], eax; call rax;
0x00052de7: mov [rbp-0xe8], r8; call rax;
0x00052de8: mov [rbp-0xe8], eax; call rax;
0x00053220: ret 0x8d4b;
0x000532a8: inc edi; test [rdi+rdi*8-1], esp; jmp qword ptr [rsi];
0x000532aa: test [rdi+rdi*8-1], esp; jmp qword ptr [rsi];
0x000532ae: jmp qword ptr [rsi];
0x000533a0: out 0xff, eax; inc dword ptr [rbx-0x9b43]; jmp qword ptr [rsi+0xf];
0x000536b1: xlat [rbx]; dec dword ptr [rcx-0x10743]; inc dword ptr [rax-0x14343]; jmp qword ptr [rdi-0x75];
0x000536b2: dec dword ptr [rcx-0x10743]; inc dword ptr [rax-0x14343]; jmp qword ptr [rdi-0x75];
0x000536b8: inc dword ptr [rax-0x14343]; jmp qword ptr [rdi-0x75];
0x000536be: jmp qword ptr [rdi-0x75];
0x000536c7: inc dword ptr [rbx-0x9b43]; jmp qword ptr [rsi+0xf];
0x00053938: inc dword ptr [rax-0x14343]; jmp qword ptr [rdi+0x75];
0x0005393e: jmp qword ptr [rdi+0x75];
0x00053a4b: dec dword ptr [rdi]; test [rbp-0x1600000e], esp; push rax; in eax, 0xff; jmp qword ptr [rsi+0xf];
0x00053a4d: test [rbp-0x1600000e], esp; push rax; in eax, 0xff; jmp qword ptr [rsi+0xf];
0x00053a53: push rax; in eax, 0xff; jmp qword ptr [rsi+0xf];
0x00053a70: inc dword ptr [rcx-0x41]; add [rax], al; add [rcx+0x29], al; iretd;
0x00053a74: add [rax], al; add [rcx+0x29], al; iretd;
0x00053a76: add [rcx+0x29], al; iretd;
0x00053ae0: dec dword ptr [rcx+rcx*4+0x44]; ret 0xe9f8;
0x00053ae4: ret 0xe9f8;
0x00053da0: inc dword ptr [rcx-0x41]; add [rax], al; add [rax-0x77], cl; inc byte ptr [rcx+0x29]; iretd;
0x00053da4: add [rax], al; add [rax-0x77], cl; inc byte ptr [rcx+0x29]; iretd;
0x00053da6: add [rax-0x77], cl; inc byte ptr [rcx+0x29]; iretd;
0x00053da9: inc byte ptr [rcx+0x29]; iretd;
0x00053e05: adc [rax+0x29], cl; ret 0xc148;
0x00053e14: out 0xff, eax; jmp qword ptr [rsi+0xf];
0x00053e57: add [rcx-0x7d], eax; rol byte ptr [rcx], 0x29; iretd;
0x00053e5a: rol byte ptr [rcx], 0x29; iretd;
0x00053e5b: add [rcx], ebp; iretd;
0x00053e77: add [rbp-0x2dce00b9], cl; div ecx; add r8d, eax; mov eax, r8d; ret;
0x00053e78: lea eax, [rdi-1]; xor edx, edx; div ecx; add r8d, eax; mov eax, r8d; ret;
0x00053e79: push qword ptr [r9]; shl bh, cl; int1; add r8d, eax; mov eax, r8d; ret;
0x00053e7a: push qword ptr [rcx]; shl bh, cl; int1; add r8d, eax; mov eax, r8d; ret;
0x00053e7b: xor edx, edx; div ecx; add r8d, eax; mov eax, r8d; ret;
0x00053e7c: shl bh, cl; int1; add r8d, eax; mov eax, r8d; ret;
0x00053e7d: div ecx; add r8d, eax; mov eax, r8d; ret;
0x00053e7e: int1; add r8d, eax; mov eax, r8d; ret;
0x00053e7f: add r8d, eax; mov eax, r8d; ret;
0x00053e80: add eax, eax; mov eax, r8d; ret;
0x00053eee: sub qword ptr [rip+0x16d6da], 1; pop rbx; mov eax, r8d; pop rbp; pop r12; ret;
0x00053eef: sub dword ptr [rip+0x16d6da], 1; pop rbx; mov eax, r8d; pop rbp; pop r12; ret;
0x00053ef0: sub eax, 0x16d6da; add [rbx+0x44], ebx; mov eax, eax; pop rbp; pop r12; ret;
0x00053ef4: add [rcx], al; pop rbx; mov eax, r8d; pop rbp; pop r12; ret;
0x00053f13: add al, 0x17; add [rax-0x77], cl; ret 0x8548;
0x00053f45: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x16d672]; syscall;
0x00053f46: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x16d672]; syscall;
0x00053f47: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x16d672]; syscall;
0x00053f48: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x16d672]; syscall;
0x00053f49: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x16d672]; syscall;
0x00053f4a: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x16d672]; syscall;
0x00053f4b: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x16d672]; syscall;
0x00053f4c: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x16d672]; syscall;
0x00053f4d: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x16d672]; syscall;
0x00053f4e: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x16d672; syscall;
0x00053f4f: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0x16d672]; syscall;
0x00053f50: add [rax], al; mov eax, 0xca; lea rdi, [rip+0x16d672]; syscall;
0x00053f51: add [rax+0xca], bh; lea rdi, [rip+0x16d672]; syscall;
0x00053f52: mov eax, 0xca; lea rdi, [rip+0x16d672]; syscall;
0x00053f54: add [rax], al; add [rax-0x73], cl; cmp eax, 0x16d672; syscall;
0x00053f55: add [rax], al; lea rdi, [rip+0x16d672]; syscall;
0x00053f56: add [rax-0x73], cl; cmp eax, 0x16d672; syscall;
0x00053f57: lea rdi, [rip+0x16d672]; syscall;
0x00053f58: lea edi, [rip+0x16d672]; syscall;
0x00053f59: cmp eax, 0x16d672; syscall;
0x000540a7: movsxd r8, [rsp+0x18]; mov rdi, r12; sub rsi, rax; mov rax, [rip+0x1702c7]; mov rcx, r14; call qword ptr [rax+r8*8];
0x000540a8: movsxd eax, [rsp+0x18]; mov rdi, r12; sub rsi, rax; mov rax, [rip+0x1702c7]; mov rcx, r14; call qword ptr [rax+r8*8];
0x000540aa: and al, 0x18; mov rdi, r12; sub rsi, rax; mov rax, [rip+0x1702c7]; mov rcx, r14; call qword ptr [rax+r8*8];
0x000540ab: sbb [rcx+rcx*4-0x19], cl; sub rsi, rax; mov rax, [rip+0x1702c7]; mov rcx, r14; call qword ptr [rax+r8*8];
0x000540ac: mov rdi, r12; sub rsi, rax; mov rax, [rip+0x1702c7]; mov rcx, r14; call qword ptr [rax+r8*8];
0x000540ad: mov edi, esp; sub rsi, rax; mov rax, [rip+0x1702c7]; mov rcx, r14; call qword ptr [rax+r8*8];
0x000540ae: out 0x48, eax; sub esi, eax; mov rax, [rip+0x1702c7]; mov rcx, r14; call qword ptr [rax+r8*8];
0x000540af: sub rsi, rax; mov rax, [rip+0x1702c7]; mov rcx, r14; call qword ptr [rax+r8*8];
0x000540b0: sub esi, eax; mov rax, [rip+0x1702c7]; mov rcx, r14; call qword ptr [rax+r8*8];
0x000540b2: mov rax, [rip+0x1702c7]; mov rcx, r14; call qword ptr [rax+r8*8];
0x000540b3: mov eax, [rip+0x1702c7]; mov rcx, r14; call qword ptr [rax+r8*8];
0x000540b4: add eax, 0x1702c7; mov rcx, r14; call qword ptr [rax+r8*8];
0x000540b5: mov dword ptr [rdx], 0x894c0017; int1; call qword ptr [rax+r8*8];
0x000540b6: add dl, [rdi]; add [rcx+rcx*4-0xf], cl; call qword ptr [rax+r8*8];
0x000540b8: add [rcx+rcx*4-0xf], cl; call qword ptr [rax+r8*8];
0x000540b9: mov rcx, r14; call qword ptr [rax+r8*8];
0x000540ba: mov ecx, esi; call qword ptr [rax+r8*8];
0x000540bb: int1; call qword ptr [rax+r8*8];
0x000540bc: call qword ptr [rax+r8*8];
0x000540bd: call qword ptr [rax+rax*8];
0x0005435a: ret 0x12ec;
0x000543b1: ret 0x30be;
0x000547cb: add [rax], al; add [rax], al; add [rdi], cl; mov dh, 0x53; or al, 0xf6; ret 0xf01;
0x000547cd: add [rax], al; add [rdi], cl; mov dh, 0x53; or al, 0xf6; ret 0xf01;
0x000547cf: add [rdi], cl; mov dh, 0x53; or al, 0xf6; ret 0xf01;
0x000547d1: mov dh, 0x53; or al, 0xf6; ret 0xf01;
0x000547d2: push rbx; or al, 0xf6; ret 0xf01;
0x000547d3: or al, 0xf6; ret 0xf01;
0x00054819: add [rbp+rcx*4+0x35], cl; iretd;
0x0005497b: add [rax], al; add [rax], al; add dh, dh; ret 0xf50;
0x0005497d: add [rax], al; add dh, dh; ret 0xf50;
0x0005497f: add dh, dh; ret 0xf50;
0x00054a8b: add [rbp+rcx*4-0x5c], cl; and al, 0x30; add [rax], eax; add [rax+0xf], cl; enter 0xf41, 0x94; ret 0x894c;
0x00054a8e: movsb [rdi], [rsi]; and al, 0x30; add [rax], eax; add [rax+0xf], cl; enter 0xf41, 0x94; ret 0x894c;
0x00054a8f: and al, 0x30; add [rax], eax; add [rax+0xf], cl; enter 0xf41, 0x94; ret 0x894c;
0x00054a91: add [rax], eax; add [rax+0xf], cl; enter 0xf41, 0x94; ret 0x894c;
0x00054a93: add [rax+0xf], cl; enter 0xf41, 0x94; ret 0x894c;
0x00054a97: enter 0xf41, 0x94; ret 0x894c;
0x00054a9a: xchg esp, eax; ret 0x894c;
0x00054ab7: adc [rax-0x77], cl; ret 0xc148;
0x00054aec: push rax; ret;
0x00054f28: sub ebp, ecx; sar dh, 0xff; jmp qword ptr [rsi-0x70];
0x00054f2a: sar dh, 0xff; jmp qword ptr [rsi-0x70];
0x00054f42: adc [rax], al; add [rax], al; add [rcx-0x77], al; ret;
0x00055063: add al, 0xc7; add al, 0x30; add [rax], al; add [rcx+0x39], cl; ret 0x840f;
0x00055066: add al, 0x30; add [rax], al; add [rcx+0x39], cl; ret 0x840f;
0x00055068: add [rax], al; add [rcx+0x39], cl; ret 0x840f;
0x0005506a: add [rcx+0x39], cl; ret 0x840f;
0x0005532e: call qword ptr [rax-0x5f6a74b8];
0x00055648: push rax; add [rax-0x77], ecx; push rbp; sub dh, al; add [rip-0xffb17], ch; jmp qword ptr [rsi+0x2e];
0x00055649: add [rax-0x77], ecx; push rbp; sub dh, al; add [rip-0xffb17], ch; jmp qword ptr [rsi+0x2e];
0x0005564c: push rbp; sub dh, al; add [rip-0xffb17], ch; jmp qword ptr [rsi+0x2e];
0x0005564d: sub dh, al; add [rip-0xffb17], ch; jmp qword ptr [rsi+0x2e];
0x0005564f: add [rip-0xffb17], ch; jmp qword ptr [rsi+0x2e];
0x00055650: sub eax, 0xfff004e9; jmp qword ptr [rsi+0x2e];
0x000557c3: mov cl, 0xfe; cld; jmp qword ptr [rsi+0xf];
0x000558f3: shr ebp, 0xff; jmp qword ptr [rsi+0xf];
0x00055d61: inc dword ptr [rcx-0x7d]; ret;
0x00055dc8: add cl, ch; stosb [rdi]; clc; cld; jmp qword ptr [rsi-0x70];
0x00055dca: stosb [rdi]; clc; cld; jmp qword ptr [rsi-0x70];
0x00055dcb: clc; cld; jmp qword ptr [rsi-0x70];
0x00055dcc: cld; jmp qword ptr [rsi-0x70];
0x00055de7: add [rbx-0x7cb7fbbd], cl; ret;
0x00055e07: mov dword ptr fs:[rax], 0x16; pop rbx; mov eax, r8d; pop rbp; pop r12; ret;
0x00055e08: mov dword ptr [rax], 0x16; pop rbx; mov eax, r8d; pop rbp; pop r12; ret;
0x00055e0b: add [rax], al; add [rbx+0x44], bl; mov eax, eax; pop rbp; pop r12; ret;
0x00055e0c: add [rax], al; pop rbx; mov eax, r8d; pop rbp; pop r12; ret;
0x00055e0d: add [rbx+0x44], bl; mov eax, eax; pop rbp; pop r12; ret;
0x00055ed2: add [rbp+0x5b5975c0], al; mov eax, r8d; pop rbp; sub dword ptr [rip+0x16b701], 1; pop r12; ret;
0x00055ed4: shl byte ptr [rbp+0x59], 0x5b; mov eax, r8d; pop rbp; sub dword ptr [rip+0x16b701], 1; pop r12; ret;
0x00055ed7: pop rbx; mov eax, r8d; pop rbp; sub dword ptr [rip+0x16b701], 1; pop r12; ret;
0x00055ed8: mov eax, r8d; pop rbp; sub dword ptr [rip+0x16b701], 1; pop r12; ret;
0x00055ed9: mov eax, eax; pop rbp; sub dword ptr [rip+0x16b701], 1; pop r12; ret;
0x00055eda: rcr byte ptr [rbp-0x7d], 0x2d; add [rdi+0x41010016], esi; pop rsp; ret;
0x00055edb: pop rbp; sub dword ptr [rip+0x16b701], 1; pop r12; ret;
0x00055edc: sub dword ptr [rip+0x16b701], 1; pop r12; ret;
0x00055edd: sub eax, 0x16b701; add [rcx+0x5c], eax; ret;
0x00055ede: add [rdi+0x41010016], esi; pop rsp; ret;
0x00055edf: mov bh, 0x16; add [rcx], al; pop r12; ret;
0x00055ee1: add [rcx], al; pop r12; ret;
0x00055ee2: add [rcx+0x5c], eax; ret;
0x00055f40: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x16b68a]; syscall;
0x00055f41: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x16b68a]; syscall;
0x00055f42: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x16b68a]; syscall;
0x00055f43: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x16b68a]; syscall;
0x00055f44: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x16b68a]; syscall;
0x00055f45: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x16b68a]; syscall;
0x00055f46: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x16b68a]; syscall;
0x00055f47: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x16b68a]; syscall;
0x00055f48: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x16b68a]; syscall;
0x00055f49: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x16b68a]; syscall;
0x00055f4a: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x16b68a; syscall;
0x00055f4b: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0x16b68a]; syscall;
0x00055f4c: add [rax], al; mov eax, 0xca; lea rdi, [rip+0x16b68a]; syscall;
0x00055f4d: add [rax+0xca], bh; lea rdi, [rip+0x16b68a]; syscall;
0x00055f4e: mov eax, 0xca; lea rdi, [rip+0x16b68a]; syscall;
0x00055f50: add [rax], al; add [rax-0x73], cl; cmp eax, 0x16b68a; syscall;
0x00055f51: add [rax], al; lea rdi, [rip+0x16b68a]; syscall;
0x00055f52: add [rax-0x73], cl; cmp eax, 0x16b68a; syscall;
0x00055f53: lea rdi, [rip+0x16b68a]; syscall;
0x00055f54: lea edi, [rip+0x16b68a]; syscall;
0x00055f55: cmp eax, 0x16b68a; syscall;
0x00055fe3: add [rax-0x7d], ecx; ret 0x8404;
0x00055fe6: ret 0x8404;
0x00056037: mov edx, 0x1b85b; add [rax], al; pop rbp; pop r12; pop r13; ret;
0x000560ab: xor [rbx-0x7cb7fb8e], cl; ret 0x4804;
0x000560cc: clc; add cl, [rax+0x39]; enter 0x97e, 0x8b; outsd dx, [rsi]; or [rcx-0x77], al; ret;
0x000560cd: add cl, [rax+0x39]; enter 0x97e, 0x8b; outsd dx, [rsi]; or [rcx-0x77], al; ret;
0x000560d0: enter 0x97e, 0x8b; outsd dx, [rsi]; or [rcx-0x77], al; ret;
0x000560d2: or [rbx-0x76bef791], ecx; ret;
0x000560d4: outsd dx, [rsi]; or [rcx-0x77], al; ret;
0x000560d5: or [rcx-0x77], al; ret;
0x000560f4: ror byte ptr [rcx+rcx*4+0x2b], 0x5b; pop rbp; pop r12; pop r13; ret;
0x000560f5: mov [rbx], r13; pop rbx; pop rbp; pop r12; pop r13; ret;
0x000560f6: mov [rbx], ebp; pop rbx; pop rbp; pop r12; pop r13; ret;
0x000560f7: sub ebx, [rbx+0x5d]; pop r12; pop r13; ret;
0x00056107: mov ecx, 0x1b85b; add [rax], al; pop rbp; pop r12; pop r13; ret;
0x00056108: pop rbx; mov eax, 1; pop rbp; pop r12; pop r13; ret;
0x00056109: mov eax, 1; pop rbp; pop r12; pop r13; ret;
0x0005610a: add [rax], eax; add [rax], al; pop rbp; pop r12; pop r13; ret;
0x0005610b: add [rax], al; add [rbp+0x41], bl; pop rsp; pop r13; ret;
0x00056168: add [rcx+0x1680d105], cl; add [rcx+0x63], cl; ror byte ptr [rax-0x77], 0x5c; ret 0x64c0;
0x0005616b: rol dword ptr [rax+0x63490016], 1; ror byte ptr [rax-0x77], 0x5c; ret 0x64c0;
0x0005616e: add [rcx+0x63], cl; ror byte ptr [rax-0x77], 0x5c; ret 0x64c0;
0x00056171: ror byte ptr [rax-0x77], 0x5c; ret 0x64c0;
0x00056174: pop rsp; ret 0x64c0;
0x00056175: ret 0x64c0;
0x0005617c: add [rax], al; add [rbp-0x7cca8a40], al; sub eax, 0x16b45e; add [rcx+rcx*4-0x40], eax; pop rbx; ret;
0x0005617e: add [rbp-0x7cca8a40], al; sub eax, 0x16b45e; add [rcx+rcx*4-0x40], eax; pop rbx; ret;
0x00056180: shl byte ptr [rbp+0x35], 0x83; sub eax, 0x16b45e; add [rcx+rcx*4-0x40], eax; pop rbx; ret;
0x00056183: sub dword ptr [rip+0x16b45e], 1; mov eax, r8d; pop rbx; ret;
0x00056184: sub eax, 0x16b45e; add [rcx+rcx*4-0x40], eax; pop rbx; ret;
0x00056185: pop rsi; mov ah, 0x16; add [rcx], al; mov eax, r8d; pop rbx; ret;
0x00056186: mov ah, 0x16; add [rcx], al; mov eax, r8d; pop rbx; ret;
0x00056188: add [rcx], al; mov eax, r8d; pop rbx; ret;
0x00056189: add [rcx+rcx*4-0x40], eax; pop rbx; ret;
0x000561c5: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x16b40a]; syscall;
0x000561c6: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x16b40a]; syscall;
0x000561c7: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x16b40a]; syscall;
0x000561c8: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x16b40a]; syscall;
0x000561c9: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x16b40a]; syscall;
0x000561ca: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x16b40a]; syscall;
0x000561cb: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x16b40a]; syscall;
0x000561cc: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x16b40a]; syscall;
0x000561cd: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x16b40a]; syscall;
0x000561ce: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x16b40a; syscall;
0x000561cf: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0x16b40a]; syscall;
0x000561d0: add [rax], al; mov eax, 0xca; lea rdi, [rip+0x16b40a]; syscall;
0x000561d1: add [rax+0xca], bh; lea rdi, [rip+0x16b40a]; syscall;
0x000561d2: mov eax, 0xca; lea rdi, [rip+0x16b40a]; syscall;
0x000561d4: add [rax], al; add [rax-0x73], cl; cmp eax, 0x16b40a; syscall;
0x000561d5: add [rax], al; lea rdi, [rip+0x16b40a]; syscall;
0x000561d6: add [rax-0x73], cl; cmp eax, 0x16b40a; syscall;
0x000561d7: lea rdi, [rip+0x16b40a]; syscall;
0x000561d8: lea edi, [rip+0x16b40a]; syscall;
0x000561d9: cmp eax, 0x16b40a; syscall;
0x00056270: and eax, 0x950f0100; ret 0x8366;
0x00056272: add [rdi], ecx; xchg ebp, eax; ret 0x8366;
0x00056274: xchg ebp, eax; ret 0x8366;
0x00056351: adc [rsi+0xf], ah; outsd dx, [rsi]; ret 0xd5e8;
0x00056354: outsd dx, [rsi]; ret 0xd5e8;
0x00056355: ret 0xd5e8;
0x0005636f: add [rsi+0xf], ah; outsd dx, [rsi]; ret 0x290f;
0x00056372: outsd dx, [rsi]; ret 0x290f;
0x00056373: ret 0x290f;
0x000564ab: add [rax], al; add [rax], al; add [rcx+0xf], al; mov dh, 0x56; or al, 0xf6; ret 0x7401;
0x000564ad: add [rax], al; add [rcx+0xf], al; mov dh, 0x56; or al, 0xf6; ret 0x7401;
0x000564af: add [rcx+0xf], al; mov dh, 0x56; or al, 0xf6; ret 0x7401;
0x000564b2: mov dh, 0x56; or al, 0xf6; ret 0x7401;
0x000564b3: push rsi; or al, 0xf6; ret 0x7401;
0x000564b4: or al, 0xf6; ret 0x7401;
0x000565c6: scasb [rdi]; ret 0x13;
0x00056661: ret 0xf50;
0x000566b1: adc [rax+0x39], cl; ret 0x850f;
0x000566c3: inc dword ptr [rcx+0xf]; mov dh, 0x56; or al, 0xf6; ret 0xf40;
0x000566c6: mov dh, 0x56; or al, 0xf6; ret 0xf40;
0x000566c7: push rsi; or al, 0xf6; ret 0xf40;
0x000566c8: or al, 0xf6; ret 0xf40;
0x0005678a: adc eax, 0x39480002; ret;
0x0005679e: call qword ptr [rax+0x4ec8341];
0x000567e8: push rax; add [rax-0x77], ecx; push rbp; sub dh, al; add [rip-0xe917], ch; jmp qword ptr [rsi+0x2e];
0x000567e9: add [rax-0x77], ecx; push rbp; sub dh, al; add [rip-0xe917], ch; jmp qword ptr [rsi+0x2e];
0x000567ec: push rbp; sub dh, al; add [rip-0xe917], ch; jmp qword ptr [rsi+0x2e];
0x000567ed: sub dh, al; add [rip-0xe917], ch; jmp qword ptr [rsi+0x2e];
0x000567ef: add [rip-0xe917], ch; jmp qword ptr [rsi+0x2e];
0x000567f0: sub eax, 0xffff16e9; jmp qword ptr [rsi+0x2e];
0x000568ee: call qword ptr [rax-0x900cebb];
0x000568f2: push rsi; ret 0xf40;
0x00056a6c: ret 0x4c8b;
0x00056a91: ret 0x8b45;
0x00056b7a: shr al, 1; mov al, [0x8948ee89440001f1]; ret 0x7e9;
0x00056b7c: mov al, [0x8948ee89440001f1]; ret 0x7e9;
0x00056b85: ret 0x7e9;
0x00056c19: shl eax, 8; and eax, 0x100; or eax, 7; mov [rdx], eax; mov eax, 1; ret;
0x00056c1b: or [rip+0x100], ah; or eax, 7; mov [rdx], eax; mov eax, 1; ret;
0x00056c1c: and eax, 0x100; or eax, 7; mov [rdx], eax; mov eax, 1; ret;
0x00056c1d: add [rcx], al; add [rax], al; or eax, 7; mov [rdx], eax; mov eax, 1; ret;
0x00056c1e: add [rax], eax; add [rbx+0x28907c8], al; mov eax, 1; ret;
0x00056c1f: add [rax], al; or eax, 7; mov [rdx], eax; mov eax, 1; ret;
0x00056c20: add [rbx+0x28907c8], al; mov eax, 1; ret;
0x00056c21: or eax, 7; mov [rdx], eax; mov eax, 1; ret;
0x00056c22: enter 0x8907, 2; mov eax, 1; ret;
0x0005741f: add [rbp+0x1a], dh; add rsp, 0x410; pop rbp; pop r12; pop r13; ret;
0x00057422: add rsp, 0x410; pop rbp; pop r12; pop r13; ret;
0x00057423: add esp, 0x410; pop rbp; pop r12; pop r13; ret;
0x00057425: adc [rax+rax], al; add [rbp+0x41], bl; pop rsp; pop r13; ret;
0x00057426: add al, 0; add [rbp+0x41], bl; pop rsp; pop r13; ret;
0x0005761b: add [rbp+0x45], dh; add rsp, 0x10; pop rbx; pop r12; pop r13; ret;
0x0005761e: add rsp, 0x10; pop rbx; pop r12; pop r13; ret;
0x0005761f: add esp, 0x10; pop rbx; pop r12; pop r13; ret;
0x00057621: adc [rbx+0x41], bl; pop rsp; pop r13; ret;
0x000576c0: add [rbp+0x71], dh; add rsp, 0x1018; mov rax, r12; pop rbp; pop r12; ret;
0x000576c3: add rsp, 0x1018; mov rax, r12; pop rbp; pop r12; ret;
0x000576c4: add esp, 0x1018; mov rax, r12; pop rbp; pop r12; ret;
0x000576c6: sbb [rax], dl; add [rax], al; mov rax, r12; pop rbp; pop r12; ret;
0x000576c7: adc [rax], al; add [rcx+rcx*4-0x20], cl; pop rbp; pop r12; ret;
0x000576c8: add [rax], al; mov rax, r12; pop rbp; pop r12; ret;
0x000576c9: add [rcx+rcx*4-0x20], cl; pop rbp; pop r12; ret;
0x000577a3: add [rbp+0x37], dh; add rsp, 0x28; mov rax, r12; pop rbx; pop r12; ret;
0x000577a6: add rsp, 0x28; mov rax, r12; pop rbx; pop r12; ret;
0x000577a7: add esp, 0x28; mov rax, r12; pop rbx; pop r12; ret;
0x000577a9: sub [rcx+rcx*4-0x20], cl; pop rbx; pop r12; ret;
0x00057824: fadd st, dword ptr [rbp-0x7b]; shl byte ptr [rbp+6], 0x5b; ret;
0x00057827: shl byte ptr [rbp+6], 0x5b; ret;
0x0005782c: nop [rax]; xor eax, eax; pop rbx; ret;
0x000578b0: add [rax], al; add [rbp+9], dh; add rsp, 0x1010; pop rbp; ret;
0x000578b2: add [rbp+9], dh; add rsp, 0x1010; pop rbp; ret;
0x000578b5: add rsp, 0x1010; pop rbp; ret;
0x000578b6: add esp, 0x1010; pop rbp; ret;
0x000578b8: adc [rax], dl; add [rax], al; pop rbp; ret;
0x00057938: hlt; xlat [rbx]; cld; dec dword ptr [rax-0x77]; ret 0x16eb;
0x00057939: xlat [rbx]; cld; dec dword ptr [rax-0x77]; ret 0x16eb;
0x0005793a: cld; dec dword ptr [rax-0x77]; ret 0x16eb;
0x0005793b: dec dword ptr [rax-0x77]; ret 0x16eb;
0x0005793e: ret 0x16eb;
0x00057953: or [rax-0x77], ecx; ret 0x8348;
0x00057aaf: cld; dec dword ptr [rax-0x77]; ret 0x9ee9;
0x00057ab0: dec dword ptr [rax-0x77]; ret 0x9ee9;
0x00057ab3: ret 0x9ee9;
0x00057b24: ret 0x177d;
0x00057bcc: adc [rbx+0x24182444], cl; cmp al, 0xc; ret 0x4489;
0x00057bd2: cmp al, 0xc; ret 0x4489;
0x00057d5a: ret 0x1368;
0x00057e7f: test rax, rax; sete al; add rsp, 0x18; movzx eax, al; neg eax; ret;
0x00057e80: test eax, eax; sete al; add rsp, 0x18; movzx eax, al; neg eax; ret;
0x00057e81: ror byte ptr [rdi], 0x94; ror byte ptr [rax-0x7d], 0xc4; sbb [rdi], cl; mov dh, 0xc0; neg eax; ret;
0x00057e82: sete al; add rsp, 0x18; movzx eax, al; neg eax; ret;
0x00057e83: xchg esp, eax; ror byte ptr [rax-0x7d], 0xc4; sbb [rdi], cl; mov dh, 0xc0; neg eax; ret;
0x00057eae: dec byte ptr [rcx+rcx+0xfc08500]; xchg ebp, eax; ror byte ptr [rdi], 0xb6; shl bh, 0xd8; pop rbp; ret;
0x00057eaf: mov [rcx], cs; add [rbp-0x3f6af040], al; movzx eax, al; neg eax; pop rbp; ret;
0x00057eb1: add [rbp-0x3f6af040], al; movzx eax, al; neg eax; pop rbp; ret;
0x00057eb2: test eax, eax; setne al; movzx eax, al; neg eax; pop rbp; ret;
0x00057eb3: ror byte ptr [rdi], 0x95; ror byte ptr [rdi], 0xb6; shl bh, 0xd8; pop rbp; ret;
0x00057eb4: setne al; movzx eax, al; neg eax; pop rbp; ret;
0x00057eb5: xchg ebp, eax; ror byte ptr [rdi], 0xb6; shl bh, 0xd8; pop rbp; ret;
0x00057eb6: ror byte ptr [rdi], 0xb6; shl bh, 0xd8; pop rbp; ret;
0x00057eb7: movzx eax, al; neg eax; pop rbp; ret;
0x00057eb8: mov dh, 0xc0; neg eax; pop rbp; ret;
0x00057eb9: shl bh, 0xd8; pop rbp; ret;
0x00057eba: neg eax; pop rbp; ret;
0x00057ebb: fcomp st, dword ptr [rbp-0x3d]; xchg ax, ax; mov eax, 0xffffffff; pop rbp; ret;
0x00057ebe: xchg ax, ax; mov eax, 0xffffffff; pop rbp; ret;
0x00057ebf: nop; mov eax, 0xffffffff; pop rbp; ret;
0x00057ec7: nop [rax+rax]; mov eax, 0x52; syscall;
0x00057ec8: nop [rax+rax]; mov eax, 0x52; syscall;
0x00057eca: test [rax], al; add [rax], al; add [rax], al; mov eax, 0x52; syscall;
0x00057ecb: add [rax], al; add [rax], al; add [rax+0x52], bh; syscall;
0x00057ecc: add [rax], al; add [rax], al; mov eax, 0x52; syscall;
0x00057ecd: add [rax], al; add [rax+0x52], bh; syscall;
0x00057ece: add [rax], al; mov eax, 0x52; syscall;
0x00057ecf: add [rax+0x52], bh; syscall;
0x00057ed0: mov eax, 0x52; syscall;
0x00057ee2: adc eax, 0x165f89; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x00057ee3: mov [rdi+0x16], ebx; add bh, dh; fsub st, dword ptr [rcx+rcx*4+2]; mov eax, 0xffffffff; ret;
0x00057ef0: inc ebx; nop [rax+rax]; nop [rax]; mov r10, rcx; mov eax, 0x108; syscall;
0x00057ef2: nop [rax+rax]; nop [rax]; mov r10, rcx; mov eax, 0x108; syscall;
0x00057ef3: nop [rax+rax]; nop [rax]; mov r10, rcx; mov eax, 0x108; syscall;
0x00057ef4: nop [rax+rax]; nop [rax]; mov r10, rcx; mov eax, 0x108; syscall;
0x00057ef8: add [rax], al; add [rax], al; nop [rax]; mov r10, rcx; mov eax, 0x108; syscall;
0x00057efa: add [rax], al; nop [rax]; mov r10, rcx; mov eax, 0x108; syscall;
0x00057efc: nop [rax]; mov r10, rcx; mov eax, 0x108; syscall;
0x00057f00: mov r10, rcx; mov eax, 0x108; syscall;
0x00057f01: mov edx, ecx; mov eax, 0x108; syscall;
0x00057f03: mov eax, 0x108; syscall;
0x00057f04: or [rcx], al; add [rax], al; syscall;
0x00057f17: add [rax-0x75], cl; adc eax, 0x165f51; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x00057f1a: adc eax, 0x165f51; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x00057f38: mov eax, 0x13c; syscall;
0x00057f39: cmp al, 1; add [rax], al; syscall;
0x00057f46: cmp [rcx-0x77], eax; rol byte ptr [rbx+0x974fff8], 0x44; mov eax, eax; ret;
0x00057f49: rol byte ptr [rbx+0x974fff8], 0x44; mov eax, eax; ret;
0x00057f4b: clc; push qword ptr [rcx+rcx+0x44]; mov eax, eax; ret;
0x00057f4c: push qword ptr [rcx+rcx+0x44]; mov eax, eax; ret;
0x00057f4e: or [rcx+rcx*4-0x40], eax; ret;
0x00057f61: add al, [rbx+0x277426f8]; mov r8d, 0xffffffff; mov eax, r8d; ret;
0x00057fe1: mov [rdi+8], rbp; add dword ptr [rdi+4], 1; add rsp, 8; pop rbx; pop rbp; ret;
0x00057fe2: mov [rdi+8], ebp; add dword ptr [rdi+4], 1; add rsp, 8; pop rbx; pop rbp; ret;
0x00057fe3: outsd dx, [rsi]; or [rbx+0x48010447], al; add esp, 8; pop rbx; pop rbp; ret;
0x00057fe4: or [rbx+0x48010447], al; add esp, 8; pop rbx; pop rbp; ret;
0x00057fe5: add dword ptr [rdi+4], 1; add rsp, 8; pop rbx; pop rbp; ret;
0x00058039: xor al, [rbp+0x481a75c0]; mov edx, [rdi+0x88]; mov [rdx+8], rcx; mov dword ptr [rdx+4], 1; ret;
0x0005803b: shl byte ptr [rbp+0x1a], 0x48; mov edx, [rdi+0x88]; mov [rdx+8], rcx; mov dword ptr [rdx+4], 1; ret;
0x0005803e: mov rdx, [rdi+0x88]; mov [rdx+8], rcx; mov dword ptr [rdx+4], 1; ret;
0x0005803f: mov edx, [rdi+0x88]; mov [rdx+8], rcx; mov dword ptr [rdx+4], 1; ret;
0x00058040: xchg edi, eax; mov [rax], al; add [rax], al; mov [rdx+8], rcx; mov dword ptr [rdx+4], 1; ret;
0x00058041: mov [rax], al; add [rax], al; mov [rdx+8], rcx; mov dword ptr [rdx+4], 1; ret;
0x00058043: add [rax], al; mov [rdx+8], rcx; mov dword ptr [rdx+4], 1; ret;
0x00058045: mov [rdx+8], rcx; mov dword ptr [rdx+4], 1; ret;
0x00058046: mov [rdx+8], ecx; mov dword ptr [rdx+4], 1; ret;
0x00058049: mov dword ptr [rdx+4], 1; ret;
0x0005804b: add al, 1; add [rax], al; add bl, al; nop [rax]; mov eax, 0x10; ret;
0x0005804d: add [rax], al; add bl, al; nop [rax]; mov eax, 0x10; ret;
0x0005804f: add bl, al; nop [rax]; mov eax, 0x10; ret;
0x00058051: nop [rax]; mov eax, 0x10; ret;
0x00058053: add byte ptr [rax], 0; add [rax], al; mov eax, 0x10; ret;
0x00058054: add [rax], al; add [rax], al; mov eax, 0x10; ret;
0x00058055: add [rax], al; add [rax+0x10], bh; ret;
0x00058056: add [rax], al; mov eax, 0x10; ret;
0x00058057: add [rax+0x10], bh; ret;
0x00058058: mov eax, 0x10; ret;
0x0005805a: add [rax], al; add bl, al; xchg ax, ax; add dword ptr [rdx+4], 1; xor eax, eax; ret;
0x0005805c: add bl, al; xchg ax, ax; add dword ptr [rdx+4], 1; xor eax, eax; ret;
0x0005805e: xchg ax, ax; add dword ptr [rdx+4], 1; xor eax, eax; ret;
0x0005805f: nop; add dword ptr [rdx+4], 1; xor eax, eax; ret;
0x00058060: add dword ptr [rdx+4], 1; xor eax, eax; ret;
0x00058062: add al, 1; xor eax, eax; ret;
0x000580b3: shl byte ptr [rbp+0xa], cl; sub dword ptr [rdi], 1; ret;
0x000580b6: sub dword ptr [rdi], 1; ret;
0x000580c6: add ebx, eax; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x000580c8: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; ret;
0x000580c9: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; ret;
0x000580ca: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; syscall; ret;
0x000580cb: mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; ret;
0x000580cc: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; syscall; ret;
0x000580cd: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; syscall; ret;
0x000580ce: add [rax], al; mov esi, 0x81; mov eax, 0xca; syscall; ret;
0x000580cf: add [rsi+0x81], bh; mov eax, 0xca; syscall; ret;
0x000580d0: mov esi, 0x81; mov eax, 0xca; syscall; ret;
0x000580d2: add [rax], al; add [rax+0xca], bh; syscall; ret;
0x000580d3: add [rax], al; mov eax, 0xca; syscall; ret;
0x000580d4: add [rax+0xca], bh; syscall; ret;
0x000580d5: mov eax, 0xca; syscall; ret;
0x000583be: add [rbp+0xd], dh; add rsp, 0x1d0; pop rbp; pop r12; pop r13; ret;
0x000583c0: or eax, 0xd0c48148; add [rax], eax; add [rbp+0x41], bl; pop rsp; pop r13; ret;
0x000583c1: add rsp, 0x1d0; pop rbp; pop r12; pop r13; ret;
0x000583c2: add esp, 0x1d0; pop rbp; pop r12; pop r13; ret;
0x000583c4: rol byte ptr [rcx], 1; add [rax], al; pop rbp; pop r12; pop r13; ret;
0x000583c5: add [rax], eax; add [rbp+0x41], bl; pop rsp; pop r13; ret;
0x0005853a: add [rax], al; add [rax-0x73], cl; or eax, 0x12ac3c; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax;
0x0005853b: add [rax], al; lea rcx, [rip+0x12ac3c]; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax;
0x0005853c: add [rax-0x73], cl; or eax, 0x12ac3c; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax;
0x0005853d: lea rcx, [rip+0x12ac3c]; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax;
0x0005853e: lea ecx, [rip+0x12ac3c]; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax;
0x0005853f: or eax, 0x12ac3c; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax;
0x00058540: cmp al, 0xac; adc al, [rax]; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax;
0x00058541: lodsb [rsi]; adc al, [rax]; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax;
0x000585a5: add [rax], al; add [rax-0x77], cl; ret 0xd0e8;
0x000585a7: add [rax-0x77], cl; ret 0xd0e8;
0x000585aa: ret 0xd0e8;
0x000585cb: add al, [rax]; add [rbx+0x5d], bl; pop r12; pop r13; pop r14; ret;
0x0005860e: cmp al, 0x77; sub cl, [rax-0x73]; or eax, 0x12abd0; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax;
0x00058610: sub cl, [rax-0x73]; or eax, 0x12abd0; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax;
0x00058611: lea rcx, [rip+0x12abd0]; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax;
0x00058612: lea ecx, [rip+0x12abd0]; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax;
0x00058613: or eax, 0x12abd0; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax;
0x00058614: shr byte ptr [rbx+0x63480012], 1; add al, 0x81; add rax, rcx; jmp rax;
0x00058615: stosd [rdi]; adc al, [rax]; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax;
0x00058616: adc al, [rax]; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax;
0x00058a61: add [rax+rax*8-0x74b7cd8c], al; adc [r8-0x75], cl; push rbx; sbb [rax+1], cl; ret 0x14c;
0x00058a63: shl byte ptr [rdx+rsi+0x48], 0x8b; adc [r8-0x75], cl; push rbx; sbb [rax+1], cl; ret 0x14c;
0x00058a65: xor cl, [rax-0x75]; adc [r8-0x75], cl; push rbx; sbb [rax+1], cl; ret 0x14c;
0x00058a68: adc [r8-0x75], cl; push rbx; sbb [rax+1], cl; ret 0x14c;
0x00058a69: adc [rax-0x75], cl; push rbx; sbb [rax+1], cl; ret 0x14c;
0x00058a6c: push rbx; sbb [rax+1], cl; ret 0x14c;
0x00058a6d: sbb [rax+1], cl; ret 0x14c;
0x00058a7a: push rax; add [rax-0x77], ecx; adc eax, [rax-0x78]; sub [rbx+0x5d], bl; pop r12; ret;
0x00058a7b: add [rax-0x77], ecx; adc eax, [rax-0x78]; sub [rbx+0x5d], bl; pop r12; ret;
0x00058a7c: mov [rbx], rdx; mov [rax], bpl; pop rbx; pop rbp; pop r12; ret;
0x00058a7d: mov [rbx], edx; mov [rax], bpl; pop rbx; pop rbp; pop r12; ret;
0x00058a7e: adc eax, [rax-0x78]; sub [rbx+0x5d], bl; pop r12; ret;
0x00058a7f: mov [rax], bpl; pop rbx; pop rbp; pop r12; ret;
0x00058a80: mov [rax], ch; pop rbx; pop rbp; pop r12; ret;
0x00058acd: dec dword ptr [rcx-0x68f73]; jmp qword ptr [rax+rcx*2-0x75];
0x00058b62: ret 0x35;
0x00058c8c: jmp far fword ptr [rax+0x5b850f80];
0x00058cea: add [rcx-0x77], ecx; push rsi; or [rdi+rcx-0x4a], al; cmp [rbx-0x60f7b], cl; dec dword ptr [rax-0x7d]; ret;
0x00058ced: push rsi; or [rdi+rcx-0x4a], al; cmp [rbx-0x60f7b], cl; dec dword ptr [rax-0x7d]; ret;
0x00058cee: or [rdi+rcx-0x4a], al; cmp [rbx-0x60f7b], cl; dec dword ptr [rax-0x7d]; ret;
0x00058cf2: cmp [rbx-0x60f7b], cl; dec dword ptr [rax-0x7d]; ret;
0x00058dc7: mov rsi, [rip+0x16519a]; lea rdi, [rbp-0x5e0]; mov rdx, r14; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00058dc8: mov esi, [rip+0x16519a]; lea rdi, [rbp-0x5e0]; mov rdx, r14; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00058dc9: xor eax, 0x16519a; lea rdi, [rbp-0x5e0]; mov rdx, r14; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00058dcd: add [rax-0x73], cl; mov ebp, 0xfffffa20; mov rdx, r14; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00058dce: lea rdi, [rbp-0x5e0]; mov rdx, r14; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00058dcf: lea edi, [rbp-0x5e0]; mov rdx, r14; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00058dd0: mov ebp, 0xfffffa20; mov rdx, r14; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00058dd4: dec dword ptr [rcx+rcx*4-0xe]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00058dd5: mov rdx, r14; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00058dd6: mov edx, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00058e6e: dec byte ptr [rdi+0x16]; add [rbx-0x5ff4b], cl; jmp qword ptr [rcx+rcx*4+0x30];
0x00058ed8: mov rax, [rip+0x168901]; lea rdi, [rbp-0x5e0]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00058ed9: mov eax, [rip+0x168901]; lea rdi, [rbp-0x5e0]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00058eda: add eax, 0x168901; lea rdi, [rbp-0x5e0]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00058edb: add [rcx-0x72b7ffea], ecx; mov ebp, 0xfffffa20; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00058ede: add [rax-0x73], cl; mov ebp, 0xfffffa20; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00058edf: lea rdi, [rbp-0x5e0]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00058ee0: lea edi, [rbp-0x5e0]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00058ee1: mov ebp, 0xfffffa20; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00058fe1: add [rax], al; lea rsi, [rip+0x12a70a]; movzx eax, al; movsxd rax, [rsi+rax*4]; add rax, rsi; jmp rax;
0x00058fe2: add [rax-0x73], cl; xor eax, 0x12a70a; movzx eax, al; movsxd rax, [rsi+rax*4]; add rax, rsi; jmp rax;
0x00058fe3: lea rsi, [rip+0x12a70a]; movzx eax, al; movsxd rax, [rsi+rax*4]; add rax, rsi; jmp rax;
0x00058fe4: lea esi, [rip+0x12a70a]; movzx eax, al; movsxd rax, [rsi+rax*4]; add rax, rsi; jmp rax;
0x00058fe5: xor eax, 0x12a70a; movzx eax, al; movsxd rax, [rsi+rax*4]; add rax, rsi; jmp rax;
0x00058fe7: cmpsd [rsi], [rdi]; adc al, [rax]; movzx eax, al; movsxd rax, [rsi+rax*4]; add rax, rsi; jmp rax;
0x00058fe8: adc al, [rax]; movzx eax, al; movsxd rax, [rsi+rax*4]; add rax, rsi; jmp rax;
0x0005910c: lea rcx, [rip+0x12a69d]; movzx r12d, r12b; mov r9, [rbp-0x610]; movsxd rax, [rcx+r12*4]; add rax, rcx; jmp rax;
0x0005910d: lea ecx, [rip+0x12a69d]; movzx r12d, r12b; mov r9, [rbp-0x610]; movsxd rax, [rcx+r12*4]; add rax, rcx; jmp rax;
0x0005910e: or eax, 0x12a69d; movzx r12d, r12b; mov r9, [rbp-0x610]; movsxd rax, [rcx+r12*4]; add rax, rcx; jmp rax;
0x00059111: adc al, [rax]; movzx r12d, r12b; mov r9, [rbp-0x610]; movsxd rax, [rcx+r12*4]; add rax, rcx; jmp rax;
0x00059112: add [rbp+0xf], al; mov dh, 0xe4; mov r9, [rbp-0x610]; movsxd rax, [rcx+r12*4]; add rax, rcx; jmp rax;
0x00059113: movzx r12d, r12b; mov r9, [rbp-0x610]; movsxd rax, [rcx+r12*4]; add rax, rcx; jmp rax;
0x00059114: movzx esp, ah; mov r9, [rbp-0x610]; movsxd rax, [rcx+r12*4]; add rax, rcx; jmp rax;
0x00059115: mov dh, 0xe4; mov r9, [rbp-0x610]; movsxd rax, [rcx+r12*4]; add rax, rcx; jmp rax;
0x00059116: in al, 0x4c; mov ecx, [rbp-0x610]; movsxd rax, [rcx+r12*4]; add rax, rcx; jmp rax;
0x00059117: mov r9, [rbp-0x610]; movsxd rax, [rcx+r12*4]; add rax, rcx; jmp rax;
0x00059118: mov ecx, [rbp-0x610]; movsxd rax, [rcx+r12*4]; add rax, rcx; jmp rax;
0x0005911d: dec dword ptr [rdx+0x63]; add al, 0xa1; add rax, rcx; jmp rax;
0x0005911e: movsxd rax, [rcx+r12*4]; add rax, rcx; jmp rax;
0x0005911f: movsxd eax, [rcx]; add rax, rcx; jmp rax;
0x00059120: add al, 0xa1; add rax, rcx; jmp rax;
0x0005935e: mov [0x48fffffcc9830fc2], eax; lea edx, [rip+0x12a593]; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x00059365: dec dword ptr [rax-0x73]; adc eax, 0x12a593; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x00059366: lea rdx, [rip+0x12a593]; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x00059367: lea edx, [rip+0x12a593]; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x00059368: adc eax, 0x12a593; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x0005936a: movsd [rdi], [rsi]; adc al, [rax]; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x0005936b: adc al, [rax]; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000596f7: xchg [rdi+rsi*8-0x72b70001], ebx; xor eax, 0x12a2ad; movzx r12d, r12b; movsxd rax, [rsi+r12*4]; add rax, rsi; jmp rax;
0x000596fb: dec dword ptr [rax-0x73]; xor eax, 0x12a2ad; movzx r12d, r12b; movsxd rax, [rsi+r12*4]; add rax, rsi; jmp rax;
0x000596fc: lea rsi, [rip+0x12a2ad]; movzx r12d, r12b; movsxd rax, [rsi+r12*4]; add rax, rsi; jmp rax;
0x000596fd: lea esi, [rip+0x12a2ad]; movzx r12d, r12b; movsxd rax, [rsi+r12*4]; add rax, rsi; jmp rax;
0x000596fe: xor eax, 0x12a2ad; movzx r12d, r12b; movsxd rax, [rsi+r12*4]; add rax, rsi; jmp rax;
0x000596ff: lodsd [rsi]; mov [0x634ae4b60f450012], al; add al, 0xa6; add rax, rsi; jmp rax;
0x00059700: mov [0x634ae4b60f450012], al; add al, 0xa6; add rax, rsi; jmp rax;
0x00059701: adc al, [rax]; movzx r12d, r12b; movsxd rax, [rsi+r12*4]; add rax, rsi; jmp rax;
0x00059702: add [rbp+0xf], al; mov dh, 0xe4; movsxd rax, [rsi+r12*4]; add rax, rsi; jmp rax;
0x00059703: movzx r12d, r12b; movsxd rax, [rsi+r12*4]; add rax, rsi; jmp rax;
0x00059704: movzx esp, ah; movsxd rax, [rsi+r12*4]; add rax, rsi; jmp rax;
0x00059705: mov dh, 0xe4; movsxd rax, [rsi+r12*4]; add rax, rsi; jmp rax;
0x00059706: in al, 0x4a; movsxd eax, [rsi]; add rax, rsi; jmp rax;
0x00059707: movsxd rax, [rsi+r12*4]; add rax, rsi; jmp rax;
0x00059708: movsxd eax, [rsi]; add rax, rsi; jmp rax;
0x00059709: add al, 0xa6; add rax, rsi; jmp rax;
0x0005970a: cmpsb [rsi], [rdi]; add rax, rsi; jmp rax;
0x00059a09: add [rbx-0x5ff73], cl; jmp qword ptr [rcx+rcx*4+8];
0x00059a53: ret 0xd;
0x00059b7f: ror byte ptr [rdi], 0x95; ret 0x8341;
0x00059b81: xchg ebp, eax; ret 0x8341;
0x00059b8b: ret 0x858b;
0x00059bed: add [rax], al; add [rcx-0x73], al; rol byte ptr [rbx-0x78f0f608], 1; ret;
0x00059bef: add [rcx-0x73], al; rol byte ptr [rbx-0x78f0f608], 1; ret;
0x00059bf3: rol byte ptr [rbx-0x78f0f608], 1; ret;
0x00059c5a: push rax; add [rcx-0x77], ecx; push rbp; or [rdi+rcx-0x4a], al; xor [rax-0x7d], cl; ret;
0x00059c5b: add [rcx-0x77], ecx; push rbp; or [rdi+rcx-0x4a], al; xor [rax-0x7d], cl; ret;
0x00059c5e: push rbp; or [rdi+rcx-0x4a], al; xor [rax-0x7d], cl; ret;
0x00059c5f: or [rdi+rcx-0x4a], al; xor [rax-0x7d], cl; ret;
0x00059c63: xor [rax-0x7d], cl; ret;
0x00059e73: add [rax], al; add [rbx+0x450ffffa], al; ret 0x8589;
0x00059e75: add [rbx+0x450ffffa], al; ret 0x8589;
0x00059e77: cli; dec dword ptr [rdi]; ret 0x8589;
0x00059e78: dec dword ptr [rdi]; ret 0x8589;
0x00059f92: dec dword ptr [rbx-0x62f43]; dec dword ptr [rax-0x77]; ret;
0x0005a137: sar dl, 0xff; dec dword ptr [rax-0x7d]; ret;
0x0005a42c: idiv bh; inc dword ptr [rcx-0x62773]; inc dword ptr [rax]; add [rax], eax; add cl, ch; ret;
0x0005a42e: inc dword ptr [rcx-0x62773]; inc dword ptr [rax]; add [rax], eax; add cl, ch; ret;
0x0005a434: inc dword ptr [rax]; add [rax], eax; add cl, ch; ret;
0x0005a436: add [rax], eax; add cl, ch; ret;
0x0005a50f: add [rax-0x73], cl; add [rax-0x7d], rcx; ret;
0x0005a512: add [rax-0x7d], rcx; ret;
0x0005a782: add [rax], al; add [rax-0x39], cl; test [rax+0xfffffb], ebx; add [rax], al; add [rax-0x7d], cl; ret;
0x0005a784: add [rax-0x39], cl; test [rax+0xfffffb], ebx; add [rax], al; add [rax-0x7d], cl; ret;
0x0005a787: test [rax+0xfffffb], ebx; add [rax], al; add [rax-0x7d], cl; ret;
0x0005a78b: inc dword ptr [rax]; add [rax], al; add [rax-0x7d], cl; ret;
0x0005a83c: dec dword ptr [rax-0x77]; ret 0x11e9;
0x0005a83f: ret 0x11e9;
0x0005a85f: or [rax], eax; add [rcx-0x7d], al; jmp far fword ptr [rax];
0x0005a861: add [rcx-0x7d], al; jmp far fword ptr [rax];
0x0005ac5e: dec dword ptr [rax+0x29]; ret 0x8d48;
0x0005ae99: add [rax-0x7d], cl; clc; dec byte ptr [rdi]; test [rbx+rax], dl; add [rax-0x7d], cl; ret;
0x0005ae9c: clc; dec byte ptr [rdi]; test [rbx+rax], dl; add [rax-0x7d], cl; ret;
0x0005ae9d: dec byte ptr [rdi]; test [rbx+rax], dl; add [rax-0x7d], cl; ret;
0x0005ae9f: test [rbx+rax], dl; add [rax-0x7d], cl; ret;
0x0005aea0: push rsp; add eax, [rax]; add [rax-0x7d], cl; ret;
0x0005b1bb: test dword ptr [rcx+rcx*4-9], 0x2800ce8; add cl, ch; iretd;
0x0005b34b: sub edx, [rsi]; add [rbx-0x5ff7b], cl; jmp qword ptr [rcx+rax*2-0x77];
0x0005b745: dec dword ptr [rbx+rcx*4+0x2c]; ret 0x8589;
0x0005b8f2: push rsi; or [rdi+rcx-0x4a], al; cmp [rcx+0xf], al; mov dh, 0x45; add [rax-0x7d], cl; ret;
0x0005b8f3: or [rdi+rcx-0x4a], al; cmp [rcx+0xf], al; mov dh, 0x45; add [rax-0x7d], cl; ret;
0x0005b8f7: cmp [rcx+0xf], al; mov dh, 0x45; add [rax-0x7d], cl; ret;
0x0005b921: ret 0x9475;
0x0005bcb5: and [rsi], edx; add [rbx-0x5ff7b], cl; jmp qword ptr [rcx+rax*2-0x77];
0x0005bdb0: dec dword ptr [rbx-0x62f6b]; push qword ptr [rcx]; rol byte ptr [rbp-0x3f60f02e], 0x29; ret 0x9589;
0x0005bdb6: push qword ptr [rcx]; rol byte ptr [rbp-0x3f60f02e], 0x29; ret 0x9589;
0x0005bdb8: rol byte ptr [rbp-0x3f60f02e], 0x29; ret 0x9589;
0x0005bde1: add [rcx-0x77], ecx; push rsi; or [rdi+rcx-0x4a], al; cmp [rbx-0x62f7b], cl; dec dword ptr [rax-0x7d]; ret;
0x0005bde4: push rsi; or [rdi+rcx-0x4a], al; cmp [rbx-0x62f7b], cl; dec dword ptr [rax-0x7d]; ret;
0x0005bde5: or [rdi+rcx-0x4a], al; cmp [rbx-0x62f7b], cl; dec dword ptr [rax-0x7d]; ret;
0x0005bde9: cmp [rbx-0x62f7b], cl; dec dword ptr [rax-0x7d]; ret;
0x0005c02e: call qword ptr [rax-0x6f5a74b4];
0x0005c15a: shl edi, 0xff; jmp qword ptr [rsi-0x70];
0x0005c3d4: dec dword ptr [rax+1]; ret 0x8948;
0x0005c5e7: jmp qword ptr [rbp-0x45];
0x0005c7d4: add [rax+rax], al; add [rdi], cl; test esp, ebp; xor al, [rax]; add [rax+0x39], cl; ret;
0x0005c7d5: add al, 0; add [rdi], cl; test esp, ebp; xor al, [rax]; add [rax+0x39], cl; ret;
0x0005c7d7: add [rdi], cl; test esp, ebp; xor al, [rax]; add [rax+0x39], cl; ret;
0x0005c7d9: test esp, ebp; xor al, [rax]; add [rax+0x39], cl; ret;
0x0005c7da: in al, dx; xor al, [rax]; add [rax+0x39], cl; ret;
0x0005c7db: xor al, [rax]; add [rax+0x39], cl; ret;
0x0005c9a9: add [rcx-0x77], al; mov dword ptr [rbx-0x498a0008], 0xb7058b48; adc al, 0x16; add [rcx-0x77], al; fmul st, dword ptr [rbx-0x62f63]; jmp qword ptr [rbx+rcx*4];
0x0005c9ac: mov dword ptr [rbx-0x498a0008], 0xb7058b48; adc al, 0x16; add [rcx-0x77], al; fmul st, dword ptr [rbx-0x62f63]; jmp qword ptr [rbx+rcx*4];
0x0005c9b6: adc al, 0x16; add [rcx-0x77], al; fmul st, dword ptr [rbx-0x62f63]; jmp qword ptr [rbx+rcx*4];
0x0005ca26: mov dh, 0x6b; add [rax-0x7d], ecx; ret;
0x0005caab: dec dword ptr [rdi]; test dh, ah; ret;
0x0005caad: test dh, ah; ret;
0x0005cb9c: clc; dec dword ptr [rdi]; test ah, dh; ret 0xffff;
0x0005cb9d: dec dword ptr [rdi]; test ah, dh; ret 0xffff;
0x0005cb9f: test ah, dh; ret 0xffff;
0x0005cba0: hlt; ret 0xffff;
0x0005cca6: push rax; add [rcx-0x77], ecx; push rsi; or [rdi+rcx-0x4a], al; cmp [rax-0x7d], cl; ret;
0x0005cca7: add [rcx-0x77], ecx; push rsi; or [rdi+rcx-0x4a], al; cmp [rax-0x7d], cl; ret;
0x0005ccaa: push rsi; or [rdi+rcx-0x4a], al; cmp [rax-0x7d], cl; ret;
0x0005ccab: or [rdi+rcx-0x4a], al; cmp [rax-0x7d], cl; ret;
0x0005cde2: adc [rsi], dl; add [rbx-0x5ff4b], cl; jmp qword ptr [rcx+rcx*4+0x30];
0x0005cdfa: ror byte ptr [rdi], cl; ret 0x8589;
0x0005cec8: add [rbx+0x3fcb9], al; add [rdi+rcx-0x7b], ch; ret 0xffbf;
0x0005cecb: cld; add eax, [rax]; add [rdi+rcx-0x7b], ch; ret 0xffbf;
0x0005cecc: add eax, [rax]; add [rdi+rcx-0x7b], ch; ret 0xffbf;
0x0005cece: add [rdi+rcx-0x7b], ch; ret 0xffbf;
0x0005d21c: push rax; or al, 0x16; add [rbx-0x5ff43], cl; jmp qword ptr [rcx+rcx*4+0x38];
0x0005d21d: or al, 0x16; add [rbx-0x5ff43], cl; jmp qword ptr [rcx+rcx*4+0x38];
0x0005d21f: add [rbx-0x5ff43], cl; jmp qword ptr [rcx+rcx*4+0x38];
0x0005d2be: fwait; iretd;
0x0005d2fc: dec dword ptr [rax-0x7d]; mov ebp, 0xfffff958; add [rdi], cl; test ebx, ecx; iretd;
0x0005d2ff: mov ebp, 0xfffff958; add [rdi], cl; test ebx, ecx; iretd;
0x0005d304: add [rdi], cl; test ebx, ecx; iretd;
0x0005d306: test ebx, ecx; iretd;
0x0005d37a: cmp al, 0x82; imul ecx, [rdi], 0x23b785; add [rbx-0x62f6b], cl; push qword ptr [rcx]; rol byte ptr [rbp-0x3f60f02e], 0x29; ret 0x8b48;
0x0005d37c: imul ecx, [rdi], 0x23b785; add [rbx-0x62f6b], cl; push qword ptr [rcx]; rol byte ptr [rbp-0x3f60f02e], 0x29; ret 0x8b48;
0x0005d380: and eax, [rax]; add [rbx-0x62f6b], cl; push qword ptr [rcx]; rol byte ptr [rbp-0x3f60f02e], 0x29; ret 0x8b48;
0x0005d382: add [rbx-0x62f6b], cl; push qword ptr [rcx]; rol byte ptr [rbp-0x3f60f02e], 0x29; ret 0x8b48;
0x0005d388: push qword ptr [rcx]; rol byte ptr [rbp-0x3f60f02e], 0x29; ret 0x8b48;
0x0005d38a: rol byte ptr [rbp-0x3f60f02e], 0x29; ret 0x8b48;
0x0005d402: dec dword ptr [rdi]; lahf; ret 0xd729;
0x0005d404: lahf; ret 0xd729;
0x0005d479: lahf; ret 0xd129;
0x0005d4ee: test byte ptr [rdi], 0x9f; ret 0xd629;
0x0005d4f0: lahf; ret 0xd629;
0x0005d68c: dec dword ptr [rax+1]; ret 0x348;
0x0005d7a1: add [rbx-0x5ff4b], cl; jmp qword ptr [rcx+rcx*4+0x30];
0x0005d7c5: dec dword ptr [rbx+rcx*4+0xd]; mov [0xfffa00858b001606], eax; jmp qword ptr [rcx+rax*2-0x77];
0x0005d7c9: mov [0xfffa00858b001606], eax; jmp qword ptr [rcx+rax*2-0x77];
0x0005d8bd: jmp qword ptr [rbp+0x31];
0x0005d9c7: jmp qword ptr [rbp+0x48];
0x0005d9f9: jmp qword ptr [rdi+rdi*2];
0x0005dae5: dec dword ptr [rcx-0x53f7b]; dec dword ptr [rax-0x75]; add cl, [rax-0x77]; test [rax-0x16000007], ecx; iretd;
0x0005dae8: sar dl, 0xff; dec dword ptr [rax-0x75]; add cl, [rax-0x77]; test [rax-0x16000007], ecx; iretd;
0x0005daeb: dec dword ptr [rax-0x75]; add cl, [rax-0x77]; test [rax-0x16000007], ecx; iretd;
0x0005daee: add cl, [rax-0x77]; test [rax-0x16000007], ecx; iretd;
0x0005daf1: test [rax-0x16000007], ecx; iretd;
0x0005dc86: xchg [rbx-0x76fffff6], ecx; ret 0xc083;
0x0005dd93: and al, 0xe9; ret 0xffe8;
0x0005dd95: ret 0xffe8;
0x0005e0bd: add [rcx-0x77], al; fmul st, dword ptr [rbx-0x62f63]; jmp qword ptr [rbx+rcx*4];
0x0005e0c0: fmul st, dword ptr [rbx-0x62f63]; jmp qword ptr [rbx+rcx*4];
0x0005e29e: clc; dec dword ptr [rdi]; test [rbx+rbx*8-1], eax; dec dword ptr [rbx+rcx*4+0xd]; ret;
0x0005e29f: dec dword ptr [rdi]; test [rbx+rbx*8-1], eax; dec dword ptr [rbx+rcx*4+0xd]; ret;
0x0005e2a1: test [rbx+rbx*8-1], eax; dec dword ptr [rbx+rcx*4+0xd]; ret;
0x0005e2a5: dec dword ptr [rbx+rcx*4+0xd]; ret;
0x0005e968: dec dword ptr [rax-0x75]; pushfq; ret 0xe0;
0x0005e96b: pushfq; ret 0xe0;
0x0005e96c: ret 0xe0;
0x0005e988: dec dword ptr [rax-0x39]; add [rax], al; add [rax], al; add [rax-0x77], cl; ret 0xd8e8;
0x0005e98b: add [rax], al; add [rax], al; add [rax-0x77], cl; ret 0xd8e8;
0x0005e98d: add [rax], al; add [rax-0x77], cl; ret 0xd8e8;
0x0005e98f: add [rax-0x77], cl; ret 0xd8e8;
0x0005e992: ret 0xd8e8;
0x0005ec4f: ret 0xffac;
0x0005ed79: dec dword ptr [rax+0x29]; ret 0x8948;
0x0005ee35: add [rax], al; add [rax-0x39], cl; test [rax+0xfffffb], ebx; add [rax], al; add cl, ch; iretd;
0x0005ee37: add [rax-0x39], cl; test [rax+0xfffffb], ebx; add [rax], al; add cl, ch; iretd;
0x0005ee3a: test [rax+0xfffffb], ebx; add [rax], al; add cl, ch; iretd;
0x0005ee3e: inc dword ptr [rax]; add [rax], al; add cl, ch; iretd;
0x0005ef8f: xchg [rax-0x76ffffff], ecx; ret 0xc083;
0x0005f2b3: mov [rdi+0x38e9ffff], edx; iretd;
0x0005f651: push rdi; iretd;
0x0005fad1: or [rax], al; add [rdi], cl; test [rbx], esi; or [rax], al; add [rax+0x39], cl; ret;
0x0005fad3: add [rdi], cl; test [rbx], esi; or [rax], al; add [rax+0x39], cl; ret;
0x0005fad5: test [rbx], esi; or [rax], al; add [rax+0x39], cl; ret;
0x0005fad7: or [rax], al; add [rax+0x39], cl; ret;
0x0005fe1c: add [rbx-0x6577b], ecx; dec dword ptr [rax-0x7d]; ret;
0x0005ff80: add [rax], eax; add [rax-0x75], cl; lea edx, [rax-0x7c000005]; ret 0x4830;
0x0005ff82: add [rax-0x75], cl; lea edx, [rax-0x7c000005]; ret 0x4830;
0x0005ff85: lea edx, [rax-0x7c000005]; ret 0x4830;
0x000600f8: add [rax-0x77], rcx; lea edx, [rax-0x77000005]; add cl, [rax-0x7d]; ret;
0x000600f9: add [rax-0x77], ecx; lea edx, [rax-0x77000005]; add cl, [rax-0x7d]; ret;
0x000600fc: lea edx, [rax-0x77000005]; add cl, [rax-0x7d]; ret;
0x00060288: add [rbx-0x5ff7b], cl; jmp qword ptr [rcx+rax*2-0x77];
0x000602a0: mov [rsi-4], cs; dec dword ptr [rax-0x77]; ret 0x8348;
0x000602a2: cld; dec dword ptr [rax-0x77]; ret 0x8348;
0x000602a3: dec dword ptr [rax-0x77]; ret 0x8348;
0x00060323: ror byte ptr [rax+0x39], cl; ret 0x850f;
0x0006032e: mov di, di; jmp qword ptr [rsi+0x2e];
0x0006032f: mov edi, edi; jmp qword ptr [rsi+0x2e];
0x00060401: mov [rbx], rdx; mov [rax], ebp; pop rbx; pop rbp; pop r12; ret;
0x00060402: mov [rbx], edx; mov [rax], ebp; pop rbx; pop rbp; pop r12; ret;
0x00060403: adc ecx, [rcx+0x415d5b28]; pop rsp; ret;
0x00060404: mov [rax], ebp; pop rbx; pop rbp; pop r12; ret;
0x00060450: dec dword ptr [rcx-0x59f73]; jmp qword ptr [rax+rcx*2-0x75];
0x000604da: ret 0x1611;
0x00060608: mov al, [0x840fc08548000000]; ret;
0x00060609: add [rax], al; add [rax-0x7b], cl; ror byte ptr [rdi], 0x84; ret;
0x0006060b: add [rax-0x7b], cl; ror byte ptr [rdi], 0x84; ret;
0x000607b0: mov rax, [rip+0x161029]; lea rdi, [rbp-0x550]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000607b1: mov eax, [rip+0x161029]; lea rdi, [rbp-0x550]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000607b2: add eax, 0x161029; lea rdi, [rbp-0x550]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000607b6: add [rax-0x73], cl; mov ebp, 0xfffffab0; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000607b7: lea rdi, [rbp-0x550]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000607b8: lea edi, [rbp-0x550]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000607b9: mov ebp, 0xfffffab0; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0006082f: mov rsi, [rip+0x15d732]; lea rdi, [rbp-0x550]; mov rdx, r15; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00060830: mov esi, [rip+0x15d732]; lea rdi, [rbp-0x550]; mov rdx, r15; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00060831: xor eax, 0x15d732; lea rdi, [rbp-0x550]; mov rdx, r15; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00060835: add [rax-0x73], cl; mov ebp, 0xfffffab0; mov rdx, r15; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00060836: lea rdi, [rbp-0x550]; mov rdx, r15; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00060837: lea edi, [rbp-0x550]; mov rdx, r15; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00060838: mov ebp, 0xfffffab0; mov rdx, r15; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0006083c: dec dword ptr [rcx+rcx*4-6]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0006083d: mov rdx, r15; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0006083e: mov edx, edi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0006083f: cli; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000608c7: fisttp dword ptr [rax-0x39], st; ret 0xffff;
0x000608ec: xor [rbx], al; add [rax], al; lea rsi, [rip+0x123209]; movsxd rcx, [rsi+rcx*4]; add rcx, rsi; jmp rcx;
0x000608ed: add eax, [rax]; add [rax-0x73], cl; xor eax, 0x123209; movsxd rcx, [rsi+rcx*4]; add rcx, rsi; jmp rcx;
0x000608ee: add [rax], al; lea rsi, [rip+0x123209]; movsxd rcx, [rsi+rcx*4]; add rcx, rsi; jmp rcx;
0x000608ef: add [rax-0x73], cl; xor eax, 0x123209; movsxd rcx, [rsi+rcx*4]; add rcx, rsi; jmp rcx;
0x000608f0: lea rsi, [rip+0x123209]; movsxd rcx, [rsi+rcx*4]; add rcx, rsi; jmp rcx;
0x000608f1: lea esi, [rip+0x123209]; movsxd rcx, [rsi+rcx*4]; add rcx, rsi; jmp rcx;
0x000608f2: xor eax, 0x123209; movsxd rcx, [rsi+rcx*4]; add rcx, rsi; jmp rcx;
0x000608f3: or [rdx], esi; adc al, [rax]; movsxd rcx, [rsi+rcx*4]; add rcx, rsi; jmp rcx;
0x000608f4: xor dl, [rdx]; add [rax+0x63], cl; or al, 0x8e; add rcx, rsi; jmp rcx;
0x000608f5: adc al, [rax]; movsxd rcx, [rsi+rcx*4]; add rcx, rsi; jmp rcx;
0x00060918: test [rsi+rax], dl; add [rax-0x7d], cl; ret 0x4804;
0x0006094f: or [rcx-0x5e773], cl; jmp qword ptr [rdi+rax*8];
0x000609c5: jmp qword ptr [rbx+rcx*4+0x18];
0x00060a44: lea rdi, [rip+0x123171]; mov rcx, [rbp-0x5e8]; mov r11d, [rbp-0x5f8]; movsxd rax, [rdi+rax*4]; add rax, rdi; jmp rax;
0x00060a45: lea edi, [rip+0x123171]; mov rcx, [rbp-0x5e8]; mov r11d, [rbp-0x5f8]; movsxd rax, [rdi+rax*4]; add rax, rdi; jmp rax;
0x00060a46: cmp eax, 0x123171; mov rcx, [rbp-0x5e8]; mov r11d, [rbp-0x5f8]; movsxd rax, [rdi+rax*4]; add rax, rdi; jmp rax;
0x00060a49: adc al, [rax]; mov rcx, [rbp-0x5e8]; mov r11d, [rbp-0x5f8]; movsxd rax, [rdi+rax*4]; add rax, rdi; jmp rax;
0x00060a4b: mov rcx, [rbp-0x5e8]; mov r11d, [rbp-0x5f8]; movsxd rax, [rdi+rax*4]; add rax, rdi; jmp rax;
0x00060a4c: mov ecx, [rbp-0x5e8]; mov r11d, [rbp-0x5f8]; movsxd rax, [rdi+rax*4]; add rax, rdi; jmp rax;
0x00060a52: mov r11d, [rbp-0x5f8]; movsxd rax, [rdi+rax*4]; add rax, rdi; jmp rax;
0x00060a53: mov ebx, [rbp-0x5f8]; movsxd rax, [rdi+rax*4]; add rax, rdi; jmp rax;
0x00060a58: dec dword ptr [rax+0x63]; add al, 0x87; add rax, rdi; jmp rax;
0x00060b42: cmp ch, 0xff; jmp qword ptr [rsi+0x2e];
0x00060b55: test [rax-0x74000006], esp; sbb [rcx-0x58f63], cl; dec dword ptr [rax-0x39]; ret;
0x00060b5b: sbb [rcx-0x58f63], cl; dec dword ptr [rax-0x39]; ret;
0x00060b61: dec dword ptr [rax-0x39]; ret;
0x00060c26: dec dword ptr [rax-0x77]; ret 0xdee9;
0x00060c29: ret 0xdee9;
0x00060c38: add [rax+0xf], cl; mov [0x48fffffcfc830fc2], eax; lea edx, [rip+0x1230c2]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x00060c3b: mov [0x48fffffcfc830fc2], eax; lea edx, [rip+0x1230c2]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x00060c42: dec dword ptr [rax-0x73]; adc eax, 0x1230c2; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x00060c43: lea rdx, [rip+0x1230c2]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x00060c44: lea edx, [rip+0x1230c2]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x00060c45: adc eax, 0x1230c2; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x00060c46: ret 0x1230;
0x00060c47: xor [rdx], dl; add [rax+0x63], cl; add al, 0x82; add rax, rdx; jmp rax;
0x00060c48: adc al, [rax]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x00060cb5: jmp far fword ptr [rdi+rcx-0x7c];
0x00060d65: dec dword ptr [rax+0xf]; ret;
0x00060e2a: dec dword ptr [r8+0x63]; ret;
0x00060ef2: idiv edi; jmp qword ptr [rsi+0x2e];
0x00060fb7: and eax, 0x7753f883; pop rdi; lea rsi, [rip+0x122df8]; movsxd rax, [rsi+rax*4]; add rax, rsi; jmp rax;
0x00060fbc: pop rdi; lea rsi, [rip+0x122df8]; movsxd rax, [rsi+rax*4]; add rax, rsi; jmp rax;
0x00060fbd: lea rsi, [rip+0x122df8]; movsxd rax, [rsi+rax*4]; add rax, rsi; jmp rax;
0x00060fbe: lea esi, [rip+0x122df8]; movsxd rax, [rsi+rax*4]; add rax, rsi; jmp rax;
0x00060fbf: xor eax, 0x122df8; movsxd rax, [rsi+rax*4]; add rax, rsi; jmp rax;
0x00060fc0: clc; sub eax, 0x63480012; add al, 0x86; add rax, rsi; jmp rax;
0x00060fc1: sub eax, 0x63480012; add al, 0x86; add rax, rsi; jmp rax;
0x00060fc2: adc al, [rax]; movsxd rax, [rsi+rax*4]; add rax, rsi; jmp rax;
0x00061249: add [rbx-0x7af09908], al; add cl, [rdx]; add [rcx], dh; rol byte ptr [rbp-0x3f60f025], 0x29; ret;
0x0006124f: add cl, [rdx]; add [rcx], dh; rol byte ptr [rbp-0x3f60f025], 0x29; ret;
0x0006142f: xor [rcx], dh; rol byte ptr [rbp-0x3f60f025], 0x29; ret;
0x00061949: sbb [r8], rax; add [rax+1], cl; ret;
0x0006194a: sbb [rax], eax; add [rax+1], cl; ret;
0x00061b9b: xchg [rcx-0x76ffffea], ecx; ret 0xc083;
0x000623bb: add [rax-0x77], cl; ret 0xae9;
0x000623be: ret 0xae9;
0x00062678: dec dword ptr [rbx-0x5af7b]; inc dword ptr [rbx-0x7bf0fe18]; ret;
0x0006267e: inc dword ptr [rbx-0x7bf0fe18]; ret;
0x00062805: ret 0x42;
0x0006298d: fdivp st(7), st; inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; syscall;
0x00062c67: jmp qword ptr [rax+rax];
0x00062d88: xchg ebp, eax; shl dh, 0xc2; or cl, [rdi]; test [rcx+0x31ffffe7], edx; rol byte ptr [rbp-0x3f60f025], 0x29; ret;
0x00062d89: shl dh, 0xc2; or cl, [rdi]; test [rcx+0x31ffffe7], edx; rol byte ptr [rbp-0x3f60f025], 0x29; ret;
0x00062d8b: ret 0xf0a;
0x00062d8c: or cl, [rdi]; test [rcx+0x31ffffe7], edx; rol byte ptr [rbp-0x3f60f025], 0x29; ret;
0x00062d8e: test [rcx+0x31ffffe7], edx; rol byte ptr [rbp-0x3f60f025], 0x29; ret;
0x00062d8f: xchg ecx, eax; out 0xff, eax; push qword ptr [rcx]; rol byte ptr [rbp-0x3f60f025], 0x29; ret;
0x00062d90: out 0xff, eax; push qword ptr [rcx]; rol byte ptr [rbp-0x3f60f025], 0x29; ret;
0x00062fc1: add [rax], al; add [rax-0x7d], cl; rol byte ptr [rbx+rax*4], 0xc6; add [rax-0x7d], ecx; ret 0x4808;
0x00062fc3: add [rax-0x7d], cl; rol byte ptr [rbx+rax*4], 0xc6; add [rax-0x7d], ecx; ret 0x4808;
0x00062fc6: rol byte ptr [rbx+rax*4], 0xc6; add [rax-0x7d], ecx; ret 0x4808;
0x00063101: inc dword ptr [rcx-0x77]; ret 0x44e9;
0x00063104: ret 0x44e9;
0x0006334c: test [rax+0x31000025], ebp; rol byte ptr [rbp-0x3f60f025], 0x29; ret;
0x0006340e: scasb [rdi]; iretd;
0x000635d7: rol byte ptr [rax+rcx*2], 0x39; ret;
0x00063b8d: call far fword ptr [rcx+1];
0x00063c66: xchg [rdx-0x76fffff9], esi; ret 0xc083;
0x00063e4c: dec dword ptr [rbx-0x57763]; jmp qword ptr [rcx+rcx*4+0x18];
0x00064294: inc dword ptr [rbx-0x78f0d008]; mov ecx, 0x89000010; ret 0xc083;
0x00064299: xchg [rcx-0x76fffff0], edi; ret 0xc083;
0x0006429a: mov ecx, 0x89000010; ret 0xc083;
0x00064544: add [rbx-0x5774b], cl; jmp qword ptr [rcx+rcx*4+0x30];
0x0006454a: jmp qword ptr [rcx+rcx*4+0x30];
0x00064658: xchg [rbx-0x76fffff8], ebp; ret 0xc083;
0x000647e3: add [rbx-0x57763], cl; jmp qword ptr [rcx+rcx*4+0x18];
0x0006487a: mov esi, 0x3145ffff; in al, 0xe9; xchg esi, eax; ret 0xffff;
0x0006487c: inc dword ptr [rbp+0x31]; in al, 0xe9; xchg esi, eax; ret 0xffff;
0x0006487f: in al, 0xe9; xchg esi, eax; ret 0xffff;
0x00064881: xchg esi, eax; ret 0xffff;
0x00064908: inc dword ptr [rbx-0x78f0d008]; adc eax, 0x89000009; ret 0xc083;
0x0006490d: xchg [rip-0x76fffff7], edx; ret 0xc083;
0x0006490e: adc eax, 0x89000009; ret 0xc083;
0x00064be9: jmp qword ptr [rbp];
0x00064fef: mov bl, 0xff; dec dword ptr [rax-0x7d]; mov ebp, 0xfffffb90; add [rdi], cl; test ebx, edi; ret 0xffff;
0x00064ff1: dec dword ptr [rax-0x7d]; mov ebp, 0xfffffb90; add [rdi], cl; test ebx, edi; ret 0xffff;
0x00064ff4: mov ebp, 0xfffffb90; add [rdi], cl; test ebx, edi; ret 0xffff;
0x00064ff9: add [rdi], cl; test ebx, edi; ret 0xffff;
0x00064ffb: test ebx, edi; ret 0xffff;
0x00064ffc: sti; ret 0xffff;
0x0006501f: mov r15b, 0xff; push qword ptr [rcx]; rol byte ptr [rbp-0x3f60f025], 0x29; ret;
0x00065020: mov bh, 0xff; push qword ptr [rcx]; rol byte ptr [rbp-0x3f60f025], 0x29; ret;
0x00065022: push qword ptr [rcx]; rol byte ptr [rbp-0x3f60f025], 0x29; ret;
0x0006508e: add [rbx-0x7af09108], al; cmc; sbb al, 0; add [rcx], dh; rol byte ptr [rbp-0x3f60f025], 0x29; ret;
0x00065093: test ebp, esi; sbb al, 0; add [rcx], dh; rol byte ptr [rbp-0x3f60f025], 0x29; ret;
0x00065094: cmc; sbb al, 0; add [rcx], dh; rol byte ptr [rbp-0x3f60f025], 0x29; ret;
0x00065103: add [rbx-0x7af09608], al; cmp [rax+rax], bl; add [rcx], dh; rol byte ptr [rbp-0x3f60f025], 0x29; ret;
0x00065105: clc; imul ecx, [rdi], 0x1c3885; add [rcx], dh; rol byte ptr [rbp-0x3f60f025], 0x29; ret;
0x00065106: imul ecx, [rdi], 0x1c3885; add [rcx], dh; rol byte ptr [rbp-0x3f60f025], 0x29; ret;
0x00065108: test [rax], edi; sbb al, 0; add [rcx], dh; rol byte ptr [rbp-0x3f60f025], 0x29; ret;
0x00065109: cmp [rax+rax], bl; add [rcx], dh; rol byte ptr [rbp-0x3f60f025], 0x29; ret;
0x0006510a: sbb al, 0; add [rcx], dh; rol byte ptr [rbp-0x3f60f025], 0x29; ret;
0x0006517f: sbb eax, [rax]; add [rcx], dh; rol byte ptr [rbp-0x3f60f025], 0x29; ret;
0x00065181: add [rcx], dh; rol byte ptr [rbp-0x3f60f025], 0x29; ret;
0x00065183: rol byte ptr [rbp-0x3f60f025], 0x29; ret;
0x000651f8: add [rbx-0x7bf08608], al; iretd;
0x0006520b: mov ch, 0xff; jmp qword ptr [rsi-0x70];
0x0006598b: ret 0xf631;
0x00065993: ret 0xbf08;
0x00065cdc: inc dword ptr [rbx-0x78f0d008]; or eax, 0x89000007; ret 0xc083;
0x00065ce1: xchg [rip-0x76fffff9], ecx; ret 0xc083;
0x00065ce2: or eax, 0x89000007; ret 0xc083;
0x00065e7f: ret 0xff31;
0x00065f00: add [rax], al; add al, ch; mov eax, 0xe9ffffa4; ret;
0x00065f02: add al, ch; mov eax, 0xe9ffffa4; ret;
0x00065f04: mov eax, 0xe9ffffa4; ret;
0x00066543: mov al, [0x840fc08548000000]; ret 3;
0x00066544: add [rax], al; add [rax-0x7b], cl; ror byte ptr [rdi], 0x84; ret 3;
0x00066546: add [rax-0x7b], cl; ror byte ptr [rdi], 0x84; ret 3;
0x00066549: ror byte ptr [rdi], 0x84; ret 3;
0x000668b7: mov ch, 0x75; adc eax, 0xcc834100; jmp qword ptr [rdi+rax*8];
0x00066986: add [rbx-0x57743], cl; jmp qword ptr [rcx+rcx*4+0x38];
0x0006698c: jmp qword ptr [rcx+rcx*4+0x38];
0x000669b4: adc eax, 0xcc834100; jmp qword ptr [rdi+rax*8];
0x000669b5: add [rcx-0x7d], al; int3; jmp qword ptr [rdi+rax*8];
0x000669b8: int3; jmp qword ptr [rdi+rax*8];
0x00066ccd: jmp far fword ptr [rdi+0x45ba0012];
0x00066f27: add [rbx-0x57773], cl; jmp qword ptr [rcx+rcx*4+8];
0x00066f2d: jmp qword ptr [rcx+rcx*4+8];
0x000671ca: add [rax], al; add [rax-0x77], cl; ret;
0x0006729a: sub ch, [rbx+0x15]; add [rbx+0xf4807e8], al; mov esi, 0x8b4864c0; adc cl, [rax-0x75]; adc cl, [rbx+rcx*4+0x74]; ret 0x4c40;
0x0006729d: add [rbx+0xf4807e8], al; mov esi, 0x8b4864c0; adc cl, [rax-0x75]; adc cl, [rbx+rcx*4+0x74]; ret 0x4c40;
0x000672a3: mov esi, 0x8b4864c0; adc cl, [rax-0x75]; adc cl, [rbx+rcx*4+0x74]; ret 0x4c40;
0x000672a8: adc cl, [rax-0x75]; adc cl, [rbx+rcx*4+0x74]; ret 0x4c40;
0x000672ab: adc cl, [rbx+rcx*4+0x74]; ret 0x4c40;
0x000672b6: fdivp st(3), st; dec dword ptr [rax-0x77]; ret 0x2949;
0x000672b7: sti; dec dword ptr [rax-0x77]; ret 0x2949;
0x000672b8: dec dword ptr [rax-0x77]; ret 0x2949;
0x00067456: ret 0x4c08;
0x0006745f: or [rcx], bh; ret 0xef72;
0x000674f5: ror dword ptr [rax+0x39], 1; enter 0x5d76, 0x4d; movsxd esp, esp; mov rdx, r12; call qword ptr [r13+0x38];
0x000674f8: enter 0x5d76, 0x4d; movsxd esp, esp; mov rdx, r12; call qword ptr [r13+0x38];
0x000674fa: pop rbp; movsxd r12, r12d; mov rdx, r12; call qword ptr [r13+0x38];
0x000674fb: movsxd r12, r12d; mov rdx, r12; call qword ptr [r13+0x38];
0x000674fc: movsxd esp, esp; mov rdx, r12; call qword ptr [r13+0x38];
0x000674fd: in al, 0x4c; mov edx, esp; call qword ptr [r13+0x38];
0x000674fe: mov rdx, r12; call qword ptr [r13+0x38];
0x000674ff: mov edx, esp; call qword ptr [r13+0x38];
0x00067547: sbb [rcx+rcx*4-0x40], al; pop rbx; pop rbp; pop r12; pop r13; ret;
0x00067655: ret 0xb;
0x00067814: mov r10, [rip+0x15cb65]; add r15, 0x48; shl rdx, 2; lea rcx, [rbx+rdx]; add rdx, r12; call qword ptr [r10+rax*8];
0x00067815: mov edx, [rip+0x15cb65]; add r15, 0x48; shl rdx, 2; lea rcx, [rbx+rdx]; add rdx, r12; call qword ptr [r10+rax*8];
0x00067816: adc eax, 0x15cb65; add r15, 0x48; shl rdx, 2; lea rcx, [rbx+rdx]; add rdx, r12; call qword ptr [r10+rax*8];
0x00067819: adc eax, 0xc7834900; shl rdx, 2; lea rcx, [rbx+rdx]; add rdx, r12; call qword ptr [r10+rax*8];
0x0006781b: add r15, 0x48; shl rdx, 2; lea rcx, [rbx+rdx]; add rdx, r12; call qword ptr [r10+rax*8];
0x0006781c: add edi, 0x48; shl rdx, 2; lea rcx, [rbx+rdx]; add rdx, r12; call qword ptr [r10+rax*8];
0x0006781f: shl rdx, 2; lea rcx, [rbx+rdx]; add rdx, r12; call qword ptr [r10+rax*8];
0x00067820: shl edx, 2; lea rcx, [rbx+rdx]; add rdx, r12; call qword ptr [r10+rax*8];
0x00067822: add cl, [rax-0x73]; or al, 0x13; add rdx, r12; call qword ptr [r10+rax*8];
0x00067823: lea rcx, [rbx+rdx]; add rdx, r12; call qword ptr [r10+rax*8];
0x00067824: lea ecx, [rbx+rdx]; add rdx, r12; call qword ptr [r10+rax*8];
0x00067825: or al, 0x13; add rdx, r12; call qword ptr [r10+rax*8];
0x00067826: adc ecx, [rcx+rax-0x1e]; call qword ptr [r10+rax*8];
0x00067827: add rdx, r12; call qword ptr [r10+rax*8];
0x00067828: add edx, esp; call qword ptr [r10+rax*8];
0x00067885: add [rbx-0x78f0f807], al; add [rsi], eax; add [rax], al; movsxd rcx, [rdx+rcx*4]; add rcx, rdx; jmp rcx;
0x0006788b: add [rsi], eax; add [rax], al; movsxd rcx, [rdx+rcx*4]; add rcx, rdx; jmp rcx;
0x0006790f: fidivr st, dword ptr [rcx]; ret 0x830f;
0x00067936: fcompp; sti; jmp qword ptr [rsi+0xf];
0x00067937: fsincos; jmp qword ptr [rsi+0xf];
0x00067a35: ret 0xc389;
0x00067c3c: ret 0x1b;
0x00067ca3: sub eax, [rcx+0xf]; mov dh, 0x47; or al, 0x83; ret;
0x00067ce7: and dword ptr [rbx*1-0x72b80000], 0x50; add [rcx-0x77], ecx; push rsi; sub dh, al; add [rcx-0x7d], cl; ret;
0x00067cee: push rax; add [rcx-0x77], ecx; push rsi; sub dh, al; add [rcx-0x7d], cl; ret;
0x00067cef: add [rcx-0x77], ecx; push rsi; sub dh, al; add [rcx-0x7d], cl; ret;
0x00067cf2: push rsi; sub dh, al; add [rcx-0x7d], cl; ret;
0x00067cf3: sub dh, al; add [rcx-0x7d], cl; ret;
0x00067d45: out 0x83, al; ret;
0x00067d71: test [rax-0x7c000005], dh; ret;
0x00067f41: add al, ch; fld st, st(6); cld; jmp qword ptr [rsi+0xf];
0x00067f43: fld st, st(6); cld; jmp qword ptr [rsi+0xf];
0x00067fd2: and [rax-0x68], cl; movzx eax, byte ptr [rdx+rax]; lea rdx, [rip-0x3ff]; movsxd rax, [rdi+rax*4]; add rax, rdx; jmp rax;
0x00067fd3: cdqe; movzx eax, byte ptr [rdx+rax]; lea rdx, [rip-0x3ff]; movsxd rax, [rdi+rax*4]; add rax, rdx; jmp rax;
0x00067fd4: cwde; movzx eax, byte ptr [rdx+rax]; lea rdx, [rip-0x3ff]; movsxd rax, [rdi+rax*4]; add rax, rdx; jmp rax;
0x00067fd5: movzx eax, byte ptr [rdx+rax]; lea rdx, [rip-0x3ff]; movsxd rax, [rdi+rax*4]; add rax, rdx; jmp rax;
0x00067fd6: mov dh, 4; add cl, [rax-0x73]; adc eax, 0xfffffc01; movsxd rax, [rdi+rax*4]; add rax, rdx; jmp rax;
0x00067fd7: add al, 2; lea rdx, [rip-0x3ff]; movsxd rax, [rdi+rax*4]; add rax, rdx; jmp rax;
0x00067fd8: add cl, [rax-0x73]; adc eax, 0xfffffc01; movsxd rax, [rdi+rax*4]; add rax, rdx; jmp rax;
0x00067fd9: lea rdx, [rip-0x3ff]; movsxd rax, [rdi+rax*4]; add rax, rdx; jmp rax;
0x00067fda: lea edx, [rip-0x3ff]; movsxd rax, [rdi+rax*4]; add rax, rdx; jmp rax;
0x00067fdb: adc eax, 0xfffffc01; movsxd rax, [rdi+rax*4]; add rax, rdx; jmp rax;
0x00067fdf: dec dword ptr [rax+0x63]; add al, 0x87; add rax, rdx; jmp rax;
0x00067fe0: movsxd rax, [rdi+rax*4]; add rax, rdx; jmp rax;
0x00067fe1: movsxd eax, [rdi+rax*4]; add rax, rdx; jmp rax;
0x00067fe2: add al, 0x87; add rax, rdx; jmp rax;
0x0006808c: mov [rbp-0x940], r8d; mov rdx, r10; mov rsi, r15; mov rdi, r14; mov [rbp-0x93c], r9d; call rax;
0x0006808d: mov [rbp-0x940], eax; mov rdx, r10; mov rsi, r15; mov rdi, r14; mov [rbp-0x93c], r9d; call rax;
0x0006808f: shl dh, 0xff; dec dword ptr [rcx+rcx*4-0x2e]; mov rsi, r15; mov rdi, r14; mov [rbp-0x93c], r9d; call rax;
0x00068090: idiv bh; dec dword ptr [rcx+rcx*4-0x2e]; mov rsi, r15; mov rdi, r14; mov [rbp-0x93c], r9d; call rax;
0x00068092: dec dword ptr [rcx+rcx*4-0x2e]; mov rsi, r15; mov rdi, r14; mov [rbp-0x93c], r9d; call rax;
0x00068093: mov rdx, r10; mov rsi, r15; mov rdi, r14; mov [rbp-0x93c], r9d; call rax;
0x00068094: mov edx, edx; mov rsi, r15; mov rdi, r14; mov [rbp-0x93c], r9d; call rax;
0x00068095: ror byte ptr [rcx+rcx*4-2], cl; mov rdi, r14; mov [rbp-0x93c], r9d; call rax;
0x00068096: mov rsi, r15; mov rdi, r14; mov [rbp-0x93c], r9d; call rax;
0x00068097: mov esi, edi; mov rdi, r14; mov [rbp-0x93c], r9d; call rax;
0x00068098: dec byte ptr [rcx+rcx*4-9]; mov [rbp-0x93c], r9d; call rax;
0x00068099: mov rdi, r14; mov [rbp-0x93c], r9d; call rax;
0x0006809a: mov edi, esi; mov [rbp-0x93c], r9d; call rax;
0x0006809b: test dword ptr [rcx+rcx*4-0x73], 0xfffff6c4; call rax;
0x0006809c: mov [rbp-0x93c], r9d; call rax;
0x0006809d: mov [rbp-0x93c], ecx; call rax;
0x00068128: add [rax], al; mov rsi, [r15+0x18]; mov rdx, [r15+0x20]; mov rdi, r14; sub rdx, rsi; call qword ptr [rbx+0x38];
0x0006812a: mov rsi, [r15+0x18]; mov rdx, [r15+0x20]; mov rdi, r14; sub rdx, rsi; call qword ptr [rbx+0x38];
0x0006812b: mov esi, [rdi+0x18]; mov rdx, [r15+0x20]; mov rdi, r14; sub rdx, rsi; call qword ptr [rbx+0x38];
0x0006812d: sbb [rcx-0x75], cl; push rdi; and [rcx+rcx*4-9], cl; sub rdx, rsi; call qword ptr [rbx+0x38];
0x0006812e: mov rdx, [r15+0x20]; mov rdi, r14; sub rdx, rsi; call qword ptr [rbx+0x38];
0x0006812f: mov edx, [rdi+0x20]; mov rdi, r14; sub rdx, rsi; call qword ptr [rbx+0x38];
0x00068130: push rdi; and [rcx+rcx*4-9], cl; sub rdx, rsi; call qword ptr [rbx+0x38];
0x00068131: and [rcx+rcx*4-9], cl; sub rdx, rsi; call qword ptr [rbx+0x38];
0x00068132: mov rdi, r14; sub rdx, rsi; call qword ptr [rbx+0x38];
0x00068133: mov edi, esi; sub rdx, rsi; call qword ptr [rbx+0x38];
0x00068135: sub rdx, rsi; call qword ptr [rbx+0x38];
0x00068136: sub edx, esi; call qword ptr [rbx+0x38];
0x00068137: bnd call qword ptr [rbx+0x38];
0x000682e2: xchg cl, dh; adc al, [rax]; add [rcx+rcx*4-0x16], cl; mov rsi, r12; mov rdi, r14; call qword ptr [rax+0x38];
0x000682e3: int1; adc al, [rax]; add [rcx+rcx*4-0x16], cl; mov rsi, r12; mov rdi, r14; call qword ptr [rax+0x38];
0x000682e4: adc al, [rax]; add [rcx+rcx*4-0x16], cl; mov rsi, r12; mov rdi, r14; call qword ptr [rax+0x38];
0x000682e5: add [rax], al; mov rdx, r13; mov rsi, r12; mov rdi, r14; call qword ptr [rax+0x38];
0x000682e6: add [rcx+rcx*4-0x16], cl; mov rsi, r12; mov rdi, r14; call qword ptr [rax+0x38];
0x000682e7: mov rdx, r13; mov rsi, r12; mov rdi, r14; call qword ptr [rax+0x38];
0x000682e8: mov edx, ebp; mov rsi, r12; mov rdi, r14; call qword ptr [rax+0x38];
0x00068394: dec dword ptr [rbx-0x8df4b]; inc dword ptr [rbp-0x7b]; in al, 0xf; lahf; ret;
0x00068396: mov ch, 0x20; idiv edi; inc dword ptr [rbp-0x7b]; in al, 0xf; lahf; ret;
0x00068398: idiv edi; inc dword ptr [rbp-0x7b]; in al, 0xf; lahf; ret;
0x0006839a: inc dword ptr [rbp-0x7b]; in al, 0xf; lahf; ret;
0x0006839d: in al, 0xf; lahf; ret;
0x000683a9: ret 0x12;
0x00068417: fld st, dword ptr [rax]; add [rax+0x39], cl; ret;
0x00068537: xchg [rcx+rdx], cl; add [rax], al; mov rdx, rbx; mov rsi, r12; mov rdi, r14; call qword ptr [rax+0x38];
0x00068538: or al, 0x11; add [rax], al; mov rdx, rbx; mov rsi, r12; mov rdi, r14; call qword ptr [rax+0x38];
0x00068539: adc [rax], eax; add [rax-0x77], cl; fimul st, dword ptr [rcx+rcx*4-0x1a]; mov rdi, r14; call qword ptr [rax+0x38];
0x0006853a: add [rax], al; mov rdx, rbx; mov rsi, r12; mov rdi, r14; call qword ptr [rax+0x38];
0x0006853b: add [rax-0x77], cl; fimul st, dword ptr [rcx+rcx*4-0x1a]; mov rdi, r14; call qword ptr [rax+0x38];
0x0006853c: mov rdx, rbx; mov rsi, r12; mov rdi, r14; call qword ptr [rax+0x38];
0x0006853d: mov edx, ebx; mov rsi, r12; mov rdi, r14; call qword ptr [rax+0x38];
0x0006853e: fimul st, dword ptr [rcx+rcx*4-0x1a]; mov rdi, r14; call qword ptr [rax+0x38];
0x0006853f: mov rsi, r12; mov rdi, r14; call qword ptr [rax+0x38];
0x00068540: mov esi, esp; mov rdi, r14; call qword ptr [rax+0x38];
0x00068541: out 0x4c, al; mov edi, esi; call qword ptr [rax+0x38];
0x000685cf: or [rax], ax; add bh, al; test [rax], ecx; idiv edi; call qword ptr [rax];
0x000685d0: or [rax], eax; add bh, al; test [rax], ecx; idiv edi; call qword ptr [rax];
0x000685d2: add bh, al; test [rax], ecx; idiv edi; call qword ptr [rax];
0x0006861c: idiv bh; call far fword ptr [rax+0x44];
0x0006861e: call far fword ptr [rax+0x44];
0x000686aa: ret 0xffe9;
0x0006875a: add [rbx-0x8f743], eax; call qword ptr [rax];
0x0006877e: add eax, 0xeb830000; add [rax-0x8ef43], eax; jmp qword ptr [rax];
0x00068783: add [rax-0x8ef43], eax; jmp qword ptr [rax];
0x0006887c: xchg [rsp+rcx], al; add [rax], al; mov rdx, r12; mov rsi, r13; mov rdi, r14; call qword ptr [rbx+0x38];
0x0006887d: add al, 0xc; add [rax], al; mov rdx, r12; mov rsi, r13; mov rdi, r14; call qword ptr [rbx+0x38];
0x0006887e: or al, 0; add [rcx+rcx*4-0x1e], cl; mov rsi, r13; mov rdi, r14; call qword ptr [rbx+0x38];
0x0006887f: add [rax], al; mov rdx, r12; mov rsi, r13; mov rdi, r14; call qword ptr [rbx+0x38];
0x00068880: add [rcx+rcx*4-0x1e], cl; mov rsi, r13; mov rdi, r14; call qword ptr [rbx+0x38];
0x00068881: mov rdx, r12; mov rsi, r13; mov rdi, r14; call qword ptr [rbx+0x38];
0x00068882: mov edx, esp; mov rsi, r13; mov rdi, r14; call qword ptr [rbx+0x38];
0x00068884: mov rsi, r13; mov rdi, r14; call qword ptr [rbx+0x38];
0x00068885: mov esi, ebp; mov rdi, r14; call qword ptr [rbx+0x38];
0x00068886: out dx, al; mov rdi, r14; call qword ptr [rbx+0x38];
0x00068887: mov rdi, r14; call qword ptr [rbx+0x38];
0x00068888: mov edi, esi; call qword ptr [rbx+0x38];
0x000688ad: dec dword ptr [rbx-0x8df7b]; inc dword ptr [rcx]; ret;
0x000688af: test [rax], esp; idiv edi; inc dword ptr [rcx]; ret;
0x000688b1: idiv edi; inc dword ptr [rcx]; ret;
0x00068950: fadd st, dword ptr [rbx-0x1f3efe20]; add al, 0x89; ret 0xf41;
0x00068956: add al, 0x89; ret 0xf41;
0x00068a26: xor [rbp+rcx*4+0x68], cl; inc esi; test [rax], edx; idiv edi; jmp qword ptr [rax];
0x00068a29: push 0x1085c6ff; idiv edi; jmp qword ptr [rax];
0x00068a2a: inc esi; test [rax], edx; idiv edi; jmp qword ptr [rax];
0x00068bef: pushfq; or [rax], al; add [rcx+rcx*4-0x1e], cl; mov rsi, r13; mov rdi, r14; call qword ptr [rax+0x38];
0x00068bf0: or [rax], al; add [rcx+rcx*4-0x1e], cl; mov rsi, r13; mov rdi, r14; call qword ptr [rax+0x38];
0x00068bf1: add [rax], al; mov rdx, r12; mov rsi, r13; mov rdi, r14; call qword ptr [rax+0x38];
0x00068bf2: add [rcx+rcx*4-0x1e], cl; mov rsi, r13; mov rdi, r14; call qword ptr [rax+0x38];
0x00068bf3: mov rdx, r12; mov rsi, r13; mov rdi, r14; call qword ptr [rax+0x38];
0x00068bf4: mov edx, esp; mov rsi, r13; mov rdi, r14; call qword ptr [rax+0x38];
0x00068bf6: mov rsi, r13; mov rdi, r14; call qword ptr [rax+0x38];
0x00068bf7: mov esi, ebp; mov rdi, r14; call qword ptr [rax+0x38];
0x00068bf8: out dx, al; mov rdi, r14; call qword ptr [rax+0x38];
0x00068bf9: mov rdi, r14; call qword ptr [rax+0x38];
0x00068bfa: mov edi, esi; call qword ptr [rax+0x38];
0x00068d3e: inc dword ptr [rax-0x8ef43]; jmp qword ptr [rax];
0x00068e5a: test [rax], edx; idiv edi; jmp far fword ptr [rcx];
0x00068ea4: xchg [rdi+9], dh; add [rax], al; mov rdx, rbx; mov rsi, r12; mov rdi, r14; call qword ptr [rcx+0x38];
0x00068ea6: or [rax], eax; add [rax-0x77], cl; fimul st, dword ptr [rcx+rcx*4-0x1a]; mov rdi, r14; call qword ptr [rcx+0x38];
0x00068ea7: add [rax], al; mov rdx, rbx; mov rsi, r12; mov rdi, r14; call qword ptr [rcx+0x38];
0x00068ea8: add [rax-0x77], cl; fimul st, dword ptr [rcx+rcx*4-0x1a]; mov rdi, r14; call qword ptr [rcx+0x38];
0x00068ea9: mov rdx, rbx; mov rsi, r12; mov rdi, r14; call qword ptr [rcx+0x38];
0x00068eaa: mov edx, ebx; mov rsi, r12; mov rdi, r14; call qword ptr [rcx+0x38];
0x00068eab: fimul st, dword ptr [rcx+rcx*4-0x1a]; mov rdi, r14; call qword ptr [rcx+0x38];
0x00068eac: mov rsi, r12; mov rdi, r14; call qword ptr [rcx+0x38];
0x00068ead: mov esi, esp; mov rdi, r14; call qword ptr [rcx+0x38];
0x00068eae: out 0x4c, al; mov edi, esi; call qword ptr [rcx+0x38];
0x00068eaf: mov rdi, r14; call qword ptr [rcx+0x38];
0x00068eb0: mov edi, esi; call qword ptr [rcx+0x38];
0x00068f5b: add esi, eax; test [rax], edx; idiv edi; jmp qword ptr [rax];
0x00068f5d: test [rax], edx; idiv edi; jmp qword ptr [rax];
0x00068f5f: idiv edi; jmp qword ptr [rax];
0x000690b9: or eax, 0x15b2ca; call qword ptr [rcx+r8*8-0x40];
0x00069109: jmp far fword ptr [rax-0x657bf0f0];
0x000691e6: lea ebx, [rax]; idiv edi; dec dword ptr [rax-0x7d]; clc; dec dword ptr [rax-0x77]; ret;
0x000691e8: idiv edi; dec dword ptr [rax-0x7d]; clc; dec dword ptr [rax-0x77]; ret;
0x000691ea: dec dword ptr [rax-0x7d]; clc; dec dword ptr [rax-0x77]; ret;
0x000691ed: clc; dec dword ptr [rax-0x77]; ret;
0x0006922a: mov dh, 0x47; or al, 0x83; ret;
0x0006922c: or al, 0x83; ret;
0x00069264: test [rax], edx; idiv edi; inc dword ptr [rax]; add [rax], al; add [rax-0x77], cl; ret;
0x00069266: idiv edi; inc dword ptr [rax]; add [rax], al; add [rax-0x77], cl; ret;
0x00069268: inc dword ptr [rax]; add [rax], al; add [rax-0x77], cl; ret;
0x00069326: cld; in eax, 0xff; jmp qword ptr [rsi+0xf];
0x00069412: dec dword ptr [rcx+0x63]; ret 0x8545;
0x0006946b: idiv edi; jmp far fword ptr [rcx];
0x00069524: lea eax, [rax]; idiv edi; inc edi; test [rax], ecx; idiv edi; call qword ptr [rax];
0x00069526: idiv edi; inc edi; test [rax], ecx; idiv edi; call qword ptr [rax];
0x00069528: inc edi; test [rax], ecx; idiv edi; call qword ptr [rax];
0x0006952a: test [rax], ecx; idiv edi; call qword ptr [rax];
0x0006952c: idiv edi; call qword ptr [rax];
0x0006965f: dec dword ptr [rdi]; mov bh, 0x9d; pop rsp; idiv edi; jmp qword ptr [rsi-0x77];
0x00069661: mov bh, 0x9d; pop rsp; idiv edi; jmp qword ptr [rsi-0x77];
0x00069662: popfq; pop rsp; idiv edi; jmp qword ptr [rsi-0x77];
0x00069663: pop rsp; idiv edi; jmp qword ptr [rsi-0x77];
0x00069664: idiv edi; jmp qword ptr [rsi-0x77];
0x0006979e: call qword ptr [rax+0xc678041];
0x00069a6c: fdivp st(7), st; call qword ptr [rax+0x1095894c];
0x00069a6e: call qword ptr [rax+0x1095894c];
0x00069c8c: add [rcx-0x4c773], cl; jmp qword ptr [rax+rcx*2-0x75];
0x00069d6a: mov r15, [rbp-0x4d0]; mov rsi, r13; mov rdi, r12; sub r15, r13; mov rdx, r15; call qword ptr [rax+0x38];
0x00069d6b: mov edi, [rbp-0x4d0]; mov rsi, r13; mov rdi, r12; sub r15, r13; mov rdx, r15; call qword ptr [rax+0x38];
0x00069d6c: mov ebp, 0xfffffb30; mov rsi, r13; mov rdi, r12; sub r15, r13; mov rdx, r15; call qword ptr [rax+0x38];
0x00069d70: dec dword ptr [rcx+rcx*4-0x12]; mov rdi, r12; sub r15, r13; mov rdx, r15; call qword ptr [rax+0x38];
0x00069d71: mov rsi, r13; mov rdi, r12; sub r15, r13; mov rdx, r15; call qword ptr [rax+0x38];
0x00069d72: mov esi, ebp; mov rdi, r12; sub r15, r13; mov rdx, r15; call qword ptr [rax+0x38];
0x00069d73: out dx, al; mov rdi, r12; sub r15, r13; mov rdx, r15; call qword ptr [rax+0x38];
0x00069d74: mov rdi, r12; sub r15, r13; mov rdx, r15; call qword ptr [rax+0x38];
0x00069d75: mov edi, esp; sub r15, r13; mov rdx, r15; call qword ptr [rax+0x38];
0x00069d76: out 0x4d, eax; sub edi, ebp; mov rdx, r15; call qword ptr [rax+0x38];
0x00069d77: sub r15, r13; mov rdx, r15; call qword ptr [rax+0x38];
0x00069d78: sub edi, ebp; mov rdx, r15; call qword ptr [rax+0x38];
0x00069d79: out dx, eax; mov rdx, r15; call qword ptr [rax+0x38];
0x00069d7a: mov rdx, r15; call qword ptr [rax+0x38];
0x00069d7b: mov edx, edi; call qword ptr [rax+0x38];
0x00069d7c: cli; call qword ptr [rax+0x38];
0x00069de2: ret 0x1d;
0x00069e8a: add rax, rbx; mov [rbp-0x4f8], rsi; xor ebx, ebx; mov dword ptr [rbp-0x520], 0; mov qword ptr [rbp-0x4e8], 0; jmp rax;
0x00069e8b: add eax, ebx; mov [rbp-0x4f8], rsi; xor ebx, ebx; mov dword ptr [rbp-0x520], 0; mov qword ptr [rbp-0x4e8], 0; jmp rax;
0x00069e8d: mov [rbp-0x4f8], rsi; xor ebx, ebx; mov dword ptr [rbp-0x520], 0; mov qword ptr [rbp-0x4e8], 0; jmp rax;
0x00069e8e: mov [rbp-0x4f8], esi; xor ebx, ebx; mov dword ptr [rbp-0x520], 0; mov qword ptr [rbp-0x4e8], 0; jmp rax;
0x00069e94: xor ebx, ebx; mov dword ptr [rbp-0x520], 0; mov qword ptr [rbp-0x4e8], 0; jmp rax;
0x00069e96: mov dword ptr [rbp-0x520], 0; mov qword ptr [rbp-0x4e8], 0; jmp rax;
0x00069e9c: add [rax], al; add [rax], al; mov qword ptr [rbp-0x4e8], 0; jmp rax;
0x00069e9e: add [rax], al; mov qword ptr [rbp-0x4e8], 0; jmp rax;
0x00069ea0: mov qword ptr [rbp-0x4e8], 0; jmp rax;
0x00069ea1: mov dword ptr [rbp-0x4e8], 0; jmp rax;
0x00069ea7: add [rax], al; add [rax], al; jmp rax;
0x00069f03: mov ah, 0xfb; jmp qword ptr [rsi+0x2e];
0x00069f48: mov rax, [rip+0x157891]; lea rdi, [rbp-0x470]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00069f49: mov eax, [rip+0x157891]; lea rdi, [rbp-0x470]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00069f4a: add eax, 0x157891; lea rdi, [rbp-0x470]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00069f4e: add [rax-0x73], cl; mov ebp, 0xfffffb90; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00069f4f: lea rdi, [rbp-0x470]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00069f50: lea edi, [rbp-0x470]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00069f51: mov ebp, 0xfffffb90; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00069f87: enter 0x415b, 0x5c; pop r13; pop r14; pop r15; pop rbp; ret;
0x0006a00f: mov rsi, [rip+0x153f52]; lea rdi, [rbp-0x470]; mov rdx, r12; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0006a010: mov esi, [rip+0x153f52]; lea rdi, [rbp-0x470]; mov rdx, r12; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0006a011: xor eax, 0x153f52; lea rdi, [rbp-0x470]; mov rdx, r12; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0006a015: add [rax-0x73], cl; mov ebp, 0xfffffb90; mov rdx, r12; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0006a016: lea rdi, [rbp-0x470]; mov rdx, r12; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0006a017: lea edi, [rbp-0x470]; mov rdx, r12; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0006a018: mov ebp, 0xfffffb90; mov rdx, r12; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0006a0a7: add [rax-0x68], cl; movzx eax, byte ptr [rsi+rax]; lea rsi, [rip-0x1e2]; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax;
0x0006a0b0: xor eax, 0xfffffe1e; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax;
0x0006a119: nop [rax]; xor ecx, ecx; mov r11d, 1; jmp rax;
0x0006a11b: add byte ptr [rax], 0; add [rax], al; xor ecx, ecx; mov r11d, 1; jmp rax;
0x0006a11c: add [rax], al; add [rax], al; xor ecx, ecx; mov r11d, 1; jmp rax;
0x0006a11d: add [rax], al; add [rcx], dh; leave; mov r11d, 1; jmp rax;
0x0006a11e: add [rax], al; xor ecx, ecx; mov r11d, 1; jmp rax;
0x0006a11f: add [rcx], dh; leave; mov r11d, 1; jmp rax;
0x0006a120: xor ecx, ecx; mov r11d, 1; jmp rax;
0x0006a121: leave; mov r11d, 1; jmp rax;
0x0006a17f: call qword ptr [rax-1];
0x0006a186: call qword ptr [rbx-0x18];
0x0006a2f6: add [rax], al; mov [rbp-0x500], r9d; mov rdx, r15; mov rsi, r8; mov rdi, r12; call qword ptr [rax+0x38];
0x0006a2f8: mov [rbp-0x500], r9d; mov rdx, r15; mov rsi, r8; mov rdi, r12; call qword ptr [rax+0x38];
0x0006a2f9: mov [rbp-0x500], ecx; mov rdx, r15; mov rsi, r8; mov rdi, r12; call qword ptr [rax+0x38];
0x0006a2fe: dec dword ptr [rcx+rcx*4-6]; mov rsi, r8; mov rdi, r12; call qword ptr [rax+0x38];
0x0006a2ff: mov rdx, r15; mov rsi, r8; mov rdi, r12; call qword ptr [rax+0x38];
0x0006a300: mov edx, edi; mov rsi, r8; mov rdi, r12; call qword ptr [rax+0x38];
0x0006a301: cli; mov rsi, r8; mov rdi, r12; call qword ptr [rax+0x38];
0x0006a302: mov rsi, r8; mov rdi, r12; call qword ptr [rax+0x38];
0x0006a303: mov esi, eax; mov rdi, r12; call qword ptr [rax+0x38];
0x0006a3c4: sub rax, rbx; mov [rbp-0x4e8], r9d; mov rsi, rbx; mov rdi, r12; mov rdx, rax; call qword ptr [r15+0x38];
0x0006a3c5: sub eax, ebx; mov [rbp-0x4e8], r9d; mov rsi, rbx; mov rdi, r12; mov rdx, rax; call qword ptr [r15+0x38];
0x0006a3c7: mov [rbp-0x4e8], r9d; mov rsi, rbx; mov rdi, r12; mov rdx, rax; call qword ptr [r15+0x38];
0x0006a3c8: mov [rbp-0x4e8], ecx; mov rsi, rbx; mov rdi, r12; mov rdx, rax; call qword ptr [r15+0x38];
0x0006a3cd: dec dword ptr [rax-0x77]; fimul st, word ptr [rcx+rcx*4-0x19]; mov rdx, rax; call qword ptr [r15+0x38];
0x0006a3ce: mov rsi, rbx; mov rdi, r12; mov rdx, rax; call qword ptr [r15+0x38];
0x0006a3cf: mov esi, ebx; mov rdi, r12; mov rdx, rax; call qword ptr [r15+0x38];
0x0006a3d0: fimul st, word ptr [rcx+rcx*4-0x19]; mov rdx, rax; call qword ptr [r15+0x38];
0x0006a3d1: mov rdi, r12; mov rdx, rax; call qword ptr [r15+0x38];
0x0006a3d2: mov edi, esp; mov rdx, rax; call qword ptr [r15+0x38];
0x0006a3d3: out 0x48, eax; mov edx, eax; call qword ptr [r15+0x38];
0x0006a3d4: mov rdx, rax; call qword ptr [r15+0x38];
0x0006a3d5: mov edx, eax; call qword ptr [r15+0x38];
0x0006a52a: sbb [rax], al; add [rcx-0x80], al; call qword ptr [rbx+0xf];
0x0006a52c: add [rcx-0x80], al; call qword ptr [rbx+0xf];
0x0006a5aa: mov [rbp-0x4f8], r9d; mov rdx, r15; mov rsi, r10; mov rdi, r12; mov [rbp-0x4f0], ecx; call qword ptr [rbx+0x38];
0x0006a5ab: mov [rbp-0x4f8], ecx; mov rdx, r15; mov rsi, r10; mov rdi, r12; mov [rbp-0x4f0], ecx; call qword ptr [rbx+0x38];
0x0006a5b0: dec dword ptr [rcx+rcx*4-6]; mov rsi, r10; mov rdi, r12; mov [rbp-0x4f0], ecx; call qword ptr [rbx+0x38];
0x0006a5b1: mov rdx, r15; mov rsi, r10; mov rdi, r12; mov [rbp-0x4f0], ecx; call qword ptr [rbx+0x38];
0x0006a5b2: mov edx, edi; mov rsi, r10; mov rdi, r12; mov [rbp-0x4f0], ecx; call qword ptr [rbx+0x38];
0x0006a5b3: cli; mov rsi, r10; mov rdi, r12; mov [rbp-0x4f0], ecx; call qword ptr [rbx+0x38];
0x0006a5b4: mov rsi, r10; mov rdi, r12; mov [rbp-0x4f0], ecx; call qword ptr [rbx+0x38];
0x0006a5b5: mov esi, edx; mov rdi, r12; mov [rbp-0x4f0], ecx; call qword ptr [rbx+0x38];
0x0006a5b7: mov rdi, r12; mov [rbp-0x4f0], ecx; call qword ptr [rbx+0x38];
0x0006a5b8: mov edi, esp; mov [rbp-0x4f0], ecx; call qword ptr [rbx+0x38];
0x0006a5ba: mov [rbp-0x4f0], ecx; call qword ptr [rbx+0x38];
0x0006a62a: inc dword ptr [rbp+0x31]; fisttp dword ptr [rcx-0x77], st; ret 0xe5e9;
0x0006a62d: fisttp dword ptr [rcx-0x77], st; ret 0xe5e9;
0x0006a65e: xchg [rbp+0x16], bh; add [rax], al; lea rax, [rip-0x797]; mov dword ptr [rbp-0x4e0], 1; jmp rax;
0x0006a661: add [rax], al; lea rax, [rip-0x797]; mov dword ptr [rbp-0x4e0], 1; jmp rax;
0x0006a662: add [rax-0x73], cl; add eax, 0xfffff869; mov dword ptr [rbp-0x4e0], 1; jmp rax;
0x0006a663: lea rax, [rip-0x797]; mov dword ptr [rbp-0x4e0], 1; jmp rax;
0x0006a664: lea eax, [rip-0x797]; mov dword ptr [rbp-0x4e0], 1; jmp rax;
0x0006a665: add eax, 0xfffff869; mov dword ptr [rbp-0x4e0], 1; jmp rax;
0x0006a66a: mov dword ptr [rbp-0x4e0], 1; jmp rax;
0x0006a77a: inc dword ptr [rdi+rcx-0x4a]; cmp [rcx-0x80], al; jmp qword ptr [rdi+rcx];
0x0006a77e: cmp [rcx-0x80], al; jmp qword ptr [rdi+rcx];
0x0006a781: jmp qword ptr [rdi+rcx];
0x0006a7a6: inc dword ptr [rbx-0x67b7df18]; movzx esi, byte ptr [rsi+rax]; lea rax, [rip+0x119a09]; movsxd rax, [rax+rsi*4]; add rax, rdi; jmp rax;
0x0006a7a9: and [rax-0x68], cl; movzx esi, byte ptr [rsi+rax]; lea rax, [rip+0x119a09]; movsxd rax, [rax+rsi*4]; add rax, rdi; jmp rax;
0x0006a7aa: cdqe; movzx esi, byte ptr [rsi+rax]; lea rax, [rip+0x119a09]; movsxd rax, [rax+rsi*4]; add rax, rdi; jmp rax;
0x0006a7ab: cwde; movzx esi, byte ptr [rsi+rax]; lea rax, [rip+0x119a09]; movsxd rax, [rax+rsi*4]; add rax, rdi; jmp rax;
0x0006a7ac: movzx esi, byte ptr [rsi+rax]; lea rax, [rip+0x119a09]; movsxd rax, [rax+rsi*4]; add rax, rdi; jmp rax;
0x0006a7ae: xor al, 6; lea rax, [rip+0x119a09]; movsxd rax, [rax+rsi*4]; add rax, rdi; jmp rax;
0x0006a7b0: lea rax, [rip+0x119a09]; movsxd rax, [rax+rsi*4]; add rax, rdi; jmp rax;
0x0006a7b1: lea eax, [rip+0x119a09]; movsxd rax, [rax+rsi*4]; add rax, rdi; jmp rax;
0x0006a7b2: add eax, 0x119a09; movsxd rax, [rax+rsi*4]; add rax, rdi; jmp rax;
0x0006a7b3: or [rdx+0x63480011], ebx; add al, 0xb0; add rax, rdi; jmp rax;
0x0006a7b5: adc [rax], eax; movsxd rax, [rax+rsi*4]; add rax, rdi; jmp rax;
0x0006a7b6: add [rax+0x63], cl; add al, 0xb0; add rax, rdi; jmp rax;
0x0006a88f: inc dword ptr [rcx-0x80]; call far fword ptr [rax+0x48];
0x0006a917: dec dword ptr [rcx-0x77]; ret 0xbd83;
0x0006a91a: ret 0xbd83;
0x0006a95d: dec dword ptr [rcx-0x77]; ret 0x8b48;
0x0006a971: ror dword ptr [rax+0x39], 1; ror dword ptr [rdi], 0x8d; fisttp qword ptr [rax+rax], st; add [rax-0x77], cl; ret 0xb8;
0x0006a974: ror dword ptr [rdi], 0x8d; fisttp qword ptr [rax+rax], st; add [rax-0x77], cl; ret 0xb8;
0x0006a977: fisttp qword ptr [rax+rax], st; add [rax-0x77], cl; ret 0xb8;
0x0006a978: or al, 0; add [rax-0x77], cl; ret 0xb8;
0x0006a97a: add [rax-0x77], cl; ret 0xb8;
0x0006a9e2: add [rax-0x4ff43], eax; jmp qword ptr [rax];
0x0006aacf: mov [rbp-0x4f8], rcx; mov rdx, rcx; mov rsi, r10; mov rdi, r12; mov [rbp-0x500], r9d; call qword ptr [rbx+0x38];
0x0006aad0: mov [rbp-0x4f8], ecx; mov rdx, rcx; mov rsi, r10; mov rdi, r12; mov [rbp-0x500], r9d; call qword ptr [rbx+0x38];
0x0006aad6: mov rdx, rcx; mov rsi, r10; mov rdi, r12; mov [rbp-0x500], r9d; call qword ptr [rbx+0x38];
0x0006aad7: mov edx, ecx; mov rsi, r10; mov rdi, r12; mov [rbp-0x500], r9d; call qword ptr [rbx+0x38];
0x0006aad9: mov rsi, r10; mov rdi, r12; mov [rbp-0x500], r9d; call qword ptr [rbx+0x38];
0x0006aada: mov esi, edx; mov rdi, r12; mov [rbp-0x500], r9d; call qword ptr [rbx+0x38];
0x0006aadc: mov rdi, r12; mov [rbp-0x500], r9d; call qword ptr [rbx+0x38];
0x0006aadd: mov edi, esp; mov [rbp-0x500], r9d; call qword ptr [rbx+0x38];
0x0006aade: out 0x44, eax; mov [rbp-0x500], ecx; call qword ptr [rbx+0x38];
0x0006aadf: mov [rbp-0x500], r9d; call qword ptr [rbx+0x38];
0x0006aae0: mov [rbp-0x500], ecx; call qword ptr [rbx+0x38];
0x0006ab1e: call qword ptr [rax-0x4ef7a75];
0x0006ab7e: cmp eax, 0xfffff350; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax;
0x0006abd3: lea rdi, [rip-0xd07]; movsxd rax, [rsi+rax*4]; add rax, rdi; mov byte ptr [rbp-0x500], 0x20; mov dword ptr [rbp-0x4f0], 1; jmp rax;
0x0006abd4: lea edi, [rip-0xd07]; movsxd rax, [rsi+rax*4]; add rax, rdi; mov byte ptr [rbp-0x500], 0x20; mov dword ptr [rbp-0x4f0], 1; jmp rax;
0x0006abd5: cmp eax, 0xfffff2f9; movsxd rax, [rsi+rax*4]; add rax, rdi; mov byte ptr [rbp-0x500], 0x20; mov dword ptr [rbp-0x4f0], 1; jmp rax;
0x0006abd9: dec dword ptr [rax+0x63]; add al, 0x86; add rax, rdi; mov byte ptr [rbp-0x500], 0x20; mov dword ptr [rbp-0x4f0], 1; jmp rax;
0x0006abda: movsxd rax, [rsi+rax*4]; add rax, rdi; mov byte ptr [rbp-0x500], 0x20; mov dword ptr [rbp-0x4f0], 1; jmp rax;
0x0006abdb: movsxd eax, [rsi+rax*4]; add rax, rdi; mov byte ptr [rbp-0x500], 0x20; mov dword ptr [rbp-0x4f0], 1; jmp rax;
0x0006abdc: add al, 0x86; add rax, rdi; mov byte ptr [rbp-0x500], 0x20; mov dword ptr [rbp-0x4f0], 1; jmp rax;
0x0006abdd: xchg [rax+1], cl; clc; mov byte ptr [rbp-0x500], 0x20; mov dword ptr [rbp-0x4f0], 1; jmp rax;
0x0006abde: add rax, rdi; mov byte ptr [rbp-0x500], 0x20; mov dword ptr [rbp-0x4f0], 1; jmp rax;
0x0006abdf: add eax, edi; mov byte ptr [rbp-0x500], 0x20; mov dword ptr [rbp-0x4f0], 1; jmp rax;
0x0006abe0: clc; mov byte ptr [rbp-0x500], 0x20; mov dword ptr [rbp-0x4f0], 1; jmp rax;
0x0006abe1: mov byte ptr [rbp-0x500], 0x20; mov dword ptr [rbp-0x4f0], 1; jmp rax;
0x0006abe8: mov dword ptr [rbp-0x4f0], 1; jmp rax;
0x0006ac4b: xor eax, 0xfffff283; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax;
0x0006ac4c: xor edx, 0xffffffff; dec dword ptr [rax+0x63]; add al, 0x87; add rax, rsi; jmp rax;
0x0006aceb: cmp eax, 0xfffff1e3; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax;
0x0006adab: xor eax, 0xfffff123; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax;
0x0006adfa: ret 0x1191;
0x0006ae0f: xor eax, 0xfffff0bf; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax;
0x0006ae10: mov edi, 0x48fffff0; movsxd eax, [rdi+rax*4]; add rax, rsi; jmp rax;
0x0006afde: add al, 0x3d; scasd [rdi]; add [rax], al; add [rdi], cl; xchg [rdi-0x76ffffec], esi; ret 0xc083;
0x0006afe0: scasd [rdi]; add [rax], al; add [rdi], cl; xchg [rdi-0x76ffffec], esi; ret 0xc083;
0x0006afe1: add [rax], al; add [rdi], cl; xchg [rdi-0x76ffffec], esi; ret 0xc083;
0x0006afe3: add [rdi], cl; xchg [rdi-0x76ffffec], esi; ret 0xc083;
0x0006afe5: xchg [rdi-0x76ffffec], esi; ret 0xc083;
0x0006b17d: dec dword ptr [rdx]; add [rax], al; add cl, ch; cmp ebx, 0xffffffff; jmp qword ptr [rsi+0xf];
0x0006b17f: add [rax], al; add cl, ch; cmp ebx, 0xffffffff; jmp qword ptr [rsi+0xf];
0x0006b181: add cl, ch; cmp ebx, 0xffffffff; jmp qword ptr [rsi+0xf];
0x0006b183: cmp ebx, 0xffffffff; jmp qword ptr [rsi+0xf];
0x0006b195: dec dword ptr [rax]; add [rax], al; add cl, ch; imul edi, ebx, 0xffffffff; call qword ptr [rax-0x27427cb8];
0x0006b197: add [rax], al; add cl, ch; imul edi, ebx, 0xffffffff; call qword ptr [rax-0x27427cb8];
0x0006b199: add cl, ch; imul edi, ebx, 0xffffffff; call qword ptr [rax-0x27427cb8];
0x0006b19b: imul edi, ebx, 0xffffffff; call qword ptr [rax-0x27427cb8];
0x0006b19e: call qword ptr [rax-0x27427cb8];
0x0006b1f5: add [rbx-0x67b7df18], al; movzx eax, byte ptr [rsi+rax]; lea rsi, [rip-0xd7d]; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax;
0x0006b1f8: and [rax-0x68], cl; movzx eax, byte ptr [rsi+rax]; lea rsi, [rip-0xd7d]; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax;
0x0006b1f9: cdqe; movzx eax, byte ptr [rsi+rax]; lea rsi, [rip-0x1e2]; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax;
0x0006b1fa: cwde; movzx eax, byte ptr [rsi+rax]; lea rsi, [rip-0x1e2]; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax;
0x0006b1fb: movzx eax, byte ptr [rsi+rax]; lea rsi, [rip-0x1e2]; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax;
0x0006b1fd: add al, 6; lea rsi, [rip-0x1e2]; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax;
0x0006b1ff: lea rsi, [rip-0x1e2]; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax;
0x0006b200: lea esi, [rip-0x1e2]; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax;
0x0006b201: xor eax, 0xffffeccd; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax;
0x0006b263: cmp eax, 0xffffec6b; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax;
0x0006b264: imul ebp, esp, 0xffffffff; dec dword ptr [rax+0x63]; add al, 0x86; add rax, rdi; jmp rax;
0x0006b2ff: movzx eax, byte ptr [rsi+rax]; lea rsi, [rip-0x1437]; movsxd rax, [rdi+rax*4]; add rax, rsi; mov r10d, 1; jmp rax;
0x0006b301: add al, 6; lea rsi, [rip-0x1437]; movsxd rax, [rdi+rax*4]; add rax, rsi; mov r10d, 1; jmp rax;
0x0006b303: lea rsi, [rip-0x1437]; movsxd rax, [rdi+rax*4]; add rax, rsi; mov r10d, 1; jmp rax;
0x0006b304: lea esi, [rip-0x1437]; movsxd rax, [rdi+rax*4]; add rax, rsi; mov r10d, 1; jmp rax;
0x0006b305: xor eax, 0xffffebc9; movsxd rax, [rdi+rax*4]; add rax, rsi; mov r10d, 1; jmp rax;
0x0006b309: dec dword ptr [rax+0x63]; add al, 0x87; add rax, rsi; mov r10d, 1; jmp rax;
0x0006b30a: movsxd rax, [rdi+rax*4]; add rax, rsi; mov r10d, 1; jmp rax;
0x0006b30b: movsxd eax, [rdi+rax*4]; add rax, rsi; mov r10d, 1; jmp rax;
0x0006b30c: add al, 0x87; add rax, rsi; mov r10d, 1; jmp rax;
0x0006b30e: add rax, rsi; mov r10d, 1; jmp rax;
0x0006b30f: add eax, esi; mov r10d, 1; jmp rax;
0x0006b311: mov r10d, 1; jmp rax;
0x0006b370: cmp eax, 0xffffeb5e; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax;
0x0006b3c7: add [rax-0x68], cl; movzx eax, byte ptr [rdi+rax]; lea rdi, [rip-0x1395]; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax;
0x0006b3d0: cmp eax, 0xffffeafe; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax;
0x0006b3f4: mov dh, 0x78; add [rcx-0x80], eax; jmp far fword ptr [rdx];
0x0006b3f6: add [rcx-0x80], eax; jmp far fword ptr [rdx];
0x0006b430: movzx esi, byte ptr [rdi+rax]; lea rax, [rip+0x118d05]; lea rdi, [rip-0x156f]; movsxd rax, [rax+rsi*4]; add rax, rdi; jmp rax;
0x0006b432: xor al, 7; lea rax, [rip+0x118d05]; lea rdi, [rip-0x156f]; movsxd rax, [rax+rsi*4]; add rax, rdi; jmp rax;
0x0006b434: lea rax, [rip+0x118d05]; lea rdi, [rip-0x156f]; movsxd rax, [rax+rsi*4]; add rax, rdi; jmp rax;
0x0006b435: lea eax, [rip+0x118d05]; lea rdi, [rip-0x156f]; movsxd rax, [rax+rsi*4]; add rax, rdi; jmp rax;
0x0006b436: add eax, 0x118d05; lea rdi, [rip-0x156f]; movsxd rax, [rax+rsi*4]; add rax, rdi; jmp rax;
0x0006b437: add eax, 0x4800118d; lea edi, [rip-0x156f]; movsxd rax, [rax+rsi*4]; add rax, rdi; jmp rax;
0x0006b438: lea edx, [rcx]; add [rax-0x73], cl; cmp eax, 0xffffea91; movsxd rax, [rax+rsi*4]; add rax, rdi; jmp rax;
0x0006b439: adc [rax], eax; lea rdi, [rip-0x156f]; movsxd rax, [rax+rsi*4]; add rax, rdi; jmp rax;
0x0006b43a: add [rax-0x73], cl; cmp eax, 0xffffea91; movsxd rax, [rax+rsi*4]; add rax, rdi; jmp rax;
0x0006b43b: lea rdi, [rip-0x156f]; movsxd rax, [rax+rsi*4]; add rax, rdi; jmp rax;
0x0006b43c: lea edi, [rip-0x156f]; movsxd rax, [rax+rsi*4]; add rax, rdi; jmp rax;
0x0006b43d: cmp eax, 0xffffea91; movsxd rax, [rax+rsi*4]; add rax, rdi; jmp rax;
0x0006b441: dec dword ptr [rax+0x63]; add al, 0xb0; add rax, rdi; jmp rax;
0x0006b442: movsxd rax, [rax+rsi*4]; add rax, rdi; jmp rax;
0x0006b443: movsxd eax, [rax+rsi*4]; add rax, rdi; jmp rax;
0x0006b444: add al, 0xb0; add rax, rdi; jmp rax;
0x0006b445: mov al, 0x48; add eax, edi; jmp rax;
0x0006b53a: mov [rbp-0x4f0], rcx; mov rdx, rcx; mov rsi, r10; mov rdi, r12; mov [rbp-0x4f8], r9d; call qword ptr [rax+0x38];
0x0006b53b: mov [rbp-0x4f0], ecx; mov rdx, rcx; mov rsi, r10; mov rdi, r12; mov [rbp-0x4f8], r9d; call qword ptr [rax+0x38];
0x0006b541: mov rdx, rcx; mov rsi, r10; mov rdi, r12; mov [rbp-0x4f8], r9d; call qword ptr [rax+0x38];
0x0006b542: mov edx, ecx; mov rsi, r10; mov rdi, r12; mov [rbp-0x4f8], r9d; call qword ptr [rax+0x38];
0x0006b544: mov rsi, r10; mov rdi, r12; mov [rbp-0x4f8], r9d; call qword ptr [rax+0x38];
0x0006b545: mov esi, edx; mov rdi, r12; mov [rbp-0x4f8], r9d; call qword ptr [rax+0x38];
0x0006b547: mov rdi, r12; mov [rbp-0x4f8], r9d; call qword ptr [rax+0x38];
0x0006b548: mov edi, esp; mov [rbp-0x4f8], r9d; call qword ptr [rax+0x38];
0x0006b549: out 0x44, eax; mov [rbp-0x4f8], ecx; call qword ptr [rax+0x38];
0x0006b54a: mov [rbp-0x4f8], r9d; call qword ptr [rax+0x38];
0x0006b54b: mov [rbp-0x4f8], ecx; call qword ptr [rax+0x38];
0x0006b68d: xor [rcx-0x77], cl; ret 0x2948;
0x0006b78d: dec dword ptr [rcx+rcx*4-6]; mov rsi, r10; mov rdi, r12; mov [rbp-0x510], ecx; mov [rbp-0x508], r10; call qword ptr [rax+0x38];
0x0006b78e: mov rdx, r15; mov rsi, r10; mov rdi, r12; mov [rbp-0x510], ecx; mov [rbp-0x508], r10; call qword ptr [rax+0x38];
0x0006b78f: mov edx, edi; mov rsi, r10; mov rdi, r12; mov [rbp-0x510], ecx; mov [rbp-0x508], r10; call qword ptr [rax+0x38];
0x0006b790: cli; mov rsi, r10; mov rdi, r12; mov [rbp-0x510], ecx; mov [rbp-0x508], r10; call qword ptr [rax+0x38];
0x0006b791: mov rsi, r10; mov rdi, r12; mov [rbp-0x510], ecx; mov [rbp-0x508], r10; call qword ptr [rax+0x38];
0x0006b792: mov esi, edx; mov rdi, r12; mov [rbp-0x510], ecx; mov [rbp-0x508], r10; call qword ptr [rax+0x38];
0x0006b794: mov rdi, r12; mov [rbp-0x510], ecx; mov [rbp-0x508], r10; call qword ptr [rax+0x38];
0x0006b795: mov edi, esp; mov [rbp-0x510], ecx; mov [rbp-0x508], r10; call qword ptr [rax+0x38];
0x0006b797: mov [rbp-0x510], ecx; mov [rbp-0x508], r10; call qword ptr [rax+0x38];
0x0006b79d: mov [rbp-0x508], r10; call qword ptr [rax+0x38];
0x0006b79e: mov [rbp-0x508], edx; call qword ptr [rax+0x38];
0x0006b85e: call qword ptr [rax-0x4ff4280];
0x0006b92e: call qword ptr [rax+0x18bd8b48];
0x0006b94e: call qword ptr [rax-0x412f9cb7];
0x0006b97f: popfq; mov [0xfffb10958b480000], eax; dec dword ptr [rax+0x39]; ret 0x850f;
0x0006b980: mov [0xfffb10958b480000], eax; dec dword ptr [rax+0x39]; ret 0x850f;
0x0006ba5e: call qword ptr [rax-0x5176a75];
0x0006bb84: add [rdi], ecx; mov gs, [rbx+0x3145ffff]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; syscall;
0x0006bb86: mov gs, [rbx+0x3145ffff]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; syscall;
0x0006bc80: mov dword ptr [rbp-0x538], 1; jmp rax;
0x0006bc82: enter 0xfffa, 0xff; add [rax], eax; add [rax], al; jmp rax;
0x0006bc8c: nop [rax]; mov dword ptr [rbp-0x520], 1; jmp rax;
0x0006bc90: mov dword ptr [rbp-0x520], 1; jmp rax;
0x0006bcc6: nop [rax+rax]; mov dword ptr [rbp-0x52c], 1; jmp rax;
0x0006bcc7: nop [rax+rax]; mov dword ptr [rbp-0x52c], 1; jmp rax;
0x0006bcc8: nop [rax+rax]; mov dword ptr [rbp-0x52c], 1; jmp rax;
0x0006bcca: test [rax], al; add [rax], al; add [rax], al; mov dword ptr [rbp-0x52c], 1; jmp rax;
0x0006bccc: add [rax], al; add [rax], al; mov dword ptr [rbp-0x52c], 1; jmp rax;
0x0006bcce: add [rax], al; mov dword ptr [rbp-0x52c], 1; jmp rax;
0x0006bcfb: add [rbx-0x67b7df18], al; movzx eax, byte ptr [rdi+rax]; lea rdi, [rip-0xcb0]; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax;
0x0006bcfe: and [rax-0x68], cl; movzx eax, byte ptr [rdi+rax]; lea rdi, [rip-0xcb0]; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax;
0x0006bcff: cdqe; movzx eax, byte ptr [rdi+rax]; lea rdi, [rip-0xcb0]; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax;
0x0006bd00: cwde; movzx eax, byte ptr [rdi+rax]; lea rdi, [rip-0xcb0]; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax;
0x0006bd01: movzx eax, byte ptr [rdi+rax]; lea rdi, [rip-0xcb0]; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax;
0x0006bd03: add al, 7; lea rdi, [rip-0xcb0]; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax;
0x0006bd05: lea rdi, [rip-0xcb0]; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax;
0x0006bd06: lea edi, [rip-0xcb0]; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax;
0x0006bd07: cmp eax, 0xffffe1c7; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax;
0x0006bd15: nop [rax]; mov r11d, 1; jmp rax;
0x0006bd61: nop [rax]; mov r11d, 1; mov ecx, 1; jmp rax;
0x0006bd63: add byte ptr [rax], 0; add [rax], al; mov r11d, 1; mov ecx, 1; jmp rax;
0x0006bd64: add [rax], al; add [rax], al; mov r11d, 1; mov ecx, 1; jmp rax;
0x0006bd65: add [rax], al; add [rcx-0x45], al; add [rax], eax; add [rax], al; mov ecx, 1; jmp rax;
0x0006bd66: add [rax], al; mov r11d, 1; mov ecx, 1; jmp rax;
0x0006bd75: nop [rax]; mov dword ptr [rbp-0x518], 1; jmp rax;
0x0006bd84: nop [rax]; xor r10d, r10d; mov edx, 1; jmp rax;
0x0006bd87: add [rbp+0x31], al; sar byte ptr [rdx+1], cl; jmp rax;
0x0006bd88: xor r10d, r10d; mov edx, 1; jmp rax;
0x0006bd89: xor edx, edx; mov edx, 1; jmp rax;
0x0006bd8a: sar byte ptr [rdx+1], cl; jmp rax;
0x0006be9c: out 0xff, al; call qword ptr [rax-0x50f7a39];
0x0006be9e: call qword ptr [rax-0x50f7a39];
0x0006bf0c: xchg [rcx-0x76fffffb], esp; ret 0xc083;
0x0006bf94: in eax, 0xff; jmp qword ptr [rsi+0xf];
0x0006bff1: add eax, [rax]; add [rdi], cl; ret;
0x0006c0dc: nop; sbb eax, 0x83410015; iretd;
0x0006c0dd: sbb eax, 0x83410015; iretd;
0x0006c0df: add [rcx-0x7d], al; iretd;
0x0006c234: xchg [rdx-0x76fffff9], ebx; ret 0xc083;
0x0006c8fb: fcos; jmp qword ptr [rsi-0x70];
0x0006cc0b: sar bh, cl; jmp qword ptr [rsi-0x70];
0x0006cd85: test ebx, edi; dec dword ptr [rcx-0x77]; ret 0x8548;
0x0006ce5c: test al, 0x84; sti; dec dword ptr [rcx-0x77]; ret 0x8548;
0x0006ce5d: test bl, bh; dec dword ptr [rcx-0x77]; ret 0x8548;
0x0006ce5e: sti; dec dword ptr [rcx-0x77]; ret 0x8548;
0x0006ce5f: dec dword ptr [rcx-0x77]; ret 0x8548;
0x0006cfe4: or [rcx], al; add [rax], al; mov rsi, [rsp+0x40]; movsxd rdx, r13d; mov rdi, rbx; call qword ptr [r14+0x38];
0x0006cfe6: add [rax], al; mov rsi, [rsp+0x40]; movsxd rdx, r13d; mov rdi, rbx; call qword ptr [r14+0x38];
0x0006cfe8: mov rsi, [rsp+0x40]; movsxd rdx, r13d; mov rdi, rbx; call qword ptr [r14+0x38];
0x0006cfe9: mov esi, [rsp+0x40]; movsxd rdx, r13d; mov rdi, rbx; call qword ptr [r14+0x38];
0x0006cfeb: and al, 0x40; movsxd rdx, r13d; mov rdi, rbx; call qword ptr [r14+0x38];
0x0006cfed: movsxd rdx, r13d; mov rdi, rbx; call qword ptr [r14+0x38];
0x0006d03e: add eax, 0x15479d; mov rdi, rsp; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0006d03f: popfq; adc eax, 0xe7894800; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0006d041: adc eax, 0xe7894800; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0006d0a5: adc eax, 0xda894800; mov rsi, [rip+0x150eb7]; mov rdi, rsp; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0006d0a9: fimul st, dword ptr [rax-0x75]; xor eax, 0x150eb7; mov rdi, rsp; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0006d0ac: xor eax, 0x150eb7; mov rdi, rsp; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0006d0ad: mov bh, 0xe; adc eax, 0xe7894800; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0006d0af: adc eax, 0xe7894800; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0006d127: or eax, 0x45ffffff; xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x0006d1e6: mov rax, r9; pop rbp; pop r12; pop r13; pop r14; ret;
0x0006d28c: sti; call far fword ptr [rbx+0x5d];
0x0006d290: mov r9, rax; pop r12; pop r13; mov rax, r9; pop r14; ret;
0x0006d291: mov ecx, eax; pop r12; pop r13; mov rax, r9; pop r14; ret;
0x0006d292: rol dword ptr [rcx+0x5c], 0x41; pop rbp; mov rax, r9; pop r14; ret;
0x0006d293: pop r12; pop r13; mov rax, r9; pop r14; ret;
0x0006d294: pop rsp; pop r13; mov rax, r9; pop r14; ret;
0x0006d295: pop r13; mov rax, r9; pop r14; ret;
0x0006d296: pop rbp; mov rax, r9; pop r14; ret;
0x0006d297: mov rax, r9; pop r14; ret;
0x0006d298: mov eax, ecx; pop r14; ret;
0x0006d3f6: jmp far fword ptr [rsi*2+0x2ef88389];
0x0006d474: ror dword ptr [rax+0x39], 1; enter 0x7676, 0x48; movsxd ebx, ebx; mov rdx, rbx; call qword ptr [r13+0x38];
0x0006d477: enter 0x7676, 0x48; movsxd ebx, ebx; mov rdx, rbx; call qword ptr [r13+0x38];
0x0006d47a: movsxd rbx, ebx; mov rdx, rbx; call qword ptr [r13+0x38];
0x0006d47b: movsxd ebx, ebx; mov rdx, rbx; call qword ptr [r13+0x38];
0x0006d47d: mov rdx, rbx; call qword ptr [r13+0x38];
0x0006d47e: mov edx, ebx; call qword ptr [r13+0x38];
0x0006d49f: mov al, [0x852c8d4c000000]; add [rax], al; add [rax+0x29], cl; ret;
0x0006d4a0: add [rax], al; add [rbp+rcx*4+0x2c], cl; test [rax], eax; add [rax], al; add [rax+0x29], cl; ret;
0x0006d4a2: add [rbp+rcx*4+0x2c], cl; test [rax], eax; add [rax], al; add [rax+0x29], cl; ret;
0x0006d4a6: test [rax], eax; add [rax], al; add [rax+0x29], cl; ret;
0x0006d4e0: sub [rcx-0x3b7cb718], cl; sbb [rbx+0x5d], bl; pop r12; pop r13; ret;
0x0006d57b: lea edx, [rax]; idiv edi; dec dword ptr [rax-0x77]; test [rax], esp; idiv edi; jmp qword ptr [rax+rcx*2-0x75];
0x0006d57d: idiv edi; dec dword ptr [rax-0x77]; test [rax], esp; idiv edi; jmp qword ptr [rax+rcx*2-0x75];
0x0006d57f: dec dword ptr [rax-0x77]; test [rax], esp; idiv edi; jmp qword ptr [rax+rcx*2-0x75];
0x0006d582: test [rax], esp; idiv edi; jmp qword ptr [rax+rcx*2-0x75];
0x0006d584: idiv edi; jmp qword ptr [rax+rcx*2-0x75];
0x0006d7af: mov r10, [rip+0x156bca]; add r15, 0x48; shl rdx, 2; lea rcx, [rbx+rdx]; add rdx, r13; call qword ptr [r10+rax*8];
0x0006d7b0: mov edx, [rip+0x156bca]; add r15, 0x48; shl rdx, 2; lea rcx, [rbx+rdx]; add rdx, r13; call qword ptr [r10+rax*8];
0x0006d7b1: adc eax, 0x156bca; add r15, 0x48; shl rdx, 2; lea rcx, [rbx+rdx]; add rdx, r13; call qword ptr [r10+rax*8];
0x0006d7b3: imul edx, [rip-0x387cb700], 0x48; shl rdx, 2; lea rcx, [rbx+rdx]; add rdx, r13; call qword ptr [r10+rax*8];
0x0006d7b4: adc eax, 0xc7834900; shl rdx, 2; lea rcx, [rbx+rdx]; add rdx, r13; call qword ptr [r10+rax*8];
0x0006d7b6: add r15, 0x48; shl rdx, 2; lea rcx, [rbx+rdx]; add rdx, r13; call qword ptr [r10+rax*8];
0x0006d7b7: add edi, 0x48; shl rdx, 2; lea rcx, [rbx+rdx]; add rdx, r13; call qword ptr [r10+rax*8];
0x0006d7ba: shl rdx, 2; lea rcx, [rbx+rdx]; add rdx, r13; call qword ptr [r10+rax*8];
0x0006d7bb: shl edx, 2; lea rcx, [rbx+rdx]; add rdx, r13; call qword ptr [r10+rax*8];
0x0006d7bd: add cl, [rax-0x73]; or al, 0x13; add rdx, r13; call qword ptr [r10+rax*8];
0x0006d7be: lea rcx, [rbx+rdx]; add rdx, r13; call qword ptr [r10+rax*8];
0x0006d7bf: lea ecx, [rbx+rdx]; add rdx, r13; call qword ptr [r10+rax*8];
0x0006d7c0: or al, 0x13; add rdx, r13; call qword ptr [r10+rax*8];
0x0006d7c1: adc ecx, [rcx+rax-0x16]; call qword ptr [r10+rax*8];
0x0006d7c2: add rdx, r13; call qword ptr [r10+rax*8];
0x0006d7c3: add edx, ebp; call qword ptr [r10+rax*8];
0x0006d7c5: call qword ptr [r10+rax*8];
0x0006d7c6: call qword ptr [rdx+rax*8];
0x0006d81b: or [rax], al; add [rbx-0x78f0f807], al; mov ecx, 0x48000007; movsxd ecx, [rdx+rcx*4]; add rcx, rdx; jmp rcx;
0x0006d81d: add [rbx-0x78f0f807], al; mov ecx, 0x48000007; movsxd ecx, [rdx+rcx*4]; add rcx, rdx; jmp rcx;
0x0006d822: xchg [rcx+0x48000007], edi; movsxd ecx, [rdx+rcx*4]; add rcx, rdx; jmp rcx;
0x0006d823: mov ecx, 0x48000007; movsxd ecx, [rdx+rcx*4]; add rcx, rdx; jmp rcx;
0x0006d825: add [rax], al; movsxd rcx, [rdx+rcx*4]; add rcx, rdx; jmp rcx;
0x0006d826: add [rax+0x63], cl; or al, 0x8a; add rcx, rdx; jmp rcx;
0x0006d827: movsxd rcx, [rdx+rcx*4]; add rcx, rdx; jmp rcx;
0x0006d828: movsxd ecx, [rdx+rcx*4]; add rcx, rdx; jmp rcx;
0x0006d829: or al, 0x8a; add rcx, rdx; jmp rcx;
0x0006d82b: add rcx, rdx; jmp rcx;
0x0006d82c: add ecx, edx; jmp rcx;
0x0006d947: add [rax], al; mov [rbp-0x8c0], r8; mov rdx, r8; mov rdi, [rbp-0x8c8]; mov rsi, r13; call qword ptr [r12+0x38];
0x0006d948: add [rcx+rcx*4-0x7b], cl; idiv edi; dec dword ptr [rcx+rcx*4-0x3e]; mov rdi, [rbp-0x8c8]; mov rsi, r13; call qword ptr [r12+0x38];
0x0006d949: mov [rbp-0x8c0], r8; mov rdx, r8; mov rdi, [rbp-0x8c8]; mov rsi, r13; call qword ptr [r12+0x38];
0x0006d94a: mov [rbp-0x8c0], eax; mov rdx, r8; mov rdi, [rbp-0x8c8]; mov rsi, r13; call qword ptr [r12+0x38];
0x0006d94d: idiv edi; dec dword ptr [rcx+rcx*4-0x3e]; mov rdi, [rbp-0x8c8]; mov rsi, r13; call qword ptr [r12+0x38];
0x0006d94f: dec dword ptr [rcx+rcx*4-0x3e]; mov rdi, [rbp-0x8c8]; mov rsi, r13; call qword ptr [r12+0x38];
0x0006d950: mov rdx, r8; mov rdi, [rbp-0x8c8]; mov rsi, r13; call qword ptr [r12+0x38];
0x0006d951: mov edx, eax; mov rdi, [rbp-0x8c8]; mov rsi, r13; call qword ptr [r12+0x38];
0x0006dad6: mov dh, 0x4f; or eax, 0x8927634d; ret 0xc689;
0x0006dad7: or rax, 0xffffffff8927634d; ret 0xc689;
0x0006dad8: or eax, 0x8927634d; ret 0xc689;
0x0006dadd: ret 0xc689;
0x0006daed: ret 0x8840;
0x0006dcd2: enter 0x8948, 4; iretd;
0x0006dd15: add [rax], al; add [rcx+0xf], al; mov dh, 0x57; or al, 0xf6; ret 0xf08;
0x0006dd17: add [rcx+0xf], al; mov dh, 0x57; or al, 0xf6; ret 0xf08;
0x0006dfb6: add al, 0x81; jmp far fword ptr [rdi+0xf000000];
0x0006dfb8: jmp far fword ptr [rdi+0xf000000];
0x0006e03e: call qword ptr [rax+0xf08c5f6];
0x0006e089: add al, ch; xchg ecx, eax; cld; call qword ptr [rax+0x87e8b48];
0x0006e08b: xchg ecx, eax; cld; call qword ptr [rax+0x87e8b48];
0x0006e08c: cld; call qword ptr [rax+0x87e8b48];
0x0006e08d: cld; call qword ptr [rax+0x87e8b48];
0x0006e08e: call qword ptr [rax+0x87e8b48];
0x0006e0cf: movzx edx, byte ptr [rdx+rax]; lea rax, [rip+0x116266]; movsxd rax, [rax+rdx*4]; lea rdx, [rip-0x450]; add rax, rdx; jmp rax;
0x0006e0d1: adc al, 2; lea rax, [rip+0x116266]; movsxd rax, [rax+rdx*4]; lea rdx, [rip-0x450]; add rax, rdx; jmp rax;
0x0006e0d2: add cl, [rax-0x73]; add eax, 0x116266; movsxd rax, [rax+rdx*4]; lea rdx, [rip-0x450]; add rax, rdx; jmp rax;
0x0006e0d3: lea rax, [rip+0x116266]; movsxd rax, [rax+rdx*4]; lea rdx, [rip-0x450]; add rax, rdx; jmp rax;
0x0006e0d4: lea eax, [rip+0x116266]; movsxd rax, [rax+rdx*4]; lea rdx, [rip-0x450]; add rax, rdx; jmp rax;
0x0006e0d5: add eax, 0x116266; movsxd rax, [rax+rdx*4]; lea rdx, [rip-0x450]; add rax, rdx; jmp rax;
0x0006e0d8: adc [rax], eax; movsxd rax, [rax+rdx*4]; lea rdx, [rip-0x450]; add rax, rdx; jmp rax;
0x0006e0d9: add [rax+0x63], cl; add al, 0x90; lea rdx, [rip-0x450]; add rax, rdx; jmp rax;
0x0006e0da: movsxd rax, [rax+rdx*4]; lea rdx, [rip-0x450]; add rax, rdx; jmp rax;
0x0006e0db: movsxd eax, [rax+rdx*4]; lea rdx, [rip-0x450]; add rax, rdx; jmp rax;
0x0006e0dc: add al, 0x90; lea rdx, [rip-0x450]; add rax, rdx; jmp rax;
0x0006e0dd: nop; lea rdx, [rip-0x450]; add rax, rdx; jmp rax;
0x0006e0de: lea rdx, [rip-0x450]; add rax, rdx; jmp rax;
0x0006e0df: lea edx, [rip-0x450]; add rax, rdx; jmp rax;
0x0006e0e0: adc eax, 0xfffffbb0; add rax, rdx; jmp rax;
0x0006e22e: mov rsi, [r15+0x18]; mov rdx, [r15+0x20]; mov rdi, [rbp-0x8c8]; sub rdx, rsi; sar rdx, 2; call qword ptr [r12+0x38];
0x0006e22f: mov esi, [rdi+0x18]; mov rdx, [r15+0x20]; mov rdi, [rbp-0x8c8]; sub rdx, rsi; sar rdx, 2; call qword ptr [r12+0x38];
0x0006e232: mov rdx, [r15+0x20]; mov rdi, [rbp-0x8c8]; sub rdx, rsi; sar rdx, 2; call qword ptr [r12+0x38];
0x0006e233: mov edx, [rdi+0x20]; mov rdi, [rbp-0x8c8]; sub rdx, rsi; sar rdx, 2; call qword ptr [r12+0x38];
0x0006e234: push rdi; and [rax-0x75], cl; mov ebp, 0xfffff738; sub rdx, rsi; sar rdx, 2; call qword ptr [r12+0x38];
0x0006e235: and [rax-0x75], cl; mov ebp, 0xfffff738; sub rdx, rsi; sar rdx, 2; call qword ptr [r12+0x38];
0x0006e236: mov rdi, [rbp-0x8c8]; sub rdx, rsi; sar rdx, 2; call qword ptr [r12+0x38];
0x0006e237: mov edi, [rbp-0x8c8]; sub rdx, rsi; sar rdx, 2; call qword ptr [r12+0x38];
0x0006e238: mov ebp, 0xfffff738; sub rdx, rsi; sar rdx, 2; call qword ptr [r12+0x38];
0x0006e23d: sub rdx, rsi; sar rdx, 2; call qword ptr [r12+0x38];
0x0006e23e: sub edx, esi; sar rdx, 2; call qword ptr [r12+0x38];
0x0006e240: sar rdx, 2; call qword ptr [r12+0x38];
0x0006e241: sar edx, 2; call qword ptr [r12+0x38];
0x0006e248: cmp [rax-0x77], cl; ret 0x8b49;
0x0006e24e: and [r9+0x2b], r9b; sbb [r8-0x3f], r9b; clc; add cl, [rax+0x39]; ret 0x850f;
0x0006e24f: and [rcx+0x2b], cl; sbb [r8-0x3f], r9b; clc; add cl, [rax+0x39]; ret 0x850f;
0x0006e252: sbb [r8-0x3f], r9b; clc; add cl, [rax+0x39]; ret 0x850f;
0x0006e253: sbb [rax-0x3f], cl; clc; add cl, [rax+0x39]; ret 0x850f;
0x0006e256: clc; add cl, [rax+0x39]; ret 0x850f;
0x0006e257: add cl, [rax+0x39]; ret 0x850f;
0x0006e370: mov rax, [rax+r11*8]; mov [rbp-0x945], r9b; mov rdi, [rbp-0x8c8]; mov rdx, r10; mov rsi, r15; call rax;
0x0006e371: mov eax, [rax+rbx*8]; mov [rbp-0x945], r9b; mov rdi, [rbp-0x8c8]; mov rdx, r10; mov rsi, r15; call rax;
0x0006e372: add al, 0xd8; mov [rbp-0x945], r9b; mov rdi, [rbp-0x8c8]; mov rdx, r10; mov rsi, r15; call rax;
0x0006e373: fadd st, dword ptr [rax+rcx*4-0x73]; mov ebx, 0x48fffff6; mov edi, [rbp-0x8c8]; mov rdx, r10; mov rsi, r15; call rax;
0x0006e374: mov [rbp-0x945], r9b; mov rdi, [rbp-0x8c8]; mov rdx, r10; mov rsi, r15; call rax;
0x0006e375: mov [rbp-0x945], cl; mov rdi, [rbp-0x8c8]; mov rdx, r10; mov rsi, r15; call rax;
0x0006e376: lea edi, [rbx+0x48fffff6]; mov edi, [rbp-0x8c8]; mov rdx, r10; mov rsi, r15; call rax;
0x0006e377: mov ebx, 0x48fffff6; mov edi, [rbp-0x8c8]; mov rdx, r10; mov rsi, r15; call rax;
0x0006e378: idiv bh; dec dword ptr [rax-0x75]; mov ebp, 0xfffff738; mov rdx, r10; mov rsi, r15; call rax;
0x0006e37a: dec dword ptr [rax-0x75]; mov ebp, 0xfffff738; mov rdx, r10; mov rsi, r15; call rax;
0x0006e37b: mov rdi, [rbp-0x8c8]; mov rdx, r10; mov rsi, r15; call rax;
0x0006e37c: mov edi, [rbp-0x8c8]; mov rdx, r10; mov rsi, r15; call rax;
0x0006e37d: mov ebp, 0xfffff738; mov rdx, r10; mov rsi, r15; call rax;
0x0006e37f: idiv edi; dec dword ptr [rcx+rcx*4-0x2e]; mov rsi, r15; call rax;
0x0006e381: dec dword ptr [rcx+rcx*4-0x2e]; mov rsi, r15; call rax;
0x0006e382: mov rdx, r10; mov rsi, r15; call rax;
0x0006e383: mov edx, edx; mov rsi, r15; call rax;
0x0006e384: ror byte ptr [rcx+rcx*4-2], cl; call rax;
0x0006e3b5: fidivr st, dword ptr [rcx]; ret 0x820f;
0x0006e3bb: idiv bh; inc dword ptr [rcx]; ret;
0x0006e3bd: inc dword ptr [rcx]; ret;
0x0006e469: add [rbx-0x8bf43], al; call qword ptr [rbx+0xf];
0x0006e46d: idiv edi; call qword ptr [rbx+0xf];
0x0006e46f: call qword ptr [rbx+0xf];
0x0006e48f: lea ebp, [rbx-5]; dec dword ptr [rax-0x77]; ret 0xb848;
0x0006e573: add [rax], al; add [rax-0x77], cl; ret 0x2948;
0x0006e586: adc eax, [rax]; add [rax-0x75], cl; mov ebp, 0xfffff738; mov rdx, r12; mov rsi, r13; call qword ptr [rax+0x38];
0x0006e587: add [rax], al; mov rdi, [rbp-0x8c8]; mov rdx, r12; mov rsi, r13; call qword ptr [rax+0x38];
0x0006e588: add [rax-0x75], cl; mov ebp, 0xfffff738; mov rdx, r12; mov rsi, r13; call qword ptr [rax+0x38];
0x0006e589: mov rdi, [rbp-0x8c8]; mov rdx, r12; mov rsi, r13; call qword ptr [rax+0x38];
0x0006e58a: mov edi, [rbp-0x8c8]; mov rdx, r12; mov rsi, r13; call qword ptr [rax+0x38];
0x0006e58b: mov ebp, 0xfffff738; mov rdx, r12; mov rsi, r13; call qword ptr [rax+0x38];
0x0006e58d: idiv edi; dec dword ptr [rcx+rcx*4-0x1e]; mov rsi, r13; call qword ptr [rax+0x38];
0x0006e58f: dec dword ptr [rcx+rcx*4-0x1e]; mov rsi, r13; call qword ptr [rax+0x38];
0x0006e590: mov rdx, r12; mov rsi, r13; call qword ptr [rax+0x38];
0x0006e591: mov edx, esp; mov rsi, r13; call qword ptr [rax+0x38];
0x0006e593: mov rsi, r13; call qword ptr [rax+0x38];
0x0006e594: mov esi, ebp; call qword ptr [rax+0x38];
0x0006e595: out dx, al; call qword ptr [rax+0x38];
0x0006e6fd: out dx, eax; add [rdx], dl; add al, ch; sbb bl, [rdi-4]; jmp qword ptr [rsi+0x2e];
0x0006e6fe: add [rdx], dl; add al, ch; sbb bl, [rdi-4]; jmp qword ptr [rsi+0x2e];
0x0006e700: add al, ch; sbb bl, [rdi-4]; jmp qword ptr [rsi+0x2e];
0x0006e702: sbb bl, [rdi-4]; jmp qword ptr [rsi+0x2e];
0x0006e703: pop rdi; cld; jmp qword ptr [rsi+0x2e];
0x0006e826: test eax, esi; idiv bh; inc esi; test eax, eax; idiv bh; jmp qword ptr [rax];
0x0006e828: idiv bh; inc esi; test eax, eax; idiv bh; jmp qword ptr [rax];
0x0006e82a: inc esi; test eax, eax; idiv bh; jmp qword ptr [rax];
0x0006e873: dec dword ptr [rdi]; test bh, ch; add eax, 0x83410000; out dx, al; add [rax-0x93f43], eax; jmp qword ptr [rax];
0x0006e875: test bh, ch; add eax, 0x83410000; out dx, al; add [rax-0x93f43], eax; jmp qword ptr [rax];
0x0006e876: out dx, eax; add eax, 0x83410000; out dx, al; add [rax-0x93f43], eax; jmp qword ptr [rax];
0x0006e877: add eax, 0x83410000; out dx, al; add [rax-0x93f43], eax; jmp qword ptr [rax];
0x0006e879: add [rcx-0x7d], al; out dx, al; add [rax-0x93f43], eax; jmp qword ptr [rax];
0x0006e87c: out dx, al; add [rax-0x93f43], eax; jmp qword ptr [rax];
0x0006e87d: add [rax-0x93f43], eax; jmp qword ptr [rax];
0x0006e990: xchg [rbx+0x4800000e], ah; mov [rbp-0x8c0], ecx; mov rdx, rcx; mov rdi, [rbp-0x8c8]; mov rsi, r13; call qword ptr [r12+0x38];
0x0006e993: add [rax], al; mov [rbp-0x8c0], rcx; mov rdx, rcx; mov rdi, [rbp-0x8c8]; mov rsi, r13; call qword ptr [r12+0x38];
0x0006e995: mov [rbp-0x8c0], rcx; mov rdx, rcx; mov rdi, [rbp-0x8c8]; mov rsi, r13; call qword ptr [r12+0x38];
0x0006e996: mov [rbp-0x8c0], ecx; mov rdx, rcx; mov rdi, [rbp-0x8c8]; mov rsi, r13; call qword ptr [r12+0x38];
0x0006e99c: mov rdx, rcx; mov rdi, [rbp-0x8c8]; mov rsi, r13; call qword ptr [r12+0x38];
0x0006e99d: mov edx, ecx; mov rdi, [rbp-0x8c8]; mov rsi, r13; call qword ptr [r12+0x38];
0x0006e99f: mov rdi, [rbp-0x8c8]; mov rsi, r13; call qword ptr [r12+0x38];
0x0006e9a0: mov edi, [rbp-0x8c8]; mov rsi, r13; call qword ptr [r12+0x38];
0x0006e9a1: mov ebp, 0xfffff738; mov rsi, r13; call qword ptr [r12+0x38];
0x0006e9a3: idiv edi; dec dword ptr [rcx+rcx*4-0x12]; call qword ptr [r12+0x38];
0x0006e9a5: dec dword ptr [rcx+rcx*4-0x12]; call qword ptr [r12+0x38];
0x0006e9a6: mov rsi, r13; call qword ptr [r12+0x38];
0x0006e9a7: mov esi, ebp; call qword ptr [r12+0x38];
0x0006e9a8: out dx, al; call qword ptr [r12+0x38];
0x0006eab7: idiv edi; inc dword ptr [rax]; add [rax], al; add [rbx-0x7a39fe20], al; shl dh, 0xff; jmp qword ptr [rax];
0x0006eab9: inc dword ptr [rax]; add [rax], al; add [rbx-0x7a39fe20], al; shl dh, 0xff; jmp qword ptr [rax];
0x0006eae1: test eax, ebp; idiv bh; inc dword ptr [rbx-0x8bf43]; call far fword ptr [rax-0x78];
0x0006eae3: idiv bh; inc dword ptr [rbx-0x8bf43]; call far fword ptr [rax-0x78];
0x0006eae5: inc dword ptr [rbx-0x8bf43]; call far fword ptr [rax-0x78];
0x0006eae9: idiv edi; call far fword ptr [rax-0x78];
0x0006eaeb: call far fword ptr [rax-0x78];
0x0006eb20: idiv bh; dec dword ptr [rbp+0x63]; ret;
0x0006eb22: dec dword ptr [rbp+0x63]; ret;
0x0006eb4b: ret 0xe273;
0x0006eb82: mov ch, 0xf8; idiv bh; dec dword ptr [rax+0x29]; ret 0xb8;
0x0006eb83: clc; idiv bh; dec dword ptr [rax+0x29]; ret 0xb8;
0x0006eb84: idiv bh; dec dword ptr [rax+0x29]; ret 0xb8;
0x0006eb86: dec dword ptr [rax+0x29]; ret 0xb8;
0x0006ec5e: add [rax], al; add cl, ch; ret 0xfffd;
0x0006ec60: add cl, ch; ret 0xfffd;
0x0006ed27: push rbp; add [rax-0x77], cl; ret 0xc148;
0x0006ed6a: ret 0x8b42;
0x0006ee68: inc dword ptr [rax-0x93f43]; jmp qword ptr [rax];
0x0006ef50: lea eax, [rax]; add [rax-0x75], cl; xchg ebp, eax; idiv edi; dec dword ptr [rax+0x39]; ret 0x850f;
0x0006ef52: add [rax-0x75], cl; xchg ebp, eax; idiv edi; dec dword ptr [rax+0x39]; ret 0x850f;
0x0006ef55: xchg ebp, eax; idiv edi; dec dword ptr [rax+0x39]; ret 0x850f;
0x0006ef57: idiv edi; dec dword ptr [rax+0x39]; ret 0x850f;
0x0006f03c: ror byte ptr [rdx], 0; add [rax-0x75], cl; mov ebp, 0xfffff738; mov rdx, r12; mov rsi, r13; call qword ptr [r14+0x38];
0x0006f03d: or al, [rax]; add [rax-0x75], cl; mov ebp, 0xfffff738; mov rdx, r12; mov rsi, r13; call qword ptr [r14+0x38];
0x0006f03e: add [rax], al; mov rdi, [rbp-0x8c8]; mov rdx, r12; mov rsi, r13; call qword ptr [r14+0x38];
0x0006f03f: add [rax-0x75], cl; mov ebp, 0xfffff738; mov rdx, r12; mov rsi, r13; call qword ptr [r14+0x38];
0x0006f040: mov rdi, [rbp-0x8c8]; mov rdx, r12; mov rsi, r13; call qword ptr [r14+0x38];
0x0006f041: mov edi, [rbp-0x8c8]; mov rdx, r12; mov rsi, r13; call qword ptr [r14+0x38];
0x0006f042: mov ebp, 0xfffff738; mov rdx, r12; mov rsi, r13; call qword ptr [r14+0x38];
0x0006f044: idiv edi; dec dword ptr [rcx+rcx*4-0x1e]; mov rsi, r13; call qword ptr [r14+0x38];
0x0006f046: dec dword ptr [rcx+rcx*4-0x1e]; mov rsi, r13; call qword ptr [r14+0x38];
0x0006f138: mov esp, 0x1fffff6; add [rax], al; add [rbx-0x7a39fe20], al; shl dh, 0xff; jmp qword ptr [rax];
0x0006f139: idiv bh; inc dword ptr [rcx]; add [rax], al; add [rbx-0x7a39fe20], al; shl dh, 0xff; jmp qword ptr [rax];
0x0006f13b: inc dword ptr [rcx]; add [rax], al; add [rbx-0x7a39fe20], al; shl dh, 0xff; jmp qword ptr [rax];
0x0006f13d: add [rax], al; add [rbx-0x7a39fe20], al; shl dh, 0xff; jmp qword ptr [rax];
0x0006f13f: add [rbx-0x7a39fe20], al; shl dh, 0xff; jmp qword ptr [rax];
0x0006f142: add esi, eax; test eax, eax; idiv bh; jmp qword ptr [rax];
0x0006f144: test eax, eax; idiv bh; jmp qword ptr [rax];
0x0006f145: shl dh, 0xff; jmp qword ptr [rax];
0x0006f146: idiv bh; jmp qword ptr [rax];
0x0006f2d5: sbb cl, ch; adc eax, 0xf6ffffef; ret 0xf10;
0x0006f2d7: adc eax, 0xf6ffffef; ret 0xf10;
0x0006f2da: push rsi; ret 0xf10;
0x0006f3cd: lea rdi, [rsp+0xf]; and rdi, 0xfffffffffffffff0; mov [rax], rdi; movsxd r8, [rbx+r15*4]; mov rcx, [rip+0x15b2ca]; call qword ptr [rcx+r8*8-0x40];
0x0006f3ce: lea edi, [rsp+0xf]; and rdi, 0xfffffffffffffff0; mov [rax], rdi; movsxd r8, [rbx+r15*4]; mov rcx, [rip+0x15b2ca]; call qword ptr [rcx+r8*8-0x40];
0x0006f3d0: and al, 0xf; and rdi, 0xfffffffffffffff0; mov [rax], rdi; movsxd r8, [rbx+r15*4]; mov rcx, [rip+0x15b2ca]; call qword ptr [rcx+r8*8-0x40];
0x0006f3d1: cmovs eax, [rbx-0x76b70f19]; cmp [rsi+0x63], cl; add al, 0xbb; mov rcx, [rip+0x15b2ca]; call qword ptr [rcx+r8*8-0x40];
0x0006f3d2: and rdi, 0xfffffffffffffff0; mov [rax], rdi; movsxd r8, [rbx+r15*4]; mov rcx, [rip+0x15b2ca]; call qword ptr [rcx+r8*8-0x40];
0x0006f3d3: and edi, 0xfffffff0; mov [rax], rdi; movsxd r8, [rbx+r15*4]; mov rcx, [rip+0x15b2ca]; call qword ptr [rcx+r8*8-0x40];
0x0006f3d4: out 0xf0, eax; mov [rax], rdi; movsxd r8, [rbx+r15*4]; mov rcx, [rip+0x15b2ca]; call qword ptr [rcx+r8*8-0x40];
0x0006f3d6: mov [rax], rdi; movsxd r8, [rbx+r15*4]; mov rcx, [rip+0x15b2ca]; call qword ptr [rcx+r8*8-0x40];
0x0006f3d7: mov [rax], edi; movsxd r8, [rbx+r15*4]; mov rcx, [rip+0x15b2ca]; call qword ptr [rcx+r8*8-0x40];
0x0006f3d8: cmp [rsi+0x63], cl; add al, 0xbb; mov rcx, [rip+0x15b2ca]; call qword ptr [rcx+r8*8-0x40];
0x0006f3d9: movsxd r8, [rbx+r15*4]; mov rcx, [rip+0x15b2ca]; call qword ptr [rcx+r8*8-0x40];
0x0006f3da: movsxd eax, [rbx+rdi*4]; mov rcx, [rip+0x15b2ca]; call qword ptr [rcx+r8*8-0x40];
0x0006f3db: add al, 0xbb; mov rcx, [rip+0x15b2ca]; call qword ptr [rcx+r8*8-0x40];
0x0006f3dd: mov rcx, [rip+0x15b2ca]; call qword ptr [rcx+r8*8-0x40];
0x0006f3de: mov ecx, [rip+0x15b2ca]; call qword ptr [rcx+r8*8-0x40];
0x0006f3df: or eax, 0x154fa4; call qword ptr [rcx+r8*8-0x40];
0x0006f3e4: call qword ptr [rcx+r8*8-0x40];
0x0006f3e5: call qword ptr [rcx+rax*8-0x40];
0x0006f408: ret 0xf49;
0x0006f5df: pop r11; sti; dec dword ptr [rax-0x77]; ret 0xabe9;
0x0006f5e0: pop rbx; sti; dec dword ptr [rax-0x77]; ret 0xabe9;
0x0006f5e1: sti; dec dword ptr [rax-0x77]; ret 0xabe9;
0x0006f5e2: dec dword ptr [rax-0x77]; ret 0xabe9;
0x0006f5e5: ret 0xabe9;
0x0006f6b1: idiv bh; dec dword ptr [rdi]; test [rdi-0x1600001f], esi; pavgw mm7, mm7; call qword ptr [rax+0x38bd8b48];
0x0006f6b3: dec dword ptr [rdi]; test [rdi-0x1600001f], esi; pavgw mm7, mm7; call qword ptr [rax+0x38bd8b48];
0x0006f6b5: test [rdi-0x1600001f], esi; pavgw mm7, mm7; call qword ptr [rax+0x38bd8b48];
0x0006f6bb: pavgw mm7, mm7; call qword ptr [rax+0x38bd8b48];
0x0006f6be: call qword ptr [rax+0x38bd8b48];
0x0006f6df: idiv bh; dec dword ptr [rax+0x39]; ret 0x850f;
0x0006f740: inc dword ptr [rcx+0xf]; mov dh, 0x57; or al, 0xf6; ret 0xf08;
0x0006f743: mov dh, 0x57; or al, 0xf6; ret 0xf08;
0x0006f744: push rdi; or al, 0xf6; ret 0xf08;
0x0006f745: or al, 0xf6; ret 0xf08;
0x0006fae8: add [rbx-0x7af00008], al; test eax, 0xe9fffff6; xlat [rbx]; fdivp st(7), st; jmp qword ptr [rsi+0xf];
0x0006faea: clc; dec dword ptr [rdi]; test [rcx-0x1600000a], ebp; xlat [rbx]; fdivp st(7), st; jmp qword ptr [rsi+0xf];
0x0006faeb: dec dword ptr [rdi]; test [rcx-0x1600000a], ebp; xlat [rbx]; fdivp st(7), st; jmp qword ptr [rsi+0xf];
0x0006faed: test [rcx-0x1600000a], ebp; xlat [rbx]; fdivp st(7), st; jmp qword ptr [rsi+0xf];
0x0006faee: test eax, 0xe9fffff6; xlat [rbx]; fdivp st(7), st; jmp qword ptr [rsi+0xf];
0x0006faf3: xlat [rbx]; fdivp st(7), st; jmp qword ptr [rsi+0xf];
0x0006fb4c: fdivp st(7), st; call qword ptr [rax+0x1bc41];
0x0006fb4e: call qword ptr [rax+0x1bc41];
0x0006fb76: push rsp; fdivp st(7), st; jmp qword ptr [rsi+0xf];
0x0006fbbb: fdivp st(7), st; jmp qword ptr [rsi-0x70];
0x0006fd51: add [rcx-0x4b773], cl; jmp qword ptr [rax+rcx*2-0x75];
0x0006fe4c: test byte ptr [rcx+rcx*4-0x19], 0x4c; sub ebx, esi; mov r13, rbx; sar r13, 2; mov rdx, r13; call qword ptr [rax+0x38];
0x0006fe4d: mov rdi, r12; sub rbx, r14; mov r13, rbx; sar r13, 2; mov rdx, r13; call qword ptr [rax+0x38];
0x0006fe4e: mov edi, esp; sub rbx, r14; mov r13, rbx; sar r13, 2; mov rdx, r13; call qword ptr [rax+0x38];
0x0006fe4f: out 0x4c, eax; sub ebx, esi; mov r13, rbx; sar r13, 2; mov rdx, r13; call qword ptr [rax+0x38];
0x0006fe50: sub rbx, r14; mov r13, rbx; sar r13, 2; mov rdx, r13; call qword ptr [rax+0x38];
0x0006fe51: sub ebx, esi; mov r13, rbx; sar r13, 2; mov rdx, r13; call qword ptr [rax+0x38];
0x0006fe53: mov r13, rbx; sar r13, 2; mov rdx, r13; call qword ptr [rax+0x38];
0x0006fe54: mov ebp, ebx; sar r13, 2; mov rdx, r13; call qword ptr [rax+0x38];
0x0006fe55: fisttp qword ptr [rcx-0x3f], st; std; add cl, [rcx+rcx*4-0x16]; call qword ptr [rax+0x38];
0x0006fe56: sar r13, 2; mov rdx, r13; call qword ptr [rax+0x38];
0x0006fe57: sar ebp, 2; mov rdx, r13; call qword ptr [rax+0x38];
0x0006fe58: std; add cl, [rcx+rcx*4-0x16]; call qword ptr [rax+0x38];
0x0006fe59: add cl, [rcx+rcx*4-0x16]; call qword ptr [rax+0x38];
0x0006fe5a: mov rdx, r13; call qword ptr [rax+0x38];
0x0006fe5b: mov edx, ebp; call qword ptr [rax+0x38];
0x0006fe6e: inc dword ptr [rcx]; add [rax], al; add [rax+0x39], cl; ret;
0x0006ff61: mov dword ptr [rbp-0x4d0], 0; mov dword ptr [rbp-0x518], 0; mov qword ptr [rbp-0x4d8], 0; mov dword ptr [rbp-0x500], 0x20; mov dword ptr [rbp-0x4e0], 0xffffffff; jmp rax;
0x0006ff69: add [rax], al; mov dword ptr [rbp-0x518], 0; mov qword ptr [rbp-0x4d8], 0; mov dword ptr [rbp-0x500], 0x20; mov dword ptr [rbp-0x4e0], 0xffffffff; jmp rax;
0x0006ff6b: mov dword ptr [rbp-0x518], 0; mov qword ptr [rbp-0x4d8], 0; mov dword ptr [rbp-0x500], 0x20; mov dword ptr [rbp-0x4e0], 0xffffffff; jmp rax;
0x0006ff71: add [rax], al; add [rax], al; mov qword ptr [rbp-0x4d8], 0; mov dword ptr [rbp-0x500], 0x20; mov dword ptr [rbp-0x4e0], 0xffffffff; jmp rax;
0x0006ff73: add [rax], al; mov qword ptr [rbp-0x4d8], 0; mov dword ptr [rbp-0x500], 0x20; mov dword ptr [rbp-0x4e0], 0xffffffff; jmp rax;
0x0006ff75: mov qword ptr [rbp-0x4d8], 0; mov dword ptr [rbp-0x500], 0x20; mov dword ptr [rbp-0x4e0], 0xffffffff; jmp rax;
0x0006ff76: mov dword ptr [rbp-0x4d8], 0; mov dword ptr [rbp-0x500], 0x20; mov dword ptr [rbp-0x4e0], 0xffffffff; jmp rax;
0x0006ff7c: add [rax], al; add [rax], al; mov dword ptr [rbp-0x500], 0x20; mov dword ptr [rbp-0x4e0], 0xffffffff; jmp rax;
0x0006ff7e: add [rax], al; mov dword ptr [rbp-0x500], 0x20; mov dword ptr [rbp-0x4e0], 0xffffffff; jmp rax;
0x0006ff80: mov dword ptr [rbp-0x500], 0x20; mov dword ptr [rbp-0x4e0], 0xffffffff; jmp rax;
0x0006ff86: and [rax], al; add [rax], al; mov dword ptr [rbp-0x4e0], 0xffffffff; jmp rax;
0x0006ff88: add [rax], al; mov dword ptr [rbp-0x4e0], 0xffffffff; jmp rax;
0x0006ff8a: mov dword ptr [rbp-0x4e0], 0xffffffff; jmp rax;
0x0006ffda: cmp dl, [rbx-5]; jmp qword ptr [rsi-0x70];
0x0006ffdb: push rbx; sti; jmp qword ptr [rsi-0x70];
0x00070013: mov rax, [rip+0x1517c6]; lea rdi, [rbp-0x460]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00070014: mov eax, [rip+0x1517c6]; lea rdi, [rbp-0x460]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00070015: add eax, 0x1517c6; lea rdi, [rbp-0x460]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00070019: add [rax-0x73], cl; mov ebp, 0xfffffba0; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0007001a: lea rdi, [rbp-0x460]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0007001b: lea edi, [rbp-0x460]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0007001c: mov ebp, 0xfffffba0; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0007001d: mov al, [0xc8c148f631fffffb]; adc [rax+rcx*2+0x33], esp; add al, 0x25; xor [rax], al; add [rax], al; call rax;
0x000700d7: mov rsi, [rip+0x14de8a]; lea rdi, [rbp-0x460]; mov rdx, r12; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000700d8: mov esi, [rip+0x14de8a]; lea rdi, [rbp-0x460]; mov rdx, r12; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000700d9: xor eax, 0x14de8a; lea rdi, [rbp-0x460]; mov rdx, r12; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000700db: ficom st, word ptr [rax+rax]; lea rdi, [rbp-0x460]; mov rdx, r12; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000700dc: adc al, 0; lea rdi, [rbp-0x460]; mov rdx, r12; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000700dd: add [rax-0x73], cl; mov ebp, 0xfffffba0; mov rdx, r12; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000700de: lea rdi, [rbp-0x460]; mov rdx, r12; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000700df: lea edi, [rbp-0x460]; mov rdx, r12; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000700e0: mov ebp, 0xfffffba0; mov rdx, r12; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000700e1: mov al, [0xc148e2894cfffffb]; enter 0x6411, 0x48; xor eax, [0x30]; call rax;
0x000700e4: dec dword ptr [rcx+rcx*4-0x1e]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000700e5: mov rdx, r12; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000700e6: mov edx, esp; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00070165: movzx eax, byte ptr [rax+rcx]; lea rcx, [rip-0x1c5]; movsxd rax, [r9+rax*4]; add rax, rcx; xor ecx, ecx; jmp rax;
0x00070167: add al, 8; lea rcx, [rip-0x1c5]; movsxd rax, [r9+rax*4]; add rax, rcx; xor ecx, ecx; jmp rax;
0x00070168: or [rax-0x73], cl; or eax, 0xfffffe3b; movsxd rax, [r9+rax*4]; add rax, rcx; xor ecx, ecx; jmp rax;
0x00070169: lea rcx, [rip-0x1c5]; movsxd rax, [r9+rax*4]; add rax, rcx; xor ecx, ecx; jmp rax;
0x0007016a: lea ecx, [rip-0x1c5]; movsxd rax, [r9+rax*4]; add rax, rcx; xor ecx, ecx; jmp rax;
0x0007016b: or eax, 0xfffffe3b; movsxd rax, [r9+rax*4]; add rax, rcx; xor ecx, ecx; jmp rax;
0x0007016f: dec dword ptr [rcx+0x63]; add al, 0x81; add rax, rcx; xor ecx, ecx; jmp rax;
0x00070170: movsxd rax, [r9+rax*4]; add rax, rcx; xor ecx, ecx; jmp rax;
0x00070171: movsxd eax, [rcx+rax*4]; add rax, rcx; xor ecx, ecx; jmp rax;
0x00070172: add al, 0x81; add rax, rcx; xor ecx, ecx; jmp rax;
0x00070174: add rax, rcx; xor ecx, ecx; jmp rax;
0x00070175: add eax, ecx; xor ecx, ecx; jmp rax;
0x000701dd: call qword ptr [rax-0x75];
0x00070259: nop [rax]; mov r11d, 1; xor ecx, ecx; jmp rax;
0x0007025b: add byte ptr [rax], 0; add [rax], al; mov r11d, 1; xor ecx, ecx; jmp rax;
0x0007025c: add [rax], al; add [rax], al; mov r11d, 1; xor ecx, ecx; jmp rax;
0x0007025d: add [rax], al; add [rcx-0x45], al; add [rax], eax; add [rax], al; xor ecx, ecx; jmp rax;
0x0007025e: add [rax], al; mov r11d, 1; xor ecx, ecx; jmp rax;
0x0007025f: add [rcx-0x45], al; add [rax], eax; add [rax], al; xor ecx, ecx; jmp rax;
0x00070260: mov r11d, 1; xor ecx, ecx; jmp rax;
0x00070261: mov ebx, 1; xor ecx, ecx; jmp rax;
0x00070262: add [rax], eax; add [rax], al; xor ecx, ecx; jmp rax;
0x00070263: add [rax], al; add [rcx], dh; leave; jmp rax;
0x00070264: add [rax], al; xor ecx, ecx; jmp rax;
0x00070265: add [rcx], dh; leave; jmp rax;
0x00070266: xor ecx, ecx; jmp rax;
0x00070267: leave; jmp rax;
0x000703f5: add [rax+0x29], cl; fmul st, dword ptr [rax-0x77]; fimul st, word ptr [rcx+rcx*4-0x19]; sar rax, 2; mov rdx, rax; call qword ptr [rcx+0x38];
0x000703f6: sub rax, rbx; mov rsi, rbx; mov rdi, r12; sar rax, 2; mov rdx, rax; call qword ptr [rcx+0x38];
0x000703f7: sub eax, ebx; mov rsi, rbx; mov rdi, r12; sar rax, 2; mov rdx, rax; call qword ptr [rcx+0x38];
0x000703f8: fmul st, dword ptr [rax-0x77]; fimul st, word ptr [rcx+rcx*4-0x19]; sar rax, 2; mov rdx, rax; call qword ptr [rcx+0x38];
0x000703f9: mov rsi, rbx; mov rdi, r12; sar rax, 2; mov rdx, rax; call qword ptr [rcx+0x38];
0x000703fa: mov esi, ebx; mov rdi, r12; sar rax, 2; mov rdx, rax; call qword ptr [rcx+0x38];
0x000703fb: fimul st, word ptr [rcx+rcx*4-0x19]; sar rax, 2; mov rdx, rax; call qword ptr [rcx+0x38];
0x000703fc: mov rdi, r12; sar rax, 2; mov rdx, rax; call qword ptr [rcx+0x38];
0x000703fd: mov edi, esp; sar rax, 2; mov rdx, rax; call qword ptr [rcx+0x38];
0x000703fe: out 0x48, eax; sar eax, 2; mov rdx, rax; call qword ptr [rcx+0x38];
0x000703ff: sar rax, 2; mov rdx, rax; call qword ptr [rcx+0x38];
0x00070400: sar eax, 2; mov rdx, rax; call qword ptr [rcx+0x38];
0x00070401: clc; add cl, [rax-0x77]; ret 0x51ff;
0x00070402: add cl, [rax-0x77]; ret 0x51ff;
0x00070403: mov rdx, rax; call qword ptr [rcx+0x38];
0x00070404: mov edx, eax; call qword ptr [rcx+0x38];
0x00070405: ret 0x51ff;
0x00070406: call qword ptr [rcx+0x38];
0x00070473: add [rbp-0x7b], al; fisttp dword ptr [rdi], st; test ebx, ecx; sbb [rax], al; add [rbx-0x7bf0ac05], al; ret 0x18;
0x00070476: fisttp dword ptr [rdi], st; test ebx, ecx; sbb [rax], al; add [rbx-0x7bf0ac05], al; ret 0x18;
0x00070478: test ebx, ecx; sbb [rax], al; add [rbx-0x7bf0ac05], al; ret 0x18;
0x0007047a: sbb [rax], al; add [rbx-0x7bf0ac05], al; ret 0x18;
0x0007047c: add [rbx-0x7bf0ac05], al; ret 0x18;
0x00070482: ret 0x18;
0x000704a5: sti; dec dword ptr [rax-0x77]; ret 0xb848;
0x000704a6: dec dword ptr [rax-0x77]; ret 0xb848;
0x000704e3: or [rbp-0x5d7bf040], al; and eax, 0x83480000; ret;
0x000704e9: and eax, 0x83480000; ret;
0x00070579: mov [rbp-0x4e0], rcx; mov rdx, rcx; mov rsi, r8; mov rdi, r12; mov [rbp-0x4e8], r9d; call qword ptr [rbx+0x38];
0x0007057a: mov [rbp-0x4e0], ecx; mov rdx, rcx; mov rsi, r8; mov rdi, r12; mov [rbp-0x4e8], r9d; call qword ptr [rbx+0x38];
0x00070580: mov rdx, rcx; mov rsi, r8; mov rdi, r12; mov [rbp-0x4e8], r9d; call qword ptr [rbx+0x38];
0x00070581: mov edx, ecx; mov rsi, r8; mov rdi, r12; mov [rbp-0x4e8], r9d; call qword ptr [rbx+0x38];
0x00070583: mov rsi, r8; mov rdi, r12; mov [rbp-0x4e8], r9d; call qword ptr [rbx+0x38];
0x00070584: mov esi, eax; mov rdi, r12; mov [rbp-0x4e8], r9d; call qword ptr [rbx+0x38];
0x00070586: mov rdi, r12; mov [rbp-0x4e8], r9d; call qword ptr [rbx+0x38];
0x00070587: mov edi, esp; mov [rbp-0x4e8], r9d; call qword ptr [rbx+0x38];
0x00070588: out 0x44, eax; mov [rbp-0x4e8], ecx; call qword ptr [rbx+0x38];
0x00070589: mov [rbp-0x4e8], r9d; call qword ptr [rbx+0x38];
0x0007058a: mov [rbp-0x4e8], ecx; call qword ptr [rbx+0x38];
0x00070619: xchg [rbx-0x76ffffe4], eax; ret 0xc083;
0x00070676: mov dword ptr [rbp-0x518], 1; movzx eax, byte ptr [rax+rsi]; lea rsi, [rip-0x6e0]; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax;
0x00070681: mov dh, 4; xor [rax-0x73], cl; xor eax, 0xfffff920; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax;
0x00070683: xor [rax-0x73], cl; xor eax, 0xfffff920; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax;
0x00070686: xor eax, 0xfffff920; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax;
0x000706ce: lea rsi, [rip-0x72a]; movsxd rax, [rdi+rax*4]; add rax, rsi; mov dword ptr [rbp-0x4f0], 1; mov dword ptr [rbp-0x500], 0x20; jmp rax;
0x000706cf: lea esi, [rip-0x72a]; movsxd rax, [rdi+rax*4]; add rax, rsi; mov dword ptr [rbp-0x4f0], 1; mov dword ptr [rbp-0x500], 0x20; jmp rax;
0x000706d0: xor eax, 0xfffff8d6; movsxd rax, [rdi+rax*4]; add rax, rsi; mov dword ptr [rbp-0x4f0], 1; mov dword ptr [rbp-0x500], 0x20; jmp rax;
0x000706d4: dec dword ptr [rax+0x63]; add al, 0x87; add rax, rsi; mov dword ptr [rbp-0x4f0], 1; mov dword ptr [rbp-0x500], 0x20; jmp rax;
0x000706d5: movsxd rax, [rdi+rax*4]; add rax, rsi; mov dword ptr [rbp-0x4f0], 1; mov dword ptr [rbp-0x500], 0x20; jmp rax;
0x000706d6: movsxd eax, [rdi+rax*4]; add rax, rsi; mov dword ptr [rbp-0x4f0], 1; mov dword ptr [rbp-0x500], 0x20; jmp rax;
0x000706d7: add al, 0x87; add rax, rsi; mov dword ptr [rbp-0x4f0], 1; mov dword ptr [rbp-0x500], 0x20; jmp rax;
0x000706d9: add rax, rsi; mov dword ptr [rbp-0x4f0], 1; mov dword ptr [rbp-0x500], 0x20; jmp rax;
0x000706da: add eax, esi; mov dword ptr [rbp-0x4f0], 1; mov dword ptr [rbp-0x500], 0x20; jmp rax;
0x000706dc: mov dword ptr [rbp-0x4f0], 1; mov dword ptr [rbp-0x500], 0x20; jmp rax;
0x000706e2: add [rax], eax; add [rax], al; mov dword ptr [rbp-0x500], 0x20; jmp rax;
0x000706e4: add [rax], al; mov dword ptr [rbp-0x500], 0x20; jmp rax;
0x000706e6: mov dword ptr [rbp-0x500], 0x20; jmp rax;
0x000706ec: and [rax], al; add [rax], al; jmp rax;
0x00070894: dec dword ptr [rcx+0x29]; ret 0xb8;
0x00070897: ret 0xb8;
0x000708d6: add [rbx-0x50f43], eax; call qword ptr [rax];
0x00070903: add [rbx-0x4ff43], eax; jmp qword ptr [rax];
0x00070a19: add [rax], al; mov [rbp-0x4e0], rcx; mov rdx, rcx; mov rsi, r9; mov rdi, r12; call qword ptr [rbx+0x38];
0x00070a1b: mov [rbp-0x4e0], rcx; mov rdx, rcx; mov rsi, r9; mov rdi, r12; call qword ptr [rbx+0x38];
0x00070a1c: mov [rbp-0x4e0], ecx; mov rdx, rcx; mov rsi, r9; mov rdi, r12; call qword ptr [rbx+0x38];
0x00070a22: mov rdx, rcx; mov rsi, r9; mov rdi, r12; call qword ptr [rbx+0x38];
0x00070a23: mov edx, ecx; mov rsi, r9; mov rdi, r12; call qword ptr [rbx+0x38];
0x00070a25: mov rsi, r9; mov rdi, r12; call qword ptr [rbx+0x38];
0x00070a26: mov esi, ecx; mov rdi, r12; call qword ptr [rbx+0x38];
0x00070a28: mov rdi, r12; call qword ptr [rbx+0x38];
0x00070a29: mov edi, esp; call qword ptr [rbx+0x38];
0x00070a2b: call qword ptr [rbx+0x38];
0x00070a6e: call qword ptr [rax+0x45078b41];
0x00070a75: fisttp dword ptr [rdi], st; test [rbx+rdx], ch; add [rbx-0x78f0d008], al; sub eax, 0x89000018; ret 0xc083;
0x00070a77: test [rbx+rdx], ch; add [rbx-0x78f0d008], al; sub eax, 0x89000018; ret 0xc083;
0x00070a78: insb [rdi], dx; adc eax, [rax]; add [rbx-0x78f0d008], al; sub eax, 0x89000018; ret 0xc083;
0x00070a79: adc eax, [rax]; add [rbx-0x78f0d008], al; sub eax, 0x89000018; ret 0xc083;
0x00070a7b: add [rbx-0x78f0d008], al; sub eax, 0x89000018; ret 0xc083;
0x00070a80: xchg [rip-0x76ffffe8], ebp; ret 0xc083;
0x00070a81: sub eax, 0x89000018; ret 0xc083;
0x00070b3e: mov r8d, 1; movzx eax, byte ptr [rax+rdx]; xor edx, edx; movsxd rax, [r9+rax*4]; add rax, rsi; jmp rax;
0x00070b3f: mov eax, 1; movzx eax, byte ptr [rax+rdx]; xor edx, edx; movsxd rax, [r9+rax*4]; add rax, rsi; jmp rax;
0x00070b42: add [rax], al; movzx eax, byte ptr [rax+rdx]; xor edx, edx; movsxd rax, [r9+rax*4]; add rax, rsi; jmp rax;
0x00070b44: movzx eax, byte ptr [rax+rdx]; xor edx, edx; movsxd rax, [r9+rax*4]; add rax, rsi; jmp rax;
0x00070b45: mov dh, 4; adc [rcx], dh; ror byte ptr [rcx+0x63], cl; add al, 0x81; add rax, rsi; jmp rax;
0x00070b46: add al, 0x10; xor edx, edx; movsxd rax, [r9+rax*4]; add rax, rsi; jmp rax;
0x00070b47: adc [rcx], dh; ror byte ptr [rcx+0x63], cl; add al, 0x81; add rax, rsi; jmp rax;
0x00070b48: xor edx, edx; movsxd rax, [r9+rax*4]; add rax, rsi; jmp rax;
0x00070b49: ror byte ptr [rcx+0x63], cl; add al, 0x81; add rax, rsi; jmp rax;
0x00070b4a: movsxd rax, [r9+rax*4]; add rax, rsi; jmp rax;
0x00070b4b: movsxd eax, [rcx+rax*4]; add rax, rsi; jmp rax;
0x00070b4c: add al, 0x81; add rax, rsi; jmp rax;
0x00070be6: mov dword ptr [rbp-0x508], 1; movzx eax, byte ptr [rax+rsi]; lea rsi, [rip-0xc50]; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax;
0x00070bf1: mov dh, 4; xor [rax-0x73], cl; xor eax, 0xfffff3b0; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax;
0x00070bf3: xor [rax-0x73], cl; xor eax, 0xfffff3b0; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax;
0x00070bf6: xor eax, 0xfffff3b0; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax;
0x00070c24: xchg [rdi+0x48000012], cl; lea eax, [rip-0xc85]; mov dword ptr [rbp-0x4d0], 1; jmp rax;
0x00070c26: adc al, [rax]; add [rax-0x73], cl; add eax, 0xfffff37b; mov dword ptr [rbp-0x4d0], 1; jmp rax;
0x00070c27: add [rax], al; lea rax, [rip-0xc85]; mov dword ptr [rbp-0x4d0], 1; jmp rax;
0x00070c28: add [rax-0x73], cl; add eax, 0xfffff37b; mov dword ptr [rbp-0x4d0], 1; jmp rax;
0x00070c29: lea rax, [rip-0xc85]; mov dword ptr [rbp-0x4d0], 1; jmp rax;
0x00070c2a: lea eax, [rip-0xc85]; mov dword ptr [rbp-0x4d0], 1; jmp rax;
0x00070c2b: add eax, 0xfffff37b; mov dword ptr [rbp-0x4d0], 1; jmp rax;
0x00070c30: mov dword ptr [rbp-0x4d0], 1; jmp rax;
0x00070ca9: mov ebp, 0xfffffb18; fdivp st(7), st; call far fword ptr [rdi];
0x00070d57: movzx esi, byte ptr [rdi+rax]; lea rax, [rip+0x11385e]; movsxd rax, [rax+rsi*4]; lea rsi, [rip-0xdc2]; add rax, rsi; jmp rax;
0x00070d59: xor al, 7; lea rax, [rip+0x11385e]; movsxd rax, [rax+rsi*4]; lea rsi, [rip-0xdc2]; add rax, rsi; jmp rax;
0x00070d5b: lea rax, [rip+0x11385e]; movsxd rax, [rax+rsi*4]; lea rsi, [rip-0xdc2]; add rax, rsi; jmp rax;
0x00070d5c: lea eax, [rip+0x11385e]; movsxd rax, [rax+rsi*4]; lea rsi, [rip-0xdc2]; add rax, rsi; jmp rax;
0x00070d5d: add eax, 0x11385e; movsxd rax, [rax+rsi*4]; lea rsi, [rip-0xdc2]; add rax, rsi; jmp rax;
0x00070d5f: cmp [rcx], dl; add [rax+0x63], cl; add al, 0xb0; lea rsi, [rip-0xdc2]; add rax, rsi; jmp rax;
0x00070d68: xor eax, 0xfffff23e; add rax, rsi; jmp rax;
0x00070dae: mov dword ptr [rbp-0x52c], 1; movzx eax, byte ptr [rax+rsi]; lea rsi, [rip+0x11387d]; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax;
0x00070db9: mov dh, 4; xor [rax-0x73], cl; xor eax, 0x11387d; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax;
0x00070dbb: xor [rax-0x73], cl; xor eax, 0x11387d; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax;
0x00070dbe: xor eax, 0x11387d; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax;
0x00070e14: mov dword ptr [rbp-0x528], 1; movzx eax, byte ptr [rax+rsi]; lea rsi, [rip+0x113817]; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax;
0x00070e1c: add [rax], al; movzx eax, byte ptr [rax+rsi]; lea rsi, [rip+0x11387d]; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax;
0x00070e1e: movzx eax, byte ptr [rax+rsi]; lea rsi, [rip+0x11387d]; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax;
0x00070e1f: mov dh, 4; xor [rax-0x73], cl; xor eax, 0x113817; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax;
0x00070e20: add al, 0x30; lea rsi, [rip+0x11387d]; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax;
0x00070e21: xor [rax-0x73], cl; xor eax, 0x113817; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax;
0x00070e22: lea rsi, [rip+0x11387d]; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax;
0x00070e23: lea esi, [rip+0x11387d]; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax;
0x00070e24: xor eax, 0x113817; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax;
0x00070e26: cmp [rcx], dl; add [rax+0x63], cl; add al, 0x86; add rax, rdi; jmp rax;
0x00070e27: adc [rax], eax; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax;
0x00070e28: add [rax+0x63], cl; add al, 0x86; add rax, rdi; jmp rax;
0x00070f87: movzx esi, byte ptr [rdi+rax]; lea rax, [rip+0x1135ae]; movsxd rax, [rax+rsi*4]; lea rsi, [rip-0xff2]; add rax, rsi; jmp rax;
0x00070f89: xor al, 7; lea rax, [rip+0x1135ae]; movsxd rax, [rax+rsi*4]; lea rsi, [rip-0xff2]; add rax, rsi; jmp rax;
0x00070f8b: lea rax, [rip+0x1135ae]; movsxd rax, [rax+rsi*4]; lea rsi, [rip-0xff2]; add rax, rsi; jmp rax;
0x00070f8c: lea eax, [rip+0x1135ae]; movsxd rax, [rax+rsi*4]; lea rsi, [rip-0xff2]; add rax, rsi; jmp rax;
0x00070f8d: add eax, 0x1135ae; movsxd rax, [rax+rsi*4]; lea rsi, [rip-0xff2]; add rax, rsi; jmp rax;
0x00070f8e: scasb [rdi]; xor eax, 0x63480011; add al, 0xb0; lea rsi, [rip-0xff2]; add rax, rsi; jmp rax;
0x00070f8f: xor eax, 0x63480011; add al, 0xb0; lea rsi, [rip-0xff2]; add rax, rsi; jmp rax;
0x00070f90: adc [rax], eax; movsxd rax, [rax+rsi*4]; lea rsi, [rip-0xdc2]; add rax, rsi; jmp rax;
0x00070f91: add [rax+0x63], cl; add al, 0xb0; lea rsi, [rip-0xdc2]; add rax, rsi; jmp rax;
0x00070f92: movsxd rax, [rax+rsi*4]; lea rsi, [rip-0xdc2]; add rax, rsi; jmp rax;
0x00070f93: movsxd eax, [rax+rsi*4]; lea rsi, [rip-0xdc2]; add rax, rsi; jmp rax;
0x00070f94: add al, 0xb0; lea rsi, [rip-0xdc2]; add rax, rsi; jmp rax;
0x00070f95: mov al, 0x48; lea esi, [rip-0xdc2]; add rax, rsi; jmp rax;
0x00070f98: xor eax, 0xfffff00e; add rax, rsi; jmp rax;
0x00070fdd: movzx eax, byte ptr [rax+rcx]; lea rcx, [rip-0x103d]; movsxd rax, [r9+rax*4]; add rax, rcx; mov ecx, 1; jmp rax;
0x00070fdf: add al, 8; lea rcx, [rip-0x103d]; movsxd rax, [r9+rax*4]; add rax, rcx; mov ecx, 1; jmp rax;
0x00070fe0: or [rax-0x73], cl; or eax, 0xffffefc3; movsxd rax, [r9+rax*4]; add rax, rcx; mov ecx, 1; jmp rax;
0x00070fe1: lea rcx, [rip-0x103d]; movsxd rax, [r9+rax*4]; add rax, rcx; mov ecx, 1; jmp rax;
0x00070fe2: lea ecx, [rip-0x103d]; movsxd rax, [r9+rax*4]; add rax, rcx; mov ecx, 1; jmp rax;
0x00070fe3: or eax, 0xffffefc3; movsxd rax, [r9+rax*4]; add rax, rcx; mov ecx, 1; jmp rax;
0x00070fe7: dec dword ptr [rcx+0x63]; add al, 0x81; add rax, rcx; mov ecx, 1; jmp rax;
0x00070fe8: movsxd rax, [r9+rax*4]; add rax, rcx; mov ecx, 1; jmp rax;
0x00070fe9: movsxd eax, [rcx+rax*4]; add rax, rcx; mov ecx, 1; jmp rax;
0x00070fea: add al, 0x81; add rax, rcx; mov ecx, 1; jmp rax;
0x00070feb: or dword ptr [rax+1], 0x1b9c8; add [rax], al; jmp rax;
0x00070fec: add rax, rcx; mov ecx, 1; jmp rax;
0x00070fed: add eax, ecx; mov ecx, 1; jmp rax;
0x00070fee: enter 0x1b9, 0; add [rax], al; jmp rax;
0x00071036: mov r11d, 1; movzx eax, byte ptr [rax+rsi]; lea rsi, [rip-0x109c]; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax;
0x00071037: mov ebx, 1; movzx eax, byte ptr [rax+rsi]; lea rsi, [rip-0x109c]; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax;
0x0007103a: add [rax], al; movzx eax, byte ptr [rax+rsi]; lea rsi, [rip-0x6e0]; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax;
0x0007103c: movzx eax, byte ptr [rax+rsi]; lea rsi, [rip-0x6e0]; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax;
0x0007103d: mov dh, 4; xor [rax-0x73], cl; xor eax, 0xffffef64; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax;
0x0007103e: add al, 0x30; lea rsi, [rip-0x6e0]; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax;
0x0007103f: xor [rax-0x73], cl; xor eax, 0xffffef64; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax;
0x00071040: lea rsi, [rip-0x6e0]; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax;
0x00071041: lea esi, [rip-0x6e0]; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax;
0x00071042: xor eax, 0xffffef64; movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax;
0x00071046: dec dword ptr [rax+0x63]; add al, 0x87; add rax, rsi; jmp rax;
0x00071047: movsxd rax, [rdi+rax*4]; add rax, rsi; jmp rax;
0x00071048: movsxd eax, [rdi+rax*4]; add rax, rsi; jmp rax;
0x00071049: add al, 0x87; add rax, rsi; jmp rax;
0x00071092: lea rsi, [rip+0x1135a7]; movzx eax, byte ptr [rdi+rax]; lea rdi, [rip-0x10f9]; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax;
0x00071093: lea esi, [rip+0x1135a7]; movzx eax, byte ptr [rdi+rax]; lea rdi, [rip-0x10f9]; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax;
0x00071094: xor eax, 0x1135a7; movzx eax, byte ptr [rdi+rax]; lea rdi, [rip-0x10f9]; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax;
0x00071096: xor eax, 0xb60f0011; add al, 7; lea rdi, [rip-0x10f9]; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax;
0x00071097: adc [rax], eax; movzx eax, byte ptr [rdi+rax]; lea rdi, [rip-0x10f9]; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax;
0x00071099: movzx eax, byte ptr [rdi+rax]; lea rdi, [rip-0x10f9]; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax;
0x0007109b: add al, 7; lea rdi, [rip-0x10f9]; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax;
0x0007109d: lea rdi, [rip-0x10f9]; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax;
0x0007109e: lea edi, [rip-0x10f9]; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax;
0x0007109f: cmp eax, 0xffffef07; movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax;
0x000710a3: dec dword ptr [rax+0x63]; add al, 0x86; add rax, rdi; jmp rax;
0x000710a4: movsxd rax, [rsi+rax*4]; add rax, rdi; jmp rax;
0x000710a5: movsxd eax, [rsi+rax*4]; add rax, rdi; jmp rax;
0x000710a6: add al, 0x86; add rax, rdi; jmp rax;
0x000710a7: xchg [rax+1], cl; clc; jmp rax;
0x0007116e: push 0xffffffff89000013; ret 0xc083;
0x000711ee: call qword ptr [rax-0x4b77a0a];
0x0007132a: movzx eax, byte ptr [rax+rdx]; lea rdi, [rip-0x138a]; movsxd rax, [rsi+rax*4]; add rax, rdi; mov edx, 1; jmp rax;
0x0007132c: add al, 0x10; lea rdi, [rip-0x138a]; movsxd rax, [rsi+rax*4]; add rax, rdi; mov edx, 1; jmp rax;
0x0007132d: adc [rax-0x73], cl; cmp eax, 0xffffec76; movsxd rax, [rsi+rax*4]; add rax, rdi; mov edx, 1; jmp rax;
0x0007132e: lea rdi, [rip-0x138a]; movsxd rax, [rsi+rax*4]; add rax, rdi; mov edx, 1; jmp rax;
0x0007132f: lea edi, [rip-0x138a]; movsxd rax, [rsi+rax*4]; add rax, rdi; mov edx, 1; jmp rax;
0x00071330: cmp eax, 0xffffec76; movsxd rax, [rsi+rax*4]; add rax, rdi; mov edx, 1; jmp rax;
0x00071334: dec dword ptr [rax+0x63]; add al, 0x86; add rax, rdi; mov edx, 1; jmp rax;
0x00071335: movsxd rax, [rsi+rax*4]; add rax, rdi; mov edx, 1; jmp rax;
0x00071336: movsxd eax, [rsi+rax*4]; add rax, rdi; mov edx, 1; jmp rax;
0x00071337: add al, 0x86; add rax, rdi; mov edx, 1; jmp rax;
0x00071338: xchg [rax+1], cl; clc; mov edx, 1; jmp rax;
0x00071339: add rax, rdi; mov edx, 1; jmp rax;
0x0007133a: add eax, edi; mov edx, 1; jmp rax;
0x0007133b: clc; mov edx, 1; jmp rax;
0x0007133c: mov edx, 1; jmp rax;
0x00071491: add [rax], al; add [rbx-0x50f43], al; call qword ptr [rax];
0x00071493: add [rbx-0x50f43], al; call qword ptr [rax];
0x00071568: fimul st, word ptr [rsi]; add [rax], al; mov rdx, rbx; mov rsi, r9; mov rdi, r12; call qword ptr [rax+0x38];
0x0007156a: add [rax], al; mov rdx, rbx; mov rsi, r9; mov rdi, r12; call qword ptr [rax+0x38];
0x0007156b: add [rax-0x77], cl; fimul st, dword ptr [rcx+rcx*4-0x32]; mov rdi, r12; call qword ptr [rax+0x38];
0x0007156c: mov rdx, rbx; mov rsi, r9; mov rdi, r12; call qword ptr [rax+0x38];
0x0007156d: mov edx, ebx; mov rsi, r9; mov rdi, r12; call qword ptr [rax+0x38];
0x0007156e: fimul st, dword ptr [rcx+rcx*4-0x32]; mov rdi, r12; call qword ptr [rax+0x38];
0x0007156f: mov rsi, r9; mov rdi, r12; call qword ptr [rax+0x38];
0x00071570: mov esi, ecx; mov rdi, r12; call qword ptr [rax+0x38];
0x00071572: mov rdi, r12; call qword ptr [rax+0x38];
0x00071573: mov edi, esp; call qword ptr [rax+0x38];
0x00071574: out 0xff, eax; push rax; cmp [rax+0x39], cl; ret;
0x00071576: push rax; cmp [rax+0x39], cl; ret;
0x00071642: add [rax], al; add [rax+0x29], cl; ret 0x8949;
0x00071644: add [rax+0x29], cl; ret 0x8949;
0x000716a5: xchg [rsi-0x76fffff7], eax; ret 0xc083;
0x00071817: add [rax-0x77], cl; ret 0x8349;
0x00071827: adc [rax-0x77], ecx; ret 0xc148;
0x00071881: add [rax-0x77], cl; ret 0x2948;
0x0007189c: mov rdx, rcx; mov rsi, r8; mov rdi, r12; mov [rbp-0x508], r9d; mov [rbp-0x500], r8; call qword ptr [rax+0x38];
0x0007189d: mov edx, ecx; mov rsi, r8; mov rdi, r12; mov [rbp-0x508], r9d; mov [rbp-0x500], r8; call qword ptr [rax+0x38];
0x0007189f: mov rsi, r8; mov rdi, r12; mov [rbp-0x508], r9d; mov [rbp-0x500], r8; call qword ptr [rax+0x38];
0x000718a0: mov esi, eax; mov rdi, r12; mov [rbp-0x508], r9d; mov [rbp-0x500], r8; call qword ptr [rax+0x38];
0x000718a2: mov rdi, r12; mov [rbp-0x508], r9d; mov [rbp-0x500], r8; call qword ptr [rax+0x38];
0x000718a3: mov edi, esp; mov [rbp-0x508], r9d; mov [rbp-0x500], r8; call qword ptr [rax+0x38];
0x000718a4: out 0x44, eax; mov [rbp-0x508], ecx; mov [rbp-0x500], r8; call qword ptr [rax+0x38];
0x000718a5: mov [rbp-0x508], r9d; mov [rbp-0x500], r8; call qword ptr [rax+0x38];
0x000718a6: mov [rbp-0x508], ecx; mov [rbp-0x500], r8; call qword ptr [rax+0x38];
0x000718ac: mov [rbp-0x500], r8; call qword ptr [rax+0x38];
0x000718ad: mov [rbp-0x500], eax; call qword ptr [rax+0x38];
0x000718b3: call qword ptr [rax+0x38];
0x0007195f: inc dword ptr [rbx-0x4ff43]; jmp qword ptr [rax];
0x00071ca6: dec dword ptr [rcx+0x29]; ret 0xf4c;
0x00071ca9: ret 0xf4c;
0x00071dd1: nop [rax]; mov r8d, 1; xor edx, edx; jmp rax;
0x00071dd3: add byte ptr [rax], 0; add [rax], al; mov r8d, 1; xor edx, edx; jmp rax;
0x00071dd4: add [rax], al; add [rax], al; mov r8d, 1; xor edx, edx; jmp rax;
0x00071dd5: add [rax], al; add [rcx-0x48], al; add [rax], eax; add [rax], al; xor edx, edx; jmp rax;
0x00071dd6: add [rax], al; mov r8d, 1; xor edx, edx; jmp rax;
0x00071dd7: add [rcx-0x48], al; add [rax], eax; add [rax], al; xor edx, edx; jmp rax;
0x00071dd8: mov r8d, 1; xor edx, edx; jmp rax;
0x00071dd9: mov eax, 1; xor edx, edx; jmp rax;
0x00071dda: add [rax], eax; add [rax], al; xor edx, edx; jmp rax;
0x00071ddc: add [rax], al; xor edx, edx; jmp rax;
0x00071dde: xor edx, edx; jmp rax;
0x00071e0e: call qword ptr [rax-0x5277a39];
0x00071e0f: nop; mov dword ptr [rbp-0x528], 1; jmp rax;
0x00071e10: mov dword ptr [rbp-0x528], 1; jmp rax;
0x00071e1c: nop [rax]; mov r11d, 1; mov ecx, 1; jmp rax;
0x00071e1f: add [rcx-0x45], al; add [rax], eax; add [rax], al; mov ecx, 1; jmp rax;
0x00071e20: mov r11d, 1; mov ecx, 1; jmp rax;
0x00071e21: mov ebx, 1; mov ecx, 1; jmp rax;
0x00071e22: add [rax], eax; add [rax], al; mov ecx, 1; jmp rax;
0x00071e23: add [rax], al; add [rcx+1], bh; jmp rax;
0x00071e24: add [rax], al; mov ecx, 1; jmp rax;
0x00071e25: add [rcx+1], bh; jmp rax;
0x00071e26: mov ecx, 1; jmp rax;
0x00071e2d: nop [rax]; mov dword ptr [rbp-0x508], 1; jmp rax;
0x00071e30: mov dword ptr [rbp-0x508], 1; jmp rax;
0x00071e3c: nop [rax]; mov dword ptr [rbp-0x52c], 1; jmp rax;
0x00071e40: mov dword ptr [rbp-0x52c], 1; jmp rax;
0x00071e4c: nop [rax]; mov r11d, 1; jmp rax;
0x00071e4f: add [rcx-0x45], al; add [rax], eax; add [rax], al; jmp rax;
0x00071e50: mov r11d, 1; jmp rax;
0x00071e51: mov ebx, 1; jmp rax;
0x00071e8f: add [rcx-0x75], cl; push rdi; or [rax-0x73], cl; or [rcx-0x77], cl; or r9b, r13b; iretd;
0x00071e92: push rdi; or [rax-0x73], cl; or [rcx-0x77], cl; or r9b, r13b; iretd;
0x00071e93: or [rax-0x73], cl; or [rcx-0x77], cl; or r9b, r13b; iretd;
0x00071e97: or [rcx-0x77], cl; or r9b, r13b; iretd;
0x00071e9a: or r9b, r13b; iretd;
0x00071e9b: or cl, ch; iretd;
0x00071ea1: nop [rax]; mov dword ptr [rbp-0x518], 1; jmp rax;
0x00071ea3: add byte ptr [rax], 0; add [rax], al; mov dword ptr [rbp-0x518], 1; jmp rax;
0x00071ea4: add [rax], al; add [rax], al; mov dword ptr [rbp-0x518], 1; jmp rax;
0x00071ea6: add [rax], al; mov dword ptr [rbp-0x518], 1; jmp rax;
0x00071ea8: mov dword ptr [rbp-0x518], 1; jmp rax;
0x00071eae: add [rax], eax; add [rax], al; jmp rax;
0x00071ec9: movzx eax, byte ptr [rsi+rax]; lea rsi, [rip+0x11276c]; movsxd rax, [rsi+rax*4]; lea rsi, [rip-0x1f34]; add rax, rsi; jmp rax;
0x00071ecb: add al, 6; lea rsi, [rip+0x11276c]; movsxd rax, [rsi+rax*4]; lea rsi, [rip-0x1f34]; add rax, rsi; jmp rax;
0x00071ecd: lea rsi, [rip+0x11276c]; movsxd rax, [rsi+rax*4]; lea rsi, [rip-0x1f34]; add rax, rsi; jmp rax;
0x00071ece: lea esi, [rip+0x11276c]; movsxd rax, [rsi+rax*4]; lea rsi, [rip-0x1f34]; add rax, rsi; jmp rax;
0x00071ecf: xor eax, 0x11276c; movsxd rax, [rsi+rax*4]; lea rsi, [rip-0x1f34]; add rax, rsi; jmp rax;
0x00071ed2: adc [rax], eax; movsxd rax, [rsi+rax*4]; lea rsi, [rip-0x1f34]; add rax, rsi; jmp rax;
0x00071ed3: add [rax+0x63], cl; add al, 0x86; lea rsi, [rip-0x1f34]; add rax, rsi; jmp rax;
0x00071ed4: movsxd rax, [rsi+rax*4]; lea rsi, [rip-0x1f34]; add rax, rsi; jmp rax;
0x00071ed5: movsxd eax, [rsi+rax*4]; lea rsi, [rip-0x1f34]; add rax, rsi; jmp rax;
0x00071ed6: add al, 0x86; lea rsi, [rip-0x1f34]; add rax, rsi; jmp rax;
0x00071ed7: xchg [rax-0x73], cl; xor eax, 0xffffe0cc; add rax, rsi; jmp rax;
0x00071ed8: lea rsi, [rip-0xdc2]; add rax, rsi; jmp rax;
0x00071ed9: lea esi, [rip-0xdc2]; add rax, rsi; jmp rax;
0x00071eda: xor eax, 0xffffe0cc; add rax, rsi; jmp rax;
0x00071fab: xchg ebp, eax; out 0xff, eax; call qword ptr [rax+0xf2ff883];
0x00071fac: out 0xff, eax; call qword ptr [rax+0xf2ff883];
0x00071fae: call qword ptr [rax+0xf2ff883];
0x00072051: add [rbp-0x77], cl; shl dword ptr [rcx], 1; rol byte ptr [rbp+0x31], cl; shr cl, cl; idiv edi; call qword ptr [rax+0x8708d48];
0x00072054: shl dword ptr [rcx], 1; rol byte ptr [rbp+0x31], cl; shr cl, cl; idiv edi; call qword ptr [rax+0x8708d48];
0x00072056: rol byte ptr [rbp+0x31], cl; shr cl, cl; idiv edi; call qword ptr [rax+0x8708d48];
0x00072059: shr cl, cl; idiv edi; call qword ptr [rax+0x8708d48];
0x0007205c: idiv edi; call qword ptr [rax+0x8708d48];
0x0007205e: call qword ptr [rax+0x8708d48];
0x000720da: mov ebp, 0xfffffb20; fdivp st(7), st; call far fword ptr [rdi];
0x000720df: fdivp st(7), st; call far fword ptr [rdi];
0x0007226f: inc dword ptr [rcx+1]; fucomp; mov al, [0xb0e8c7894cffffe0]; sti; dec dword ptr [rax-0x77]; ret 0x22e9;
0x00072272: fucomp; mov al, [0xb0e8c7894cffffe0]; sti; dec dword ptr [rax-0x77]; ret 0x22e9;
0x00072274: mov al, [0xb0e8c7894cffffe0]; sti; dec dword ptr [rax-0x77]; ret 0x22e9;
0x0007227c: mov al, 0x2e; sti; dec dword ptr [rax-0x77]; ret 0x22e9;
0x0007227d: sti; dec dword ptr [rax-0x77]; ret 0x22e9;
0x0007227e: sti; dec dword ptr [rax-0x77]; ret 0x22e9;
0x0007227f: dec dword ptr [rax-0x77]; ret 0x22e9;
0x00072282: ret 0x22e9;
0x000722cf: xchg [rax-0x76fffffa], ebp; ret 0xc083;
0x000726c7: xchg [rdi-0x76fffffe], ebx; ret 0xc083;
0x00072d79: add [rax], al; mov rsi, [rax+0x18]; movsxd rdx, ebp; mov rdi, rbx; call qword ptr [r14+0x38];
0x00072d7b: mov rsi, [rax+0x18]; movsxd rdx, ebp; mov rdi, rbx; call qword ptr [r14+0x38];
0x00072d7c: mov esi, [rax+0x18]; movsxd rdx, ebp; mov rdi, rbx; call qword ptr [r14+0x38];
0x00072d7f: movsxd rdx, ebp; mov rdi, rbx; call qword ptr [r14+0x38];
0x00072d80: movsxd edx, ebp; mov rdi, rbx; call qword ptr [r14+0x38];
0x00072dd0: add eax, 0x14ea0b; mov rdi, rsp; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00072dd3: adc al, 0; mov rdi, rsp; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00072e1f: mov rdx, rbx; mov rsi, [rip+0x150eb7]; mov rdi, rsp; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00072e20: mov edx, ebx; mov rsi, [rip+0x150eb7]; mov rdi, rsp; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00072e21: fimul st, dword ptr [rax-0x75]; xor eax, 0x14b13f; mov rdi, rsp; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00072e22: mov rsi, [rip+0x150eb7]; mov rdi, rsp; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00072e23: mov esi, [rip+0x150eb7]; mov rdi, rsp; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00072e24: xor eax, 0x14b13f; mov rdi, rsp; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00072e26: mov cl, 0x14; add [rax-0x77], cl; out 0x48, eax; ror eax, 0x11; xor rax, fs:[0x30]; call rax;
0x00072e27: adc al, 0; mov rdi, rsp; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00072e28: add [rax-0x77], cl; out 0x48, eax; ror eax, 0x11; xor rax, fs:[0x30]; call rax;
0x00072e29: mov rdi, rsp; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00072e2a: mov edi, esp; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00072e2b: out 0x48, eax; ror eax, 0x11; xor rax, fs:[0x30]; call rax;
0x00072f0f: ret 0x4102;
0x00072f3b: add cl, [rax-0x7d]; ret 0x8301;
0x00072f5d: fsub st, dword ptr [rsi-0x70]; mov eax, r8d; ret;
0x00072f5e: xchg ax, ax; mov eax, r8d; ret;
0x00072f5f: nop; mov eax, r8d; ret;
0x00072fc4: sub [rdi+0x31], esi; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x00072fc6: xor [rdi], ecx; mov dh, 0xc0; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x00072fd9: or rax, 0x401f0f08; add [rcx-0x7d], cl; ret;
0x00072fda: or eax, 0x401f0f08; add [rcx-0x7d], cl; ret;
0x0007306f: lea rcx, [rip+0x11174d]; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax;
0x00073070: lea rcx, [rip+0x11174d]; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax;
0x00073071: lea ecx, [rip+0x11174d]; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax;
0x00073072: or eax, 0x11174d; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax;
0x00073075: adc [rax], eax; movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax;
0x00073076: add [rdi], cl; mov dh, 0xc0; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax;
0x00073077: movzx eax, al; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax;
0x00073078: mov dh, 0xc0; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax;
0x0007308e: add cl, [r9-0x77]; ror dword ptr [rax-0x77], cl; ret 0x8948;
0x0007308f: add cl, [rcx-0x77]; ror dword ptr [rax-0x77], cl; ret 0x8948;
0x00073092: ror dword ptr [rax-0x77], cl; ret 0x8948;
0x000730c9: xchg [rdx+1], edx; add [rax], al; lea rcx, [rip+0x1117ab]; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax;
0x000730cb: add [rax], eax; add [rax-0x73], cl; or eax, 0x1117ab; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax;
0x000730cc: add [rax], al; lea rcx, [rip+0x1117ab]; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax;
0x000730cd: add [rax-0x73], cl; or eax, 0x1117ab; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax;
0x000730ce: lea rcx, [rip+0x1117ab]; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax;
0x000730cf: lea ecx, [rip+0x1117ab]; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax;
0x000730d0: or eax, 0x1117ab; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax;
0x000730d3: adc [rax], eax; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax;
0x000730d4: add [rax+0x63], cl; add al, 0x81; add rax, rcx; jmp rax;
0x0007320e: call qword ptr [rax+0x245c894c];
0x0007321e: call qword ptr [rax+0x3843c748];
0x000732c9: add [rcx-0x73], ecx; push rbx; add ecx, ebp; ret;
0x000732cc: push rbx; add ecx, ebp; ret;
0x000732cd: add ecx, ebp; ret;
0x000732e5: add cl, [rcx-0x77]; ror dword ptr [rax-0x77], cl; ret 0xa5e9;
0x000732e8: ror dword ptr [rax-0x77], cl; ret 0xa5e9;
0x000732eb: ret 0xa5e9;
0x000732fb: test [rbp+rdi*8-0x7cb60001], ecx; ret;
0x000733d2: or [rax-0x7bf0dbc7], al; ret;
0x00073407: test [rbx+0x48fffffc], ch; lea edx, [rbx+0x34]; lea rcx, [rbx+0x40]; mov esi, 1; mov rdi, rbx; call rax;
0x0007340c: lea rdx, [rbx+0x34]; lea rcx, [rbx+0x40]; mov esi, 1; mov rdi, rbx; call rax;
0x0007340d: lea edx, [rbx+0x34]; lea rcx, [rbx+0x40]; mov esi, 1; mov rdi, rbx; call rax;
0x0007340e: push rbx; xor al, 0x48; lea ecx, [rbx+0x40]; mov esi, 1; mov rdi, rbx; call rax;
0x0007340f: xor al, 0x48; lea ecx, [rbx+0x40]; mov esi, 1; mov rdi, rbx; call rax;
0x00073410: lea rcx, [rbx+0x40]; mov esi, 1; mov rdi, rbx; call rax;
0x00073411: lea ecx, [rbx+0x40]; mov esi, 1; mov rdi, rbx; call rax;
0x00073414: mov esi, 1; mov rdi, rbx; call rax;
0x00073415: add [rax], eax; add [rax], al; mov rdi, rbx; call rax;
0x0007347d: jmp far fword ptr [rax-0x38f38bfe];
0x000734d2: add cl, [rcx-0x7d]; ret;
0x0007355c: ret 0x4108;
0x000735af: push qword ptr [rsi-0x32]; mov [rdi], rsi; ret;
0x00073617: add [rbx-0x77cdf18], al; sub [rdi+0x10], esi; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax;
0x0007361a: and [rbx+0x107729f8], al; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax;
0x0007361c: clc; sub [rdi+0x10], esi; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax;
0x0007361d: sub [rdi+0x10], esi; movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax;
0x0007361f: adc [rax+0x63], cl; add al, 0x81; add rax, rcx; jmp rax;
0x00073620: movsxd rax, [rcx+rax*4]; add rax, rcx; jmp rax;
0x00073621: movsxd eax, [rcx+rax*4]; add rax, rcx; jmp rax;
0x00073622: add al, 0x81; add rax, rcx; jmp rax;
0x000736af: or [rbx+0x1f772ef9], al; lea rsi, [rip+0x11134c]; movsxd rcx, [rsi+rcx*4]; add rcx, rsi; jmp rcx;
0x000736b5: lea rsi, [rip+0x11134c]; movsxd rcx, [rsi+rcx*4]; add rcx, rsi; jmp rcx;
0x000736b6: lea esi, [rip+0x11134c]; movsxd rcx, [rsi+rcx*4]; add rcx, rsi; jmp rcx;
0x000736b7: xor eax, 0x11134c; movsxd rcx, [rsi+rcx*4]; add rcx, rsi; jmp rcx;
0x000736b8: adc r10, [rcx]; add [rax+0x63], cl; or al, 0x8e; add rcx, rsi; jmp rcx;
0x000736b9: adc edx, [rcx]; add [rax+0x63], cl; or al, 0x8e; add rcx, rsi; jmp rcx;
0x000736ba: adc [rax], eax; movsxd rcx, [rsi+rcx*4]; add rcx, rsi; jmp rcx;
0x000736bb: add [rax+0x63], cl; or al, 0x8e; add rcx, rsi; jmp rcx;
0x000736bc: movsxd rcx, [rsi+rcx*4]; add rcx, rsi; jmp rcx;
0x000736bd: movsxd ecx, [rsi+rcx*4]; add rcx, rsi; jmp rcx;
0x000736be: or al, 0x8e; add rcx, rsi; jmp rcx;
0x0007370a: xchg [rcx+1], esi; add [rax], al; lea rcx, [rip+0x1113ae]; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx;
0x0007370c: add [rax], eax; add [rax-0x73], cl; or eax, 0x1113ae; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx;
0x0007370d: add [rax], al; lea rcx, [rip+0x1113ae]; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx;
0x0007370e: add [rax-0x73], cl; or eax, 0x1113ae; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx;
0x0007370f: lea rcx, [rip+0x1113ae]; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx;
0x00073710: lea ecx, [rip+0x1113ae]; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx;
0x00073711: or eax, 0x1113ae; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx;
0x00073712: scasb [rdi]; adc edx, [rcx]; add [rax+0x63], cl; adc al, 0x91; add rdx, rcx; jmp rdx;
0x00073713: adc edx, [rcx]; add [rax+0x63], cl; adc al, 0x91; add rdx, rcx; jmp rdx;
0x00073714: adc [rax], eax; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx;
0x00073721: or rax, 0x401f0f08; add [rbx-0x7cb7fbbe], cl; ret 0xbe04;
0x00073722: or eax, 0x401f0f08; add [rbx-0x7cb7fbbe], cl; ret 0xbe04;
0x00073727: add [rbx-0x7cb7fbbe], cl; ret 0xbe04;
0x0007372d: ret 0xbe04;
0x000738a0: mov [rbx+0x18], rdi; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret;
0x000738a1: mov [rbx+0x18], edi; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret;
0x000738bf: ret 0x107;
0x000738df: add [rdi], cl; mov dh, 0x53; or al, 0xf6; ret 0xf04;
0x000738e1: mov dh, 0x53; or al, 0xf6; ret 0xf04;
0x000738e2: push rbx; or al, 0xf6; ret 0xf04;
0x000738e3: or al, 0xf6; ret 0xf04;
0x00073932: lea rdx, [rbx+0x34]; lea rcx, [rbx+0x40]; mov esi, 1; mov rdi, rbx; call r8;
0x00073933: lea edx, [rbx+0x34]; lea rcx, [rbx+0x40]; mov esi, 1; mov rdi, rbx; call r8;
0x00073934: push rbx; xor al, 0x48; lea ecx, [rbx+0x40]; mov esi, 1; mov rdi, rbx; call r8;
0x00073935: xor al, 0x48; lea ecx, [rbx+0x40]; mov esi, 1; mov rdi, rbx; call r8;
0x00073936: lea rcx, [rbx+0x40]; mov esi, 1; mov rdi, rbx; call r8;
0x00073937: lea ecx, [rbx+0x40]; mov esi, 1; mov rdi, rbx; call r8;
0x0007393a: mov esi, 1; mov rdi, rbx; call r8;
0x0007393b: add [rax], eax; add [rax], al; mov rdi, rbx; call r8;
0x0007393d: add [rax], al; mov rdi, rbx; call r8;
0x0007393f: mov rdi, rbx; call r8;
0x00073940: mov edi, ebx; call r8;
0x0007396e: call qword ptr [rax-0x7f2e76b7];
0x00073ae2: add cl, [rdi]; xchg ebp, eax; ret 0x5389;
0x00073ae4: xchg ebp, eax; ret 0x5389;
0x00073ae5: ret 0x5389;
0x00073db9: add rsp, 0x10; mov eax, r8d; pop rbx; pop rbp; pop r12; ret;
0x00073dba: add esp, 0x10; mov eax, r8d; pop rbx; pop rbp; pop r12; ret;
0x00073dbc: adc [rcx+rcx*4-0x40], al; pop rbx; pop rbp; pop r12; ret;
0x00073e14: add [rsi-0x5e], edi; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x00073e16: mov [0x1bad23145], al; mov esi, 0x81; mov eax, 0xca; syscall;
0x00074033: add [rbp+0x6f], dh; add rsp, 0xe8; mov eax, r8d; pop rbx; pop rbp; ret;
0x00074035: outsd dx, [rsi]; add rsp, 0xe8; mov eax, r8d; pop rbx; pop rbp; ret;
0x00074036: add rsp, 0xe8; mov eax, r8d; pop rbx; pop rbp; ret;
0x00074037: add esp, 0xe8; mov eax, r8d; pop rbx; pop rbp; ret;
0x0007403a: add [rax], al; add [rcx+rcx*4-0x40], al; pop rbx; pop rbp; ret;
0x0007403b: add [rax], al; mov eax, r8d; pop rbx; pop rbp; ret;
0x0007403c: add [rcx+rcx*4-0x40], al; pop rbx; pop rbp; ret;
0x000740fc: enter 0x860f, 0xfd; add [rax], al; add [rax-0x77], cl; out 0x48, al; mov edi, ebp; call qword ptr [rbx+0x90];
0x000740fe: xchg ch, bh; add [rax], al; add [rax-0x77], cl; out 0x48, al; mov edi, ebp; call qword ptr [rbx+0x90];
0x000740ff: std; add [rax], al; add [rax-0x77], cl; out 0x48, al; mov edi, ebp; call qword ptr [rbx+0x90];
0x00074100: add [rax], al; add [rax-0x77], cl; out 0x48, al; mov edi, ebp; call qword ptr [rbx+0x90];
0x00074101: add [rax], al; mov rsi, rsp; mov rdi, rbp; call qword ptr [rbx+0x90];
0x00074102: add [rax-0x77], cl; out 0x48, al; mov edi, ebp; call qword ptr [rbx+0x90];
0x00074103: mov rsi, rsp; mov rdi, rbp; call qword ptr [rbx+0x90];
0x00074104: mov esi, esp; mov rdi, rbp; call qword ptr [rbx+0x90];
0x00074105: out 0x48, al; mov edi, ebp; call qword ptr [rbx+0x90];
0x00074106: mov rdi, rbp; call qword ptr [rbx+0x90];
0x00074107: mov edi, ebp; call qword ptr [rbx+0x90];
0x00074108: out dx, eax; call qword ptr [rbx+0x90];
0x00074109: call qword ptr [rbx+0x90];
0x0007416c: test [rcx+0x48000000], ebx; add esp, 0xa0; pop rbx; pop rbp; pop r12; ret;
0x0007416f: add [rax], al; add rsp, 0xa0; pop rbx; pop rbp; pop r12; ret;
0x0007426b: ror dword ptr [rax+0x39], 1; enter 0x860f, 0x5b; add [rax], eax; add [rcx], dh; test byte ptr [rax-0x77], 0xef; call qword ptr [rbx+0x10];
0x0007426e: enter 0x860f, 0x5b; add [rax], eax; add [rcx], dh; test byte ptr [rax-0x77], 0xef; call qword ptr [rbx+0x10];
0x00074270: xchg [rbx+1], bl; add [rax], al; xor esi, esi; mov rdi, rbp; call qword ptr [rbx+0x10];
0x00074271: pop rbx; add [rax], eax; add [rcx], dh; test byte ptr [rax-0x77], 0xef; call qword ptr [rbx+0x10];
0x00074272: add [rax], eax; add [rcx], dh; test byte ptr [rax-0x77], 0xef; call qword ptr [rbx+0x10];
0x00074273: add [rax], al; xor esi, esi; mov rdi, rbp; call qword ptr [rbx+0x10];
0x00074274: add [rcx], dh; test byte ptr [rax-0x77], 0xef; call qword ptr [rbx+0x10];
0x00074275: xor esi, esi; mov rdi, rbp; call qword ptr [rbx+0x10];
0x00074276: test byte ptr [rax-0x77], 0xef; call qword ptr [rbx+0x10];
0x00074277: mov rdi, rbp; call qword ptr [rbx+0x10];
0x00074278: mov edi, ebp; call qword ptr [rbx+0x10];
0x00074279: out dx, eax; call qword ptr [rbx+0x10];
0x000742a4: add [rax], al; add [rdi], cl; mov cl, 0x15; xchg edx, eax; ret;
0x000742a6: add [rdi], cl; mov cl, 0x15; xchg edx, eax; ret;
0x000742a8: mov cl, 0x15; xchg edx, eax; ret;
0x000742bd: sti; jmp qword ptr [rbx+rcx*4+4];
0x000742d9: fistp dword ptr [rbx-0x6bf0ffec], st; ret 0x3b48;
0x000742dc: add [rdi], cl; xchg esp, eax; ret 0x3b48;
0x000742de: xchg esp, eax; ret 0x3b48;
0x000742eb: ret 0x1175;
0x000742fc: adc bl, bh; inc dword ptr [rcx+rcx*4-0x20]; pop rbx; pop rbp; pop r12; ret;
0x000742fd: sti; inc dword ptr [rcx+rcx*4-0x20]; pop rbx; pop rbp; pop r12; ret;
0x0007434f: add [rax], al; add [rbx-0x76b7ffbb], cl; pop rdi; or [rbx-0x76fefbb9], al; ret 0xe281;
0x00074351: add [rbx-0x76b7ffbb], cl; pop rdi; or [rbx-0x76fefbb9], al; ret 0xe281;
0x00074353: add [r8-0x77], r9b; pop rdi; or [rbx-0x76fefbb9], al; ret 0xe281;
0x00074354: add [rax-0x77], cl; pop rdi; or [rbx-0x76fefbb9], al; ret 0xe281;
0x00074357: pop rdi; or [rbx-0x76fefbb9], al; ret 0xe281;
0x00074358: or [rbx-0x76fefbb9], al; ret 0xe281;
0x000743e9: mov cl, 0x15; push rcx; ret 0x14;
0x000743eb: push rcx; ret 0x14;
0x00074420: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x197f66]; syscall;
0x0007442a: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x14c206; syscall;
0x00074430: add [rax], al; add [rax-0x73], cl; cmp eax, 0x14c206; syscall;
0x00074432: add [rax-0x73], cl; cmp eax, 0x14c206; syscall;
0x00074435: cmp eax, 0x14c206; syscall;
0x00074437: ret 0x14;
0x00074484: add [rdi], cl; add eax, 0xfffdc2e9; dec dword ptr [rcx-0x77]; shr cl, 0xe9; adc ebx, edi; jmp qword ptr [rsi+0x2e];
0x00074486: add eax, 0xfffdc2e9; dec dword ptr [rcx-0x77]; shr cl, 0xe9; adc ebx, edi; jmp qword ptr [rsi+0x2e];
0x0007448b: dec dword ptr [rcx-0x77]; shr cl, 0xe9; adc ebx, edi; jmp qword ptr [rsi+0x2e];
0x0007448e: shr cl, 0xe9; adc ebx, edi; jmp qword ptr [rsi+0x2e];
0x00074491: adc ebx, edi; jmp qword ptr [rsi+0x2e];
0x0007452d: clc; push qword ptr [rsp-0x77]; ret 0xe283;
0x0007452e: push qword ptr [rsp-0x77]; ret 0xe283;
0x0007460b: enter 0x860f, 0xd5; add [rax], al; add [rcx], dh; idiv byte ptr [rdx+2]; mov rdi, rbp; call qword ptr [rbx+0x80];
0x0007460d: xchg ch, dl; add [rax], al; add [rcx], dh; idiv byte ptr [rdx+2]; mov rdi, rbp; call qword ptr [rbx+0x80];
0x0007460f: add [rax], al; add [rcx], dh; idiv byte ptr [rdx+2]; mov rdi, rbp; call qword ptr [rbx+0x80];
0x000746be: call qword ptr [rax-0x41fb3380];
0x00074776: ror dword ptr [rax+0x39], 1; enter 0x5c76, 0x48; mov edi, ebx; call qword ptr [rbp+0x60];
0x00074779: enter 0x5c76, 0x48; mov edi, ebx; call qword ptr [rbp+0x60];
0x0007477b: pop rsp; mov rdi, rbx; call qword ptr [rbp+0x60];
0x00074944: jmp qword ptr [rbx+rcx*4+8];
0x00074ada: shr ebx, 0x92; nop [rax]; xor r8d, r8d; mov rax, r8; ret;
0x00074adc: xchg edx, eax; nop [rax]; xor r8d, r8d; mov rax, r8; ret;
0x00074add: nop [rax]; xor r8d, r8d; mov rax, r8; ret;
0x00074b72: test esi, esi; cmovg rdx, rcx; mov [rdi+0xd8], rdx; mov rdx, [rdi+0xa0]; mov [rdx+0xe0], rcx; ret;
0x00074b74: cmovg rdx, rcx; mov [rdi+0xd8], rdx; mov rdx, [rdi+0xa0]; mov [rdx+0xe0], rcx; ret;
0x00074b75: cmovg edx, ecx; mov [rdi+0xd8], rdx; mov rdx, [rdi+0xa0]; mov [rdx+0xe0], rcx; ret;
0x00074b78: mov [rdi+0xd8], rdx; mov rdx, [rdi+0xa0]; mov [rdx+0xe0], rcx; ret;
0x00074b79: mov [rdi+0xd8], edx; mov rdx, [rdi+0xa0]; mov [rdx+0xe0], rcx; ret;
0x00074b7a: xchg edi, eax; fadd st, dword ptr [rax]; add [rax], al; mov rdx, [rdi+0xa0]; mov [rdx+0xe0], rcx; ret;
0x00074b7b: fadd st, dword ptr [rax]; add [rax], al; mov rdx, [rdi+0xa0]; mov [rdx+0xe0], rcx; ret;
0x00074b7c: add [rax], al; add [rax-0x75], cl; xchg edi, eax; mov al, [0xe08a8948000000]; add [rax], al; ret;
0x00074b7d: add [rax], al; mov rdx, [rdi+0xa0]; mov [rdx+0xe0], rcx; ret;
0x00074b7e: add [rax-0x75], cl; xchg edi, eax; mov al, [0xe08a8948000000]; add [rax], al; ret;
0x00074b7f: mov rdx, [rdi+0xa0]; mov [rdx+0xe0], rcx; ret;
0x00074b80: mov edx, [rdi+0xa0]; mov [rdx+0xe0], rcx; ret;
0x00074b81: xchg edi, eax; mov al, [0xe08a8948000000]; add [rax], al; ret;
0x00074b82: mov al, [0xe08a8948000000]; add [rax], al; ret;
0x00074b84: add [rax], al; mov [rdx+0xe0], rcx; ret;
0x00074b86: mov [rdx+0xe0], rcx; ret;
0x00074b87: mov [rdx+0xe0], ecx; ret;
0x00074ba9: sti; dec dword ptr [rax-0x7b]; ror byte ptr [rdi], 0x84; ret;
0x00074baf: test bl, al; add [rax], al; add [rax-0x77], cl; ret;
0x00074c2a: mov dh, 0x14; add [rbp+0x4f0f48c9], al; ret 0x8948;
0x00074c69: sti; call far fword ptr [rbx+0x4c];
0x00074c6c: mov rax, r13; pop rbp; pop r12; pop r13; pop r14; ret;
0x00074c6d: mov eax, ebp; pop rbp; pop r12; pop r13; pop r14; ret;
0x00074ca1: add [rax], al; add [rax-0x7b], cl; shl byte ptr [rcx+rcx+0x48], 0x8b; mov edi, 0xe0; jmp rax;
0x00074ca3: add [rax-0x7b], cl; shl byte ptr [rcx+rcx+0x48], 0x8b; mov edi, 0xe0; jmp rax;
0x00074ca6: shl byte ptr [rcx+rcx+0x48], 0x8b; mov edi, 0xe0; jmp rax;
0x00074ca8: or [rax-0x75], ecx; mov edi, 0xe0; jmp rax;
0x00074ce2: mov rbp, rdx; mov rdi, [rdi+0xe0]; call rax;
0x00074ce3: mov ebp, edx; mov rdi, [rdi+0xe0]; call rax;
0x00074ce5: mov rdi, [rdi+0xe0]; call rax;
0x00074ce6: mov edi, [rdi+0xe0]; call rax;
0x00074ce7: mov edi, 0xe0; call rax;
0x00074cf3: or dword ptr [rbx], 0x20; add rsp, 8; pop rbx; pop rbp; ret;
0x00074cf4: or esp, [rax]; add rsp, 8; pop rbx; pop rbp; ret;
0x00074d1a: add [rax], al; add [rax-0x7b], cl; shl byte ptr [rsi+rbx+0x48], 0x8b; mov edi, 0xe0; lea rsi, [rsp+8]; call rax;
0x00074d1c: add [rax-0x7b], cl; shl byte ptr [rsi+rbx+0x48], 0x8b; mov edi, 0xe0; lea rsi, [rsp+8]; call rax;
0x00074d1f: shl byte ptr [rsi+rbx+0x48], 0x8b; mov edi, 0xe0; lea rsi, [rsp+8]; call rax;
0x00074d22: mov rdi, [rdi+0xe0]; lea rsi, [rsp+8]; call rax;
0x00074d23: mov edi, [rdi+0xe0]; lea rsi, [rsp+8]; call rax;
0x00074d24: mov edi, 0xe0; lea rsi, [rsp+8]; call rax;
0x00074d27: add [rax], al; lea rsi, [rsp+8]; call rax;
0x00074d29: lea rsi, [rsp+8]; call rax;
0x00074d2a: lea esi, [rsp+8]; call rax;
0x00074d2d: or bh, bh; rol byte ptr [rbx+0xb74fff8], 1; mov rax, [rsp+8]; add rsp, 0x18; ret;
0x00074d2f: rol byte ptr [rbx+0xb74fff8], 1; mov rax, [rsp+8]; add rsp, 0x18; ret;
0x00074d31: clc; push qword ptr [rbx+rcx+0x48]; mov eax, [rsp+8]; add rsp, 0x18; ret;
0x00074d32: push qword ptr [rbx+rcx+0x48]; mov eax, [rsp+8]; add rsp, 0x18; ret;
0x00074d34: or ecx, [rax-0x75]; and al, 8; add rsp, 0x18; ret;
0x00074d35: mov rax, [rsp+8]; add rsp, 0x18; ret;
0x00074d61: add [rax], al; add [rax-0x7b], cl; shl byte ptr [rdi+rcx+0x48], 0x8b; mov edi, 0xe0; jmp rax;
0x00074d63: add [rax-0x7b], cl; shl byte ptr [rdi+rcx+0x48], 0x8b; mov edi, 0xe0; jmp rax;
0x00074d66: shl byte ptr [rdi+rcx+0x48], 0x8b; mov edi, 0xe0; jmp rax;
0x00074d69: mov rdi, [rdi+0xe0]; jmp rax;
0x00074d6a: mov edi, [rdi+0xe0]; jmp rax;
0x00074d6b: mov edi, 0xe0; jmp rax;
0x00074e03: add [rax], al; add [rax-0x3f], cl; ret 0x6411;
0x00074e05: add [rax-0x3f], cl; ret 0x6411;
0x00074e08: ret 0x6411;
0x00074e40: or esi, ebp; mov [rbx], esi; pop rbx; pop rbp; pop r12; ret;
0x00074e41: out dx, al; mov [rbx], esi; pop rbx; pop rbp; pop r12; ret;
0x00074e42: mov [rbx], esi; pop rbx; pop rbp; pop r12; ret;
0x00074e43: xor ebx, [rbx+0x5d]; pop r12; ret;
0x00074e75: mov dword ptr fs:[rax], 0x16; mov rax, r12; pop rbp; pop r12; pop r13; ret;
0x00074e76: mov dword ptr [rax], 0x16; mov rax, r12; pop rbp; pop r12; pop r13; ret;
0x00074e79: add [rax], al; add [rcx+rcx*4-0x20], cl; pop rbp; pop r12; pop r13; ret;
0x00074ed7: add rsp, 0x20; mov rax, r12; pop rbp; pop r12; pop r13; ret;
0x00074ed8: add esp, 0x20; mov rax, r12; pop rbp; pop r12; pop r13; ret;
0x00074eda: and [rcx+rcx*4-0x20], cl; pop rbp; pop r12; pop r13; ret;
0x00074f9d: jmp far fword ptr [rax-0x72b7ffec];
0x00074fb3: enter 0x860f, 0xa6; add [rax], al; add [rcx+rcx*4-0x1e], cl; mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x38];
0x00074fb5: xchg [rsi+0x4c000000], ah; mov edx, esp; mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x38];
0x00074fb6: cmpsb [rsi], [rdi]; add [rax], al; add [rcx+rcx*4-0x1e], cl; mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x38];
0x00074fb7: add [rax], al; add [rcx+rcx*4-0x1e], cl; mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x38];
0x00074fb8: add [rax], al; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x38];
0x00074fb9: add [rcx+rcx*4-0x1e], cl; mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x38];
0x00074fba: mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x38];
0x00074fbb: mov edx, esp; mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x38];
0x00074fbd: mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x38];
0x00074fbe: mov esi, ebp; mov rdi, rbx; call qword ptr [r13+0x38];
0x00074fbf: out dx, al; mov rdi, rbx; call qword ptr [r13+0x38];
0x00074fc0: mov rdi, rbx; call qword ptr [r13+0x38];
0x00074fc1: mov edi, ebx; call qword ptr [r13+0x38];
0x000751a4: add [rsi-0x54], edi; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x000751a6: lodsb [rsi]; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x000752ec: add [rsi-0x79], edi; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x000752ee: xchg [rbp+0x31], eax; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; syscall;
0x0007530e: sti; call qword ptr [rbp+0x53];
0x0007546e: add [rdi], cl; add eax, 0xffff4de9; dec dword ptr [rcx-0x77]; shr cl, 0x5a; add al, 0xfb; jmp qword ptr [rsi-0x70];
0x00075470: add eax, 0xffff4de9; dec dword ptr [rcx-0x77]; shr cl, 0x5a; add al, 0xfb; jmp qword ptr [rsi-0x70];
0x00075475: dec dword ptr [rcx-0x77]; shr cl, 0x5a; add al, 0xfb; jmp qword ptr [rsi-0x70];
0x00075478: shr cl, 0x5a; add al, 0xfb; jmp qword ptr [rsi-0x70];
0x0007547a: pop rdx; add al, 0xfb; jmp qword ptr [rsi-0x70];
0x0007547b: add al, 0xfb; jmp qword ptr [rsi-0x70];
0x0007547c: sti; jmp qword ptr [rsi-0x70];
0x000754eb: nop [rax+rax]; add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret;
0x000754ed: add [rax], r8b; add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret;
0x000755a9: enter 0x860f, 0xd8; add [rax], al; add [rcx+rcx*4-0x1e], cl; mov rsi, r14; mov rdi, rbx; call qword ptr [r15+0x38];
0x000755ab: xchg al, bl; add [rax], al; add [rcx+rcx*4-0x1e], cl; mov rsi, r14; mov rdi, rbx; call qword ptr [r15+0x38];
0x000755ac: fadd st, dword ptr [rax]; add [rax], al; mov rdx, r12; mov rsi, r14; mov rdi, rbx; call qword ptr [r15+0x38];
0x000755ad: add [rax], al; add [rcx+rcx*4-0x1e], cl; mov rsi, r14; mov rdi, rbx; call qword ptr [r15+0x38];
0x000755ae: add [rax], al; mov rdx, r12; mov rsi, r14; mov rdi, rbx; call qword ptr [r15+0x38];
0x000755af: add [rcx+rcx*4-0x1e], cl; mov rsi, r14; mov rdi, rbx; call qword ptr [r15+0x38];
0x000755b0: mov rdx, r12; mov rsi, r14; mov rdi, rbx; call qword ptr [r15+0x38];
0x000755b1: mov edx, esp; mov rsi, r14; mov rdi, rbx; call qword ptr [r15+0x38];
0x000755b3: mov rsi, r14; mov rdi, rbx; call qword ptr [r15+0x38];
0x000755b4: mov esi, esi; mov rdi, rbx; call qword ptr [r15+0x38];
0x000755b5: test byte ptr [rax-0x77], 0xdf; call qword ptr [r15+0x38];
0x000755b6: mov rdi, rbx; call qword ptr [r15+0x38];
0x000755b7: mov edi, ebx; call qword ptr [r15+0x38];
0x000755b9: call qword ptr [r15+0x38];
0x000755ba: call qword ptr [rdi+0x38];
0x0007567a: ret 0xf6;
0x000756b6: add [rdi], cl; add eax, 0xffff3ae9; dec dword ptr [rcx-0x77]; shr cl, 0x68; add bh, bl; jmp qword ptr [rsi+0x2e];
0x000756b8: add eax, 0xffff3ae9; dec dword ptr [rcx-0x77]; shr cl, 0x68; add bh, bl; jmp qword ptr [rsi+0x2e];
0x000756bd: dec dword ptr [rcx-0x77]; shr cl, 0x68; add bh, bl; jmp qword ptr [rsi+0x2e];
0x000756c0: shr cl, 0x68; add bh, bl; jmp qword ptr [rsi+0x2e];
0x000756c3: add bh, bl; jmp qword ptr [rsi+0x2e];
0x000758ee: call qword ptr [rax+0x458b48];
0x00075da8: nop [rax+rax]; mov edx, 0x10; mov rsi, r13; mov rdi, r15; call qword ptr [r14+0x38];
0x00075dab: add [rax], al; add [rax], al; add [rdx+0x10], bh; mov rsi, r13; mov rdi, r15; call qword ptr [r14+0x38];
0x00075dac: add [rax], al; add [rax], al; mov edx, 0x10; mov rsi, r13; mov rdi, r15; call qword ptr [r14+0x38];
0x00075dad: add [rax], al; add [rdx+0x10], bh; mov rsi, r13; mov rdi, r15; call qword ptr [r14+0x38];
0x00075e05: jmp qword ptr [rdi+0x29480014];
0x00075e92: lea rdi, [rsp+0x10]; xor edx, edx; lea rsi, [rip+0x250]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00075e93: lea edi, [rsp+0x10]; xor edx, edx; lea rsi, [rip+0x250]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00075e95: and al, 0x10; xor edx, edx; lea rsi, [rip+0x250]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00075e96: adc [rcx], dh; ror byte ptr [rax-0x73], cl; xor eax, 0x250; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00075e98: ror byte ptr [rax-0x73], cl; xor eax, 0x250; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00075e9b: xor eax, 0x250; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00075e9c: push rax; add al, [rax]; add [rax-0x3f], cl; enter 0x6411, 0x48; xor eax, [0x30]; call rax;
0x00075e9d: add al, [rax]; add [rax-0x3f], cl; enter 0x6411, 0x48; xor eax, [0x30]; call rax;
0x00075f05: push rdi; add [rax], eax; add [rax-0x77], cl; ret 0x8b48;
0x00075f06: add [rax], eax; add [rax-0x77], cl; ret 0x8b48;
0x00075f50: add eax, 0x14b88b; lea rdi, [rsp+0x10]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00075f53: adc al, 0; lea rdi, [rsp+0x10]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00075fb3: mov rax, [rip+0x14b7ce]; mov rsi, r13; mov edi, 1; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00075fb4: mov eax, [rip+0x14b7ce]; mov rsi, r13; mov edi, 1; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00075fb5: add eax, 0x14b7ce; mov rsi, r13; mov edi, 1; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00075fb7: mov bh, 0x14; add [rcx+rcx*4-0x12], cl; mov edi, 1; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00075fb8: adc al, 0; mov rsi, r13; mov edi, 1; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00075fb9: add [rcx+rcx*4-0x12], cl; mov edi, 1; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00075fba: mov rsi, r13; mov edi, 1; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00075fbb: mov esi, ebp; mov edi, 1; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00075fbc: out dx, al; mov edi, 1; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00075fed: mov rax, [rip+0x14b794]; mov edi, [rsp+0x10]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00075fee: mov eax, [rip+0x14b794]; mov edi, [rsp+0x10]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00075fef: add eax, 0x14b794; mov edi, [rsp+0x10]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00075ff2: adc al, 0; mov edi, [rsp+0x10]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00075ff4: mov edi, [rsp+0x10]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00076062: ret 0xe8;
0x00076078: inc dword ptr [rdi+0x14b5910d]; add [rbx-0x71f0fe07], al; ret 0xfffe;
0x0007607b: xchg ecx, eax; mov ch, 0x14; add [rbx-0x71f0fe07], al; ret 0xfffe;
0x0007607c: mov ch, 0x14; add [rbx-0x71f0fe07], al; ret 0xfffe;
0x0007607e: add [rbx-0x71f0fe07], al; ret 0xfffe;
0x00076091: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x14b56f; syscall;
0x00076097: add [rax], al; add [rax-0x73], cl; cmp eax, 0x14b56f; syscall;
0x00076099: add [rax-0x73], cl; cmp eax, 0x14b56f; syscall;
0x0007609c: cmp eax, 0x14b56f; syscall;
0x00076115: shl byte ptr [rbp+8], cl; sub dword ptr [rip+0x14b4f1], 1; ret;
0x00076117: or [rbx+0x14b4f12d], al; add [rcx], al; ret;
0x00076118: sub dword ptr [rip+0x14b4f1], 1; ret;
0x0007611a: int1; mov ah, 0x14; add [rcx], al; ret;
0x0007611b: mov ah, 0x14; add [rcx], al; ret;
0x00076123: mov ah, 0x14; add [rbx+0x17f01f8], al; ret;
0x0007612e: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x14b4cb]; syscall; ret;
0x0007612f: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x14b4cb]; syscall; ret;
0x00076131: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x14b4cb]; syscall; ret;
0x00076132: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x14b4cb]; syscall; ret;
0x00076133: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x14b4cb]; syscall; ret;
0x00076134: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x14b4cb]; syscall; ret;
0x00076135: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x14b4cb; syscall; ret;
0x00076135: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x14b4cb; syscall;
0x00076136: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0x14b4cb]; syscall; ret;
0x00076137: add [rax], al; mov eax, 0xca; lea rdi, [rip+0x14b4cb]; syscall; ret;
0x00076138: add [rax+0xca], bh; lea rdi, [rip+0x14b4cb]; syscall; ret;
0x00076139: mov eax, 0xca; lea rdi, [rip+0x14b4cb]; syscall; ret;
0x0007613b: add [rax], al; add [rax-0x73], cl; cmp eax, 0x14b4cb; syscall;
0x0007613b: add [rax], al; add [rax-0x73], cl; cmp eax, 0x14b4cb; syscall; ret;
0x0007613c: add [rax], al; lea rdi, [rip+0x14b4cb]; syscall; ret;
0x0007613d: add [rax-0x73], cl; cmp eax, 0x14b4cb; syscall;
0x0007613d: add [rax-0x73], cl; cmp eax, 0x14b4cb; syscall; ret;
0x0007613e: lea rdi, [rip+0x14b4cb]; syscall; ret;
0x0007613f: lea edi, [rip+0x14b4cb]; syscall; ret;
0x00076140: cmp eax, 0x14b4cb; syscall; ret;
0x00076140: cmp eax, 0x14b4cb; syscall;
0x00076143: adc al, 0; syscall; ret;
0x000763d7: mov rax, [rip+0x14b402]; lea rdi, [rsp+0x20]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000763d8: mov eax, [rip+0x14b402]; lea rdi, [rsp+0x20]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000763d9: add eax, 0x14b402; lea rdi, [rsp+0x20]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000763da: add dh, [rsp+rdx+0x7c8d4800]; and al, 0x20; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000763dc: adc al, 0; lea rdi, [rsp+0x20]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000763de: lea rdi, [rsp+0x20]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000763df: lea edi, [rsp+0x20]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000763e1: and al, 0x20; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00076477: lea rdi, [rsp+0x20]; xor edx, edx; lea rsi, [rip-0x395]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00076478: lea edi, [rsp+0x20]; xor edx, edx; lea rsi, [rip-0x395]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0007647a: and al, 0x20; xor edx, edx; lea rsi, [rip-0x395]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0007647b: and [rcx], dh; ror byte ptr [rax-0x73], cl; xor eax, 0xfffffc6b; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0007647c: xor edx, edx; lea rsi, [rip+0x250]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0007647d: ror byte ptr [rax-0x73], cl; xor eax, 0xfffffc6b; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0007647e: lea rsi, [rip+0x250]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0007647f: lea esi, [rip+0x250]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00076480: xor eax, 0xfffffc6b; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00076481: imul edi, esp, 0xffffffff; dec dword ptr [rax-0x3f]; enter 0x6411, 0x48; xor eax, [0x30]; call rax;
0x0007651d: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x14b56f]; syscall;
0x0007651e: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x14b56f]; syscall;
0x0007651f: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x14b56f]; syscall;
0x00076520: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x14b56f]; syscall;
0x00076521: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x14b56f]; syscall;
0x00076522: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x14b56f]; syscall;
0x00076523: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x14b56f]; syscall;
0x00076524: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x14b56f]; syscall;
0x00076525: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x14b56f]; syscall;
0x00076526: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x14b56f]; syscall;
0x00076527: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x14b0d9; syscall;
0x00076528: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0x14b56f]; syscall;
0x00076529: add [rax], al; mov eax, 0xca; lea rdi, [rip+0x14b56f]; syscall;
0x0007652a: add [rax+0xca], bh; lea rdi, [rip+0x14b56f]; syscall;
0x0007652b: mov eax, 0xca; lea rdi, [rip+0x14b56f]; syscall;
0x0007652d: add [rax], al; add [rax-0x73], cl; cmp eax, 0x14b0d9; syscall;
0x0007652e: add [rax], al; lea rdi, [rip+0x14b56f]; syscall;
0x0007652f: add [rax-0x73], cl; cmp eax, 0x14b0d9; syscall;
0x00076530: lea rdi, [rip+0x14b56f]; syscall;
0x00076531: lea edi, [rip+0x14b56f]; syscall;
0x00076532: cmp eax, 0x14b0d9; syscall;
0x00076535: adc al, 0; syscall;
0x000765af: adc [rcx+rcx*4-0x20], cl; pop rbp; pop r12; pop r13; ret;
0x000765d1: cli; dec dword ptr [rcx+rcx*4-0x20]; pop rbp; pop r12; pop r13; ret;
0x000765d2: dec dword ptr [rcx+rcx*4-0x20]; pop rbp; pop r12; pop r13; ret;
0x000766b4: ror dword ptr [rax+0x39], 1; enter 0x860f, 0x92; add [rax], al; add [rax-0x77], cl; fimul st, dword ptr [rcx+rcx*4-0x1a]; call qword ptr [r14+0x38];
0x000766b7: enter 0x860f, 0x92; add [rax], al; add [rax-0x77], cl; fimul st, dword ptr [rcx+rcx*4-0x1a]; call qword ptr [r14+0x38];
0x000766b9: xchg [rdx+0x48000000], dl; mov edx, ebx; mov rsi, r12; call qword ptr [r14+0x38];
0x000766ba: xchg edx, eax; add [rax], al; add [rax-0x77], cl; fimul st, dword ptr [rcx+rcx*4-0x1a]; call qword ptr [r14+0x38];
0x000766bb: add [rax], al; add [rax-0x77], cl; fimul st, dword ptr [rcx+rcx*4-0x1a]; call qword ptr [r14+0x38];
0x000766bc: add [rax], al; mov rdx, rbx; mov rsi, r12; call qword ptr [r14+0x38];
0x000766bd: add [rax-0x77], cl; fimul st, dword ptr [rcx+rcx*4-0x1a]; call qword ptr [r14+0x38];
0x000766be: mov rdx, rbx; mov rsi, r12; call qword ptr [r14+0x38];
0x000766bf: mov edx, ebx; mov rsi, r12; call qword ptr [r14+0x38];
0x000766c0: fimul st, dword ptr [rcx+rcx*4-0x1a]; call qword ptr [r14+0x38];
0x000766c1: mov rsi, r12; call qword ptr [r14+0x38];
0x000766c2: mov esi, esp; call qword ptr [r14+0x38];
0x000766c3: out 0x41, al; call qword ptr [rsi+0x38];
0x000766c6: push rsi; cmp [rax+0x39], cl; ret;
0x000766c7: cmp [rax+0x39], cl; ret;
0x000767a4: add [rsi-0x76], edi; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x000767a6: mov al, [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; syscall;
0x0007685a: adc [rcx+rcx*4-0x17], al; mov edx, r12d; pop rbx; pop r12; pop r13; jmp rax;
0x0007685b: mov ecx, r13d; mov edx, r12d; pop rbx; pop r12; pop r13; jmp rax;
0x0007685c: mov ecx, ebp; mov edx, r12d; pop rbx; pop r12; pop r13; jmp rax;
0x0007685e: mov edx, r12d; pop rbx; pop r12; pop r13; jmp rax;
0x0007685f: mov edx, esp; pop rbx; pop r12; pop r13; jmp rax;
0x00076861: pop rbx; pop r12; pop r13; jmp rax;
0x000768e4: xchg edi, eax; nop [rax]; mov rax, [rip+0x147581]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret;
0x000768e7: add [rax-0x75], cl; add eax, 0x147581; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret;
0x000768ea: add eax, 0x147581; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret;
0x000768ed: adc al, 0; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret;
0x000769cc: add [rsi-0x33], edi; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x000769ce: int 0x45; xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x00076a52: mov rdi, rbp; xor edx, edx; pop rbp; pop r12; pop r13; jmp rax;
0x00076a53: mov edi, ebp; xor edx, edx; pop rbp; pop r12; pop r13; jmp rax;
0x00076a54: out dx, eax; xor edx, edx; pop rbp; pop r12; pop r13; jmp rax;
0x00076a55: xor edx, edx; pop rbp; pop r12; pop r13; jmp rax;
0x00076a56: rcr byte ptr [rbp+0x41], cl; pop rsp; pop r13; jmp rax;
0x00076b4c: add [rsi-0x37], edi; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x00076b4e: leave; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x00076bfc: ror dword ptr [rax+0x39], 1; enter 0x7676, 0x4c; mov edx, esp; mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x58];
0x00076bff: enter 0x7676, 0x4c; mov edx, esp; mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x58];
0x00076c1c: mov al, [0x1374c08548000000]; mov rax, [rax+0xe0]; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax+0x58];
0x00076c25: mov rax, [rax+0xe0]; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax+0x58];
0x00076c26: mov eax, [rax+0xe0]; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax+0x58];
0x00076c27: and al, 0; add [rax], al; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax+0x58];
0x00076c29: add [rax], al; add [rcx+rcx*4-0x1e], cl; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax+0x58];
0x00076c2a: add [rax], al; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax+0x58];
0x00076c2b: add [rcx+rcx*4-0x1e], cl; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax+0x58];
0x00076c2c: mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax+0x58];
0x00076c2d: mov edx, esp; mov rsi, rbp; mov rdi, rbx; call qword ptr [rax+0x58];
0x00076c2f: mov rsi, rbp; mov rdi, rbx; call qword ptr [rax+0x58];
0x00076c30: mov esi, ebp; mov rdi, rbx; call qword ptr [rax+0x58];
0x00076c31: out dx, al; mov rdi, rbx; call qword ptr [rax+0x58];
0x00076ca4: add [rsi-0x3e], edi; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x00076cb8: add [rdi], cl; add eax, 0x8949aceb; shr cl, 0x74; out dx, al; cli; jmp qword ptr [rsi+0x2e];
0x00076cba: add eax, 0x8949aceb; shr cl, 0x74; out dx, al; cli; jmp qword ptr [rsi+0x2e];
0x00076cbf: shr cl, 0x74; out dx, al; cli; jmp qword ptr [rsi+0x2e];
0x00076cc2: out dx, al; cli; jmp qword ptr [rsi+0x2e];
0x00076db9: enter 0x860f, 0xe0; add [rax], al; add [rcx+rcx*4-0x1e], cl; mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x58];
0x00076dbb: xchg al, ah; add [rax], al; add [rcx+rcx*4-0x1e], cl; mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x58];
0x00076dbd: add [rax], al; add [rcx+rcx*4-0x1e], cl; mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x58];
0x00076dbe: add [rax], al; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x58];
0x00076dbf: add [rcx+rcx*4-0x1e], cl; mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x58];
0x00076dc0: mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x58];
0x00076dc1: mov edx, esp; mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x58];
0x00076dc3: mov rsi, rbp; mov rdi, rbx; call qword ptr [r13+0x58];
0x00076dc4: mov esi, ebp; mov rdi, rbx; call qword ptr [r13+0x58];
0x00076dc5: out dx, al; mov rdi, rbx; call qword ptr [r13+0x58];
0x00076dc6: mov rdi, rbx; call qword ptr [r13+0x58];
0x00076dc7: mov edi, ebx; call qword ptr [r13+0x58];
0x00076dc9: call qword ptr [r13+0x58];
0x00076dca: call qword ptr [rbp+0x58];
0x00076e7b: ror dword ptr [rax+0x39], 1; enter 0x7376, 0x48; mov edi, ebx; call qword ptr [rbp+0x68];
0x00076e7e: enter 0x7376, 0x48; mov edi, ebx; call qword ptr [rbp+0x68];
0x00076e90: inc dword ptr [rax+0x3145fde6]; ror byte ptr [rcx-0xc116ed], 0xff; jmp qword ptr [rsi-0x70];
0x00076e96: ror byte ptr [rcx-0xc116ed], 0xff; jmp qword ptr [rsi-0x70];
0x00076ed4: add [rdi], ecx; mov ds, [rsi+rdi*8+0x3145ffff]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; syscall;
0x00076ed6: mov ds, [rsi+rdi*8+0x3145ffff]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; syscall;
0x00076ef8: add bl, ch; xchg [rcx-0x77], cl; shr cl, 0x8c; in al, dx; cli; jmp qword ptr [rsi+0x2e];
0x00076efa: xchg [rcx-0x77], cl; shr cl, 0x8c; in al, dx; cli; jmp qword ptr [rsi+0x2e];
0x00076efd: shr cl, 0x8c; in al, dx; cli; jmp qword ptr [rsi+0x2e];
0x00076eff: mov esp, gs; cli; jmp qword ptr [rsi+0x2e];
0x00076f00: in al, dx; cli; jmp qword ptr [rsi+0x2e];
0x00076f76: push rsi; ret 0;
0x00076ff4: add [rsi-0x48], edi; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x00076ff6: mov eax, 0xbad23145; add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; syscall;
0x0007700d: mov r8d, 0xffffffff; mov eax, r8d; ret;
0x0007700e: mov eax, 0xffffffff; mov eax, r8d; ret;
0x00077012: inc dword ptr [rcx+rcx*4-0x40]; ret;
0x0007701d: cli; call qword ptr [rax+0x8ec8348];
0x00077270: cmovs eax, [rcx+0x108c4]; add [rbp+0x41], bl; pop rsp; pop r13; pop r14; ret;
0x00077271: add rsp, 0x108; pop rbp; pop r12; pop r13; pop r14; ret;
0x00077272: add esp, 0x108; pop rbp; pop r12; pop r13; pop r14; ret;
0x00077341: sub qword ptr [rdi], 1; pop rbx; mov eax, r8d; pop rbp; pop r12; ret;
0x00077394: add [rsi-0x52], edi; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x00077396: scasb [rdi]; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x000773b1: xchg eax, ebp; cli; jmp qword ptr [rsi+0x2e];
0x000773fe: and [rcx+rcx*4-0x40], al; mov [rdx], r12d; add rsp, 8; pop rbp; pop r12; ret;
0x000773ff: mov eax, r8d; mov [rdx], r12d; add rsp, 8; pop rbp; pop r12; ret;
0x00077400: mov eax, eax; mov [rdx], r12d; add rsp, 8; pop rbp; pop r12; ret;
0x00077401: rol byte ptr [rcx+rcx*4+0x22], 0x48; add esp, 8; pop rbp; pop r12; ret;
0x00077402: mov [rdx], r12d; add rsp, 8; pop rbp; pop r12; ret;
0x00077403: mov [rdx], esp; add rsp, 8; pop rbp; pop r12; ret;
0x00077410: add rsp, 8; mov r8d, 0xffffffff; mov eax, r8d; pop rbp; pop r12; ret;
0x00077411: add esp, 8; mov r8d, 0xffffffff; mov eax, r8d; pop rbp; pop r12; ret;
0x00077414: mov r8d, 0xffffffff; mov eax, r8d; pop rbp; pop r12; ret;
0x00077415: mov eax, 0xffffffff; mov eax, r8d; pop rbp; pop r12; ret;
0x00077419: inc dword ptr [rcx+rcx*4-0x40]; pop rbp; pop r12; ret;
0x000774dc: sub dword ptr [r15], 1; add rsp, 8; mov eax, r8d; pop rbx; pop rbp; ret;
0x00077524: add [rsi-0x47], edi; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x00077526: mov ecx, 0xbad23145; add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; syscall;
0x00077536: add [rax], al; add [rdi], cl; add eax, 0x8949a3eb; shr cl, 0x4d; out 0xfa, eax; jmp qword ptr [rsi+0x2e];
0x00077538: add [rdi], cl; add eax, 0x8949a3eb; shr cl, 0x4d; out 0xfa, eax; jmp qword ptr [rsi+0x2e];
0x0007753a: add eax, 0x8949a3eb; shr cl, 0x4d; out 0xfa, eax; jmp qword ptr [rsi+0x2e];
0x0007753f: shr cl, 0x4d; out 0xfa, eax; jmp qword ptr [rsi+0x2e];
0x00077542: out 0xfa, eax; jmp qword ptr [rsi+0x2e];
0x00077561: push rax; or [rbx+0xb], dh; lea rcx, [rdx+4]; mov [rax], rcx; mov eax, [rdx]; ret;
0x00077562: or [rbx+0xb], dh; lea rcx, [rdx+4]; mov [rax], rcx; mov eax, [rdx]; ret;
0x00077564: or ecx, [rax-0x73]; add al, 0x48; mov [rax], ecx; mov eax, [rdx]; ret;
0x000775f7: add [rax+0x35740000], al; pop rbx; mov eax, r8d; pop rbp; pop r12; ret;
0x000775fa: add [rbp+rsi+0x5b], dh; mov eax, r8d; pop rbp; pop r12; ret;
0x000775fc: xor eax, 0xc089445b; pop rbp; pop r12; ret;
0x00077657: cmp [rbx-0x76bbfed1], al; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret;
0x00077658: sub dword ptr [rdi], 1; mov eax, r8d; pop rbx; pop rbp; pop r12; ret;
0x0007765a: add [rcx+rcx*4-0x40], eax; pop rbx; pop rbp; pop r12; ret;
0x000776db: push rax; or [rbx+0x11], dh; lea rcx, [rdx+4]; mov [rax], rcx; mov eax, [rdx]; ret;
0x000776dc: or [rbx+0x11], dh; lea rcx, [rdx+4]; mov [rax], rcx; mov eax, [rdx]; ret;
0x000776de: adc [rax-0x73], ecx; add al, 0x48; mov [rax], ecx; mov eax, [rdx]; ret;
0x000776df: lea rcx, [rdx+4]; mov [rax], rcx; mov eax, [rdx]; ret;
0x000776e0: lea ecx, [rdx+4]; mov [rax], rcx; mov eax, [rdx]; ret;
0x000776e2: add al, 0x48; mov [rax], ecx; mov eax, [rdx]; ret;
0x000776e3: mov [rax], rcx; mov eax, [rdx]; ret;
0x000776e4: mov [rax], ecx; mov eax, [rdx]; ret;
0x000776e6: mov eax, [rdx]; ret;
0x00077a05: ror dword ptr [rax+0x39], 1; enter 0x3576, 0x4c; mov edx, ebp; mov rsi, rbp; mov rdi, rbx; call qword ptr [r14+0x38];
0x00077a08: enter 0x3576, 0x4c; mov edx, ebp; mov rsi, rbp; mov rdi, rbx; call qword ptr [r14+0x38];
0x00077a0a: xor eax, 0x48ea894c; mov esi, ebp; mov rdi, rbx; call qword ptr [r14+0x38];
0x00077a0b: mov rdx, r13; mov rsi, rbp; mov rdi, rbx; call qword ptr [r14+0x38];
0x00077a0c: mov edx, ebp; mov rsi, rbp; mov rdi, rbx; call qword ptr [r14+0x38];
0x00077a0e: mov rsi, rbp; mov rdi, rbx; call qword ptr [r14+0x38];
0x00077a0f: mov esi, ebp; mov rdi, rbx; call qword ptr [r14+0x38];
0x00077a10: out dx, al; mov rdi, rbx; call qword ptr [r14+0x38];
0x00077a11: mov rdi, rbx; call qword ptr [r14+0x38];
0x00077a12: mov edi, ebx; call qword ptr [r14+0x38];
0x00077a54: add [rsi-0x7e], edi; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x00077ae0: ror dword ptr [rax+0x39], 1; enter 0x2276, 0x48; mov edx, ebx; mov rsi, r13; mov rdi, rbp; call qword ptr [r14+0x38];
0x00077ae3: enter 0x2276, 0x48; mov edx, ebx; mov rsi, r13; mov rdi, rbp; call qword ptr [r14+0x38];
0x00077ae5: and cl, [rax-0x77]; fimul st, dword ptr [rcx+rcx*4-0x12]; mov rdi, rbp; call qword ptr [r14+0x38];
0x00077ae6: mov rdx, rbx; mov rsi, r13; mov rdi, rbp; call qword ptr [r14+0x38];
0x00077ae7: mov edx, ebx; mov rsi, r13; mov rdi, rbp; call qword ptr [r14+0x38];
0x00077ae8: fimul st, dword ptr [rcx+rcx*4-0x12]; mov rdi, rbp; call qword ptr [r14+0x38];
0x00077ae9: mov rsi, r13; mov rdi, rbp; call qword ptr [r14+0x38];
0x00077aea: mov esi, ebp; mov rdi, rbp; call qword ptr [r14+0x38];
0x00077aeb: out dx, al; mov rdi, rbp; call qword ptr [r14+0x38];
0x00077aec: mov rdi, rbp; call qword ptr [r14+0x38];
0x00077aed: mov edi, ebp; call qword ptr [r14+0x38];
0x00077aee: out dx, eax; call qword ptr [r14+0x38];
0x00077c27: or [rax-0x3f], cl; clc; add cl, [rax-0x77]; ret;
0x00077c2a: clc; add cl, [rax-0x77]; ret;
0x00077c79: sbb eax, 0x415d5b00; pop rsp; pop r13; pop r14; pop r15; ret;
0x00077d4b: add [rax], al; add [rax], al; add [rax-0x77], cl; ret 0x889;
0x00077d4d: add [rax], al; add [rax-0x77], cl; ret 0x889;
0x00077d4f: add [rax-0x77], cl; ret 0x889;
0x00077d80: or bl, ch; and eax, 0x441f0f; add [rdx+0x10], bh; mov rsi, r13; mov rdi, r15; call qword ptr [r14+0x38];
0x00077d82: and eax, 0x441f0f; add [rdx+0x10], bh; mov rsi, r13; mov rdi, r15; call qword ptr [r14+0x38];
0x00077d83: nop [rax+rax]; mov edx, 0x10; mov rsi, r13; mov rdi, r15; call qword ptr [r14+0x38];
0x00077d85: add [rax], r8b; mov edx, 0x10; mov rsi, r13; mov rdi, r15; call qword ptr [r14+0x38];
0x00077d86: add [rax], al; mov edx, 0x10; mov rsi, r13; mov rdi, r15; call qword ptr [r14+0x38];
0x00077d87: add [rdx+0x10], bh; mov rsi, r13; mov rdi, r15; call qword ptr [r14+0x38];
0x00077d88: mov edx, 0x10; mov rsi, r13; mov rdi, r15; call qword ptr [r14+0x38];
0x00077d89: adc [rax], al; add [rax], al; mov rsi, r13; mov rdi, r15; call qword ptr [r14+0x38];
0x00077d8a: add [rax], al; add [rcx+rcx*4-0x12], cl; mov rdi, r15; call qword ptr [r14+0x38];
0x00077d8b: add [rax], al; mov rsi, r13; mov rdi, r15; call qword ptr [r14+0x38];
0x00077d8c: add [rcx+rcx*4-0x12], cl; mov rdi, r15; call qword ptr [r14+0x38];
0x00077d8d: mov rsi, r13; mov rdi, r15; call qword ptr [r14+0x38];
0x00077d8e: mov esi, ebp; mov rdi, r15; call qword ptr [r14+0x38];
0x00077d8f: out dx, al; mov rdi, r15; call qword ptr [r14+0x38];
0x00077d90: mov rdi, r15; call qword ptr [r14+0x38];
0x00077d91: mov edi, edi; call qword ptr [r14+0x38];
0x00077df1: ror dword ptr [rax+0x39], 1; enter 0x3176, 0x48; movsxd edx, ebx; mov rsi, r13; mov rdi, r15; call qword ptr [rbp+0x38];
0x00077df4: enter 0x3176, 0x48; movsxd edx, ebx; mov rsi, r13; mov rdi, r15; call qword ptr [rbp+0x38];
0x00077df6: xor [rax+0x63], ecx; ror dword ptr [rcx+rcx*4-0x12], cl; mov rdi, r15; call qword ptr [rbp+0x38];
0x00077df7: movsxd rdx, ebx; mov rsi, r13; mov rdi, r15; call qword ptr [rbp+0x38];
0x00077df8: movsxd edx, ebx; mov rsi, r13; mov rdi, r15; call qword ptr [rbp+0x38];
0x00077df9: ror dword ptr [rcx+rcx*4-0x12], cl; mov rdi, r15; call qword ptr [rbp+0x38];
0x00077dfa: mov rsi, r13; mov rdi, r15; call qword ptr [rbp+0x38];
0x00077dfb: mov esi, ebp; mov rdi, r15; call qword ptr [rbp+0x38];
0x00077dfc: out dx, al; mov rdi, r15; call qword ptr [rbp+0x38];
0x00077dfd: mov rdi, r15; call qword ptr [rbp+0x38];
0x00077dfe: mov edi, edi; call qword ptr [rbp+0x38];
0x00077ede: xor [rbx+0x445b012f], eax; mov eax, eax; pop rbp; pop r12; ret;
0x00077f14: add [rsi-0x35], edi; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x00077f26: add [rax], al; add [rdi], cl; add eax, 0x8949b5eb; shr cl, 0xb5; fdivp st(2), st; jmp qword ptr [rsi+0x2e];
0x00077f28: add [rdi], cl; add eax, 0x8949b5eb; shr cl, 0xb5; fdivp st(2), st; jmp qword ptr [rsi+0x2e];
0x00077f2a: add eax, 0x8949b5eb; shr cl, 0xb5; fdivp st(2), st; jmp qword ptr [rsi+0x2e];
0x00077f2f: shr cl, 0xb5; fdivp st(2), st; jmp qword ptr [rsi+0x2e];
0x00077f31: mov ch, 0xde; cli; jmp qword ptr [rsi+0x2e];
0x00077f32: fdivp st(2), st; jmp qword ptr [rsi+0x2e];
0x00078064: and [rax+0x3b], cl; sub [rbx+0x15], sil; lea rsi, [rcx+4]; mov [rdx+0x20], rsi; mov [rcx], eax; ret;
0x00078067: sub [rbx+0x15], sil; lea rsi, [rcx+4]; mov [rdx+0x20], rsi; mov [rcx], eax; ret;
0x00078068: sub [rbx+0x15], dh; lea rsi, [rcx+4]; mov [rdx+0x20], rsi; mov [rcx], eax; ret;
0x0007806a: adc eax, 0x4718d48; mov [rdx+0x20], rsi; mov [rcx], eax; ret;
0x00078104: cmp eax, 0x894cee89; iretd;
0x0007820b: and [rax+0x3b], cl; sub [rbx+0xe], sil; lea rsi, [rcx+4]; mov [rdx+0x20], rsi; mov [rcx], eax; ret;
0x0007820e: sub [rbx+0xe], sil; lea rsi, [rcx+4]; mov [rdx+0x20], rsi; mov [rcx], eax; ret;
0x0007820f: sub [rbx+0xe], dh; lea rsi, [rcx+4]; mov [rdx+0x20], rsi; mov [rcx], eax; ret;
0x00078212: lea rsi, [rcx+4]; mov [rdx+0x20], rsi; mov [rcx], eax; ret;
0x00078213: lea esi, [rcx+4]; mov [rdx+0x20], rsi; mov [rcx], eax; ret;
0x00078215: add al, 0x48; mov [rdx+0x20], esi; mov [rcx], eax; ret;
0x00078216: mov [rdx+0x20], rsi; mov [rcx], eax; ret;
0x00078217: mov [rdx+0x20], esi; mov [rcx], eax; ret;
0x0007821a: mov [rcx], eax; ret;
0x000782aa: ret 0xa3;
0x00078396: add [rdi+rcx-0x4a], al; iretd;
0x000783a4: xor [rbx+0x18], sil; lea rdx, [rax+1]; mov [r8+0x28], rdx; mov [rax], dil; mov eax, r9d; ret;
0x000783a5: xor [rbx+0x18], dh; lea rdx, [rax+1]; mov [r8+0x28], rdx; mov [rax], dil; mov eax, r9d; ret;
0x000783a8: lea rdx, [rax+1]; mov [r8+0x28], rdx; mov [rax], dil; mov eax, r9d; ret;
0x000783a9: lea edx, [rax+1]; mov [r8+0x28], rdx; mov [rax], dil; mov eax, r9d; ret;
0x000783aa: push rax; add [rcx-0x77], ecx; push rax; sub [rax-0x78], al; cmp [rcx+rcx*4-0x38], al; ret;
0x000783ab: add [rcx-0x77], ecx; push rax; sub [rax-0x78], al; cmp [rcx+rcx*4-0x38], al; ret;
0x000783ac: mov [r8+0x28], rdx; mov [rax], dil; mov eax, r9d; ret;
0x000783ad: mov [rax+0x28], edx; mov [rax], dil; mov eax, r9d; ret;
0x000783ae: push rax; sub [rax-0x78], al; cmp [rcx+rcx*4-0x38], al; ret;
0x000783af: sub [rax-0x78], al; cmp [rcx+rcx*4-0x38], al; ret;
0x000783b0: mov [rax], dil; mov eax, r9d; ret;
0x000783b1: mov [rax], bh; mov eax, r9d; ret;
0x000783b2: cmp [rcx+rcx*4-0x38], al; ret;
0x00078551: cmp cl, ch; fnstenv [rdi-1]; jmp qword ptr [rsi+0xf];
0x00078553: fnstenv [rdi-1]; jmp qword ptr [rsi+0xf];
0x00078daf: add [rax+0x63], cl; push rax; adc [rax-0x75], cl; add [rcx+0x39], cl; ror byte ptr [rdi+rcx+0x4f], 1; ret 0x8548;
0x00078ded: mov [rax+8], rcx; mov rcx, [rax+0x10]; mov [rax], rdx; mov [rax+0x10], rdx; mov [rax+0x40], rcx; ret;
0x00078dee: mov [rax+8], ecx; mov rcx, [rax+0x10]; mov [rax], rdx; mov [rax+0x10], rdx; mov [rax+0x40], rcx; ret;
0x00078df0: or [rax-0x75], cl; adc [rax-0x77], cl; adc [rax-0x77], cl; push rax; adc [rax-0x77], cl; ret;
0x00078df1: mov rcx, [rax+0x10]; mov [rax], rdx; mov [rax+0x10], rdx; mov [rax+0x40], rcx; ret;
0x00078df2: mov ecx, [rax+0x10]; mov [rax], rdx; mov [rax+0x10], rdx; mov [rax+0x40], rcx; ret;
0x00078df4: adc [rax-0x77], cl; adc [rax-0x77], cl; push rax; adc [rax-0x77], cl; ret;
0x00078df5: mov [rax], rdx; mov [rax+0x10], rdx; mov [rax+0x40], rcx; ret;
0x00078df6: mov [rax], edx; mov [rax+0x10], rdx; mov [rax+0x40], rcx; ret;
0x00078df7: adc [rax-0x77], cl; push rax; adc [rax-0x77], cl; ret;
0x00078df8: mov [rax+0x10], rdx; mov [rax+0x40], rcx; ret;
0x00078df9: mov [rax+0x10], edx; mov [rax+0x40], rcx; ret;
0x00078dfa: push rax; adc [rax-0x77], cl; ret;
0x00078dfc: mov [rax+0x40], rcx; ret;
0x00078dfd: mov [rax+0x40], ecx; ret;
0x00078e2d: mov rcx, [rax+0x10]; mov [rax+8], rdx; mov [rax+0x10], rsi; mov [rax+0x40], rcx; mov [rax], rdx; ret;
0x00078e2e: mov ecx, [rax+0x10]; mov [rax+8], rdx; mov [rax+0x10], rsi; mov [rax+0x40], rcx; mov [rax], rdx; ret;
0x00078e31: mov [rax+8], rdx; mov [rax+0x10], rsi; mov [rax+0x40], rcx; mov [rax], rdx; ret;
0x00078e32: mov [rax+8], edx; mov [rax+0x10], rsi; mov [rax+0x40], rcx; mov [rax], rdx; ret;
0x00078e35: mov [rax+0x10], rsi; mov [rax+0x40], rcx; mov [rax], rdx; ret;
0x00078e36: mov [rax+0x10], esi; mov [rax+0x40], rcx; mov [rax], rdx; ret;
0x00078e38: adc [rax-0x77], cl; mov [rax], rdx; ret;
0x00078e39: mov [rax+0x40], rcx; mov [rax], rdx; ret;
0x00078e3a: mov [rax+0x40], ecx; mov [rax], rdx; ret;
0x00078f42: ret 0xfac3;
0x000790cd: add [rax], al; add al, ch; ret 0xfffa;
0x000790cf: add al, ch; ret 0xfffa;
0x000790d2: ret 0xfffa;
0x00079116: ror dword ptr [rax+0x39], 1; enter 0x3c76, 0x48; mov edi, ebx; call qword ptr [rbp+0x20];
0x00079119: enter 0x3c76, 0x48; mov edi, ebx; call qword ptr [rbp+0x20];
0x0007911b: cmp al, 0x48; mov edi, ebx; call qword ptr [rbp+0x20];
0x00079135: mov eax, [rax]; mov [rdx], rcx; add rsp, 8; pop rbx; pop rbp; ret;
0x00079137: mov [rdx], rcx; add rsp, 8; pop rbx; pop rbp; ret;
0x00079138: mov [rdx], ecx; add rsp, 8; pop rbx; pop rbp; ret;
0x00079141: nop [rax]; add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret;
0x00079146: add [rax], al; add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret;
0x000791c7: sbb [r9+r9*4-0x1a], al; pop rbx; mov rdi, rbp; pop rbp; pop r12; jmp rax;
0x000791c8: sbb [rcx+rcx*4-0x1a], al; pop rbx; mov rdi, rbp; pop rbp; pop r12; jmp rax;
0x000791c9: mov esi, r12d; pop rbx; mov rdi, rbp; pop rbp; pop r12; jmp rax;
0x000791ca: mov esi, esp; pop rbx; mov rdi, rbp; pop rbp; pop r12; jmp rax;
0x000791cb: out 0x5b, al; mov rdi, rbp; pop rbp; pop r12; jmp rax;
0x000791cc: pop rbx; mov rdi, rbp; pop rbp; pop r12; jmp rax;
0x000791cd: mov rdi, rbp; pop rbp; pop r12; jmp rax;
0x000791ce: mov edi, ebp; pop rbp; pop r12; jmp rax;
0x000791cf: out dx, eax; pop rbp; pop r12; jmp rax;
0x00079231: xchg [rdx], cl; add [rax], eax; add [rcx+rcx*4-0x3a], al; mov rdi, r15; call qword ptr [rbx+0x18];
0x00079232: or al, [rcx]; add [rax], al; mov esi, r8d; mov rdi, r15; call qword ptr [rbx+0x18];
0x00079233: add [rax], eax; add [rcx+rcx*4-0x3a], al; mov rdi, r15; call qword ptr [rbx+0x18];
0x00079234: add [rax], al; mov esi, r8d; mov rdi, r15; call qword ptr [rbx+0x18];
0x00079235: add [rcx+rcx*4-0x3a], al; mov rdi, r15; call qword ptr [rbx+0x18];
0x00079236: mov esi, r8d; mov rdi, r15; call qword ptr [rbx+0x18];
0x00079237: mov esi, eax; mov rdi, r15; call qword ptr [rbx+0x18];
0x00079239: mov rdi, r15; call qword ptr [rbx+0x18];
0x0007923a: mov edi, edi; call qword ptr [rbx+0x18];
0x000792bb: add [rax], al; add [rax], al; add [rax-0x77], cl; ret 0x894c;
0x000792bd: add [rax], al; add [rax-0x77], cl; ret 0x894c;
0x000792bf: add [rax-0x77], cl; ret 0x894c;
0x00079346: neg byte ptr [rbx]; add [rbx+rcx*4+0x44], al; and al, 8; mov rdi, r15; mov esi, r8d; call qword ptr [rbx+0x18];
0x00079347: pop rbx; add [rax], al; mov r8d, [rsp+8]; mov rdi, r15; mov esi, r8d; call qword ptr [rbx+0x18];
0x00079348: add [rax], al; mov r8d, [rsp+8]; mov rdi, r15; mov esi, r8d; call qword ptr [rbx+0x18];
0x00079349: add [rbx+rcx*4+0x44], al; and al, 8; mov rdi, r15; mov esi, r8d; call qword ptr [rbx+0x18];
0x0007934a: mov r8d, [rsp+8]; mov rdi, r15; mov esi, r8d; call qword ptr [rbx+0x18];
0x0007934b: mov eax, [rsp+8]; mov rdi, r15; mov esi, r8d; call qword ptr [rbx+0x18];
0x0007934d: and al, 8; mov rdi, r15; mov esi, r8d; call qword ptr [rbx+0x18];
0x0007934e: or [rcx+rcx*4-1], cl; mov esi, r8d; call qword ptr [rbx+0x18];
0x0007934f: mov rdi, r15; mov esi, r8d; call qword ptr [rbx+0x18];
0x00079350: mov edi, edi; mov esi, r8d; call qword ptr [rbx+0x18];
0x00079351: inc dword ptr [rcx+rcx*4-0x3a]; call qword ptr [rbx+0x18];
0x00079352: mov esi, r8d; call qword ptr [rbx+0x18];
0x00079353: mov esi, eax; call qword ptr [rbx+0x18];
0x00079399: add dh, [rbp+0x64]; mov rax, [rax+0xe0]; call qword ptr [rax+0x68];
0x0007939b: mov rax, fs:[rax+0xe0]; call qword ptr [rax+0x68];
0x0007939c: mov rax, [rax+0xe0]; call qword ptr [rax+0x68];
0x0007939d: mov eax, [rax+0xe0]; call qword ptr [rax+0x68];
0x0007939e: and al, 0; add [rax], al; call qword ptr [rax+0x68];
0x000793a1: add [rax], al; call qword ptr [rax+0x68];
0x000793a3: call qword ptr [rax+0x68];
0x000793bb: mov al, [0xd8a88d48000000dc]; add [rax], al; add [rax-0x7b], cl; push qword ptr [rbp+rax-0xa]; ret 0x7408;
0x000793bf: add [rax-0x73], cl; test al, 0xd8; add [rax], al; add [rax-0x7b], cl; push qword ptr [rbp+rax-0xa]; ret 0x7408;
0x000793c2: test al, 0xd8; add [rax], al; add [rax-0x7b], cl; push qword ptr [rbp+rax-0xa]; ret 0x7408;
0x000793c4: add [rax], al; add [rax-0x7b], cl; push qword ptr [rbp+rax-0xa]; ret 0x7408;
0x000793c6: add [rax-0x7b], cl; push qword ptr [rbp+rax-0xa]; ret 0x7408;
0x000793c9: push qword ptr [rbp+rax-0xa]; ret 0x7408;
0x000793cd: ret 0x7408;
0x000793d3: or [rax-0x77], cl; push 0x60894c30; cmp [rcx+0x5d5b7453], cl; pop r12; ret;
0x000793d6: push 0x60894c30; cmp [rcx+0x5d5b7453], cl; pop r12; ret;
0x000793d7: xor [rcx+rcx*4+0x60], cl; cmp [rcx+0x5d5b7453], cl; pop r12; ret;
0x000793d8: mov [rax+0x38], r12; mov [rbx+0x74], edx; pop rbx; pop rbp; pop r12; ret;
0x000793d9: mov [rax+0x38], esp; mov [rbx+0x74], edx; pop rbx; pop rbp; pop r12; ret;
0x000793db: cmp [rcx+0x5d5b7453], cl; pop r12; ret;
0x000793dc: mov [rbx+0x74], edx; pop rbx; pop rbp; pop r12; ret;
0x00079461: cmp [rcx-0x47a48bbd], cl; add [rax], eax; add [rax], al; pop rbp; pop r12; ret;
0x00079462: mov [rbx+0x74], eax; pop rbx; mov eax, 1; pop rbp; pop r12; ret;
0x000794ae: and [rax+0x3b], cl; push rax; sbb [rsi+0x1f], dh; mov rax, [rax+0xe0]; mov esi, 0xffffffff; call qword ptr [rax+0x18];
0x000794b1: push rax; sbb [rsi+0x1f], dh; mov rax, [rax+0xe0]; mov esi, 0xffffffff; call qword ptr [rax+0x18];
0x000794b2: sbb [rsi+0x1f], dh; mov rax, [rax+0xe0]; mov esi, 0xffffffff; call qword ptr [rax+0x18];
0x000794b5: mov rax, [rax+0xe0]; mov esi, 0xffffffff; call qword ptr [rax+0x18];
0x000794b6: mov eax, [rax+0xe0]; mov esi, 0xffffffff; call qword ptr [rax+0x18];
0x000794b7: and al, 0; add [rax], al; mov esi, 0xffffffff; call qword ptr [rax+0x18];
0x000794b9: add [rax], al; add [rsi-1], bh; call qword ptr [rax+0x18];
0x000794ba: add [rax], al; mov esi, 0xffffffff; call qword ptr [rax+0x18];
0x000794bb: add [rsi-1], bh; call qword ptr [rax+0x18];
0x000794bc: mov esi, 0xffffffff; call qword ptr [rax+0x18];
0x000794f3: mov [rax+0x28], rdx; mov [rax+0x18], rdx; xor eax, eax; mov [rbx], ecx; pop rbx; ret;
0x000794f4: mov [rax+0x28], edx; mov [rax+0x18], rdx; xor eax, eax; mov [rbx], ecx; pop rbx; ret;
0x000794f7: mov [rax+0x18], rdx; xor eax, eax; mov [rbx], ecx; pop rbx; ret;
0x000794f8: mov [rax+0x18], edx; xor eax, eax; mov [rbx], ecx; pop rbx; ret;
0x000794fb: xor eax, eax; mov [rbx], ecx; pop rbx; ret;
0x000794fd: mov [rbx], ecx; pop rbx; ret;
0x00079605: jmp far fword ptr [rdi+0x14];
0x00079654: mov [rax], rcx; mov eax, [rdx]; add rsp, 8; pop rbx; pop rbp; ret;
0x00079655: mov [rax], ecx; mov eax, [rdx]; add rsp, 8; pop rbx; pop rbp; ret;
0x00079656: or [rbx-0x3b7cb7fe], cl; or [rbx+0x5d], bl; ret;
0x0007968e: call qword ptr [rax+0x40788348];
0x000797b1: add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret;
0x000797b2: add esp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret;
0x000797b4: or [rax-1], bh; pop rbx; pop rbp; ret;
0x000797b5: mov eax, 0xffffffff; pop rbx; pop rbp; ret;
0x000797ed: dec dword ptr [rbx-0x3b7cb7fe]; or [rbx+0x5d], bl; ret;
0x000797ee: mov eax, [rdx]; add rsp, 8; pop rbx; pop rbp; ret;
0x0007982e: call qword ptr [rax+0x487d8348];
0x000798e9: mov al, [0x415c415de0894c5b]; pop rbp; pop r14; ret;
0x0007998b: ror dword ptr [rax+0x39], 1; enter 0x2f76, 0x48; mov edi, ebx; call qword ptr [rbp+0x30];
0x0007998e: enter 0x2f76, 0x48; mov edi, ebx; call qword ptr [rbp+0x30];
0x000799c8: add [rbx-0x14f3db8c], cl; ret 0x5590;
0x000799cc: or al, 0xeb; ret 0x5590;
0x000799ce: ret 0x5590;
0x000799f5: push qword ptr [rbx+rax-0x7d]; and ebp, edi; add rsp, 8; pop rbx; pop rbp; ret;
0x00079a4b: add [rax], al; add [rax], al; add [rax+0x63], cl; ret 0x8d48;
0x00079a4d: add [rax], al; add [rax+0x63], cl; ret 0x8d48;
0x00079a4f: add [rax+0x63], cl; ret 0x8d48;
0x00079a70: cmp al, bl; nop [rax+rax]; sub rcx, rax; sar rcx, 2; lea eax, [rcx-1]; ret;
0x00079a72: nop [rax+rax]; sub rcx, rax; sar rcx, 2; lea eax, [rcx-1]; ret;
0x00079a73: nop [rax+rax]; sub rcx, rax; sar rcx, 2; lea eax, [rcx-1]; ret;
0x00079a75: add [rax], r8b; sub rcx, rax; sar rcx, 2; lea eax, [rcx-1]; ret;
0x00079a76: add [rax], al; sub rcx, rax; sar rcx, 2; lea eax, [rcx-1]; ret;
0x00079a78: sub rcx, rax; sar rcx, 2; lea eax, [rcx-1]; ret;
0x00079a79: sub ecx, eax; sar rcx, 2; lea eax, [rcx-1]; ret;
0x00079a7b: sar rcx, 2; lea eax, [rcx-1]; ret;
0x00079a7c: sar ecx, 2; lea eax, [rcx-1]; ret;
0x00079b1a: sub rax, [rcx+0x10]; sar rax, 2; mov r8d, [rdi+0x10]; sub r8d, eax; mov eax, r8d; ret;
0x00079b1b: sub eax, [rcx+0x10]; sar rax, 2; mov r8d, [rdi+0x10]; sub r8d, eax; mov eax, r8d; ret;
0x00079b1e: sar rax, 2; mov r8d, [rdi+0x10]; sub r8d, eax; mov eax, r8d; ret;
0x00079b1f: sar eax, 2; mov r8d, [rdi+0x10]; sub r8d, eax; mov eax, r8d; ret;
0x00079b22: mov r8d, [rdi+0x10]; sub r8d, eax; mov eax, r8d; ret;
0x00079b23: mov eax, [rdi+0x10]; sub r8d, eax; mov eax, r8d; ret;
0x00079b26: sub r8d, eax; mov eax, r8d; ret;
0x00079b27: sub eax, eax; mov eax, r8d; ret;
0x00079b76: adc [rbp+0x494575f6], al; lea edx, [rax+rdx*4]; mov [rax], rdx; xor eax, eax; ret;
0x00079b78: div byte ptr [rbp+0x45]; lea rdx, [r8+rdx*4]; mov [rax], rdx; xor eax, eax; ret;
0x00079bac: lea rdx, [r8+rdx*4]; mov [rax+0x10], rdi; mov [rax+0x40], rsi; mov [rax], rdx; xor eax, eax; ret;
0x00079bad: lea edx, [rax+rdx*4]; mov [rax+0x10], rdi; mov [rax+0x40], rsi; mov [rax], rdx; xor eax, eax; ret;
0x00079bae: adc al, 0x90; mov [rax+0x10], rdi; mov [rax+0x40], rsi; mov [rax], rdx; xor eax, eax; ret;
0x00079baf: nop; mov [rax+0x10], rdi; mov [rax+0x40], rsi; mov [rax], rdx; xor eax, eax; ret;
0x00079bb0: mov [rax+0x10], rdi; mov [rax+0x40], rsi; mov [rax], rdx; xor eax, eax; ret;
0x00079bb1: mov [rax+0x10], edi; mov [rax+0x40], rsi; mov [rax], rdx; xor eax, eax; ret;
0x00079bb4: mov [rax+0x40], rsi; mov [rax], rdx; xor eax, eax; ret;
0x00079bb5: mov [rax+0x40], esi; mov [rax], rdx; xor eax, eax; ret;
0x00079bdd: mov r8, rcx; mov [rax+0x10], rcx; lea rdx, [r8+rdx*4]; mov [rax], rdx; xor eax, eax; ret;
0x00079bde: mov eax, ecx; mov [rax+0x10], rcx; lea rdx, [r8+rdx*4]; mov [rax], rdx; xor eax, eax; ret;
0x00079bdf: enter 0x8948, 0x48; adc [rcx-0x73], cl; adc al, 0x90; mov [rax], rdx; xor eax, eax; ret;
0x00079be0: mov [rax+0x10], rcx; lea rdx, [r8+rdx*4]; mov [rax], rdx; xor eax, eax; ret;
0x00079be1: mov [rax+0x10], ecx; lea rdx, [r8+rdx*4]; mov [rax], rdx; xor eax, eax; ret;
0x00079be3: adc [rcx-0x73], cl; adc al, 0x90; mov [rax], rdx; xor eax, eax; ret;
0x00079be4: lea rdx, [r8+rdx*4]; mov [rax], rdx; xor eax, eax; ret;
0x00079be5: lea edx, [rax+rdx*4]; mov [rax], rdx; xor eax, eax; ret;
0x00079be6: adc al, 0x90; mov [rax], rdx; xor eax, eax; ret;
0x00079be7: nop; mov [rax], rdx; xor eax, eax; ret;
0x00079be8: mov [rax], rdx; xor eax, eax; ret;
0x00079be9: mov [rax], edx; xor eax, eax; ret;
0x00079bea: adc [rcx], dh; rol bl, 0x66; nop; mov eax, 0xffffffff; ret;
0x00079c31: mov rax, [rbx+0xa0]; mov qword ptr [rax+0x40], 0; mov qword ptr [rax+0x50], 0; mov qword ptr [rax+0x48], 0; pop rbx; ret;
0x00079c32: mov eax, [rbx+0xa0]; mov qword ptr [rax+0x40], 0; mov qword ptr [rax+0x50], 0; mov qword ptr [rax+0x48], 0; pop rbx; ret;
0x00079c36: add [rax], al; mov qword ptr [rax+0x40], 0; mov qword ptr [rax+0x50], 0; mov qword ptr [rax+0x48], 0; pop rbx; ret;
0x00079c38: mov qword ptr [rax+0x40], 0; mov qword ptr [rax+0x50], 0; mov qword ptr [rax+0x48], 0; pop rbx; ret;
0x00079c39: mov dword ptr [rax+0x40], 0; mov qword ptr [rax+0x50], 0; mov qword ptr [rax+0x48], 0; pop rbx; ret;
0x00079c3c: add [rax], al; add [rax], al; mov qword ptr [rax+0x50], 0; mov qword ptr [rax+0x48], 0; pop rbx; ret;
0x00079c3e: add [rax], al; mov qword ptr [rax+0x50], 0; mov qword ptr [rax+0x48], 0; pop rbx; ret;
0x00079c40: mov qword ptr [rax+0x50], 0; mov qword ptr [rax+0x48], 0; pop rbx; ret;
0x00079c41: mov dword ptr [rax+0x50], 0; mov qword ptr [rax+0x48], 0; pop rbx; ret;
0x00079c43: push rax; add [rax], al; add [rax], al; mov qword ptr [rax+0x48], 0; pop rbx; ret;
0x00079c44: add [rax], al; add [rax], al; mov qword ptr [rax+0x48], 0; pop rbx; ret;
0x00079c45: add [rax], al; add [rax-0x39], cl; add [rax], al; add [rax], al; pop rbx; ret;
0x00079c46: add [rax], al; mov qword ptr [rax+0x48], 0; pop rbx; ret;
0x00079c47: add [rax-0x39], cl; add [rax], al; add [rax], al; pop rbx; ret;
0x00079c48: mov qword ptr [rax+0x48], 0; pop rbx; ret;
0x00079c49: mov dword ptr [rax+0x48], 0; pop rbx; ret;
0x00079cc8: dec dword ptr [rax+0x39]; enter 0x373, 0x44; mov eax, [rax]; mov eax, r8d; ret;
0x00079ccb: enter 0x373, 0x44; mov eax, [rax]; mov eax, r8d; ret;
0x00079ccd: add eax, [rbx+rcx*4]; mov eax, r8d; ret;
0x00079cce: mov r8d, [rax]; mov eax, r8d; ret;
0x00079ccf: mov eax, [rax]; mov eax, r8d; ret;
0x00079f41: add cl, [rax-0x75]; sbb [r11+r9*4+0x73], cl; sub [rax-0x77], cl; iretd;
0x00079f44: sbb [r11+r9*4+0x73], cl; sub [rax-0x77], cl; iretd;
0x00079f45: sbb [rbx+rcx*4+0x73], cl; sub [rax-0x77], cl; iretd;
0x00079f49: sub [rax-0x77], cl; iretd;
0x0007a0dc: or eax, 0x3ce80011; movsd [rdi], [rsi]; sti; jmp qword ptr [rsi+0x66];
0x0007a0de: add al, ch; cmp al, 0xa5; sti; jmp qword ptr [rsi+0x66];
0x0007a0e0: cmp al, 0xa5; sti; jmp qword ptr [rsi+0x66];
0x0007a0e1: movsd [rdi], [rsi]; sti; jmp qword ptr [rsi+0x66];
0x0007a0fb: shr ebp, 0xff; call qword ptr [rax-0x48];
0x0007a1f3: mov al, [0x4820428b48000000]; cmp [rdx+8], eax; cmovae rax, [rdx+8]; sub rax, [rdx+0x10]; sar rax, 2; ret;
0x0007a1f7: mov rax, [rdx+0x20]; cmp [rdx+8], rax; cmovae rax, [rdx+8]; sub rax, [rdx+0x10]; sar rax, 2; ret;
0x0007a1f8: mov eax, [rdx+0x20]; cmp [rdx+8], rax; cmovae rax, [rdx+8]; sub rax, [rdx+0x10]; sar rax, 2; ret;
0x0007a1fb: cmp [rdx+8], rax; cmovae rax, [rdx+8]; sub rax, [rdx+0x10]; sar rax, 2; ret;
0x0007a1fc: cmp [rdx+8], eax; cmovae rax, [rdx+8]; sub rax, [rdx+0x10]; sar rax, 2; ret;
0x0007a1ff: cmovae rax, [rdx+8]; sub rax, [rdx+0x10]; sar rax, 2; ret;
0x0007a200: cmovae eax, [rdx+8]; sub rax, [rdx+0x10]; sar rax, 2; ret;
0x0007a204: sub rax, [rdx+0x10]; sar rax, 2; ret;
0x0007a205: sub eax, [rdx+0x10]; sar rax, 2; ret;
0x0007a649: add [rax], al; mov rsi, [rbx+0x10]; mov rdx, [rbx+0x40]; mov rdi, rbx; sub rdx, rsi; call qword ptr [rax+0x70];
0x0007a64b: mov rsi, [rbx+0x10]; mov rdx, [rbx+0x40]; mov rdi, rbx; sub rdx, rsi; call qword ptr [rax+0x70];
0x0007a64c: mov esi, [rbx+0x10]; mov rdx, [rbx+0x40]; mov rdi, rbx; sub rdx, rsi; call qword ptr [rax+0x70];
0x0007a64e: adc [rax-0x75], cl; push rbx; mov rdi, rbx; sub rdx, rsi; call qword ptr [rax+0x70];
0x0007a64f: mov rdx, [rbx+0x40]; mov rdi, rbx; sub rdx, rsi; call qword ptr [rax+0x70];
0x0007a650: mov edx, [rbx+0x40]; mov rdi, rbx; sub rdx, rsi; call qword ptr [rax+0x70];
0x0007a651: push rbx; mov rdi, rbx; sub rdx, rsi; call qword ptr [rax+0x70];
0x0007a653: mov rdi, rbx; sub rdx, rsi; call qword ptr [rax+0x70];
0x0007a654: mov edi, ebx; sub rdx, rsi; call qword ptr [rax+0x70];
0x0007a655: fisttp word ptr [rax+0x29], st; bnd call qword ptr [rax+0x70];
0x0007a656: sub rdx, rsi; call qword ptr [rax+0x70];
0x0007a657: sub edx, esi; call qword ptr [rax+0x70];
0x0007a658: bnd call qword ptr [rax+0x70];
0x0007a659: call qword ptr [rax+0x70];
0x0007a668: adc [rax-0x75], cl; xchg ebx, eax; nop; add [rax], al; add [rcx+1], cl; ret;
0x0007a66b: xchg ebx, eax; nop; add [rax], al; add [rcx+1], cl; ret;
0x0007a66c: nop; add [rax], al; add [rcx+1], cl; ret;
0x0007a67c: or cl, [rax+1]; ret 0x8948;
0x0007a8d6: and [rax+0x39], cl; ret 0x8948;
0x0007a95e: call qword ptr [rax+0x48c7894c];
0x0007a9f8: test al, 0xfa; dec dword ptr [rax-0x75]; cmp [r8-0x75], cl; push rbx; adc [rax+1], cl; ret 0x2b48;
0x0007a9f9: cli; dec dword ptr [rax-0x75]; cmp [r8-0x75], cl; push rbx; adc [rax+1], cl; ret 0x2b48;
0x0007a9fa: dec dword ptr [rax-0x75]; cmp [r8-0x75], cl; push rbx; adc [rax+1], cl; ret 0x2b48;
0x0007a9fd: cmp [r8-0x75], cl; push rbx; adc [rax+1], cl; ret 0x2b48;
0x0007a9fe: cmp [rax-0x75], cl; push rbx; adc [rax+1], cl; ret 0x2b48;
0x0007aa01: push rbx; adc [rax+1], cl; ret 0x2b48;
0x0007aa02: adc [rax+1], cl; ret 0x2b48;
0x0007aacc: add eax, 0x143477; mov esi, 0xffffffff; mov rdi, [rax]; mov rax, [rsp+8]; call qword ptr [rax+0x18];
0x0007aace: xor al, 0x14; add [rsi-1], bh; mov rdi, [rax]; mov rax, [rsp+8]; call qword ptr [rax+0x18];
0x0007aacf: adc al, 0; mov esi, 0xffffffff; mov rdi, [rax]; mov rax, [rsp+8]; call qword ptr [rax+0x18];
0x0007ab43: push 0x45fffffa; xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x0007abbb: add [rax-0x80], al; std; add [rsi+rbp-0x77], esi; ret 0xc085;
0x0007abbe: std; add [rsi+rbp-0x77], esi; ret 0xc085;
0x0007abbf: add [rsi+rbp-0x77], esi; ret 0xc085;
0x0007ac52: add [rbp+0x21], dh; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret;
0x0007ad3c: fmul st, dword ptr [rdi]; cmp ebp, 6; add [rax], al; lea rsi, [rsp+0x30]; mov rdi, r15; call qword ptr [r14+0x90];
0x0007ad3e: cmp ebp, 6; add [rax], al; lea rsi, [rsp+0x30]; mov rdi, r15; call qword ptr [r14+0x90];
0x0007ad41: add [rax], al; lea rsi, [rsp+0x30]; mov rdi, r15; call qword ptr [r14+0x90];
0x0007ad43: lea rsi, [rsp+0x30]; mov rdi, r15; call qword ptr [r14+0x90];
0x0007ad44: lea esi, [rsp+0x30]; mov rdi, r15; call qword ptr [r14+0x90];
0x0007ad46: and al, 0x30; mov rdi, r15; call qword ptr [r14+0x90];
0x0007ad47: xor [rcx+rcx*4-1], cl; call qword ptr [r14+0x90];
0x0007ad48: mov rdi, r15; call qword ptr [r14+0x90];
0x0007ad49: mov edi, edi; call qword ptr [r14+0x90];
0x0007ad4b: call qword ptr [r14+0x90];
0x0007ad4c: call qword ptr [rsi+0x90];
0x0007ae0e: xchg [rip+0x48000006], cl; mov [rsp+0x10], ecx; xor edx, edx; mov rdi, r15; call qword ptr [r14+0x80];
0x0007ae0f: or eax, 0x48000006; mov [rsp+0x10], ecx; xor edx, edx; mov rdi, r15; call qword ptr [r14+0x80];
0x0007ae11: add [rax], al; mov [rsp+0x10], rcx; xor edx, edx; mov rdi, r15; call qword ptr [r14+0x80];
0x0007ae12: add [rax-0x77], cl; and al, 0x10; xor edx, edx; mov rdi, r15; call qword ptr [r14+0x80];
0x0007ae13: mov [rsp+0x10], rcx; xor edx, edx; mov rdi, r15; call qword ptr [r14+0x80];
0x0007ae14: mov [rsp+0x10], ecx; xor edx, edx; mov rdi, r15; call qword ptr [r14+0x80];
0x0007ae16: and al, 0x10; xor edx, edx; mov rdi, r15; call qword ptr [r14+0x80];
0x0007ae17: adc [rcx], dh; ror byte ptr [rcx+rcx*4-1], cl; call qword ptr [r14+0x80];
0x0007ae18: xor edx, edx; mov rdi, r15; call qword ptr [r14+0x80];
0x0007ae19: ror byte ptr [rcx+rcx*4-1], cl; call qword ptr [r14+0x80];
0x0007ae3b: add al, 0; add [rcx-0x75], cl; xchg eax, ebx; add [rax], al; add [rax-0x77], cl; ret 0x294c;
0x0007ae3d: add [rcx-0x75], cl; xchg eax, ebx; add [rax], al; add [rax-0x77], cl; ret 0x294c;
0x0007ae40: xchg eax, ebx; add [rax], al; add [rax-0x77], cl; ret 0x294c;
0x0007ae62: cmp [rbp+0x490775ff], al; mov edx, [rdi+0x40]; sub rdx, rsi; mov [rsp+8], rcx; mov rdi, r15; call rax;
0x0007ae64: push qword ptr [rbp+7]; mov rdx, [r15+0x40]; sub rdx, rsi; mov [rsp+8], rcx; mov rdi, r15; call rax;
0x0007ae67: mov rdx, [r15+0x40]; sub rdx, rsi; mov [rsp+8], rcx; mov rdi, r15; call rax;
0x0007ae68: mov edx, [rdi+0x40]; sub rdx, rsi; mov [rsp+8], rcx; mov rdi, r15; call rax;
0x0007ae69: push rdi; sub rdx, rsi; mov [rsp+8], rcx; mov rdi, r15; call rax;
0x0007ae6b: sub rdx, rsi; mov [rsp+8], rcx; mov rdi, r15; call rax;
0x0007ae6c: sub edx, esi; mov [rsp+8], rcx; mov rdi, r15; call rax;
0x0007ae6e: mov [rsp+8], rcx; mov rdi, r15; call rax;
0x0007ae6f: mov [rsp+8], ecx; mov rdi, r15; call rax;
0x0007ae71: and al, 8; mov rdi, r15; call rax;
0x0007ae72: or [rcx+rcx*4-1], cl; call rax;
0x0007ae73: mov rdi, r15; call rax;
0x0007ae74: mov edi, edi; call rax;
0x0007ae9c: or [rcx-0x77], cl; sbb [r8+1], r9b; ret 0x148;
0x0007ae9f: sbb [r8+1], r9b; ret 0x148;
0x0007aea0: sbb [rax+1], cl; ret 0x148;
0x0007afc0: or [rax+0x2b], cl; adc [rax-0x3f], ecx; cli; add cl, [rax+0xf]; scasd [rdi]; ret 0x2948;
0x0007afc3: adc [rax-0x3f], ecx; cli; add cl, [rax+0xf]; scasd [rdi]; ret 0x2948;
0x0007afc6: cli; add cl, [rax+0xf]; scasd [rdi]; ret 0x2948;
0x0007afc7: add cl, [rax+0xf]; scasd [rdi]; ret 0x2948;
0x0007afca: scasd [rdi]; ret 0x2948;
0x0007b029: add dword ptr [rdx], 3; add [rax], al; mov edx, r12d; mov rsi, rbp; mov rdi, r15; call qword ptr [r14+0x80];
0x0007b02a: add al, [rbx]; add [rax], al; mov edx, r12d; mov rsi, rbp; mov rdi, r15; call qword ptr [r14+0x80];
0x0007b02b: add eax, [rax]; add [rcx+rcx*4-0x1e], al; mov rsi, rbp; mov rdi, r15; call qword ptr [r14+0x80];
0x0007b02c: add [rax], al; mov edx, r12d; mov rsi, rbp; mov rdi, r15; call qword ptr [r14+0x80];
0x0007b02d: add [rcx+rcx*4-0x1e], al; mov rsi, rbp; mov rdi, r15; call qword ptr [r14+0x80];
0x0007b02e: mov edx, r12d; mov rsi, rbp; mov rdi, r15; call qword ptr [r14+0x80];
0x0007b02f: mov edx, esp; mov rsi, rbp; mov rdi, r15; call qword ptr [r14+0x80];
0x0007b031: mov rsi, rbp; mov rdi, r15; call qword ptr [r14+0x80];
0x0007b032: mov esi, ebp; mov rdi, r15; call qword ptr [r14+0x80];
0x0007b033: out dx, al; mov rdi, r15; call qword ptr [r14+0x80];
0x0007b034: mov rdi, r15; call qword ptr [r14+0x80];
0x0007b035: mov edi, edi; call qword ptr [r14+0x80];
0x0007b037: call qword ptr [r14+0x80];
0x0007b038: call qword ptr [rsi+0x80];
0x0007b10a: enter 0x860f, 0xf1; add eax, [rax]; add [rcx], dh; idiv byte ptr [rdx+2]; mov rdi, r15; call qword ptr [r13+0x80];
0x0007b10c: xchg cl, dh; add eax, [rax]; add [rcx], dh; idiv byte ptr [rdx+2]; mov rdi, r15; call qword ptr [r13+0x80];
0x0007b10d: int1; add eax, [rax]; add [rcx], dh; idiv byte ptr [rdx+2]; mov rdi, r15; call qword ptr [r13+0x80];
0x0007b10e: add eax, [rax]; add [rcx], dh; idiv byte ptr [rdx+2]; mov rdi, r15; call qword ptr [r13+0x80];
0x0007b10f: add [rax], al; xor esi, esi; mov edx, 2; mov rdi, r15; call qword ptr [r13+0x80];
0x0007b110: add [rcx], dh; idiv byte ptr [rdx+2]; mov rdi, r15; call qword ptr [r13+0x80];
0x0007b111: xor esi, esi; mov edx, 2; mov rdi, r15; call qword ptr [r13+0x80];
0x0007b112: idiv byte ptr [rdx+2]; mov rdi, r15; call qword ptr [r13+0x80];
0x0007b113: mov edx, 2; mov rdi, r15; call qword ptr [r13+0x80];
0x0007b114: add al, [rax]; add [rax], al; mov rdi, r15; call qword ptr [r13+0x80];
0x0007b115: add [rax], al; add [rcx+rcx*4-1], cl; call qword ptr [r13+0x80];
0x0007b116: add [rax], al; mov rdi, r15; call qword ptr [r13+0x80];
0x0007b117: add [rcx+rcx*4-1], cl; call qword ptr [r13+0x80];
0x0007b118: mov rdi, r15; call qword ptr [r13+0x80];
0x0007b119: mov edi, edi; call qword ptr [r13+0x80];
0x0007b11b: call qword ptr [r13+0x80];
0x0007b194: clc; add cl, [rax+0xf]; scasd [rdi]; ret;
0x0007b298: adc cl, ch; sar esi, 0xff; jmp qword ptr [rsi-0x70];
0x0007b29a: sar esi, 0xff; jmp qword ptr [rsi-0x70];
0x0007b2cb: or [rcx-0x75], cl; sub [r13-0x7b], r8b; shl byte ptr [rbx+rbp*2+0x49], 0x2b; and [r8+1], r9b; ret;
0x0007b2ce: sub [r13-0x7b], r8b; shl byte ptr [rbx+rbp*2+0x49], 0x2b; and [r8+1], r9b; ret;
0x0007b2cf: sub [rbp-0x7b], al; shl byte ptr [rbx+rbp*2+0x49], 0x2b; and [r8+1], r9b; ret;
0x0007b2d2: shl byte ptr [rbx+rbp*2+0x49], 0x2b; and [r8+1], r9b; ret;
0x0007b2d4: imul ecx, [rcx+0x2b], 0x47; and [rax+1], cl; ret;
0x0007b2d7: and [r8+1], r9b; ret;
0x0007b2d8: and [rax+1], cl; ret;
0x0007b308: enter 0x860f, 0xfd; add [rax], eax; add [rcx], dh; idiv byte ptr [rdx+1]; mov rdi, r15; call qword ptr [rbp+0x80];
0x0007b30a: xchg ch, bh; add [rax], eax; add [rcx], dh; idiv byte ptr [rdx+1]; mov rdi, r15; call qword ptr [rbp+0x80];
0x0007b30b: std; add [rax], eax; add [rcx], dh; idiv byte ptr [rdx+1]; mov rdi, r15; call qword ptr [rbp+0x80];
0x0007b30c: add [rax], eax; add [rcx], dh; idiv byte ptr [rdx+1]; mov rdi, r15; call qword ptr [rbp+0x80];
0x0007b30d: add [rax], al; xor esi, esi; mov edx, 1; mov rdi, r15; call qword ptr [rbp+0x80];
0x0007b30e: add [rcx], dh; idiv byte ptr [rdx+1]; mov rdi, r15; call qword ptr [rbp+0x80];
0x0007b30f: xor esi, esi; mov edx, 1; mov rdi, r15; call qword ptr [rbp+0x80];
0x0007b310: idiv byte ptr [rdx+1]; mov rdi, r15; call qword ptr [rbp+0x80];
0x0007b311: mov edx, 1; mov rdi, r15; call qword ptr [rbp+0x80];
0x0007b312: add [rax], eax; add [rax], al; mov rdi, r15; call qword ptr [rbp+0x80];
0x0007b313: add [rax], al; add [rcx+rcx*4-1], cl; call qword ptr [rbp+0x80];
0x0007b314: add [rax], al; mov rdi, r15; call qword ptr [rbp+0x80];
0x0007b315: add [rcx+rcx*4-1], cl; call qword ptr [rbp+0x80];
0x0007b316: mov rdi, r15; call qword ptr [rbp+0x80];
0x0007b317: mov edi, edi; call qword ptr [rbp+0x80];
0x0007b33f: add [rcx+0x2b], cl; adc [r8+1], r9b; ret;
0x0007b342: adc [r8+1], r9b; ret;
0x0007b343: adc [rax+1], cl; ret;
0x0007b3fe: ror dword ptr [rax+0x39], 1; enter 0x860f, 0x20; add [rax], eax; add [rcx], dh; ror byte ptr [rcx+rcx*4-1], cl; call qword ptr [rbx+0x80];
0x0007b401: enter 0x860f, 0x20; add [rax], eax; add [rcx], dh; ror byte ptr [rcx+rcx*4-1], cl; call qword ptr [rbx+0x80];
0x0007b403: xchg [rax], ah; add [rax], eax; add [rcx], dh; ror byte ptr [rcx+rcx*4-1], cl; call qword ptr [rbx+0x80];
0x0007b404: and [rcx], al; add [rax], al; xor edx, edx; mov rdi, r15; call qword ptr [rbx+0x80];
0x0007b405: add [rax], eax; add [rcx], dh; ror byte ptr [rcx+rcx*4-1], cl; call qword ptr [rbx+0x80];
0x0007b406: add [rax], al; xor edx, edx; mov rdi, r15; call qword ptr [rbx+0x80];
0x0007b407: add [rcx], dh; ror byte ptr [rcx+rcx*4-1], cl; call qword ptr [rbx+0x80];
0x0007b408: xor edx, edx; mov rdi, r15; call qword ptr [rbx+0x80];
0x0007b409: ror byte ptr [rcx+rcx*4-1], cl; call qword ptr [rbx+0x80];
0x0007b40a: mov rdi, r15; call qword ptr [rbx+0x80];
0x0007b40b: mov edi, edi; call qword ptr [rbx+0x80];
0x0007b4f9: ror byte ptr [rax-0x77], 1; ret;
0x0007b52a: cmp al, [rax]; add [rcx-0x75], cl; mov bh, 0x90; add [rax], al; add cl, ch; iretd;
0x0007b52c: add [rcx-0x75], cl; mov bh, 0x90; add [rax], al; add cl, ch; iretd;
0x0007b52f: mov bh, 0x90; add [rax], al; add cl, ch; iretd;
0x0007b530: nop; add [rax], al; add cl, ch; iretd;
0x0007b54e: mov rax, [rbp+0xa0]; mov rdi, rbp; pop rbp; mov rax, [rax+0xe0]; mov rax, [rax+0x20]; jmp rax;
0x0007b54f: mov eax, [rbp+0xa0]; mov rdi, rbp; pop rbp; mov rax, [rax+0xe0]; mov rax, [rax+0x20]; jmp rax;
0x0007b550: test [rax+0x48000000], esp; mov edi, ebp; pop rbp; mov rax, [rax+0xe0]; mov rax, [rax+0x20]; jmp rax;
0x0007b551: mov al, [0x485def8948000000]; mov eax, [rax+0xe0]; mov rax, [rax+0x20]; jmp rax;
0x0007b553: add [rax], al; mov rdi, rbp; pop rbp; mov rax, [rax+0xe0]; mov rax, [rax+0x20]; jmp rax;
0x0007b554: add [rax-0x77], cl; out dx, eax; pop rbp; mov rax, [rax+0xe0]; mov rax, [rax+0x20]; jmp rax;
0x0007b555: mov rdi, rbp; pop rbp; mov rax, [rax+0xe0]; mov rax, [rax+0x20]; jmp rax;
0x0007b556: mov edi, ebp; pop rbp; mov rax, [rax+0xe0]; mov rax, [rax+0x20]; jmp rax;
0x0007b557: out dx, eax; pop rbp; mov rax, [rax+0xe0]; mov rax, [rax+0x20]; jmp rax;
0x0007b558: pop rbp; mov rax, [rax+0xe0]; mov rax, [rax+0x20]; jmp rax;
0x0007b559: mov rax, [rax+0xe0]; mov rax, [rax+0x20]; jmp rax;
0x0007b55a: mov eax, [rax+0xe0]; mov rax, [rax+0x20]; jmp rax;
0x0007b55b: and al, 0; add [rax], al; mov rax, [rax+0x20]; jmp rax;
0x0007b55e: add [rax], al; mov rax, [rax+0x20]; jmp rax;
0x0007b560: mov rax, [rax+0x20]; jmp rax;
0x0007b561: mov eax, [rax+0x20]; jmp rax;
0x0007b566: nop [rax+rax]; mov eax, 0xffffffff; pop rbp; ret;
0x0007b567: nop [rax+rax]; mov eax, 0xffffffff; pop rbp; ret;
0x0007b568: nop [rax+rax]; mov eax, 0xffffffff; pop rbp; ret;
0x0007b56a: test [rax], al; add [rax], al; add [rax], al; mov eax, 0xffffffff; pop rbp; ret;
0x0007b56b: add [rax], al; add [rax], al; add [rax-1], bh; pop rbp; ret;
0x0007b56c: add [rax], al; add [rax], al; mov eax, 0xffffffff; pop rbp; ret;
0x0007b56d: add [rax], al; add [rax-1], bh; pop rbp; ret;
0x0007b56e: add [rax], al; mov eax, 0xffffffff; pop rbp; ret;
0x0007b56f: add [rax-1], bh; pop rbp; ret;
0x0007b9a8: push rbp; add dh, dh; ret 0x7402;
0x0007b9dd: mov r12d, 0xffffffff; add rsp, 8; mov eax, r12d; pop rbp; pop r12; ret;
0x0007b9de: mov esp, 0xffffffff; add rsp, 8; mov eax, r12d; pop rbp; pop r12; ret;
0x0007b9f8: or dh, [rsp+rsi*4+0x48]; add esp, 8; mov eax, r12d; pop rbp; pop r12; ret;
0x0007b9fa: mov ah, 0x48; add esp, 8; mov eax, r12d; pop rbp; pop r12; ret;
0x0007ba22: mov dword ptr fs:[rax], 9; add rsp, 8; mov eax, r12d; pop rbp; pop r12; ret;
0x0007ba23: mov dword ptr [rax], 9; add rsp, 8; mov eax, r12d; pop rbp; pop r12; ret;
0x0007bc58: ror dword ptr [rax+0x39], 1; enter 0x860f, 0xce; add [rax], al; add [rdx+1], bh; mov rdi, rbx; call qword ptr [rbp+0x80];
0x0007bc5b: enter 0x860f, 0xce; add [rax], al; add [rdx+1], bh; mov rdi, rbx; call qword ptr [rbp+0x80];
0x0007bc5d: xchg dh, cl; add [rax], al; add [rdx+1], bh; mov rdi, rbx; call qword ptr [rbp+0x80];
0x0007bc5f: add [rax], al; add [rdx+1], bh; mov rdi, rbx; call qword ptr [rbp+0x80];
0x0007bc60: add [rax], al; mov edx, 1; mov rdi, rbx; call qword ptr [rbp+0x80];
0x0007bc61: add [rdx+1], bh; mov rdi, rbx; call qword ptr [rbp+0x80];
0x0007bc9a: sbb [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; pop r13; ret;
0x0007bcc3: sbb [rax-1], bh; pop rbx; pop rbp; pop r12; pop r13; ret;
0x0007bf09: out 0, eax; add [rax], al; add rsp, 0x38; pop rbx; pop rbp; ret;
0x0007bf0b: add [rax], al; add rsp, 0x38; pop rbx; pop rbp; ret;
0x0007c034: test ebx, edi; jmp qword ptr [rsi+0xf];
0x0007c0b0: push 0; lea rsi, [rbx+0x40]; xor r8d, r8d; mov rdi, r13; lea r9, [rsp+0x18]; call rbp;
0x0007c0b2: lea rsi, [rbx+0x40]; xor r8d, r8d; mov rdi, r13; lea r9, [rsp+0x18]; call rbp;
0x0007c0b3: lea esi, [rbx+0x40]; xor r8d, r8d; mov rdi, r13; lea r9, [rsp+0x18]; call rbp;
0x0007c19f: push 0; lea rsi, [rbx+8]; xor r8d, r8d; mov rdi, r13; lea r9, [rsp+0x18]; call rbp;
0x0007c1a1: lea rsi, [rbx+8]; xor r8d, r8d; mov rdi, r13; lea r9, [rsp+0x18]; call rbp;
0x0007c1a2: lea esi, [rbx+8]; xor r8d, r8d; mov rdi, r13; lea r9, [rsp+0x18]; call rbp;
0x0007c1a4: or [rbp+0x31], al; ror byte ptr [rcx+rcx*4-0x11], 0x4c; lea ecx, [rsp+0x18]; call rbp;
0x0007c1a5: xor r8d, r8d; mov rdi, r13; lea r9, [rsp+0x18]; call rbp;
0x0007c1a6: xor eax, eax; mov rdi, r13; lea r9, [rsp+0x18]; call rbp;
0x0007c1a7: ror byte ptr [rcx+rcx*4-0x11], 0x4c; lea ecx, [rsp+0x18]; call rbp;
0x0007c1a8: mov rdi, r13; lea r9, [rsp+0x18]; call rbp;
0x0007c1a9: mov edi, ebp; lea r9, [rsp+0x18]; call rbp;
0x0007c1aa: out dx, eax; lea r9, [rsp+0x18]; call rbp;
0x0007c1ab: lea r9, [rsp+0x18]; call rbp;
0x0007c1ac: lea ecx, [rsp+0x18]; call rbp;
0x0007c1ae: and al, 0x18; call rbp;
0x0007c22a: mov eax, [rdx+0x4c]; cmp [rdx+0x48], eax; cmovne eax, ecx; ret;
0x0007c22c: cmp [rdx+0x48], r8; cmovne eax, ecx; ret;
0x0007c22d: cmp [rdx+0x48], eax; cmovne eax, ecx; ret;
0x0007c22f: cmovne rax, rcx; ret;
0x0007c230: cmovne eax, ecx; ret;
0x0007c2b9: or [rdx], ch; lea r9, [rbp-0x40]; xor r8d, r8d; mov rcx, r15; mov rdi, r14; call r12;
0x0007c2ba: push 0; lea r9, [rbp-0x40]; xor r8d, r8d; mov rcx, r15; mov rdi, r14; call r12;
0x0007c2bb: add [rbp+rcx*4+0x4d], cl; rol byte ptr [rbp+0x31], 0xc0; mov rcx, r15; mov rdi, r14; call r12;
0x0007c2bc: lea r9, [rbp-0x40]; xor r8d, r8d; mov rcx, r15; mov rdi, r14; call r12;
0x0007c2bd: lea ecx, [rbp-0x40]; xor r8d, r8d; mov rcx, r15; mov rdi, r14; call r12;
0x0007c2be: rol byte ptr [r13+0x31], 0xc0; mov rcx, r15; mov rdi, r14; call r12;
0x0007c2bf: rol byte ptr [rbp+0x31], 0xc0; mov rcx, r15; mov rdi, r14; call r12;
0x0007c2c0: xor r8d, r8d; mov rcx, r15; mov rdi, r14; call r12;
0x0007c2c1: xor eax, eax; mov rcx, r15; mov rdi, r14; call r12;
0x0007c2c2: ror byte ptr [rcx+rcx*4-7], 0x4c; mov edi, esi; call r12;
0x0007c2c3: mov rcx, r15; mov rdi, r14; call r12;
0x0007c2c4: mov ecx, edi; mov rdi, r14; call r12;
0x0007c2c5: stc; mov rdi, r14; call r12;
0x0007c2c6: mov rdi, r14; call r12;
0x0007c2c7: mov edi, esi; call r12;
0x0007c4ce: sub rax, rdx; sar rax, 2; mov [rcx], rax; xor eax, eax; pop rbx; ret;
0x0007c4cf: sub eax, edx; sar rax, 2; mov [rcx], rax; xor eax, eax; pop rbx; ret;
0x0007c4d1: sar rax, 2; mov [rcx], rax; xor eax, eax; pop rbx; ret;
0x0007c4d2: sar eax, 2; mov [rcx], rax; xor eax, eax; pop rbx; ret;
0x0007c6e9: shl byte ptr [rbp+0x44], cl; sub dword ptr [rdi], 1; add rsp, 8; pop rbx; pop rbp; ret;
0x0007c6fd: add [rax], al; add [rbx+0x1789cfe2], al; add rsp, 8; pop rbx; pop rbp; ret;
0x0007c6ff: add [rbx+0x1789cfe2], al; add rsp, 8; pop rbx; pop rbp; ret;
0x0007c700: and edx, 0xffffffcf; mov [rdi], edx; add rsp, 8; pop rbx; pop rbp; ret;
0x0007c703: mov [rdi], edx; add rsp, 8; pop rbx; pop rbp; ret;
0x0007c70f: add [rbx-0x1d7cfbb9], cl; iretd;
0x0007c734: add [rsi-0x32], edi; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x0007c7da: rcr byte ptr [rbx+0x5d], 0xc3; xchg ax, ax; shr edx, 4; and edx, 1; mov eax, edx; ret;
0x0007c7de: xchg ax, ax; shr edx, 4; and edx, 1; mov eax, edx; ret;
0x0007c7df: nop; shr edx, 4; and edx, 1; mov eax, edx; ret;
0x0007c7e0: shr edx, 4; and edx, 1; mov eax, edx; ret;
0x0007c8ca: rcr byte ptr [rbx+0x5d], 0xc3; xchg ax, ax; shr edx, 5; and edx, 1; mov eax, edx; ret;
0x0007c8ce: xchg ax, ax; shr edx, 5; and edx, 1; mov eax, edx; ret;
0x0007c8cf: nop; shr edx, 5; and edx, 1; mov eax, edx; ret;
0x0007c8d0: shr edx, 5; and edx, 1; mov eax, edx; ret;
0x0007c8d3: and edx, 1; mov eax, edx; ret;
0x0007c904: add [rsi-0x43], edi; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x0007c906: mov ebp, 0xbad23145; add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; syscall;
0x0007c93c: sar byte ptr [rax+1], 0xc3; mov rax, [rip+0x141529]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret;
0x0007c93e: add ebx, eax; mov rax, [rip+0x141529]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret;
0x0007c942: add eax, 0x141529; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret;
0x0007c943: sub [rip-0x389bffec], edx; add [rcx], cl; add [rax], al; add [rax-1], bh; ret;
0x0007c944: adc eax, 0xc7640014; add [rcx], cl; add [rax], al; add [rax-1], bh; ret;
0x0007c945: adc al, 0; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret;
0x0007cb45: out 1, eax; add [rax], al; mov rdi, rbx; call qword ptr [rbp+0x60];
0x0007cd32: and al, [rax]; add cl, ch; paddd mm7, mm7; jmp qword ptr [rsi+0xf];
0x0007cd34: add cl, ch; paddd mm7, mm7; jmp qword ptr [rsi+0xf];
0x0007cd36: paddd mm7, mm7; jmp qword ptr [rsi+0xf];
0x0007cd97: or [rcx], cl; add [rcx-0x77], cl; shr cl, 0xa4; xchg edx, eax; cli; jmp qword ptr [rsi+0x2e];
0x0007cd99: add [rcx-0x77], cl; shr cl, 0xa4; xchg edx, eax; cli; jmp qword ptr [rsi+0x2e];
0x0007cd9c: shr cl, 0xa4; xchg edx, eax; cli; jmp qword ptr [rsi+0x2e];
0x0007cd9e: movsb [rdi], [rsi]; xchg edx, eax; cli; jmp qword ptr [rsi+0x2e];
0x0007cd9f: xchg edx, eax; cli; jmp qword ptr [rsi+0x2e];
0x0007cea8: add [rdi], cl; add eax, 0x8949afeb; shr cl, 0xe7; xchg ecx, eax; cli; jmp qword ptr [rsi+0x2e];
0x0007ceaa: add eax, 0x8949afeb; shr cl, 0xe7; xchg ecx, eax; cli; jmp qword ptr [rsi+0x2e];
0x0007ceaf: shr cl, 0xe7; xchg ecx, eax; cli; jmp qword ptr [rsi+0x2e];
0x0007ceb1: out 0x91, eax; cli; jmp qword ptr [rsi+0x2e];
0x0007ceb2: xchg ecx, eax; cli; jmp qword ptr [rsi+0x2e];
0x0007cf82: movzx r8d, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; mov eax, r8d; ret;
0x0007cf83: movzx eax, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; mov eax, r8d; ret;
0x0007cf84: mov dh, 0; add rsp, 8; pop rbx; pop rbp; mov eax, r8d; ret;
0x0007cf86: add rsp, 8; pop rbx; pop rbp; mov eax, r8d; ret;
0x0007cf87: add esp, 8; pop rbx; pop rbp; mov eax, r8d; ret;
0x0007cf89: or [rbx+0x5d], bl; mov eax, r8d; ret;
0x0007cfd4: add [rsi-0x75], edi; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x0007cfd6: mov eax, [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; syscall;
0x0007d0bc: add byte ptr [rax], 0; add [rbx+0x445b012f], al; mov eax, eax; pop rbp; pop r12; ret;
0x0007d0bd: add [rax], al; add [rbx+0x445b012f], al; mov eax, eax; pop rbp; pop r12; ret;
0x0007d0bf: add [rbx+0x445b012f], al; mov eax, eax; pop rbp; pop r12; ret;
0x0007d0e0: push rbp; or [rdi+rcx-0x4a], al; add [rbx+0x5d], bl; mov eax, r8d; pop r12; ret;
0x0007d0e1: or [rdi+rcx-0x4a], al; add [rbx+0x5d], bl; mov eax, r8d; pop r12; ret;
0x0007d0e2: movzx r8d, byte ptr [rax]; pop rbx; pop rbp; mov eax, r8d; pop r12; ret;
0x0007d0e3: movzx eax, byte ptr [rax]; pop rbx; pop rbp; mov eax, r8d; pop r12; ret;
0x0007d0e4: mov dh, 0; pop rbx; pop rbp; mov eax, r8d; pop r12; ret;
0x0007d0e5: add [rbx+0x5d], bl; mov eax, r8d; pop r12; ret;
0x0007d0e6: pop rbx; pop rbp; mov eax, r8d; pop r12; ret;
0x0007d0e7: pop rbp; mov eax, r8d; pop r12; ret;
0x0007d0e8: mov eax, r8d; pop r12; ret;
0x0007d13e: call qword ptr [rax-0x77cf879];
0x0007d193: mov rax, [rbx+0x28]; sub rax, rdx; mov [rcx], rax; xor eax, eax; pop rbx; ret;
0x0007d194: mov eax, [rbx+0x28]; sub rax, rdx; mov [rcx], rax; xor eax, eax; pop rbx; ret;
0x0007d197: sub rax, rdx; mov [rcx], rax; xor eax, eax; pop rbx; ret;
0x0007d198: sub eax, edx; mov [rcx], rax; xor eax, eax; pop rbx; ret;
0x0007d19a: mov [rcx], rax; xor eax, eax; pop rbx; ret;
0x0007d19b: mov [rcx], eax; xor eax, eax; pop rbx; ret;
0x0007d379: add [rax-0x75], ecx; sub [r15+rcx-0x4a], r8b; ret;
0x0007d37c: sub [r15+rcx-0x4a], r8b; ret;
0x0007d37d: sub [rdi+rcx-0x4a], al; ret;
0x0007d3c1: sub dword ptr [rdi], 1; pop rbx; mov eax, r8d; pop rbp; pop r12; ret;
0x0007d3c3: add [rbx+0x44], ebx; mov eax, eax; pop rbp; pop r12; ret;
0x0007d3e5: sub [rax-0x78], al; cmp [rcx+rcx*4-0x40], al; pop rbx; pop rbp; pop r12; ret;
0x0007d3e6: mov [rax], dil; mov eax, r8d; pop rbx; pop rbp; pop r12; ret;
0x0007d3e7: mov [rax], bh; mov eax, r8d; pop rbx; pop rbp; pop r12; ret;
0x0007d3e8: cmp [rcx+rcx*4-0x40], al; pop rbx; pop rbp; pop r12; ret;
0x0007d3e9: mov eax, r8d; pop rbx; pop rbp; pop r12; ret;
0x0007d4fe: shl byte ptr [rbp+0x27], cl; sub dword ptr [rdi], 1; add rsp, 8; pop rbx; pop rbp; ret;
0x0007d501: sub dword ptr [rdi], 1; add rsp, 8; pop rbx; pop rbp; ret;
0x0007d52c: add [rsi-0x2b], edi; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x0007d718: add [rcx-0x77], al; iretd;
0x0007d815: ror dword ptr [rax+0x39], 1; enter 0x5576, 0x31; test byte ptr [rax-0x77], 0xef; call qword ptr [r13+0x10];
0x0007d818: enter 0x5576, 0x31; test byte ptr [rax-0x77], 0xef; call qword ptr [r13+0x10];
0x0007d81a: push rbp; xor esi, esi; mov rdi, rbp; call qword ptr [r13+0x10];
0x0007d81b: xor esi, esi; mov rdi, rbp; call qword ptr [r13+0x10];
0x0007d81c: test byte ptr [rax-0x77], 0xef; call qword ptr [r13+0x10];
0x0007d81d: mov rdi, rbp; call qword ptr [r13+0x10];
0x0007d81e: mov edi, ebp; call qword ptr [r13+0x10];
0x0007d81f: out dx, eax; call qword ptr [r13+0x10];
0x0007d820: call qword ptr [r13+0x10];
0x0007d821: call qword ptr [rbp+0x10];
0x0007d8b1: cmp cl, ch; stc; mov cl, 0xfd; jmp qword ptr [rsi+0xf];
0x0007d8b3: stc; mov cl, 0xfd; jmp qword ptr [rsi+0xf];
0x0007d8b4: mov cl, 0xfd; jmp qword ptr [rsi+0xf];
0x0007d9bd: test byte ptr [rcx+rcx*4-0x11], 0xe8; stosb [rdi]; ret 0xfffe;
0x0007d9c2: stosb [rdi]; ret 0xfffe;
0x0007daa0: insd [rdi], dx; sbb [rbx+0x5d], bl; pop r12; pop r13; pop r14; ret;
0x0007daa1: sbb [rbx+0x5d], bl; pop r12; pop r13; pop r14; ret;
0x0007db0d: adc [r8-0x75], cl; push rbx; and [rax-0x77], cl; and [r8-0x75], r9b; sbb [r8+0x29], cl; ret 0x8948;
0x0007db0e: adc [rax-0x75], cl; push rbx; and [rax-0x77], cl; and [r8-0x75], r9b; sbb [r8+0x29], cl; ret 0x8948;
0x0007db11: push rbx; and [rax-0x77], cl; and [r8-0x75], r9b; sbb [r8+0x29], cl; ret 0x8948;
0x0007db12: and [rax-0x77], cl; and [r8-0x75], r9b; sbb [r8+0x29], cl; ret 0x8948;
0x0007db15: and [r8-0x75], r9b; sbb [r8+0x29], cl; ret 0x8948;
0x0007db16: and [rax-0x75], cl; sbb [r8+0x29], cl; ret 0x8948;
0x0007db19: sbb [r8+0x29], cl; ret 0x8948;
0x0007db1a: sbb [rax+0x29], cl; ret 0x8948;
0x0007db2a: xor [r8-0x77], r9b; sbb [r9+r9*4-0x20], al; pop rbx; pop rbp; pop r12; ret;
0x0007db2b: xor [rax-0x77], cl; sbb [r9+r9*4-0x20], al; pop rbx; pop rbp; pop r12; ret;
0x0007db2c: mov [rbx+0x18], rax; mov eax, r12d; pop rbx; pop rbp; pop r12; ret;
0x0007db2d: mov [rbx+0x18], eax; mov eax, r12d; pop rbx; pop rbp; pop r12; ret;
0x0007db2e: sbb [r9+r9*4-0x20], al; pop rbx; pop rbp; pop r12; ret;
0x0007db2f: sbb [rcx+rcx*4-0x20], al; pop rbx; pop rbp; pop r12; ret;
0x0007db6e: rcl dword ptr [rax], cl; add al, ch; stosb [rdi]; push 0xfffffffffffffffb; jmp qword ptr [rsi+0x2e];
0x0007db70: add al, ch; stosb [rdi]; push 0xfffffffffffffffb; jmp qword ptr [rsi+0x2e];
0x0007db72: stosb [rdi]; push 0xfffffffffffffffb; jmp qword ptr [rsi+0x2e];
0x0007db73: push 0xfffffffffffffffb; jmp qword ptr [rsi+0x2e];
0x0007dd39: rcl byte ptr [rax], cl; add al, ch; fild st, qword ptr [rax-5]; jmp qword ptr [rsi+0x66];
0x0007dd3b: add al, ch; fild st, qword ptr [rax-5]; jmp qword ptr [rsi+0x66];
0x0007dd3d: fild st, qword ptr [rax-5]; jmp qword ptr [rsi+0x66];
0x0007df14: add [rsi-0x3b], edi; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x0007dff6: push qword ptr [rax+rcx*2+0x48]; add esp, 8; mov rax, r8; pop rbx; pop rbp; ret;
0x0007e01b: add [rax], al; add [rbx+0x7501046f], al; iretd;
0x0007e01d: add [rbx+0x7501046f], al; iretd;
0x0007e04e: jmp qword ptr [rbx+rcx*4+0x10];
0x0007e0ac: cli; jmp qword ptr [rsi-0x70];
0x0007e147: add [rax], al; mov rdi, rbx; call qword ptr [rbp+0x60];
0x0007e149: mov rdi, rbx; call qword ptr [rbp+0x60];
0x0007e14a: mov edi, ebx; call qword ptr [rbp+0x60];
0x0007e395: add [rbp+0x48167ec0], al; mov edx, [rdi+0xa0]; mov rax, [rdx+0x38]; sub rax, [rdx+0x30]; sar rax, 2; ret;
0x0007e397: sar byte ptr [rsi+0x16], 0x48; mov edx, [rdi+0xa0]; mov rax, [rdx+0x38]; sub rax, [rdx+0x30]; sar rax, 2; ret;
0x0007e39a: mov rdx, [rdi+0xa0]; mov rax, [rdx+0x38]; sub rax, [rdx+0x30]; sar rax, 2; ret;
0x0007e39b: mov edx, [rdi+0xa0]; mov rax, [rdx+0x38]; sub rax, [rdx+0x30]; sar rax, 2; ret;
0x0007e39c: xchg edi, eax; mov al, [0x4838428b48000000]; sub eax, [rdx+0x30]; sar rax, 2; ret;
0x0007e39d: mov al, [0x4838428b48000000]; sub eax, [rdx+0x30]; sar rax, 2; ret;
0x0007e39f: add [rax], al; mov rax, [rdx+0x38]; sub rax, [rdx+0x30]; sar rax, 2; ret;
0x0007e3a1: mov rax, [rdx+0x38]; sub rax, [rdx+0x30]; sar rax, 2; ret;
0x0007e3a2: mov eax, [rdx+0x38]; sub rax, [rdx+0x30]; sar rax, 2; ret;
0x0007e3a5: sub rax, [rdx+0x30]; sar rax, 2; ret;
0x0007e3a6: sub eax, [rdx+0x30]; sar rax, 2; ret;
0x0007e3ab: clc; add al, bl; xchg ax, ax; mov rax, [rdi+0x40]; sub rax, [rdi+0x38]; ret;
0x0007e3ac: add al, bl; xchg ax, ax; mov rax, [rdi+0x40]; sub rax, [rdi+0x38]; ret;
0x0007e3ae: xchg ax, ax; mov rax, [rdi+0x40]; sub rax, [rdi+0x38]; ret;
0x0007e3af: nop; mov rax, [rdi+0x40]; sub rax, [rdi+0x38]; ret;
0x0007e3b0: mov rax, [rdi+0x40]; sub rax, [rdi+0x38]; ret;
0x0007e3b1: mov eax, [rdi+0x40]; sub rax, [rdi+0x38]; ret;
0x0007e3b4: sub rax, [rdi+0x38]; ret;
0x0007e3b5: sub eax, [rdi+0x38]; ret;
0x0007e3cf: add [rbp+0xc], dh; xor r8d, r8d; cmp qword ptr [rdi+0x18], 0; setne r8b; mov eax, r8d; ret;
0x0007e3d1: or al, 0x45; xor eax, eax; cmp qword ptr [rdi+0x18], 0; setne r8b; mov eax, r8d; ret;
0x0007e3d2: xor r8d, r8d; cmp qword ptr [rdi+0x18], 0; setne r8b; mov eax, r8d; ret;
0x0007e3d3: xor eax, eax; cmp qword ptr [rdi+0x18], 0; setne r8b; mov eax, r8d; ret;
0x0007e3d4: ror byte ptr [rax-0x7d], 0x7f; sbb [rax], al; setne r8b; mov eax, r8d; ret;
0x0007e3d5: cmp qword ptr [rdi+0x18], 0; setne r8b; mov eax, r8d; ret;
0x0007e3d6: cmp dword ptr [rdi+0x18], 0; setne r8b; mov eax, r8d; ret;
0x0007e3d8: sbb [rax], al; setne r8b; mov eax, r8d; ret;
0x0007e3da: setne r8b; mov eax, r8d; ret;
0x0007e3db: setne al; mov eax, r8d; ret;
0x0007e3dc: xchg ebp, eax; rol byte ptr [rcx+rcx*4-0x40], 0xc3; nop [rax+rax]; mov r8d, 1; mov eax, r8d; ret;
0x0007e3dd: rol byte ptr [rcx+rcx*4-0x40], 0xc3; nop [rax+rax]; mov r8d, 1; mov eax, r8d; ret;
0x0007e3e0: rol bl, 0x66; nop [rax+rax]; mov r8d, 1; mov eax, r8d; ret;
0x0007e3e2: nop [rax+rax]; mov r8d, 1; mov eax, r8d; ret;
0x0007e3e3: nop [rax+rax]; mov r8d, 1; mov eax, r8d; ret;
0x0007e3e5: add [rax], r8b; mov r8d, 1; mov eax, r8d; ret;
0x0007e3f0: rol bl, 0x66; nop [rax+rax]; nop [rax]; mov eax, [rdi]; and eax, 0x804; ret;
0x0007e3f2: nop [rax+rax]; nop [rax]; mov eax, [rdi]; and eax, 0x804; ret;
0x0007e3f3: nop [rax+rax]; nop [rax]; mov eax, [rdi]; and eax, 0x804; ret;
0x0007e3f4: nop [rax+rax]; nop [rax]; mov eax, [rdi]; and eax, 0x804; ret;
0x0007e3f8: add [rax], al; add [rax], al; nop [rax]; mov eax, [rdi]; and eax, 0x804; ret;
0x0007e3fa: add [rax], al; nop [rax]; mov eax, [rdi]; and eax, 0x804; ret;
0x0007e3fc: nop [rax]; mov eax, [rdi]; and eax, 0x804; ret;
0x0007e3ff: add [rbx+0x8042507], cl; add [rax], al; ret;
0x0007e400: mov eax, [rdi]; and eax, 0x804; ret;
0x0007e402: and eax, 0x804; ret;
0x0007e403: add al, 8; add [rax], al; ret;
0x0007e406: add bl, al; nop [rax+rax]; xor eax, eax; test byte ptr [rdi], 4; sete al; ret;
0x0007e408: nop [rax+rax]; xor eax, eax; test byte ptr [rdi], 4; sete al; ret;
0x0007e40c: add [rax], al; add [rax], al; xor eax, eax; test byte ptr [rdi], 4; sete al; ret;
0x0007e40e: add [rax], al; xor eax, eax; test byte ptr [rdi], 4; sete al; ret;
0x0007e410: xor eax, eax; test byte ptr [rdi], 4; sete al; ret;
0x0007e412: test byte ptr [rdi], 4; sete al; ret;
0x0007e419: nop [rax]; xor eax, eax; test byte ptr [rdi], 8; sete al; ret;
0x0007e41b: add byte ptr [rax], 0; add [rax], al; xor eax, eax; test byte ptr [rdi], 8; sete al; ret;
0x0007e41c: add [rax], al; add [rax], al; xor eax, eax; test byte ptr [rdi], 8; sete al; ret;
0x0007e41e: add [rax], al; xor eax, eax; test byte ptr [rdi], 8; sete al; ret;
0x0007e420: xor eax, eax; test byte ptr [rdi], 8; sete al; ret;
0x0007e422: test byte ptr [rdi], 8; sete al; ret;
0x0007e429: nop [rax]; mov eax, [rdi]; and eax, 0x200; ret;
0x0007e42b: add byte ptr [rax], 0; add [rax], al; mov eax, [rdi]; and eax, 0x200; ret;
0x0007e42c: add [rax], al; add [rax], al; mov eax, [rdi]; and eax, 0x200; ret;
0x0007e42d: add [rax], al; add [rbx+0x2002507], cl; add [rax], al; ret;
0x0007e42e: add [rax], al; mov eax, [rdi]; and eax, 0x200; ret;
0x0007e42f: add [rbx+0x2002507], cl; add [rax], al; ret;
0x0007e430: mov eax, [rdi]; and eax, 0x200; ret;
0x0007e460: mov rdx, [rax]; mov [rax+8], rdx; mov rdx, [rax+0x18]; mov [rax+0x20], rdx; pop rbx; ret;
0x0007e461: mov edx, [rax]; mov [rax+8], rdx; mov rdx, [rax+0x18]; mov [rax+0x20], rdx; pop rbx; ret;
0x0007e463: mov [rax+8], rdx; mov rdx, [rax+0x18]; mov [rax+0x20], rdx; pop rbx; ret;
0x0007e464: mov [rax+8], edx; mov rdx, [rax+0x18]; mov [rax+0x20], rdx; pop rbx; ret;
0x0007e467: mov rdx, [rax+0x18]; mov [rax+0x20], rdx; pop rbx; ret;
0x0007e468: mov edx, [rax+0x18]; mov [rax+0x20], rdx; pop rbx; ret;
0x0007e46b: mov [rax+0x20], rdx; pop rbx; ret;
0x0007e46c: mov [rax+0x20], edx; pop rbx; ret;
0x0007e47c: mov rax, [rbx+8]; mov [rbx+0x10], rax; mov rax, [rbx+0x20]; mov [rbx+0x28], rax; pop rbx; ret;
0x0007e47d: mov eax, [rbx+8]; mov [rbx+0x10], rax; mov rax, [rbx+0x20]; mov [rbx+0x28], rax; pop rbx; ret;
0x0007e480: mov [rbx+0x10], rax; mov rax, [rbx+0x20]; mov [rbx+0x28], rax; pop rbx; ret;
0x0007e481: mov [rbx+0x10], eax; mov rax, [rbx+0x20]; mov [rbx+0x28], rax; pop rbx; ret;
0x0007e484: mov rax, [rbx+0x20]; mov [rbx+0x28], rax; pop rbx; ret;
0x0007e485: mov eax, [rbx+0x20]; mov [rbx+0x28], rax; pop rbx; ret;
0x0007e488: mov [rbx+0x28], rax; pop rbx; ret;
0x0007e489: mov [rbx+0x28], eax; pop rbx; ret;
0x0007e4b5: add [rbp+0x48167ec0], al; mov edx, [rdi+0xa0]; mov rax, [rdx+0x20]; sub rax, [rdx+0x18]; sar rax, 2; ret;
0x0007e4b7: sar byte ptr [rsi+0x16], 0x48; mov edx, [rdi+0xa0]; mov rax, [rdx+0x20]; sub rax, [rdx+0x18]; sar rax, 2; ret;
0x0007e4ba: mov rdx, [rdi+0xa0]; mov rax, [rdx+0x20]; sub rax, [rdx+0x18]; sar rax, 2; ret;
0x0007e4bb: mov edx, [rdi+0xa0]; mov rax, [rdx+0x20]; sub rax, [rdx+0x18]; sar rax, 2; ret;
0x0007e4bc: xchg edi, eax; mov al, [0x4820428b48000000]; sub eax, [rdx+0x18]; sar rax, 2; ret;
0x0007e4bd: mov al, [0x4820428b48000000]; sub eax, [rdx+0x18]; sar rax, 2; ret;
0x0007e4bf: add [rax], al; mov rax, [rdx+0x20]; sub rax, [rdx+0x18]; sar rax, 2; ret;
0x0007e4c1: mov rax, [rdx+0x20]; sub rax, [rdx+0x18]; sar rax, 2; ret;
0x0007e4c2: mov eax, [rdx+0x20]; sub rax, [rdx+0x18]; sar rax, 2; ret;
0x0007e4c5: sub rax, [rdx+0x18]; sar rax, 2; ret;
0x0007e4c6: sub eax, [rdx+0x18]; sar rax, 2; ret;
0x0007e4c9: sar rax, 2; ret;
0x0007e4ca: sar eax, 2; ret;
0x0007e4cb: clc; add al, bl; xchg ax, ax; mov rax, [rdi+0x28]; sub rax, [rdi+0x20]; ret;
0x0007e4cc: add al, bl; xchg ax, ax; mov rax, [rdi+0x28]; sub rax, [rdi+0x20]; ret;
0x0007e4ce: xchg ax, ax; mov rax, [rdi+0x28]; sub rax, [rdi+0x20]; ret;
0x0007e4cf: nop; mov rax, [rdi+0x28]; sub rax, [rdi+0x20]; ret;
0x0007e4d0: mov rax, [rdi+0x28]; sub rax, [rdi+0x20]; ret;
0x0007e4d1: mov eax, [rdi+0x28]; sub rax, [rdi+0x20]; ret;
0x0007e4f0: adc [rcx-0x7f317f2f], cl; and ch, 0x7f; cmp esi, 2; cmovne edx, ecx; mov [rdi], edx; ret;
0x0007e4f3: or dh, 0x80; and ch, 0x7f; cmp esi, 2; cmovne edx, ecx; mov [rdi], edx; ret;
0x0007e4f5: add byte ptr [rax-0x17c801b], 2; cmovne edx, ecx; mov [rdi], edx; ret;
0x0007e4f6: and ch, 0x7f; cmp esi, 2; cmovne edx, ecx; mov [rdi], edx; ret;
0x0007e4f7: in eax, 0x7f; cmp esi, 2; cmovne edx, ecx; mov [rdi], edx; ret;
0x0007e4f9: cmp esi, 2; cmovne edx, ecx; mov [rdi], edx; ret;
0x0007e4fa: inc byte ptr [rdx]; cmovne edx, ecx; mov [rdi], edx; ret;
0x0007e4fc: cmovne edx, ecx; mov [rdi], edx; ret;
0x0007e5a2: cld; and eax, 0x89483a74; ret 0x8948;
0x0007e5a3: and eax, 0x89483a74; ret 0x8948;
0x0007e5a5: cmp cl, [rax-0x77]; ret 0x8948;
0x0007e5ae: fimul st, dword ptr [rax-0x77]; ret;
0x0007e604: add cl, [rax-0x77]; iretd;
0x0007e61a: dec dword ptr [rax-0x77]; ret 0x92eb;
0x0007e679: nop [rax]; mov rdx, r8; mov rsi, rbx; mov edi, 2; mov eax, r10d; syscall;
0x0007e67d: add [rax], al; add [rcx+rcx*4-0x3e], cl; mov rsi, rbx; mov edi, 2; mov eax, r10d; syscall;
0x0007e67e: add [rax], al; mov rdx, r8; mov rsi, rbx; mov edi, 2; mov eax, r10d; syscall;
0x0007e67f: add [rcx+rcx*4-0x3e], cl; mov rsi, rbx; mov edi, 2; mov eax, r10d; syscall;
0x0007e680: mov rdx, r8; mov rsi, rbx; mov edi, 2; mov eax, r10d; syscall;
0x0007e681: mov edx, eax; mov rsi, rbx; mov edi, 2; mov eax, r10d; syscall;
0x0007e683: mov rsi, rbx; mov edi, 2; mov eax, r10d; syscall;
0x0007e684: mov esi, ebx; mov edi, 2; mov eax, r10d; syscall;
0x0007e685: fidivr st, word ptr [rdi+2]; mov eax, r10d; syscall;
0x0007e686: mov edi, 2; mov eax, r10d; syscall;
0x0007e687: add al, [rax]; add [rax], al; mov eax, r10d; syscall;
0x0007e688: add [rax], al; add [rcx+rcx*4-0x30], al; syscall;
0x0007e689: add [rax], al; mov eax, r10d; syscall;
0x0007e68a: add [rcx+rcx*4-0x30], al; syscall;
0x0007e68b: mov eax, r10d; syscall;
0x0007e7bf: xor [rax+0x39], cl; adc [r10+0x2a], r14b; mov [rdi+0x18], rax; mov [rsi], rax; xor eax, eax; ret;
0x0007e7c2: adc [r10+0x2a], r14b; mov [rdi+0x18], rax; mov [rsi], rax; xor eax, eax; ret;
0x0007e7c3: adc [rdx+0x2a], dh; mov [rdi+0x18], rax; mov [rsi], rax; xor eax, eax; ret;
0x0007e7e9: nop [rax]; mov rax, [rip+0x13f679]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x0007e7eb: add byte ptr [rax], 0; add [rax], al; mov rax, [rip+0x13f679]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x0007e7ec: add [rax], al; add [rax], al; mov rax, [rip+0x13f679]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x0007e7ed: add [rax], al; add [rax-0x75], cl; add eax, 0x13f679; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x0007e7ef: add [rax-0x75], cl; add eax, 0x13f679; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x0007e7f2: add eax, 0x13f679; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x0007e7f5: adc eax, [rax]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x0007e8c2: mov rax, rbp; pop rbx; pop rbp; pop r12; pop r13; ret;
0x0007e95a: ret 0x1976;
0x0007e984: add [rbx+0x18], rbp; mov rax, r12; pop rbx; pop rbp; pop r12; ret;
0x0007e985: add [rbx+0x18], ebp; mov rax, r12; pop rbx; pop rbp; pop r12; ret;
0x0007e986: imul ebx, [rax], 0x4c; mov eax, esp; pop rbx; pop rbp; pop r12; ret;
0x0007e987: sbb [rcx+rcx*4-0x20], cl; pop rbx; pop rbp; pop r12; ret;
0x0007ea6c: mov al, [0x5b30c48348000000]; pop rbp; pop r12; pop r13; pop r14; ret;
0x0007eba2: adc [r10+0x3a], r14b; mov [rdi+0x18], rax; mov [rsi], rax; xor eax, eax; ret;
0x0007eba3: adc [rdx+0x3a], dh; mov [rdi+0x18], rax; mov [rsi], rax; xor eax, eax; ret;
0x0007eba6: mov [rdi+0x18], rax; mov [rsi], rax; xor eax, eax; ret;
0x0007eba7: mov [rdi+0x18], eax; mov [rsi], rax; xor eax, eax; ret;
0x0007ebaa: mov [rsi], rax; xor eax, eax; ret;
0x0007ebcf: add [rax-0x75], cl; adc r11b, r13b; in eax, 0x66; nop [rax+rax]; mov eax, 0xffffffff; ret;
0x0007ebd2: adc r11b, r13b; in eax, 0x66; nop [rax+rax]; mov eax, 0xffffffff; ret;
0x0007ebd3: adc bl, ch; in eax, 0x66; nop [rax+rax]; mov eax, 0xffffffff; ret;
0x0007ebd5: in eax, 0x66; nop [rax+rax]; mov eax, 0xffffffff; ret;
0x0007ebd6: nop [rax+rax]; mov eax, 0xffffffff; ret;
0x0007ebd7: nop [rax+rax]; mov eax, 0xffffffff; ret;
0x0007eca7: and [r15+0xd], r14b; mov rax, rbx; pop rbx; pop rbp; pop r12; ret;
0x0007eca8: and [rdi+0xd], dh; mov rax, rbx; pop rbx; pop rbp; pop r12; ret;
0x0007ecaa: or eax, 0x5bd88948; pop rbp; pop r12; ret;
0x0007ecf7: mov dword ptr fs:[rax], 0x1c; xor eax, eax; pop rbx; pop rbp; pop r12; ret;
0x0007ecf8: mov dword ptr [rax], 0x1c; xor eax, eax; pop rbx; pop rbp; pop r12; ret;
0x0007ed56: and [r15+0xe], r14b; mov rax, rbx; add rsp, 8; pop rbx; pop rbp; ret;
0x0007ed57: and [rdi+0xe], dh; mov rax, rbx; add rsp, 8; pop rbx; pop rbp; ret;
0x0007eee9: xor [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; pop r13; pop r14; ret;
0x0007efaf: add [rax], al; add [rbp+0x11], dh; add rsp, 0x48; ret;
0x0007efb1: add [rbp+0x11], dh; add rsp, 0x48; ret;
0x0007f1fd: push rbx; add cl, [rax+0x39]; ret 0x870f;
0x0007f1fe: add cl, [rax+0x39]; ret 0x870f;
0x0007f2a2: mov esp, 0x76e80010; push rbx; sti; jmp qword ptr [rsi+0xf];
0x0007f2a7: push rbx; sti; jmp qword ptr [rsi+0xf];
0x0007f2a8: sti; jmp qword ptr [rsi+0xf];
0x0007f2aa: nop [rax+rax]; and dword ptr [rdi], 0xffffffcf; ret;
0x0007f2ab: nop [rax+rax]; and dword ptr [rdi], 0xffffffcf; ret;
0x0007f2ad: add [rax], r8b; and dword ptr [rdi], 0xffffffcf; ret;
0x0007f2ae: add [rax], al; and dword ptr [rdi], 0xffffffcf; ret;
0x0007f2b0: and dword ptr [rdi], 0xffffffcf; ret;
0x0007f2b4: nop [rax+rax]; xchg ax, ax; mov eax, [rdi]; shr eax, 4; and eax, 1; ret;
0x0007f2b5: nop [rax+rax]; xchg ax, ax; mov eax, [rdi]; shr eax, 4; and eax, 1; ret;
0x0007f2b6: nop [rax+rax]; xchg ax, ax; mov eax, [rdi]; shr eax, 4; and eax, 1; ret;
0x0007f2bb: add [rax], al; add [rsi-0x70], ah; mov eax, [rdi]; shr eax, 4; and eax, 1; ret;
0x0007f2bc: add [rax], al; xchg ax, ax; mov eax, [rdi]; shr eax, 4; and eax, 1; ret;
0x0007f2bd: add [rsi-0x70], ah; mov eax, [rdi]; shr eax, 4; and eax, 1; ret;
0x0007f2be: xchg ax, ax; mov eax, [rdi]; shr eax, 4; and eax, 1; ret;
0x0007f2bf: nop; mov eax, [rdi]; shr eax, 4; and eax, 1; ret;
0x0007f2c0: mov eax, [rdi]; shr eax, 4; and eax, 1; ret;
0x0007f2c2: shr eax, 4; and eax, 1; ret;
0x0007f2c7: add ebx, eax; nop [rax]; mov eax, [rdi]; shr eax, 5; and eax, 1; ret;
0x0007f2c9: nop [rax]; mov eax, [rdi]; shr eax, 5; and eax, 1; ret;
0x0007f2cb: add byte ptr [rax], 0; add [rax], al; mov eax, [rdi]; shr eax, 5; and eax, 1; ret;
0x0007f2cc: add [rax], al; add [rax], al; mov eax, [rdi]; shr eax, 5; and eax, 1; ret;
0x0007f2cd: add [rax], al; add [rbx+0x5e8c107], cl; and eax, 1; ret;
0x0007f2ce: add [rax], al; mov eax, [rdi]; shr eax, 5; and eax, 1; ret;
0x0007f2cf: add [rbx+0x5e8c107], cl; and eax, 1; ret;
0x0007f2d0: mov eax, [rdi]; shr eax, 5; and eax, 1; ret;
0x0007f2d2: shr eax, 5; and eax, 1; ret;
0x0007f312: or [r8+0x3b], r9b; adc [r11+0x16], r14b; lea rdx, [rax+1]; mov [rdi+8], rdx; movzx eax, byte ptr [rax]; ret;
0x0007f313: or [rax+0x3b], cl; adc [r11+0x16], r14b; lea rdx, [rax+1]; mov [rdi+8], rdx; movzx eax, byte ptr [rax]; ret;
0x0007f316: adc [r11+0x16], r14b; lea rdx, [rax+1]; mov [rdi+8], rdx; movzx eax, byte ptr [rax]; ret;
0x0007f317: adc [rbx+0x16], dh; lea rdx, [rax+1]; mov [rdi+8], rdx; movzx eax, byte ptr [rax]; ret;
0x0007f34c: or [r8+0x3b], r9b; adc [r11+0xc], r14b; lea rdx, [rax+1]; mov [rdi+8], rdx; movzx eax, byte ptr [rax]; ret;
0x0007f34d: or [rax+0x3b], cl; adc [r11+0xc], r14b; lea rdx, [rax+1]; mov [rdi+8], rdx; movzx eax, byte ptr [rax]; ret;
0x0007f350: adc [r11+0xc], r14b; lea rdx, [rax+1]; mov [rdi+8], rdx; movzx eax, byte ptr [rax]; ret;
0x0007f351: adc [rbx+0xc], dh; lea rdx, [rax+1]; mov [rdi+8], rdx; movzx eax, byte ptr [rax]; ret;
0x0007f353: or al, 0x48; lea edx, [rax+1]; mov [rdi+8], rdx; movzx eax, byte ptr [rax]; ret;
0x0007f354: lea rdx, [rax+1]; mov [rdi+8], rdx; movzx eax, byte ptr [rax]; ret;
0x0007f355: lea edx, [rax+1]; mov [rdi+8], rdx; movzx eax, byte ptr [rax]; ret;
0x0007f356: push rax; add [rax-0x77], ecx; push rdi; or [rdi], cl; mov dh, 0; ret;
0x0007f357: add [rax-0x77], ecx; push rdi; or [rdi], cl; mov dh, 0; ret;
0x0007f358: mov [rdi+8], rdx; movzx eax, byte ptr [rax]; ret;
0x0007f359: mov [rdi+8], edx; movzx eax, byte ptr [rax]; ret;
0x0007f35a: push rdi; or [rdi], cl; mov dh, 0; ret;
0x0007f35b: or [rdi], cl; mov dh, 0; ret;
0x0007f39d: call qword ptr [rbx+0x60];
0x0007f3a2: setne al; add rsp, 0x10; movzx eax, al; pop rbx; neg eax; ret;
0x0007f3a4: ror byte ptr [rax-0x7d], 0xc4; adc [rdi], cl; mov dh, 0xc0; pop rbx; neg eax; ret;
0x0007f3a5: add rsp, 0x10; movzx eax, al; pop rbx; neg eax; ret;
0x0007f3a6: add esp, 0x10; movzx eax, al; pop rbx; neg eax; ret;
0x0007f3a8: adc [rdi], cl; mov dh, 0xc0; pop rbx; neg eax; ret;
0x0007f3a9: movzx eax, al; pop rbx; neg eax; ret;
0x0007f3aa: mov dh, 0xc0; pop rbx; neg eax; ret;
0x0007f3ab: rcr byte ptr [rbx-9], 0xd8; ret;
0x0007f3ac: pop rbx; neg eax; ret;
0x0007f3e0: xor [rbx+0x15], dh; lea rcx, [rdx+1]; mov [rsi+0x28], rcx; mov [rdx], al; mov eax, r8d; ret;
0x0007f3e2: adc eax, 0x14a8d48; mov [rsi+0x28], rcx; mov [rdx], al; mov eax, r8d; ret;
0x0007f3e3: lea rcx, [rdx+1]; mov [rsi+0x28], rcx; mov [rdx], al; mov eax, r8d; ret;
0x0007f3e4: lea ecx, [rdx+1]; mov [rsi+0x28], rcx; mov [rdx], al; mov eax, r8d; ret;
0x0007f3e5: add [rax-0x77], rcx; sub [rax-0x3f76bbfe], r9b; ret;
0x0007f3e6: add [rax-0x77], ecx; sub [rax-0x3f76bbfe], r9b; ret;
0x0007f3e7: mov [rsi+0x28], rcx; mov [rdx], al; mov eax, r8d; ret;
0x0007f3e8: mov [rsi+0x28], ecx; mov [rdx], al; mov eax, r8d; ret;
0x0007f3e9: sub [rax-0x3f76bbfe], r9b; ret;
0x0007f3ea: sub [rax-0x3f76bbfe], cl; ret;
0x0007f3eb: mov [rdx], al; mov eax, r8d; ret;
0x0007f487: sub qword ptr [rdi], 1; add rsp, 8; mov eax, r8d; pop rbx; pop rbp; ret;
0x0007f488: sub dword ptr [rdi], 1; add rsp, 8; mov eax, r8d; pop rbx; pop rbp; ret;
0x0007f4d4: add [rsi-0x4c], edi; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x0007f4d6: mov ah, 0x45; xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x0007f4e8: add [rdi], cl; add eax, 0x89499eeb; shr cl, 0x5a; outsb dx, [rsi]; cli; jmp qword ptr [rsi+0x2e];
0x0007f4ea: add eax, 0x89499eeb; shr cl, 0x5a; outsb dx, [rsi]; cli; jmp qword ptr [rsi+0x2e];
0x0007f4ef: shr cl, 0x5a; outsb dx, [rsi]; cli; jmp qword ptr [rsi+0x2e];
0x0007f4f1: pop rdx; outsb dx, [rsi]; cli; jmp qword ptr [rsi+0x2e];
0x0007f4f2: outsb dx, [rsi]; cli; jmp qword ptr [rsi+0x2e];
0x0007f50d: in al, 0x75; adc [rcx+rcx*4-0x20], cl; pop rbx; pop rbp; pop r12; ret;
0x0007f5b5: ror dword ptr [rax+0x39], 1; enter 0x5d76, 0x4c; mov edx, esp; mov rsi, r13; call qword ptr [r14+0x38];
0x0007f5b8: enter 0x5d76, 0x4c; mov edx, esp; mov rsi, r13; call qword ptr [r14+0x38];
0x0007f5ba: pop rbp; mov rdx, r12; mov rsi, r13; call qword ptr [r14+0x38];
0x0007f5bb: mov rdx, r12; mov rsi, r13; call qword ptr [r14+0x38];
0x0007f5bc: mov edx, esp; mov rsi, r13; call qword ptr [r14+0x38];
0x0007f5be: mov rsi, r13; call qword ptr [r14+0x38];
0x0007f5bf: mov esi, ebp; call qword ptr [r14+0x38];
0x0007f5c0: out dx, al; call qword ptr [r14+0x38];
0x0007f5c1: call qword ptr [r14+0x38];
0x0007f5c2: call qword ptr [rsi+0x38];
0x0007f682: mov [rbx], r12d; pop rbx; mov rax, r8; pop rbp; pop r12; ret;
0x0007f683: mov [rbx], esp; pop rbx; mov rax, r8; pop rbp; pop r12; ret;
0x0007f684: and ebx, [rbx+0x4c]; mov eax, eax; pop rbp; pop r12; ret;
0x0007f6de: in al, dx; or al, ch; pop r10; cli; dec dword ptr [rax-0x77]; ret;
0x0007f6df: or al, ch; pop r10; cli; dec dword ptr [rax-0x77]; ret;
0x0007f6e1: pop r10; cli; dec dword ptr [rax-0x77]; ret;
0x0007f6e2: pop rdx; cli; dec dword ptr [rax-0x77]; ret;
0x0007f6e3: cli; dec dword ptr [rax-0x77]; ret;
0x0007f719: ror dword ptr [rax+0x39], 1; enter 0x4176, 0x48; mov edx, ebx; mov rsi, r12; mov rdi, rbp; call qword ptr [r13+0x38];
0x0007f71c: enter 0x4176, 0x48; mov edx, ebx; mov rsi, r12; mov rdi, rbp; call qword ptr [r13+0x38];
0x0007f71f: mov rdx, rbx; mov rsi, r12; mov rdi, rbp; call qword ptr [r13+0x38];
0x0007f720: mov edx, ebx; mov rsi, r12; mov rdi, rbp; call qword ptr [r13+0x38];
0x0007f721: fimul st, dword ptr [rcx+rcx*4-0x1a]; mov rdi, rbp; call qword ptr [r13+0x38];
0x0007f722: mov rsi, r12; mov rdi, rbp; call qword ptr [r13+0x38];
0x0007f723: mov esi, esp; mov rdi, rbp; call qword ptr [r13+0x38];
0x0007f724: out 0x48, al; mov edi, ebp; call qword ptr [r13+0x38];
0x0007f725: mov rdi, rbp; call qword ptr [r13+0x38];
0x0007f726: mov edi, ebp; call qword ptr [r13+0x38];
0x0007f727: out dx, eax; call qword ptr [r13+0x38];
0x0007f728: call qword ptr [r13+0x38];
0x0007f729: call qword ptr [rbp+0x38];
0x0007f7da: ror dword ptr [rax+0x39], 1; enter 0x6076, 0xba; add [rax], eax; add [rax], al; mov rdi, rbx; call qword ptr [rbp+0x80];
0x0007f7dd: enter 0x6076, 0xba; add [rax], eax; add [rax], al; mov rdi, rbx; call qword ptr [rbp+0x80];
0x0007f7e0: mov edx, 1; mov rdi, rbx; call qword ptr [rbp+0x80];
0x0007f7e1: add [rax], eax; add [rax], al; mov rdi, rbx; call qword ptr [rbp+0x80];
0x0007f7fc: mov qword ptr [rbx+0x90], 0xffffffffffffffff; xor eax, eax; add rsp, 0x18; pop rbx; pop rbp; ret;
0x0007f7fd: mov dword ptr [rbx+0x90], 0xffffffff; xor eax, eax; add rsp, 0x18; pop rbx; pop rbp; ret;
0x0007f806: push qword ptr [rcx]; ror byte ptr [rax-0x7d], 0xc4; sbb [rbx+0x5d], bl; ret;
0x0007f807: xor eax, eax; add rsp, 0x18; pop rbx; pop rbp; ret;
0x0007f808: ror byte ptr [rax-0x7d], 0xc4; sbb [rbx+0x5d], bl; ret;
0x0007f88b: and al, 0x48; mov edi, ebx; call qword ptr [rbp+0x80];
0x0007f897: sar byte ptr [rax+0x2d], 0x48; mov [rbx+0x90], eax; add rsp, 0x18; pop rbx; pop rbp; ret;
0x0007f89a: mov [rbx+0x90], rax; add rsp, 0x18; pop rbx; pop rbp; ret;
0x0007f89b: mov [rbx+0x90], eax; add rsp, 0x18; pop rbx; pop rbp; ret;
0x0007f89f: add [rax], al; add rsp, 0x18; pop rbx; pop rbp; ret;
0x0007f8fe: mov [rbx+0x18], rax; mov [rbx+8], rax; mov [rbx+0x10], rax; mov rax, rbx; pop rbx; ret;
0x0007f8ff: mov [rbx+0x18], eax; mov [rbx+8], rax; mov [rbx+0x10], rax; mov rax, rbx; pop rbx; ret;
0x0007f902: mov [rbx+8], rax; mov [rbx+0x10], rax; mov rax, rbx; pop rbx; ret;
0x0007f903: mov [rbx+8], eax; mov [rbx+0x10], rax; mov rax, rbx; pop rbx; ret;
0x0007f906: mov [rbx+0x10], rax; mov rax, rbx; pop rbx; ret;
0x0007f907: mov [rbx+0x10], eax; mov rax, rbx; pop rbx; ret;
0x0007f94f: lea rcx, [rip+0x140a8a]; mov [rbx+0xd8], rcx; lea rcx, [rip+0x14053c]; mov [rdx+0xe0], rcx; pop rbx; ret;
0x0007f950: lea ecx, [rip+0x140a8a]; mov [rbx+0xd8], rcx; lea rcx, [rip+0x14053c]; mov [rdx+0xe0], rcx; pop rbx; ret;
0x0007f951: or eax, 0x140a8a; mov [rbx+0xd8], rcx; lea rcx, [rip+0x14053c]; mov [rdx+0xe0], rcx; pop rbx; ret;
0x0007f953: or dl, [rax+rax]; mov [rbx+0xd8], rcx; lea rcx, [rip+0x14053c]; mov [rdx+0xe0], rcx; pop rbx; ret;
0x0007f954: adc al, 0; mov [rbx+0xd8], rcx; lea rcx, [rip+0x14053c]; mov [rdx+0xe0], rcx; pop rbx; ret;
0x0007f956: mov [rbx+0xd8], rcx; lea rcx, [rip+0x14053c]; mov [rdx+0xe0], rcx; pop rbx; ret;
0x0007f957: mov [rbx+0xd8], ecx; lea rcx, [rip+0x14053c]; mov [rdx+0xe0], rcx; pop rbx; ret;
0x0007f959: fadd st, dword ptr [rax]; add [rax], al; lea rcx, [rip+0x14053c]; mov [rdx+0xe0], rcx; pop rbx; ret;
0x0007f95a: add [rax], al; add [rax-0x73], cl; or eax, 0x14053c; mov [rdx+0xe0], rcx; pop rbx; ret;
0x0007f95b: add [rax], al; lea rcx, [rip+0x14053c]; mov [rdx+0xe0], rcx; pop rbx; ret;
0x0007f95c: add [rax-0x73], cl; or eax, 0x14053c; mov [rdx+0xe0], rcx; pop rbx; ret;
0x0007f95d: lea rcx, [rip+0x14053c]; mov [rdx+0xe0], rcx; pop rbx; ret;
0x0007f95e: lea ecx, [rip+0x14053c]; mov [rdx+0xe0], rcx; pop rbx; ret;
0x0007f95f: or eax, 0x14053c; mov [rdx+0xe0], rcx; pop rbx; ret;
0x0007f960: cmp al, 5; adc al, 0; mov [rdx+0xe0], rcx; pop rbx; ret;
0x0007f962: adc al, 0; mov [rdx+0xe0], rcx; pop rbx; ret;
0x0007f964: mov [rdx+0xe0], rcx; pop rbx; ret;
0x0007f965: mov [rdx+0xe0], ecx; pop rbx; ret;
0x0007f9c3: sub eax, 0; add [rax], al; mov rdi, rbx; mov rdx, r14; mov rsi, rbp; call qword ptr [r12+0x78];
0x0007f9c5: add [rax], al; add [rax-0x77], cl; fisttp word ptr [rcx+rcx*4-0xe], st; mov rsi, rbp; call qword ptr [r12+0x78];
0x0007f9c6: add [rax], al; mov rdi, rbx; mov rdx, r14; mov rsi, rbp; call qword ptr [r12+0x78];
0x0007f9c7: add [rax-0x77], cl; fisttp word ptr [rcx+rcx*4-0xe], st; mov rsi, rbp; call qword ptr [r12+0x78];
0x0007f9c8: mov rdi, rbx; mov rdx, r14; mov rsi, rbp; call qword ptr [r12+0x78];
0x0007f9c9: mov edi, ebx; mov rdx, r14; mov rsi, rbp; call qword ptr [r12+0x78];
0x0007f9ca: fisttp word ptr [rcx+rcx*4-0xe], st; mov rsi, rbp; call qword ptr [r12+0x78];
0x0007f9cb: mov rdx, r14; mov rsi, rbp; call qword ptr [r12+0x78];
0x0007f9cc: mov edx, esi; mov rsi, rbp; call qword ptr [r12+0x78];
0x0007f9ce: mov rsi, rbp; call qword ptr [r12+0x78];
0x0007f9cf: mov esi, ebp; call qword ptr [r12+0x78];
0x0007f9d0: out dx, al; call qword ptr [r12+0x78];
0x0007f9d1: call qword ptr [r12+0x78];
0x0007f9d2: call qword ptr [rsp+0x78];
0x0007fa46: sub rsi, rdx; mov rdi, rbx; mov edx, 1; call qword ptr [r12+0x80];
0x0007fa47: sub esi, edx; mov rdi, rbx; mov edx, 1; call qword ptr [r12+0x80];
0x0007fa49: mov rdi, rbx; mov edx, 1; call qword ptr [r12+0x80];
0x0007fa4a: mov edi, ebx; mov edx, 1; call qword ptr [r12+0x80];
0x0007fa4b: fistp qword ptr [rdx+1], st; call qword ptr [r12+0x80];
0x0007fa4c: mov edx, 1; call qword ptr [r12+0x80];
0x0007fa4d: add [rax], eax; add [rax], al; call qword ptr [r12+0x80];
0x0007fa4f: add [rax], al; call qword ptr [r12+0x80];
0x0007fb55: enter 0x860f, 0xa4; add [rax], eax; add [rax-0x77], cl; out 0x48, al; mov edi, ebx; call qword ptr [rbp+0x90];
0x0007fb57: xchg [rcx+rax-0x76b80000], ah; out 0x48, al; mov edi, ebx; call qword ptr [rbp+0x90];
0x0007fb58: movsb [rdi], [rsi]; add [rax], eax; add [rax-0x77], cl; out 0x48, al; mov edi, ebx; call qword ptr [rbp+0x90];
0x0007fb59: add [rax], eax; add [rax-0x77], cl; out 0x48, al; mov edi, ebx; call qword ptr [rbp+0x90];
0x0007fbc0: add [rax], al; add [rbp+0x43c748c9], al; sbb [rax], al; add [rax], al; add [rax+0xf], cl; ret 0xc748;
0x0007fbc2: add [rbp+0x43c748c9], al; sbb [rax], al; add [rax], al; add [rax+0xf], cl; ret 0xc748;
0x0007fbc7: sbb [r8], al; add [rax], al; add [rax+0xf], cl; ret 0xc748;
0x0007fbc8: sbb [rax], al; add [rax], al; add [rax+0xf], cl; ret 0xc748;
0x0007fbca: add [rax], al; add [rax+0xf], cl; ret 0xc748;
0x0007fbcc: add [rax+0xf], cl; ret 0xc748;
0x0007fc10: mov al, [0x5d5be08944000000]; pop r12; pop r13; pop r14; ret;
0x0007fdb3: mov [rbx+0x90], rsi; mov [rbx+8], rax; mov [rbx+0x10], rax; xor eax, eax; pop rbx; ret;
0x0007fdb4: mov [rbx+0x90], esi; mov [rbx+8], rax; mov [rbx+0x10], rax; xor eax, eax; pop rbx; ret;
0x0007fdb8: add [rax], al; mov [rbx+8], rax; mov [rbx+0x10], rax; xor eax, eax; pop rbx; ret;
0x0007fdba: mov [rbx+8], rax; mov [rbx+0x10], rax; xor eax, eax; pop rbx; ret;
0x0007fdbb: mov [rbx+8], eax; mov [rbx+0x10], rax; xor eax, eax; pop rbx; ret;
0x0007fdc3: rcr byte ptr [rbx-0x3d], 0x66; nop [rax+rax]; or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret;
0x0007fdc6: nop [rax+rax]; or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret;
0x0007fdc7: nop [rax+rax]; or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret;
0x0007fdc8: nop [rax+rax]; or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret;
0x0007fdcc: add [rax], al; add [rax], al; or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret;
0x0007fdce: add [rax], al; or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret;
0x0007fdd0: or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret;
0x0007fdd1: or esp, [rax]; mov eax, 0xffffffff; pop rbx; ret;
0x0007fdd2: and [rax-1], bh; pop rbx; ret;
0x0007fe21: xor edx, 0; add [rax], al; mov rsi, rsp; mov rdi, rbx; call qword ptr [rbp+0x90];
0x0007fe23: add [rax], al; add [rax-0x77], cl; out 0x48, al; mov edi, ebx; call qword ptr [rbp+0x90];
0x0007fe24: add [rax], al; mov rsi, rsp; mov rdi, rbx; call qword ptr [rbp+0x90];
0x0007fe25: add [rax-0x77], cl; out 0x48, al; mov edi, ebx; call qword ptr [rbp+0x90];
0x0007fe26: mov rsi, rsp; mov rdi, rbx; call qword ptr [rbp+0x90];
0x0007fe27: mov esi, esp; mov rdi, rbx; call qword ptr [rbp+0x90];
0x0007fe28: out 0x48, al; mov edi, ebx; call qword ptr [rbp+0x90];
0x0007fe29: mov rdi, rbx; call qword ptr [rbp+0x90];
0x0007fe2a: mov edi, ebx; call qword ptr [rbp+0x90];
0x0007fe2c: call qword ptr [rbp+0x90];
0x0007fe53: add [rbx+0xc08b], cl; add [rbp+0x4f0f48c9], al; ret 0x8948;
0x0007fe55: mov eax, eax; add [rax], al; add [rbp+0x4f0f48c9], al; ret 0x8948;
0x0007fe56: rol byte ptr [rax], 0; add [rbp+0x4f0f48c9], al; ret 0x8948;
0x0007fe57: add [rax], al; add [rbp+0x4f0f48c9], al; ret 0x8948;
0x0007fe59: add [rbp+0x4f0f48c9], al; ret 0x8948;
0x0007fe8a: add [rax], al; add rsp, 0xa8; pop rbx; pop rbp; ret;
0x0007fe8c: add rsp, 0xa8; pop rbx; pop rbp; ret;
0x0007fe8d: add esp, 0xa8; pop rbx; pop rbp; ret;
0x0007fe8f: test al, 0; add [rax], al; pop rbx; pop rbp; ret;
0x0007ff4b: push rcx; call qword ptr [rbx];
0x00080028: out 0x5b, al; mov rdi, rbp; pop rbp; pop r12; pop r13; jmp rax;
0x00080029: pop rbx; mov rdi, rbp; pop rbp; pop r12; pop r13; jmp rax;
0x0008002a: mov rdi, rbp; pop rbp; pop r12; pop r13; jmp rax;
0x0008002b: mov edi, ebp; pop rbp; pop r12; pop r13; jmp rax;
0x0008002c: out dx, eax; pop rbp; pop r12; pop r13; jmp rax;
0x00080087: popfq; add [rax], al; add [rbp+0x31], al; dec dword ptr [rax+0x39]; ret 0x830f;
0x00080088: add [rax], al; add [rbp+0x31], al; dec dword ptr [rax+0x39]; ret 0x830f;
0x0008008a: add [rbp+0x31], al; dec dword ptr [rax+0x39]; ret 0x830f;
0x0008008d: dec dword ptr [rax+0x39]; ret 0x830f;
0x000800e6: fimul st, dword ptr [rdi]; sbb ebx, 4; add [rax], al; lea rsi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax+0x90];
0x000800e8: sbb ebx, 4; add [rax], al; lea rsi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax+0x90];
0x000800eb: add [rax], al; lea rsi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax+0x90];
0x000800ed: lea rsi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax+0x90];
0x000800ee: lea esi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax+0x90];
0x000800f0: and al, 0x10; mov rdi, rbp; call qword ptr [rax+0x90];
0x000800f1: adc [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x90];
0x000800f2: mov rdi, rbp; call qword ptr [rax+0x90];
0x000800f3: mov edi, ebp; call qword ptr [rax+0x90];
0x000800f4: out dx, eax; call qword ptr [rax+0x90];
0x000800f5: call qword ptr [rax+0x90];
0x00080125: add [rax], al; add [rax+0x39], cl; ret 0x850f;
0x00080127: add [rax+0x39], cl; ret 0x850f;
0x00080253: fimul st, dword ptr [rdi]; xor dword ptr [rsi], 3; add [rax], al; xor edx, edx; mov rdi, rbp; call qword ptr [rax+0x80];
0x00080255: xor dword ptr [rsi], 3; add [rax], al; xor edx, edx; mov rdi, rbp; call qword ptr [rax+0x80];
0x00080256: add eax, [rax]; add [rcx], dh; ror byte ptr [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x80];
0x00080257: add eax, [rax]; add [rcx], dh; ror byte ptr [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x80];
0x00080258: add [rax], al; xor edx, edx; mov rdi, rbp; call qword ptr [rax+0x80];
0x00080259: add [rcx], dh; ror byte ptr [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x80];
0x0008025a: xor edx, edx; mov rdi, rbp; call qword ptr [rax+0x80];
0x0008025b: ror byte ptr [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x80];
0x0008025c: mov rdi, rbp; call qword ptr [rax+0x80];
0x0008025d: mov edi, ebp; call qword ptr [rax+0x80];
0x0008025e: out dx, eax; call qword ptr [rax+0x80];
0x0008025f: call qword ptr [rax+0x80];
0x00080277: add [rax], eax; add [rax-0x75], cl; test eax, ebx; add [rax], al; add [rax-0x77], cl; ret 0x294c;
0x00080279: add [rax-0x75], cl; test eax, ebx; add [rax], al; add [rax-0x77], cl; ret 0x294c;
0x0008029d: push qword ptr [rbp+7]; mov rdx, [rbp+0x40]; sub rdx, rsi; mov [rsp], rcx; mov rdi, rbp; call rax;
0x000802a0: mov rdx, [rbp+0x40]; sub rdx, rsi; mov [rsp], rcx; mov rdi, rbp; call rax;
0x000802a1: mov edx, [rbp+0x40]; sub rdx, rsi; mov [rsp], rcx; mov rdi, rbp; call rax;
0x000802a2: push rbp; sub rdx, rsi; mov [rsp], rcx; mov rdi, rbp; call rax;
0x000802a4: sub rdx, rsi; mov [rsp], rcx; mov rdi, rbp; call rax;
0x000802a5: sub edx, esi; mov [rsp], rcx; mov rdi, rbp; call rax;
0x000802a7: mov [rsp], rcx; mov rdi, rbp; call rax;
0x000802a8: mov [rsp], ecx; mov rdi, rbp; call rax;
0x000802a9: or al, 0x24; mov rdi, rbp; call rax;
0x000802aa: and al, 0x48; mov edi, ebp; call rax;
0x00080327: fmul st, dword ptr [rdi]; adc dword ptr [rdx+2], 0; add [rcx+rcx*4-0x16], al; mov rsi, r12; mov rdi, rbp; call qword ptr [r15+0x80];
0x00080329: adc dword ptr [rdx+2], 0; add [rcx+rcx*4-0x16], al; mov rsi, r12; mov rdi, rbp; call qword ptr [r15+0x80];
0x0008032a: push rdx; add al, [rax]; add [rcx+rcx*4-0x16], al; mov rsi, r12; mov rdi, rbp; call qword ptr [r15+0x80];
0x0008032b: add al, [rax]; add [rcx+rcx*4-0x16], al; mov rsi, r12; mov rdi, rbp; call qword ptr [r15+0x80];
0x0008032c: add [rax], al; mov edx, r13d; mov rsi, r12; mov rdi, rbp; call qword ptr [r15+0x80];
0x0008032d: add [rcx+rcx*4-0x16], al; mov rsi, r12; mov rdi, rbp; call qword ptr [r15+0x80];
0x0008032e: mov edx, r13d; mov rsi, r12; mov rdi, rbp; call qword ptr [r15+0x80];
0x0008032f: mov edx, ebp; mov rsi, r12; mov rdi, rbp; call qword ptr [r15+0x80];
0x00080331: mov rsi, r12; mov rdi, rbp; call qword ptr [r15+0x80];
0x00080332: mov esi, esp; mov rdi, rbp; call qword ptr [r15+0x80];
0x00080333: out 0x48, al; mov edi, ebp; call qword ptr [r15+0x80];
0x00080334: mov rdi, rbp; call qword ptr [r15+0x80];
0x00080335: mov edi, ebp; call qword ptr [r15+0x80];
0x00080336: out dx, eax; call qword ptr [r15+0x80];
0x00080337: call qword ptr [r15+0x80];
0x00080338: call qword ptr [rdi+0x80];
0x000803e4: enter 0x860f, 0x11; add al, [rax]; add [rcx], dh; idiv byte ptr [rdx+2]; mov rdi, rbp; call qword ptr [rbx+0x80];
0x000803e6: xchg [rcx], dl; add al, [rax]; add [rcx], dh; idiv byte ptr [rdx+2]; mov rdi, rbp; call qword ptr [rbx+0x80];
0x000803e7: adc [rdx], eax; add [rax], al; xor esi, esi; mov edx, 2; mov rdi, rbp; call qword ptr [rbx+0x80];
0x000803e8: add al, [rax]; add [rcx], dh; idiv byte ptr [rdx+2]; mov rdi, rbp; call qword ptr [rbx+0x80];
0x000803e9: add [rax], al; xor esi, esi; mov edx, 2; mov rdi, rbp; call qword ptr [rbx+0x80];
0x000803ea: add [rcx], dh; idiv byte ptr [rdx+2]; mov rdi, rbp; call qword ptr [rbx+0x80];
0x000803eb: xor esi, esi; mov edx, 2; mov rdi, rbp; call qword ptr [rbx+0x80];
0x000803ec: idiv byte ptr [rdx+2]; mov rdi, rbp; call qword ptr [rbx+0x80];
0x000803ed: mov edx, 2; mov rdi, rbp; call qword ptr [rbx+0x80];
0x000803ee: add al, [rax]; add [rax], al; mov rdi, rbp; call qword ptr [rbx+0x80];
0x000804c0: enter 0x860f, 0x3f; add [rax], eax; add [rcx], dh; idiv byte ptr [rdx+1]; mov rdi, rbp; call qword ptr [rbx+0x80];
0x000804c2: xchg [rdi], bh; add [rax], eax; add [rcx], dh; idiv byte ptr [rdx+1]; mov rdi, rbp; call qword ptr [rbx+0x80];
0x000804c4: add [rax], eax; add [rcx], dh; idiv byte ptr [rdx+1]; mov rdi, rbp; call qword ptr [rbx+0x80];
0x000804c5: add [rax], al; xor esi, esi; mov edx, 1; mov rdi, rbp; call qword ptr [rbx+0x80];
0x000804c6: add [rcx], dh; idiv byte ptr [rdx+1]; mov rdi, rbp; call qword ptr [rbx+0x80];
0x000804c7: xor esi, esi; mov edx, 1; mov rdi, rbp; call qword ptr [rbx+0x80];
0x000804c8: idiv byte ptr [rdx+1]; mov rdi, rbp; call qword ptr [rbx+0x80];
0x000804c9: mov edx, 1; mov rdi, rbp; call qword ptr [rbx+0x80];
0x000804ca: add [rax], eax; add [rax], al; mov rdi, rbp; call qword ptr [rbx+0x80];
0x000804cb: add [rax], al; add [rax-0x77], cl; out dx, eax; call qword ptr [rbx+0x80];
0x000804cc: add [rax], al; mov rdi, rbp; call qword ptr [rbx+0x80];
0x000804cd: add [rax-0x77], cl; out dx, eax; call qword ptr [rbx+0x80];
0x00080520: push rbp; sbb [rax+0x29], cl; iretd;
0x00080521: sbb [rax+0x29], cl; iretd;
0x00080565: enter 0x860f, 0xa4; add [rax], al; add [rcx], dh; ror byte ptr [rax-0x77], cl; out dx, eax; call qword ptr [rbx+0x80];
0x00080567: xchg [rax+rax-0x2dcf0000], ah; mov rdi, rbp; call qword ptr [rbx+0x80];
0x00080568: movsb [rdi], [rsi]; add [rax], al; add [rcx], dh; ror byte ptr [rax-0x77], cl; out dx, eax; call qword ptr [rbx+0x80];
0x00080569: add [rax], al; add [rcx], dh; ror byte ptr [rax-0x77], cl; out dx, eax; call qword ptr [rbx+0x80];
0x0008056a: add [rax], al; xor edx, edx; mov rdi, rbp; call qword ptr [rbx+0x80];
0x0008056b: add [rcx], dh; ror byte ptr [rax-0x77], cl; out dx, eax; call qword ptr [rbx+0x80];
0x0008056c: xor edx, edx; mov rdi, rbp; call qword ptr [rbx+0x80];
0x0008056d: ror byte ptr [rax-0x77], cl; out dx, eax; call qword ptr [rbx+0x80];
0x0008056e: mov rdi, rbp; call qword ptr [rbx+0x80];
0x0008056f: mov edi, ebp; call qword ptr [rbx+0x80];
0x00080570: out dx, eax; call qword ptr [rbx+0x80];
0x00080571: call qword ptr [rbx+0x80];
0x0008057e: call qword ptr [rax-0x164418];
0x00080622: cli; iretd;
0x000806a6: or cl, [rax+1]; ret 0x8949;
0x000807b8: ror dword ptr [rax+0x39], 1; enter 0x1476, 0x4c; mov edx, esp; mov rsi, r15; mov rdi, rbp; call qword ptr [rbx+0x40];
0x000807bb: enter 0x1476, 0x4c; mov edx, esp; mov rsi, r15; mov rdi, rbp; call qword ptr [rbx+0x40];
0x000807bd: adc al, 0x4c; mov edx, esp; mov rsi, r15; mov rdi, rbp; call qword ptr [rbx+0x40];
0x000807be: mov rdx, r12; mov rsi, r15; mov rdi, rbp; call qword ptr [rbx+0x40];
0x000807bf: mov edx, esp; mov rsi, r15; mov rdi, rbp; call qword ptr [rbx+0x40];
0x000807c1: mov rsi, r15; mov rdi, rbp; call qword ptr [rbx+0x40];
0x000807c2: mov esi, edi; mov rdi, rbp; call qword ptr [rbx+0x40];
0x000807c3: dec byte ptr [rax-0x77]; out dx, eax; call qword ptr [rbx+0x40];
0x000807c4: mov rdi, rbp; call qword ptr [rbx+0x40];
0x000807c5: mov edi, ebp; call qword ptr [rbx+0x40];
0x000807c6: out dx, eax; call qword ptr [rbx+0x40];
0x000808b2: xchg [rcx], dl; add [rax], eax; add [rcx+rcx*4-0x12], cl; mov rdi, rbx; call qword ptr [rbp+0x70];
0x000808b3: adc [rcx], eax; add [rax], al; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp+0x70];
0x000808b4: add [rax], eax; add [rcx+rcx*4-0x12], cl; mov rdi, rbx; call qword ptr [rbp+0x70];
0x000808b5: add [rax], al; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp+0x70];
0x000808b6: add [rcx+rcx*4-0x12], cl; mov rdi, rbx; call qword ptr [rbp+0x70];
0x000809d1: dec dword ptr [rax-0x75]; push rsp; and al, 8; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp+0x70];
0x000809d2: mov rdx, [rsp+8]; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp+0x70];
0x000809d3: mov edx, [rsp+8]; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp+0x70];
0x000809d4: push rsp; and al, 8; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp+0x70];
0x000809d5: and al, 8; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp+0x70];
0x000809d6: or [rcx+rcx*4-0x12], cl; mov rdi, rbx; call qword ptr [rbp+0x70];
0x000809d7: mov rsi, r13; mov rdi, rbx; call qword ptr [rbp+0x70];
0x000809d8: mov esi, ebp; mov rdi, rbx; call qword ptr [rbp+0x70];
0x000809d9: out dx, al; mov rdi, rbx; call qword ptr [rbp+0x70];
0x000809da: mov rdi, rbx; call qword ptr [rbp+0x70];
0x000809db: mov edi, ebx; call qword ptr [rbp+0x70];
0x00080a8f: xchg [rax+rax-0x2dcf0000], ch; mov rsi, rbp; mov rdi, rbx; call qword ptr [r12+0x80];
0x00080a91: add [rax], al; add [rcx], dh; ror byte ptr [rax-0x77], cl; out dx, al; mov rdi, rbx; call qword ptr [r12+0x80];
0x00080a92: add [rax], al; xor edx, edx; mov rsi, rbp; mov rdi, rbx; call qword ptr [r12+0x80];
0x00080a93: add [rcx], dh; ror byte ptr [rax-0x77], cl; out dx, al; mov rdi, rbx; call qword ptr [r12+0x80];
0x00080a94: xor edx, edx; mov rsi, rbp; mov rdi, rbx; call qword ptr [r12+0x80];
0x00080a95: ror byte ptr [rax-0x77], cl; out dx, al; mov rdi, rbx; call qword ptr [r12+0x80];
0x00080a96: mov rsi, rbp; mov rdi, rbx; call qword ptr [r12+0x80];
0x00080a97: mov esi, ebp; mov rdi, rbx; call qword ptr [r12+0x80];
0x00080a98: out dx, al; mov rdi, rbx; call qword ptr [r12+0x80];
0x00080a99: mov rdi, rbx; call qword ptr [r12+0x80];
0x00080a9a: mov edi, ebx; call qword ptr [r12+0x80];
0x00080a9c: call qword ptr [r12+0x80];
0x00080a9d: call qword ptr [rsp+0x80];
0x00080ad2: mov [rbx+0x90], rax; mov rax, rbp; pop rbx; pop rbp; pop r12; ret;
0x00080ad3: mov [rbx+0x90], eax; mov rax, rbp; pop rbx; pop rbp; pop r12; ret;
0x00080ad7: add [rax], al; mov rax, rbp; pop rbx; pop rbp; pop r12; ret;
0x00080b2b: sub rdx, [rdi+8]; pop rbx; sub rax, rdx; pop rbp; pop r12; ret;
0x00080b2c: sub edx, [rdi+8]; pop rbx; sub rax, rdx; pop rbp; pop r12; ret;
0x00080b2d: push rdi; or [rbx+0x48], bl; sub eax, edx; pop rbp; pop r12; ret;
0x00080b2e: or [rbx+0x48], bl; sub eax, edx; pop rbp; pop r12; ret;
0x00080b2f: pop rbx; sub rax, rdx; pop rbp; pop r12; ret;
0x00080b30: sub rax, rdx; pop rbp; pop r12; ret;
0x00080b31: sub eax, edx; pop rbp; pop r12; ret;
0x00080b32: rcr byte ptr [rbp+0x41], 1; pop rsp; ret;
0x00080b6f: dec dword ptr [rax-0x75]; or [r8+0x3b], r9b; adc [r11+6], r14b; movzx eax, byte ptr [rax]; ret;
0x00080b72: or [r8+0x3b], r9b; adc [r11+6], r14b; movzx eax, byte ptr [rax]; ret;
0x00080b73: or [rax+0x3b], cl; adc [r11+6], r14b; movzx eax, byte ptr [rax]; ret;
0x00080b76: adc [r11+6], r14b; movzx eax, byte ptr [rax]; ret;
0x00080b77: adc [rbx+6], dh; movzx eax, byte ptr [rax]; ret;
0x00080b98: adc [r11+0x4c], r14b; movzx eax, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret;
0x00080b99: adc [rbx+0x4c], dh; movzx eax, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret;
0x00080b9b: movzx r8, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret;
0x00080cc8: ror dword ptr [rax+0x39], 1; enter 0x860f, 0xde; add [rax], al; add [rsi-1], bh; mov rdi, rbp; call qword ptr [r13+0x18];
0x00080ccb: enter 0x860f, 0xde; add [rax], al; add [rsi-1], bh; mov rdi, rbp; call qword ptr [r13+0x18];
0x00080ccd: xchg dh, bl; add [rax], al; add [rsi-1], bh; mov rdi, rbp; call qword ptr [r13+0x18];
0x00080cce: fiadd st, word ptr [rax]; add [rax], al; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [r13+0x18];
0x00080ccf: add [rax], al; add [rsi-1], bh; mov rdi, rbp; call qword ptr [r13+0x18];
0x00080cd0: add [rax], al; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [r13+0x18];
0x00080cd1: add [rsi-1], bh; mov rdi, rbp; call qword ptr [r13+0x18];
0x00080cd2: mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [r13+0x18];
0x00080cd6: dec dword ptr [rax-0x77]; out dx, eax; call qword ptr [r13+0x18];
0x00080cd7: mov rdi, rbp; call qword ptr [r13+0x18];
0x00080cd8: mov edi, ebp; call qword ptr [r13+0x18];
0x00080cd9: out dx, eax; call qword ptr [r13+0x18];
0x00080cda: call qword ptr [r13+0x18];
0x00080d96: add [rax-0x77], ecx; ret 0x3075;
0x00080d99: ret 0x3075;
0x00080e5f: add al, ch; sbb edx, [rdx]; add [rax], al; mov dword ptr [rbx+0x70], 0xffffffff; pop rbx; ret;
0x00080e61: sbb edx, [rdx]; add [rax], al; mov dword ptr [rbx+0x70], 0xffffffff; pop rbx; ret;
0x00080e63: add [rax], al; mov dword ptr [rbx+0x70], 0xffffffff; pop rbx; ret;
0x00080e65: mov dword ptr [rbx+0x70], 0xffffffff; pop rbx; ret;
0x00080ecf: add [rax], al; mov rdi, rbx; call qword ptr [r12+0x88];
0x00080ed1: mov rdi, rbx; call qword ptr [r12+0x88];
0x00080ed2: mov edi, ebx; call qword ptr [r12+0x88];
0x00080ed4: call qword ptr [r12+0x88];
0x00080ed5: call qword ptr [rsp+0x88];
0x00080f9d: mov qword ptr [rbx+0x90], 0xffffffffffffffff; mov eax, r12d; pop rbx; pop rbp; pop r12; ret;
0x00080f9e: mov dword ptr [rbx+0x90], 0xffffffff; mov eax, r12d; pop rbx; pop rbp; pop r12; ret;
0x00080fa7: inc dword ptr [rcx+rcx*4-0x20]; pop rbx; pop rbp; pop r12; ret;
0x00081067: ror dword ptr [rax+0x39], 1; enter 0x3b76, 0x48; mov edi, ebp; call qword ptr [rbx+0x88];
0x0008106a: enter 0x3b76, 0x48; mov edi, ebp; call qword ptr [rbx+0x88];
0x0008106c: cmp ecx, [rax-0x77]; out dx, eax; call qword ptr [rbx+0x88];
0x0008106d: mov rdi, rbp; call qword ptr [rbx+0x88];
0x0008106e: mov edi, ebp; call qword ptr [rbx+0x88];
0x0008106f: out dx, eax; call qword ptr [rbx+0x88];
0x00081070: call qword ptr [rbx+0x88];
0x00081120: ror dword ptr [rax+0x39], 1; enter 0x6a76, 0x31; idiv byte ptr [rdx+2]; mov rdi, rbx; call qword ptr [rbp+0x80];
0x00081123: enter 0x6a76, 0x31; idiv byte ptr [rdx+2]; mov rdi, rbx; call qword ptr [rbp+0x80];
0x00081125: push 0x31; idiv byte ptr [rdx+2]; mov rdi, rbx; call qword ptr [rbp+0x80];
0x00081126: xor esi, esi; mov edx, 2; mov rdi, rbx; call qword ptr [rbp+0x80];
0x00081127: idiv byte ptr [rdx+2]; mov rdi, rbx; call qword ptr [rbp+0x80];
0x00081128: mov edx, 2; mov rdi, rbx; call qword ptr [rbp+0x80];
0x00081129: add al, [rax]; add [rax], al; mov rdi, rbx; call qword ptr [rbp+0x80];
0x0008112b: add [rax], al; mov rdi, rbx; call qword ptr [rbp+0x80];
0x0008112d: mov rdi, rbx; call qword ptr [rbp+0x80];
0x0008112e: mov edi, ebx; call qword ptr [rbp+0x80];
0x00081130: call qword ptr [rbp+0x80];
0x00081141: sldt [rax]; mov rax, rbx; pop rbx; pop rbp; pop r12; ret;
0x00081142: add [rax], al; mov rax, rbx; pop rbx; pop rbp; pop r12; ret;
0x00081143: add [rax-0x77], cl; fcomp st, dword ptr [rbx+0x5d]; pop r12; ret;
0x00081144: mov rax, rbx; pop rbx; pop rbp; pop r12; ret;
0x00081145: mov eax, ebx; pop rbx; pop rbp; pop r12; ret;
0x00081169: nop [rax]; pop rbx; xor eax, eax; pop rbp; pop r12; ret;
0x0008116d: add [rax], al; add [rbx+0x31], bl; rcr byte ptr [rbp+0x41], 0x5c; ret;
0x0008124b: int1; cmp [rax], edx; add [rdi], cl; mov dh, 0x42; add [rax-0x7d], ecx; ret 0x3c01;
0x0008124c: cmp [rax], edx; add [rdi], cl; mov dh, 0x42; add [rax-0x7d], ecx; ret 0x3c01;
0x0008124e: add [rdi], cl; mov dh, 0x42; add [rax-0x7d], ecx; ret 0x3c01;
0x00081265: sub cl, [rdi]; mov dh, 0xc0; movsxd rax, [rdi+rax*4]; add rax, rdi; jmp rax;
0x00081266: movzx eax, al; movsxd rax, [rdi+rax*4]; add rax, rdi; jmp rax;
0x00081267: mov dh, 0xc0; movsxd rax, [rdi+rax*4]; add rax, rdi; jmp rax;
0x00081268: ror byte ptr [rax+0x63], 4; xchg [rax+1], ecx; clc; jmp rax;
0x00081269: movsxd rax, [rdi+rax*4]; add rax, rdi; jmp rax;
0x0008126a: movsxd eax, [rdi+rax*4]; add rax, rdi; jmp rax;
0x0008126b: add al, 0x87; add rax, rdi; jmp rax;
0x0008126c: xchg [rax+1], ecx; clc; jmp rax;
0x00081358: add [rax], eax; add [rdi+rcx-0x42], cl; ret 0x4a8d;
0x0008135a: add [rdi+rcx-0x42], cl; ret 0x4a8d;
0x0008135e: ret 0x4a8d;
0x000815be: call qword ptr [rax+0x8b841];
0x00081698: ror byte ptr [rax+0x39], 1; enter 0x4a76, 0x31; idiv byte ptr [rcx+3]; mov edx, 1; mov rdi, rbx; call qword ptr [r12+0x48];
0x0008169b: enter 0x4a76, 0x31; idiv byte ptr [rcx+3]; mov edx, 1; mov rdi, rbx; call qword ptr [r12+0x48];
0x0008169d: xor rsi, rsi; mov ecx, 3; mov edx, 1; mov rdi, rbx; call qword ptr [r12+0x48];
0x0008169e: xor esi, esi; mov ecx, 3; mov edx, 1; mov rdi, rbx; call qword ptr [r12+0x48];
0x0008169f: idiv byte ptr [rcx+3]; mov edx, 1; mov rdi, rbx; call qword ptr [r12+0x48];
0x000816a0: mov ecx, 3; mov edx, 1; mov rdi, rbx; call qword ptr [r12+0x48];
0x000816a1: add eax, [rax]; add [rax], al; mov edx, 1; mov rdi, rbx; call qword ptr [r12+0x48];
0x000816a2: add [rax], al; add [rdx+1], bh; mov rdi, rbx; call qword ptr [r12+0x48];
0x000816a3: add [rax], al; mov edx, 1; mov rdi, rbx; call qword ptr [r12+0x48];
0x000816a4: add [rdx+1], bh; mov rdi, rbx; call qword ptr [r12+0x48];
0x000816a5: mov edx, 1; mov rdi, rbx; call qword ptr [r12+0x48];
0x000816a6: add [rax], eax; add [rax], al; mov rdi, rbx; call qword ptr [r12+0x48];
0x000816a8: add [rax], al; mov rdi, rbx; call qword ptr [r12+0x48];
0x000816aa: mov rdi, rbx; call qword ptr [r12+0x48];
0x000816ab: mov edi, ebx; call qword ptr [r12+0x48];
0x000816ad: call qword ptr [r12+0x48];
0x000816cf: add [rcx], dh; shl byte ptr [rbx+rax*4+0x7d], 0; sbb eax, 0xe5ebdf74; nop [rax+rax]; xor eax, eax; ret;
0x000816d1: shl byte ptr [rbx+rax*4+0x7d], 0; sbb eax, 0xe5ebdf74; nop [rax+rax]; xor eax, eax; ret;
0x000816d5: add [rip-0x1a14208c], bl; nop [rax+rax]; xor eax, eax; ret;
0x000816d6: sbb eax, 0xe5ebdf74; nop [rax+rax]; xor eax, eax; ret;
0x000816f2: shl byte ptr [rbp+0xb], cl; xor eax, eax; ret;
0x00081709: cmp rbx, rax; pop rbx; setne al; movzx eax, al; neg eax; ret;
0x0008170a: cmp ebx, eax; pop rbx; setne al; movzx eax, al; neg eax; ret;
0x0008170c: pop rbx; setne al; movzx eax, al; neg eax; ret;
0x00081888: xor dword ptr [rbx], 1; add [rax], al; mov rdx, [rbx+0x40]; mov rdi, rbx; sub rdx, rsi; call qword ptr [rbp+0x70];
0x00081889: xor eax, [rcx]; add [rax], al; mov rdx, [rbx+0x40]; mov rdi, rbx; sub rdx, rsi; call qword ptr [rbp+0x70];
0x0008188a: add [rax], eax; add [rax-0x75], cl; push rbx; mov rdi, rbx; sub rdx, rsi; call qword ptr [rbp+0x70];
0x0008188b: add [rax], al; mov rdx, [rbx+0x40]; mov rdi, rbx; sub rdx, rsi; call qword ptr [rbp+0x70];
0x0008188c: add [rax-0x75], cl; push rbx; mov rdi, rbx; sub rdx, rsi; call qword ptr [rbp+0x70];
0x0008188d: mov rdx, [rbx+0x40]; mov rdi, rbx; sub rdx, rsi; call qword ptr [rbp+0x70];
0x0008188e: mov edx, [rbx+0x40]; mov rdi, rbx; sub rdx, rsi; call qword ptr [rbp+0x70];
0x0008188f: push rbx; mov rdi, rbx; sub rdx, rsi; call qword ptr [rbp+0x70];
0x00081891: mov rdi, rbx; sub rdx, rsi; call qword ptr [rbp+0x70];
0x00081892: mov edi, ebx; sub rdx, rsi; call qword ptr [rbp+0x70];
0x00081893: fisttp word ptr [rax+0x29], st; bnd call qword ptr [rbp+0x70];
0x00081894: sub rdx, rsi; call qword ptr [rbp+0x70];
0x00081895: sub edx, esi; call qword ptr [rbp+0x70];
0x00081896: bnd call qword ptr [rbp+0x70];
0x00081897: call qword ptr [rbp+0x70];
0x00081962: add [rax], al; mov rax, [rip+0x13c5dd]; mov esi, 0xffffffff; mov rdi, [rax]; mov rax, [rsp+8]; call qword ptr [rax+0x18];
0x00081963: add [rax-0x75], cl; add eax, 0x13c5dd; mov esi, 0xffffffff; mov rdi, [rax]; mov rax, [rsp+8]; call qword ptr [rax+0x18];
0x00081964: mov rax, [rip+0x143477]; mov esi, 0xffffffff; mov rdi, [rax]; mov rax, [rsp+8]; call qword ptr [rax+0x18];
0x00081965: mov eax, [rip+0x143477]; mov esi, 0xffffffff; mov rdi, [rax]; mov rax, [rsp+8]; call qword ptr [rax+0x18];
0x00081966: add eax, 0x13c5dd; mov esi, 0xffffffff; mov rdi, [rax]; mov rax, [rsp+8]; call qword ptr [rax+0x18];
0x00081967: ffree st(5); adc eax, [rax]; mov esi, 0xffffffff; mov rdi, [rax]; mov rax, [rsp+8]; call qword ptr [rax+0x18];
0x00081969: adc eax, [rax]; mov esi, 0xffffffff; mov rdi, [rax]; mov rax, [rsp+8]; call qword ptr [rax+0x18];
0x0008196a: add [rsi-1], bh; mov rdi, [rax]; mov rax, [rsp+8]; call qword ptr [rax+0x18];
0x0008196b: mov esi, 0xffffffff; mov rdi, [rax]; mov rax, [rsp+8]; call qword ptr [rax+0x18];
0x0008196f: dec dword ptr [rax-0x75]; cmp [rax-0x75], cl; and al, 8; call qword ptr [rax+0x18];
0x00081970: mov rdi, [rax]; mov rax, [rsp+8]; call qword ptr [rax+0x18];
0x00081971: mov edi, [rax]; mov rax, [rsp+8]; call qword ptr [rax+0x18];
0x00081972: cmp [rax-0x75], cl; and al, 8; call qword ptr [rax+0x18];
0x00081973: mov rax, [rsp+8]; call qword ptr [rax+0x18];
0x00081974: mov eax, [rsp+8]; call qword ptr [rax+0x18];
0x00081976: and al, 8; call qword ptr [rax+0x18];
0x00081a24: nop [rax]; mov eax, 0xffffffff; ret;
0x00081a26: add [rax-1], dil; ret;
0x00081a4c: dec dword ptr [rcx-0x77]; shr cl, 0x50; cli; jmp qword ptr [rsi+0x66];
0x00081a4f: shr cl, 0x50; cli; jmp qword ptr [rsi+0x66];
0x00081a51: push rax; cli; jmp qword ptr [rsi+0x66];
0x00081a53: cli; jmp qword ptr [rsi+0x66];
0x00081aba: test [rcx+0xf000000], dl; mov dh, 0xc3; pop rbx; pop rbp; pop r12; ret;
0x00081abd: add [rax], al; movzx eax, bl; pop rbx; pop rbp; pop r12; ret;
0x00081abe: add [rdi], cl; mov dh, 0xc3; pop rbx; pop rbp; pop r12; ret;
0x00081abf: movzx eax, bl; pop rbx; pop rbp; pop r12; ret;
0x00081ac0: mov dh, 0xc3; pop rbx; pop rbp; pop r12; ret;
0x00081b20: jmp far fword ptr [rcx+0x202];
0x00081c3f: ret 0x458b;
0x00081ca9: shl byte ptr [rbp+0xc], cl; sub dword ptr [rip+0x13f99d], 1; ret;
0x00081cb7: add [rdi+0x13f99205], al; add [rbx+0x307f01f8], al; ret;
0x00081cbd: add [rbx+0x307f01f8], al; ret;
0x00081cbf: clc; add [rdi+0x30], edi; ret;
0x00081cc0: add [rdi+0x30], edi; ret;
0x00081cfc: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x13f944; syscall; ret;
0x00081cfc: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x13f944; syscall;
0x00081d02: add [rax], al; add [rax-0x73], cl; cmp eax, 0x13f944; syscall;
0x00081d02: add [rax], al; add [rax-0x73], cl; cmp eax, 0x13f944; syscall; ret;
0x00081d04: add [rax-0x73], cl; cmp eax, 0x13f944; syscall;
0x00081d04: add [rax-0x73], cl; cmp eax, 0x13f944; syscall; ret;
0x00081d07: cmp eax, 0x13f944; syscall; ret;
0x00081d07: cmp eax, 0x13f944; syscall;
0x00081d09: stc; adc eax, [rax]; syscall; ret;
0x00081d09: stc; adc eax, [rax]; syscall;
0x00081d17: imul edi, 0x3145ffff; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; syscall;
0x00081d24: add dword ptr [rax], 0xcab80000; add [rax], al; add [rdi], cl; add eax, 0xffff50e9; jmp qword ptr [rsi+0x66];
0x00081d2a: add [rax], al; add [rdi], cl; add eax, 0xffff50e9; jmp qword ptr [rsi+0x66];
0x00081d2c: add [rdi], cl; add eax, 0xffff50e9; jmp qword ptr [rsi+0x66];
0x00081d2e: add eax, 0xffff50e9; jmp qword ptr [rsi+0x66];
0x00081d72: out 0x31, eax; ror byte ptr [rax-0x73], cl; xor eax, 0xfffffef4; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00081d74: ror byte ptr [rax-0x73], cl; xor eax, 0xfffffef4; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00081d77: xor eax, 0xfffffef4; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00081efe: add [rsi+0x17], edi; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x00081f5e: add eax, 0x13f87d; mov rdi, rsp; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00081feb: imul edi, 0x3145ffff; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x13f648]; syscall;
0x00081ff8: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x13f648; syscall;
0x00081ffe: add [rax], al; add [rax-0x73], cl; cmp eax, 0x13f648; syscall;
0x00082000: add [rax-0x73], cl; cmp eax, 0x13f648; syscall;
0x00082003: cmp eax, 0x13f648; syscall;
0x00082005: not byte ptr [rbx]; add [rdi], cl; add eax, 0xffff49e9; call qword ptr [rax+0x1bac031];
0x00082007: add [rdi], cl; add eax, 0xffff49e9; call qword ptr [rax+0x1bac031];
0x00082009: add eax, 0xffff49e9; call qword ptr [rax+0x1bac031];
0x00082208: add eax, 0x13f5d3; mov rdi, rsp; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00082249: out 0x31, eax; ror byte ptr [rax-0x73], cl; xor eax, 0xfffffa1d; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008224b: ror byte ptr [rax-0x73], cl; xor eax, 0xfffffa1d; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008224e: xor eax, 0xfffffa1d; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008224f: sbb eax, 0x48fffffa; ror eax, 0x11; xor rax, fs:[0x30]; call rax;
0x000822d8: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x13f368; syscall;
0x000822de: add [rax], al; add [rax-0x73], cl; cmp eax, 0x13f368; syscall;
0x000822e0: add [rax-0x73], cl; cmp eax, 0x13f368; syscall;
0x000822e3: cmp eax, 0x13f368; syscall;
0x000822e4: push 0xf0013f3; add eax, 0xffff13e9; call qword ptr [rax+0xff0c889];
0x000822e7: add [rdi], cl; add eax, 0xffff13e9; call qword ptr [rax+0xff0c889];
0x000822e9: add eax, 0xffff13e9; call qword ptr [rax+0xff0c889];
0x000822ee: call qword ptr [rax+0xff0c889];
0x0008231c: mov gs, [rcx+0x45fffffe]; xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x0008231d: test eax, 0x45fffffe; xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x0008235d: shl byte ptr [rbx+rdx+0x48], 0x63; push rax; adc [rax-0x75], cl; add [rcx+0x39], cl; ror byte ptr [rdi+rcx+0x4f], 1; ret 0x8548;
0x0008235f: adc ecx, [rax+0x63]; push rax; adc [rax-0x75], cl; add [rcx+0x39], cl; ror byte ptr [rdi+rcx+0x4f], 1; ret 0x8548;
0x00082362: push rax; adc [rax-0x75], cl; add [rcx+0x39], cl; ror byte ptr [rdi+rcx+0x4f], 1; ret 0x8548;
0x00082363: adc [rax-0x75], cl; add [rcx+0x39], cl; ror byte ptr [rdi+rcx+0x4f], 1; ret 0x8548;
0x00082366: add [rcx+0x39], cl; ror byte ptr [rdi+rcx+0x4f], 1; ret 0x8548;
0x00082369: ror byte ptr [rdi+rcx+0x4f], 1; ret 0x8548;
0x00082370: shl byte ptr [rbp-0x13], 0x4c; mov eax, eax; ret;
0x00082372: in eax, dx; mov rax, r8; ret;
0x000823bc: ret 0x5177;
0x00082546: mov [rdi+0x58], rax; mov rax, [rdi+0x48]; mov [rdi+0x48], rdx; mov [rdi+0x18], rax; mov [rdi+8], rax; ret;
0x00082547: mov [rdi+0x58], eax; mov rax, [rdi+0x48]; mov [rdi+0x48], rdx; mov [rdi+0x18], rax; mov [rdi+8], rax; ret;
0x00082548: pop r8; mov rax, [rdi+0x48]; mov [rdi+0x48], rdx; mov [rdi+0x18], rax; mov [rdi+8], rax; ret;
0x00082549: pop rax; mov rax, [rdi+0x48]; mov [rdi+0x48], rdx; mov [rdi+0x18], rax; mov [rdi+8], rax; ret;
0x0008254a: mov rax, [rdi+0x48]; mov [rdi+0x48], rdx; mov [rdi+0x18], rax; mov [rdi+8], rax; ret;
0x0008254b: mov eax, [rdi+0x48]; mov [rdi+0x48], rdx; mov [rdi+0x18], rax; mov [rdi+8], rax; ret;
0x0008254e: mov [rdi+0x48], rdx; mov [rdi+0x18], rax; mov [rdi+8], rax; ret;
0x0008254f: mov [rdi+0x48], edx; mov [rdi+0x18], rax; mov [rdi+8], rax; ret;
0x00082550: push rdi; mov [rdi+0x18], rax; mov [rdi+8], rax; ret;
0x00082552: mov [rdi+0x18], rax; mov [rdi+8], rax; ret;
0x00082553: mov [rdi+0x18], eax; mov [rdi+8], rax; ret;
0x00082576: mov rdx, [rdi+0x18]; mov [rdi+0x10], rax; mov [rdi+0x18], rcx; mov [rdi+0x48], rdx; mov [rdi+8], rax; ret;
0x00082577: mov edx, [rdi+0x18]; mov [rdi+0x10], rax; mov [rdi+0x18], rcx; mov [rdi+0x48], rdx; mov [rdi+8], rax; ret;
0x00082579: sbb [rax-0x77], cl; adc [r8-0x77], r9b; sbb [r8-0x77], r9b; push rdi; mov [rdi+8], rax; ret;
0x0008257a: mov [rdi+0x10], rax; mov [rdi+0x18], rcx; mov [rdi+0x48], rdx; mov [rdi+8], rax; ret;
0x0008257b: mov [rdi+0x10], eax; mov [rdi+0x18], rcx; mov [rdi+0x48], rdx; mov [rdi+8], rax; ret;
0x0008257c: adc [r8-0x77], r9b; sbb [r8-0x77], r9b; push rdi; mov [rdi+8], rax; ret;
0x0008257d: adc [rax-0x77], cl; sbb [r8-0x77], r9b; push rdi; mov [rdi+8], rax; ret;
0x0008257e: mov [rdi+0x18], rcx; mov [rdi+0x48], rdx; mov [rdi+8], rax; ret;
0x0008257f: mov [rdi+0x18], ecx; mov [rdi+0x48], rdx; mov [rdi+8], rax; ret;
0x00082580: sbb [r8-0x77], r9b; push rdi; mov [rdi+8], rax; ret;
0x00082581: sbb [rax-0x77], cl; push rdi; mov [rdi+8], rax; ret;
0x00082582: mov [rdi+0x48], rdx; mov [rdi+8], rax; ret;
0x00082583: mov [rdi+0x48], edx; mov [rdi+8], rax; ret;
0x00082584: push rdi; mov [rdi+8], rax; ret;
0x00082586: mov [rdi+8], rax; ret;
0x00082587: mov [rdi+8], eax; ret;
0x000825c5: pop rdx; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp+0x18];
0x000825c6: mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp+0x18];
0x000825cb: mov rdi, rbx; call qword ptr [rbp+0x18];
0x000825cc: mov edi, ebx; call qword ptr [rbp+0x18];
0x000825ce: call qword ptr [rbp+0x18];
0x000825f8: or [r9+0x43894813], cl; xor [rax-0x77], cl; and [r9], sil; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret;
0x000825f9: or [rcx+0x43894813], cl; xor [rax-0x77], cl; and [r9], sil; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret;
0x000825fb: adc ecx, [rax-0x77]; xor [r8-0x77], cl; and [r9], sil; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret;
0x000825fe: xor [r8-0x77], cl; and [r9], sil; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret;
0x000825ff: xor [rax-0x77], cl; and [r9], sil; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret;
0x00082600: mov [rbx+0x20], rax; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret;
0x00082601: mov [rbx+0x20], eax; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret;
0x00082602: and [r9], sil; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret;
0x00082603: and [rcx], dh; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret;
0x000826a6: ror dword ptr [rax+0x39], 1; enter 0x1476, 0x48; mov eax, [rbx+0x18]; add rsp, 0x10; pop rbx; jmp rax;
0x000826a9: enter 0x1476, 0x48; mov eax, [rbx+0x18]; add rsp, 0x10; pop rbx; jmp rax;
0x000826ab: adc al, 0x48; mov eax, [rbx+0x18]; add rsp, 0x10; pop rbx; jmp rax;
0x000826ac: mov rax, [rbx+0x18]; add rsp, 0x10; pop rbx; jmp rax;
0x000826ad: mov eax, [rbx+0x18]; add rsp, 0x10; pop rbx; jmp rax;
0x000826cc: dec dword ptr [rax-0x75]; sbb [r11+0x480c2474], cl; mov edi, [rsp]; add rsp, 0x10; pop rbx; jmp rax;
0x000826cd: mov rax, [rbx+0x18]; mov esi, [rsp+0xc]; mov rdi, [rsp]; add rsp, 0x10; pop rbx; jmp rax;
0x000826ce: mov eax, [rbx+0x18]; mov esi, [rsp+0xc]; mov rdi, [rsp]; add rsp, 0x10; pop rbx; jmp rax;
0x000826cf: sbb [r11+0x480c2474], cl; mov edi, [rsp]; add rsp, 0x10; pop rbx; jmp rax;
0x000826d0: sbb [rbx+0x480c2474], cl; mov edi, [rsp]; add rsp, 0x10; pop rbx; jmp rax;
0x000826d1: mov esi, [rsp+0xc]; mov rdi, [rsp]; add rsp, 0x10; pop rbx; jmp rax;
0x000826d3: and al, 0xc; mov rdi, [rsp]; add rsp, 0x10; pop rbx; jmp rax;
0x000826d4: or al, 0x48; mov edi, [rsp]; add rsp, 0x10; pop rbx; jmp rax;
0x000826d5: mov rdi, [rsp]; add rsp, 0x10; pop rbx; jmp rax;
0x000826d6: mov edi, [rsp]; add rsp, 0x10; pop rbx; jmp rax;
0x000826d7: cmp al, 0x24; add rsp, 0x10; pop rbx; jmp rax;
0x000826d8: and al, 0x48; add esp, 0x10; pop rbx; jmp rax;
0x000826d9: add rsp, 0x10; pop rbx; jmp rax;
0x000826da: add esp, 0x10; pop rbx; jmp rax;
0x00082767: mov rax, [rbx+0x20]; add rsp, 8; mov rdi, rbp; pop rbx; pop rbp; jmp rax;
0x00082768: mov eax, [rbx+0x20]; add rsp, 8; mov rdi, rbp; pop rbx; pop rbp; jmp rax;
0x000827de: xchg ax, ax; movzx eax, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret;
0x000827df: nop; movzx eax, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret;
0x000827f7: inc dword ptr [rbx-0x7af00008]; or eax, 0xe9ffffff; cmp edi, 0xffffffff; jmp qword ptr [rsi+0x2e];
0x000827f9: clc; dec dword ptr [rdi]; test [rip-0x16000001], ecx; cmp edi, 0xffffffff; jmp qword ptr [rsi+0x2e];
0x000827fa: dec dword ptr [rdi]; test [rip-0x16000001], ecx; cmp edi, 0xffffffff; jmp qword ptr [rsi+0x2e];
0x000827fc: test [rip-0x16000001], ecx; cmp edi, 0xffffffff; jmp qword ptr [rsi+0x2e];
0x000827fd: or eax, 0xe9ffffff; cmp edi, 0xffffffff; jmp qword ptr [rsi+0x2e];
0x00082802: cmp edi, 0xffffffff; jmp qword ptr [rsi+0x2e];
0x000828aa: iretd;
0x000828c7: mov rax, [rbx+0x28]; add rsp, 8; mov rdi, rbp; pop rbx; pop rbp; jmp rax;
0x000828c8: mov eax, [rbx+0x28]; add rsp, 8; mov rdi, rbp; pop rbx; pop rbp; jmp rax;
0x000828cb: add rsp, 8; mov rdi, rbp; pop rbx; pop rbp; jmp rax;
0x000828cc: add esp, 8; mov rdi, rbp; pop rbx; pop rbp; jmp rax;
0x000828ce: or [rax-0x77], cl; out dx, eax; pop rbx; pop rbp; jmp rax;
0x000828cf: mov rdi, rbp; pop rbx; pop rbp; jmp rax;
0x000828d0: mov edi, ebp; pop rbx; pop rbp; jmp rax;
0x000828d1: out dx, eax; pop rbx; pop rbp; jmp rax;
0x000828d2: pop rbx; pop rbp; jmp rax;
0x0008292f: dec dword ptr [rax-0x75]; or [r8+0x3b], r9b; adc [r15], r9b; or dword ptr [rbx-1], 0xffffffff; jmp qword ptr [rsi-0x70];
0x00082932: or [r8+0x3b], r9b; adc [r15], r9b; or dword ptr [rbx-1], 0xffffffff; jmp qword ptr [rsi-0x70];
0x00082933: or [rax+0x3b], cl; adc [r15], r9b; or dword ptr [rbx-1], 0xffffffff; jmp qword ptr [rsi-0x70];
0x00082936: adc [r15], r9b; or dword ptr [rbx-1], 0xffffffff; jmp qword ptr [rsi-0x70];
0x00082937: adc [rdi], cl; or dword ptr [rbx-1], 0xffffffff; jmp qword ptr [rsi-0x70];
0x00082939: or dword ptr [rbx-1], 0xffffffff; jmp qword ptr [rsi-0x70];
0x00082944: mov [rbp+8], rdx; movzx eax, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret;
0x00082945: mov [rbp+8], edx; movzx eax, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret;
0x000829ba: add ecx, [rax-0x7b]; push qword ptr [rsp+rax-0x58]; add [rsp+rbp-0x77], esi; ret 0xc883;
0x000829bd: push qword ptr [rsp+rax-0x58]; add [rsp+rbp-0x77], esi; ret 0xc883;
0x000829bf: add al, 0xa8; add [rsp+rbp-0x77], esi; ret 0xc883;
0x000829c1: add [rsp+rbp-0x77], esi; ret 0xc883;
0x000829c3: sub al, 0x89; ret 0xc883;
0x000829c5: ret 0xc883;
0x000829d4: movsxd eax, [rax+0xf]; ret 0x389;
0x000829d8: ret 0x389;
0x00082a44: ror dword ptr [rax+0x39], 1; enter 0x6676, 0x48; mov edi, ebx; call qword ptr [rbp+0x68];
0x00082a47: enter 0x6676, 0x48; mov edi, ebx; call qword ptr [rbp+0x68];
0x00082a4a: mov rdi, rbx; call qword ptr [rbp+0x68];
0x00082a4b: mov edi, ebx; call qword ptr [rbp+0x68];
0x00082a4d: call qword ptr [rbp+0x68];
0x00082a78: cmp [rcx+rcx*4+0x63], cl; mov [rbx], eax; pop rbx; pop rbp; pop r12; ret;
0x00082a79: mov [rbx+0x40], r12; mov [rbx], eax; pop rbx; pop rbp; pop r12; ret;
0x00082a7a: mov [rbx+0x40], esp; mov [rbx], eax; pop rbx; pop rbp; pop r12; ret;
0x00082a7b: movsxd eax, [rax-0x77]; add ebx, [rbx+0x5d]; pop r12; ret;
0x00082a7d: mov [rbx], eax; pop rbx; pop rbp; pop r12; ret;
0x00082a7e: add ebx, [rbx+0x5d]; pop r12; ret;
0x00082ab6: xchg ebx, eax; nop [rax+rax]; mov eax, 0xffffffff; ret;
0x00082af6: ror dword ptr [rax+0x39], 1; enter 0x2476, 0x48; mov edi, ebx; call qword ptr [rbp+0x20];
0x00082af9: enter 0x2476, 0x48; mov edi, ebx; call qword ptr [rbp+0x20];
0x00082afb: and al, 0x48; mov edi, ebx; call qword ptr [rbp+0x20];
0x00082afc: mov rdi, rbx; call qword ptr [rbp+0x20];
0x00082afd: mov edi, ebx; call qword ptr [rbp+0x20];
0x00082aff: call qword ptr [rbp+0x20];
0x00082b0f: mov [rbx+8], rdx; movzx eax, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret;
0x00082b10: mov [rbx+8], edx; movzx eax, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret;
0x00082b12: or [rdi], cl; mov dh, 0; add rsp, 8; pop rbx; pop rbp; ret;
0x00082b13: movzx eax, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret;
0x00082b14: mov dh, 0; add rsp, 8; pop rbx; pop rbp; ret;
0x00082b80: movsxd ecx, [rcx-0x75]; test eax, ebx; add [rax], al; add [rax-0x77], cl; ret 0x294c;
0x00082b83: test eax, ebx; add [rax], al; add [rax-0x77], cl; ret 0x294c;
0x00082b92: insd [rdi], dx; movzx esi, byte ptr [r15]; lea rbx, [r15+1]; mov rdi, r13; call qword ptr [rax+0x18];
0x00082b93: movzx esi, byte ptr [r15]; lea rbx, [r15+1]; mov rdi, r13; call qword ptr [rax+0x18];
0x00082b94: movzx esi, byte ptr [rdi]; lea rbx, [r15+1]; mov rdi, r13; call qword ptr [rax+0x18];
0x00082b95: mov dh, 0x37; lea rbx, [r15+1]; mov rdi, r13; call qword ptr [rax+0x18];
0x00082b97: lea rbx, [r15+1]; mov rdi, r13; call qword ptr [rax+0x18];
0x00082b98: lea ebx, [rdi+1]; mov rdi, r13; call qword ptr [rax+0x18];
0x00082b99: pop rdi; add [rcx+rcx*4-0x11], ecx; call qword ptr [rax+0x18];
0x00082b9a: add [rcx+rcx*4-0x11], ecx; call qword ptr [rax+0x18];
0x00082b9b: mov rdi, r13; call qword ptr [rax+0x18];
0x00082c04: or al, ch; ret;
0x00082c06: ret;
0x00082c65: shl byte ptr [rsi+0x10], 0x48; mov eax, [rbx+0x40]; add rsp, 0x20; pop rbx; jmp rax;
0x00082c67: adc [rax-0x75], cl; add rsp, 0x20; pop rbx; jmp rax;
0x00082c68: mov rax, [rbx+0x40]; add rsp, 0x20; pop rbx; jmp rax;
0x00082c69: mov eax, [rbx+0x40]; add rsp, 0x20; pop rbx; jmp rax;
0x00082c90: mov rdx, [rsp+0x18]; mov rsi, [rsp+0x10]; mov rdi, [rsp+8]; add rsp, 0x20; pop rbx; jmp rax;
0x00082c91: mov edx, [rsp+0x18]; mov rsi, [rsp+0x10]; mov rdi, [rsp+8]; add rsp, 0x20; pop rbx; jmp rax;
0x00082c93: and al, 0x18; mov rsi, [rsp+0x10]; mov rdi, [rsp+8]; add rsp, 0x20; pop rbx; jmp rax;
0x00082d3d: push rsp; add eax, 0xc0834800; add [rax+0x39], ecx; ret;
0x00082d3e: add eax, 0xc0834800; add [rax+0x39], ecx; ret;
0x00082d95: xchg [rsi+0x48000000], ch; mov edi, ebx; call qword ptr [r13+0x60];
0x00082d98: add [rax], al; mov rdi, rbx; call qword ptr [r13+0x60];
0x00082d9a: mov rdi, rbx; call qword ptr [r13+0x60];
0x00082d9b: mov edi, ebx; call qword ptr [r13+0x60];
0x00082d9d: call qword ptr [r13+0x60];
0x00082d9e: call qword ptr [rbp+0x60];
0x00082e87: shl byte ptr [rsi+0x16], 0x48; mov eax, [rbx+0x48]; add rsp, 0x20; xor edx, edx; pop rbx; jmp rax;
0x00082e8a: mov rax, [rbx+0x48]; add rsp, 0x20; xor edx, edx; pop rbx; jmp rax;
0x00082e8b: mov eax, [rbx+0x48]; add rsp, 0x20; xor edx, edx; pop rbx; jmp rax;
0x00082e8e: add rsp, 0x20; xor edx, edx; pop rbx; jmp rax;
0x00082e8f: add esp, 0x20; xor edx, edx; pop rbx; jmp rax;
0x00082e92: xor edx, edx; pop rbx; jmp rax;
0x00082ebb: xor edx, edx; mov rsi, [rsp+0x10]; mov rdi, [rsp+8]; add rsp, 0x20; pop rbx; jmp rax;
0x00082ebd: mov rsi, [rsp+0x10]; mov rdi, [rsp+8]; add rsp, 0x20; pop rbx; jmp rax;
0x00082ebe: mov esi, [rsp+0x10]; mov rdi, [rsp+8]; add rsp, 0x20; pop rbx; jmp rax;
0x00082ec0: and al, 0x10; mov rdi, [rsp+8]; add rsp, 0x20; pop rbx; jmp rax;
0x00082ec2: mov rdi, [rsp+8]; add rsp, 0x20; pop rbx; jmp rax;
0x00082ec3: mov edi, [rsp+8]; add rsp, 0x20; pop rbx; jmp rax;
0x00082ec5: and al, 8; add rsp, 0x20; pop rbx; jmp rax;
0x00082ec7: add rsp, 0x20; pop rbx; jmp rax;
0x00082ec8: add esp, 0x20; pop rbx; jmp rax;
0x00082ecb: pop rbx; jmp rax;
0x00082f0a: mov [rbx], eax; pop rbx; mov eax, 1; pop rbp; pop r12; ret;
0x00082f0b: add ebx, [rbx-0x48]; add [rax], eax; add [rax], al; pop rbp; pop r12; ret;
0x00082f29: nop [rax]; pop rbx; mov eax, 0xffffffff; pop rbp; pop r12; ret;
0x0008301d: mov qword ptr [rax], 0; mov qword ptr [rax+8], 0; ret;
0x0008301e: mov dword ptr [rax], 0; mov qword ptr [rax+8], 0; ret;
0x00083020: add [rax], al; add [rax], al; mov qword ptr [rax+8], 0; ret;
0x00083022: add [rax], al; mov qword ptr [rax+8], 0; ret;
0x00083024: mov qword ptr [rax+8], 0; ret;
0x000830fe: call qword ptr [rax+0x39058d48];
0x000831b2: add [rax], al; add bl, ch; pushfq; nop [rax+rax]; mov rax, 0xffffffffffffffff; ret;
0x000831b4: add bl, ch; pushfq; nop [rax+rax]; mov rax, 0xffffffffffffffff; ret;
0x000831b6: pushfq; nop [rax+rax]; mov rax, 0xffffffffffffffff; ret;
0x000831b7: nop [rax+rax]; mov rax, 0xffffffffffffffff; ret;
0x00083206: ror dword ptr [rax+0x39], 1; enter 0x3476, 0x48; mov edi, ebx; call qword ptr [rbp+0x30];
0x00083209: enter 0x3476, 0x48; mov edi, ebx; call qword ptr [rbp+0x30];
0x0008320b: xor al, 0x48; mov edi, ebx; call qword ptr [rbp+0x30];
0x00083211: xor [rbx+0x374fff8], al; and dword ptr [rbx], 0xffffffef; add rsp, 0x18; pop rbx; pop rbp; ret;
0x00083214: push qword ptr [rbx+rax-0x7d]; and ebp, edi; add rsp, 0x18; pop rbx; pop rbp; ret;
0x00083217: and dword ptr [rbx], 0xffffffef; add rsp, 0x18; pop rbx; pop rbp; ret;
0x00083218: and ebp, edi; add rsp, 0x18; pop rbx; pop rbp; ret;
0x00083219: out dx, eax; add rsp, 0x18; pop rbx; pop rbp; ret;
0x0008326b: movzx eax, byte ptr [rax-1]; and dword ptr [rbx], 0xffffffef; add rsp, 8; pop rbx; pop rbp; ret;
0x0008326f: and dword ptr [rbx], 0xffffffef; add rsp, 8; pop rbx; pop rbp; ret;
0x00083270: and ebp, edi; add rsp, 8; pop rbx; pop rbp; ret;
0x000832a3: mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp+0x30];
0x000832a8: mov rdi, rbx; call qword ptr [rbp+0x30];
0x000832a9: mov edi, ebx; call qword ptr [rbp+0x30];
0x000832ab: call qword ptr [rbp+0x30];
0x000832ac: push rbp; xor [rbx-0x438a0008], al; add rsp, 8; pop rbx; pop rbp; ret;
0x000832ad: xor [rbx-0x438a0008], al; add rsp, 8; pop rbx; pop rbp; ret;
0x000832af: clc; push qword ptr [rbp-0x44]; add rsp, 8; pop rbx; pop rbp; ret;
0x000832b0: push qword ptr [rbp-0x44]; add rsp, 8; pop rbx; pop rbp; ret;
0x000832b2: mov esp, 0x8c48348; pop rbx; pop rbp; ret;
0x000832ee: lea eax, [rdx+rdi]; ret;
0x000832ef: add al, 0x3a; ret;
0x000832f0: cmp al, bl; nop [rax+rax]; sub rcx, rax; lea eax, [rcx-1]; ret;
0x000832f2: nop [rax+rax]; sub rcx, rax; lea eax, [rcx-1]; ret;
0x000832f3: nop [rax+rax]; sub rcx, rax; lea eax, [rcx-1]; ret;
0x000832f5: add [rax], r8b; sub rcx, rax; lea eax, [rcx-1]; ret;
0x000832f6: add [rax], al; sub rcx, rax; lea eax, [rcx-1]; ret;
0x000832f8: sub rcx, rax; lea eax, [rcx-1]; ret;
0x000832f9: sub ecx, eax; lea eax, [rcx-1]; ret;
0x00083333: mov eax, [0x10247c8d480013e4]; xor edx, edx; lea rsi, [rip-0x16d5]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008333b: adc [rcx], dh; ror byte ptr [rax-0x73], cl; xor eax, 0xffffe92b; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008333d: ror byte ptr [rax-0x73], cl; xor eax, 0xffffe92b; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00083340: xor eax, 0xffffe92b; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000833e0: sub eax, 0xd8838b48; add [rax], al; add [rax-0x77], cl; ret 0x294c;
0x000833f2: xchg [rcx+1], bh; add [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax+0x18];
0x000833f4: add [rax], eax; add [rsi-1], bh; mov rdi, rbx; call qword ptr [rax+0x18];
0x000833f5: add [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax+0x18];
0x000833f6: add [rsi-1], bh; mov rdi, rbx; call qword ptr [rax+0x18];
0x000833f7: mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax+0x18];
0x000833fc: mov rdi, rbx; call qword ptr [rax+0x18];
0x000833fd: mov edi, ebx; call qword ptr [rax+0x18];
0x0008350f: add eax, 0x13e2cc; lea rdi, [rsp+0x10]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008359c: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x13e0a4; syscall;
0x000835a2: add [rax], al; add [rax-0x73], cl; cmp eax, 0x13e0a4; syscall;
0x000835a4: add [rax-0x73], cl; cmp eax, 0x13e0a4; syscall;
0x000835a7: cmp eax, 0x13e0a4; syscall;
0x0008366f: lea rdi, [rsp+0x10]; xor edx, edx; lea rsi, [rip-0x16d5]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00083670: lea edi, [rsp+0x10]; xor edx, edx; lea rsi, [rip-0x16d5]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00083672: and al, 0x10; xor edx, edx; lea rsi, [rip-0x16d5]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00083673: adc [rcx], dh; ror byte ptr [rax-0x73], cl; xor eax, 0xffffe5f3; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00083675: ror byte ptr [rax-0x73], cl; xor eax, 0xffffe5f3; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00083678: xor eax, 0xffffe5f3; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008367a: in eax, 0xff; dec dword ptr [rax-0x3f]; enter 0x6411, 0x48; xor eax, [0x30]; call rax;
0x00083788: add [rax], al; add [rax-0x77], cl; ret 0x294c;
0x0008378a: add [rax-0x77], cl; ret 0x294c;
0x00083794: and al, 0xf; xchg [rbp+0x31000001], dl; shl byte ptr [rcx], cl; test byte ptr [rax-0x77], 0xdf; call qword ptr [rax+0x58];
0x00083796: xchg [rbp+0x31000001], dl; shl byte ptr [rcx], cl; test byte ptr [rax-0x77], 0xdf; call qword ptr [rax+0x58];
0x00083797: xchg ebp, eax; add [rax], eax; add [rcx], dh; shl byte ptr [rcx], cl; test byte ptr [rax-0x77], 0xdf; call qword ptr [rax+0x58];
0x00083798: add [rax], eax; add [rcx], dh; shl byte ptr [rcx], cl; test byte ptr [rax-0x77], 0xdf; call qword ptr [rax+0x58];
0x00083799: add [rax], al; xor edx, edx; xor esi, esi; mov rdi, rbx; call qword ptr [rax+0x58];
0x0008379a: add [rcx], dh; shl byte ptr [rcx], cl; test byte ptr [rax-0x77], 0xdf; call qword ptr [rax+0x58];
0x0008379b: xor edx, edx; xor esi, esi; mov rdi, rbx; call qword ptr [rax+0x58];
0x0008379c: shl byte ptr [rcx], cl; test byte ptr [rax-0x77], 0xdf; call qword ptr [rax+0x58];
0x0008379d: xor esi, esi; mov rdi, rbx; call qword ptr [rax+0x58];
0x0008379e: test byte ptr [rax-0x77], 0xdf; call qword ptr [rax+0x58];
0x0008379f: mov rdi, rbx; call qword ptr [rax+0x58];
0x000837a0: mov edi, ebx; call qword ptr [rax+0x58];
0x000837a2: call qword ptr [rax+0x58];
0x00083842: mov rax, [rip+0x14b88b]; lea rdi, [rsp+0x10]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00083843: mov eax, [rip+0x14b88b]; lea rdi, [rsp+0x10]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00083844: add eax, 0x13df97; lea rdi, [rsp+0x10]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00083847: adc eax, [rax]; lea rdi, [rsp+0x10]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00083849: lea rdi, [rsp+0x10]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008384a: lea edi, [rsp+0x10]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008384c: and al, 0x10; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000838fa: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x13dd46; syscall;
0x00083900: add [rax], al; add [rax-0x73], cl; cmp eax, 0x13dd46; syscall;
0x00083902: add [rax-0x73], cl; cmp eax, 0x13dd46; syscall;
0x00083905: cmp eax, 0x13dd46; syscall;
0x00083991: imul edi, ebp, 0xffffffff; inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; syscall;
0x00083a05: mov rdi, rsp; xor edx, edx; lea rsi, [rip-0x10c]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00083a06: mov edi, esp; xor edx, edx; lea rsi, [rip-0x10c]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00083a07: out 0x31, eax; ror byte ptr [rax-0x73], cl; xor eax, 0xffffe25f; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00083a08: xor edx, edx; lea rsi, [rip-0x10c]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00083a09: ror byte ptr [rax-0x73], cl; xor eax, 0xffffe25f; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00083a0a: lea rsi, [rip-0x10c]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00083a0b: lea esi, [rip-0x10c]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00083a0c: xor eax, 0xffffe25f; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00083b59: xchg dl, dl; add [rax], al; add [rsi-1], bh; mov rdi, rbx; call qword ptr [r15+0x18];
0x00083b5a: rol byte ptr [rax], cl; add [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [r15+0x18];
0x00083b5b: add [rax], al; add [rsi-1], bh; mov rdi, rbx; call qword ptr [r15+0x18];
0x00083b5c: add [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [r15+0x18];
0x00083b5d: add [rsi-1], bh; mov rdi, rbx; call qword ptr [r15+0x18];
0x00083b5e: mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [r15+0x18];
0x00083b62: dec dword ptr [rax-0x77]; fild st, word ptr [rcx-1]; push rdi; sbb cl, ch; imul edi, 0xffffffff; call qword ptr [rax-0x2521fa75];
0x00083b63: mov rdi, rbx; call qword ptr [r15+0x18];
0x00083b64: mov edi, ebx; call qword ptr [r15+0x18];
0x00083b65: fild st, word ptr [rcx-1]; push rdi; sbb cl, ch; imul edi, 0xffffffff; call qword ptr [rax-0x2521fa75];
0x00083b66: call qword ptr [r15+0x18];
0x00083b67: call qword ptr [rdi+0x18];
0x00083b68: push rdi; sbb cl, ch; imul edi, 0xffffffff; call qword ptr [rax-0x2521fa75];
0x00083b69: sbb cl, ch; imul edi, 0xffffffff; call qword ptr [rax-0x2521fa75];
0x00083b6b: imul edi, 0xffffffff; call qword ptr [rax-0x2521fa75];
0x00083b6e: call qword ptr [rax-0x2521fa75];
0x00083baa: mov rax, [rip+0x15479d]; mov rdi, rsp; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00083bab: mov eax, [rip+0x15479d]; mov rdi, rsp; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00083bac: add eax, 0x13dc2f; mov rdi, rsp; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00083baf: adc eax, [rax]; mov rdi, rsp; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00083bb1: mov rdi, rsp; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00083bb2: mov edi, esp; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00083c72: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x13f648]; syscall;
0x00083c7c: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x13d9c4; syscall;
0x00083c82: add [rax], al; add [rax-0x73], cl; cmp eax, 0x13d9c4; syscall;
0x00083c84: add [rax-0x73], cl; cmp eax, 0x13d9c4; syscall;
0x00083c87: cmp eax, 0x13d9c4; syscall;
0x00083cfa: mov [rbp], rax; mov [rbx+0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret;
0x00083cfb: mov [rbp], eax; mov [rbx+0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret;
0x00083cfe: mov [rbx+0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret;
0x00083cff: mov [rbx+0x60], ebp; add rsp, 8; pop rbx; pop rbp; ret;
0x00083d21: adc ebp, ebx; ret;
0x00083d52: add [rax-0x7b], cl; shl byte ptr [rbp-0x10], 0xc3; add rdx, 0x60; mov rax, [rdi]; mov [rdx], rax; ret;
0x00083d55: shl byte ptr [rbp-0x10], 0xc3; add rdx, 0x60; mov rax, [rdi]; mov [rdx], rax; ret;
0x00083d59: add rdx, 0x60; mov rax, [rdi]; mov [rdx], rax; ret;
0x00083d5a: add edx, 0x60; mov rax, [rdi]; mov [rdx], rax; ret;
0x00083d5b: ret 0x4860;
0x00083d5d: mov rax, [rdi]; mov [rdx], rax; ret;
0x00083d5e: mov eax, [rdi]; mov [rdx], rax; ret;
0x00083d60: mov [rdx], rax; ret;
0x00083d62: add al, bl; nop [rax+rax]; nop; mov eax, [rdi+0x10]; sub eax, [rsi+0x10]; ret;
0x00083d65: nop [rax+rax]; nop; mov eax, [rdi+0x10]; sub eax, [rsi+0x10]; ret;
0x00083d66: nop [rax+rax]; nop; mov eax, [rdi+0x10]; sub eax, [rsi+0x10]; ret;
0x00083d67: nop [rax+rax]; nop; mov eax, [rdi+0x10]; sub eax, [rsi+0x10]; ret;
0x00083d6b: add [rax], al; add [rax], al; nop; mov eax, [rdi+0x10]; sub eax, [rsi+0x10]; ret;
0x00083d6d: add [rax], al; nop; mov eax, [rdi+0x10]; sub eax, [rsi+0x10]; ret;
0x00083d6f: nop; mov eax, [rdi+0x10]; sub eax, [rsi+0x10]; ret;
0x00083d70: mov eax, [rdi+0x10]; sub eax, [rsi+0x10]; ret;
0x00083d73: sub eax, [rsi+0x10]; ret;
0x00083d90: add [rax], eax; add [rbp+0xb], dh; sub edx, [rax+0x18]; mov eax, [rdi+0x10]; sub eax, edx; ret;
0x00083d92: add [rbp+0xb], dh; sub edx, [rax+0x18]; mov eax, [rdi+0x10]; sub eax, edx; ret;
0x00083d94: or ebp, [rbx]; push rax; sbb [rbx-0x2fd6efb9], cl; ret;
0x00083d95: sub edx, [rax+0x18]; mov eax, [rdi+0x10]; sub eax, edx; ret;
0x00083d96: push rax; sbb [rbx-0x2fd6efb9], cl; ret;
0x00083d97: sbb [rbx-0x2fd6efb9], cl; ret;
0x00083d9c: rol bl, 1; xchg ax, ax; sub edx, [rax+0x10]; mov eax, [rdi+0x10]; sub eax, edx; ret;
0x00083d9e: xchg ax, ax; sub edx, [rax+0x10]; mov eax, [rdi+0x10]; sub eax, edx; ret;
0x00083d9f: nop; sub edx, [rax+0x10]; mov eax, [rdi+0x10]; sub eax, edx; ret;
0x00083da0: sub edx, [rax+0x10]; mov eax, [rdi+0x10]; sub eax, edx; ret;
0x00083da1: push rax; adc [rbx-0x2fd6efb9], cl; ret;
0x00083da2: adc [rbx-0x2fd6efb9], cl; ret;
0x00083da3: mov eax, [rdi+0x10]; sub eax, edx; ret;
0x00083da4: adc [r9], r13b; rol bl, 1; mov eax, 0xffffffff; ret;
0x00083da5: adc [rcx], ch; rol bl, 1; mov eax, 0xffffffff; ret;
0x00083da7: rol bl, 1; mov eax, 0xffffffff; ret;
0x00083df8: mov [rbx+8], rax; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret;
0x00083df9: mov [rbx+8], eax; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret;
0x00083e0a: out 0xff, eax; dec dword ptr [rax+0x63]; adc r11b, r13b; ret;
0x00083e0c: dec dword ptr [rax+0x63]; adc r11b, r13b; ret;
0x00083e0f: adc r11b, r13b; ret;
0x00083e10: adc bl, ch; ret;
0x00083e55: mov edi, 0x48fffa14; mov dword ptr [rbx+0x48], 0; mov qword ptr [rbx+0x58], 0; mov qword ptr [rbx+0x50], 0; pop rbx; ret;
0x00083e59: mov qword ptr [rbx+0x48], 0; mov qword ptr [rbx+0x58], 0; mov qword ptr [rbx+0x50], 0; pop rbx; ret;
0x00083e5a: mov dword ptr [rbx+0x48], 0; mov qword ptr [rbx+0x58], 0; mov qword ptr [rbx+0x50], 0; pop rbx; ret;
0x00083e5d: add [rax], al; add [rax], al; mov qword ptr [rbx+0x58], 0; mov qword ptr [rbx+0x50], 0; pop rbx; ret;
0x00083e5f: add [rax], al; mov qword ptr [rbx+0x58], 0; mov qword ptr [rbx+0x50], 0; pop rbx; ret;
0x00083e61: mov qword ptr [rbx+0x58], 0; mov qword ptr [rbx+0x50], 0; pop rbx; ret;
0x00083e62: mov dword ptr [rbx+0x58], 0; mov qword ptr [rbx+0x50], 0; pop rbx; ret;
0x00083e63: pop r8; add [rax], al; add [rax], al; mov qword ptr [rbx+0x50], 0; pop rbx; ret;
0x00083e64: pop rax; add [rax], al; add [rax], al; mov qword ptr [rbx+0x50], 0; pop rbx; ret;
0x00083e65: add [rax], al; add [rax], al; mov qword ptr [rbx+0x50], 0; pop rbx; ret;
0x00083e67: add [rax], al; mov qword ptr [rbx+0x50], 0; pop rbx; ret;
0x00083e68: add [rax-0x39], cl; push r8; add [rax], al; add [rax], al; pop rbx; ret;
0x00083e69: mov qword ptr [rbx+0x50], 0; pop rbx; ret;
0x00083e6a: mov dword ptr [rbx+0x50], 0; pop rbx; ret;
0x00083e6b: push r8; add [rax], al; add [rax], al; pop rbx; ret;
0x00083e6c: push rax; add [rax], al; add [rax], al; pop rbx; ret;
0x00083fde: call qword ptr [rax-0x3f38b8];
0x00083fdf: nop; mov rax, 0xffffffffffffffff; ret;
0x00083fe6: inc ebx; nop [rax+rax]; mov eax, 0xffffffff; ret;
0x00083ff4: inc ebx; nop [rax+rax]; mov rax, 0xffffffffffffffff; ret;
0x00083ff6: nop [rax+rax]; mov rax, 0xffffffffffffffff; ret;
0x00083ff7: nop [rax+rax]; mov rax, 0xffffffffffffffff; ret;
0x00083ff8: nop [rax+rax]; mov rax, 0xffffffffffffffff; ret;
0x00083ffa: test [rax], al; add [rax], al; add [rax], al; mov rax, 0xffffffffffffffff; ret;
0x00083ffc: add [rax], al; add [rax], al; mov rax, 0xffffffffffffffff; ret;
0x00084006: inc ebx; nop [rax+rax]; xor eax, eax; ret;
0x0008400f: add [rcx], dh; rol bl, 0x66; nop [rax+rax]; xchg ax, ax; mov eax, 0xffffffff; ret;
0x00084011: rol bl, 0x66; nop [rax+rax]; xchg ax, ax; mov eax, 0xffffffff; ret;
0x00084014: nop [rax+rax]; xchg ax, ax; mov eax, 0xffffffff; ret;
0x00084015: nop [rax+rax]; xchg ax, ax; mov eax, 0xffffffff; ret;
0x00084016: nop [rax+rax]; xchg ax, ax; mov eax, 0xffffffff; ret;
0x00084018: test [rax], al; add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0xffffffff; ret;
0x00084019: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, 0xffffffff; ret;
0x0008401a: add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0xffffffff; ret;
0x0008401b: add [rax], al; add [rsi-0x70], ah; mov eax, 0xffffffff; ret;
0x0008401c: add [rax], al; xchg ax, ax; mov eax, 0xffffffff; ret;
0x0008401d: add [rsi-0x70], ah; mov eax, 0xffffffff; ret;
0x00084024: inc ebx; nop [rax+rax]; ret;
0x0008402d: add [rax], al; add bl, al; nop [rax+rax]; nop [rax]; mov rax, [rip+0x13b559]; ret;
0x0008402f: add bl, al; nop [rax+rax]; nop [rax]; mov rax, [rip+0x13b559]; ret;
0x00084032: nop [rax+rax]; nop [rax]; mov rax, [rip+0x13b559]; ret;
0x00084033: nop [rax+rax]; nop [rax]; mov rax, [rip+0x13b559]; ret;
0x00084034: nop [rax+rax]; nop [rax]; mov rax, [rip+0x13b559]; ret;
0x00084036: test [rax], al; add [rax], al; add [rax], al; nop [rax]; mov rax, [rip+0x13b559]; ret;
0x00084038: add [rax], al; add [rax], al; nop [rax]; mov rax, [rip+0x13b559]; ret;
0x0008403a: add [rax], al; nop [rax]; mov rax, [rip+0x13b559]; ret;
0x0008403c: nop [rax]; mov rax, [rip+0x13b559]; ret;
0x0008403f: add [rax-0x75], cl; add eax, 0x13b559; ret;
0x00084040: mov rax, [rip+0x13b559]; ret;
0x00084041: mov eax, [rip+0x13b559]; ret;
0x00084042: add eax, 0x13b559; ret;
0x00084043: pop rcx; mov ch, 0x13; add bl, al; nop [rax+rax]; xor eax, eax; ret;
0x00084044: mov ch, 0x13; add bl, al; nop [rax+rax]; xor eax, eax; ret;
0x00084046: add bl, al; nop [rax+rax]; xor eax, eax; ret;
0x0008404f: add [rcx], dh; rol bl, 0x66; nop [rax+rax]; xchg ax, ax; mov rax, [rdi+0x68]; ret;
0x00084051: rol bl, 0x66; nop [rax+rax]; xchg ax, ax; mov rax, [rdi+0x68]; ret;
0x00084054: nop [rax+rax]; xchg ax, ax; mov rax, [rdi+0x68]; ret;
0x00084055: nop [rax+rax]; xchg ax, ax; mov rax, [rdi+0x68]; ret;
0x00084056: nop [rax+rax]; xchg ax, ax; mov rax, [rdi+0x68]; ret;
0x00084058: test [rax], al; add [rax], al; add [rax], al; xchg ax, ax; mov rax, [rdi+0x68]; ret;
0x00084059: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov rax, [rdi+0x68]; ret;
0x0008405a: add [rax], al; add [rax], al; xchg ax, ax; mov rax, [rdi+0x68]; ret;
0x0008405b: add [rax], al; add [rsi-0x70], ah; mov rax, [rdi+0x68]; ret;
0x0008405c: add [rax], al; xchg ax, ax; mov rax, [rdi+0x68]; ret;
0x0008405d: add [rsi-0x70], ah; mov rax, [rdi+0x68]; ret;
0x0008405e: xchg ax, ax; mov rax, [rdi+0x68]; ret;
0x0008405f: nop; mov rax, [rdi+0x68]; ret;
0x00084060: mov rax, [rdi+0x68]; ret;
0x00084061: mov eax, [rdi+0x68]; ret;
0x00084063: push 0x2e6666c3; nop [rax+rax]; mov rax, rdi; ret;
0x0008409e: and [rdx+1], edi; cmpxchg [rip+0x13d5a5], edx; mov [rip+0x13d5a6], rbx; add dword ptr [rip+0x13d59b], 1; pop rbx; ret;
0x0008409f: mov edx, 1; cmpxchg [rip+0x13d5a5], edx; mov [rip+0x13d5a6], rbx; add dword ptr [rip+0x13d59b], 1; pop rbx; ret;
0x000840a2: add [rax], al; cmpxchg [rip+0x13d5a5], edx; mov [rip+0x13d5a6], rbx; add dword ptr [rip+0x13d59b], 1; pop rbx; ret;
0x000840a4: cmpxchg [rip+0x13d5a5], edx; mov [rip+0x13d5a6], rbx; add dword ptr [rip+0x13d59b], 1; pop rbx; ret;
0x000840a6: adc eax, 0x13d5a5; mov [rip+0x13d5a6], rbx; add dword ptr [rip+0x13d59b], 1; pop rbx; ret;
0x000840a9: adc eax, [rax]; mov [rip+0x13d5a6], rbx; add dword ptr [rip+0x13d59b], 1; pop rbx; ret;
0x000840aa: add [rax-0x77], cl; sbb eax, 0x13d5a6; add dword ptr [rip+0x13d59b], 1; pop rbx; ret;
0x000840ab: mov [rip+0x13d5a6], rbx; add dword ptr [rip+0x13d59b], 1; pop rbx; ret;
0x000840ac: mov [rip+0x13d5a6], ebx; add dword ptr [rip+0x13d59b], 1; pop rbx; ret;
0x000840ad: sbb eax, 0x13d5a6; add dword ptr [rip+0x13d59b], 1; pop rbx; ret;
0x000840b0: adc eax, [rax]; add dword ptr [rip+0x13d59b], 1; pop rbx; ret;
0x000840b1: add [rbx+0x13d59b05], al; add [rcx], al; pop rbx; ret;
0x000840b2: add dword ptr [rip+0x13d59b], 1; pop rbx; ret;
0x00084105: shl byte ptr [rbp+8], cl; sub dword ptr [rip+0x13d541], 1; ret;
0x00084107: or [rbx+0x13d5412d], al; add [rcx], al; ret;
0x00084108: sub dword ptr [rip+0x13f99d], 1; ret;
0x00084115: add [rbx+0x17f01f8], al; ret;
0x00084117: clc; add [rdi+1], edi; ret;
0x00084118: add [rdi+1], edi; ret;
0x0008411c: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x13f944]; syscall;
0x0008411d: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x13f944]; syscall;
0x0008411e: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x13f944]; syscall; ret;
0x0008411e: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x13f944]; syscall;
0x0008411f: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x13f944]; syscall; ret;
0x0008411f: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x13f944]; syscall;
0x00084120: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x13f944]; syscall;
0x00084121: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x13f944]; syscall;
0x00084121: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x13f944]; syscall; ret;
0x00084122: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x13f944]; syscall; ret;
0x00084122: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x13f944]; syscall;
0x00084123: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x13f944]; syscall;
0x00084123: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x13f944]; syscall; ret;
0x00084124: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x13f944]; syscall;
0x00084124: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x13f944]; syscall; ret;
0x00084125: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x13d51b; syscall; ret;
0x00084125: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x13d51b; syscall;
0x00084126: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0x13f944]; syscall;
0x00084126: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0x13f944]; syscall; ret;
0x00084127: add [rax], al; mov eax, 0xca; lea rdi, [rip+0x13f944]; syscall; ret;
0x00084127: add [rax], al; mov eax, 0xca; lea rdi, [rip+0x13f944]; syscall;
0x00084128: add [rax+0xca], bh; lea rdi, [rip+0x13f944]; syscall; ret;
0x00084128: add [rax+0xca], bh; lea rdi, [rip+0x13f944]; syscall;
0x00084129: mov eax, 0xca; lea rdi, [rip+0x13f944]; syscall;
0x00084129: mov eax, 0xca; lea rdi, [rip+0x13f944]; syscall; ret;
0x0008412b: add [rax], al; add [rax-0x73], cl; cmp eax, 0x13d51b; syscall;
0x0008412b: add [rax], al; add [rax-0x73], cl; cmp eax, 0x13d51b; syscall; ret;
0x0008412c: add [rax], al; lea rdi, [rip+0x13f944]; syscall; ret;
0x0008412c: add [rax], al; lea rdi, [rip+0x13f944]; syscall;
0x0008412d: add [rax-0x73], cl; cmp eax, 0x13d51b; syscall; ret;
0x0008412d: add [rax-0x73], cl; cmp eax, 0x13d51b; syscall;
0x0008412e: lea rdi, [rip+0x13f944]; syscall; ret;
0x0008412e: lea rdi, [rip+0x13f944]; syscall;
0x0008412f: lea edi, [rip+0x13f944]; syscall; ret;
0x0008412f: lea edi, [rip+0x13f944]; syscall;
0x00084130: cmp eax, 0x13d51b; syscall;
0x00084130: cmp eax, 0x13d51b; syscall; ret;
0x00084131: sbb edx, ebp; adc eax, [rax]; syscall;
0x00084131: sbb edx, ebp; adc eax, [rax]; syscall; ret;
0x00084133: adc eax, [rax]; syscall; ret;
0x00084138: nop [rax+rax]; mov qword ptr [rip+0x13d505], 0; mov qword ptr [rip+0x13d502], 0; ret;
0x0008413a: test [rax], al; add [rax], al; add [rax], al; mov qword ptr [rip+0x13d505], 0; mov qword ptr [rip+0x13d502], 0; ret;
0x0008413c: add [rax], al; add [rax], al; mov qword ptr [rip+0x13d505], 0; mov qword ptr [rip+0x13d502], 0; ret;
0x0008413e: add [rax], al; mov qword ptr [rip+0x13d505], 0; mov qword ptr [rip+0x13d502], 0; ret;
0x0008413f: add [rax-0x39], cl; add eax, 0x13d505; add [rax], al; add [rax], al; mov qword ptr [rip+0x13d502], 0; ret;
0x00084140: mov qword ptr [rip+0x13d505], 0; mov qword ptr [rip+0x13d502], 0; ret;
0x00084141: mov dword ptr [rip+0x13d505], 0; mov qword ptr [rip+0x13d502], 0; ret;
0x00084142: add eax, 0x13d505; add [rax], al; add [rax], al; mov qword ptr [rip+0x13d502], 0; ret;
0x00084145: adc eax, [rax]; add [rax], al; add [rax], al; mov qword ptr [rip+0x13d502], 0; ret;
0x00084147: add [rax], al; add [rax], al; mov qword ptr [rip+0x13d502], 0; ret;
0x00084148: add [rax], al; add [rax-0x39], cl; add eax, 0x13d502; add [rax], al; add [rax], al; ret;
0x00084149: add [rax], al; mov qword ptr [rip+0x13d502], 0; ret;
0x0008414a: add [rax-0x39], cl; add eax, 0x13d502; add [rax], al; add [rax], al; ret;
0x0008414b: mov qword ptr [rip+0x13d502], 0; ret;
0x0008414c: mov dword ptr [rip+0x13d502], 0; ret;
0x0008414d: add eax, 0x13d502; add [rax], al; add [rax], al; ret;
0x0008414e: add dl, ch; adc eax, [rax]; add [rax], al; add [rax], al; ret;
0x0008416f: adc [r8-0x77], r9b; ret 0xf8b;
0x00084170: adc [rax-0x77], cl; ret 0xf8b;
0x00084173: ret 0xf8b;
0x00084185: adc cl, [rax-0x75]; or [r8+0x39], r9b; shl byte ptr [rbx+0x21], 1; movzx eax, byte ptr [rax]; ret;
0x00084188: or [r8+0x39], r9b; shl byte ptr [rbx+0x21], 1; movzx eax, byte ptr [rax]; ret;
0x00084189: or [rax+0x39], cl; shl byte ptr [rbx+0x21], 1; movzx eax, byte ptr [rax]; ret;
0x0008418c: shl byte ptr [rbx+0x21], 1; movzx eax, byte ptr [rax]; ret;
0x0008418e: and [rdi], ecx; mov dh, 0; ret;
0x0008418f: movzx eax, byte ptr [rax]; ret;
0x00084190: mov dh, 0; ret;
0x000841ab: nop [rax+rax]; mov eax, 0xffffffff; ret;
0x000841ad: add [rax], r8b; mov eax, 0xffffffff; ret;
0x00084336: fcomp st, dword ptr [rbp+0x41]; pop rsp; pop r13; pop r14; pop r15; ret;
0x00084509: imul edx, [rax], 0x10fe800; sti; jmp qword ptr [rsi+0x66];
0x0008450b: add al, ch; mwaitx; jmp qword ptr [rsi+0x66];
0x0008450d: mwaitx; jmp qword ptr [rsi+0x66];
0x0008450e: add ebx, edi; jmp qword ptr [rsi+0x66];
0x0008450f: sti; jmp qword ptr [rsi+0x66];
0x0008452e: call qword ptr [rax-0x48];
0x00084658: or dword ptr [rbx], 8; pop rbx; ret;
0x00084659: or ecx, [rax]; pop rbx; ret;
0x0008465d: nop [rax]; mov rax, [rdi+0x28]; cmp [rdi+0x10], rax; cmovae rax, [rdi+0x10]; sub rax, [rdi+0x18]; ret;
0x00084660: mov rax, [rdi+0x28]; cmp [rdi+0x10], rax; cmovae rax, [rdi+0x10]; sub rax, [rdi+0x18]; ret;
0x00084661: mov eax, [rdi+0x28]; cmp [rdi+0x10], rax; cmovae rax, [rdi+0x10]; sub rax, [rdi+0x18]; ret;
0x00084664: cmp [rdi+0x10], rax; cmovae rax, [rdi+0x10]; sub rax, [rdi+0x18]; ret;
0x00084665: cmp [rdi+0x10], eax; cmovae rax, [rdi+0x10]; sub rax, [rdi+0x18]; ret;
0x00084668: cmovae rax, [rdi+0x10]; sub rax, [rdi+0x18]; ret;
0x00084669: cmovae eax, [rdi+0x10]; sub rax, [rdi+0x18]; ret;
0x0008466d: sub rax, [rdi+0x18]; ret;
0x0008466e: sub eax, [rdi+0x18]; ret;
0x00084770: lahf; ret 0x3949;
0x00084882: lahf; ret 0xe9e9;
0x00084883: ret 0xe9e9;
0x00084931: add edi, [rax+0x40000]; cmovbe rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret;
0x00084932: mov eax, 0x40000; cmovbe rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret;
0x00084934: add [rax+rax], al; cmovbe rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret;
0x00084935: add al, 0; cmovbe rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret;
0x00084936: add [rax+0xf], cl; shl byte ptr [rcx], 1; ror byte ptr [rax+0x39], 0xfa; setae al; ret;
0x00084937: cmovbe rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret;
0x00084938: cmovbe edx, eax; xor eax, eax; cmp rdx, rdi; setae al; ret;
0x0008493a: shl byte ptr [rcx], 1; ror byte ptr [rax+0x39], 0xfa; setae al; ret;
0x0008493b: xor eax, eax; cmp rdx, rdi; setae al; ret;
0x0008493c: ror byte ptr [rax+0x39], 0xfa; setae al; ret;
0x0008493d: cmp rdx, rdi; setae al; ret;
0x0008493e: cmp edx, edi; setae al; ret;
0x0008493f: cli; setae al; ret;
0x00084940: setae al; ret;
0x00084953: int 0x13; add [rbp+0x481674c0], al; mov eax, [rip+0x13cd5f]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084955: add [rbp+0x481674c0], al; mov eax, [rip+0x13cd5f]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084957: shl byte ptr [rsi+rdx+0x48], 0x8b; add eax, 0x13cd5f; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0008495a: mov rax, [rip+0x13cd5f]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0008495b: mov eax, [rip+0x13cd5f]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0008495c: add eax, 0x13cd5f; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0008495d: pop rdi; int 0x13; add [rax-0x3f], cl; enter 0x6411, 0x48; xor eax, [0x30]; jmp rax;
0x00084983: int 0x13; add [rbp+0x481674c0], al; mov eax, [rip+0x13cd37]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084985: add [rbp+0x481674c0], al; mov eax, [rip+0x13cd37]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084987: shl byte ptr [rsi+rdx+0x48], 0x8b; add eax, 0x13cd37; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0008498a: mov rax, [rip+0x13cd37]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0008498b: mov eax, [rip+0x13cd37]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0008498c: add eax, 0x13cd37; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x000849b5: add [rbp+0x481674c0], al; mov eax, [rip+0x13cd0f]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x000849b7: shl byte ptr [rsi+rdx+0x48], 0x8b; add eax, 0x13cd0f; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x000849ba: mov rax, [rip+0x13cd0f]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x000849bb: mov eax, [rip+0x13cd0f]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x000849bc: add eax, 0x13cd0f; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x000849bd: bswap ebp; adc eax, [rax]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x000849be: int 0x13; add [rax-0x3f], cl; enter 0x6411, 0x48; xor eax, [0x30]; jmp rax;
0x000849e2: mov edx, 0x850013cc; shl byte ptr [rsi+rdx+0x48], 0x8b; add eax, 0x13cce7; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x000849e5: add [rbp+0x481674c0], al; mov eax, [rip+0x13cce7]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x000849e7: shl byte ptr [rsi+rdx+0x48], 0x8b; add eax, 0x13cce7; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x000849ea: mov rax, [rip+0x13cce7]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x000849eb: mov eax, [rip+0x13cce7]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x000849ec: add eax, 0x13cce7; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x000849ed: out 0xcc, eax; adc eax, [rax]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084a15: add [rbp+0x481674c0], al; mov eax, [rip+0x13ccbf]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084a17: shl byte ptr [rsi+rdx+0x48], 0x8b; add eax, 0x13ccbf; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084a1a: mov rax, [rip+0x13ccbf]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084a1b: mov eax, [rip+0x13ccbf]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084a1c: add eax, 0x13ccbf; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084a1d: mov edi, 0x480013cc; ror eax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084a45: add [rbp+0x481674c0], al; mov eax, [rip+0x13cc97]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084a47: shl byte ptr [rsi+rdx+0x48], 0x8b; add eax, 0x13cc97; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084a4a: mov rax, [rip+0x13cc97]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084a4b: mov eax, [rip+0x13cc97]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084a4c: add eax, 0x13cc97; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084a4d: xchg edi, eax; int3; adc eax, [rax]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084a75: add [rbp+0x481674c0], al; mov eax, [rip+0x13cc6f]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084a77: shl byte ptr [rsi+rdx+0x48], 0x8b; add eax, 0x13cc6f; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084a7a: mov rax, [rip+0x13cc6f]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084a7b: mov eax, [rip+0x13cc6f]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084a7c: add eax, 0x13cc6f; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084a7d: outsd dx, [rsi]; int3; adc eax, [rax]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084aa5: add [rbp+0x481674c0], al; mov eax, [rip+0x13cc47]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084aa7: shl byte ptr [rsi+rdx+0x48], 0x8b; add eax, 0x13cc47; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084aaa: mov rax, [rip+0x13cc47]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084aab: mov eax, [rip+0x13cc47]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084aac: add eax, 0x13cc47; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084ad5: add [rbp+0x481674c0], al; mov eax, [rip+0x13cc1f]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084ad7: shl byte ptr [rsi+rdx+0x48], 0x8b; add eax, 0x13cc1f; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084ada: mov rax, [rip+0x13cc1f]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084adb: mov eax, [rip+0x13cc1f]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084adc: add eax, 0x13cc1f; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084ade: int3; adc eax, [rax]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084b05: add [rbp+0x481674c0], al; mov eax, [rip+0x13cbf7]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084b07: shl byte ptr [rsi+rdx+0x48], 0x8b; add eax, 0x13cbf7; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084b0a: mov rax, [rip+0x13cbf7]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084b0b: mov eax, [rip+0x13cbf7]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084b0c: add eax, 0x13cbf7; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084b0d: test ebx, 0xc1480013; enter 0x6411, 0x48; xor eax, [0x30]; jmp rax;
0x00084b35: add [rbp+0x481674c0], al; mov eax, [rip+0x13cbcf]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084b37: shl byte ptr [rsi+rdx+0x48], 0x8b; add eax, 0x13cbcf; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084b3a: mov rax, [rip+0x13cbcf]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084b3b: mov eax, [rip+0x13cbcf]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084b3c: add eax, 0x13cbcf; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084b65: add [rbp+0x481674c0], al; mov eax, [rip+0x13cba7]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084b67: shl byte ptr [rsi+rdx+0x48], 0x8b; add eax, 0x13cba7; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084b6a: mov rax, [rip+0x13cba7]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084b6b: mov eax, [rip+0x13cba7]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084b6c: add eax, 0x13cba7; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084b93: or [rbx+0x13cb0605], cl; add [rbp+0x481674c0], al; mov eax, [rip+0x13cbab]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00084b99: add [rbp+0x481674c0], al; mov eax, [rip+0x13cbab]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00084b9b: shl byte ptr [rsi+rdx+0x48], 0x8b; add eax, 0x13cbab; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00084b9e: mov rax, [rip+0x13cbab]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00084b9f: mov eax, [rip+0x13cbab]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00084ba0: add eax, 0x13cbab; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00084bbf: add [rbx+0x13cada05], cl; add [rbp+0x481674c0], al; mov eax, [rip+0x13cb87]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084bc5: add [rbp+0x481674c0], al; mov eax, [rip+0x13cb87]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084bc7: shl byte ptr [rsi+rdx+0x48], 0x8b; add eax, 0x13cb87; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084bca: mov rax, [rip+0x13cb87]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084bcb: mov eax, [rip+0x13cb87]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084bcc: add eax, 0x13cb87; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084bcd: xchg ebx, ecx; adc eax, [rax]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084bf5: add [rbp+0x481674c0], al; mov eax, [rip+0x13cb5f]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084bf7: shl byte ptr [rsi+rdx+0x48], 0x8b; add eax, 0x13cb5f; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084bfa: mov rax, [rip+0x13cb5f]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084bfb: mov eax, [rip+0x13cb5f]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084bfc: add eax, 0x13cb5f; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084c25: add [rbp+0x481674c0], al; mov eax, [rip+0x13cb37]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084c27: shl byte ptr [rsi+rdx+0x48], 0x8b; add eax, 0x13cb37; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084c2a: mov rax, [rip+0x13cb37]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084c2b: mov eax, [rip+0x13cb37]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084c2c: add eax, 0x13cb37; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084c55: add [rbp+0x481674c0], al; mov eax, [rip+0x13cb0f]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084c57: shl byte ptr [rsi+rdx+0x48], 0x8b; add eax, 0x13cb0f; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084c5a: mov rax, [rip+0x13cb0f]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084c5b: mov eax, [rip+0x13cb0f]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084c5c: add eax, 0x13cb0f; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084c5d: bswap ebx; adc eax, [rax]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084c85: add [rbp+0x481674c0], al; mov eax, [rip+0x13cae7]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084c87: shl byte ptr [rsi+rdx+0x48], 0x8b; add eax, 0x13cae7; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084c8a: mov rax, [rip+0x13cae7]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084c8b: mov eax, [rip+0x13cae7]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084c8c: add eax, 0x13cae7; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084c8d: out 0xca, eax; adc eax, [rax]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084cb5: add [rbp+0x481674c0], al; mov eax, [rip+0x13cabf]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084cb7: shl byte ptr [rsi+rdx+0x48], 0x8b; add eax, 0x13cabf; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084cba: mov rax, [rip+0x13cabf]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084cbb: mov eax, [rip+0x13cabf]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084cbc: add eax, 0x13cabf; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084cbd: mov edi, 0x480013ca; ror eax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084ce2: mov edx, 0x850013c9; shl byte ptr [rsi+rdx+0x48], 0x8b; add eax, 0x13ca97; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084ce5: add [rbp+0x481674c0], al; mov eax, [rip+0x13ca97]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084ce7: shl byte ptr [rsi+rdx+0x48], 0x8b; add eax, 0x13ca97; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084cea: mov rax, [rip+0x13ca97]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084ceb: mov eax, [rip+0x13ca97]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084cec: add eax, 0x13ca97; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084d15: add [rbp+0x481674c0], al; mov eax, [rip+0x13ca6f]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084d17: shl byte ptr [rsi+rdx+0x48], 0x8b; add eax, 0x13ca6f; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084d1a: mov rax, [rip+0x13ca6f]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084d1b: mov eax, [rip+0x13ca6f]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084d1c: add eax, 0x13ca6f; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084d1f: adc eax, [rax]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00084d4f: shl byte ptr [rsi+rbx+0x45], 0x31; sar byte ptr [rdx+2], cl; mov esi, 0x80; mov eax, 0xca; syscall;
0x00084d52: xor r10d, r10d; mov edx, 2; mov esi, 0x80; mov eax, 0xca; syscall;
0x00084d53: xor edx, edx; mov edx, 2; mov esi, 0x80; mov eax, 0xca; syscall;
0x00084d54: sar byte ptr [rdx+2], cl; mov esi, 0x80; mov eax, 0xca; syscall;
0x00084d55: mov edx, 2; mov esi, 0x80; mov eax, 0xca; syscall;
0x00084d56: add al, [rax]; add [rax], al; mov esi, 0x80; mov eax, 0xca; syscall;
0x00084d57: add [rax], al; add [rsi+0x80], bh; mov eax, 0xca; syscall;
0x00084d58: add [rax], al; mov esi, 0x80; mov eax, 0xca; syscall;
0x00084d59: add [rsi+0x80], bh; mov eax, 0xca; syscall;
0x00084d5a: mov esi, 0x80; mov eax, 0xca; syscall;
0x00084d5b: add byte ptr [rax], 0; add [rax+0xca], bh; syscall;
0x00084d63: add [rdi], cl; add eax, 0x1f0fdfeb; test [rax], al; add [rax], al; add [rax], al; ret;
0x00084d65: add eax, 0x1f0fdfeb; test [rax], al; add [rax], al; add [rax], al; ret;
0x00084d8e: add al, [rcx+0x39]; ret;
0x00084ded: add eax, [rax]; add [rcx-0x77], al; ret;
0x00084e10: mov rdi, fs:[0]; mov eax, 0xca; xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall;
0x00084e11: mov rdi, [0]; mov eax, 0xca; xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall;
0x00084e12: mov edi, [0]; mov eax, 0xca; xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall;
0x00084e14: and eax, 0; mov eax, 0xca; xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall;
0x00084e16: add [rax], al; add [rax+0xca], bh; xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall;
0x00084e17: add [rax], al; mov eax, 0xca; xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall;
0x00084e18: add [rax+0xca], bh; xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall;
0x00084e19: mov eax, 0xca; xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall;
0x00084e1c: add [rax], al; xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall;
0x00084e1e: xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall;
0x00084e1f: xor edx, edx; add rdi, 0x308; mov esi, 0x80; syscall;
0x00084e21: add rdi, 0x308; mov esi, 0x80; syscall;
0x00084e22: add edi, 0x308; mov esi, 0x80; syscall;
0x00084e24: or [rbx], al; add [rax], al; mov esi, 0x80; syscall;
0x00084e25: add eax, [rax]; add [rsi+0x80], bh; syscall;
0x00084e41: adc [r13+0x4c1174c0], r8b; mov eax, [rdi+8]; mov rax, [rdi]; mov rdi, r8; jmp rax;
0x00084e42: adc [rbp+0x4c1174c0], al; mov eax, [rdi+8]; mov rax, [rdi]; mov rdi, r8; jmp rax;
0x00084e47: mov r8, [rdi+8]; mov rax, [rdi]; mov rdi, r8; jmp rax;
0x00084e48: mov eax, [rdi+8]; mov rax, [rdi]; mov rdi, r8; jmp rax;
0x00084e4b: mov rax, [rdi]; mov rdi, r8; jmp rax;
0x00084e4c: mov eax, [rdi]; mov rdi, r8; jmp rax;
0x00084e4e: mov rdi, r8; jmp rax;
0x00084e4f: mov edi, eax; jmp rax;
0x00084e9c: ror dword ptr [rax-0x7d], 1; ret 0x4801;
0x00084ea3: cli; sub dh, [rbp-0x1f]; lea rax, [rip+0x13c96a]; pop rbx; mov dword ptr [rip+0x13c7e7], 1; ret;
0x00084ea4: sub dh, [rbp-0x1f]; lea rax, [rip+0x13c96a]; pop rbx; mov dword ptr [rip+0x13c7e7], 1; ret;
0x00084ea7: lea rax, [rip+0x13c96a]; pop rbx; mov dword ptr [rip+0x13c7e7], 1; ret;
0x00084ea8: lea eax, [rip+0x13c96a]; pop rbx; mov dword ptr [rip+0x13c7e7], 1; ret;
0x00084ea9: add eax, 0x13c96a; pop rbx; mov dword ptr [rip+0x13c7e7], 1; ret;
0x00084eaa: push 0xffffffffffffffc9; adc eax, [rax]; pop rbx; mov dword ptr [rip+0x13c7e7], 1; ret;
0x00084eab: leave; adc eax, [rax]; pop rbx; mov dword ptr [rip+0x13c7e7], 1; ret;
0x00084eac: adc eax, [rax]; pop rbx; mov dword ptr [rip+0x13c7e7], 1; ret;
0x00084ead: add [rbx-0x39], bl; add eax, 0x13c7e7; add [rax], eax; add [rax], al; ret;
0x00084eae: pop rbx; mov dword ptr [rip+0x13c7e7], 1; ret;
0x00084eaf: mov dword ptr [rip+0x13c7e7], 1; ret;
0x00084eb0: add eax, 0x13c7e7; add [rax], eax; add [rax], al; ret;
0x00084eb1: out 0xc7, eax; adc eax, [rax]; add [rax], eax; add [rax], al; ret;
0x00084f62: add rsp, 0x10; pop rbx; and eax, 0xc; pop rbp; pop r12; ret;
0x00084f63: add esp, 0x10; pop rbx; and eax, 0xc; pop rbp; pop r12; ret;
0x00084f66: pop rbx; and eax, 0xc; pop rbp; pop r12; ret;
0x00084f67: and eax, 0xc; pop rbp; pop r12; ret;
0x00084f69: or al, 0x5d; pop r12; ret;
0x0008501a: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x13c7f6; syscall;
0x00085020: add [rax], al; add [rax-0x73], cl; cmp eax, 0x13c7f6; syscall;
0x00085022: add [rax-0x73], cl; cmp eax, 0x13c7f6; syscall;
0x00085025: cmp eax, 0x13c7f6; syscall;
0x0008503e: add [rax+0x39], cl; fbstp tbyte ptr [rbp+rax-0x18], st; iretd;
0x00085041: fbstp tbyte ptr [rbp+rax-0x18], st; iretd;
0x000850be: add [rax], al; add [rax-0x77], cl; ret 0x3b48;
0x000850c0: add [rax-0x77], cl; ret 0x3b48;
0x000850e8: outsd dx, [rsi]; add [rax-0x7d], cl; ret 0xf20;
0x000850e9: add [rax-0x7d], cl; ret 0xf20;
0x0008514e: adc [rbx+0x13c6ca2d], eax; add [rcx], al; pop rbx; ret;
0x00085176: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x13c69a; syscall;
0x0008517c: add [rax], al; add [rax-0x73], cl; cmp eax, 0x13c69a; syscall;
0x0008517c: add [rax], al; add [rax-0x73], cl; cmp eax, 0x13c69a; syscall; pop rbx; ret;
0x0008517e: add [rax-0x73], cl; cmp eax, 0x13c69a; syscall;
0x0008517e: add [rax-0x73], cl; cmp eax, 0x13c69a; syscall; pop rbx; ret;
0x00085181: cmp eax, 0x13c69a; syscall;
0x00085181: cmp eax, 0x13c69a; syscall; pop rbx; ret;
0x0008527a: ret 0x13c5;
0x000852d0: popfq; call rax;
0x00085306: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x13c7f6]; syscall;
0x00085310: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x13c500; syscall;
0x00085316: add [rax], al; add [rax-0x73], cl; cmp eax, 0x13c500; syscall;
0x00085318: add [rax-0x73], cl; cmp eax, 0x13c500; syscall;
0x0008531b: cmp eax, 0x13c500; syscall;
0x0008531c: add ch, al; adc eax, [rax]; syscall;
0x0008531f: add [rdi], cl; add eax, 0xfffedce9; jmp qword ptr [rsi+0xf];
0x00085321: add eax, 0xfffedce9; jmp qword ptr [rsi+0xf];
0x00085327: nop [rax+rax]; mov rax, fs:[0x10]; ret;
0x00085328: nop [rax+rax]; mov rax, fs:[0x10]; ret;
0x0008532a: test [rax], al; add [rax], al; add [rax], al; mov rax, fs:[0x10]; ret;
0x0008532c: add [rax], al; add [rax], al; mov rax, fs:[0x10]; ret;
0x0008532d: add [rax], al; add [rax+rcx*2-0x75], ah; add al, 0x25; adc [rax], al; add [rax], al; ret;
0x00085336: add [rax], al; add bl, al; nop [rax+rax]; mov rax, fs:[0x10]; ret;
0x00085338: add bl, al; nop [rax+rax]; mov rax, fs:[0x10]; ret;
0x0008533a: nop [rax+rax]; mov rax, fs:[0x10]; ret;
0x0008533b: nop [rax+rax]; mov rax, fs:[0x10]; ret;
0x0008533d: add [rax], r8b; mov rax, fs:[0x10]; ret;
0x0008533e: add [rax], al; mov rax, fs:[0x10]; ret;
0x0008533f: add [rax+rcx*2-0x75], ah; add al, 0x25; adc [rax], al; add [rax], al; ret;
0x00085340: mov rax, fs:[0x10]; ret;
0x00085341: mov rax, [0x10]; ret;
0x00085342: mov eax, [0x10]; ret;
0x00085343: add al, 0x25; adc [rax], al; add [rax], al; ret;
0x00085344: and eax, 0x10; ret;
0x00085345: adc [rax], al; add [rax], al; ret;
0x00085348: add bl, al; nop [rax+rax]; xor eax, eax; cmp rdi, rsi; sete al; ret;
0x0008534a: nop [rax+rax]; xor eax, eax; cmp rdi, rsi; sete al; ret;
0x0008534b: nop [rax+rax]; xor eax, eax; cmp rdi, rsi; sete al; ret;
0x0008534d: add [rax], r8b; xor eax, eax; cmp rdi, rsi; sete al; ret;
0x00085377: cmp eax, 4; sete al; movzx eax, al; sub eax, 2; add rsp, 8; ret;
0x0008537a: sete al; movzx eax, al; sub eax, 2; add rsp, 8; ret;
0x0008537c: ror byte ptr [rdi], 0xb6; rol byte ptr [rbx-0x7cb7fd18], 0xc4; or bl, al; nop [rax+rax]; mov eax, 0x18; syscall;
0x0008537d: movzx eax, al; sub eax, 2; add rsp, 8; ret;
0x0008537e: mov dh, 0xc0; sub eax, 2; add rsp, 8; ret;
0x0008537f: rol byte ptr [rbx-0x7cb7fd18], 0xc4; or bl, al; nop [rax+rax]; mov eax, 0x18; syscall; ret;
0x0008537f: rol byte ptr [rbx-0x7cb7fd18], 0xc4; or bl, al; nop [rax+rax]; mov eax, 0x18; syscall;
0x00085380: sub eax, 2; add rsp, 8; ret;
0x00085386: or bl, al; nop [rax+rax]; mov eax, 0x18; syscall;
0x00085386: or bl, al; nop [rax+rax]; mov eax, 0x18; syscall; ret;
0x00085388: nop [rax+rax]; mov eax, 0x18; syscall; ret;
0x00085388: nop [rax+rax]; mov eax, 0x18; syscall;
0x0008538a: test [rax], al; add [rax], al; add [rax], al; mov eax, 0x18; syscall;
0x0008538a: test [rax], al; add [rax], al; add [rax], al; mov eax, 0x18; syscall; ret;
0x0008538b: add [rax], al; add [rax], al; add [rax+0x18], bh; syscall;
0x0008538b: add [rax], al; add [rax], al; add [rax+0x18], bh; syscall; ret;
0x0008538c: add [rax], al; add [rax], al; mov eax, 0x18; syscall; ret;
0x0008538c: add [rax], al; add [rax], al; mov eax, 0x18; syscall;
0x0008538d: add [rax], al; add [rax+0x18], bh; syscall; ret;
0x0008538d: add [rax], al; add [rax+0x18], bh; syscall;
0x0008538e: add [rax], al; mov eax, 0x18; syscall; ret;
0x0008538f: add [rax+0x18], bh; syscall; ret;
0x00085390: mov eax, 0x18; syscall; ret;
0x00085391: sbb [rax], al; add [rax], al; syscall; ret;
0x00085398: nop [rax+rax]; xor eax, eax; cmp rdi, rsi; sete al; ret;
0x0008539b: add [rax], al; add [rax], al; add [rcx], dh; ror byte ptr [rax+0x39], 0xf7; sete al; ret;
0x0008539c: add [rax], al; add [rax], al; xor eax, eax; cmp rdi, rsi; sete al; ret;
0x0008539d: add [rax], al; add [rcx], dh; ror byte ptr [rax+0x39], 0xf7; sete al; ret;
0x0008539e: add [rax], al; xor eax, eax; cmp rdi, rsi; sete al; ret;
0x0008539f: add [rcx], dh; ror byte ptr [rax+0x39], 0xf7; sete al; ret;
0x000853a0: xor eax, eax; cmp rdi, rsi; sete al; ret;
0x000853a1: ror byte ptr [rax+0x39], 0xf7; sete al; ret;
0x000853a2: cmp rdi, rsi; sete al; ret;
0x000853a3: cmp edi, esi; sete al; ret;
0x000853ed: add [rdi], eax; add [rax-0x68], cl; mov [rbx+0x10], rax; xor eax, eax; pop rbx; ret;
0x000853ef: add [rax-0x68], cl; mov [rbx+0x10], rax; xor eax, eax; pop rbx; ret;
0x000853f0: cdqe; mov [rbx+0x10], rax; xor eax, eax; pop rbx; ret;
0x000853f1: cwde; mov [rbx+0x10], rax; xor eax, eax; pop rbx; ret;
0x000853f2: mov [rbx+0x10], rax; xor eax, eax; pop rbx; ret;
0x000853f3: mov [rbx+0x10], eax; xor eax, eax; pop rbx; ret;
0x000853fa: nop [rax+rax]; mov eax, [rdi+8]; and eax, 1; mov [rsi], eax; xor eax, eax; ret;
0x000853fb: nop [rax+rax]; mov eax, [rdi+8]; and eax, 1; mov [rsi], eax; xor eax, eax; ret;
0x000853fd: add [rax], r8b; mov eax, [rdi+8]; and eax, 1; mov [rsi], eax; xor eax, eax; ret;
0x000853fe: add [rax], al; mov eax, [rdi+8]; and eax, 1; mov [rsi], eax; xor eax, eax; ret;
0x00085400: mov eax, [rdi+8]; and eax, 1; mov [rsi], eax; xor eax, eax; ret;
0x00085401: or [r11+0x68901e0], r8b; xor eax, eax; ret;
0x00085402: or [rbx+0x68901e0], al; xor eax, eax; ret;
0x00085412: add [rbx+rcx-0x7b], esi; div byte ptr [rbp+0x17]; and dword ptr [rdi+8], 0xfffffffe; xor eax, eax; ret;
0x00085414: or eax, [rbp-0x7ce88a0a]; or dh, bh; xor eax, eax; ret;
0x00085416: div byte ptr [rbp+0x17]; and dword ptr [rdi+8], 0xfffffffe; xor eax, eax; ret;
0x00085419: and dword ptr [rdi+8], 0xfffffffe; xor eax, eax; ret;
0x0008541b: or dh, bh; xor eax, eax; ret;
0x0008541e: rol bl, 0x83; or [r9], r8b; xor eax, eax; ret;
0x00085420: or dword ptr [rdi+8], 1; xor eax, eax; ret;
0x00085421: or [r9], r8b; xor eax, eax; ret;
0x00085422: or [rcx], al; xor eax, eax; ret;
0x00085423: add [rcx], esi; rol bl, 0x66; nop [rax+rax]; mov eax, 0x16; ret;
0x00085425: rol bl, 0x66; nop [rax+rax]; mov eax, 0x16; ret;
0x00085427: nop [rax+rax]; mov eax, 0x16; ret;
0x00085428: nop [rax+rax]; mov eax, 0x16; ret;
0x0008542a: test [rax], al; add [rax], al; add [rax], al; mov eax, 0x16; ret;
0x0008542b: add [rax], al; add [rax], al; add [rax+0x16], bh; ret;
0x0008542c: add [rax], al; add [rax], al; mov eax, 0x16; ret;
0x0008542d: add [rax], al; add [rax+0x16], bh; ret;
0x0008542e: add [rax], al; mov eax, 0x16; ret;
0x0008542f: add [rax+0x16], bh; ret;
0x0008543d: add [rax], al; add [rbx-0x72ef7b9], cl; and eax, 1; mov [rsi], eax; xor eax, eax; ret;
0x0008543f: add [rbx-0x72ef7b9], cl; and eax, 1; mov [rsi], eax; xor eax, eax; ret;
0x00085440: mov eax, [rdi+8]; sar eax, 1; and eax, 1; mov [rsi], eax; xor eax, eax; ret;
0x00085441: or r9b, r10b; clc; and eax, 1; mov [rsi], eax; xor eax, eax; ret;
0x00085442: or cl, dl; clc; and eax, 1; mov [rsi], eax; xor eax, eax; ret;
0x00085443: sar eax, 1; and eax, 1; mov [rsi], eax; xor eax, eax; ret;
0x00085444: clc; and eax, 1; mov [rsi], eax; xor eax, eax; ret;
0x00085445: and eax, 1; mov [rsi], eax; xor eax, eax; ret;
0x00085461: or eax, 2; mov [rdi+8], eax; xor eax, eax; ret;
0x00085463: add cl, [rcx-0x3fcef7b9]; ret;
0x00085468: rol bl, 0x66; nop [rax+rax]; and eax, 0xfffffffd; mov [rdi+8], eax; xor eax, eax; ret;
0x0008546a: nop [rax+rax]; and eax, 0xfffffffd; mov [rdi+8], eax; xor eax, eax; ret;
0x0008546b: nop [rax+rax]; and eax, 0xfffffffd; mov [rdi+8], eax; xor eax, eax; ret;
0x0008546d: add [rax], r8b; and eax, 0xfffffffd; mov [rdi+8], eax; xor eax, eax; ret;
0x0008546e: add [rax], al; and eax, 0xfffffffd; mov [rdi+8], eax; xor eax, eax; ret;
0x00085470: and eax, 0xfffffffd; mov [rdi+8], eax; xor eax, eax; ret;
0x00085472: std; mov [rdi+8], eax; xor eax, eax; ret;
0x00085473: mov [rdi+8], eax; xor eax, eax; ret;
0x00085479: nop [rax]; mov eax, [rdi]; mov [rsi], eax; xor eax, eax; ret;
0x0008547b: add byte ptr [rax], 0; add [rax], al; mov eax, [rdi]; mov [rsi], eax; xor eax, eax; ret;
0x0008547c: add [rax], al; add [rax], al; mov eax, [rdi]; mov [rsi], eax; xor eax, eax; ret;
0x0008547e: add [rax], al; mov eax, [rdi]; mov [rsi], eax; xor eax, eax; ret;
0x00085480: mov eax, [rdi]; mov [rsi], eax; xor eax, eax; ret;
0x000854cc: add [r11-0x76dff7b5], r8b; add ebx, [rbx+0x31]; rcr byte ptr [rbp+0x41], 0x5c; pop r13; pop r14; ret;
0x000854cd: add [rbx-0x76dff7b5], al; add ebx, [rbx+0x31]; rcr byte ptr [rbp+0x41], 0x5c; pop r13; pop r14; ret;
0x000854d1: and [rcx-0x3fcea4fd], cl; pop rbp; pop r12; pop r13; pop r14; ret;
0x000854d3: add ebx, [rbx+0x31]; rcr byte ptr [rbp+0x41], 0x5c; pop r13; pop r14; ret;
0x000854e1: mov eax, 0x16; pop rbp; pop r12; pop r13; pop r14; ret;
0x000854f6: add [rax], al; add dh, [rsi+5]; ret;
0x000854f8: add dh, [rsi+5]; ret;
0x000854fa: add eax, 0x401f0fc3; add [rax-0x77], cl; add eax, 0x138d89; mov dword ptr [rip+0x138da3], 1; ret;
0x000854fc: nop [rax]; mov [rip+0x138d89], rax; mov dword ptr [rip+0x138da3], 1; ret;
0x000854ff: add [rax-0x77], cl; add eax, 0x138d89; mov dword ptr [rip+0x138da3], 1; ret;
0x00085500: mov [rip+0x138d89], rax; mov dword ptr [rip+0x138da3], 1; ret;
0x00085501: mov [rip+0x138d89], eax; mov dword ptr [rip+0x138da3], 1; ret;
0x00085502: add eax, 0x138d89; mov dword ptr [rip+0x138da3], 1; ret;
0x00085504: lea edx, [rbx]; add bh, al; add eax, 0x138da3; add [rax], eax; add [rax], al; ret;
0x00085505: adc eax, [rax]; mov dword ptr [rip+0x138da3], 1; ret;
0x00085506: add bh, al; add eax, 0x138da3; add [rax], eax; add [rax], al; ret;
0x00085507: mov dword ptr [rip+0x138da3], 1; ret;
0x00085508: add eax, 0x138da3; add [rax], eax; add [rax], al; ret;
0x0008550b: adc eax, [rax]; add [rax], eax; add [rax], al; ret;
0x00085513: nop [rax+rax]; nop [rax]; mov rax, [rdi]; mov dword ptr [rip+0x138d87], 1; mov [rip+0x138d79], eax; ret;
0x00085514: nop [rax+rax]; nop [rax]; mov rax, [rdi]; mov dword ptr [rip+0x138d87], 1; mov [rip+0x138d79], eax; ret;
0x00085515: nop [rax+rax]; nop [rax]; mov rax, [rdi]; mov dword ptr [rip+0x138d87], 1; mov [rip+0x138d79], eax; ret;
0x0008551b: add [rax], al; nop [rax]; mov rax, [rdi]; mov dword ptr [rip+0x138d87], 1; mov [rip+0x138d79], eax; ret;
0x0008551d: nop [rax]; mov rax, [rdi]; mov dword ptr [rip+0x138d87], 1; mov [rip+0x138d79], eax; ret;
0x00085520: mov rax, [rdi]; mov dword ptr [rip+0x138d87], 1; mov [rip+0x138d79], eax; ret;
0x00085521: mov eax, [rdi]; mov dword ptr [rip+0x138d87], 1; mov [rip+0x138d79], eax; ret;
0x00085523: mov dword ptr [rip+0x138d87], 1; mov [rip+0x138d79], eax; ret;
0x00085524: add eax, 0x138d87; add [rax], eax; add [rax], al; mov [rip+0x138d79], eax; ret;
0x00085525: xchg [rbp+0x10013], ecx; add [rax], al; mov [rip+0x138d79], eax; ret;
0x00085527: adc eax, [rax]; add [rax], eax; add [rax], al; mov [rip+0x138d79], eax; ret;
0x00085529: add [rax], eax; add [rax], al; mov [rip+0x138d79], eax; ret;
0x0008552b: add [rax], al; mov [rip+0x138d79], eax; ret;
0x0008552d: mov [rip+0x138d79], eax; ret;
0x0008552e: add eax, 0x138d79; ret;
0x00085535: nop [rax+rax]; nop; mov rax, [rdi]; mov dword ptr [rip+0x138d67], 1; mov [rip+0x138d34], rax; ret;
0x00085536: nop [rax+rax]; nop; mov rax, [rdi]; mov dword ptr [rip+0x138d67], 1; mov [rip+0x138d34], rax; ret;
0x00085537: nop [rax+rax]; nop; mov rax, [rdi]; mov dword ptr [rip+0x138d67], 1; mov [rip+0x138d34], rax; ret;
0x0008553d: add [rax], al; nop; mov rax, [rdi]; mov dword ptr [rip+0x138d67], 1; mov [rip+0x138d34], rax; ret;
0x0008553e: add [rax-0x38f874b8], dl; add eax, 0x138d67; add [rax], eax; add [rax], al; mov [rip+0x138d34], rax; ret;
0x0008553f: nop; mov rax, [rdi]; mov dword ptr [rip+0x138d67], 1; mov [rip+0x138d34], rax; ret;
0x00085540: mov rax, [rdi]; mov dword ptr [rip+0x138d67], 1; mov [rip+0x138d34], rax; ret;
0x00085541: mov eax, [rdi]; mov dword ptr [rip+0x138d67], 1; mov [rip+0x138d34], rax; ret;
0x00085543: mov dword ptr [rip+0x138d67], 1; mov [rip+0x138d34], rax; ret;
0x00085544: add eax, 0x138d67; add [rax], eax; add [rax], al; mov [rip+0x138d34], rax; ret;
0x00085545: lea edx, [ebx]; add [rcx], al; add [rax], al; add [rax-0x77], cl; add eax, 0x138d34; ret;
0x00085546: lea edx, [rbx]; add [rcx], al; add [rax], al; add [rax-0x77], cl; add eax, 0x138d34; ret;
0x00085547: adc eax, [rax]; add [rax], eax; add [rax], al; mov [rip+0x138d34], rax; ret;
0x00085548: add [rcx], al; add [rax], al; add [rax-0x77], cl; add eax, 0x138d34; ret;
0x00085549: add [rax], eax; add [rax], al; mov [rip+0x138d34], rax; ret;
0x0008554a: add [rax], al; add [rax-0x77], cl; add eax, 0x138d34; ret;
0x0008554b: add [rax], al; mov [rip+0x138d34], rax; ret;
0x0008554c: add [rax-0x77], cl; add eax, 0x138d34; ret;
0x0008554d: mov [rip+0x138d34], rax; ret;
0x0008554e: mov [rip+0x138d34], eax; ret;
0x0008554f: add eax, 0x138d34; ret;
0x00085550: xor al, 0x8d; adc eax, [rax]; ret;
0x00085551: lea edx, [rbx]; add bl, al; nop [rax+rax]; mov rax, [rdi]; mov [rip+0x13c94b], eax; ret;
0x00085553: add bl, al; nop [rax+rax]; mov rax, [rdi]; mov [rip+0x13c94b], eax; ret;
0x00085556: nop [rax+rax]; mov rax, [rdi]; mov [rip+0x13c94b], eax; ret;
0x00085557: nop [rax+rax]; mov rax, [rdi]; mov [rip+0x13c94b], eax; ret;
0x00085558: nop [rax+rax]; mov rax, [rdi]; mov [rip+0x13c94b], eax; ret;
0x0008555a: test [rax], al; add [rax], al; add [rax], al; mov rax, [rdi]; mov [rip+0x13c94b], eax; ret;
0x0008555c: add [rax], al; add [rax], al; mov rax, [rdi]; mov [rip+0x13c94b], eax; ret;
0x0008555e: add [rax], al; mov rax, [rdi]; mov [rip+0x13c94b], eax; ret;
0x00085560: mov rax, [rdi]; mov [rip+0x13c94b], eax; ret;
0x00085561: mov eax, [rdi]; mov [rip+0x13c94b], eax; ret;
0x00085563: mov [rip+0x13c94b], eax; ret;
0x00085564: add eax, 0x13c94b; ret;
0x00085566: leave; adc eax, [rax]; ret;
0x00085568: add bl, al; nop [rax+rax]; mov rax, [rdi]; mov dword ptr [rip+0x138d37], 1; mov [rip+0x138cfc], rax; ret;
0x0008556a: nop [rax+rax]; mov rax, [rdi]; mov dword ptr [rip+0x138d37], 1; mov [rip+0x138cfc], rax; ret;
0x0008556b: nop [rax+rax]; mov rax, [rdi]; mov dword ptr [rip+0x138d37], 1; mov [rip+0x138cfc], rax; ret;
0x0008556d: add [rax], r8b; mov rax, [rdi]; mov dword ptr [rip+0x138d37], 1; mov [rip+0x138cfc], rax; ret;
0x0008556e: add [rax], al; mov rax, [rdi]; mov dword ptr [rip+0x138d37], 1; mov [rip+0x138cfc], rax; ret;
0x00085570: mov rax, [rdi]; mov dword ptr [rip+0x138d37], 1; mov [rip+0x138cfc], rax; ret;
0x00085571: mov eax, [rdi]; mov dword ptr [rip+0x138d37], 1; mov [rip+0x138cfc], rax; ret;
0x00085573: mov dword ptr [rip+0x138d37], 1; mov [rip+0x138cfc], rax; ret;
0x00085574: add eax, 0x138d37; add [rax], eax; add [rax], al; mov [rip+0x138cfc], rax; ret;
0x00085576: lea edx, [rbx]; add [rcx], al; add [rax], al; add [rax-0x77], cl; add eax, 0x138cfc; ret;
0x00085577: adc eax, [rax]; add [rax], eax; add [rax], al; mov [rip+0x138cfc], rax; ret;
0x00085578: add [rcx], al; add [rax], al; add [rax-0x77], cl; add eax, 0x138cfc; ret;
0x00085579: add [rax], eax; add [rax], al; mov [rip+0x138cfc], rax; ret;
0x0008557a: add [rax], al; add [rax-0x77], cl; add eax, 0x138cfc; ret;
0x0008557b: add [rax], al; mov [rip+0x138cfc], rax; ret;
0x0008557c: add [rax-0x77], cl; add eax, 0x138cfc; ret;
0x0008557d: mov [rip+0x138cfc], rax; ret;
0x0008557e: mov [rip+0x138cfc], eax; ret;
0x0008557f: add eax, 0x138cfc; ret;
0x00085581: mov [rbx], ss; add bl, al; nop [rax+rax]; mov rax, [rdi]; mov [rip+0x138d06], rax; ret;
0x00085583: add bl, al; nop [rax+rax]; mov rax, [rdi]; mov [rip+0x138d06], rax; ret;
0x00085586: nop [rax+rax]; mov rax, [rdi]; mov [rip+0x138d06], rax; ret;
0x00085587: nop [rax+rax]; mov rax, [rdi]; mov [rip+0x138d06], rax; ret;
0x00085588: nop [rax+rax]; mov rax, [rdi]; mov [rip+0x138d06], rax; ret;
0x0008558a: test [rax], al; add [rax], al; add [rax], al; mov rax, [rdi]; mov [rip+0x138d06], rax; ret;
0x0008558c: add [rax], al; add [rax], al; mov rax, [rdi]; mov [rip+0x138d06], rax; ret;
0x0008558e: add [rax], al; mov rax, [rdi]; mov [rip+0x138d06], rax; ret;
0x00085590: mov rax, [rdi]; mov [rip+0x138d06], rax; ret;
0x00085591: mov eax, [rdi]; mov [rip+0x138d06], rax; ret;
0x00085593: mov [rip+0x138d06], rax; ret;
0x00085594: mov [rip+0x138d06], eax; ret;
0x00085595: add eax, 0x138d06; ret;
0x00085597: lea edx, [rbx]; add bl, al; nop [rax+rax]; mov rax, [rdi]; mov [rip+0x138cee], rax; ret;
0x00085599: add bl, al; nop [rax+rax]; mov rax, [rdi]; mov [rip+0x138cee], rax; ret;
0x0008559b: nop [rax+rax]; mov rax, [rdi]; mov [rip+0x138cee], rax; ret;
0x0008559d: add [rax], r8b; mov rax, [rdi]; mov [rip+0x138cee], rax; ret;
0x0008559e: add [rax], al; mov rax, [rdi]; mov [rip+0x138cee], rax; ret;
0x000855a0: mov rax, [rdi]; mov [rip+0x138cee], rax; ret;
0x000855a1: mov eax, [rdi]; mov [rip+0x138cee], rax; ret;
0x000855a3: mov [rip+0x138cee], rax; ret;
0x000855a4: mov [rip+0x138cee], eax; ret;
0x000855a5: add eax, 0x138cee; ret;
0x000855b5: or [rax+rax], al; add [rsi+5], dh; ret;
0x000855b6: add al, 0; add [rsi+5], dh; ret;
0x000855d6: and rax, 0xfffffffffffffff0; sub rax, 0x11; shr rax, 4; lea rdx, [rax+1]; mov [rip+0x138ce3], rdx; ret;
0x000855d7: and eax, 0xfffffff0; sub rax, 0x11; shr rax, 4; lea rdx, [rax+1]; mov [rip+0x138ce3], rdx; ret;
0x000855da: sub rax, 0x11; shr rax, 4; lea rdx, [rax+1]; mov [rip+0x138ce3], rdx; ret;
0x000855db: sub eax, 0x11; shr rax, 4; lea rdx, [rax+1]; mov [rip+0x138ce3], rdx; ret;
0x000855de: shr rax, 4; lea rdx, [rax+1]; mov [rip+0x138ce3], rdx; ret;
0x000855df: shr eax, 4; lea rdx, [rax+1]; mov [rip+0x138ce3], rdx; ret;
0x000855e1: add al, 0x48; lea edx, [rax+1]; mov [rip+0x138ce3], rdx; ret;
0x000855e2: lea rdx, [rax+1]; mov [rip+0x138ce3], rdx; ret;
0x000855e3: lea edx, [rax+1]; mov [rip+0x138ce3], rdx; ret;
0x000855e4: push rax; add [rax-0x77], ecx; adc eax, 0x138ce3; ret;
0x000855e5: add [rax-0x77], ecx; adc eax, 0x138ce3; ret;
0x000855e6: mov [rip+0x138ce3], rdx; ret;
0x000855e7: mov [rip+0x138ce3], edx; ret;
0x000855e8: adc eax, 0x138ce3; ret;
0x000855f6: inc dword ptr [rax]; add [rsi+5], dh; ret;
0x000855fa: add eax, 0x401f0fc3; add [rax-0x77], cl; add eax, 0x138cd9; ret;
0x000855fc: nop [rax]; mov [rip+0x138cd9], rax; ret;
0x000855ff: add [rax-0x77], cl; add eax, 0x138cd9; ret;
0x00085600: mov [rip+0x138cd9], rax; ret;
0x00085601: mov [rip+0x138cd9], eax; ret;
0x00085602: add eax, 0x138cd9; ret;
0x00085604: mov [rbx], ss; add bl, al; nop [rax+rax]; mov rax, [rdi]; mov [rip+0x138cce], rax; ret;
0x00085606: add bl, al; nop [rax+rax]; mov rax, [rdi]; mov [rip+0x138cce], rax; ret;
0x00085608: nop [rax+rax]; mov rax, [rdi]; mov [rip+0x138cce], rax; ret;
0x0008560a: test [rax], al; add [rax], al; add [rax], al; mov rax, [rdi]; mov [rip+0x138cce], rax; ret;
0x0008560c: add [rax], al; add [rax], al; mov rax, [rdi]; mov [rip+0x138cce], rax; ret;
0x0008560e: add [rax], al; mov rax, [rdi]; mov [rip+0x138cce], rax; ret;
0x00085610: mov rax, [rdi]; mov [rip+0x138cce], rax; ret;
0x00085611: mov eax, [rdi]; mov [rip+0x138cce], rax; ret;
0x00085613: mov [rip+0x138cce], rax; ret;
0x00085614: mov [rip+0x138cce], eax; ret;
0x00085615: add eax, 0x138cce; ret;
0x00085626: add [rax], al; add [rsi+5], dh; ret;
0x00085628: add [rsi+5], dh; ret;
0x00085634: and rdx, 0xfffffffffffffff0; test rax, rax; mov eax, 0x10; cmovne rax, rdx; mov [rip+0x13c87d], rax; ret;
0x00085635: and edx, 0xfffffff0; test rax, rax; mov eax, 0x10; cmovne rax, rdx; mov [rip+0x13c87d], rax; ret;
0x00085638: test rax, rax; mov eax, 0x10; cmovne rax, rdx; mov [rip+0x13c87d], rax; ret;
0x00085639: test eax, eax; mov eax, 0x10; cmovne rax, rdx; mov [rip+0x13c87d], rax; ret;
0x0008563a: sar byte ptr [rax+0x10], 0x48; cmovne eax, edx; mov [rip+0x13c87d], rax; ret;
0x0008563b: mov eax, 0x10; cmovne rax, rdx; mov [rip+0x13c87d], rax; ret;
0x0008563c: adc [rax], al; add [rax], al; cmovne rax, rdx; mov [rip+0x13c87d], rax; ret;
0x0008563e: add [rax], al; cmovne rax, rdx; mov [rip+0x13c87d], rax; ret;
0x00085640: cmovne rax, rdx; mov [rip+0x13c87d], rax; ret;
0x00085641: cmovne eax, edx; mov [rip+0x13c87d], rax; ret;
0x00085644: mov [rip+0x13c87d], rax; ret;
0x00085645: mov [rip+0x13c87d], eax; ret;
0x00085646: add eax, 0x13c87d; ret;
0x00085648: enter 0x13, 0xc3; nop [rax]; xor eax, eax; ret;
0x0008564a: add bl, al; nop [rax]; xor eax, eax; ret;
0x00085673: add [rax], al; add [rcx-0x77], cl; ret 0xc148;
0x00085675: add [rcx-0x77], cl; ret 0xc148;
0x00085680: add eax, [rcx+0x31]; ret 0x2b8;
0x00085683: ret 0x2b8;
0x000856d2: enter 0xf48, 0x44; mov dword ptr [rcx-0x78], 0x29481004; ret 0x3948;
0x000856d6: mov dword ptr [rcx-0x78], 0x29481004; ret 0x3948;
0x000856da: adc [rax+0x29], cl; ret 0x3948;
0x000856e2: fld st, qword ptr [rbp-0x78]; adc al, 0x30; mov rax, r8; ret;
0x000856e3: mov [r8+rsi], r10b; mov rax, r8; ret;
0x000856e4: mov [rax+rsi], dl; mov rax, r8; ret;
0x000856e5: adc al, 0x30; mov rax, r8; ret;
0x000856e6: xor [rcx+rcx*4-0x40], cl; ret;
0x00085742: add [rcx+0x21], ecx; ret 0x8d4d;
0x00085783: dec dword ptr [rcx-9]; ret;
0x000857e7: test [rax+rax-0x7ab80000], dh; shl byte ptr [rbp-0x21], cl; nop [rax]; xor r8d, r8d; mov rax, r8; ret;
0x000857eb: add [rax-0x7b], cl; shl byte ptr [rbp-0x21], cl; nop [rax]; xor r8d, r8d; mov rax, r8; ret;
0x000857ee: shl byte ptr [rbp-0x21], cl; nop [rax]; xor r8d, r8d; mov rax, r8; ret;
0x0008580f: mov dl, [rbx]; add [rbp+0x39], cl; ret 0xe177;
0x00085811: add [rbp+0x39], cl; ret 0xe177;
0x00085814: ret 0xe177;
0x00085861: ret 0x4907;
0x00085884: dec dword ptr [rax+0x29]; ret 0x8d49;
0x000859a2: ficom st, dword ptr [rcx+0x1410013]; adc eax, [rbp+1]; sbb [r8+0x39], cl; ret;
0x000859a5: add [rcx+1], al; adc eax, [rbp+1]; sbb [r8+0x39], cl; ret;
0x000859a8: adc eax, [rbp+1]; sbb [r8+0x39], cl; ret;
0x000859ab: sbb [r8+0x39], cl; ret;
0x000859ac: sbb [rax+0x39], cl; ret;
0x000859b1: add ebx, [rbx+0x5d]; ret;
0x000859c3: mov rax, [rip+0x1388ee]; mov [r11+0x24], ebp; pop rbp; mov [r11+0x10], eax; mov dword ptr [r11+0x14], 0; ret;
0x000859c4: mov eax, [rip+0x1388ee]; mov [r11+0x24], ebp; pop rbp; mov [r11+0x10], eax; mov dword ptr [r11+0x14], 0; ret;
0x000859c5: add eax, 0x1388ee; mov [r11+0x24], ebp; pop rbp; mov [r11+0x10], eax; mov dword ptr [r11+0x14], 0; ret;
0x000859c6: out dx, al; mov [rbx], dl; add [rcx-0x77], al; imul esp, [rbx*2+0x10438941], 0x41; mov dword ptr [rbx+0x14], 0; ret;
0x000859c7: mov [rbx], dl; add [rcx-0x77], al; imul esp, [rbx*2+0x10438941], 0x41; mov dword ptr [rbx+0x14], 0; ret;
0x000859c8: adc eax, [rax]; mov [r11+0x24], ebp; pop rbp; mov [r11+0x10], eax; mov dword ptr [r11+0x14], 0; ret;
0x000859c9: add [rcx-0x77], al; imul esp, [rbx*2+0x10438941], 0x41; mov dword ptr [rbx+0x14], 0; ret;
0x000859ca: mov [r11+0x24], ebp; pop rbp; mov [r11+0x10], eax; mov dword ptr [r11+0x14], 0; ret;
0x000859cb: mov [rbx+0x24], ebp; pop rbp; mov [r11+0x10], eax; mov dword ptr [r11+0x14], 0; ret;
0x000859cc: imul esp, [rbx*2+0x10438941], 0x41; mov dword ptr [rbx+0x14], 0; ret;
0x000859cd: and al, 0x5d; mov [r11+0x10], eax; mov dword ptr [r11+0x14], 0; ret;
0x000859ce: pop rbp; mov [r11+0x10], eax; mov dword ptr [r11+0x14], 0; ret;
0x000859cf: mov [r11+0x10], eax; mov dword ptr [r11+0x14], 0; ret;
0x000859d0: mov [rbx+0x10], eax; mov dword ptr [r11+0x14], 0; ret;
0x000859d3: mov dword ptr [r11+0x14], 0; ret;
0x000859d4: mov dword ptr [rbx+0x14], 0; ret;
0x00085a57: mov bh, bh; jmp qword ptr [rsi+0xf];
0x00085a72: cmp cl, [rax-0x75]; push rax; or dh, dh; ret 0x7502;
0x00085a75: push rax; or dh, dh; ret 0x7502;
0x00085a76: or dh, dh; ret 0x7502;
0x00085a9d: add [rax+1], cl; enter 0x348, 0x15; and [rax+0x39480013], cl; shl byte ptr [rbp+1], 1; ret;
0x00085aa0: enter 0x348, 0x15; and [rax+0x39480013], cl; shl byte ptr [rbp+1], 1; ret;
0x00085aa4: and [rax+0x39480013], cl; shl byte ptr [rbp+1], 1; ret;
0x00085aa5: mov [rbx], dl; add [rax+0x39], cl; shl byte ptr [rbp+1], 1; ret;
0x00085aa7: add [rax+0x39], cl; shl byte ptr [rbp+1], 1; ret;
0x00085aaa: shl byte ptr [rbp+1], 1; ret;
0x00085af5: lahf; ret;
0x00085afd: dec dword ptr [rax-9]; fisttp dword ptr [rax+0x21], st; ret;
0x00085b00: fisttp dword ptr [rax+0x21], st; ret;
0x00085c08: in al, 0x5b; mov rax, r12; pop rbp; pop r12; pop r13; ret;
0x00085c09: pop rbx; mov rax, r12; pop rbp; pop r12; pop r13; ret;
0x00085c72: ret 0x13;
0x00085cf2: ret 0x1385;
0x00085d0b: test eax, 0x760013c1; cmpsd [rsi], [rdi]; add rsp, 8; ret;
0x00085d0e: add [rsi-0x59], dh; add rsp, 8; ret;
0x00085d10: cmpsd [rsi], [rdi]; add rsp, 8; ret;
0x00085e05: test [rbx], dl; add [rax+1], cl; ret;
0x00085e0e: scasb [rdi]; test [rbx], dl; add [rax+0x39], cl; ret;
0x00085e0f: test [rbx], dl; add [rax+0x39], cl; ret;
0x00085e1a: mov cl, 0x1d; mov al, [0x894c5be975001384]; rcr byte ptr [rbp+0x41], 0x5c; ret;
0x00085e1c: mov al, [0x894c5be975001384]; rcr byte ptr [rbp+0x41], 0x5c; ret;
0x00085e1f: add [rbp-0x17], dh; pop rbx; mov rax, r8; pop rbp; pop r12; ret;
0x00085e30: mov r8, rdi; pop rbx; pop rbp; mov rax, r8; pop r12; ret;
0x00085e31: mov eax, edi; pop rbx; pop rbp; mov rax, r8; pop r12; ret;
0x00085e32: clc; pop rbx; pop rbp; mov rax, r8; pop r12; ret;
0x00085fb1: mov fs:[rbx], r12; mov rax, r12; pop rbx; pop rbp; pop r12; ret;
0x00085fb2: mov [rbx], r12; mov rax, r12; pop rbx; pop rbp; pop r12; ret;
0x00085fb3: mov [rbx], esp; mov rax, r12; pop rbx; pop rbp; pop r12; ret;
0x00085fb4: and ecx, [rcx+rcx*4-0x20]; pop rbx; pop rbp; pop r12; ret;
0x0008600c: test [rbp+0x31], eax; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x13be8a]; syscall;
0x00086016: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x13be8a; syscall;
0x0008601c: add [rax], al; add [rax-0x73], cl; cmp eax, 0x13be8a; syscall;
0x0008601e: add [rax-0x73], cl; cmp eax, 0x13be8a; syscall;
0x00086021: cmp eax, 0x13be8a; syscall;
0x000860bd: mov [rax], rcx; mov rax, [rip+0x137f19]; mov [rax], rsi; mov rax, [rip+0x137e0f]; mov [rax], rdx; ret;
0x000860be: mov [rax], ecx; mov rax, [rip+0x137f19]; mov [rax], rsi; mov rax, [rip+0x137e0f]; mov [rax], rdx; ret;
0x000860bf: or [rax-0x75], cl; add eax, 0x137f19; mov [rax], rsi; mov rax, [rip+0x137e0f]; mov [rax], rdx; ret;
0x000860c0: mov rax, [rip+0x137f19]; mov [rax], rsi; mov rax, [rip+0x137e0f]; mov [rax], rdx; ret;
0x000860c1: mov eax, [rip+0x137f19]; mov [rax], rsi; mov rax, [rip+0x137e0f]; mov [rax], rdx; ret;
0x000860c2: add eax, 0x137f19; mov [rax], rsi; mov rax, [rip+0x137e0f]; mov [rax], rdx; ret;
0x000860c3: sbb [rdi+0x13], edi; add [rax-0x77], cl; xor [rax-0x75], cl; add eax, 0x137e0f; mov [rax], rdx; ret;
0x000860c5: adc eax, [rax]; mov [rax], rsi; mov rax, [rip+0x137e0f]; mov [rax], rdx; ret;
0x000860c6: add [rax-0x77], cl; xor [rax-0x75], cl; add eax, 0x137e0f; mov [rax], rdx; ret;
0x000860c7: mov [rax], rsi; mov rax, [rip+0x137e0f]; mov [rax], rdx; ret;
0x000860c8: mov [rax], esi; mov rax, [rip+0x137e0f]; mov [rax], rdx; ret;
0x000860c9: xor [rax-0x75], cl; add eax, 0x137e0f; mov [rax], rdx; ret;
0x000860ca: mov rax, [rip+0x137e0f]; mov [rax], rdx; ret;
0x000860cb: mov eax, [rip+0x137e0f]; mov [rax], rdx; ret;
0x000860cc: add eax, 0x137e0f; mov [rax], rdx; ret;
0x000860cf: adc eax, [rax]; mov [rax], rdx; ret;
0x00086194: add [rcx+0x31242444], ecx; shr al, 0x90; or bh, ch; jmp qword ptr [rbx+rcx*4+4];
0x00086198: and al, 0x31; shr al, 0x90; or bh, ch; jmp qword ptr [rbx+rcx*4+4];
0x0008619a: shr al, 0x90; or bh, ch; jmp qword ptr [rbx+rcx*4+4];
0x0008619c: nop; or bh, ch; jmp qword ptr [rbx+rcx*4+4];
0x0008619d: or bh, ch; jmp qword ptr [rbx+rcx*4+4];
0x0008619e: std; jmp qword ptr [rbx+rcx*4+4];
0x00086235: add [rax], al; add [rax-0x75], cl; adc [rax-0x7d], cl; ret 0x4801;
0x00086237: add [rax-0x75], cl; adc [rax-0x7d], cl; ret 0x4801;
0x0008623b: adc [rax-0x7d], cl; ret 0x4801;
0x0008624b: or [rcx+1], cl; ror dword ptr [rax+0xf], 1; scasd [rdi]; ret 0x8948;
0x0008624e: ror dword ptr [rax+0xf], 1; scasd [rdi]; ret 0x8948;
0x00086251: scasd [rdi]; ret 0x8948;
0x00086255: push rcx; sbb [rcx+1], cl; ret;
0x00086256: sbb [rcx+1], cl; ret;
0x0008642b: and al, ch; inc dword ptr [rdi]; std; call far fword ptr [rax+0x48];
0x0008642d: inc dword ptr [rdi]; std; call far fword ptr [rax+0x48];
0x0008642f: std; call far fword ptr [rax+0x48];
0x00086430: call far fword ptr [rax+0x48];
0x000865d5: mov gs, [rcx+0x45fffffd]; xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x000865d6: test eax, 0x45fffffd; xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x0008664e: push rdx; sbb [rax-9], cl; fimul st, dword ptr [rax+0x21]; ret 0x8948;
0x0008664f: sbb [rax-9], cl; fimul st, dword ptr [rax+0x21]; ret 0x8948;
0x00086652: fimul st, dword ptr [rax+0x21]; ret 0x8948;
0x0008665b: mov r13, [rip+0x13775e]; xor edi, edi; call qword ptr [r13];
0x0008665c: mov ebp, [rip+0x13775e]; xor edi, edi; call qword ptr [r13];
0x0008665d: sub eax, 0x13775e; xor edi, edi; call qword ptr [r13];
0x00086660: adc eax, [rax]; xor edi, edi; call qword ptr [r13];
0x00086687: nop [rax+rax]; mov rdi, rbp; neg rdi; call qword ptr [r13];
0x00086688: nop [rax+rax]; mov rdi, rbp; neg rdi; call qword ptr [r13];
0x0008668a: test [rax], al; add [rax], al; add [rax], al; mov rdi, rbp; neg rdi; call qword ptr [r13];
0x0008668b: add [rax], al; add [rax], al; add [rax-0x77], cl; out dx, eax; neg rdi; call qword ptr [r13];
0x0008668c: add [rax], al; add [rax], al; mov rdi, rbp; neg rdi; call qword ptr [r13];
0x0008668d: add [rax], al; add [rax-0x77], cl; out dx, eax; neg rdi; call qword ptr [r13];
0x0008668e: add [rax], al; mov rdi, rbp; neg rdi; call qword ptr [r13];
0x0008668f: add [rax-0x77], cl; out dx, eax; neg rdi; call qword ptr [r13];
0x00086690: mov rdi, rbp; neg rdi; call qword ptr [r13];
0x00086691: mov edi, ebp; neg rdi; call qword ptr [r13];
0x00086692: out dx, eax; neg rdi; call qword ptr [r13];
0x00086693: neg rdi; call qword ptr [r13];
0x00086694: neg edi; call qword ptr [r13];
0x000866a9: xor edi, edi; call qword ptr [r13];
0x000866ab: call qword ptr [r13];
0x000866ac: call qword ptr [rbp];
0x000866d9: nop [rax]; call rax;
0x000866db: add byte ptr [rax], 0; add [rax], al; call rax;
0x0008674b: add [rdx+rdx+0x48], dh; mov [rdx+0x28], ecx; mov rax, [rdi+0x28]; mov [rax+0x20], rdx; add rsp, 8; ret;
0x0008674e: mov [rdx+0x28], rcx; mov rax, [rdi+0x28]; mov [rax+0x20], rdx; add rsp, 8; ret;
0x0008674f: mov [rdx+0x28], ecx; mov rax, [rdi+0x28]; mov [rax+0x20], rdx; add rsp, 8; ret;
0x00086752: mov rax, [rdi+0x28]; mov [rax+0x20], rdx; add rsp, 8; ret;
0x00086753: mov eax, [rdi+0x28]; mov [rax+0x20], rdx; add rsp, 8; ret;
0x00086756: mov [rax+0x20], rdx; add rsp, 8; ret;
0x00086757: mov [rax+0x20], edx; add rsp, 8; ret;
0x00086852: adc [r8-0x7d], cl; iretd;
0x00086853: adc [rax-0x7d], cl; iretd;
0x000868a3: add ecx, [rax+0x29]; ret;
0x0008693e: cmp [rax-0x75], cl; or [rax-0x77], r9b; ret;
0x00086941: or [rax-0x77], r9b; ret;
0x00086a40: cmovs ecx, [rbx-0x173ef7be]; add al, 0x39; ret;
0x00086a47: add al, 0x39; ret;
0x00086cae: call qword ptr [rax-0x2fc272b8];
0x00086ccb: cmp ebp, 0x3145ffff; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov rdi, rbp; mov eax, 0xca; syscall;
0x00086d37: and [rax+0x39], ecx; ret 0x840f;
0x00086f6e: call qword ptr [rax+0x4cef894c];
0x000872e6: mov edx, 0xe800103d; int1; out 0xff, al; call qword ptr [rax+0x56415741];
0x000872e7: cmp eax, 0xf1e80010; out 0xff, al; call qword ptr [rax+0x56415741];
0x000872e9: add al, ch; int1; out 0xff, al; call qword ptr [rax+0x56415741];
0x000872eb: int1; out 0xff, al; call qword ptr [rax+0x56415741];
0x000872ec: out 0xff, al; call qword ptr [rax+0x56415741];
0x00087379: add [rcx-0x73], cl; dec dword ptr [r9-0x7b]; ret;
0x0008737c: dec dword ptr [r9-0x7b]; ret;
0x0008737d: dec dword ptr [rcx-0x7b]; ret;
0x00087539: xchg edx, ebx; add [rax], eax; add [rax-0x77], cl; iretd;
0x00087597: out 0xe8, al; mov [0x74fff88348000715], eax; ret;
0x00087599: mov [0x74fff88348000715], eax; ret;
0x000875c8: rcl dword ptr [rip+0x136cda], 0x83; ret 0x8b01;
0x000875d0: add [rbx+0x136cd905], ecx; add [rcx], bh; ret 0xa7e;
0x000875d6: add [rcx], bh; ret 0xa7e;
0x000875d8: ret 0xa7e;
0x0008764a: add [rax], al; mov rax, [rip+0x13676d]; mov [rsp+0x18], r11; mov rdi, rsi; mov [rsp+0x10], rsi; call qword ptr [rax];
0x0008764b: add [rax-0x75], cl; add eax, 0x13676d; mov [rsp+0x18], r11; mov rdi, rsi; mov [rsp+0x10], rsi; call qword ptr [rax];
0x0008764c: mov rax, [rip+0x13676d]; mov [rsp+0x18], r11; mov rdi, rsi; mov [rsp+0x10], rsi; call qword ptr [rax];
0x0008764d: mov eax, [rip+0x13676d]; mov [rsp+0x18], r11; mov rdi, rsi; mov [rsp+0x10], rsi; call qword ptr [rax];
0x0008764e: add eax, 0x13676d; mov [rsp+0x18], r11; mov rdi, rsi; mov [rsp+0x10], rsi; call qword ptr [rax];
0x0008764f: insd [rdi], dx; adc eax, [eax]; mov [rsp+0x18], r11; mov rdi, rsi; mov [rsp+0x10], rsi; call qword ptr [rax];
0x00087650: adc eax, [eax]; mov [rsp+0x18], r11; mov rdi, rsi; mov [rsp+0x10], rsi; call qword ptr [rax];
0x00087651: adc eax, [rax]; mov [rsp+0x18], r11; mov rdi, rsi; mov [rsp+0x10], rsi; call qword ptr [rax];
0x00087652: add [rcx+rcx*4+0x5c], cl; and al, 0x18; mov rdi, rsi; mov [rsp+0x10], rsi; call qword ptr [rax];
0x00087653: mov [rsp+0x18], r11; mov rdi, rsi; mov [rsp+0x10], rsi; call qword ptr [rax];
0x00087654: mov [rsp+0x18], ebx; mov rdi, rsi; mov [rsp+0x10], rsi; call qword ptr [rax];
0x00087655: pop rsp; and al, 0x18; mov rdi, rsi; mov [rsp+0x10], rsi; call qword ptr [rax];
0x00087656: and al, 0x18; mov rdi, rsi; mov [rsp+0x10], rsi; call qword ptr [rax];
0x00087658: mov rdi, rsi; mov [rsp+0x10], rsi; call qword ptr [rax];
0x00087659: mov edi, esi; mov [rsp+0x10], rsi; call qword ptr [rax];
0x0008765b: mov [rsp+0x10], rsi; call qword ptr [rax];
0x0008765c: mov [rsp+0x10], esi; call qword ptr [rax];
0x00087835: sbb [rax-0x7d], cl; clc; dec dword ptr [rax-0x77]; ret 0x840f;
0x00087838: clc; dec dword ptr [rax-0x77]; ret 0x840f;
0x00087839: dec dword ptr [rax-0x77]; ret 0x840f;
0x00087955: or [rax+0x29], cl; iretd;
0x00087963: mov [rdi+0x48000001], ah; mov eax, [rip+0x136451]; mov [rsp+0x10], rdx; mov rdi, r13; mov [rsp+8], r13; call qword ptr [rax];
0x00087966: add [rax], al; mov rax, [rip+0x136451]; mov [rsp+0x10], rdx; mov rdi, r13; mov [rsp+8], r13; call qword ptr [rax];
0x00087967: add [rax-0x75], cl; add eax, 0x136451; mov [rsp+0x10], rdx; mov rdi, r13; mov [rsp+8], r13; call qword ptr [rax];
0x00087968: mov rax, [rip+0x136451]; mov [rsp+0x10], rdx; mov rdi, r13; mov [rsp+8], r13; call qword ptr [rax];
0x00087969: mov eax, [rip+0x136451]; mov [rsp+0x10], rdx; mov rdi, r13; mov [rsp+8], r13; call qword ptr [rax];
0x0008796a: add eax, 0x136451; mov [rsp+0x10], rdx; mov rdi, r13; mov [rsp+8], r13; call qword ptr [rax];
0x0008796b: push rcx; adc eax, fs:[rax]; mov [rsp+0x10], rdx; mov rdi, r13; mov [rsp+8], r13; call qword ptr [rax];
0x0008796c: adc eax, fs:[rax]; mov [rsp+0x10], rdx; mov rdi, r13; mov [rsp+8], r13; call qword ptr [rax];
0x0008796d: adc eax, [rax]; mov [rsp+0x10], rdx; mov rdi, r13; mov [rsp+8], r13; call qword ptr [rax];
0x0008796e: add [rax-0x77], cl; push rsp; and al, 0x10; mov rdi, r13; mov [rsp+8], r13; call qword ptr [rax];
0x0008796f: mov [rsp+0x10], rdx; mov rdi, r13; mov [rsp+8], r13; call qword ptr [rax];
0x00087970: mov [rsp+0x10], edx; mov rdi, r13; mov [rsp+8], r13; call qword ptr [rax];
0x00087971: push rsp; and al, 0x10; mov rdi, r13; mov [rsp+8], r13; call qword ptr [rax];
0x00087972: and al, 0x10; mov rdi, r13; mov [rsp+8], r13; call qword ptr [rax];
0x00087973: adc [rcx+rcx*4-0x11], cl; mov [rsp+8], r13; call qword ptr [rax];
0x00087974: mov rdi, r13; mov [rsp+8], r13; call qword ptr [rax];
0x00087975: mov edi, ebp; mov [rsp+8], r13; call qword ptr [rax];
0x00087976: out dx, eax; mov [rsp+8], r13; call qword ptr [rax];
0x00087977: mov [rsp+8], r13; call qword ptr [rax];
0x00087978: mov [rsp+8], ebp; call qword ptr [rax];
0x00087979: insb [rdi], dx; and al, 8; call qword ptr [rax];
0x000879a2: dec dword ptr [rax-0x77]; push rsp; and al, 0x18; mov [rsp+0x10], rcx; mov [rsp+8], rdi; call rax;
0x000879a3: mov [rsp+0x18], rdx; mov [rsp+0x10], rcx; mov [rsp+8], rdi; call rax;
0x000879a4: mov [rsp+0x18], edx; mov [rsp+0x10], rcx; mov [rsp+8], rdi; call rax;
0x000879a5: push rsp; and al, 0x18; mov [rsp+0x10], rcx; mov [rsp+8], rdi; call rax;
0x000879a6: and al, 0x18; mov [rsp+0x10], rcx; mov [rsp+8], rdi; call rax;
0x000879a7: sbb [rax-0x77], cl; and al, 0x10; mov [rsp+8], rdi; call rax;
0x000879a8: mov [rsp+0x10], rcx; mov [rsp+8], rdi; call rax;
0x000879a9: mov [rsp+0x10], ecx; mov [rsp+8], rdi; call rax;
0x000879ab: and al, 0x10; mov [rsp+8], rdi; call rax;
0x000879ad: mov [rsp+8], rdi; call rax;
0x000879ae: mov [rsp+8], edi; call rax;
0x000879b0: and al, 8; call rax;
0x000879db: nop [rax+rax]; mov rax, [rip+0x1363d9]; mov [rsp+8], rdx; call qword ptr [rax];
0x000879dd: add [rax], r8b; mov rax, [rip+0x1363d9]; mov [rsp+8], rdx; call qword ptr [rax];
0x000879de: add [rax], al; mov rax, [rip+0x1363d9]; mov [rsp+8], rdx; call qword ptr [rax];
0x000879df: add [rax-0x75], cl; add eax, 0x1363d9; mov [rsp+8], rdx; call qword ptr [rax];
0x000879e0: mov rax, [rip+0x1363d9]; mov [rsp+8], rdx; call qword ptr [rax];
0x000879e1: mov eax, [rip+0x1363d9]; mov [rsp+8], rdx; call qword ptr [rax];
0x000879e2: add eax, 0x1363d9; mov [rsp+8], rdx; call qword ptr [rax];
0x000879e3: fldenv [rbx+0x13]; add [rax-0x77], cl; push rsp; and al, 8; call qword ptr [rax];
0x000879e4: movsxd edx, [rbx]; add [rax-0x77], cl; push rsp; and al, 8; call qword ptr [rax];
0x000879e5: adc eax, [rax]; mov [rsp+8], rdx; call qword ptr [rax];
0x000879e6: add [rax-0x77], cl; push rsp; and al, 8; call qword ptr [rax];
0x000879e7: mov [rsp+8], rdx; call qword ptr [rax];
0x000879e8: mov [rsp+8], edx; call qword ptr [rax];
0x000879e9: push rsp; and al, 8; call qword ptr [rax];
0x00087a09: nop [rax]; mov [rsp+0x20], rcx; call rax;
0x00087a0b: add byte ptr [rax], 0; add [rax], al; mov [rsp+0x20], rcx; call rax;
0x00087a0c: add [rax], al; add [rax], al; mov [rsp+0x20], rcx; call rax;
0x00087a0d: add [rax], al; add [rax-0x77], cl; and al, 0x20; call rax;
0x00087a0e: add [rax], al; mov [rsp+0x20], rcx; call rax;
0x00087a0f: add [rax-0x77], cl; and al, 0x20; call rax;
0x00087a10: mov [rsp+0x20], rcx; call rax;
0x00087a11: mov [rsp+0x20], ecx; call rax;
0x00087a13: and al, 0x20; call rax;
0x00087b34: pcmpeqw mm7, [rcx+0x2c74d284]; mov rax, [rip+0x13627e]; mov [rsp+8], rcx; xor edi, edi; call qword ptr [rax];
0x00087b36: mov ecx, 0x2c74d284; mov rax, [rip+0x13627e]; mov [rsp+8], rcx; xor edi, edi; call qword ptr [rax];
0x00087b38: shl byte ptr [rsp+rbp+0x48], cl; mov eax, [rip+0x13627e]; mov [rsp+8], rcx; xor edi, edi; call qword ptr [rax];
0x00087b3a: sub al, 0x48; mov eax, [rip+0x13627e]; mov [rsp+8], rcx; xor edi, edi; call qword ptr [rax];
0x00087b3b: mov rax, [rip+0x13627e]; mov [rsp+8], rcx; xor edi, edi; call qword ptr [rax];
0x00087b3c: mov eax, [rip+0x13627e]; mov [rsp+8], rcx; xor edi, edi; call qword ptr [rax];
0x00087b3d: add eax, 0x13627e; mov [rsp+8], rcx; xor edi, edi; call qword ptr [rax];
0x00087b40: adc eax, [rax]; mov [rsp+8], rcx; xor edi, edi; call qword ptr [rax];
0x00087b41: add [rax-0x77], cl; and al, 8; xor edi, edi; call qword ptr [rax];
0x00087b42: mov [rsp+8], rcx; xor edi, edi; call qword ptr [rax];
0x00087b43: mov [rsp+8], ecx; xor edi, edi; call qword ptr [rax];
0x00087b45: and al, 8; xor edi, edi; call qword ptr [rax];
0x00087b47: xor edi, edi; call qword ptr [rax];
0x00087bf9: add [rax], al; add [rbp-0x7c8f8a40], al; sub eax, 0x136f79; add [rbp-0x3d], ebx; nop [rax]; ret;
0x00087bfb: add [rbp-0x7c8f8a40], al; sub eax, 0x136f79; add [rbp-0x3d], ebx; nop [rax]; ret;
0x00087bfd: shl byte ptr [rbp+0x70], 0x83; sub eax, 0x136f79; add [rbp-0x3d], ebx; nop [rax]; ret;
0x00087c00: sub dword ptr [rip+0x136f79], 1; pop rbp; ret;
0x00087c01: sub eax, 0x136f79; add [rbp-0x3d], ebx; nop [rax]; ret;
0x00087c03: outsd dx, [rsi]; adc eax, [rax]; add [rbp-0x3d], ebx; nop [rax]; ret;
0x00087c04: adc eax, [rax]; add [rbp-0x3d], ebx; nop [rax]; ret;
0x00087c06: add [rbp-0x3d], ebx; nop [rax]; ret;
0x00087c4c: xchg [rbp+0x31], eax; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x136f1a]; syscall;
0x00087c56: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x136f1a; syscall;
0x00087c5c: add [rax], al; add [rax-0x73], cl; cmp eax, 0x136f1a; syscall;
0x00087c5e: add [rax-0x73], cl; cmp eax, 0x136f1a; syscall;
0x00087c61: cmp eax, 0x136f1a; syscall;
0x00087c63: outsd dx, [rsi]; adc eax, [rax]; syscall;
0x00087c7c: mov al, [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x136eea]; syscall;
0x00087c84: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x136eea]; syscall; pop rbp; ret;
0x00087c85: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x136eea]; syscall; pop rbp; ret;
0x00087c86: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x136eea; syscall;
0x00087c87: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0x136eea]; syscall; pop rbp; ret;
0x00087c88: add [rax], al; mov eax, 0xca; lea rdi, [rip+0x136eea]; syscall; pop rbp; ret;
0x00087c89: add [rax+0xca], bh; lea rdi, [rip+0x136eea]; syscall; pop rbp; ret;
0x00087c8a: mov eax, 0xca; lea rdi, [rip+0x136eea]; syscall; pop rbp; ret;
0x00087c8c: add [rax], al; add [rax-0x73], cl; cmp eax, 0x136eea; syscall; pop rbp; ret;
0x00087c8c: add [rax], al; add [rax-0x73], cl; cmp eax, 0x136eea; syscall;
0x00087c8d: add [rax], al; lea rdi, [rip+0x136eea]; syscall; pop rbp; ret;
0x00087c8e: add [rax-0x73], cl; cmp eax, 0x136eea; syscall;
0x00087c8e: add [rax-0x73], cl; cmp eax, 0x136eea; syscall; pop rbp; ret;
0x00087c8f: lea rdi, [rip+0x136eea]; syscall; pop rbp; ret;
0x00087c90: lea edi, [rip+0x136eea]; syscall; pop rbp; ret;
0x00087c91: cmp eax, 0x136eea; syscall; pop rbp; ret;
0x00087c91: cmp eax, 0x136eea; syscall;
0x00087c93: outsb dx, [rsi]; adc eax, [rax]; syscall; pop rbp; ret;
0x00087c93: outsb dx, [rsi]; adc eax, [rax]; syscall;
0x00087c94: adc eax, [rax]; syscall; pop rbp; ret;
0x00087e0f: add rsp, 0x10; mov rax, r12; pop rbx; pop rbp; pop r12; ret;
0x00087e10: add esp, 0x10; mov rax, r12; pop rbx; pop rbp; pop r12; ret;
0x00087f03: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x139f9d; syscall;
0x00087f09: add [rax], al; add [rax-0x73], cl; cmp eax, 0x139f9d; syscall;
0x00087f0b: add [rax-0x73], cl; cmp eax, 0x139f9d; syscall;
0x00087f0e: cmp eax, 0x139f9d; syscall;
0x00087f0f: popfq; lahf; adc eax, [rax]; syscall;
0x00087f10: lahf; adc eax, [rax]; syscall;
0x00087f12: add [rdi], cl; add eax, 0xfffee2e9; jmp qword ptr [rsi+0xf];
0x00087f14: add eax, 0xfffee2e9; jmp qword ptr [rsi+0xf];
0x00087f77: out 0xe8, eax; ret;
0x00087fe3: adc [rax+0x39], cl; ret 0xef75;
0x0008813e: fcos; dec dword ptr [rax-0x77]; ret;
0x0008814c: jmp qword ptr [rbx+rax*4+0x3c];
0x0008819e: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x139ce8]; syscall;
0x000881a8: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x139ce8; syscall;
0x000881ae: add [rax], al; add [rax-0x73], cl; cmp eax, 0x139ce8; syscall;
0x000881b0: add [rax-0x73], cl; cmp eax, 0x139ce8; syscall;
0x000881b3: cmp eax, 0x139ce8; syscall;
0x0008821a: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x139f9d]; syscall;
0x00088224: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x139c7c; syscall;
0x0008822a: add [rax], al; add [rax-0x73], cl; cmp eax, 0x139c7c; syscall;
0x0008822c: add [rax-0x73], cl; cmp eax, 0x139c7c; syscall;
0x0008822f: cmp eax, 0x139c7c; syscall;
0x00088231: pushfq; adc eax, [rax]; syscall;
0x00088356: add [rax], al; add al, ch; ret 0xf9cd;
0x00088358: add al, ch; ret 0xf9cd;
0x0008835a: ret 0xf9cd;
0x000883e8: add [rax], al; add [rbp+0x38], dh; add rsp, 0x40; pop rbp; ret;
0x000883ea: add [rbp+0x38], dh; add rsp, 0x40; pop rbp; ret;
0x0008847c: mov edx, 1; cmpxchg [rip+0x1366f8], edx; lea rax, [rip+0x1366f1]; add rsp, 0x10; pop rbp; ret;
0x0008847f: add [rax], al; cmpxchg [rip+0x1366f8], edx; lea rax, [rip+0x1366f1]; add rsp, 0x10; pop rbp; ret;
0x00088481: cmpxchg [rip+0x1366f8], edx; lea rax, [rip+0x1366f1]; add rsp, 0x10; pop rbp; ret;
0x00088483: adc eax, 0x1366f8; lea rax, [rip+0x1366f1]; add rsp, 0x10; pop rbp; ret;
0x00088484: clc; adc ax, [rax]; lea rax, [rip+0x1366f1]; add rsp, 0x10; pop rbp; ret;
0x00088485: adc ax, [rax]; lea rax, [rip+0x1366f1]; add rsp, 0x10; pop rbp; ret;
0x00088486: adc eax, [rax]; lea rax, [rip+0x1366f1]; add rsp, 0x10; pop rbp; ret;
0x00088487: add [rax-0x73], cl; add eax, 0x1366f1; add rsp, 0x10; pop rbp; ret;
0x00088488: lea rax, [rip+0x1366f1]; add rsp, 0x10; pop rbp; ret;
0x00088489: lea eax, [rip+0x1366f1]; add rsp, 0x10; pop rbp; ret;
0x0008848a: add eax, 0x1366f1; add rsp, 0x10; pop rbp; ret;
0x0008848b: int1; adc ax, [rax]; add rsp, 0x10; pop rbp; ret;
0x0008848c: adc ax, [rax]; add rsp, 0x10; pop rbp; ret;
0x0008848d: adc eax, [rax]; add rsp, 0x10; pop rbp; ret;
0x000884d6: add [rsi-0x69], edi; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x000884d8: xchg edi, eax; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x0008851e: call qword ptr [rax+0x787c031];
0x00088521: rol byte ptr [rdi+0x1f88307], 0x7e; add dword ptr [rbp+0x31], 0x1bad2; add [rax], al; mov esi, 0x81; mov eax, 0xca; syscall;
0x00088526: add [rsi-0x7f], edi; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x00088528: add dword ptr [rbp+0x31], 0x1bad2; add [rax], al; mov esi, 0x81; mov eax, 0xca; syscall;
0x00088532: add dword ptr [rax], 0xcab80000; add [rax], al; add [rdi], cl; add eax, 0xffff68e9; jmp qword ptr [rsi+0x66];
0x00088538: add [rax], al; add [rdi], cl; add eax, 0xffff68e9; jmp qword ptr [rsi+0x66];
0x0008853a: add [rdi], cl; add eax, 0xffff68e9; jmp qword ptr [rsi+0x66];
0x0008853c: add eax, 0xffff68e9; jmp qword ptr [rsi+0x66];
0x000886dc: pop rdi; xor [rax+0xf], cl; ret 0x894c;
0x000886dd: xor [rax+0xf], cl; ret 0x894c;
0x000887cd: call far fword ptr [rdx+0x13];
0x000887fa: ret 0x4a10;
0x000888a5: add [rax], al; add [rax-0x75], cl; adc [rax-0x77], cl; ret 0x8948;
0x000888a7: add [rax-0x75], cl; adc [rax-0x77], cl; ret 0x8948;
0x00088a1e: add r8d, [rax]; add dh, dh; ret 0xf01;
0x00088a1f: add eax, [rax]; add dh, dh; ret 0xf01;
0x00088a21: add dh, dh; ret 0xf01;
0x00088aa4: or [rbp-0x47bf025], al; add [rax], eax; add [rcx+0x39], cl; ret;
0x00088aa6: fisttp dword ptr [rdi], st; test bl, bh; add [rax], eax; add [rcx+0x39], cl; ret;
0x00088aa8: test bl, bh; add [rax], eax; add [rcx+0x39], cl; ret;
0x00088aa9: sti; add [rax], eax; add [rcx+0x39], cl; ret;
0x00088aaa: add [rax], eax; add [rcx+0x39], cl; ret;
0x00088bf9: or [rbx-0x7eb7a43e], eax; stc; jmp far fword ptr [rcx];
0x00088bfb: ret 0x485b;
0x00088c0c: or al, 0x83; ret 0x486e;
0x00088c0e: ret 0x486e;
0x00088c12: stc; jmp far fword ptr [rdi+0x37760000];
0x00088c13: jmp far fword ptr [rdi+0x37760000];
0x00088c21: ret 0x4877;
0x00088c44: ret 0x667c;
0x00088c71: leave; add [rbx+rcx*4+0x7f], ecx; or [rcx-0xa], al; mov dword ptr [rdi+rcx], 0x6c785; add [rcx+0x39], cl; iretd;
0x00088c72: add [rbx+rcx*4+0x7f], ecx; or [rcx-0xa], al; mov dword ptr [rdi+rcx], 0x6c785; add [rcx+0x39], cl; iretd;
0x00088c76: or [rcx-0xa], al; mov dword ptr [rdi+rcx], 0x6c785; add [rcx+0x39], cl; iretd;
0x00088c79: mov dword ptr [rdi+rcx], 0x6c785; add [rcx+0x39], cl; iretd;
0x00088c7d: mov dword ptr [rsi], 0x39490000; iretd;
0x00088c80: add [rcx+0x39], cl; iretd;
0x00088ced: add [rbx-0x72cfdbbc], cl; add [rbp-0x76f1ffbc], rcx; iretd;
0x00088cf3: add [rbp-0x76f1ffbc], rcx; iretd;
0x00088cf4: add [rbp-0x76f1ffbc], ecx; iretd;
0x00088d2d: add [rax], al; add [rax-0x7d], cl; ret 0x110;
0x00088d2f: add [rax-0x7d], cl; ret 0x110;
0x00088d51: ret 0x110;
0x00088e03: add eax, [rax]; add [rax-0x73], cl; push rbp; and [rax+0x39], cl; ret 0x860f;
0x00088e05: add [rax-0x73], cl; push rbp; and [rax+0x39], cl; ret 0x860f;
0x00088e08: push rbp; and [rax+0x39], cl; ret 0x860f;
0x00088e09: and [rax+0x39], cl; ret 0x860f;
0x00088f63: adc [rcx-0x7d], al; ret;
0x000890da: mov [0x950fd4394900135a], al; ret 0xb60f;
0x000891ed: xchg ebp, eax; ret 0x8348;
0x00089407: push rbp; ret 0xffff;
0x00089446: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x13572a; syscall;
0x0008944c: add [rax], al; add [rax-0x73], cl; cmp eax, 0x13572a; syscall;
0x0008944e: add [rax-0x73], cl; cmp eax, 0x13572a; syscall;
0x00089451: cmp eax, 0x13572a; syscall;
0x00089453: push rdi; adc eax, [rax]; syscall;
0x00089461: mov dword ptr fs:[rax], 0xc; xor eax, eax; pop rdx; pop rbp; pop r12; ret;
0x00089462: mov dword ptr [rax], 0xc; xor eax, eax; pop rdx; pop rbp; pop r12; ret;
0x00089465: add [rax], al; add [rcx], dh; rcr byte ptr [rdx+0x5d], 0x41; pop rsp; ret;
0x00089466: add [rax], al; xor eax, eax; pop rdx; pop rbp; pop r12; ret;
0x00089467: add [rcx], dh; rcr byte ptr [rdx+0x5d], 0x41; pop rsp; ret;
0x00089468: xor eax, eax; pop rdx; pop rbp; pop r12; ret;
0x00089469: rcr byte ptr [rdx+0x5d], 0x41; pop rsp; ret;
0x0008946a: pop rdx; pop rbp; pop r12; ret;
0x00089483: pop rcx; add [rax], eax; add [rax-0x7d], cl; ret 0xb817;
0x00089484: add [rax], eax; add [rax-0x7d], cl; ret 0xb817;
0x00089486: add [rax-0x7d], cl; ret 0xb817;
0x00089489: ret 0xb817;
0x0008957c: push rdi; and [rax+0x39], cl; ret 0x4273;
0x0008957d: and [rax+0x39], cl; ret 0x4273;
0x00089580: ret 0x4273;
0x0008962a: ret 0x1065;
0x00089658: in al, dx; or [rax-0x7d], cl; call qword ptr [rax];
0x00089659: or [rax-0x7d], cl; call qword ptr [rax];
0x0008965d: adc [rdi], cl; xchg ah, cl; add [rax], al; add [rax-0x7d], cl; call far fword ptr [rdi];
0x0008965f: xchg ah, cl; add [rax], al; add [rax-0x7d], cl; call far fword ptr [rdi];
0x00089660: int3; add [rax], al; add [rax-0x7d], cl; call far fword ptr [rdi];
0x000896a8: add al, ch; ret 0xfffd;
0x0008974f: mov dword ptr fs:[rax], 0xc; add rsp, 8; xor eax, eax; pop rbp; pop r12; ret;
0x00089750: mov dword ptr [rax], 0xc; add rsp, 8; xor eax, eax; pop rbp; pop r12; ret;
0x0008978a: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x1353e6; syscall;
0x00089790: add [rax], al; add [rax-0x73], cl; cmp eax, 0x1353e6; syscall;
0x00089792: add [rax-0x73], cl; cmp eax, 0x1353e6; syscall;
0x00089795: cmp eax, 0x1353e6; syscall;
0x00089796: out 0x53, al; adc eax, [rax]; syscall;
0x00089797: push rbx; adc eax, [rax]; syscall;
0x00089929: add eax, ebp; int1; iretd;
0x0008992b: int1; iretd;
0x00089955: or [rax-0x75], cl; push rbp; or [rax-0x77], cl; ret;
0x00089958: push rbp; or [rax-0x77], cl; ret;
0x0008999e: call qword ptr [rax-0x6ec272b8];
0x00089b03: or [rax-0x77], cl; ret 0x8348;
0x00089caa: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x134ec6; syscall;
0x00089cb0: add [rax], al; add [rax-0x73], cl; cmp eax, 0x134ec6; syscall;
0x00089cb2: add [rax-0x73], cl; cmp eax, 0x134ec6; syscall;
0x00089cb5: cmp eax, 0x134ec6; syscall;
0x00089ce2: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x134e8e; syscall;
0x00089ce8: add [rax], al; add [rax-0x73], cl; cmp eax, 0x134e8e; syscall;
0x00089cea: add [rax-0x73], cl; cmp eax, 0x134e8e; syscall;
0x00089ced: cmp eax, 0x134e8e; syscall;
0x00089cef: adc r8, [rax]; syscall;
0x00089de3: add esi, ebx; stosq [rdi]; pop rbp; ret;
0x00089de5: stosq [rdi]; pop rbp; ret;
0x00089de6: stosd [rdi]; pop rbp; ret;
0x00089e7e: call qword ptr [rax+0x4587c031];
0x00089ea0: add [rax], al; add [rdi], cl; add eax, 0xffff01e9; jmp qword ptr [rsi+0xf];
0x00089ea2: add [rdi], cl; add eax, 0xffff01e9; jmp qword ptr [rsi+0xf];
0x00089ea4: add eax, 0xffff01e9; jmp qword ptr [rsi+0xf];
0x00089f96: xor [rbx+0x137f022d], eax; add [rcx], al; pop rbx; ret;
0x00089f97: sub dword ptr [rip+0x137f02], 1; pop rbx; ret;
0x00089f99: add bh, [rdi+0x13]; add [rcx], al; pop rbx; ret;
0x00089fa7: add [rsi-0x2b], edi; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, ebx; syscall;
0x00089faa: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, ebx; syscall;
0x00089fab: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, ebx; syscall;
0x00089fac: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, ebx; syscall;
0x00089fad: mov edx, 1; mov esi, 0x81; mov eax, ebx; syscall;
0x00089fae: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, ebx; syscall;
0x00089faf: add [rax], al; add [rsi+0x81], bh; mov eax, ebx; syscall;
0x00089fb0: add [rax], al; mov esi, 0x81; mov eax, ebx; syscall;
0x00089fb1: add [rsi+0x81], bh; mov eax, ebx; syscall;
0x00089fb2: mov esi, 0x81; mov eax, ebx; syscall;
0x00089fb3: add dword ptr [rax], 0xd8890000; syscall;
0x00089fb4: add [rax], al; add [rcx-0x14faf028], cl; ret 0x1f0f;
0x00089fb5: add [rax], al; mov eax, ebx; syscall;
0x00089fb6: add [rcx-0x14faf028], cl; ret 0x1f0f;
0x00089fd5: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x139ce8]; syscall;
0x00089fd6: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x139ce8]; syscall;
0x00089fd7: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x139ce8]; syscall;
0x00089fd8: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x139ce8]; syscall;
0x00089fd9: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x139ce8]; syscall;
0x00089fda: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x139ce8]; syscall;
0x00089fdb: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x139ce8]; syscall;
0x00089fdc: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x139ce8]; syscall;
0x00089fdc: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x137eb2]; syscall; pop rbx; ret;
0x00089fdd: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x137eb2]; syscall; pop rbx; ret;
0x00089fdd: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x139ce8]; syscall;
0x00089fde: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x137eb2; syscall;
0x00089fdf: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0x137eb2]; syscall; pop rbx; ret;
0x00089fdf: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0x139ce8]; syscall;
0x00089fe0: add [rax], al; mov eax, 0xca; lea rdi, [rip+0x137eb2]; syscall; pop rbx; ret;
0x00089fe0: add [rax], al; mov eax, 0xca; lea rdi, [rip+0x139ce8]; syscall;
0x00089fe1: add [rax+0xca], bh; lea rdi, [rip+0x137eb2]; syscall; pop rbx; ret;
0x00089fe1: add [rax+0xca], bh; lea rdi, [rip+0x139ce8]; syscall;
0x00089fe2: mov eax, 0xca; lea rdi, [rip+0x139ce8]; syscall;
0x00089fe2: mov eax, 0xca; lea rdi, [rip+0x137eb2]; syscall; pop rbx; ret;
0x00089fe4: add [rax], al; add [rax-0x73], cl; cmp eax, 0x137eb2; syscall; pop rbx; ret;
0x00089fe4: add [rax], al; add [rax-0x73], cl; cmp eax, 0x137eb2; syscall;
0x00089fe5: add [rax], al; lea rdi, [rip+0x137eb2]; syscall; pop rbx; ret;
0x00089fe5: add [rax], al; lea rdi, [rip+0x139ce8]; syscall;
0x00089fe6: add [rax-0x73], cl; cmp eax, 0x137eb2; syscall;
0x00089fe6: add [rax-0x73], cl; cmp eax, 0x137eb2; syscall; pop rbx; ret;
0x00089fe7: lea rdi, [rip+0x139ce8]; syscall;
0x00089fe7: lea rdi, [rip+0x137eb2]; syscall; pop rbx; ret;
0x00089fe8: lea edi, [rip+0x137eb2]; syscall; pop rbx; ret;
0x00089fe8: lea edi, [rip+0x139ce8]; syscall;
0x00089fe9: cmp eax, 0x137eb2; syscall; pop rbx; ret;
0x00089fe9: cmp eax, 0x137eb2; syscall;
0x00089fea: mov dl, 0x7e; adc eax, [rax]; syscall; pop rbx; ret;
0x00089fea: mov dl, 0x7e; adc eax, [rax]; syscall;
0x00089fec: adc eax, [rax]; syscall; pop rbx; ret;
0x0008a06f: or [rax], al; add [rax-0x77], cl; ret 0x8b48;
0x0008a083: push qword ptr [rdi+rax+0x48]; mov [rip+0x137e1b], edx; mov dword ptr [rip+0x137e09], 0; ret;
0x0008a086: mov [rip+0x137e1b], rdx; mov dword ptr [rip+0x137e09], 0; ret;
0x0008a087: mov [rip+0x137e1b], edx; mov dword ptr [rip+0x137e09], 0; ret;
0x0008a088: adc eax, 0x137e1b; mov dword ptr [rip+0x137e09], 0; ret;
0x0008a089: sbb edi, [rsi+0x13]; add bh, al; add eax, 0x137e09; add [rax], al; add [rax], al; ret;
0x0008a08b: adc eax, [rax]; mov dword ptr [rip+0x137e09], 0; ret;
0x0008a08c: add bh, al; add eax, 0x137e09; add [rax], al; add [rax], al; ret;
0x0008a08d: mov dword ptr [rip+0x137e09], 0; ret;
0x0008a08e: add eax, 0x137e09; add [rax], al; add [rax], al; ret;
0x0008a091: adc eax, [rax]; add [rax], al; add [rax], al; ret;
0x0008a0d7: mov [rax], rcx; mov rax, [rip+0x133eff]; mov [rax], rsi; mov rax, [rip+0x133df5]; mov [rax], rdi; ret;
0x0008a0d8: mov [rax], ecx; mov rax, [rip+0x133eff]; mov [rax], rsi; mov rax, [rip+0x133df5]; mov [rax], rdi; ret;
0x0008a0d9: or [rax-0x75], cl; add eax, 0x133eff; mov [rax], rsi; mov rax, [rip+0x133df5]; mov [rax], rdi; ret;
0x0008a0da: mov rax, [rip+0x133eff]; mov [rax], rsi; mov rax, [rip+0x133df5]; mov [rax], rdi; ret;
0x0008a0db: mov eax, [rip+0x133eff]; mov [rax], rsi; mov rax, [rip+0x133df5]; mov [rax], rdi; ret;
0x0008a0dc: add eax, 0x133eff; mov [rax], rsi; mov rax, [rip+0x133df5]; mov [rax], rdi; ret;
0x0008a0de: adc eax, [rax]; mov [rax], rsi; mov rax, [rip+0x133df5]; mov [rax], rdi; ret;
0x0008a0df: adc eax, [rax]; mov [rax], rsi; mov rax, [rip+0x133df5]; mov [rax], rdi; ret;
0x0008a0e0: add [rax-0x77], cl; xor [rax-0x75], cl; add eax, 0x133df5; mov [rax], rdi; ret;
0x0008a0e1: mov [rax], rsi; mov rax, [rip+0x133df5]; mov [rax], rdi; ret;
0x0008a0e2: mov [rax], esi; mov rax, [rip+0x133df5]; mov [rax], rdi; ret;
0x0008a0e3: xor [rax-0x75], cl; add eax, 0x133df5; mov [rax], rdi; ret;
0x0008a0e4: mov rax, [rip+0x133df5]; mov [rax], rdi; ret;
0x0008a0e5: mov eax, [rip+0x133df5]; mov [rax], rdi; ret;
0x0008a0e6: add eax, 0x133df5; mov [rax], rdi; ret;
0x0008a0e9: adc eax, [rax]; mov [rax], rdi; ret;
0x0008a0eb: mov [rax], rdi; ret;
0x0008a0ec: mov [rax], edi; ret;
0x0008a193: add al, [rax]; add [rbx+0x4c], bl; mov eax, eax; pop rbp; pop r12; ret;
0x0008a21f: inc dword ptr [rbp+0x31]; rcr byte ptr [rbx+0x5d], 0x4c; mov eax, eax; pop r12; ret;
0x0008a220: xor r8d, r8d; pop rbx; pop rbp; mov rax, r8; pop r12; ret;
0x0008a221: xor eax, eax; pop rbx; pop rbp; mov rax, r8; pop r12; ret;
0x0008a23a: mov dword ptr fs:[rax], 0xc; mov rax, r8; pop rbx; pop rbp; pop r12; ret;
0x0008a23b: mov dword ptr [rax], 0xc; mov rax, r8; pop rbx; pop rbp; pop r12; ret;
0x0008a23e: add [rax], al; add [rcx+rcx*4-0x40], cl; pop rbx; pop rbp; pop r12; ret;
0x0008a23f: add [rax], al; mov rax, r8; pop rbx; pop rbp; pop r12; ret;
0x0008a240: add [rcx+rcx*4-0x40], cl; pop rbx; pop rbp; pop r12; ret;
0x0008a249: nop [rax]; mov rsi, [rsp+0x18]; pop rbx; pop rbp; pop r12; jmp rax;
0x0008a24e: add [rax], al; mov rsi, [rsp+0x18]; pop rbx; pop rbp; pop r12; jmp rax;
0x0008a250: mov rsi, [rsp+0x18]; pop rbx; pop rbp; pop r12; jmp rax;
0x0008a251: mov esi, [rsp+0x18]; pop rbx; pop rbp; pop r12; jmp rax;
0x0008a253: and al, 0x18; pop rbx; pop rbp; pop r12; jmp rax;
0x0008a254: sbb [rbx+0x5d], bl; pop r12; jmp rax;
0x0008a255: pop rbx; pop rbp; pop r12; jmp rax;
0x0008a30c: mov dh, 0xff; call qword ptr [rax+0x1bac031];
0x0008a30e: call qword ptr [rax+0x1bac031];
0x0008a3a8: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov rdi, r12; mov eax, 0xca; syscall;
0x0008a3de: add al, ch; cld; mov ch, 0xff; jmp qword ptr [rsi+0x66];
0x0008a3e0: cld; mov ch, 0xff; jmp qword ptr [rsi+0x66];
0x0008a3e1: mov ch, 0xff; jmp qword ptr [rsi+0x66];
0x0008a436: test ebp, edx; add [rax], al; add [rax-0x7d], cl; call qword ptr [rax];
0x0008a438: add [rax], al; add [rax-0x7d], cl; call qword ptr [rax];
0x0008a441: stosd [rdi]; add [rax], al; add [rax-0x7d], cl; call far fword ptr [rdi];
0x0008a442: add [rax], al; add [rax-0x7d], cl; call far fword ptr [rdi];
0x0008a444: add [rax-0x7d], cl; call far fword ptr [rdi];
0x0008a4a1: add al, [rax]; add [rbp+0x4c], bl; mov eax, eax; pop r12; pop r13; ret;
0x0008a4a2: add [rax], al; pop rbp; mov rax, r8; pop r12; pop r13; ret;
0x0008a4a3: add [rbp+0x4c], bl; mov eax, eax; pop r12; pop r13; ret;
0x0008a4a4: pop rbp; mov rax, r8; pop r12; pop r13; ret;
0x0008a4a5: mov rax, r8; pop r12; pop r13; ret;
0x0008a4a6: mov eax, eax; pop r12; pop r13; ret;
0x0008a4d2: add [rax], al; add [rax-0x7d], cl; jmp qword ptr [rax];
0x0008a4d4: add [rax-0x7d], cl; jmp qword ptr [rax];
0x0008a4de: call qword ptr [rax+0x48ed0148];
0x0008a4ff: add [rbp+0x31], al; rcr byte ptr [rbp+0x41], 0x5c; mov rax, r8; pop r13; ret;
0x0008a500: xor r8d, r8d; pop rbp; pop r12; mov rax, r8; pop r13; ret;
0x0008a501: xor eax, eax; pop rbp; pop r12; mov rax, r8; pop r13; ret;
0x0008a502: rcr byte ptr [rbp+0x41], 0x5c; mov rax, r8; pop r13; ret;
0x0008a503: pop rbp; pop r12; mov rax, r8; pop r13; ret;
0x0008a504: pop r12; mov rax, r8; pop r13; ret;
0x0008a505: pop rsp; mov rax, r8; pop r13; ret;
0x0008a506: mov rax, r8; pop r13; ret;
0x0008a507: mov eax, eax; pop r13; ret;
0x0008a508: rol byte ptr [rcx+0x5d], 0xc3; nop [rax]; pop rbp; pop r12; pop r13; jmp rax;
0x0008a50c: nop [rax]; pop rbp; pop r12; pop r13; jmp rax;
0x0008a50f: add [rbp+0x41], bl; pop rsp; pop r13; jmp rax;
0x0008a5c2: ret 0x1009;
0x0008a70d: paddw mm7, mm7; jmp qword ptr [rsi+0x66];
0x0008a79d: test dword ptr [rax-0x7d], 0xe9e918c4; mov ah, 0xff; jmp qword ptr [rsi+0xf];
0x0008a7a4: mov ah, 0xff; jmp qword ptr [rsi+0xf];
0x0008a7a7: nop [rax+rax]; add rsp, 0x18; ret;
0x0008a7a8: nop [rax+rax]; add rsp, 0x18; ret;
0x0008a7aa: test [rax], al; add [rax], al; add [rax], al; add rsp, 0x18; ret;
0x0008a7ac: add [rax], al; add [rax], al; add rsp, 0x18; ret;
0x0008a7b3: sbb bl, al; nop [rax]; mov rsi, [rsp+0x18]; add rsp, 0x18; jmp rax;
0x0008a7b5: nop [rax]; mov rsi, [rsp+0x18]; add rsp, 0x18; jmp rax;
0x0008a7b8: mov rsi, [rsp+0x18]; add rsp, 0x18; jmp rax;
0x0008a7b9: mov esi, [rsp+0x18]; add rsp, 0x18; jmp rax;
0x0008a7bb: and al, 0x18; add rsp, 0x18; jmp rax;
0x0008a7bd: add rsp, 0x18; jmp rax;
0x0008a7be: add esp, 0x18; jmp rax;
0x0008a8e6: add [rax], al; add [rbp-0x7cbd8a40], al; sub eax, 0x1375bc; add [rbx+0x5d], ebx; pop r12; ret;
0x0008a8e8: add [rbp-0x7cbd8a40], al; sub eax, 0x1375bc; add [rbx+0x5d], ebx; pop r12; ret;
0x0008a8ea: shl byte ptr [rbp+0x42], 0x83; sub eax, 0x1375bc; add [rbx+0x5d], ebx; pop r12; ret;
0x0008a8ed: sub dword ptr [rip+0x1375bc], 1; pop rbx; pop rbp; pop r12; ret;
0x0008a8ee: sub eax, 0x1375bc; add [rbx+0x5d], ebx; pop r12; ret;
0x0008a8ef: mov esp, 0x1001375; pop rbx; pop rbp; pop r12; ret;
0x0008a8f1: adc eax, [rax]; add [rbx+0x5d], ebx; pop r12; ret;
0x0008a8f2: add [rcx], al; pop rbx; pop rbp; pop r12; ret;
0x0008a93c: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x13be8a]; syscall;
0x0008a93d: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x13be8a]; syscall;
0x0008a93e: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x13be8a]; syscall;
0x0008a93f: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x13be8a]; syscall;
0x0008a940: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x13be8a]; syscall;
0x0008a941: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x13be8a]; syscall;
0x0008a942: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x13be8a]; syscall;
0x0008a943: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x13be8a]; syscall;
0x0008a944: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x13be8a]; syscall;
0x0008a945: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x13755b; syscall;
0x0008a946: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0x13be8a]; syscall;
0x0008a947: add [rax], al; mov eax, 0xca; lea rdi, [rip+0x13be8a]; syscall;
0x0008a948: add [rax+0xca], bh; lea rdi, [rip+0x13be8a]; syscall;
0x0008a949: mov eax, 0xca; lea rdi, [rip+0x13be8a]; syscall;
0x0008a94b: add [rax], al; add [rax-0x73], cl; cmp eax, 0x13755b; syscall;
0x0008a94c: add [rax], al; lea rdi, [rip+0x13be8a]; syscall;
0x0008a94d: add [rax-0x73], cl; cmp eax, 0x13755b; syscall;
0x0008a94e: lea rdi, [rip+0x13be8a]; syscall;
0x0008a94f: lea edi, [rip+0x13be8a]; syscall;
0x0008a950: cmp eax, 0x13755b; syscall;
0x0008abe8: sbb [rbx+0x5d], bl; pop r12; pop r13; pop r14; pop r15; jmp rax;
0x0008abea: pop rbp; pop r12; pop r13; pop r14; pop r15; jmp rax;
0x0008abeb: pop r12; pop r13; pop r14; pop r15; jmp rax;
0x0008abec: pop rsp; pop r13; pop r14; pop r15; jmp rax;
0x0008abed: pop r13; pop r14; pop r15; jmp rax;
0x0008abee: pop rbp; pop r14; pop r15; jmp rax;
0x0008abef: pop r14; pop r15; jmp rax;
0x0008abf0: pop rsi; pop r15; jmp rax;
0x0008abf1: pop r15; jmp rax;
0x0008abf2: pop rdi; jmp rax;
0x0008add1: sbb cl, ch; idiv r15b; jmp qword ptr [rsi+0xf];
0x0008ae39: add eax, 0x133032; mov dword ptr fs:[rax], 0xc; xor eax, eax; pop rbx; ret;
0x0008ae3a: xor dh, [rax]; adc eax, [rax]; mov dword ptr fs:[rax], 0xc; xor eax, eax; pop rbx; ret;
0x0008ae3c: adc eax, [rax]; mov dword ptr fs:[rax], 0xc; xor eax, eax; pop rbx; ret;
0x0008aeba: ret 0x133c;
0x0008af07: add dh, dh; ret 0x7402;
0x0008b057: nop [rax+rax]; mov rsi, [rsp+0x28]; mov rdi, r12; call rdx;
0x0008b058: nop [rax+rax]; mov rsi, [rsp+0x28]; mov rdi, r12; call rdx;
0x0008b05a: test [rax], al; add [rax], al; add [rax], al; mov rsi, [rsp+0x28]; mov rdi, r12; call rdx;
0x0008b05c: add [rax], al; add [rax], al; mov rsi, [rsp+0x28]; mov rdi, r12; call rdx;
0x0008b05e: add [rax], al; mov rsi, [rsp+0x28]; mov rdi, r12; call rdx;
0x0008b060: mov rsi, [rsp+0x28]; mov rdi, r12; call rdx;
0x0008b061: mov esi, [rsp+0x28]; mov rdi, r12; call rdx;
0x0008b063: and al, 0x28; mov rdi, r12; call rdx;
0x0008b064: sub [rcx+rcx*4-0x19], cl; call rdx;
0x0008b1ad: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov rdi, rbp; mov eax, 0xca; syscall;
0x0008b39f: in eax, dx; or [rax-0x7f], ecx; stc; jmp far fword ptr [rcx];
0x0008b3a0: or [rax-0x7f], ecx; stc; jmp far fword ptr [rcx];
0x0008b3a3: stc; jmp far fword ptr [rcx];
0x0008b3b3: stc; jmp far fword ptr [rdi-0x78f10000];
0x0008b3b4: jmp far fword ptr [rdi-0x78f10000];
0x0008b47f: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov rdi, rcx; mov eax, 0xca; syscall;
0x0008b480: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov rdi, rcx; mov eax, 0xca; syscall;
0x0008b481: xor edx, edx; mov edx, 1; mov esi, 0x81; mov rdi, rcx; mov eax, 0xca; syscall;
0x0008b482: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov rdi, rcx; mov eax, 0xca; syscall;
0x0008b483: mov edx, 1; mov esi, 0x81; mov rdi, rcx; mov eax, 0xca; syscall;
0x0008b484: add [rax], eax; add [rax], al; mov esi, 0x81; mov rdi, rcx; mov eax, 0xca; syscall;
0x0008b485: add [rax], al; add [rsi+0x81], bh; mov rdi, rcx; mov eax, 0xca; syscall;
0x0008b486: add [rax], al; mov esi, 0x81; mov rdi, rcx; mov eax, 0xca; syscall;
0x0008b487: add [rsi+0x81], bh; mov rdi, rcx; mov eax, 0xca; syscall;
0x0008b488: mov esi, 0x81; mov rdi, rcx; mov eax, 0xca; syscall;
0x0008b489: add dword ptr [rax], 0x89480000; iretd;
0x0008b48b: add [rax], al; mov rdi, rcx; mov eax, 0xca; syscall;
0x0008b48d: mov rdi, rcx; mov eax, 0xca; syscall;
0x0008b48e: mov edi, ecx; mov eax, 0xca; syscall;
0x0008b4be: call qword ptr [rax+0xfff8548];
0x0008b4dc: cmp eax, 0x1369ae; add [rax-0x77], ecx; ret 0x3974;
0x0008b4dd: scasb [rdi]; imul edx, [rbx], 0x89480100; ret 0x3974;
0x0008b4de: imul edx, [rbx], 0x89480100; ret 0x3974;
0x0008b4df: adc eax, [rax]; add [rax-0x77], ecx; ret 0x3974;
0x0008b4e1: add [rax-0x77], ecx; ret 0x3974;
0x0008b4e4: ret 0x3974;
0x0008b4f9: imul edx, [rbx], 0x48737300; lea eax, [rax-8]; ret;
0x0008b4fb: add [rbx+0x73], dh; lea rax, [rax-8]; ret;
0x0008b4fe: lea rax, [rax-8]; ret;
0x0008b4ff: lea eax, [rax-8]; ret;
0x0008b503: nop [rax+rax]; mov rax, [rsi+rax+8]; sub rdx, 8; and eax, 1; cmovne rax, rdx; ret;
0x0008b505: add [rax], r8b; mov rax, [rsi+rax+8]; sub rdx, 8; and eax, 1; cmovne rax, rdx; ret;
0x0008b506: add [rax], al; mov rax, [rsi+rax+8]; sub rdx, 8; and eax, 1; cmovne rax, rdx; ret;
0x0008b508: mov rax, [rsi+rax+8]; sub rdx, 8; and eax, 1; cmovne rax, rdx; ret;
0x0008b509: mov eax, [rsi+rax+8]; sub rdx, 8; and eax, 1; cmovne rax, rdx; ret;
0x0008b50d: sub rdx, 8; and eax, 1; cmovne rax, rdx; ret;
0x0008b50e: sub edx, 8; and eax, 1; cmovne rax, rdx; ret;
0x0008b510: or [rbx+0xf4801e0], al; ret 0xfc3;
0x0008b511: and eax, 1; cmovne rax, rdx; ret;
0x0008b513: add [rax+0xf], ecx; ret 0xfc3;
0x0008b544: xchg esp, eax; ror byte ptr [rax-0x73], 0x54; ret 0xfff;
0x0008b545: ror byte ptr [rax-0x73], 0x54; ret 0xfff;
0x0008b548: push rsp; ret 0xfff;
0x0008b549: ret 0xfff;
0x0008b56e: shl byte ptr [rbp-0x19], 0x48; lea eax, [rdx-0x10]; ret;
0x0008b570: out 0x48, eax; lea eax, [rdx-0x10]; ret;
0x0008b571: lea rax, [rdx-0x10]; ret;
0x0008b572: lea eax, [rdx-0x10]; ret;
0x0008b7e4: cwde; xor edx, [rbx]; add [rax+0x39], cl; ret;
0x0008b7e5: xor edx, [rbx]; add [rax+0x39], cl; ret;
0x0008b829: ret 0x1e8;
0x0008b852: and al, 0x31; ror byte ptr [rax-0x73], 0x35; sar cl, 0xf; add al, ch; iretd;
0x0008b854: ror byte ptr [rax-0x73], 0x35; sar cl, 0xf; add al, ch; iretd;
0x0008b858: sar cl, 0xf; add al, ch; iretd;
0x0008b859: stc; verw ax; iretd;
0x0008b85a: verw ax; iretd;
0x0008b8b4: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov rdi, rbx; mov eax, 0xca; syscall;
0x0008b8b5: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov rdi, rbx; mov eax, 0xca; syscall;
0x0008b8b6: xor edx, edx; mov edx, 1; mov esi, 0x81; mov rdi, rbx; mov eax, 0xca; syscall;
0x0008b8b7: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov rdi, rbx; mov eax, 0xca; syscall;
0x0008b8b8: mov edx, 1; mov esi, 0x81; mov rdi, rbx; mov eax, 0xca; syscall;
0x0008b8b9: add [rax], eax; add [rax], al; mov esi, 0x81; mov rdi, rbx; mov eax, 0xca; syscall;
0x0008b8ba: add [rax], al; add [rsi+0x81], bh; mov rdi, rbx; mov eax, 0xca; syscall;
0x0008b8bb: add [rax], al; mov esi, 0x81; mov rdi, rbx; mov eax, 0xca; syscall;
0x0008b8bc: add [rsi+0x81], bh; mov rdi, rbx; mov eax, 0xca; syscall;
0x0008b8bd: mov esi, 0x81; mov rdi, rbx; mov eax, 0xca; syscall;
0x0008b8be: add dword ptr [rax], 0x89480000; fistp qword ptr [rax+0xca], st; syscall;
0x0008b8bf: add [rax], al; add [rax-0x77], cl; fistp qword ptr [rax+0xca], st; syscall;
0x0008b8c0: add [rax], al; mov rdi, rbx; mov eax, 0xca; syscall;
0x0008b8c1: add [rax-0x77], cl; fistp qword ptr [rax+0xca], st; syscall;
0x0008b8c2: mov rdi, rbx; mov eax, 0xca; syscall;
0x0008b8c3: mov edi, ebx; mov eax, 0xca; syscall;
0x0008b8c4: fistp qword ptr [rax+0xca], st; syscall;
0x0008b94c: dec dword ptr [rbp-0x77cf7bb]; or [rdi+0x4b], esi; lea rdx, [rip+0xf9340]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x0008b94e: or [r11+0x4b7709f8], r8b; lea rdx, [rip+0xf9340]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x0008b94f: or [rbx+0x4b7709f8], al; lea rdx, [rip+0xf9340]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x0008b951: clc; or [rdi+0x4b], esi; lea rdx, [rip+0xf9340]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x0008b952: or [rdi+0x4b], esi; lea rdx, [rip+0xf9340]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x0008b955: lea rdx, [rip+0xf9340]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x0008b956: lea edx, [rip+0xf9340]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x0008b957: adc eax, 0xf9340; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x0008b959: xchg ebx, eax; str [rax+0x63]; add al, 0x82; add rax, rdx; jmp rax;
0x0008b95a: str [rax+0x63]; add al, 0x82; add rax, rdx; jmp rax;
0x0008b98e: fisttp dword ptr [rax+0xf], st; ret 0x8948;
0x0008b9c0: sub dword ptr [rip+0x1331b9], 1; add rsp, 8; mov eax, r8d; pop rbx; pop rbp; ret;
0x0008b9c2: mov ecx, 0x1001331; add rsp, 8; mov eax, r8d; pop rbx; pop rbp; ret;
0x0008b9c5: add [rcx], al; add rsp, 8; mov eax, r8d; pop rbx; pop rbp; ret;
0x0008bae0: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x1353e6]; syscall;
0x0008bae1: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x136f1a]; syscall;
0x0008bae2: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x136f1a]; syscall;
0x0008bae3: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x136f1a]; syscall;
0x0008bae4: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x136f1a]; syscall;
0x0008bae5: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x136f1a]; syscall;
0x0008bae6: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x136f1a]; syscall;
0x0008bae7: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x136f1a]; syscall;
0x0008bae8: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x136f1a]; syscall;
0x0008bae9: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x136f1a]; syscall;
0x0008baea: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x133086; syscall;
0x0008baeb: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0x136f1a]; syscall;
0x0008baec: add [rax], al; mov eax, 0xca; lea rdi, [rip+0x136f1a]; syscall;
0x0008baed: add [rax+0xca], bh; lea rdi, [rip+0x136f1a]; syscall;
0x0008baee: mov eax, 0xca; lea rdi, [rip+0x136f1a]; syscall;
0x0008baf0: add [rax], al; add [rax-0x73], cl; cmp eax, 0x133086; syscall;
0x0008baf1: add [rax], al; lea rdi, [rip+0x136f1a]; syscall;
0x0008baf2: add [rax-0x73], cl; cmp eax, 0x133086; syscall;
0x0008baf3: lea rdi, [rip+0x136f1a]; syscall;
0x0008baf4: lea edi, [rip+0x136f1a]; syscall;
0x0008baf5: cmp eax, 0x133086; syscall;
0x0008baf6: xchg [rax], dh; adc eax, [rax]; syscall;
0x0008baf7: xor [rbx], dl; add [rdi], cl; add eax, 0xfffec6e9; jmp qword ptr [rsi+0x66];
0x0008baf9: add [rdi], cl; add eax, 0xfffec6e9; jmp qword ptr [rsi+0x66];
0x0008bafb: add eax, 0xfffec6e9; jmp qword ptr [rsi+0x66];
0x0008bb41: dec dword ptr [rax-0x77]; ret 0xcb8;
0x0008bb44: ret 0xcb8;
0x0008bb49: add [rax-0x7b], cl; shl byte ptr [rbp+rax+0x48], cl; mov [rbx], edx; xor eax, eax; pop rbx; ret;
0x0008bb4c: shl byte ptr [rbp+rax+0x48], cl; mov [rbx], edx; xor eax, eax; pop rbx; ret;
0x0008bb4e: add eax, 0x31138948; rcr byte ptr [rbx-0x3d], 0x66; nop [rax+rax]; mov eax, 0x16; pop rbx; ret;
0x0008bb4f: mov [rbx], rdx; xor eax, eax; pop rbx; ret;
0x0008bb50: mov [rbx], edx; xor eax, eax; pop rbx; ret;
0x0008bb51: adc esi, [rcx]; rcr byte ptr [rbx-0x3d], 0x66; nop [rax+rax]; mov eax, 0x16; pop rbx; ret;
0x0008bb53: rcr byte ptr [rbx-0x3d], 0x66; nop [rax+rax]; mov eax, 0x16; pop rbx; ret;
0x0008bb56: nop [rax+rax]; mov eax, 0x16; pop rbx; ret;
0x0008bb57: nop [rax+rax]; mov eax, 0x16; pop rbx; ret;
0x0008bb58: nop [rax+rax]; mov eax, 0x16; pop rbx; ret;
0x0008bb5a: test [rax], al; add [rax], al; add [rax], al; mov eax, 0x16; pop rbx; ret;
0x0008bb5b: add [rax], al; add [rax], al; add [rax+0x16], bh; pop rbx; ret;
0x0008bb5c: add [rax], al; add [rax], al; mov eax, 0x16; pop rbx; ret;
0x0008bb5d: add [rax], al; add [rax+0x16], bh; pop rbx; ret;
0x0008bb5e: add [rax], al; mov eax, 0x16; pop rbx; ret;
0x0008bb5f: add [rax+0x16], bh; pop rbx; ret;
0x0008bb60: mov eax, 0x16; pop rbx; ret;
0x0008bbb8: add [rdx], bh; cmp rax, 0xffffffffffffffff; cmove rax, rdx; add rsp, 8; ret;
0x0008bbb9: mov edx, 0; cmp rax, 0xffffffffffffffff; cmove rax, rdx; add rsp, 8; ret;
0x0008bbba: add [rax], al; add [rax], al; cmp rax, 0xffffffffffffffff; cmove rax, rdx; add rsp, 8; ret;
0x0008bbbb: add [rax], al; add [rax-0x7d], cl; clc; dec dword ptr [rax+0xf]; ret 0x8348;
0x0008bbbc: add [rax], al; cmp rax, 0xffffffffffffffff; cmove rax, rdx; add rsp, 8; ret;
0x0008bbbd: add [rax-0x7d], cl; clc; dec dword ptr [rax+0xf]; ret 0x8348;
0x0008bbbe: cmp rax, 0xffffffffffffffff; cmove rax, rdx; add rsp, 8; ret;
0x0008bbbf: cmp eax, 0xffffffff; cmove rax, rdx; add rsp, 8; ret;
0x0008bbc0: clc; dec dword ptr [rax+0xf]; ret 0x8348;
0x0008bbf9: mov [rdx+0x18], rax; mov ecx, 0xfedabeeb; add rax, [rdx+0x10]; xor rax, rcx; mov [rdx+8], rax; ret;
0x0008bbfa: mov [rdx+0x18], eax; mov ecx, 0xfedabeeb; add rax, [rdx+0x10]; xor rax, rcx; mov [rdx+8], rax; ret;
0x0008bbfb: sbb [rcx-0x1254115], dil; add rax, [rdx+0x10]; xor rax, rcx; mov [rdx+8], rax; ret;
0x0008bbfc: sbb [rcx-0x1254115], bh; add rax, [rdx+0x10]; xor rax, rcx; mov [rdx+8], rax; ret;
0x0008bbfd: mov ecx, 0xfedabeeb; add rax, [rdx+0x10]; xor rax, rcx; mov [rdx+8], rax; ret;
0x0008bc02: add rax, [rdx+0x10]; xor rax, rcx; mov [rdx+8], rax; ret;
0x0008bc03: add eax, [rdx+0x10]; xor rax, rcx; mov [rdx+8], rax; ret;
0x0008bc05: adc [rax+0x31], cl; enter 0x8948, 0x42; or bl, al; xchg ax, ax; mov [rip+0x1362c1], rax; ret;
0x0008bc06: xor rax, rcx; mov [rdx+8], rax; ret;
0x0008bc07: xor eax, ecx; mov [rdx+8], rax; ret;
0x0008bc08: enter 0x8948, 0x42; or bl, al; xchg ax, ax; mov [rip+0x1362c1], rax; ret;
0x0008bc09: mov [rdx+8], rax; ret;
0x0008bc0a: mov [rdx+8], eax; ret;
0x0008bc0c: or bl, al; xchg ax, ax; mov [rip+0x1362c1], rax; ret;
0x0008bc0e: xchg ax, ax; mov [rip+0x1362c1], rax; ret;
0x0008bc0f: nop; mov [rip+0x1362c1], rax; ret;
0x0008bc10: mov [rip+0x1362c1], rax; ret;
0x0008bc11: mov [rip+0x1362c1], eax; ret;
0x0008bc12: add eax, 0x1362c1; ret;
0x0008bc13: shl dword ptr [rdx+0x13], 0; ret;
0x0008bd24: out 0xff, eax; adc eax, 0x1361b5; mov dword ptr [rip+0x13619f], 1; mov eax, r12d; pop r12; ret;
0x0008bd26: adc eax, 0x1361b5; mov dword ptr [rip+0x13619f], 1; mov eax, r12d; pop r12; ret;
0x0008bd27: mov ch, 0x61; adc eax, [rax]; mov dword ptr [rip+0x13619f], 1; mov eax, r12d; pop r12; ret;
0x0008bd2c: add eax, 0x13619f; add [rax], eax; add [rax], al; mov eax, r12d; pop r12; ret;
0x0008bd4d: ret 0xe574;
0x0008be09: mov dword ptr [rip+0x1360bd], 1; pop rbx; pop rbp; pop r12; ret;
0x0008be0b: mov ebp, 0x1001360; add [rax], al; add [rbx+0x5d], bl; pop r12; ret;
0x0008be0e: add [rcx], al; add [rax], al; add [rbx+0x5d], bl; pop r12; ret;
0x0008bed6: ror byte ptr [rax-0x77], 1; iretd;
0x0008bf30: adc [rcx-0x77], cl; rcr byte ptr [rbx+0x5d], 0x4c; mov eax, eax; pop r12; ret;
0x0008bf31: mov r8, rax; pop rbx; pop rbp; mov rax, r8; pop r12; ret;
0x0008bf32: mov eax, eax; pop rbx; pop rbp; mov rax, r8; pop r12; ret;
0x0008bf33: rcr byte ptr [rbx+0x5d], 0x4c; mov eax, eax; pop r12; ret;
0x0008bf34: pop rbx; pop rbp; mov rax, r8; pop r12; ret;
0x0008bf35: pop rbp; mov rax, r8; pop r12; ret;
0x0008bf36: mov rax, r8; pop r12; ret;
0x0008bf37: mov eax, eax; pop r12; ret;
0x0008bf71: add rsp, 0x10; mov rax, r8; pop rbx; pop rbp; pop r12; ret;
0x0008bf72: add esp, 0x10; mov rax, r8; pop rbx; pop rbp; pop r12; ret;
0x0008bf74: adc [rcx+rcx*4-0x40], cl; pop rbx; pop rbp; pop r12; ret;
0x0008bf75: mov rax, r8; pop rbx; pop rbp; pop r12; ret;
0x0008bf76: mov eax, eax; pop rbx; pop rbp; pop r12; ret;
0x0008bf9c: adc [rbp+0x31], al; rcr byte ptr [rbx+0x4c], 0x89; rcr byte ptr [rbp+0x41], 0x5c; ret;
0x0008bf9d: xor r8d, r8d; pop rbx; mov rax, r8; pop rbp; pop r12; ret;
0x0008bf9e: xor eax, eax; pop rbx; mov rax, r8; pop rbp; pop r12; ret;
0x0008bf9f: rcr byte ptr [rbx+0x4c], 0x89; rcr byte ptr [rbp+0x41], 0x5c; ret;
0x0008bfe4: xor [rax-0x77], ecx; add ecx, [rax-0x7b]; ror byte ptr [rdi], 0x84; iretd;
0x0008bfe7: add ecx, [rax-0x7b]; ror byte ptr [rdi], 0x84; iretd;
0x0008c05a: dec dword ptr [rax+0x31]; ret 0x894c;
0x0008c073: add rsp, 0x18; mov r8, rax; pop rbx; pop r12; mov rax, r8; ret;
0x0008c074: add esp, 0x18; mov r8, rax; pop rbx; pop r12; mov rax, r8; ret;
0x0008c076: sbb [rcx-0x77], cl; rcr byte ptr [rbx+0x41], 0x5c; mov rax, r8; ret;
0x0008c077: mov r8, rax; pop rbx; pop r12; mov rax, r8; ret;
0x0008c078: mov eax, eax; pop rbx; pop r12; mov rax, r8; ret;
0x0008c079: rcr byte ptr [rbx+0x41], 0x5c; mov rax, r8; ret;
0x0008c07a: pop rbx; pop r12; mov rax, r8; ret;
0x0008c07b: pop r12; mov rax, r8; ret;
0x0008c07c: pop rsp; mov rax, r8; ret;
0x0008c0ab: mov dword ptr fs:[rax], 0xc; add rsp, 0x18; mov rax, r8; pop rbx; pop r12; ret;
0x0008c0ac: mov dword ptr [rax], 0xc; add rsp, 0x18; mov rax, r8; pop rbx; pop r12; ret;
0x0008c0b0: add [rax], al; add rsp, 0x18; mov rax, r8; pop rbx; pop r12; ret;
0x0008c0b2: add rsp, 0x18; mov rax, r8; pop rbx; pop r12; ret;
0x0008c0b3: add esp, 0x18; mov rax, r8; pop rbx; pop r12; ret;
0x0008c0b5: sbb [rcx+rcx*4-0x40], cl; pop rbx; pop r12; ret;
0x0008c0d8: add rsp, 0x18; xor r8d, r8d; mov rax, r8; pop rbx; pop r12; ret;
0x0008c0d9: add esp, 0x18; xor r8d, r8d; mov rax, r8; pop rbx; pop r12; ret;
0x0008c0db: sbb [rbp+0x31], al; ror byte ptr [rcx+rcx*4-0x40], 0x5b; pop r12; ret;
0x0008c0dc: xor r8d, r8d; mov rax, r8; pop rbx; pop r12; ret;
0x0008c0dd: xor eax, eax; mov rax, r8; pop rbx; pop r12; ret;
0x0008c0de: ror byte ptr [rcx+rcx*4-0x40], 0x5b; pop r12; ret;
0x0008c0df: mov rax, r8; pop rbx; pop r12; ret;
0x0008c0e0: mov eax, eax; pop rbx; pop r12; ret;
0x0008c0e1: rcr byte ptr [rbx+0x41], 0x5c; ret;
0x0008c16d: xchg [rip-0x76b7ffed], ebx; add ecx, [rax-0x7b]; shl byte ptr [rdi+rsi+0x4c], 0x89; out 0x48, al; mov edi, ebp; call rax;
0x0008c16e: sbb eax, 0x89480013; add ecx, [rax-0x7b]; shl byte ptr [rdi+rsi+0x4c], 0x89; out 0x48, al; mov edi, ebp; call rax;
0x0008c170: add [rax-0x77], cl; add ecx, [rax-0x7b]; shl byte ptr [rdi+rsi+0x4c], 0x89; out 0x48, al; mov edi, ebp; call rax;
0x0008c173: add ecx, [rax-0x7b]; shl byte ptr [rdi+rsi+0x4c], 0x89; out 0x48, al; mov edi, ebp; call rax;
0x0008c176: shl byte ptr [rdi+rsi+0x4c], 0x89; out 0x48, al; mov edi, ebp; call rax;
0x0008c27c: test [rdi], ah; add [rax], eax; add [rcx+rcx*4-6], cl; mov rdi, r12; call rax;
0x0008c27e: add [rax], eax; add [rcx+rcx*4-6], cl; mov rdi, r12; call rax;
0x0008c27f: add [rax], al; mov rdx, r15; mov rdi, r12; call rax;
0x0008c280: add [rcx+rcx*4-6], cl; mov rdi, r12; call rax;
0x0008c281: mov rdx, r15; mov rdi, r12; call rax;
0x0008c282: mov edx, edi; mov rdi, r12; call rax;
0x0008c283: cli; mov rdi, r12; call rax;
0x0008c30e: mov esi, 0x8948feda; and [rbp+rcx*4+0x60], cl; xor [rax+0x31], cl; ret 0x8948;
0x0008c310: dec byte ptr [rax-0x77]; and [rbp+rcx*4+0x60], cl; xor [rax+0x31], cl; ret 0x8948;
0x0008c314: and [rbp+rcx*4+0x60], cl; xor [rax+0x31], cl; ret 0x8948;
0x0008c318: xor [rax+0x31], cl; ret 0x8948;
0x0008c427: add [rdi], cl; test [rcx+0x48000000], esi; add esp, 0x10; mov eax, r12d; pop r12; ret;
0x0008c429: test [rcx+0x48000000], esi; add esp, 0x10; mov eax, r12d; pop r12; ret;
0x0008c42a: mov cl, 0; add [rax], al; add rsp, 0x10; mov eax, r12d; pop r12; ret;
0x0008c42c: add [rax], al; add rsp, 0x10; mov eax, r12d; pop r12; ret;
0x0008c42e: add rsp, 0x10; mov eax, r12d; pop r12; ret;
0x0008c42f: add esp, 0x10; mov eax, r12d; pop r12; ret;
0x0008c431: adc [rcx+rcx*4-0x20], al; pop r12; ret;
0x0008c4f8: inc dword ptr [rbp-0x38f58a40]; add eax, 0x1359c9; add [rax], eax; add [rax], al; add rsp, 8; ret;
0x0008c4fa: shl byte ptr [rbp+0xa], 0xc7; add eax, 0x1359c9; add [rax], eax; add [rax], al; add rsp, 8; ret;
0x0008c4fc: or al, bh; add eax, 0x1359c9; add [rax], eax; add [rax], al; add rsp, 8; ret;
0x0008c4fd: mov dword ptr [rip+0x1359c9], 1; add rsp, 8; ret;
0x0008c4fe: add eax, 0x1359c9; add [rax], eax; add [rax], al; add rsp, 8; ret;
0x0008c500: pop rcx; adc eax, [rax]; add [rax], eax; add [rax], al; add rsp, 8; ret;
0x0008c501: adc eax, [rax]; add [rax], eax; add [rax], al; add rsp, 8; ret;
0x0008c538: ret 0x6be2;
0x0008c554: out 0xff, eax; adc eax, 0x135985; mov dword ptr [rip+0x13596f], 1; mov eax, r12d; pop r12; ret;
0x0008c556: adc eax, 0x135985; mov dword ptr [rip+0x13596f], 1; mov eax, r12d; pop r12; ret;
0x0008c558: pop rcx; adc eax, [rax]; mov dword ptr [rip+0x13596f], 1; mov eax, r12d; pop r12; ret;
0x0008c559: adc eax, [rax]; mov dword ptr [rip+0x13619f], 1; mov eax, r12d; pop r12; ret;
0x0008c55b: mov dword ptr [rip+0x13619f], 1; mov eax, r12d; pop r12; ret;
0x0008c55c: add eax, 0x13596f; add [rax], eax; add [rax], al; mov eax, r12d; pop r12; ret;
0x0008c55f: adc eax, [rax]; add [rax], eax; add [rax], al; mov eax, r12d; pop r12; ret;
0x0008c560: add [rcx], al; add [rax], al; add [rcx+rcx*4-0x20], al; pop r12; ret;
0x0008c561: add [rax], eax; add [rax], al; mov eax, r12d; pop r12; ret;
0x0008c562: add [rax], al; add [rcx+rcx*4-0x20], al; pop r12; ret;
0x0008c58d: ret 0xb275;
0x0008c5e5: cmpxchg [rip+0x13594c], edx; add rsp, 8; mov rax, r12; pop rbx; pop r12; ret;
0x0008c5e7: adc eax, 0x13594c; add rsp, 8; mov rax, r12; pop rbx; pop r12; ret;
0x0008c5ea: adc eax, [rax]; add rsp, 8; mov rax, r12; pop rbx; pop r12; ret;
0x0008c67c: mov al, 0x8a; stc; dec dword ptr [rbx+rcx*4+0x73]; sbb [rax-0x77], cl; ret 0x8d48;
0x0008c67d: mov bh, cl; dec dword ptr [rbx+rcx*4+0x73]; sbb [rax-0x77], cl; ret 0x8d48;
0x0008c67e: stc; dec dword ptr [rbx+rcx*4+0x73]; sbb [rax-0x77], cl; ret 0x8d48;
0x0008c67f: dec dword ptr [rbx+rcx*4+0x73]; sbb [rax-0x77], cl; ret 0x8d48;
0x0008c683: sbb [rax-0x77], cl; ret 0x8d48;
0x0008c7ed: test [rsi+0x4c000000], ah; mov edi, ebp; mov rdx, rbp; mov rsi, r12; call rax;
0x0008c7ee: cmpsb [rsi], [rdi]; add [rax], al; add [rcx+rcx*4-0x11], cl; mov rdx, rbp; mov rsi, r12; call rax;
0x0008c7ef: add [rax], al; add [rcx+rcx*4-0x11], cl; mov rdx, rbp; mov rsi, r12; call rax;
0x0008c7f0: add [rax], al; mov rdi, r13; mov rdx, rbp; mov rsi, r12; call rax;
0x0008c7f1: add [rcx+rcx*4-0x11], cl; mov rdx, rbp; mov rsi, r12; call rax;
0x0008c7f2: mov rdi, r13; mov rdx, rbp; mov rsi, r12; call rax;
0x0008c7f3: mov edi, ebp; mov rdx, rbp; mov rsi, r12; call rax;
0x0008c7f4: out dx, eax; mov rdx, rbp; mov rsi, r12; call rax;
0x0008c7f5: mov rdx, rbp; mov rsi, r12; call rax;
0x0008c7f6: mov edx, ebp; mov rsi, r12; call rax;
0x0008c7f8: mov rsi, r12; call rax;
0x0008c7f9: mov esi, esp; call rax;
0x0008c8c6: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x135662; syscall;
0x0008c8cc: add [rax], al; add [rax-0x73], cl; cmp eax, 0x135662; syscall;
0x0008c8ce: add [rax-0x73], cl; cmp eax, 0x135662; syscall;
0x0008c8d1: cmp eax, 0x135662; syscall;
0x0008c8d3: push rsi; adc eax, [rax]; syscall;
0x0008c95a: test [rcx+0x48000000], ah; mov esi, ebp; mov rdi, r12; call rax;
0x0008c95c: add [rax], al; add [rax-0x77], cl; out dx, al; mov rdi, r12; call rax;
0x0008c95d: add [rax], al; mov rsi, rbp; mov rdi, r12; call rax;
0x0008c95e: add [rax-0x77], cl; out dx, al; mov rdi, r12; call rax;
0x0008c95f: mov rsi, rbp; mov rdi, r12; call rax;
0x0008c960: mov esi, ebp; mov rdi, r12; call rax;
0x0008c961: out dx, al; mov rdi, r12; call rax;
0x0008c962: mov rdi, r12; call rax;
0x0008c963: mov edi, esp; call rax;
0x0008c9bd: shr eax, cl; verw ax; push 0xffffffffffffffa2; cld; jmp qword ptr [rbx+rcx*4+4];
0x0008c9bf: verw ax; push 0xffffffffffffffa2; cld; jmp qword ptr [rbx+rcx*4+4];
0x0008c9c0: add al, ch; push 0xffffffffffffffa2; cld; jmp qword ptr [rbx+rcx*4+4];
0x0008c9c2: push 0xffffffffffffffa2; cld; jmp qword ptr [rbx+rcx*4+4];
0x0008ca26: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x135502; syscall;
0x0008ca2c: add [rax], al; add [rax-0x73], cl; cmp eax, 0x135502; syscall;
0x0008ca2e: add [rax-0x73], cl; cmp eax, 0x135502; syscall;
0x0008ca31: cmp eax, 0x135502; syscall;
0x0008ca33: push rbp; adc eax, [rax]; syscall;
0x0008cac0: add [rax], al; mov rdx, rbp; mov rsi, r14; mov rdi, r13; call rax;
0x0008cac2: mov rdx, rbp; mov rsi, r14; mov rdi, r13; call rax;
0x0008cac3: mov edx, ebp; mov rsi, r14; mov rdi, r13; call rax;
0x0008cac5: mov rsi, r14; mov rdi, r13; call rax;
0x0008cac6: mov esi, esi; mov rdi, r13; call rax;
0x0008cb62: cld; jmp qword ptr [rbx+rcx*4+4];
0x0008cc28: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x1352f6]; syscall;
0x0008cc32: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x1352f6; syscall;
0x0008cc38: add [rax], al; add [rax-0x73], cl; cmp eax, 0x1352f6; syscall;
0x0008cc3a: add [rax-0x73], cl; cmp eax, 0x1352f6; syscall;
0x0008cc3d: cmp eax, 0x1352f6; syscall;
0x0008cc3f: push rdx; adc eax, [rax]; syscall;
0x0008cd02: ror byte ptr [rdi], 0x84; lahf; add [rax], al; add [rcx+rcx*4-0x1a], cl; mov rdi, rbp; call rax;
0x0008cd04: test [rdi+0x4c000000], bl; mov esi, esp; mov rdi, rbp; call rax;
0x0008cd05: lahf; add [rax], al; add [rcx+rcx*4-0x1a], cl; mov rdi, rbp; call rax;
0x0008cd06: add [rax], al; add [rcx+rcx*4-0x1a], cl; mov rdi, rbp; call rax;
0x0008cd07: add [rax], al; mov rsi, r12; mov rdi, rbp; call rax;
0x0008cd08: add [rcx+rcx*4-0x1a], cl; mov rdi, rbp; call rax;
0x0008cdc4: mov [rbp+0x31], al; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x13515a]; syscall;
0x0008cdce: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x13515a; syscall;
0x0008cdd4: add [rax], al; add [rax-0x73], cl; cmp eax, 0x13515a; syscall;
0x0008cdd6: add [rax-0x73], cl; cmp eax, 0x13515a; syscall;
0x0008cdd9: cmp eax, 0x13515a; syscall;
0x0008cdda: pop rdx; push rcx; adc eax, [rax]; syscall;
0x0008cdf4: mov es, [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x13512a]; syscall;
0x0008cdf5: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x135662]; syscall;
0x0008cdf6: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x135662]; syscall;
0x0008cdf7: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x135662]; syscall;
0x0008cdf8: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x135662]; syscall;
0x0008cdf9: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x135662]; syscall;
0x0008cdfa: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x135662]; syscall;
0x0008cdfb: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x135662]; syscall;
0x0008cdfc: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x135662]; syscall;
0x0008cdfd: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x135662]; syscall;
0x0008cdfe: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x13512a; syscall;
0x0008cdff: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0x135662]; syscall;
0x0008ce00: add [rax], al; mov eax, 0xca; lea rdi, [rip+0x135662]; syscall;
0x0008ce01: add [rax+0xca], bh; lea rdi, [rip+0x135662]; syscall;
0x0008ce02: mov eax, 0xca; lea rdi, [rip+0x135662]; syscall;
0x0008ce04: add [rax], al; add [rax-0x73], cl; cmp eax, 0x13512a; syscall;
0x0008ce05: add [rax], al; lea rdi, [rip+0x135662]; syscall;
0x0008ce06: add [rax-0x73], cl; cmp eax, 0x13512a; syscall;
0x0008ce07: lea rdi, [rip+0x135662]; syscall;
0x0008ce08: lea edi, [rip+0x135662]; syscall;
0x0008ce09: cmp eax, 0x13512a; syscall;
0x0008ce0b: push rcx; adc eax, [rax]; syscall;
0x0008ce0c: adc eax, [rax]; syscall;
0x0008ce3f: fld st, qword ptr [rdi]; or [rax], al; nop [rax+rax]; xchg ax, ax; ret;
0x0008ce41: or [rax], al; nop [rax+rax]; xchg ax, ax; ret;
0x0008ce42: add [rsi+0x66], ah; nop [rax+rax]; xchg ax, ax; ret;
0x0008cf5e: adc [rbx+0x134fab05], cl; add [rbp+0x485774c0], al; add esp, 8; pop rbp; pop r12; ret;
0x0008cf64: add [rbp+0x485774c0], al; add esp, 8; pop rbp; pop r12; ret;
0x0008cf68: push rdi; add rsp, 8; pop rbp; pop r12; ret;
0x0008cfe2: or bl, [rdx]; sti; jmp qword ptr [rsi+0x2e];
0x0008cfe3: sbb bh, bl; jmp qword ptr [rsi+0x2e];
0x0008d0a1: mov ch, bh; str [rax-0x77]; ret 0xc031;
0x0008d0a2: std; str [rax-0x77]; ret 0xc031;
0x0008d0a3: str [rax-0x77]; ret 0xc031;
0x0008d0ea: mov [rbx+0x40], r8; and byte ptr [rbx+0x50], 0xfe; movsxd rdi, esi; mov [rbx+0x30], eax; mov [rbx], rdi; call rcx;
0x0008d0eb: mov [rbx+0x40], eax; and byte ptr [rbx+0x50], 0xfe; movsxd rdi, esi; mov [rbx+0x30], eax; mov [rbx], rdi; call rcx;
0x0008d0ee: and byte ptr [rbx+0x50], 0xfe; movsxd rdi, esi; mov [rbx+0x30], eax; mov [rbx], rdi; call rcx;
0x0008d0ef: movsxd edx, [rax-2]; movsxd rdi, esi; mov [rbx+0x30], eax; mov [rbx], rdi; call rcx;
0x0008d0f2: movsxd rdi, esi; mov [rbx+0x30], eax; mov [rbx], rdi; call rcx;
0x0008d0f3: movsxd edi, esi; mov [rbx+0x30], eax; mov [rbx], rdi; call rcx;
0x0008d0f5: mov [rbx+0x30], eax; mov [rbx], rdi; call rcx;
0x0008d0f8: mov [rbx], rdi; call rcx;
0x0008d0f9: mov [rbx], edi; call rcx;
0x0008d156: sldt [rax]; add bl, ch; or byte ptr [rdi], 0x1f; add [rax-0x75], cl; add eax, 0x130de9; call qword ptr [rax];
0x0008d157: add [rax], al; add bl, ch; or byte ptr [rdi], 0x1f; add [rax-0x75], cl; add eax, 0x130de9; call qword ptr [rax];
0x0008d159: add bl, ch; or byte ptr [rdi], 0x1f; add [rax-0x75], cl; add eax, 0x130de9; call qword ptr [rax];
0x0008d15b: or byte ptr [rdi], 0x1f; add [rax-0x75], cl; add eax, 0x130de9; call qword ptr [rax];
0x0008d15c: nop [rax]; mov rax, [rip+0x130de9]; call qword ptr [rax];
0x0008d15f: add [rax-0x75], cl; add eax, 0x130de9; call qword ptr [rax];
0x0008d162: add eax, 0x130de9; call qword ptr [rax];
0x0008d1a1: or byte ptr [rbx+0x50], 1; movsxd rsi, esi; mov [rbx+0x30], eax; mov [rbx], rsi; mov [rbx+0x48], rdi; call rcx;
0x0008d1a2: push r8; add [rax+0x63], ecx; test byte ptr [rcx-0x76b7cfbd], 0x33; mov [rbx+0x48], rdi; call rcx;
0x0008d1a3: push rax; add [rax+0x63], ecx; test byte ptr [rcx-0x76b7cfbd], 0x33; mov [rbx+0x48], rdi; call rcx;
0x0008d1a4: add [rax+0x63], ecx; test byte ptr [rcx-0x76b7cfbd], 0x33; mov [rbx+0x48], rdi; call rcx;
0x0008d1a5: movsxd rsi, esi; mov [rbx+0x30], eax; mov [rbx], rsi; mov [rbx+0x48], rdi; call rcx;
0x0008d1a6: movsxd esi, esi; mov [rbx+0x30], eax; mov [rbx], rsi; mov [rbx+0x48], rdi; call rcx;
0x0008d1a7: test byte ptr [rcx-0x76b7cfbd], 0x33; mov [rbx+0x48], rdi; call rcx;
0x0008d1a8: mov [rbx+0x30], eax; mov [rbx], rsi; mov [rbx+0x48], rdi; call rcx;
0x0008d1ab: mov [rbx], rsi; mov [rbx+0x48], rdi; call rcx;
0x0008d1ac: mov [rbx], esi; mov [rbx+0x48], rdi; call rcx;
0x0008d1ae: mov [rbx+0x48], rdi; call rcx;
0x0008d1af: mov [rbx+0x48], edi; call rcx;
0x0008d217: nop [rax+rax]; mov rax, [rip+0x130d29]; call qword ptr [rax];
0x0008d218: nop [rax+rax]; mov rax, [rip+0x130d29]; call qword ptr [rax];
0x0008d21a: test [rax], al; add [rax], al; add [rax], al; mov rax, [rip+0x130d29]; call qword ptr [rax];
0x0008d21b: add [rax], al; add [rax], al; add [rax-0x75], cl; add eax, 0x130d29; call qword ptr [rax];
0x0008d21c: add [rax], al; add [rax], al; mov rax, [rip+0x130d29]; call qword ptr [rax];
0x0008d21d: add [rax], al; add [rax-0x75], cl; add eax, 0x130d29; call qword ptr [rax];
0x0008d21e: add [rax], al; mov rax, [rip+0x130d29]; call qword ptr [rax];
0x0008d21f: add [rax-0x75], cl; add eax, 0x130d29; call qword ptr [rax];
0x0008d222: add eax, 0x130d29; call qword ptr [rax];
0x0008d274: fadd st, dword ptr [rax]; add [rax], al; mov rdi, [rdi+0x48]; mov rsi, rbp; call rax;
0x0008d276: add [rax], al; mov rdi, [rdi+0x48]; mov rsi, rbp; call rax;
0x0008d278: mov rdi, [rdi+0x48]; mov rsi, rbp; call rax;
0x0008d279: mov edi, [rdi+0x48]; mov rsi, rbp; call rax;
0x0008d27c: mov rsi, rbp; call rax;
0x0008d27d: mov esi, ebp; call rax;
0x0008d27e: out dx, al; call rax;
0x0008d2dc: adc [rax-0x77], cl; ret 0x8348;
0x0008d339: sbb [rax+0x5bfd5063], al; pop rbp; pop r12; pop r13; pop r14; ret;
0x0008d347: nop [rax+rax]; mov rdi, rbp; call rax;
0x0008d348: nop [rax+rax]; mov rdi, rbp; call rax;
0x0008d34a: test [rax], al; add [rax], al; add [rax], al; mov rdi, rbp; call rax;
0x0008d34b: add [rax], al; add [rax], al; add [rax-0x77], cl; out dx, eax; call rax;
0x0008d34c: add [rax], al; add [rax], al; mov rdi, rbp; call rax;
0x0008d34d: add [rax], al; add [rax-0x77], cl; out dx, eax; call rax;
0x0008d34e: add [rax], al; mov rdi, rbp; call rax;
0x0008d34f: add [rax-0x77], cl; out dx, eax; call rax;
0x0008d360: dec dword ptr [rax-0x75]; add eax, 0x130be8; call qword ptr [rax];
0x0008d361: mov rax, [rip+0x130de9]; call qword ptr [rax];
0x0008d362: mov eax, [rip+0x130de9]; call qword ptr [rax];
0x0008d363: add eax, 0x130be8; call qword ptr [rax];
0x0008d366: adc eax, [rax]; call qword ptr [rax];
0x0008d36e: call qword ptr [rax+0x8468b49];
0x0008d381: mov rdi, [rbx+0x48]; mov rsi, r14; call rax;
0x0008d382: mov edi, [rbx+0x48]; mov rsi, r14; call rax;
0x0008d385: mov rsi, r14; call rax;
0x0008d386: mov esi, esi; call rax;
0x0008d38c: mov rdi, r14; call rax;
0x0008d3bd: or [rax-0x7b], cl; shl byte ptr [rbp-0x13], 0x31; rol bl, 0x66; nop [rax+rax]; mov eax, 1; ret;
0x0008d3c0: shl byte ptr [rbp-0x13], 0x31; rol bl, 0x66; nop [rax+rax]; mov eax, 1; ret;
0x0008d3c2: in eax, dx; xor eax, eax; ret;
0x0008d3c4: rol bl, 0x66; nop [rax+rax]; mov eax, 1; ret;
0x0008d3c6: nop [rax+rax]; mov eax, 1; ret;
0x0008d3c7: nop [rax+rax]; mov eax, 1; ret;
0x0008d3d2: add [rax], al; add bl, al; ret;
0x0008d3f4: nop [rax]; mov rdi, [rbx+0x48]; call rax;
0x0008d3f5: nop [rax]; mov rdi, [rbx+0x48]; call rax;
0x0008d3f8: mov rdi, [rbx+0x48]; call rax;
0x0008d3f9: mov edi, [rbx+0x48]; call rax;
0x0008d420: push r8; add [rbp-0x2d], esi; mov rdi, rsi; call rax;
0x0008d421: push rax; add [rbp-0x2d], esi; mov rdi, rsi; call rax;
0x0008d422: add [rbp-0x2d], esi; mov rdi, rsi; call rax;
0x0008d425: mov rdi, rsi; call rax;
0x0008d426: mov edi, esi; call rax;
0x0008d438: ret 0xf98f;
0x0008d43a: stc; call far fword ptr [rbx+0x5d];
0x0008d450: mov [rbx+0x20], rax; mov [rbx+8], rsi; pop rbx; pop rbp; pop r12; ret;
0x0008d451: mov [rbx+0x20], eax; mov [rbx+8], rsi; pop rbx; pop rbp; pop r12; ret;
0x0008d454: mov [rbx+8], rsi; pop rbx; pop rbp; pop r12; ret;
0x0008d455: mov [rbx+8], esi; pop rbx; pop rbp; pop r12; ret;
0x0008d472: add [rcx+0x29], al; ror byte ptr [rax-0x75], 0x40; or [rax-0x7b], cl; shl byte ptr [rbp-0xf], 0x44; mov eax, eax; ret;
0x0008d475: ror byte ptr [rax-0x75], 0x40; or [rax-0x7b], cl; shl byte ptr [rbp-0xf], 0x44; mov eax, eax; ret;
0x0008d479: or [rax-0x7b], cl; shl byte ptr [rbp-0xf], 0x44; mov eax, eax; ret;
0x0008d47c: shl byte ptr [rbp-0xf], 0x44; mov eax, eax; ret;
0x0008d47e: int1; mov eax, r8d; ret;
0x0008d49a: add eax, 0xf97ba0e9; dec dword ptr [rax-0x75]; add eax, 0x1309c9; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret;
0x0008d49c: mov al, [0x9c9058b48fff97b]; adc eax, [rax]; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret;
0x0008d49e: stc; dec dword ptr [rax-0x75]; add eax, 0x1309c9; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret;
0x0008d49f: dec dword ptr [rax-0x75]; add eax, 0x1309c9; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret;
0x0008d4a0: mov rax, [rip+0x1309c9]; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret;
0x0008d4a1: mov eax, [rip+0x1309c9]; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret;
0x0008d4a2: add eax, 0x1309c9; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret;
0x0008d4a4: or [rbx], edx; add [rdi+rax*8], ah; or al, 0; add [rax], al; xor eax, eax; ret;
0x0008d4a5: adc eax, [rax]; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret;
0x0008d4a6: add [rdi+rax*8], ah; or al, 0; add [rax], al; xor eax, eax; ret;
0x0008d4a7: mov dword ptr fs:[rax], 0xc; xor eax, eax; ret;
0x0008d4a8: mov dword ptr [rax], 0xc; xor eax, eax; ret;
0x0008d4a9: add [rax+rax], cl; add [rax], al; xor eax, eax; ret;
0x0008d4aa: or al, 0; add [rax], al; xor eax, eax; ret;
0x0008d4f8: add edi, [rax+1]; mov [rbx+8], rbp; pop rbx; pop rbp; pop r12; ret;
0x0008d4f9: mov eax, 1; mov [rbx+8], rbp; pop rbx; pop rbp; pop r12; ret;
0x0008d4fb: add [rax], al; add [rax-0x77], cl; imul ecx, [rax], 0x5b; pop rbp; pop r12; ret;
0x0008d4fc: add [rax], al; mov [rbx+8], rbp; pop rbx; pop rbp; pop r12; ret;
0x0008d4fd: add [rax-0x77], cl; imul ecx, [rax], 0x5b; pop rbp; pop r12; ret;
0x0008d4fe: mov [rbx+8], rbp; pop rbx; pop rbp; pop r12; ret;
0x0008d4ff: mov [rbx+8], ebp; pop rbx; pop rbp; pop r12; ret;
0x0008d500: imul ecx, [rax], 0x5b; pop rbp; pop r12; ret;
0x0008d521: xor eax, eax; mov qword ptr [rbx+8], 0x400; pop rbx; pop rbp; pop r12; ret;
0x0008d522: ror byte ptr [rax-0x39], 0x43; or [rax], al; add al, 0; add [rbx+0x5d], bl; pop r12; ret;
0x0008d523: mov qword ptr [rbx+8], 0x400; pop rbx; pop rbp; pop r12; ret;
0x0008d524: mov dword ptr [rbx+8], 0x400; pop rbx; pop rbp; pop r12; ret;
0x0008d525: or [r8], al; add al, 0; add [rbx+0x5d], bl; pop r12; ret;
0x0008d526: or [rax], al; add al, 0; add [rbx+0x5d], bl; pop r12; ret;
0x0008d527: add [rax+rax], al; add [rbx+0x5d], bl; pop r12; ret;
0x0008d528: add al, 0; add [rbx+0x5d], bl; pop r12; ret;
0x0008d572: imul ecx, [rax], 0x5b; pop rbp; pop r12; pop r13; pop r14; ret;
0x0008d62b: or [rax-0x77], cl; add edi, [rax+1]; pop rbx; pop rbp; pop r12; ret;
0x0008d62c: mov [rbx], rax; mov eax, 1; pop rbx; pop rbp; pop r12; ret;
0x0008d62d: mov [rbx], eax; mov eax, 1; pop rbx; pop rbp; pop r12; ret;
0x0008d62e: add edi, [rax+1]; pop rbx; pop rbp; pop r12; ret;
0x0008d673: mov dword ptr fs:[rax], 0xc; xor eax, eax; pop rbx; pop rbp; pop r12; ret;
0x0008d674: mov dword ptr [rax], 0xc; xor eax, eax; pop rbx; pop rbp; pop r12; ret;
0x0008d797: add [rax-0x77], cl; ret 0xd148;
0x0008d79a: ret 0xd148;
0x0008d9a8: test [rax-7], bh; call far fword ptr [rbx+0x44];
0x0008d9aa: stc; call far fword ptr [rbx+0x44];
0x0008d9e4: ror byte ptr [rdi], 0x92; ret 0xf083;
0x0008d9e6: xchg edx, eax; ret 0xf083;
0x0008d9e7: ret 0xf083;
0x0008d9ea: add [rax-0x7b], ecx; ror byte ptr [rdi], cl; xchg esp, eax; ret 0xd084;
0x0008d9ed: ror byte ptr [rdi], cl; xchg esp, eax; ret 0xd084;
0x0008d9ef: xchg esp, eax; ret 0xd084;
0x0008d9f0: ret 0xd084;
0x0008d9fd: or [rdx+0x10], dh; mov [r8], rsi; mov rax, rdi; ret;
0x0008d9ff: adc [rcx-0x77], cl; xor [rax-0x77], cl; clc; ret;
0x0008da00: mov [r8], rsi; mov rax, rdi; ret;
0x0008da01: mov [rax], esi; mov rax, rdi; ret;
0x0008da02: xor [rax-0x77], cl; clc; ret;
0x0008da07: nop [rax+rax]; mov qword ptr [r8], 0; xor eax, eax; mov qword ptr [r8+8], 0; ret;
0x0008da08: nop [rax+rax]; mov qword ptr [r8], 0; xor eax, eax; mov qword ptr [r8+8], 0; ret;
0x0008da0c: add [rax], al; add [rax], al; mov qword ptr [r8], 0; xor eax, eax; mov qword ptr [r8+8], 0; ret;
0x0008da0e: add [rax], al; mov qword ptr [r8], 0; xor eax, eax; mov qword ptr [r8+8], 0; ret;
0x0008da10: mov qword ptr [r8], 0; xor eax, eax; mov qword ptr [r8+8], 0; ret;
0x0008da11: mov dword ptr [rax], 0; xor eax, eax; mov qword ptr [r8+8], 0; ret;
0x0008da13: add [rax], al; add [rax], al; xor eax, eax; mov qword ptr [r8+8], 0; ret;
0x0008da15: add [rax], al; xor eax, eax; mov qword ptr [r8+8], 0; ret;
0x0008da17: xor eax, eax; mov qword ptr [r8+8], 0; ret;
0x0008da19: mov qword ptr [r8+8], 0; ret;
0x0008da1a: mov dword ptr [rax+8], 0; ret;
0x0008da4e: ret 0x772;
0x0008dac6: add rsp, 8; mov rax, r13; mov rdx, r12; pop r12; pop r13; ret;
0x0008dac7: add esp, 8; mov rax, r13; mov rdx, r12; pop r12; pop r13; ret;
0x0008dac9: or [rcx+rcx*4-0x18], cl; mov rdx, r12; pop r12; pop r13; ret;
0x0008daca: mov rax, r13; mov rdx, r12; pop r12; pop r13; ret;
0x0008dacb: mov eax, ebp; mov rdx, r12; pop r12; pop r13; ret;
0x0008dacd: mov rdx, r12; pop r12; pop r13; ret;
0x0008dace: mov edx, esp; pop r12; pop r13; ret;
0x0008db58: add al, ch; ret 0x8fb;
0x0008db5a: ret 0x8fb;
0x0008dbab: adc [rbp+0x16], dh; test byte ptr [rcx+0x71], 2; lea rax, [rip+0x179b7]; lea rdx, [rip+0x10020]; cmovne rax, rdx; ret;
0x0008dbae: test byte ptr [rcx+0x71], 2; lea rax, [rip+0x179b7]; lea rdx, [rip+0x10020]; cmovne rax, rdx; ret;
0x0008dbb1: add cl, [rax-0x73]; add eax, 0x179b7; lea rdx, [rip+0x10020]; cmovne rax, rdx; ret;
0x0008dbb2: lea rax, [rip+0x179b7]; lea rdx, [rip+0x10020]; cmovne rax, rdx; ret;
0x0008dbb3: lea eax, [rip+0x179b7]; lea rdx, [rip+0x10020]; cmovne rax, rdx; ret;
0x0008dbb4: add eax, 0x179b7; lea rdx, [rip+0x10020]; cmovne rax, rdx; ret;
0x0008dbb5: mov bh, 0x79; add [rax], eax; lea rdx, [rip+0x10020]; cmovne rax, rdx; ret;
0x0008dbb7: add [rax], eax; lea rdx, [rip+0x10020]; cmovne rax, rdx; ret;
0x0008dbb8: add [rax-0x73], cl; adc eax, 0x10020; cmovne rax, rdx; ret;
0x0008dbb9: lea rdx, [rip+0x10020]; cmovne rax, rdx; ret;
0x0008dbba: lea edx, [rip+0x10020]; cmovne rax, rdx; ret;
0x0008dbbb: adc eax, 0x10020; cmovne rax, rdx; ret;
0x0008dbbc: and [rax], al; add [rax], eax; cmovne rax, rdx; ret;
0x0008dbbd: add [rcx], al; add [rax+0xf], cl; ret 0x66c3;
0x0008dbfd: sbb esi, esi; or esp, 0x40000000; lea rax, [rip+0xf4f4]; lea rdx, [rip+0xda30d]; cmovne rax, rdx; ret;
0x0008dbfe: test byte ptr [rcx+0xcc], 0x40; lea rax, [rip+0xf4f4]; lea rdx, [rip+0xda30d]; cmovne rax, rdx; ret;
0x0008dbff: or esp, 0x40000000; lea rax, [rip+0xf4f4]; lea rdx, [rip+0xda30d]; cmovne rax, rdx; ret;
0x0008dc01: add [rax], al; add [rax+0x48], al; lea eax, [rip+0xf4f4]; lea rdx, [rip+0xda30d]; cmovne rax, rdx; ret;
0x0008dc02: add [rax], al; lea rax, [rip+0xf4f4]; lea rdx, [rip+0xda30d]; cmovne rax, rdx; ret;
0x0008dc03: add [rax+0x48], al; lea eax, [rip+0xf4f4]; lea rdx, [rip+0xda30d]; cmovne rax, rdx; ret;
0x0008dc05: lea rax, [rip+0xf4f4]; lea rdx, [rip+0xda30d]; cmovne rax, rdx; ret;
0x0008dc06: lea eax, [rip+0xf4f4]; lea rdx, [rip+0xda30d]; cmovne rax, rdx; ret;
0x0008dc07: add eax, 0xf4f4; lea rdx, [rip+0xda30d]; cmovne rax, rdx; ret;
0x0008dc08: hlt; hlt; add [rax], al; lea rdx, [rip+0xda30d]; cmovne rax, rdx; ret;
0x0008dc09: hlt; add [rax], al; lea rdx, [rip+0xda30d]; cmovne rax, rdx; ret;
0x0008dc0a: add [rax], al; lea rdx, [rip+0xda30d]; cmovne rax, rdx; ret;
0x0008dc0b: add [rax-0x73], cl; adc eax, 0xda30d; cmovne rax, rdx; ret;
0x0008dc0c: lea rdx, [rip+0xda30d]; cmovne rax, rdx; ret;
0x0008dc0d: lea edx, [rip+0xda30d]; cmovne rax, rdx; ret;
0x0008dc0e: adc eax, 0xda30d; cmovne rax, rdx; ret;
0x0008dc0f: or eax, 0x48000da3; cmovne eax, edx; ret;
0x0008dc11: or eax, 0x450f4800; ret 0xfc3;
0x0008dc2a: ret 0xcd3;
0x0008dc5b: adc [rbp+0x16], dh; test byte ptr [rcx+0x71], 2; lea rax, [rip+0x6fc7]; lea rdx, [rip+0xacce0]; cmovne rax, rdx; ret;
0x0008dc5e: test byte ptr [rcx+0x71], 2; lea rax, [rip+0x6fc7]; lea rdx, [rip+0xacce0]; cmovne rax, rdx; ret;
0x0008dc61: add cl, [rax-0x73]; add eax, 0x6fc7; lea rdx, [rip+0xacce0]; cmovne rax, rdx; ret;
0x0008dc62: lea rax, [rip+0x6fc7]; lea rdx, [rip+0xacce0]; cmovne rax, rdx; ret;
0x0008dc63: lea eax, [rip+0x6fc7]; lea rdx, [rip+0xacce0]; cmovne rax, rdx; ret;
0x0008dc64: add eax, 0x6fc7; lea rdx, [rip+0xacce0]; cmovne rax, rdx; ret;
0x0008dc66: outsd dx, [rsi]; add [rax], al; lea rdx, [rip+0xacce0]; cmovne rax, rdx; ret;
0x0008dc67: add [rax], al; lea rdx, [rip+0xacce0]; cmovne rax, rdx; ret;
0x0008dc68: add [rax-0x73], cl; adc eax, 0xacce0; cmovne rax, rdx; ret;
0x0008dc69: lea rdx, [rip+0xacce0]; cmovne rax, rdx; ret;
0x0008dc6a: lea edx, [rip+0xacce0]; cmovne rax, rdx; ret;
0x0008dc6b: adc eax, 0xacce0; cmovne rax, rdx; ret;
0x0008dc6d: int3; or al, [rax]; cmovne rax, rdx; ret;
0x0008dccb: adc [rbp+0x16], dh; test byte ptr [rcx+0x71], 2; lea rax, [rip+0x148a7]; lea rdx, [rip+0xbe860]; cmovne rax, rdx; ret;
0x0008dcce: test byte ptr [rcx+0x71], 2; lea rax, [rip+0x148a7]; lea rdx, [rip+0xbe860]; cmovne rax, rdx; ret;
0x0008dcd1: add cl, [rax-0x73]; add eax, 0x148a7; lea rdx, [rip+0xbe860]; cmovne rax, rdx; ret;
0x0008dcd2: lea rax, [rip+0x148a7]; lea rdx, [rip+0xbe860]; cmovne rax, rdx; ret;
0x0008dcd3: lea eax, [rip+0x148a7]; lea rdx, [rip+0xbe860]; cmovne rax, rdx; ret;
0x0008dcd4: add eax, 0x148a7; lea rdx, [rip+0xbe860]; cmovne rax, rdx; ret;
0x0008dcd5: cmpsd [rsi], [rdi]; add [rax], rax; lea rdx, [rip+0xbe860]; cmovne rax, rdx; ret;
0x0008dcd6: add [rax], rax; lea rdx, [rip+0xbe860]; cmovne rax, rdx; ret;
0x0008dcd7: add [rax], eax; lea rdx, [rip+0xbe860]; cmovne rax, rdx; ret;
0x0008dcd8: add [rax-0x73], cl; adc eax, 0xbe860; cmovne rax, rdx; ret;
0x0008dcd9: lea rdx, [rip+0xbe860]; cmovne rax, rdx; ret;
0x0008dcda: lea edx, [rip+0xbe860]; cmovne rax, rdx; ret;
0x0008dcdb: adc eax, 0xbe860; cmovne rax, rdx; ret;
0x0008dcf0: mov rax, [rip+0x130169]; lea rdx, [rip+0xccf62]; test byte ptr [rax+0x72], 0x10; lea rax, [rip+0x19747]; cmovne rax, rdx; ret;
0x0008dcf1: mov eax, [rip+0x130169]; lea rdx, [rip+0xccf62]; test byte ptr [rax+0x72], 0x10; lea rax, [rip+0x19747]; cmovne rax, rdx; ret;
0x0008dcf2: add eax, 0x130169; lea rdx, [rip+0xccf62]; test byte ptr [rax+0x72], 0x10; lea rax, [rip+0x19747]; cmovne rax, rdx; ret;
0x0008dcf3: imul eax, [rcx], 0x8d480013; adc eax, 0xccf62; test byte ptr [rax+0x72], 0x10; lea rax, [rip+0x19747]; cmovne rax, rdx; ret;
0x0008dcf5: adc eax, [rax]; lea rdx, [rip+0xccf62]; test byte ptr [rax+0x72], 0x10; lea rax, [rip+0x19747]; cmovne rax, rdx; ret;
0x0008dcf6: add [rax-0x73], cl; adc eax, 0xccf62; test byte ptr [rax+0x72], 0x10; lea rax, [rip+0x19747]; cmovne rax, rdx; ret;
0x0008dcf7: lea rdx, [rip+0xccf62]; test byte ptr [rax+0x72], 0x10; lea rax, [rip+0x19747]; cmovne rax, rdx; ret;
0x0008dcf8: lea edx, [rip+0xccf62]; test byte ptr [rax+0x72], 0x10; lea rax, [rip+0x19747]; cmovne rax, rdx; ret;
0x0008dcf9: adc eax, 0xccf62; test byte ptr [rax+0x72], 0x10; lea rax, [rip+0x19747]; cmovne rax, rdx; ret;
0x0008dcfc: or al, 0; test byte ptr [rax+0x72], 0x10; lea rax, [rip+0x19747]; cmovne rax, rdx; ret;
0x0008dcfe: test byte ptr [rax+0x72], 0x10; lea rax, [rip+0x19747]; cmovne rax, rdx; ret;
0x0008dd01: adc [rax-0x73], cl; add eax, 0x19747; cmovne rax, rdx; ret;
0x0008dd02: lea rax, [rip+0x19747]; cmovne rax, rdx; ret;
0x0008dd03: lea eax, [rip+0x19747]; cmovne rax, rdx; ret;
0x0008dd04: add eax, 0x19747; cmovne rax, rdx; ret;
0x0008dd05: xchg r15d, eax; add [rax], eax; cmovne rax, rdx; ret;
0x0008dd06: xchg edi, eax; add [rax], eax; cmovne rax, rdx; ret;
0x0008dd88: rol byte ptr [rax+0xf4130fa], cl; xchg esp, eax; ret 0xb60f;
0x0008dd8a: cli; xor [rcx+0xf], al; xchg esp, eax; ret 0xb60f;
0x0008dd8b: xor [rcx+0xf], al; xchg esp, eax; ret 0xb60f;
0x0008ddd1: movsx edx, al; mov eax, edx; ret;
0x0008de0c: dec dword ptr [rdi]; shr bl, 1; ret 0xf66;
0x0008de0f: shr bl, 1; ret 0xf66;
0x0008de12: nop [rax+rax]; xor edx, edx; mov eax, edx; ret;
0x0008de13: nop [rax+rax]; xor edx, edx; mov eax, edx; ret;
0x0008de15: add [rax], r8b; xor edx, edx; mov eax, edx; ret;
0x0008de61: cmp esi, [rbx-7]; call far fword ptr [rdx+0x31];
0x0008dea6: div byte ptr [rdx-7]; call far fword ptr [rdx+0x31];
0x0008dea8: stc; call far fword ptr [rdx+0x31];
0x0008decb: add dword ptr [rax], 0x85480000; shl byte ptr [rsp+rcx+0x5b], 0x5d; pop r12; ret;
0x0008decc: add [rax], al; add [rax-0x7b], cl; shl byte ptr [rsp+rcx+0x5b], 0x5d; pop r12; ret;
0x0008dece: add [rax-0x7b], cl; shl byte ptr [rsp+rcx+0x5b], 0x5d; pop r12; ret;
0x0008ded1: shl byte ptr [rsp+rcx+0x5b], 0x5d; pop r12; ret;
0x0008e128: mov rdx, 0x10000000002; cmp rax, rdx; lea rdx, [rip+0xd1984]; lea rax, [rip+0xf6dd]; cmove rax, rdx; ret;
0x0008e130: add [rax], al; cmp rax, rdx; lea rdx, [rip+0xd1984]; lea rax, [rip+0xf6dd]; cmove rax, rdx; ret;
0x0008e131: add [rax+0x39], cl; ror byte ptr [rax-0x73], 1; adc eax, 0xd1984; lea rax, [rip+0xf6dd]; cmove rax, rdx; ret;
0x0008e132: cmp rax, rdx; lea rdx, [rip+0xd1984]; lea rax, [rip+0xf6dd]; cmove rax, rdx; ret;
0x0008e133: cmp eax, edx; lea rdx, [rip+0xd1984]; lea rax, [rip+0xf6dd]; cmove rax, rdx; ret;
0x0008e134: ror byte ptr [rax-0x73], 1; adc eax, 0xd1984; lea rax, [rip+0xf6dd]; cmove rax, rdx; ret;
0x0008e135: lea rdx, [rip+0xd1984]; lea rax, [rip+0xf6dd]; cmove rax, rdx; ret;
0x0008e136: lea edx, [rip+0xd1984]; lea rax, [rip+0xf6dd]; cmove rax, rdx; ret;
0x0008e137: adc eax, 0xd1984; lea rax, [rip+0xf6dd]; cmove rax, rdx; ret;
0x0008e13b: add [rax-0x73], cl; add eax, 0xf6dd; cmove rax, rdx; ret;
0x0008e13c: lea rax, [rip+0xf6dd]; cmove rax, rdx; ret;
0x0008e13d: lea eax, [rip+0xf6dd]; cmove rax, rdx; ret;
0x0008e13e: add eax, 0xf6dd; cmove rax, rdx; ret;
0x0008e140: test byte ptr [rax], 0; cmove rax, rdx; ret;
0x0008e168: mov rdx, 0x10000000002; cmp rax, rdx; lea rdx, [rip+0xd1ad4]; lea rax, [rip+0xf83d]; cmove rax, rdx; ret;
0x0008e170: add [rax], al; cmp rax, rdx; lea rdx, [rip+0xd1ad4]; lea rax, [rip+0xf83d]; cmove rax, rdx; ret;
0x0008e171: add [rax+0x39], cl; ror byte ptr [rax-0x73], 1; adc eax, 0xd1ad4; lea rax, [rip+0xf83d]; cmove rax, rdx; ret;
0x0008e172: cmp rax, rdx; lea rdx, [rip+0xd1ad4]; lea rax, [rip+0xf83d]; cmove rax, rdx; ret;
0x0008e173: cmp eax, edx; lea rdx, [rip+0xd1ad4]; lea rax, [rip+0xf83d]; cmove rax, rdx; ret;
0x0008e174: ror byte ptr [rax-0x73], 1; adc eax, 0xd1ad4; lea rax, [rip+0xf83d]; cmove rax, rdx; ret;
0x0008e175: lea rdx, [rip+0xd1ad4]; lea rax, [rip+0xf83d]; cmove rax, rdx; ret;
0x0008e176: lea edx, [rip+0xd1ad4]; lea rax, [rip+0xf83d]; cmove rax, rdx; ret;
0x0008e177: adc eax, 0xd1ad4; lea rax, [rip+0xf83d]; cmove rax, rdx; ret;
0x0008e179: sbb cl, [rip+0x58d4800]; cmp eax, 0x480000f8; cmove eax, edx; ret;
0x0008e17a: or eax, 0x58d4800; cmp eax, 0x480000f8; cmove eax, edx; ret;
0x0008e17b: add [rax-0x73], cl; add eax, 0xf83d; cmove rax, rdx; ret;
0x0008e17c: lea rax, [rip+0xf83d]; cmove rax, rdx; ret;
0x0008e17d: lea eax, [rip+0xf83d]; cmove rax, rdx; ret;
0x0008e17e: add eax, 0xf83d; cmove rax, rdx; ret;
0x0008e17f: cmp eax, 0x480000f8; cmove eax, edx; ret;
0x0008e180: clc; add [rax], al; cmove rax, rdx; ret;
0x0008e1cb: adc [rbp+0x16], dh; test byte ptr [rcx+0x71], 2; lea rax, [rip+0x6957]; lea rdx, [rip+0x11620]; cmovne rax, rdx; ret;
0x0008e1ce: test byte ptr [rcx+0x71], 2; lea rax, [rip+0x6957]; lea rdx, [rip+0x11620]; cmovne rax, rdx; ret;
0x0008e1d1: add cl, [rax-0x73]; add eax, 0x6957; lea rdx, [rip+0x11620]; cmovne rax, rdx; ret;
0x0008e1d2: lea rax, [rip+0x6957]; lea rdx, [rip+0x11620]; cmovne rax, rdx; ret;
0x0008e1d3: lea eax, [rip+0x6957]; lea rdx, [rip+0x11620]; cmovne rax, rdx; ret;
0x0008e1d4: add eax, 0x6957; lea rdx, [rip+0x11620]; cmovne rax, rdx; ret;
0x0008e1d5: push rdi; imul eax, [rax], 0x158d4800; and [rsi], dl; add [rax], eax; cmovne rax, rdx; ret;
0x0008e1d6: imul eax, [rax], 0x158d4800; and [rsi], dl; add [rax], eax; cmovne rax, rdx; ret;
0x0008e1d7: add [rax], al; lea rdx, [rip+0x11620]; cmovne rax, rdx; ret;
0x0008e1d8: add [rax-0x73], cl; adc eax, 0x11620; cmovne rax, rdx; ret;
0x0008e1d9: lea rdx, [rip+0x11620]; cmovne rax, rdx; ret;
0x0008e1da: lea edx, [rip+0x11620]; cmovne rax, rdx; ret;
0x0008e1db: adc eax, 0x11620; cmovne rax, rdx; ret;
0x0008e1dc: and [rsi], dl; add [rax], eax; cmovne rax, rdx; ret;
0x0008e235: add [rax-0x197fea8c], al; add cl, [rax-0x73]; add eax, 0x80dd; lea rdx, [rip+0xad966]; cmovne rax, rdx; ret;
0x0008e236: xor byte ptr [rbp+rdx-0x80], 0xe6; add cl, [rax-0x73]; add eax, 0x80dd; lea rdx, [rip+0xad966]; cmovne rax, rdx; ret;
0x0008e238: adc eax, 0x4802e680; lea eax, [rip+0x80dd]; lea rdx, [rip+0xad966]; cmovne rax, rdx; ret;
0x0008e239: and dh, 2; lea rax, [rip+0x80dd]; lea rdx, [rip+0xad966]; cmovne rax, rdx; ret;
0x0008e23a: out 2, al; lea rax, [rip+0x80dd]; lea rdx, [rip+0xad966]; cmovne rax, rdx; ret;
0x0008e23b: add cl, [rax-0x73]; add eax, 0x80dd; lea rdx, [rip+0xad966]; cmovne rax, rdx; ret;
0x0008e23c: lea rax, [rip+0x80dd]; lea rdx, [rip+0xad966]; cmovne rax, rdx; ret;
0x0008e23d: lea eax, [rip+0x80dd]; lea rdx, [rip+0xad966]; cmovne rax, rdx; ret;
0x0008e23e: add eax, 0x80dd; lea rdx, [rip+0xad966]; cmovne rax, rdx; ret;
0x0008e23f: fld st, qword ptr [rax-0x72b80000]; adc eax, 0xad966; cmovne rax, rdx; ret;
0x0008e240: add byte ptr [rax], 0; lea rdx, [rip+0xad966]; cmovne rax, rdx; ret;
0x0008e241: add [rax], al; lea rdx, [rip+0xad966]; cmovne rax, rdx; ret;
0x0008e242: add [rax-0x73], cl; adc eax, 0xad966; cmovne rax, rdx; ret;
0x0008e243: lea rdx, [rip+0xad966]; cmovne rax, rdx; ret;
0x0008e244: lea edx, [rip+0xad966]; cmovne rax, rdx; ret;
0x0008e245: adc eax, 0xad966; cmovne rax, rdx; ret;
0x0008e28b: adc [rbp+0x16], dh; test byte ptr [rcx+0x71], 2; lea rax, [rip+0x6947]; lea rdx, [rip+0xbfa50]; cmovne rax, rdx; ret;
0x0008e28e: test byte ptr [rcx+0x71], 2; lea rax, [rip+0x6947]; lea rdx, [rip+0xbfa50]; cmovne rax, rdx; ret;
0x0008e291: add cl, [rax-0x73]; add eax, 0x6947; lea rdx, [rip+0xbfa50]; cmovne rax, rdx; ret;
0x0008e292: lea rax, [rip+0x6947]; lea rdx, [rip+0xbfa50]; cmovne rax, rdx; ret;
0x0008e293: lea eax, [rip+0x6947]; lea rdx, [rip+0xbfa50]; cmovne rax, rdx; ret;
0x0008e294: add eax, 0x6947; lea rdx, [rip+0xbfa50]; cmovne rax, rdx; ret;
0x0008e295: imul r8d, [r8], 0x158d4800; push rax; cli; or eax, [rax]; cmovne rax, rdx; ret;
0x0008e296: imul eax, [rax], 0x158d4800; push rax; cli; or eax, [rax]; cmovne rax, rdx; ret;
0x0008e297: add [rax], al; lea rdx, [rip+0xbfa50]; cmovne rax, rdx; ret;
0x0008e298: add [rax-0x73], cl; adc eax, 0xbfa50; cmovne rax, rdx; ret;
0x0008e299: lea rdx, [rip+0xbfa50]; cmovne rax, rdx; ret;
0x0008e29a: lea edx, [rip+0xbfa50]; cmovne rax, rdx; ret;
0x0008e29b: adc eax, 0xbfa50; cmovne rax, rdx; ret;
0x0008e29c: push rax; cli; or eax, [rax]; cmovne rax, rdx; ret;
0x0008e29d: cli; or eax, [rax]; cmovne rax, rdx; ret;
0x0008e2c8: mov rdx, 0x10000000002; cmp rax, rdx; lea rdx, [rip+0xd1614]; lea rax, [rip+0xf24d]; cmove rax, rdx; ret;
0x0008e2d0: add [rax], al; cmp rax, rdx; lea rdx, [rip+0xd1614]; lea rax, [rip+0xf24d]; cmove rax, rdx; ret;
0x0008e2d1: add [rax+0x39], cl; ror byte ptr [rax-0x73], 1; adc eax, 0xd1614; lea rax, [rip+0xf24d]; cmove rax, rdx; ret;
0x0008e2d2: cmp rax, rdx; lea rdx, [rip+0xd1614]; lea rax, [rip+0xf24d]; cmove rax, rdx; ret;
0x0008e2d3: cmp eax, edx; lea rdx, [rip+0xd1614]; lea rax, [rip+0xf24d]; cmove rax, rdx; ret;
0x0008e2d4: ror byte ptr [rax-0x73], 1; adc eax, 0xd1614; lea rax, [rip+0xf24d]; cmove rax, rdx; ret;
0x0008e2d5: lea rdx, [rip+0xd1614]; lea rax, [rip+0xf24d]; cmove rax, rdx; ret;
0x0008e2d6: lea edx, [rip+0xd1614]; lea rax, [rip+0xf24d]; cmove rax, rdx; ret;
0x0008e2d7: adc eax, 0xd1614; lea rax, [rip+0xf24d]; cmove rax, rdx; ret;
0x0008e2db: add [rax-0x73], cl; add eax, 0xf24d; cmove rax, rdx; ret;
0x0008e2dc: lea rax, [rip+0xf24d]; cmove rax, rdx; ret;
0x0008e2dd: lea eax, [rip+0xf24d]; cmove rax, rdx; ret;
0x0008e2de: add eax, 0xf24d; cmove rax, rdx; ret;
0x0008e2f0: mov rax, [rip+0x12fb69]; lea rdx, [rip+0xcca92]; test byte ptr [rax+0x72], 0x10; lea rax, [rip+0x191e7]; cmovne rax, rdx; ret;
0x0008e2f1: mov eax, [rip+0x12fb69]; lea rdx, [rip+0xcca92]; test byte ptr [rax+0x72], 0x10; lea rax, [rip+0x191e7]; cmovne rax, rdx; ret;
0x0008e2f2: add eax, 0x12fb69; lea rdx, [rip+0xcca92]; test byte ptr [rax+0x72], 0x10; lea rax, [rip+0x191e7]; cmovne rax, rdx; ret;
0x0008e2f3: imul edi, ebx, 0x8d480012; adc eax, 0xcca92; test byte ptr [rax+0x72], 0x10; lea rax, [rip+0x191e7]; cmovne rax, rdx; ret;
0x0008e2f5: adc al, [rax]; lea rdx, [rip+0xcca92]; test byte ptr [rax+0x72], 0x10; lea rax, [rip+0x191e7]; cmovne rax, rdx; ret;
0x0008e2f6: add [rax-0x73], cl; adc eax, 0xcca92; test byte ptr [rax+0x72], 0x10; lea rax, [rip+0x191e7]; cmovne rax, rdx; ret;
0x0008e2f7: lea rdx, [rip+0xcca92]; test byte ptr [rax+0x72], 0x10; lea rax, [rip+0x191e7]; cmovne rax, rdx; ret;
0x0008e2f8: lea edx, [rip+0xcca92]; test byte ptr [rax+0x72], 0x10; lea rax, [rip+0x191e7]; cmovne rax, rdx; ret;
0x0008e2f9: adc eax, 0xcca92; test byte ptr [rax+0x72], 0x10; lea rax, [rip+0x191e7]; cmovne rax, rdx; ret;
0x0008e2fc: or al, 0; test byte ptr [rax+0x72], 0x10; lea rax, [rip+0x191e7]; cmovne rax, rdx; ret;
0x0008e2fe: test byte ptr [rax+0x72], 0x10; lea rax, [rip+0x191e7]; cmovne rax, rdx; ret;
0x0008e301: adc [rax-0x73], cl; add eax, 0x191e7; cmovne rax, rdx; ret;
0x0008e302: lea rax, [rip+0x191e7]; cmovne rax, rdx; ret;
0x0008e303: lea eax, [rip+0x191e7]; cmovne rax, rdx; ret;
0x0008e304: add eax, 0x191e7; cmovne rax, rdx; ret;
0x0008e305: out 0x91, eax; add [rax], eax; cmovne rax, rdx; ret;
0x0008e306: xchg ecx, eax; add [rax], eax; cmovne rax, rdx; ret;
0x0008e313: xor edx, [rbx]; add [rbp+0x481675c0], al; lea eax, [rip+0x133c5f]; mov [rip+0x133c40], rax; ret;
0x0008e315: add [rbp+0x481675c0], al; lea eax, [rip+0x133c5f]; mov [rip+0x133c40], rax; ret;
0x0008e317: shl byte ptr [rbp+0x16], 0x48; lea eax, [rip+0x133c5f]; mov [rip+0x133c40], rax; ret;
0x0008e31a: lea rax, [rip+0x133c5f]; mov [rip+0x133c40], rax; ret;
0x0008e31b: lea eax, [rip+0x133c5f]; mov [rip+0x133c40], rax; ret;
0x0008e31c: add eax, 0x133c5f; mov [rip+0x133c40], rax; ret;
0x0008e31d: pop rdi; cmp al, 0x13; add [rax-0x77], cl; add eax, 0x133c40; ret;
0x0008e31e: cmp al, 0x13; add [rax-0x77], cl; add eax, 0x133c40; ret;
0x0008e31f: adc eax, [rax]; mov [rip+0x133c40], rax; ret;
0x0008e320: add [rax-0x77], cl; add eax, 0x133c40; ret;
0x0008e321: mov [rip+0x133c40], rax; ret;
0x0008e322: mov [rip+0x133c40], eax; ret;
0x0008e323: add eax, 0x133c40; ret;
0x0008e326: adc eax, [rax]; ret;
0x0008e334: lea rsi, [rip+0x35]; mov rax, [rip+0x13347e]; lea rdi, [rip+0x133c9b]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e335: lea esi, [rip+0x35]; mov rax, [rip+0x13347e]; lea rdi, [rip+0x133c9b]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e336: xor eax, 0x35; mov rax, [rip+0x13347e]; lea rdi, [rip+0x133c9b]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e337: xor eax, 0x48000000; mov eax, [rip+0x13347e]; lea rdi, [rip+0x133c9b]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e339: add [rax], al; mov rax, [rip+0x13347e]; lea rdi, [rip+0x133c9b]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e33a: add [rax-0x75], cl; add eax, 0x13347e; lea rdi, [rip+0x133c9b]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e33b: mov rax, [rip+0x13347e]; lea rdi, [rip+0x133c9b]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e33c: mov eax, [rip+0x13347e]; lea rdi, [rip+0x133c9b]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e33d: add eax, 0x13347e; lea rdi, [rip+0x133c9b]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e33f: xor al, 0x13; add [rax-0x73], cl; cmp eax, 0x133c9b; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e340: adc eax, [rax]; lea rdi, [rip+0x133c9b]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e341: add [rax-0x73], cl; cmp eax, 0x133c9b; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e342: lea rdi, [rip+0x133c9b]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e343: lea edi, [rip+0x133c9b]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e344: cmp eax, 0x133c9b; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e345: fwait; cmp al, 0x13; add [rax-0x3f], cl; enter 0x6411, 0x48; xor eax, [0x30]; call rax;
0x0008e346: cmp al, 0x13; add [rax-0x3f], cl; enter 0x6411, 0x48; xor eax, [0x30]; call rax;
0x0008e355: add bh, bh; rol byte ptr [rbp+0x480e74c0], 1; lea eax, [rip+0x133c1d]; mov [rip+0x133bfe], rax; add rsp, 8; ret;
0x0008e357: rol byte ptr [rbp+0x480e74c0], 1; lea eax, [rip+0x133c1d]; mov [rip+0x133bfe], rax; add rsp, 8; ret;
0x0008e359: shl byte ptr [rsi+rcx+0x48], 0x8d; add eax, 0x133c1d; mov [rip+0x133bfe], rax; add rsp, 8; ret;
0x0008e35c: lea rax, [rip+0x133c1d]; mov [rip+0x133bfe], rax; add rsp, 8; ret;
0x0008e35d: lea eax, [rip+0x133c1d]; mov [rip+0x133bfe], rax; add rsp, 8; ret;
0x0008e35e: add eax, 0x133c1d; mov [rip+0x133bfe], rax; add rsp, 8; ret;
0x0008e35f: sbb eax, 0x4800133c; mov [rip+0x133bfe], eax; add rsp, 8; ret;
0x0008e360: cmp al, 0x13; add [rax-0x77], cl; add eax, 0x133bfe; add rsp, 8; ret;
0x0008e361: adc eax, [rax]; mov [rip+0x133bfe], rax; add rsp, 8; ret;
0x0008e362: add [rax-0x77], cl; add eax, 0x133bfe; add rsp, 8; ret;
0x0008e363: mov [rip+0x133bfe], rax; add rsp, 8; ret;
0x0008e364: mov [rip+0x133bfe], eax; add rsp, 8; ret;
0x0008e365: add eax, 0x133bfe; add rsp, 8; ret;
0x0008e368: adc eax, [rax]; add rsp, 8; ret;
0x0008e38a: mov edi, [rip+0x133c54]; xor esi, esi; add rsp, 8; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0008e38b: cmp eax, 0x133c54; xor esi, esi; add rsp, 8; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0008e38e: adc eax, [rax]; xor esi, esi; add rsp, 8; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0008e38f: add [rcx], dh; test byte ptr [rax-0x7d], 0xc4; or [rax-0x3f], cl; enter 0x6411, 0x48; xor eax, [0x30]; jmp rax;
0x0008e390: xor esi, esi; add rsp, 8; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0008e391: test byte ptr [rax-0x7d], 0xc4; or [rax-0x3f], cl; enter 0x6411, 0x48; xor eax, [0x30]; jmp rax;
0x0008e392: add rsp, 8; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0008e393: add esp, 8; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0008e395: or [rax-0x3f], cl; enter 0x6411, 0x48; xor eax, [0x30]; jmp rax;
0x0008e3c9: mov rax, [rip+0x1333d0]; lea rsi, [rip-0xc7]; lea rdi, [rip+0x133b82]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e3ca: mov eax, [rip+0x1333d0]; lea rsi, [rip-0xc7]; lea rdi, [rip+0x133b82]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e3cb: add eax, 0x1333d0; lea rsi, [rip-0xc7]; lea rdi, [rip+0x133b82]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e3ce: adc eax, [rax]; lea rsi, [rip-0xc7]; lea rdi, [rip+0x133b82]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e3cf: add [rax-0x73], cl; xor eax, 0xffffff39; lea rdi, [rip+0x133b82]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e3d0: lea rsi, [rip-0xc7]; lea rdi, [rip+0x133b82]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e3d1: lea esi, [rip-0xc7]; lea rdi, [rip+0x133b82]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e3d2: xor eax, 0xffffff39; lea rdi, [rip+0x133b82]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e3d6: dec dword ptr [rax-0x73]; cmp eax, 0x133b82; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e3d7: lea rdi, [rip+0x133b82]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e3d8: lea edi, [rip+0x133b82]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e3d9: cmp eax, 0x133b82; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e3db: cmp edx, [rbx]; add [rax-0x3f], cl; enter 0x6411, 0x48; xor eax, [0x30]; call rax;
0x0008e48e: mov byte ptr [r13+rax], 0; add rsp, 8; mov rax, r13; pop r12; pop r13; ret;
0x0008e48f: mov byte ptr [rbp+rax], 0; add rsp, 8; mov rax, r13; pop r12; pop r13; ret;
0x0008e492: add [rax], al; add rsp, 8; mov rax, r13; pop r12; pop r13; ret;
0x0008e4f0: xor r13d, r13d; add rsp, 8; mov rax, r13; pop r12; pop r13; ret;
0x0008e4f1: xor ebp, ebp; add rsp, 8; mov rax, r13; pop r12; pop r13; ret;
0x0008e4f2: in eax, dx; add rsp, 8; mov rax, r13; pop r12; pop r13; ret;
0x0008e4f3: add rsp, 8; mov rax, r13; pop r12; pop r13; ret;
0x0008e4f4: add esp, 8; mov rax, r13; pop r12; pop r13; ret;
0x0008e4f6: or [rcx+rcx*4-0x18], cl; pop r12; pop r13; ret;
0x0008e4f7: mov rax, r13; pop r12; pop r13; ret;
0x0008e4f8: mov eax, ebp; pop r12; pop r13; ret;
0x0008e505: add [rbp+0x482874d2], al; mov eax, [rip+0x1332b7]; mov edi, [rip+0x133acd]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e507: shl byte ptr [rax+rbp+0x48], cl; mov eax, [rip+0x1332b7]; mov edi, [rip+0x133acd]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e509: sub [rax-0x75], cl; add eax, 0x1332b7; mov edi, [rip+0x133acd]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e50a: mov rax, [rip+0x1332b7]; mov edi, [rip+0x133acd]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e50b: mov eax, [rip+0x1332b7]; mov edi, [rip+0x133acd]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e50c: add eax, 0x1332b7; mov edi, [rip+0x133acd]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e50d: mov bh, 0x32; adc eax, [rax]; mov edi, [rip+0x133acd]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e50e: xor dl, [rbx]; add [rbx+0x133acd3d], cl; add [rax-0x3f], cl; enter 0x6411, 0x48; xor eax, [0x30]; call rax;
0x0008e50f: adc eax, [rax]; mov edi, [rip+0x133acd]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e510: add [rbx+0x133acd3d], cl; add [rax-0x3f], cl; enter 0x6411, 0x48; xor eax, [0x30]; call rax;
0x0008e511: mov edi, [rip+0x133acd]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e512: cmp eax, 0x133acd; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e513: int 0x3a; adc eax, [rax]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e514: cmp dl, [rbx]; add [rax-0x3f], cl; enter 0x6411, 0x48; xor eax, [0x30]; call rax;
0x0008e515: adc eax, [rax]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e552: mov rax, [rip+0x133277]; mov edi, [rip+0x133a85]; mov rsi, r13; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e553: mov eax, [rip+0x133277]; mov edi, [rip+0x133a85]; mov rsi, r13; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e554: add eax, 0x133277; mov edi, [rip+0x133a85]; mov rsi, r13; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e556: xor dl, [rbx]; add [rbx+0x133a853d], cl; add [rcx+rcx*4-0x12], cl; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e557: adc eax, [rax]; mov edi, [rip+0x133a85]; mov rsi, r13; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e558: add [rbx+0x133a853d], cl; add [rcx+rcx*4-0x12], cl; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e559: mov edi, [rip+0x133a85]; mov rsi, r13; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e55a: cmp eax, 0x133a85; mov rsi, r13; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e55b: test [rdx], edi; adc eax, [rax]; mov rsi, r13; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e55c: cmp dl, [rbx]; add [rcx+rcx*4-0x12], cl; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e55d: adc eax, [rax]; mov rsi, r13; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e55e: add [rcx+rcx*4-0x12], cl; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e55f: mov rsi, r13; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e560: mov esi, ebp; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e561: out dx, al; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0008e590: mov rax, [rip+0x12f8c9]; lea rdx, [rip+0xcc922]; test byte ptr [rax+0x72], 0x10; lea rax, [rip+0x18fe7]; cmovne rax, rdx; ret;
0x0008e591: mov eax, [rip+0x12f8c9]; lea rdx, [rip+0xcc922]; test byte ptr [rax+0x72], 0x10; lea rax, [rip+0x18fe7]; cmovne rax, rdx; ret;
0x0008e592: add eax, 0x12f8c9; lea rdx, [rip+0xcc922]; test byte ptr [rax+0x72], 0x10; lea rax, [rip+0x18fe7]; cmovne rax, rdx; ret;
0x0008e595: adc al, [rax]; lea rdx, [rip+0xcc922]; test byte ptr [rax+0x72], 0x10; lea rax, [rip+0x18fe7]; cmovne rax, rdx; ret;
0x0008e596: add [rax-0x73], cl; adc eax, 0xcc922; test byte ptr [rax+0x72], 0x10; lea rax, [rip+0x18fe7]; cmovne rax, rdx; ret;
0x0008e597: lea rdx, [rip+0xcc922]; test byte ptr [rax+0x72], 0x10; lea rax, [rip+0x18fe7]; cmovne rax, rdx; ret;
0x0008e598: lea edx, [rip+0xcc922]; test byte ptr [rax+0x72], 0x10; lea rax, [rip+0x18fe7]; cmovne rax, rdx; ret;
0x0008e599: adc eax, 0xcc922; test byte ptr [rax+0x72], 0x10; lea rax, [rip+0x18fe7]; cmovne rax, rdx; ret;
0x0008e59a: and cl, cl; or al, 0; test byte ptr [rax+0x72], 0x10; lea rax, [rip+0x18fe7]; cmovne rax, rdx; ret;
0x0008e59b: leave; or al, 0; test byte ptr [rax+0x72], 0x10; lea rax, [rip+0x18fe7]; cmovne rax, rdx; ret;
0x0008e59c: or al, 0; test byte ptr [rax+0x72], 0x10; lea rax, [rip+0x18fe7]; cmovne rax, rdx; ret;
0x0008e59e: test byte ptr [rax+0x72], 0x10; lea rax, [rip+0x18fe7]; cmovne rax, rdx; ret;
0x0008e5a1: adc [rax-0x73], cl; add eax, 0x18fe7; cmovne rax, rdx; ret;
0x0008e5a2: lea rax, [rip+0x18fe7]; cmovne rax, rdx; ret;
0x0008e5a3: lea eax, [rip+0x18fe7]; cmovne rax, rdx; ret;
0x0008e5a4: add eax, 0x18fe7; cmovne rax, rdx; ret;
0x0008e5a5: out 0x8f, eax; add [rax], eax; cmovne rax, rdx; ret;
0x0008e5a6: pop qword ptr [rcx]; add [rax+0xf], cl; ret 0x66c3;
0x0008e64a: xor [rax+0x39], ecx; ret;
0x0008e66f: add [rcx-0x77], cl; ret 0x8948;
0x0008e795: sub [rax+1], cl; ret;
0x0008ed20: mov rax, [rip+0x12f139]; lea rdx, [rip-0x2fe]; test byte ptr [rax+0xcc], 0x10; lea rax, [rip+0x18274]; cmove rax, rdx; ret;
0x0008ed21: mov eax, [rip+0x12f139]; lea rdx, [rip-0x2fe]; test byte ptr [rax+0xcc], 0x10; lea rax, [rip+0x18274]; cmove rax, rdx; ret;
0x0008ed22: add eax, 0x12f139; lea rdx, [rip-0x2fe]; test byte ptr [rax+0xcc], 0x10; lea rax, [rip+0x18274]; cmove rax, rdx; ret;
0x0008ed25: adc al, [rax]; lea rdx, [rip-0x2fe]; test byte ptr [rax+0xcc], 0x10; lea rax, [rip+0x18274]; cmove rax, rdx; ret;
0x0008ed26: add [rax-0x73], cl; adc eax, 0xfffffd02; test byte ptr [rax+0xcc], 0x10; lea rax, [rip+0x18274]; cmove rax, rdx; ret;
0x0008ed27: lea rdx, [rip-0x2fe]; test byte ptr [rax+0xcc], 0x10; lea rax, [rip+0x18274]; cmove rax, rdx; ret;
0x0008ed28: lea edx, [rip-0x2fe]; test byte ptr [rax+0xcc], 0x10; lea rax, [rip+0x18274]; cmove rax, rdx; ret;
0x0008ed29: adc eax, 0xfffffd02; test byte ptr [rax+0xcc], 0x10; lea rax, [rip+0x18274]; cmove rax, rdx; ret;
0x0008ed2e: test byte ptr [rax+0xcc], 0x10; lea rax, [rip+0x18274]; cmove rax, rdx; ret;
0x0008ed2f: or ah, 0; add [rax], al; adc [rax-0x73], cl; add eax, 0x18274; cmove rax, rdx; ret;
0x0008ed30: int3; add [rax], al; add [rax], dl; lea rax, [rip+0x18274]; cmove rax, rdx; ret;
0x0008ed31: add [rax], al; add [rax], dl; lea rax, [rip+0x18274]; cmove rax, rdx; ret;
0x0008ed32: add [rax], al; adc [rax-0x73], cl; add eax, 0x18274; cmove rax, rdx; ret;
0x0008ed33: add [rax], dl; lea rax, [rip+0x18274]; cmove rax, rdx; ret;
0x0008ed34: adc [rax-0x73], cl; add eax, 0x18274; cmove rax, rdx; ret;
0x0008ed35: lea rax, [rip+0x18274]; cmove rax, rdx; ret;
0x0008ed36: lea eax, [rip+0x18274]; cmove rax, rdx; ret;
0x0008ed37: add eax, 0x18274; cmove rax, rdx; ret;
0x0008eda8: add [rax-0x77], ecx; add [r9+rcx*4-0x20], r9b; pop rbp; pop r12; pop r13; ret;
0x0008eda9: mov [rbp], rax; mov rax, r12; pop rbp; pop r12; pop r13; ret;
0x0008edaa: mov [rbp], eax; mov rax, r12; pop rbp; pop r12; pop r13; ret;
0x0008edab: add [r9+rcx*4-0x20], r9b; pop rbp; pop r12; pop r13; ret;
0x0008edc2: add gs:[rbp+0x31], al; in al, 0x5d; mov rax, r12; pop r12; pop r13; ret;
0x0008edc3: add [rbp+0x31], al; in al, 0x5d; mov rax, r12; pop r12; pop r13; ret;
0x0008edc4: xor r12d, r12d; pop rbp; mov rax, r12; pop r12; pop r13; ret;
0x0008edc5: xor esp, esp; pop rbp; mov rax, r12; pop r12; pop r13; ret;
0x0008edc6: in al, 0x5d; mov rax, r12; pop r12; pop r13; ret;
0x0008ee08: mov rdx, 0x10000000002; cmp rax, rdx; lea rdx, [rip+0xccb34]; lea rax, [rip+0x8d4d]; cmove rax, rdx; ret;
0x0008ee10: add [rax], al; cmp rax, rdx; lea rdx, [rip+0xccb34]; lea rax, [rip+0x8d4d]; cmove rax, rdx; ret;
0x0008ee11: add [rax+0x39], cl; ror byte ptr [rax-0x73], 1; adc eax, 0xccb34; lea rax, [rip+0x8d4d]; cmove rax, rdx; ret;
0x0008ee12: cmp rax, rdx; lea rdx, [rip+0xccb34]; lea rax, [rip+0x8d4d]; cmove rax, rdx; ret;
0x0008ee13: cmp eax, edx; lea rdx, [rip+0xccb34]; lea rax, [rip+0x8d4d]; cmove rax, rdx; ret;
0x0008ee14: ror byte ptr [rax-0x73], 1; adc eax, 0xccb34; lea rax, [rip+0x8d4d]; cmove rax, rdx; ret;
0x0008ee15: lea rdx, [rip+0xccb34]; lea rax, [rip+0x8d4d]; cmove rax, rdx; ret;
0x0008ee16: lea edx, [rip+0xccb34]; lea rax, [rip+0x8d4d]; cmove rax, rdx; ret;
0x0008ee17: adc eax, 0xccb34; lea rax, [rip+0x8d4d]; cmove rax, rdx; ret;
0x0008ee18: xor al, 0xcb; or al, 0; lea rax, [rip+0x8d4d]; cmove rax, rdx; ret;
0x0008ee1a: or al, 0; lea rax, [rip+0x8d4d]; cmove rax, rdx; ret;
0x0008ee1b: add [rax-0x73], cl; add eax, 0x8d4d; cmove rax, rdx; ret;
0x0008ee1c: lea rax, [rip+0x8d4d]; cmove rax, rdx; ret;
0x0008ee1d: lea eax, [rip+0x8d4d]; cmove rax, rdx; ret;
0x0008ee1e: add eax, 0x8d4d; cmove rax, rdx; ret;
0x0008ee1f: lea r8, [r8]; add [rax+0xf], cl; ret 0xfc3;
0x0008ee20: lea eax, [rax]; add [rax+0xf], cl; ret 0xfc3;
0x0008ee5d: add [rbp+0x15], dh; and ch, 2; lea rax, [rip+0x9606]; lea rdx, [rip+0xd93cf]; cmovne rax, rdx; ret;
0x0008ee5f: adc eax, 0x4802e580; lea eax, [rip+0x9606]; lea rdx, [rip+0xd93cf]; cmovne rax, rdx; ret;
0x0008ee60: and ch, 2; lea rax, [rip+0x9606]; lea rdx, [rip+0xd93cf]; cmovne rax, rdx; ret;
0x0008ee61: in eax, 2; lea rax, [rip+0x9606]; lea rdx, [rip+0xd93cf]; cmovne rax, rdx; ret;
0x0008ee62: add cl, [rax-0x73]; add eax, 0x9606; lea rdx, [rip+0xd93cf]; cmovne rax, rdx; ret;
0x0008ee63: lea rax, [rip+0x9606]; lea rdx, [rip+0xd93cf]; cmovne rax, rdx; ret;
0x0008ee64: lea eax, [rip+0x9606]; lea rdx, [rip+0xd93cf]; cmovne rax, rdx; ret;
0x0008ee65: add eax, 0x9606; lea rdx, [rip+0xd93cf]; cmovne rax, rdx; ret;
0x0008ee67: xchg esi, eax; add [rax], al; lea rdx, [rip+0xd93cf]; cmovne rax, rdx; ret;
0x0008ee68: add [rax], al; lea rdx, [rip+0xd93cf]; cmovne rax, rdx; ret;
0x0008ee69: add [rax-0x73], cl; adc eax, 0xd93cf; cmovne rax, rdx; ret;
0x0008ee6a: lea rdx, [rip+0xd93cf]; cmovne rax, rdx; ret;
0x0008ee6b: lea edx, [rip+0xd93cf]; cmovne rax, rdx; ret;
0x0008ee6c: adc eax, 0xd93cf; cmovne rax, rdx; ret;
0x0008ee6e: xchg ebx, eax; or eax, 0x450f4800; ret 0x66c3;
0x0008ee6f: or eax, 0x450f4800; ret 0x66c3;
0x0008eed8: add cl, [rax-0x73]; add eax, 0xd3bd0; lea rdx, [rip+0xd3b69]; cmove rax, rdx; ret;
0x0008eedb: add eax, 0xd3bd0; lea rdx, [rip+0xd3b69]; cmove rax, rdx; ret;
0x0008eedc: sar byte ptr [rbx], 1; or eax, 0x158d4800; imul edi, [rbx], 0xf48000d; ret 0xfc3;
0x0008eedd: cmp ecx, [rip+0x158d4800]; imul edi, [rbx], 0xf48000d; ret 0xfc3;
0x0008eede: or eax, 0x158d4800; imul edi, [rbx], 0xf48000d; ret 0xfc3;
0x0008eedf: add [rax-0x73], cl; adc eax, 0xd3b69; cmove rax, rdx; ret;
0x0008eee2: adc eax, 0xd3b69; cmove rax, rdx; ret;
0x0008eee3: imul edi, [rbx], 0xf48000d; ret 0xfc3;
0x0008eee4: cmp ecx, [rip+0x440f4800]; ret 0xfc3;
0x0008ef07: shl dword ptr [rax], 0x75; xor eax, 0x4808e183; lea edx, [rip+0xb646b]; lea rax, [rip+0xb0df4]; cmovne rax, rdx; ret;
0x0008ef08: and [rbp+0x35], dh; and ecx, 8; lea rdx, [rip+0xb646b]; lea rax, [rip+0xb0df4]; cmovne rax, rdx; ret;
0x0008ef0a: xor eax, 0x4808e183; lea edx, [rip+0xb646b]; lea rax, [rip+0xb0df4]; cmovne rax, rdx; ret;
0x0008ef0b: and ecx, 8; lea rdx, [rip+0xb646b]; lea rax, [rip+0xb0df4]; cmovne rax, rdx; ret;
0x0008ef0d: or [rax-0x73], cl; adc eax, 0xb646b; lea rax, [rip+0xb0df4]; cmovne rax, rdx; ret;
0x0008ef0e: lea rdx, [rip+0xb646b]; lea rax, [rip+0xb0df4]; cmovne rax, rdx; ret;
0x0008ef0f: lea edx, [rip+0xb646b]; lea rax, [rip+0xb0df4]; cmovne rax, rdx; ret;
0x0008ef10: adc eax, 0xb646b; lea rax, [rip+0xb0df4]; cmovne rax, rdx; ret;
0x0008ef11: imul esp, [rbx+rcx], 0x48; lea eax, [rip+0xb0df4]; cmovne rax, rdx; ret;
0x0008ef12: or eax, fs:[rax]; lea rax, [rip+0xb0df4]; cmovne rax, rdx; ret;
0x0008ef13: or eax, [rax]; lea rax, [rip+0xb0df4]; cmovne rax, rdx; ret;
0x0008ef14: add [rax-0x73], cl; add eax, 0xb0df4; cmovne rax, rdx; ret;
0x0008ef15: lea rax, [rip+0xb0df4]; cmovne rax, rdx; ret;
0x0008ef16: lea eax, [rip+0xb0df4]; cmovne rax, rdx; ret;
0x0008ef17: add eax, 0xb0df4; cmovne rax, rdx; ret;
0x0008ef18: hlt; or eax, 0xf48000b; ret 0xfc3;
0x0008ef19: or eax, 0xf48000b; ret 0xfc3;
0x0008ef2b: add cl, [rax-0x73]; add eax, 0xd88dd; lea rdx, [rip+0xd8866]; cmove rax, rdx; ret;
0x0008ef2e: add eax, 0xd88dd; lea rdx, [rip+0xd8866]; cmove rax, rdx; ret;
0x0008ef2f: fisttp qword ptr [rax-0x72b7fff3], st; adc eax, 0xd8866; cmove rax, rdx; ret;
0x0008ef30: mov [rip+0x158d4800], cl; mov [rip+0x440f4800], cl; ret 0x90c3;
0x0008ef31: or eax, 0x158d4800; mov [rip+0x440f4800], cl; ret 0x90c3;
0x0008ef32: add [rax-0x73], cl; adc eax, 0xd8866; cmove rax, rdx; ret;
0x0008ef35: adc eax, 0xd8866; cmove rax, rdx; ret;
0x0008ef37: mov [rip+0x440f4800], cl; ret 0x90c3;
0x0008ef43: add cl, [rax-0x73]; add eax, 0x187d5; lea rdx, [rip+0x1870e]; cmove rax, rdx; ret;
0x0008ef46: add eax, 0x187d5; lea rdx, [rip+0x1870e]; cmove rax, rdx; ret;
0x0008ef48: xchg [rcx], eax; add [rax-0x73], cl; adc eax, 0x1870e; cmove rax, rdx; ret;
0x0008ef4a: add [rax-0x73], cl; adc eax, 0x1870e; cmove rax, rdx; ret;
0x0008ef4d: adc eax, 0x1870e; cmove rax, rdx; ret;
0x0008ef4f: xchg [rcx], eax; add [rax+0xf], cl; ret 0x66c3;
0x0008efa1: test eax, eax; lea rdx, [rip+0xd3f36]; lea rax, [rip+0xd3f8f]; cmove rax, rdx; ret;
0x0008efa3: lea rdx, [rip+0xd3f36]; lea rax, [rip+0xd3f8f]; cmove rax, rdx; ret;
0x0008efa4: lea edx, [rip+0xd3f36]; lea rax, [rip+0xd3f8f]; cmove rax, rdx; ret;
0x0008efa5: adc eax, 0xd3f36; lea rax, [rip+0xd3f8f]; cmove rax, rdx; ret;
0x0008efa9: add [rax-0x73], cl; add eax, 0xd3f8f; cmove rax, rdx; ret;
0x0008efaa: lea rax, [rip+0xd3f8f]; cmove rax, rdx; ret;
0x0008efab: lea eax, [rip+0xd3f8f]; cmove rax, rdx; ret;
0x0008efac: add eax, 0xd3f8f; cmove rax, rdx; ret;
0x0008efaf: or eax, 0x440f4800; ret 0x66c3;
0x0008efb6: nop [rax+rax]; test eax, eax; lea rdx, [rip+0x18b27]; lea rax, [rip+0x18aa0]; cmovne rax, rdx; ret;
0x0008efb7: nop [rax+rax]; test eax, eax; lea rdx, [rip+0x18b27]; lea rax, [rip+0x18aa0]; cmovne rax, rdx; ret;
0x0008efb8: nop [rax+rax]; test eax, eax; lea rdx, [rip+0x18b27]; lea rax, [rip+0x18aa0]; cmovne rax, rdx; ret;
0x0008efbe: add [rax], al; test eax, eax; lea rdx, [rip+0x18b27]; lea rax, [rip+0x18aa0]; cmovne rax, rdx; ret;
0x0008efc0: test eax, eax; lea rdx, [rip+0x18b27]; lea rax, [rip+0x18aa0]; cmovne rax, rdx; ret;
0x0008efc2: lea rdx, [rip+0x18b27]; lea rax, [rip+0x18aa0]; cmovne rax, rdx; ret;
0x0008efc3: lea edx, [rip+0x18b27]; lea rax, [rip+0x18aa0]; cmovne rax, rdx; ret;
0x0008efc4: adc eax, 0x18b27; lea rax, [rip+0x18aa0]; cmovne rax, rdx; ret;
0x0008efc6: mov eax, [rcx]; add [rax-0x73], cl; add eax, 0x18aa0; cmovne rax, rdx; ret;
0x0008efc7: add [rax], eax; lea rax, [rip+0x18aa0]; cmovne rax, rdx; ret;
0x0008efc8: add [rax-0x73], cl; add eax, 0x18aa0; cmovne rax, rdx; ret;
0x0008efc9: lea rax, [rip+0x18aa0]; cmovne rax, rdx; ret;
0x0008efca: lea eax, [rip+0x18aa0]; cmovne rax, rdx; ret;
0x0008efcb: add eax, 0x18aa0; cmovne rax, rdx; ret;
0x0008efcd: mov al, [rcx]; add [rax+0xf], cl; ret 0xfc3;
0x0008efde: add [rax-0xf8af71b], al; test byte ptr [rdx+0x7d], 2; lea rax, [rip+0xd8dd1]; lea rdx, [rip+0xd8d5a]; cmove rax, rdx; ret;
0x0008efe1: or [rbp-0x10], dh; test byte ptr [rdx+0x7d], 2; lea rax, [rip+0xd8dd1]; lea rdx, [rip+0xd8d5a]; cmove rax, rdx; ret;
0x0008efe4: test byte ptr [rdx+0x7d], 2; lea rax, [rip+0xd8dd1]; lea rdx, [rip+0xd8d5a]; cmove rax, rdx; ret;
0x0008efe7: add cl, [rax-0x73]; add eax, 0xd8dd1; lea rdx, [rip+0xd8d5a]; cmove rax, rdx; ret;
0x0008efe8: lea rax, [rip+0xd8dd1]; lea rdx, [rip+0xd8d5a]; cmove rax, rdx; ret;
0x0008efe9: lea eax, [rip+0xd8dd1]; lea rdx, [rip+0xd8d5a]; cmove rax, rdx; ret;
0x0008efea: add eax, 0xd8dd1; lea rdx, [rip+0xd8d5a]; cmove rax, rdx; ret;
0x0008efeb: ror dword ptr [rbp-0x72b7fff3], 1; adc eax, 0xd8d5a; cmove rax, rdx; ret;
0x0008efec: lea ecx, [rip+0x158d4800]; pop rdx; lea ecx, [rip+0x440f4800]; ret 0xfc3;
0x0008efed: or eax, 0x158d4800; pop rdx; lea ecx, [rip+0x440f4800]; ret 0xfc3;
0x0008efee: add [rax-0x73], cl; adc eax, 0xd8d5a; cmove rax, rdx; ret;
0x0008efef: lea rdx, [rip+0xd8d5a]; cmove rax, rdx; ret;
0x0008eff0: lea edx, [rip+0xd8d5a]; cmove rax, rdx; ret;
0x0008eff1: adc eax, 0xd8d5a; cmove rax, rdx; ret;
0x0008eff2: pop rdx; lea ecx, [rip+0x440f4800]; ret 0xfc3;
0x0008eff3: lea ecx, [rip+0x440f4800]; ret 0xfc3;
0x0008f031: vpcmpeqb xmm13, xmm15, [rbx]; test byte ptr [rdx+0x7d], 2; lea rax, [rip+0xd3a50]; lea rdx, [rip+0xd39e9]; cmove rax, rdx; ret;
0x0008f035: test byte ptr [rdx+0x7d], 2; lea rax, [rip+0xd3a50]; lea rdx, [rip+0xd39e9]; cmove rax, rdx; ret;
0x0008f038: add cl, [rax-0x73]; add eax, 0xd3a50; lea rdx, [rip+0xd39e9]; cmove rax, rdx; ret;
0x0008f039: lea rax, [rip+0xd3a50]; lea rdx, [rip+0xd39e9]; cmove rax, rdx; ret;
0x0008f03a: lea eax, [rip+0xd3a50]; lea rdx, [rip+0xd39e9]; cmove rax, rdx; ret;
0x0008f03b: add eax, 0xd3a50; lea rdx, [rip+0xd39e9]; cmove rax, rdx; ret;
0x0008f03f: add [rax-0x73], cl; adc eax, 0xd39e9; cmove rax, rdx; ret;
0x0008f040: lea rdx, [rip+0xd39e9]; cmove rax, rdx; ret;
0x0008f041: lea edx, [rip+0xd39e9]; cmove rax, rdx; ret;
0x0008f042: adc eax, 0xd39e9; cmove rax, rdx; ret;
0x0008f044: cmp [rip+0x440f4800], ecx; ret 0xfc3;
0x0008f053: cmp [rbp+0xd], edi; add [rax+0x2c7408e5], al; ret;
0x0008f067: shl dword ptr [rax], 0x75; xor eax, 0x4808e183; lea edx, [rip+0xb381b]; lea rax, [rip+0xae2a4]; cmovne rax, rdx; ret;
0x0008f068: and [rbp+0x35], dh; and ecx, 8; lea rdx, [rip+0xb381b]; lea rax, [rip+0xae2a4]; cmovne rax, rdx; ret;
0x0008f06a: xor eax, 0x4808e183; lea edx, [rip+0xb381b]; lea rax, [rip+0xae2a4]; cmovne rax, rdx; ret;
0x0008f06b: and ecx, 8; lea rdx, [rip+0xb381b]; lea rax, [rip+0xae2a4]; cmovne rax, rdx; ret;
0x0008f06d: or [rax-0x73], cl; adc eax, 0xb381b; lea rax, [rip+0xae2a4]; cmovne rax, rdx; ret;
0x0008f06e: lea rdx, [rip+0xb381b]; lea rax, [rip+0xae2a4]; cmovne rax, rdx; ret;
0x0008f06f: lea edx, [rip+0xb381b]; lea rax, [rip+0xae2a4]; cmovne rax, rdx; ret;
0x0008f070: adc eax, 0xb381b; lea rax, [rip+0xae2a4]; cmovne rax, rdx; ret;
0x0008f071: sbb edi, [rax]; or eax, [rax]; lea rax, [rip+0xae2a4]; cmovne rax, rdx; ret;
0x0008f072: cmp [rbx], cl; add [rax-0x73], cl; add eax, 0xae2a4; cmovne rax, rdx; ret;
0x0008f073: or eax, [rax]; lea rax, [rip+0xae2a4]; cmovne rax, rdx; ret;
0x0008f074: add [rax-0x73], cl; add eax, 0xae2a4; cmovne rax, rdx; ret;
0x0008f075: lea rax, [rip+0xae2a4]; cmovne rax, rdx; ret;
0x0008f076: lea eax, [rip+0xae2a4]; cmovne rax, rdx; ret;
0x0008f077: add eax, 0xae2a4; cmovne rax, rdx; ret;
0x0008f081: nop [rax]; test byte ptr [rdx+0x7d], 2; lea rax, [rip+0xd875d]; lea rdx, [rip+0xd86e6]; cmove rax, rdx; ret;
0x0008f086: add [rax], al; test byte ptr [rdx+0x7d], 2; lea rax, [rip+0xd875d]; lea rdx, [rip+0xd86e6]; cmove rax, rdx; ret;
0x0008f088: test byte ptr [rdx+0x7d], 2; lea rax, [rip+0xd875d]; lea rdx, [rip+0xd86e6]; cmove rax, rdx; ret;
0x0008f08b: add cl, [rax-0x73]; add eax, 0xd875d; lea rdx, [rip+0xd86e6]; cmove rax, rdx; ret;
0x0008f08c: lea rax, [rip+0xd875d]; lea rdx, [rip+0xd86e6]; cmove rax, rdx; ret;
0x0008f08d: lea eax, [rip+0xd875d]; lea rdx, [rip+0xd86e6]; cmove rax, rdx; ret;
0x0008f08e: add eax, 0xd875d; lea rdx, [rip+0xd86e6]; cmove rax, rdx; ret;
0x0008f08f: pop rbp; xchg [rip+0x158d4800], ecx; out 0x86, al; or eax, 0x440f4800; ret 0x90c3;
0x0008f090: xchg [rip+0x158d4800], ecx; out 0x86, al; or eax, 0x440f4800; ret 0x90c3;
0x0008f091: or eax, 0x158d4800; out 0x86, al; or eax, 0x440f4800; ret 0x90c3;
0x0008f092: add [rax-0x73], cl; adc eax, 0xd86e6; cmove rax, rdx; ret;
0x0008f093: lea rdx, [rip+0xd86e6]; cmove rax, rdx; ret;
0x0008f094: lea edx, [rip+0xd86e6]; cmove rax, rdx; ret;
0x0008f095: adc eax, 0xd86e6; cmove rax, rdx; ret;
0x0008f096: out 0x86, al; or eax, 0x440f4800; ret 0x90c3;
0x0008f097: xchg [rip+0x440f4800], cl; ret 0x90c3;
0x0008f09f: nop; test byte ptr [rdx+0x7d], 2; lea rax, [rip+0x18655]; lea rdx, [rip+0x1858e]; cmove rax, rdx; ret;
0x0008f0a0: test byte ptr [rdx+0x7d], 2; lea rax, [rip+0x18655]; lea rdx, [rip+0x1858e]; cmove rax, rdx; ret;
0x0008f0a3: add cl, [rax-0x73]; add eax, 0x18655; lea rdx, [rip+0x1858e]; cmove rax, rdx; ret;
0x0008f0a4: lea rax, [rip+0x18655]; lea rdx, [rip+0x1858e]; cmove rax, rdx; ret;
0x0008f0a5: lea eax, [rip+0x18655]; lea rdx, [rip+0x1858e]; cmove rax, rdx; ret;
0x0008f0a6: add eax, 0x18655; lea rdx, [rip+0x1858e]; cmove rax, rdx; ret;
0x0008f0a7: push rbp; xchg [rcx], al; add [rax-0x73], cl; adc eax, 0x1858e; cmove rax, rdx; ret;
0x0008f0a8: xchg [rcx], al; add [rax-0x73], cl; adc eax, 0x1858e; cmove rax, rdx; ret;
0x0008f0a9: add [rax], eax; lea rdx, [rip+0x1858e]; cmove rax, rdx; ret;
0x0008f0aa: add [rax-0x73], cl; adc eax, 0x1858e; cmove rax, rdx; ret;
0x0008f0ab: lea rdx, [rip+0x1858e]; cmove rax, rdx; ret;
0x0008f0ac: lea edx, [rip+0x1858e]; cmove rax, rdx; ret;
0x0008f0ad: adc eax, 0x1858e; cmove rax, rdx; ret;
0x0008f0ae: mov es, [rbp+0xf480001]; ret 0x66c3;
0x0008f0af: test [rcx], eax; add [rax+0xf], cl; ret 0x66c3;
0x0008f0c8: nop [rax+rax]; mov edx, 0xffffffff; bsf eax, edi; cmove eax, edx; add eax, 1; ret;
0x0008f0cd: add [rax], al; add [rdx-1], bh; bsf eax, edi; cmove eax, edx; add eax, 1; ret;
0x0008f0ce: add [rax], al; mov edx, 0xffffffff; bsf eax, edi; cmove eax, edx; add eax, 1; ret;
0x0008f0cf: add [rdx-1], bh; bsf eax, edi; cmove eax, edx; add eax, 1; ret;
0x0008f0d0: mov edx, 0xffffffff; bsf eax, edi; cmove eax, edx; add eax, 1; ret;
0x0008f0d4: dec dword ptr [rdi]; mov esp, 0xc2440fc7; add eax, 1; ret;
0x0008f0d5: bsf eax, edi; cmove eax, edx; add eax, 1; ret;
0x0008f0d6: mov esp, 0xc2440fc7; add eax, 1; ret;
0x0008f0e0: mov eax, 0xffffffff; mov edx, eax; bsf rax, rdi; cmove rax, rdx; add eax, 1; ret;
0x0008f0e5: mov edx, eax; bsf rax, rdi; cmove rax, rdx; add eax, 1; ret;
0x0008f0e7: bsf rax, rdi; cmove rax, rdx; add eax, 1; ret;
0x0008f0e8: bsf eax, edi; cmove rax, rdx; add eax, 1; ret;
0x0008f0e9: mov esp, 0x440f48c7; ret 0xc083;
0x0008f0eb: cmove rax, rdx; add eax, 1; ret;
0x0008f0ec: cmove eax, edx; add eax, 1; ret;
0x0008f13b: adc [rbp+0x16], dh; test byte ptr [rcx+0x71], 2; lea rax, [rip+0x13517]; lea rdx, [rip+0xc1720]; cmovne rax, rdx; ret;
0x0008f13e: test byte ptr [rcx+0x71], 2; lea rax, [rip+0x13517]; lea rdx, [rip+0xc1720]; cmovne rax, rdx; ret;
0x0008f141: add cl, [rax-0x73]; add eax, 0x13517; lea rdx, [rip+0xc1720]; cmovne rax, rdx; ret;
0x0008f142: lea rax, [rip+0x13517]; lea rdx, [rip+0xc1720]; cmovne rax, rdx; ret;
0x0008f143: lea eax, [rip+0x13517]; lea rdx, [rip+0xc1720]; cmovne rax, rdx; ret;
0x0008f144: add eax, 0x13517; lea rdx, [rip+0xc1720]; cmovne rax, rdx; ret;
0x0008f146: xor eax, 0x8d480001; adc eax, 0xc1720; cmovne rax, rdx; ret;
0x0008f147: add [rax], eax; lea rdx, [rip+0xc1720]; cmovne rax, rdx; ret;
0x0008f148: add [rax-0x73], cl; adc eax, 0xc1720; cmovne rax, rdx; ret;
0x0008f149: lea rdx, [rip+0xc1720]; cmovne rax, rdx; ret;
0x0008f14a: lea edx, [rip+0xc1720]; cmovne rax, rdx; ret;
0x0008f14b: adc eax, 0xc1720; cmovne rax, rdx; ret;
0x0008f14c: and [rdi], dl; or al, 0; cmovne rax, rdx; ret;
0x0008f19b: adc [rbp+0x16], dh; test byte ptr [rcx+0x71], 2; lea rax, [rip+0x59d7]; lea rdx, [rip+0xc2ed0]; cmovne rax, rdx; ret;
0x0008f19e: test byte ptr [rcx+0x71], 2; lea rax, [rip+0x59d7]; lea rdx, [rip+0xc2ed0]; cmovne rax, rdx; ret;
0x0008f1a1: add cl, [rax-0x73]; add eax, 0x59d7; lea rdx, [rip+0xc2ed0]; cmovne rax, rdx; ret;
0x0008f1a2: lea rax, [rip+0x59d7]; lea rdx, [rip+0xc2ed0]; cmovne rax, rdx; ret;
0x0008f1a3: lea eax, [rip+0x59d7]; lea rdx, [rip+0xc2ed0]; cmovne rax, rdx; ret;
0x0008f1a4: add eax, 0x59d7; lea rdx, [rip+0xc2ed0]; cmovne rax, rdx; ret;
0x0008f1a5: xlat [rbx]; pop rcx; add [rax], al; lea rdx, [rip+0xc2ed0]; cmovne rax, rdx; ret;
0x0008f1a6: pop rcx; add [rax], al; lea rdx, [rip+0xc2ed0]; cmovne rax, rdx; ret;
0x0008f1a7: add [rax], al; lea rdx, [rip+0xc2ed0]; cmovne rax, rdx; ret;
0x0008f1a8: add [rax-0x73], cl; adc eax, 0xc2ed0; cmovne rax, rdx; ret;
0x0008f1a9: lea rdx, [rip+0xc2ed0]; cmovne rax, rdx; ret;
0x0008f1aa: lea edx, [rip+0xc2ed0]; cmovne rax, rdx; ret;
0x0008f1ab: adc eax, 0xc2ed0; cmovne rax, rdx; ret;
0x0008f1ac: shr byte ptr [rsi], 1; or al, 0; cmovne rax, rdx; ret;
0x0008f1ad: or al, 0; cmovne rax, rdx; ret;
0x0008f1ee: add [rax-0x1a7fea8c], al; add cl, [rax-0x73]; add eax, 0x9674; lea rdx, [rip+0xb8c8d]; cmovne rax, rdx; ret;
0x0008f1ef: xor byte ptr [rbp+rdx-0x80], 0xe5; add cl, [rax-0x73]; add eax, 0x9674; lea rdx, [rip+0xb8c8d]; cmovne rax, rdx; ret;
0x0008f1f1: adc eax, 0x4802e580; lea eax, [rip+0x9674]; lea rdx, [rip+0xb8c8d]; cmovne rax, rdx; ret;
0x0008f1f2: and ch, 2; lea rax, [rip+0x9674]; lea rdx, [rip+0xb8c8d]; cmovne rax, rdx; ret;
0x0008f1f3: in eax, 2; lea rax, [rip+0x9674]; lea rdx, [rip+0xb8c8d]; cmovne rax, rdx; ret;
0x0008f1f4: add cl, [rax-0x73]; add eax, 0x9674; lea rdx, [rip+0xb8c8d]; cmovne rax, rdx; ret;
0x0008f1f5: lea rax, [rip+0x9674]; lea rdx, [rip+0xb8c8d]; cmovne rax, rdx; ret;
0x0008f1f6: lea eax, [rip+0x9674]; lea rdx, [rip+0xb8c8d]; cmovne rax, rdx; ret;
0x0008f1f7: add eax, 0x9674; lea rdx, [rip+0xb8c8d]; cmovne rax, rdx; ret;
0x0008f1f9: xchg esi, eax; add [rax], al; lea rdx, [rip+0xb8c8d]; cmovne rax, rdx; ret;
0x0008f1fa: add [rax], al; lea rdx, [rip+0xb8c8d]; cmovne rax, rdx; ret;
0x0008f1fb: add [rax-0x73], cl; adc eax, 0xb8c8d; cmovne rax, rdx; ret;
0x0008f1fc: lea rdx, [rip+0xb8c8d]; cmovne rax, rdx; ret;
0x0008f1fd: lea edx, [rip+0xb8c8d]; cmovne rax, rdx; ret;
0x0008f1fe: adc eax, 0xb8c8d; cmovne rax, rdx; ret;
0x0008f1ff: lea ecx, [rbx+rcx+0x450f4800]; ret 0xfc3;
0x0008f200: mov [rbx], cs; add [rax+0xf], cl; ret 0xfc3;
0x0008f23e: add [rax-0x1a7fea8c], al; add cl, [rax-0x73]; add eax, 0xb864; lea rdx, [rip+0xbad8d]; cmovne rax, rdx; ret;
0x0008f23f: xor byte ptr [rbp+rdx-0x80], 0xe5; add cl, [rax-0x73]; add eax, 0xb864; lea rdx, [rip+0xbad8d]; cmovne rax, rdx; ret;
0x0008f241: adc eax, 0x4802e580; lea eax, [rip+0xb864]; lea rdx, [rip+0xbad8d]; cmovne rax, rdx; ret;
0x0008f242: and ch, 2; lea rax, [rip+0xb864]; lea rdx, [rip+0xbad8d]; cmovne rax, rdx; ret;
0x0008f243: in eax, 2; lea rax, [rip+0xb864]; lea rdx, [rip+0xbad8d]; cmovne rax, rdx; ret;
0x0008f244: add cl, [rax-0x73]; add eax, 0xb864; lea rdx, [rip+0xbad8d]; cmovne rax, rdx; ret;
0x0008f245: lea rax, [rip+0xb864]; lea rdx, [rip+0xbad8d]; cmovne rax, rdx; ret;
0x0008f246: lea eax, [rip+0xb864]; lea rdx, [rip+0xbad8d]; cmovne rax, rdx; ret;
0x0008f247: add eax, 0xb864; lea rdx, [rip+0xbad8d]; cmovne rax, rdx; ret;
0x0008f248: mov eax, 0x8d480000; adc eax, 0xbad8d; cmovne rax, rdx; ret;
0x0008f249: mov eax, 0x8d480000; adc eax, 0xbad8d; cmovne rax, rdx; ret;
0x0008f24a: add [rax], al; lea rdx, [rip+0xbad8d]; cmovne rax, rdx; ret;
0x0008f24b: add [rax-0x73], cl; adc eax, 0xbad8d; cmovne rax, rdx; ret;
0x0008f24c: lea rdx, [rip+0xbad8d]; cmovne rax, rdx; ret;
0x0008f24d: lea edx, [rip+0xbad8d]; cmovne rax, rdx; ret;
0x0008f24e: adc eax, 0xbad8d; cmovne rax, rdx; ret;
0x0008f24f: lea ebp, [rbp+0xf48000b]; ret 0xfc3;
0x0008f250: lodsd [rsi]; or eax, [rax]; cmovne rax, rdx; ret;
0x0008f28e: add [rax-0x1a7fea8c], al; add cl, [rax-0x73]; add eax, 0x95e4; lea rdx, [rip+0xb8bfd]; cmovne rax, rdx; ret;
0x0008f28f: xor byte ptr [rbp+rdx-0x80], 0xe5; add cl, [rax-0x73]; add eax, 0x95e4; lea rdx, [rip+0xb8bfd]; cmovne rax, rdx; ret;
0x0008f291: adc eax, 0x4802e580; lea eax, [rip+0x95e4]; lea rdx, [rip+0xb8bfd]; cmovne rax, rdx; ret;
0x0008f292: and ch, 2; lea rax, [rip+0x95e4]; lea rdx, [rip+0xb8bfd]; cmovne rax, rdx; ret;
0x0008f293: in eax, 2; lea rax, [rip+0x95e4]; lea rdx, [rip+0xb8bfd]; cmovne rax, rdx; ret;
0x0008f294: add cl, [rax-0x73]; add eax, 0x95e4; lea rdx, [rip+0xb8bfd]; cmovne rax, rdx; ret;
0x0008f295: lea rax, [rip+0x95e4]; lea rdx, [rip+0xb8bfd]; cmovne rax, rdx; ret;
0x0008f296: lea eax, [rip+0x95e4]; lea rdx, [rip+0xb8bfd]; cmovne rax, rdx; ret;
0x0008f297: add eax, 0x95e4; lea rdx, [rip+0xb8bfd]; cmovne rax, rdx; ret;
0x0008f298: in al, 0x95; add [rax], al; lea rdx, [rip+0xb8bfd]; cmovne rax, rdx; ret;
0x0008f299: xchg ebp, eax; add [rax], al; lea rdx, [rip+0xb8bfd]; cmovne rax, rdx; ret;
0x0008f29a: add [rax], al; lea rdx, [rip+0xb8bfd]; cmovne rax, rdx; ret;
0x0008f29b: add [rax-0x73], cl; adc eax, 0xb8bfd; cmovne rax, rdx; ret;
0x0008f29c: lea rdx, [rip+0xb8bfd]; cmovne rax, rdx; ret;
0x0008f29d: lea edx, [rip+0xb8bfd]; cmovne rax, rdx; ret;
0x0008f29e: adc eax, 0xb8bfd; cmovne rax, rdx; ret;
0x0008f29f: std; mov ecx, [rbx]; add [rax+0xf], cl; ret 0xfc3;
0x0008f2a0: mov ecx, [rbx]; add [rax+0xf], cl; ret 0xfc3;
0x0008f2de: add [rax-0x1a7fea8c], al; add cl, [rax-0x73]; add eax, 0xb7d4; lea rdx, [rip+0xbacfd]; cmovne rax, rdx; ret;
0x0008f2df: xor byte ptr [rbp+rdx-0x80], 0xe5; add cl, [rax-0x73]; add eax, 0xb7d4; lea rdx, [rip+0xbacfd]; cmovne rax, rdx; ret;
0x0008f2e1: adc eax, 0x4802e580; lea eax, [rip+0xb7d4]; lea rdx, [rip+0xbacfd]; cmovne rax, rdx; ret;
0x0008f2e2: and ch, 2; lea rax, [rip+0xb7d4]; lea rdx, [rip+0xbacfd]; cmovne rax, rdx; ret;
0x0008f2e3: in eax, 2; lea rax, [rip+0xb7d4]; lea rdx, [rip+0xbacfd]; cmovne rax, rdx; ret;
0x0008f2e4: add cl, [rax-0x73]; add eax, 0xb7d4; lea rdx, [rip+0xbacfd]; cmovne rax, rdx; ret;
0x0008f2e5: lea rax, [rip+0xb7d4]; lea rdx, [rip+0xbacfd]; cmovne rax, rdx; ret;
0x0008f2e6: lea eax, [rip+0xb7d4]; lea rdx, [rip+0xbacfd]; cmovne rax, rdx; ret;
0x0008f2e7: add eax, 0xb7d4; lea rdx, [rip+0xbacfd]; cmovne rax, rdx; ret;
0x0008f2e9: mov bh, 0; add [rax-0x73], cl; adc eax, 0xbacfd; cmovne rax, rdx; ret;
0x0008f2ea: add [rax], al; lea rdx, [rip+0xbacfd]; cmovne rax, rdx; ret;
0x0008f2eb: add [rax-0x73], cl; adc eax, 0xbacfd; cmovne rax, rdx; ret;
0x0008f2ec: lea rdx, [rip+0xbacfd]; cmovne rax, rdx; ret;
0x0008f2ed: lea edx, [rip+0xbacfd]; cmovne rax, rdx; ret;
0x0008f2ee: adc eax, 0xbacfd; cmovne rax, rdx; ret;
0x0008f2ef: std; lodsb [rsi]; or eax, [rax]; cmovne rax, rdx; ret;
0x0008f2f0: lodsb [rsi]; or eax, [rax]; cmovne rax, rdx; ret;
0x0008f2f1: or eax, [rax]; cmovne rax, rdx; ret;
0x0008f333: cmp [rdi-7], ebx; jmp qword ptr [rsi+0xf];
0x0008f334: pop rdi; stc; jmp qword ptr [rsi+0xf];
0x0008f34a: push rdx; pop rsi; stc; call far fword ptr [rbp+0x31];
0x0008f34b: pop rsi; stc; call far fword ptr [rbp+0x31];
0x0008f34c: stc; call far fword ptr [rbp+0x31];
0x0008f34d: call far fword ptr [rbp+0x31];
0x0008f34e: pop rbp; xor eax, eax; pop r12; pop r13; ret;
0x0008f34f: xor eax, eax; pop r12; pop r13; ret;
0x0008f350: rol byte ptr [rcx+0x5c], 0x41; pop rbp; ret;
0x0008f391: vpcmpeqb xmm13, xmm15, [rbx]; test byte ptr [rdx+0x7d], 2; lea rax, [rip+0xd3bd0]; lea rdx, [rip+0xd3b69]; cmove rax, rdx; ret;
0x0008f395: test byte ptr [rdx+0x7d], 2; lea rax, [rip+0xd3bd0]; lea rdx, [rip+0xd3b69]; cmove rax, rdx; ret;
0x0008f398: add cl, [rax-0x73]; add eax, 0xd3710; lea rdx, [rip+0xd36a9]; cmove rax, rdx; ret;
0x0008f399: lea rax, [rip+0xd3bd0]; lea rdx, [rip+0xd3b69]; cmove rax, rdx; ret;
0x0008f39a: lea eax, [rip+0xd3bd0]; lea rdx, [rip+0xd3b69]; cmove rax, rdx; ret;
0x0008f39b: add eax, 0xd3710; lea rdx, [rip+0xd36a9]; cmove rax, rdx; ret;
0x0008f39c: adc [rdi], dh; or eax, 0x158d4800; test eax, 0x48000d36; cmove eax, edx; ret;
0x0008f39e: or eax, 0x158d4800; test eax, 0x48000d36; cmove eax, edx; ret;
0x0008f39f: add [rax-0x73], cl; adc eax, 0xd36a9; cmove rax, rdx; ret;
0x0008f3a0: lea rdx, [rip+0xd3b69]; cmove rax, rdx; ret;
0x0008f3a1: lea edx, [rip+0xd3b69]; cmove rax, rdx; ret;
0x0008f3a2: adc eax, 0xd36a9; cmove rax, rdx; ret;
0x0008f3a3: test eax, 0x48000d36; cmove eax, edx; ret;
0x0008f3a4: or eax, 0x440f4800; ret 0xfc3;
0x0008f3a5: or eax, 0x440f4800; ret 0xfc3;
0x0008f3c7: shl dword ptr [rax], 0x75; xor eax, 0x4808e183; lea edx, [rip+0xb34db]; lea rax, [rip+0xadf64]; cmovne rax, rdx; ret;
0x0008f3c8: and [rbp+0x35], dh; and ecx, 8; lea rdx, [rip+0xb34db]; lea rax, [rip+0xadf64]; cmovne rax, rdx; ret;
0x0008f3ca: xor eax, 0x4808e183; lea edx, [rip+0xb34db]; lea rax, [rip+0xadf64]; cmovne rax, rdx; ret;
0x0008f3cb: and ecx, 8; lea rdx, [rip+0xb34db]; lea rax, [rip+0xadf64]; cmovne rax, rdx; ret;
0x0008f3cd: or [rax-0x73], cl; adc eax, 0xb34db; lea rax, [rip+0xadf64]; cmovne rax, rdx; ret;
0x0008f3ce: lea rdx, [rip+0xb34db]; lea rax, [rip+0xadf64]; cmovne rax, rdx; ret;
0x0008f3cf: lea edx, [rip+0xb34db]; lea rax, [rip+0xadf64]; cmovne rax, rdx; ret;
0x0008f3d0: adc eax, 0xb34db; lea rax, [rip+0xadf64]; cmovne rax, rdx; ret;
0x0008f3d2: xor al, 0xb; add [rax-0x73], cl; add eax, 0xadf64; cmovne rax, rdx; ret;
0x0008f3d3: or eax, [rax]; lea rax, [rip+0xadf64]; cmovne rax, rdx; ret;
0x0008f3d4: add [rax-0x73], cl; add eax, 0xadf64; cmovne rax, rdx; ret;
0x0008f3d5: lea rax, [rip+0xadf64]; cmovne rax, rdx; ret;
0x0008f3d6: lea eax, [rip+0xadf64]; cmovne rax, rdx; ret;
0x0008f3d7: add eax, 0xadf64; cmovne rax, rdx; ret;
0x0008f3d8: fisttp word ptr fs:[rdx], st; add [rax+0xf], cl; ret 0xfc3;
0x0008f3d9: fisttp word ptr [rdx], st; add [rax+0xf], cl; ret 0xfc3;
0x0008f3da: or al, [rax]; cmovne rax, rdx; ret;
0x0008f3e1: nop [rax]; test byte ptr [rdx+0x7d], 2; lea rax, [rip+0xd88dd]; lea rdx, [rip+0xd8866]; cmove rax, rdx; ret;
0x0008f3e6: add [rax], al; test byte ptr [rdx+0x7d], 2; lea rax, [rip+0xd88dd]; lea rdx, [rip+0xd8866]; cmove rax, rdx; ret;
0x0008f3e8: test byte ptr [rdx+0x7d], 2; lea rax, [rip+0xd88dd]; lea rdx, [rip+0xd8866]; cmove rax, rdx; ret;
0x0008f3eb: add cl, [rax-0x73]; add eax, 0xd841d; lea rdx, [rip+0xd83a6]; cmove rax, rdx; ret;
0x0008f3ec: lea rax, [rip+0xd88dd]; lea rdx, [rip+0xd8866]; cmove rax, rdx; ret;
0x0008f3ed: lea eax, [rip+0xd88dd]; lea rdx, [rip+0xd8866]; cmove rax, rdx; ret;
0x0008f3ee: add eax, 0xd841d; lea rdx, [rip+0xd83a6]; cmove rax, rdx; ret;
0x0008f3ef: sbb eax, 0x48000d84; lea edx, [rip+0xd83a6]; cmove rax, rdx; ret;
0x0008f3f0: test [rip+0x158d4800], cl; cmpsb [rsi], [rdi]; or dword ptr [rip+0x440f4800], 0xffffffc2; ret;
0x0008f3f1: or eax, 0x158d4800; cmpsb [rsi], [rdi]; or dword ptr [rip+0x440f4800], 0xffffffc2; ret;
0x0008f3f2: add [rax-0x73], cl; adc eax, 0xd83a6; cmove rax, rdx; ret;
0x0008f3f3: lea rdx, [rip+0xd8866]; cmove rax, rdx; ret;
0x0008f3f4: lea edx, [rip+0xd8866]; cmove rax, rdx; ret;
0x0008f3f5: adc eax, 0xd83a6; cmove rax, rdx; ret;
0x0008f3f6: cmpsb [rsi], [rdi]; or dword ptr [rip+0x440f4800], 0xffffffc2; ret;
0x0008f3f7: or dword ptr [rip+0x440f4800], 0xffffffc2; ret;
0x0008f3f8: or eax, 0x440f4800; ret 0x90c3;
0x0008f3ff: nop; test byte ptr [rdx+0x7d], 2; lea rax, [rip+0x187d5]; lea rdx, [rip+0x1870e]; cmove rax, rdx; ret;
0x0008f400: test byte ptr [rdx+0x7d], 2; lea rax, [rip+0x187d5]; lea rdx, [rip+0x1870e]; cmove rax, rdx; ret;
0x0008f403: add cl, [rax-0x73]; add eax, 0x18315; lea rdx, [rip+0x1824e]; cmove rax, rdx; ret;
0x0008f404: lea rax, [rip+0x187d5]; lea rdx, [rip+0x1870e]; cmove rax, rdx; ret;
0x0008f405: lea eax, [rip+0x187d5]; lea rdx, [rip+0x1870e]; cmove rax, rdx; ret;
0x0008f406: add eax, 0x18315; lea rdx, [rip+0x1824e]; cmove rax, rdx; ret;
0x0008f407: adc eax, 0x48000183; lea edx, [rip+0x1824e]; cmove rax, rdx; ret;
0x0008f408: add dword ptr [rcx], 0; lea rdx, [rip+0x1824e]; cmove rax, rdx; ret;
0x0008f409: add [rax], eax; lea rdx, [rip+0x1870e]; cmove rax, rdx; ret;
0x0008f40a: add [rax-0x73], cl; adc eax, 0x1824e; cmove rax, rdx; ret;
0x0008f40b: lea rdx, [rip+0x1870e]; cmove rax, rdx; ret;
0x0008f40c: lea edx, [rip+0x1870e]; cmove rax, rdx; ret;
0x0008f40d: adc eax, 0x1824e; cmove rax, rdx; ret;
0x0008f449: mov [rbx], rax; add rsp, 8; mov rax, r12; pop rbx; pop r12; ret;
0x0008f44a: mov [rbx], eax; add rsp, 8; mov rax, r12; pop rbx; pop r12; ret;
0x0008f515: add [rax], al; add [rcx], dh; test byte ptr [rcx-0x44], 1; add [rax], al; add [rcx-0x39], cl; ret 0xffff;
0x0008f517: add [rcx], dh; test byte ptr [rcx-0x44], 1; add [rax], al; add [rcx-0x39], cl; ret 0xffff;
0x0008f519: test byte ptr [rcx-0x44], 1; add [rax], al; add [rcx-0x39], cl; ret 0xffff;
0x0008f51d: add [rax], al; add [rcx-0x39], cl; ret 0xffff;
0x0008f57f: add [rcx-0x73], ecx; add [r9+0x39], ecx; ret 0x672;
0x0008f582: add [r9+0x39], ecx; ret 0x672;
0x0008f583: add [rcx+0x39], ecx; ret 0x672;
0x0008f586: ret 0x672;
0x0008f589: mov [rbx], r12; mov rax, r10; pop rbx; pop rbp; pop r12; ret;
0x0008f58a: mov [rbx], esp; mov rax, r10; pop rbx; pop rbp; pop r12; ret;
0x0008f58b: and ecx, [rcx+rcx*4-0x30]; pop rbx; pop rbp; pop r12; ret;
0x0008f58c: mov rax, r10; pop rbx; pop rbp; pop r12; ret;
0x0008f58d: mov eax, edx; pop rbx; pop rbp; pop r12; ret;
0x0008f58e: rcr byte ptr [rbx+0x5d], 1; pop r12; ret;
0x0008faea: test [rax+rax], ah; add al, [rax]; add [rax+0x29], cl; iretd;
0x0008faeb: and al, 0; add al, [rax]; add [rax+0x29], cl; iretd;
0x0008faed: add al, [rax]; add [rax+0x29], cl; iretd;
0x0008fbcd: dec dword ptr [rax+0x29]; iretd;
0x0008fc1e: call qword ptr [rax-0x141676b7];
0x0008fe13: add [rbp-0x16], esi; ret;
0x0008fe51: imul eax; fst dword ptr [rdx-7], st; dec dword ptr [rax-0x77]; ret;
0x0008fe53: fst dword ptr [rdx-7], st; dec dword ptr [rax-0x77]; ret;
0x0008fe54: push rdx; stc; dec dword ptr [rax-0x77]; ret;
0x0008fe55: stc; dec dword ptr [rax-0x77]; ret;
0x0008ff46: jmp far fword ptr [rdx];
0x00090112: ret 0x773;
0x00090187: add [rcx+0x39], cl; ror dword ptr [rdi], 1; test [rsi], bh; add [rax], eax; add [rax-0x7d], cl; ret 0xe901;
0x0009018a: ror dword ptr [rdi], 1; test [rsi], bh; add [rax], eax; add [rax-0x7d], cl; ret 0xe901;
0x0009018c: test [rsi], bh; add [rax], eax; add [rax-0x7d], cl; ret 0xe901;
0x0009018d: add [rax], eax; add [rax-0x7d], cl; ret 0xe901;
0x0009018e: add [rax], eax; add [rax-0x7d], cl; ret 0xe901;
0x00090190: add [rax-0x7d], cl; ret 0xe901;
0x0009044e: cld; or [rax+0xf], cl; ret;
0x0009044f: or [rax+0xf], cl; ret;
0x000904e5: adc [rcx], cl; ret 0x3949;
0x000904fa: add [rcx], ecx; ret 0x3949;
0x00090568: mov rdx, 0x10000000002; cmp rax, rdx; lea rdx, [rip+0xcb6a4]; lea rax, [rip+0x791d]; cmove rax, rdx; ret;
0x00090570: add [rax], al; cmp rax, rdx; lea rdx, [rip+0xcb6a4]; lea rax, [rip+0x791d]; cmove rax, rdx; ret;
0x00090571: add [rax+0x39], cl; ror byte ptr [rax-0x73], 1; adc eax, 0xcb6a4; lea rax, [rip+0x791d]; cmove rax, rdx; ret;
0x00090572: cmp rax, rdx; lea rdx, [rip+0xcb6a4]; lea rax, [rip+0x791d]; cmove rax, rdx; ret;
0x00090573: cmp eax, edx; lea rdx, [rip+0xcb6a4]; lea rax, [rip+0x791d]; cmove rax, rdx; ret;
0x00090574: ror byte ptr [rax-0x73], 1; adc eax, 0xcb6a4; lea rax, [rip+0x791d]; cmove rax, rdx; ret;
0x00090575: lea rdx, [rip+0xcb6a4]; lea rax, [rip+0x791d]; cmove rax, rdx; ret;
0x00090576: lea edx, [rip+0xcb6a4]; lea rax, [rip+0x791d]; cmove rax, rdx; ret;
0x00090577: adc eax, 0xcb6a4; lea rax, [rip+0x791d]; cmove rax, rdx; ret;
0x00090578: movsb [rdi], [rsi]; mov dh, 0xc; add [rax-0x73], cl; add eax, 0x791d; cmove rax, rdx; ret;
0x00090579: mov dh, 0xc; add [rax-0x73], cl; add eax, 0x791d; cmove rax, rdx; ret;
0x0009057a: or al, 0; lea rax, [rip+0x791d]; cmove rax, rdx; ret;
0x0009057b: add [rax-0x73], cl; add eax, 0x791d; cmove rax, rdx; ret;
0x0009057c: lea rax, [rip+0x791d]; cmove rax, rdx; ret;
0x0009057d: lea eax, [rip+0x791d]; cmove rax, rdx; ret;
0x0009057e: add eax, 0x791d; cmove rax, rdx; ret;
0x0009057f: sbb eax, 0x48000079; cmove eax, edx; ret;
0x000905a8: mov rdx, 0x10000000002; cmp rax, rdx; lea rdx, [rip+0xcf144]; lea rax, [rip+0xcd5d]; cmove rax, rdx; ret;
0x000905b0: add [rax], al; cmp rax, rdx; lea rdx, [rip+0xcf144]; lea rax, [rip+0xcd5d]; cmove rax, rdx; ret;
0x000905b1: add [rax+0x39], cl; ror byte ptr [rax-0x73], 1; adc eax, 0xcf144; lea rax, [rip+0xcd5d]; cmove rax, rdx; ret;
0x000905b2: cmp rax, rdx; lea rdx, [rip+0xcf144]; lea rax, [rip+0xcd5d]; cmove rax, rdx; ret;
0x000905b3: cmp eax, edx; lea rdx, [rip+0xcf144]; lea rax, [rip+0xcd5d]; cmove rax, rdx; ret;
0x000905b4: ror byte ptr [rax-0x73], 1; adc eax, 0xcf144; lea rax, [rip+0xcd5d]; cmove rax, rdx; ret;
0x000905b5: lea rdx, [rip+0xcf144]; lea rax, [rip+0xcd5d]; cmove rax, rdx; ret;
0x000905b6: lea edx, [rip+0xcf144]; lea rax, [rip+0xcd5d]; cmove rax, rdx; ret;
0x000905b7: adc eax, 0xcf144; lea rax, [rip+0xcd5d]; cmove rax, rdx; ret;
0x000905b9: int1; or al, 0; lea rax, [rip+0xcd5d]; cmove rax, rdx; ret;
0x000905ba: or al, 0; lea rax, [rip+0xcd5d]; cmove rax, rdx; ret;
0x000905bb: add [rax-0x73], cl; add eax, 0xcd5d; cmove rax, rdx; ret;
0x000905bc: lea rax, [rip+0xcd5d]; cmove rax, rdx; ret;
0x000905bd: lea eax, [rip+0xcd5d]; cmove rax, rdx; ret;
0x000905be: add eax, 0xcd5d; cmove rax, rdx; ret;
0x000905bf: pop rbp; int 0; add [rax+0xf], cl; ret 0xfc3;
0x000905c0: int 0; add [rax+0xf], cl; ret 0xfc3;
0x000906d8: add [rax-9], ecx; ror byte ptr [rax+1], 1; ret;
0x000906db: ror byte ptr [rax+1], 1; ret;
0x00090805: shl byte ptr [rdi+rsi*2+0x48], 0x89; ret 0x11eb;
0x0009084f: rcr byte ptr [rbp+0x4d], 0x89; xor al, 0x24; pop r12; pop r13; pop r14; ret;
0x00090850: pop rbp; mov [r12], r14; pop r12; pop r13; pop r14; ret;
0x00090851: mov [r12], r14; pop r12; pop r13; pop r14; ret;
0x00090852: mov [rsp], esi; pop r12; pop r13; pop r14; ret;
0x00090853: xor al, 0x24; pop r12; pop r13; pop r14; ret;
0x00090854: and al, 0x41; pop rsp; pop r13; pop r14; ret;
0x000908ca: test byte ptr [rax-0x77], 0xd0; cmovne rax, rdi; add rsp, 8; pop rbx; pop rbp; ret;
0x000908cb: mov rax, rdx; cmovne rax, rdi; add rsp, 8; pop rbx; pop rbp; ret;
0x000908cc: mov eax, edx; cmovne rax, rdi; add rsp, 8; pop rbx; pop rbp; ret;
0x000908ce: cmovne rax, rdi; add rsp, 8; pop rbx; pop rbp; ret;
0x000908cf: cmovne eax, edi; add rsp, 8; pop rbx; pop rbp; ret;
0x00090921: add [rsp+rdx+0x5b], dh; pop rbp; pop r12; ret;
0x00090923: adc al, 0x5b; pop rbp; pop r12; ret;
0x00090941: mov qword ptr [r12], 0; pop rbx; pop rbp; pop r12; ret;
0x00090942: mov dword ptr [rsp], 0; pop rbx; pop rbp; pop r12; ret;
0x00090944: and al, 0; add [rax], al; add [rbx+0x5d], bl; pop r12; ret;
0x00090985: pop rbx; mov qword ptr [rbp], 0; pop rbp; pop r12; ret;
0x00090986: mov qword ptr [rbp], 0; pop rbp; pop r12; ret;
0x00090987: mov dword ptr [rbp], 0; pop rbp; pop r12; ret;
0x00090988: add [r8], r8b; add [rax], al; add [rbp+0x41], bl; pop rsp; ret;
0x00090989: add [rax], al; add [rax], al; add [rbp+0x41], bl; pop rsp; ret;
0x0009098a: add [rax], al; add [rax], al; pop rbp; pop r12; ret;
0x00090a58: ret 0x92e8;
0x00090a8e: call qword ptr [rax+0x28c48348];
0x00090ad8: stc; dec dword ptr [rax+0x29]; ret;
0x00090ad9: dec dword ptr [rax+0x29]; ret;
0x00090aeb: cli; add [rdi-0x27], esi; pop rbx; pop rbp; pop r12; ret;
0x00090aec: add [rdi-0x27], esi; pop rbx; pop rbp; pop r12; ret;
0x00090aee: fstp dword ptr [rbx+0x5d], st; pop r12; ret;
0x00090b3e: imul al; cld; stc; dec dword ptr [rcx-0x77]; add [r8-0x77], r9b; ret 0x8548;
0x00090b40: cld; stc; dec dword ptr [rcx-0x77]; add [r8-0x77], r9b; ret 0x8548;
0x00090b42: stc; dec dword ptr [rcx-0x77]; add [r8-0x77], r9b; ret 0x8548;
0x00090b43: dec dword ptr [rcx-0x77]; add [r8-0x77], r9b; ret 0x8548;
0x00090b46: add [r8-0x77], r9b; ret 0x8548;
0x00090b5b: add [rax], al; add [rax], al; add [rax-0x3d7cb7f6], cl; add [rax-0x7d], ecx; ret;
0x00090b5d: add [rax], al; add [rax-0x3d7cb7f6], cl; add [rax-0x7d], ecx; ret;
0x00090b5f: add [rax-0x3d7cb7f6], cl; add [rax-0x7d], ecx; ret;
0x00090b61: or cl, [rax-0x7d]; ret 0x4801;
0x00090b89: add ecx, [rax-0x7d]; ret 0x4801;
0x00090b9d: add [rcx+rcx*4-0x40], al; pop rbp; pop r12; pop r13; pop r14; ret;
0x00090f07: shr eax, 1; ret;
0x0009101b: ret 0x92eb;
0x0009101d: xchg edx, eax; xchg ax, ax; xor eax, eax; ret;
0x0009102e: add eax, 0x753df980; ret 0x894c;
0x00091066: adc [rdx+rdx*8-0x57ffa8c], al; cmp eax, 0x8348f075; rol byte ptr [rcx], 0x84; sar byte ptr [rdx], cl; cmove rax, rdx; ret;
0x0009106c: cli; cmp eax, 0x8348f075; rol byte ptr [rcx], 0x84; sar byte ptr [rdx], cl; cmove rax, rdx; ret;
0x0009106d: cmp eax, 0x8348f075; rol byte ptr [rcx], 0x84; sar byte ptr [rdx], cl; cmove rax, rdx; ret;
0x00091070: add rax, 1; test dl, dl; mov edx, 0; cmove rax, rdx; ret;
0x00091071: add eax, 1; test dl, dl; mov edx, 0; cmove rax, rdx; ret;
0x00091072: rol byte ptr [rcx], 0x84; sar byte ptr [rdx], cl; cmove rax, rdx; ret;
0x00091073: add [rdx+rdx*8+0xba], eax; add [rax+0xf], cl; ret 0x41c3;
0x00091074: test dl, dl; mov edx, 0; cmove rax, rdx; ret;
0x00091075: sar byte ptr [rdx], cl; cmove rax, rdx; ret;
0x00091078: add [rax], al; add [rax+0xf], cl; ret 0x41c3;
0x0009107a: add [rax+0xf], cl; ret 0x41c3;
0x0009107e: ret 0x41c3;
0x000910a9: ret 0x415d;
0x000910b2: nop [rax+rax]; add rsp, 8; pop rbp; pop r12; ret;
0x000910b3: nop [rax+rax]; add rsp, 8; pop rbp; pop r12; ret;
0x000910b5: add [rax], r8b; add rsp, 8; pop rbp; pop r12; ret;
0x000910b6: add [rax], al; add rsp, 8; pop rbp; pop r12; ret;
0x000910e4: dec dword ptr [rax-0x7b]; shl byte ptr [rsi+rcx+0x48], 0x89; ret 0x894c;
0x000910e7: shl byte ptr [rsi+rcx+0x48], 0x89; ret 0x894c;
0x00091318: mov [r12], rbp; pop rbp; pop r12; pop r13; pop r14; ret;
0x00091319: mov [rsp], ebp; pop rbp; pop r12; pop r13; pop r14; ret;
0x0009131a: sub al, 0x24; pop rbp; pop r12; pop r13; pop r14; ret;
0x0009131b: and al, 0x5d; pop r12; pop r13; pop r14; ret;
0x0009133e: lea rdi, [rax+1]; test rax, rax; mov rax, rbx; pop rbx; cmovne rax, rdi; ret;
0x0009133f: lea edi, [rax+1]; test rax, rax; mov rax, rbx; pop rbx; cmovne rax, rdi; ret;
0x00091341: add [rax-0x7b], ecx; ror byte ptr [rax-0x77], 0xd8; pop rbx; cmovne rax, rdi; ret;
0x00091342: test rax, rax; mov rax, rbx; pop rbx; cmovne rax, rdi; ret;
0x00091343: test eax, eax; mov rax, rbx; pop rbx; cmovne rax, rdi; ret;
0x00091344: ror byte ptr [rax-0x77], 0xd8; pop rbx; cmovne rax, rdi; ret;
0x00091345: mov rax, rbx; pop rbx; cmovne rax, rdi; ret;
0x00091346: mov eax, ebx; pop rbx; cmovne rax, rdi; ret;
0x00091347: fcomp st, dword ptr [rbx+0x48]; cmovne eax, edi; ret;
0x00091348: pop rbx; cmovne rax, rdi; ret;
0x0009165f: cmp [rax+0xdb24bc], al; add [rax], al; add [rcx+0xf], al; xchg ebp, eax; ret;
0x00091663: fild st, dword ptr [rax]; add [rax], al; add [rcx+0xf], al; xchg ebp, eax; ret;
0x00091665: add [rax], al; add [rcx+0xf], al; xchg ebp, eax; ret;
0x00091667: add [rcx+0xf], al; xchg ebp, eax; ret;
0x00091941: mov [rcx-0x7d], cl; ret;
0x00091b24: add [rbx+0x294803e0], eax; ret 0x14c;
0x000920af: inc dword ptr [rbx+rcx*4-0x4c]; and al, 0x98; add [rax], al; add [rbp-0x7b], al; test byte ptr [rdi], 0x85; iretd;
0x000920b2: mov ah, 0x24; cwde; add [rax], al; add [rbp-0x7b], al; test byte ptr [rdi], 0x85; iretd;
0x000920b3: and al, 0x98; add [rax], al; add [rbp-0x7b], al; test byte ptr [rdi], 0x85; iretd;
0x000920b4: cwde; add [rax], al; add [rbp-0x7b], al; test byte ptr [rdi], 0x85; iretd;
0x000920b5: add [rax], al; add [rbp-0x7b], al; test byte ptr [rdi], 0x85; iretd;
0x000920b7: add [rbp-0x7b], al; test byte ptr [rdi], 0x85; iretd;
0x000920ba: test byte ptr [rdi], 0x85; iretd;
0x0009227b: or byte ptr [rax-0x7cb7f8ec], 0xe8; add [rbp+0x40ea75c0], eax; or [rdi], dh; mov eax, r8d; ret;
0x00092282: add [rbp+0x40ea75c0], eax; or [rdi], dh; mov eax, r8d; ret;
0x00092284: shl byte ptr [rbp-0x16], 0x40; or [rdi], dh; mov eax, r8d; ret;
0x00092287: or [rdi], sil; mov eax, r8d; ret;
0x00092288: or [rdi], dh; mov eax, r8d; ret;
0x00092764: dec dword ptr [rax-0x7b]; ror byte ptr [rdi], 0x89; ret 0;
0x00092767: ror byte ptr [rdi], 0x89; ret 0;
0x00092786: ror byte ptr [rdi], 0x84; call qword ptr [rbx];
0x00092b4c: adc [rax-0x7d], ecx; ret 0x8301;
0x00092eb2: add ecx, [rax+0x29]; ret 0x8d49;
0x00092ebe: call qword ptr [rax+0x7148d49];
0x00092fe6: inc dword ptr [rdi+rcx-0x4a]; push rdi; add [rcx], esi; inc dword ptr [rbp+0x38]; ret 0x1475;
0x00092fe9: mov dh, 0x57; add [rcx], esi; inc dword ptr [rbp+0x38]; ret 0x1475;
0x00092fea: push rdi; add [rcx], esi; inc dword ptr [rbp+0x38]; ret 0x1475;
0x00092feb: add [rcx], esi; inc dword ptr [rbp+0x38]; ret 0x1475;
0x00092fed: inc dword ptr [rbp+0x38]; ret 0x1475;
0x00092ff0: ret 0x1475;
0x0009362a: xchg ebp, esp; add [rax], al; add [rax+0x29], cl; ret;
0x0009362c: add [rax], al; add [rax+0x29], cl; ret;
0x000936dd: add [rcx+0x38], eax; ret;
0x00093754: mov [rax+0x29], cl; ret 0x14c;
0x00093b28: ret 0x8d4a;
0x00093c9c: add [rcx-0x7d], rcx; ret;
0x00093c9d: add [rcx-0x7d], ecx; ret;
0x00093cd1: clc; dec dword ptr [rcx+0xf]; ret 0xbdeb;
0x00093cd2: dec dword ptr [rcx+0xf]; ret 0xbdeb;
0x00093cd6: ret 0xbdeb;
0x00093d33: add [rax-0x7d], ecx; ret 0x4501;
0x000941a7: add [rax-0x7d], ecx; ret 0x4101;
0x00094324: nop [rax]; mov byte ptr [rdx-1], 0; mov [rdi], rdx; ret;
0x00094326: add sil, al; inc dword ptr [rax]; mov [rdi], rdx; ret;
0x00094327: add dh, al; inc dword ptr [rax]; mov [rdi], rdx; ret;
0x00094328: mov byte ptr [rdx-1], 0; mov [rdi], rdx; ret;
0x0009432a: inc dword ptr [rax]; mov [rdi], rdx; ret;
0x00094332: add ch, bl; mov eax, 0x48001f0f; mov edx, eax; xor eax, eax; mov [rdi], rdx; ret;
0x00094334: mov eax, 0x48001f0f; mov edx, eax; xor eax, eax; mov [rdi], rdx; ret;
0x00094335: nop [rax]; mov rdx, rax; xor eax, eax; mov [rdi], rdx; ret;
0x00094338: mov rdx, rax; xor eax, eax; mov [rdi], rdx; ret;
0x00094339: mov edx, eax; xor eax, eax; mov [rdi], rdx; ret;
0x0009433b: xor eax, eax; mov [rdi], rdx; ret;
0x0009433c: ror byte ptr [rax-0x77], 0x17; ret;
0x0009437a: mov byte ptr [rax], 0; add rsp, 8; mov rax, r12; pop rbx; pop r12; ret;
0x00094390: mov qword ptr [rbx], 0; add rsp, 8; mov rax, r12; pop rbx; pop r12; ret;
0x00094391: mov dword ptr [rbx], 0; add rsp, 8; mov rax, r12; pop rbx; pop r12; ret;
0x000943e1: rol byte ptr [rcx], 0x38; shl dword ptr [rbp-0x17], 1; mov byte ptr [rdi], 0; mov [r8], rax; mov rax, r9; ret;
0x000943e2: add [rax], edi; shl dword ptr [rbp-0x17], 1; mov byte ptr [rdi], 0; mov [r8], rax; mov rax, r9; ret;
0x000943e4: shl dword ptr [rbp-0x17], 1; mov byte ptr [rdi], 0; mov [r8], rax; mov rax, r9; ret;
0x000943e7: mov byte ptr [rdi], 0; mov [r8], rax; mov rax, r9; ret;
0x000943e9: add [rcx-0x77], cl; add [rcx+rcx*4-0x38], cl; ret;
0x000943ea: mov [r8], rax; mov rax, r9; ret;
0x000943eb: mov [rax], eax; mov rax, r9; ret;
0x000943ec: add [rcx+rcx*4-0x38], cl; ret;
0x00094427: add [rcx+0x38], al; shl dword ptr [rax+0xf], 0xb6; add al, [rax+rax*8-0x76b6d38c]; ror byte ptr [rax-0x7d], cl; ret 0x4101;
0x0009442a: shl dword ptr [rax+0xf], 0xb6; add al, [rax+rax*8-0x76b6d38c]; ror byte ptr [rax-0x7d], cl; ret 0x4101;
0x0009442f: add al, [rax+rax*8-0x76b6d38c]; ror byte ptr [rax-0x7d], cl; ret 0x4101;
0x00094431: shl byte ptr [rsp+rbp+0x49], 0x89; ror byte ptr [rax-0x7d], cl; ret 0x4101;
0x00094436: ror byte ptr [rax-0x7d], cl; ret 0x4101;
0x0009444c: fild st, dword ptr [rcx-0x3a]; add al, [rax]; mov [r11], rdx; mov rax, r12; pop r12; ret;
0x0009444d: mov byte ptr [r10], 0; mov [r11], rdx; mov rax, r12; pop r12; ret;
0x0009444e: mov byte ptr [rdx], 0; mov [r11], rdx; mov rax, r12; pop r12; ret;
0x0009444f: add al, [rax]; mov [r11], rdx; mov rax, r12; pop r12; ret;
0x00094450: add [rcx-0x77], cl; adc ecx, [rcx+rcx*4-0x20]; pop r12; ret;
0x00094451: mov [r11], rdx; mov rax, r12; pop r12; ret;
0x00094452: mov [rbx], edx; mov rax, r12; pop r12; ret;
0x00094453: adc ecx, [rcx+rcx*4-0x20]; pop r12; ret;
0x00094490: out dx, eax; mov rax, r8; ret;
0x000944c0: add al, 0x39; shl byte ptr [rbp-0x15], 1; mov rax, r8; ret;
0x000944c2: shl byte ptr [rbp-0x15], 1; mov rax, r8; ret;
0x00094506: shl dword ptr [rbp-0x21], 1; mov rax, r8; ret;
0x00094508: fisttp word ptr [rcx+rcx*4-0x40], st; ret;
0x0009453f: add [rdi], cl; mov esi, 0x39d18907; ret 0x474;
0x00094541: mov esi, 0x39d18907; ret 0x474;
0x00094544: sar dword ptr [rcx], 1; ret 0x474;
0x00094546: ret 0x474;
0x00094578: sar dword ptr [rcx], 1; ret 0x940f;
0x00094581: xchg esp, eax; ret 0x3145;
0x0009458c: ret 0x1e75;
0x000945aa: shl byte ptr [rbx+0x4c], 1; mov eax, eax; ret;
0x000945e9: nop [rax]; xor r8d, r8d; mov rax, r8; ret;
0x000945eb: add byte ptr [rax], 0; add [rax], al; xor r8d, r8d; mov rax, r8; ret;
0x00094632: xchg ebp, eax; ret 0xd184;
0x00094633: ret 0xd184;
0x00094635: shl dword ptr [rbp-0x20], 1; mov rax, r8; ret;
0x0009463c: nop [rax]; xor r8d, r8d; mov rax, r8; ret;
0x00094666: or [rdi+0x1f], dh; lea rcx, [rip+0xf0664]; mov edx, eax; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx;
0x00094669: lea rcx, [rip+0xf0664]; mov edx, eax; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx;
0x0009466a: lea ecx, [rip+0xf0664]; mov edx, eax; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx;
0x0009466b: or eax, 0xf0664; mov edx, eax; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx;
0x0009466e: str [rcx+0x146348c2]; xchg ecx, eax; add rdx, rcx; jmp rdx;
0x0009466f: add [rcx+0x146348c2], cl; xchg ecx, eax; add rdx, rcx; jmp rdx;
0x00094670: mov edx, eax; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx;
0x0009467b: nop [rax+rax]; mov rdx, [rsp+0x18]; mov [rdi], rdx; add rax, rdi; ret;
0x0009467d: add [rax], r8b; mov rdx, [rsp+0x18]; mov [rdi], rdx; add rax, rdi; ret;
0x0009467e: add [rax], al; mov rdx, [rsp+0x18]; mov [rdi], rdx; add rax, rdi; ret;
0x0009467f: add [rax-0x75], cl; push rsp; and al, 0x18; mov [rdi], rdx; add rax, rdi; ret;
0x00094680: mov rdx, [rsp+0x18]; mov [rdi], rdx; add rax, rdi; ret;
0x00094681: mov edx, [rsp+0x18]; mov [rdi], rdx; add rax, rdi; ret;
0x00094682: push rsp; and al, 0x18; mov [rdi], rdx; add rax, rdi; ret;
0x00094683: and al, 0x18; mov [rdi], rdx; add rax, rdi; ret;
0x00094685: mov [rdi], rdx; add rax, rdi; ret;
0x00094686: mov [rdi], edx; add rax, rdi; ret;
0x0009468c: nop [rax]; mov [rdi], r10b; add rax, rdi; ret;
0x0009468f: add [rax+rcx*4+0x17], al; add rax, rdi; ret;
0x00094690: mov [rdi], r10b; add rax, rdi; ret;
0x00094691: mov [rdi], dl; add rax, rdi; ret;
0x00094697: nop [rax+rax]; mov [rdi], si; add rax, rdi; ret;
0x00094698: nop [rax+rax]; mov [rdi], si; add rax, rdi; ret;
0x0009469a: test [rax], al; add [rax], al; add [rax], al; mov [rdi], si; add rax, rdi; ret;
0x0009469c: add [rax], al; add [rax], al; mov [rdi], si; add rax, rdi; ret;
0x0009469e: add [rax], al; mov [rdi], si; add rax, rdi; ret;
0x000946a0: mov [rdi], si; add rax, rdi; ret;
0x000946a1: mov [rdi], esi; add rax, rdi; ret;
0x000946b0: movzx edx, word ptr [rsp-8]; add rax, rdi; mov [rdi], dx; movzx edx, byte ptr [rsp-6]; mov [rdi+2], dl; ret;
0x000946b3: and al, 0xf8; add rax, rdi; mov [rdi], dx; movzx edx, byte ptr [rsp-6]; mov [rdi+2], dl; ret;
0x000946b4: clc; add rax, rdi; mov [rdi], dx; movzx edx, byte ptr [rsp-6]; mov [rdi+2], dl; ret;
0x000946b5: add rax, rdi; mov [rdi], dx; movzx edx, byte ptr [rsp-6]; mov [rdi+2], dl; ret;
0x000946b6: add eax, edi; mov [rdi], dx; movzx edx, byte ptr [rsp-6]; mov [rdi+2], dl; ret;
0x000946b7: clc; mov [rdi], dx; movzx edx, byte ptr [rsp-6]; mov [rdi+2], dl; ret;
0x000946c1: push rdi; add al, bl; nop [rax]; mov [rdi], r8d; add rax, rdi; ret;
0x000946c2: add al, bl; nop [rax]; mov [rdi], r8d; add rax, rdi; ret;
0x000946c4: nop [rax]; mov [rdi], r8d; add rax, rdi; ret;
0x000946c7: add [rcx+rcx*4+7], al; add rax, rdi; ret;
0x000946c8: mov [rdi], r8d; add rax, rdi; ret;
0x000946c9: mov [rdi], eax; add rax, rdi; ret;
0x000946d0: mov edx, [rsp-0x10]; add rax, rdi; mov [rdi], edx; movzx edx, byte ptr [rsp-0xc]; mov [rdi+4], dl; ret;
0x000946d2: and al, 0xf0; add rax, rdi; mov [rdi], edx; movzx edx, byte ptr [rsp-0xc]; mov [rdi+4], dl; ret;
0x000946d4: add rax, rdi; mov [rdi], edx; movzx edx, byte ptr [rsp-0xc]; mov [rdi+4], dl; ret;
0x000946d5: add eax, edi; mov [rdi], edx; movzx edx, byte ptr [rsp-0xc]; mov [rdi+4], dl; ret;
0x000946d6: clc; mov [rdi], edx; movzx edx, byte ptr [rsp-0xc]; mov [rdi+4], dl; ret;
0x000946e7: add [rbx+0x48082454], cl; add eax, edi; mov [rdi], edx; movzx edx, word ptr [rsp+0xc]; mov [rdi+4], dx; ret;
0x000946e8: mov edx, [rsp+8]; add rax, rdi; mov [rdi], edx; movzx edx, word ptr [rsp+0xc]; mov [rdi+4], dx; ret;
0x000946ea: and al, 8; add rax, rdi; mov [rdi], edx; movzx edx, word ptr [rsp+0xc]; mov [rdi+4], dx; ret;
0x000946eb: or [rax+1], cl; clc; mov [rdi], edx; movzx edx, word ptr [rsp+0xc]; mov [rdi+4], dx; ret;
0x000946ec: add rax, rdi; mov [rdi], edx; movzx edx, word ptr [rsp+0xc]; mov [rdi+4], dx; ret;
0x000946ed: add eax, edi; mov [rdi], edx; movzx edx, word ptr [rsp+0xc]; mov [rdi+4], dx; ret;
0x000946ee: clc; mov [rdi], edx; movzx edx, word ptr [rsp+0xc]; mov [rdi+4], dx; ret;
0x000946ef: mov [rdi], edx; movzx edx, word ptr [rsp+0xc]; mov [rdi+4], dx; ret;
0x000946f1: movzx edx, word ptr [rsp+0xc]; mov [rdi+4], dx; ret;
0x000946f2: mov bh, 0x54; and al, 0xc; mov [rdi+4], dx; ret;
0x000946f3: push rsp; and al, 0xc; mov [rdi+4], dx; ret;
0x000946f4: and al, 0xc; mov [rdi+4], dx; ret;
0x000946f5: or al, 0x66; mov [rdi+4], edx; ret;
0x00094707: mov [rdi], edx; movzx edx, word ptr [rsp+0x14]; mov [rdi+4], dx; movzx edx, byte ptr [rsp+0x16]; mov [rdi+6], dl; ret;
0x00094709: movzx edx, word ptr [rsp+0x14]; mov [rdi+4], dx; movzx edx, byte ptr [rsp+0x16]; mov [rdi+6], dl; ret;
0x0009470a: mov bh, 0x54; and al, 0x14; mov [rdi+4], dx; movzx edx, byte ptr [rsp+0x16]; mov [rdi+6], dl; ret;
0x0009470b: push rsp; and al, 0x14; mov [rdi+4], dx; movzx edx, byte ptr [rsp+0x16]; mov [rdi+6], dl; ret;
0x0009470c: and al, 0x14; mov [rdi+4], dx; movzx edx, byte ptr [rsp+0x16]; mov [rdi+6], dl; ret;
0x0009470d: adc al, 0x66; mov [rdi+4], edx; movzx edx, byte ptr [rsp+0x16]; mov [rdi+6], dl; ret;
0x0009470e: mov [rdi+4], dx; movzx edx, byte ptr [rsp+0x16]; mov [rdi+6], dl; ret;
0x0009470f: mov [rdi+4], edx; movzx edx, byte ptr [rsp+0x16]; mov [rdi+6], dl; ret;
0x00094710: push rdi; add al, 0xf; mov dh, 0x54; and al, 0x16; mov [rdi+6], dl; ret;
0x00094711: add al, 0xf; mov dh, 0x54; and al, 0x16; mov [rdi+6], dl; ret;
0x00094712: movzx edx, byte ptr [rsp+0x16]; mov [rdi+6], dl; ret;
0x00094713: mov dh, 0x54; and al, 0x16; mov [rdi+6], dl; ret;
0x00094714: push rsp; and al, 0x16; mov [rdi+6], dl; ret;
0x00094715: and al, 0x16; mov [rdi+6], dl; ret;
0x00094739: or [rdi+0x1c], dh; lea rdi, [rip+0xf05b5]; mov edx, edx; movsxd rdx, [rdi+rdx*4]; add rdx, rdi; jmp rdx;
0x0009473b: sbb al, 0x48; lea edi, [rip+0xf05b5]; mov edx, edx; movsxd rdx, [rdi+rdx*4]; add rdx, rdi; jmp rdx;
0x0009473c: lea rdi, [rip+0xf05b5]; mov edx, edx; movsxd rdx, [rdi+rdx*4]; add rdx, rdi; jmp rdx;
0x0009473d: lea edi, [rip+0xf05b5]; mov edx, edx; movsxd rdx, [rdi+rdx*4]; add rdx, rdi; jmp rdx;
0x0009473e: cmp eax, 0xf05b5; mov edx, edx; movsxd rdx, [rdi+rdx*4]; add rdx, rdi; jmp rdx;
0x0009473f: mov ch, 5; str [rcx+0x146348d2]; xchg edi, eax; add rdx, rdi; jmp rdx;
0x00094740: add eax, 0xd289000f; movsxd rdx, [rdi+rdx*4]; add rdx, rdi; jmp rdx;
0x00094741: str [rcx+0x146348d2]; xchg edi, eax; add rdx, rdi; jmp rdx;
0x00094742: add [rcx+0x146348d2], cl; xchg edi, eax; add rdx, rdi; jmp rdx;
0x00094743: mov edx, edx; movsxd rdx, [rdi+rdx*4]; add rdx, rdi; jmp rdx;
0x00094744: ror byte ptr [rax+0x63], cl; adc al, 0x97; add rdx, rdi; jmp rdx;
0x0009474e: xchg ax, ax; mov rdx, [rsp+0x10]; mov [rax], rdx; ret;
0x0009474f: nop; mov rdx, [rsp+0x10]; mov [rax], rdx; ret;
0x00094750: mov rdx, [rsp+0x10]; mov [rax], rdx; ret;
0x00094751: mov edx, [rsp+0x10]; mov [rax], rdx; ret;
0x00094752: push rsp; and al, 0x10; mov [rax], rdx; ret;
0x00094753: and al, 0x10; mov [rax], rdx; ret;
0x00094754: adc [rax-0x77], cl; adc bl, al; nop [rax]; mov byte ptr [rax], 0; ret;
0x00094757: adc bl, al; nop [rax]; mov byte ptr [rax], 0; ret;
0x00094759: nop [rax]; mov byte ptr [rax], 0; ret;
0x0009475b: add byte ptr [rax], 0; add [rax], al; mov byte ptr [rax], 0; ret;
0x0009475c: add [rax], al; add [rax], al; mov byte ptr [rax], 0; ret;
0x0009475d: add [rax], al; add dh, al; add [rax], al; ret;
0x0009475e: add [rax], al; mov byte ptr [rax], 0; ret;
0x0009475f: add dh, al; add [rax], al; ret;
0x00094762: add bl, al; nop [rax]; mov [rax], si; ret;
0x00094764: nop [rax]; mov [rax], si; ret;
0x00094768: mov [rax], si; ret;
0x00094769: mov [rax], esi; ret;
0x0009476c: nop [rax]; movzx edx, word ptr [rsp-8]; mov [rax], dx; movzx edx, byte ptr [rsp-6]; mov [rax+2], dl; ret;
0x00094770: movzx edx, word ptr [rsp-8]; mov [rax], dx; movzx edx, byte ptr [rsp-6]; mov [rax+2], dl; ret;
0x00094771: mov bh, 0x54; and al, 0xf8; mov [rax], dx; movzx edx, byte ptr [rsp-6]; mov [rax+2], dl; ret;
0x00094772: push rsp; and al, 0xf8; mov [rax], dx; movzx edx, byte ptr [rsp-6]; mov [rax+2], dl; ret;
0x00094773: and al, 0xf8; mov [rax], dx; movzx edx, byte ptr [rsp-6]; mov [rax+2], dl; ret;
0x00094774: clc; mov [rax], dx; movzx edx, byte ptr [rsp-6]; mov [rax+2], dl; ret;
0x00094775: mov [rax], dx; movzx edx, byte ptr [rsp-6]; mov [rax+2], dl; ret;
0x00094776: mov [rax], edx; movzx edx, byte ptr [rsp-6]; mov [rax+2], dl; ret;
0x00094777: adc [rdi], cl; mov dh, 0x54; and al, 0xfa; mov [rax+2], dl; ret;
0x00094778: movzx edx, byte ptr [rsp-6]; mov [rax+2], dl; ret;
0x00094779: mov dh, 0x54; and al, 0xfa; mov [rax+2], dl; ret;
0x0009477a: push rsp; and al, 0xfa; mov [rax+2], dl; ret;
0x0009477b: and al, 0xfa; mov [rax+2], dl; ret;
0x0009477c: cli; mov [rax+2], dl; ret;
0x0009477d: mov [rax+2], dl; ret;
0x0009477e: push rax; add al, bl; nop [rax]; mov [rax], ecx; ret;
0x0009477f: add al, bl; nop [rax]; mov [rax], ecx; ret;
0x00094781: nop [rax]; mov [rax], ecx; ret;
0x00094783: add byte ptr [rax], 0; add [rax], al; mov [rax], ecx; ret;
0x00094784: add [rax], al; add [rax], al; mov [rax], ecx; ret;
0x00094786: add [rax], al; mov [rax], ecx; ret;
0x00094788: mov [rax], ecx; ret;
0x0009478b: nop [rax+rax]; mov edx, [rsp-0x10]; mov [rax], edx; movzx edx, byte ptr [rsp-0xc]; mov [rax+4], dl; ret;
0x0009478d: add [rax], r8b; mov edx, [rsp-0x10]; mov [rax], edx; movzx edx, byte ptr [rsp-0xc]; mov [rax+4], dl; ret;
0x0009478e: add [rax], al; mov edx, [rsp-0x10]; mov [rax], edx; movzx edx, byte ptr [rsp-0xc]; mov [rax+4], dl; ret;
0x0009478f: add [rbx-0x760fdbac], cl; adc [rdi], cl; mov dh, 0x54; and al, 0xf4; mov [rax+4], dl; ret;
0x00094790: mov edx, [rsp-0x10]; mov [rax], edx; movzx edx, byte ptr [rsp-0xc]; mov [rax+4], dl; ret;
0x00094791: push rsp; and al, 0xf0; mov [rax], edx; movzx edx, byte ptr [rsp-0xc]; mov [rax+4], dl; ret;
0x00094792: and al, 0xf0; mov [rax], edx; movzx edx, byte ptr [rsp-0xc]; mov [rax+4], dl; ret;
0x00094794: mov [rax], edx; movzx edx, byte ptr [rsp-0xc]; mov [rax+4], dl; ret;
0x00094795: adc [rdi], cl; mov dh, 0x54; and al, 0xf4; mov [rax+4], dl; ret;
0x00094796: movzx edx, byte ptr [rsp-0xc]; mov [rax+4], dl; ret;
0x00094797: mov dh, 0x54; and al, 0xf4; mov [rax+4], dl; ret;
0x00094798: push rsp; and al, 0xf4; mov [rax+4], dl; ret;
0x00094799: and al, 0xf4; mov [rax+4], dl; ret;
0x0009479a: hlt; mov [rax+4], dl; ret;
0x0009479b: mov [rax+4], dl; ret;
0x0009479f: nop; mov edx, [rsp-0x18]; mov [rax], edx; movzx edx, word ptr [rsp-0x14]; mov [rax+4], dx; ret;
0x000947a0: mov edx, [rsp-0x18]; mov [rax], edx; movzx edx, word ptr [rsp-0x14]; mov [rax+4], dx; ret;
0x000947a1: push rsp; and al, 0xe8; mov [rax], edx; movzx edx, word ptr [rsp-0x14]; mov [rax+4], dx; ret;
0x000947a2: and al, 0xe8; mov [rax], edx; movzx edx, word ptr [rsp-0x14]; mov [rax+4], dx; ret;
0x000947a4: mov [rax], edx; movzx edx, word ptr [rsp-0x14]; mov [rax+4], dx; ret;
0x000947a5: adc [rdi], cl; mov bh, 0x54; and al, 0xec; mov [rax+4], dx; ret;
0x000947a6: movzx edx, word ptr [rsp-0x14]; mov [rax+4], dx; ret;
0x000947a7: mov bh, 0x54; and al, 0xec; mov [rax+4], dx; ret;
0x000947a8: push rsp; and al, 0xec; mov [rax+4], dx; ret;
0x000947a9: and al, 0xec; mov [rax+4], dx; ret;
0x000947aa: in al, dx; mov [rax+4], dx; ret;
0x000947ab: mov [rax+4], dx; ret;
0x000947ac: mov [rax+4], edx; ret;
0x000947b3: or [rcx+0x54b70f10], cl; and al, 0xc; mov [rax+4], dx; movzx edx, byte ptr [rsp+0xe]; mov [rax+6], dl; ret;
0x000947b4: mov [rax], edx; movzx edx, word ptr [rsp+0xc]; mov [rax+4], dx; movzx edx, byte ptr [rsp+0xe]; mov [rax+6], dl; ret;
0x000947b6: movzx edx, word ptr [rsp+0xc]; mov [rax+4], dx; movzx edx, byte ptr [rsp+0xe]; mov [rax+6], dl; ret;
0x000947b7: mov bh, 0x54; and al, 0xc; mov [rax+4], dx; movzx edx, byte ptr [rsp+0xe]; mov [rax+6], dl; ret;
0x000947b8: push rsp; and al, 0xc; mov [rax+4], dx; movzx edx, byte ptr [rsp+0xe]; mov [rax+6], dl; ret;
0x000947b9: and al, 0xc; mov [rax+4], dx; movzx edx, byte ptr [rsp+0xe]; mov [rax+6], dl; ret;
0x000947ba: or al, 0x66; mov [rax+4], edx; movzx edx, byte ptr [rsp+0xe]; mov [rax+6], dl; ret;
0x000947bb: mov [rax+4], dx; movzx edx, byte ptr [rsp+0xe]; mov [rax+6], dl; ret;
0x000947bc: mov [rax+4], edx; movzx edx, byte ptr [rsp+0xe]; mov [rax+6], dl; ret;
0x000947bd: push rax; add al, 0xf; mov dh, 0x54; and al, 0xe; mov [rax+6], dl; ret;
0x000947be: add al, 0xf; mov dh, 0x54; and al, 0xe; mov [rax+6], dl; ret;
0x000947bf: movzx edx, byte ptr [rsp+0xe]; mov [rax+6], dl; ret;
0x000947c0: mov dh, 0x54; and al, 0xe; mov [rax+6], dl; ret;
0x000947c1: push rsp; and al, 0xe; mov [rax+6], dl; ret;
0x000947c2: and al, 0xe; mov [rax+6], dl; ret;
0x000947c4: mov [rax+6], dl; ret;
0x000947e6: or [rdi+0x1f], dh; lea r8, [rip+0xf052c]; mov edx, eax; movsxd rdx, [r8+rdx*4]; add rdx, r8; jmp rdx;
0x000947e9: lea r8, [rip+0xf052c]; mov edx, eax; movsxd rdx, [r8+rdx*4]; add rdx, r8; jmp rdx;
0x000947ea: lea eax, [rip+0xf052c]; mov edx, eax; movsxd rdx, [r8+rdx*4]; add rdx, r8; jmp rdx;
0x000947eb: add eax, 0xf052c; mov edx, eax; movsxd rdx, [r8+rdx*4]; add rdx, r8; jmp rdx;
0x000947ec: sub al, 5; str [rcx+0x146349c2]; nop; add rdx, r8; jmp rdx;
0x000947ed: add eax, 0xc289000f; movsxd rdx, [r8+rdx*4]; add rdx, r8; jmp rdx;
0x000947ee: str [rcx+0x146349c2]; nop; add rdx, r8; jmp rdx;
0x000947ef: add [rcx+0x146349c2], cl; nop; add rdx, r8; jmp rdx;
0x000947f0: mov edx, eax; movsxd rdx, [r8+rdx*4]; add rdx, r8; jmp rdx;
0x000947f1: ret 0x6349;
0x000947f2: movsxd rdx, [r8+rdx*4]; add rdx, r8; jmp rdx;
0x000947f3: movsxd edx, [rax+rdx*4]; add rdx, r8; jmp rdx;
0x000947f4: adc al, 0x90; add rdx, r8; jmp rdx;
0x000947f5: nop; add rdx, r8; jmp rdx;
0x000947fb: nop [rax+rax]; mov rdx, [rsp+0x10]; mov [rdi], rdx; lea rax, [rdi+rax-1]; ret;
0x000947fd: add [rax], r8b; mov rdx, [rsp+0x10]; mov [rdi], rdx; lea rax, [rdi+rax-1]; ret;
0x000947fe: add [rax], al; mov rdx, [rsp+0x10]; mov [rdi], rdx; lea rax, [rdi+rax-1]; ret;
0x000947ff: add [rax-0x75], cl; push rsp; and al, 0x10; mov [rdi], rdx; lea rax, [rdi+rax-1]; ret;
0x00094800: mov rdx, [rsp+0x10]; mov [rdi], rdx; lea rax, [rdi+rax-1]; ret;
0x00094801: mov edx, [rsp+0x10]; mov [rdi], rdx; lea rax, [rdi+rax-1]; ret;
0x00094802: push rsp; and al, 0x10; mov [rdi], rdx; lea rax, [rdi+rax-1]; ret;
0x00094803: and al, 0x10; mov [rdi], rdx; lea rax, [rdi+rax-1]; ret;
0x00094805: mov [rdi], rdx; lea rax, [rdi+rax-1]; ret;
0x00094806: mov [rdi], edx; lea rax, [rdi+rax-1]; ret;
0x0009480c: inc ebx; xchg ax, ax; mov byte ptr [rdi], 0; lea rax, [rdi+rax-1]; ret;
0x0009480e: xchg ax, ax; mov byte ptr [rdi], 0; lea rax, [rdi+rax-1]; ret;
0x0009480f: nop; mov byte ptr [rdi], 0; lea rax, [rdi+rax-1]; ret;
0x00094810: mov byte ptr [rdi], 0; lea rax, [rdi+rax-1]; ret;
0x00094817: inc ebx; nop [rax]; mov [rdi], si; lea rax, [rdi+rax-1]; ret;
0x00094819: nop [rax]; mov [rdi], si; lea rax, [rdi+rax-1]; ret;
0x0009481b: add byte ptr [rax], 0; add [rax], al; mov [rdi], si; lea rax, [rdi+rax-1]; ret;
0x0009481c: add [rax], al; add [rax], al; mov [rdi], si; lea rax, [rdi+rax-1]; ret;
0x0009481e: add [rax], al; mov [rdi], si; lea rax, [rdi+rax-1]; ret;
0x00094820: mov [rdi], si; lea rax, [rdi+rax-1]; ret;
0x00094821: mov [rdi], esi; lea rax, [rdi+rax-1]; ret;
0x00094830: movzx edx, word ptr [rsp-8]; lea rax, [rdi+rax-1]; mov [rdi], dx; movzx edx, byte ptr [rsp-6]; mov [rdi+2], dl; ret;
0x00094833: and al, 0xf8; lea rax, [rdi+rax-1]; mov [rdi], dx; movzx edx, byte ptr [rsp-6]; mov [rdi+2], dl; ret;
0x00094834: clc; lea rax, [rdi+rax-1]; mov [rdi], dx; movzx edx, byte ptr [rsp-6]; mov [rdi+2], dl; ret;
0x00094835: lea rax, [rdi+rax-1]; mov [rdi], dx; movzx edx, byte ptr [rsp-6]; mov [rdi+2], dl; ret;
0x00094836: lea eax, [rdi+rax-1]; mov [rdi], dx; movzx edx, byte ptr [rsp-6]; mov [rdi+2], dl; ret;
0x0009483a: mov [rdi], dx; movzx edx, byte ptr [rsp-6]; mov [rdi+2], dl; ret;
0x0009483b: mov [rdi], edx; movzx edx, byte ptr [rsp-6]; mov [rdi+2], dl; ret;
0x0009483d: movzx edx, byte ptr [rsp-6]; mov [rdi+2], dl; ret;
0x0009483e: mov dh, 0x54; and al, 0xfa; mov [rdi+2], dl; ret;
0x0009483f: push rsp; and al, 0xfa; mov [rdi+2], dl; ret;
0x00094840: and al, 0xfa; mov [rdi+2], dl; ret;
0x00094841: cli; mov [rdi+2], dl; ret;
0x00094843: push rdi; add al, bl; nop [rax+rax]; mov [rdi], ecx; lea rax, [rdi+rax-1]; ret;
0x00094844: add al, bl; nop [rax+rax]; mov [rdi], ecx; lea rax, [rdi+rax-1]; ret;
0x00094846: nop [rax+rax]; mov [rdi], ecx; lea rax, [rdi+rax-1]; ret;
0x00094847: nop [rax+rax]; mov [rdi], ecx; lea rax, [rdi+rax-1]; ret;
0x00094848: nop [rax+rax]; mov [rdi], ecx; lea rax, [rdi+rax-1]; ret;
0x0009484a: test [rax], al; add [rax], al; add [rax], al; mov [rdi], ecx; lea rax, [rdi+rax-1]; ret;
0x0009484c: add [rax], al; add [rax], al; mov [rdi], ecx; lea rax, [rdi+rax-1]; ret;
0x0009484e: add [rax], al; mov [rdi], ecx; lea rax, [rdi+rax-1]; ret;
0x00094850: mov [rdi], ecx; lea rax, [rdi+rax-1]; ret;
0x00094852: lea rax, [rdi+rax-1]; ret;
0x00094853: lea eax, [rdi+rax-1]; ret;
0x0009485f: add [rbx+0x48f02454], cl; lea eax, [rdi+rax-1]; mov [rdi], edx; movzx edx, byte ptr [rsp-0xc]; mov [rdi+4], dl; ret;
0x00094860: mov edx, [rsp-0x10]; lea rax, [rdi+rax-1]; mov [rdi], edx; movzx edx, byte ptr [rsp-0xc]; mov [rdi+4], dl; ret;
0x00094862: and al, 0xf0; lea rax, [rdi+rax-1]; mov [rdi], edx; movzx edx, byte ptr [rsp-0xc]; mov [rdi+4], dl; ret;
0x00094864: lea rax, [rdi+rax-1]; mov [rdi], edx; movzx edx, byte ptr [rsp-0xc]; mov [rdi+4], dl; ret;
0x00094865: lea eax, [rdi+rax-1]; mov [rdi], edx; movzx edx, byte ptr [rsp-0xc]; mov [rdi+4], dl; ret;
0x00094868: dec dword ptr [rcx+0x54b60f17]; and al, 0xf4; mov [rdi+4], dl; ret;
0x00094869: mov [rdi], edx; movzx edx, byte ptr [rsp-0xc]; mov [rdi+4], dl; ret;
0x0009486b: movzx edx, byte ptr [rsp-0xc]; mov [rdi+4], dl; ret;
0x0009486c: mov dh, 0x54; and al, 0xf4; mov [rdi+4], dl; ret;
0x0009486d: push rsp; and al, 0xf4; mov [rdi+4], dl; ret;
0x0009486e: and al, 0xf4; mov [rdi+4], dl; ret;
0x0009486f: hlt; mov [rdi+4], dl; ret;
0x00094877: add [rbx+0x48e82454], cl; lea eax, [rdi+rax-1]; mov [rdi], edx; movzx edx, word ptr [rsp-0x14]; mov [rdi+4], dx; ret;
0x00094878: mov edx, [rsp-0x18]; lea rax, [rdi+rax-1]; mov [rdi], edx; movzx edx, word ptr [rsp-0x14]; mov [rdi+4], dx; ret;
0x0009487a: and al, 0xe8; lea rax, [rdi+rax-1]; mov [rdi], edx; movzx edx, word ptr [rsp-0x14]; mov [rdi+4], dx; ret;
0x0009487c: lea rax, [rdi+rax-1]; mov [rdi], edx; movzx edx, word ptr [rsp-0x14]; mov [rdi+4], dx; ret;
0x0009487d: lea eax, [rdi+rax-1]; mov [rdi], edx; movzx edx, word ptr [rsp-0x14]; mov [rdi+4], dx; ret;
0x00094880: dec dword ptr [rcx+0x54b70f17]; and al, 0xec; mov [rdi+4], dx; ret;
0x00094881: mov [rdi], edx; movzx edx, word ptr [rsp-0x14]; mov [rdi+4], dx; ret;
0x00094883: movzx edx, word ptr [rsp-0x14]; mov [rdi+4], dx; ret;
0x00094884: mov bh, 0x54; and al, 0xec; mov [rdi+4], dx; ret;
0x00094885: push rsp; and al, 0xec; mov [rdi+4], dx; ret;
0x00094886: and al, 0xec; mov [rdi+4], dx; ret;
0x00094887: in al, dx; mov [rdi+4], dx; ret;
0x00094898: dec dword ptr [rcx+0x54b70f17]; and al, 0xc; mov [rdi+4], dx; movzx edx, byte ptr [rsp+0xe]; mov [rdi+6], dl; ret;
0x00094899: mov [rdi], edx; movzx edx, word ptr [rsp+0xc]; mov [rdi+4], dx; movzx edx, byte ptr [rsp+0xe]; mov [rdi+6], dl; ret;
0x0009489b: movzx edx, word ptr [rsp+0xc]; mov [rdi+4], dx; movzx edx, byte ptr [rsp+0xe]; mov [rdi+6], dl; ret;
0x0009489c: mov bh, 0x54; and al, 0xc; mov [rdi+4], dx; movzx edx, byte ptr [rsp+0xe]; mov [rdi+6], dl; ret;
0x0009489d: push rsp; and al, 0xc; mov [rdi+4], dx; movzx edx, byte ptr [rsp+0xe]; mov [rdi+6], dl; ret;
0x0009489e: and al, 0xc; mov [rdi+4], dx; movzx edx, byte ptr [rsp+0xe]; mov [rdi+6], dl; ret;
0x0009489f: or al, 0x66; mov [rdi+4], edx; movzx edx, byte ptr [rsp+0xe]; mov [rdi+6], dl; ret;
0x000948a0: mov [rdi+4], dx; movzx edx, byte ptr [rsp+0xe]; mov [rdi+6], dl; ret;
0x000948a1: mov [rdi+4], edx; movzx edx, byte ptr [rsp+0xe]; mov [rdi+6], dl; ret;
0x000948a2: push rdi; add al, 0xf; mov dh, 0x54; and al, 0xe; mov [rdi+6], dl; ret;
0x000948a3: add al, 0xf; mov dh, 0x54; and al, 0xe; mov [rdi+6], dl; ret;
0x000948a4: movzx edx, byte ptr [rsp+0xe]; mov [rdi+6], dl; ret;
0x000948a5: mov dh, 0x54; and al, 0xe; mov [rdi+6], dl; ret;
0x000948a6: push rsp; and al, 0xe; mov [rdi+6], dl; ret;
0x000948a7: and al, 0xe; mov [rdi+6], dl; ret;
0x000948a9: mov [rdi+6], dl; ret;
0x000948c8: mov rdx, 0x10000000002; cmp rax, rdx; lea rdx, [rip+0xc7484]; lea rax, [rip+0x37bd]; cmove rax, rdx; ret;
0x000948d0: add [rax], al; cmp rax, rdx; lea rdx, [rip+0xc7484]; lea rax, [rip+0x37bd]; cmove rax, rdx; ret;
0x000948d1: add [rax+0x39], cl; ror byte ptr [rax-0x73], 1; adc eax, 0xc7484; lea rax, [rip+0x37bd]; cmove rax, rdx; ret;
0x000948d2: cmp rax, rdx; lea rdx, [rip+0xc7484]; lea rax, [rip+0x37bd]; cmove rax, rdx; ret;
0x000948d3: cmp eax, edx; lea rdx, [rip+0xc7484]; lea rax, [rip+0x37bd]; cmove rax, rdx; ret;
0x000948d4: ror byte ptr [rax-0x73], 1; adc eax, 0xc7484; lea rax, [rip+0x37bd]; cmove rax, rdx; ret;
0x000948d5: lea rdx, [rip+0xc7484]; lea rax, [rip+0x37bd]; cmove rax, rdx; ret;
0x000948d6: lea edx, [rip+0xc7484]; lea rax, [rip+0x37bd]; cmove rax, rdx; ret;
0x000948d7: adc eax, 0xc7484; lea rax, [rip+0x37bd]; cmove rax, rdx; ret;
0x000948d8: test [rsp+rcx], dh; lea rax, [rip+0x37bd]; cmove rax, rdx; ret;
0x000948da: or al, 0; lea rax, [rip+0x37bd]; cmove rax, rdx; ret;
0x000948db: add [rax-0x73], cl; add eax, 0x37bd; cmove rax, rdx; ret;
0x000948dc: lea rax, [rip+0x37bd]; cmove rax, rdx; ret;
0x000948dd: lea eax, [rip+0x37bd]; cmove rax, rdx; ret;
0x000948de: add eax, 0x37bd; cmove rax, rdx; ret;
0x000948df: mov ebp, 0x48000037; cmove eax, edx; ret;
0x00094944: or [rax+0x22], bh; pop rbx; pop rbp; pop r12; pop r13; ret;
0x00094945: mov eax, 0x22; pop rbx; pop rbp; pop r12; pop r13; ret;
0x00094980: ror byte ptr [rax-0x7d], 0xc4; or [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; pop r13; ret;
0x000949ad: or [rax+0x16], bh; pop rbx; pop rbp; pop r12; pop r13; ret;
0x000949ae: mov eax, 0x16; pop rbx; pop rbp; pop r12; pop r13; ret;
0x00094a35: add [rbx+rcx*4+0x2c], cl; ret 0x854d;
0x00094a5a: ret 0xfa05;
0x00094aea: or [rbx+0x5d], bl; mov rax, r12; pop r12; pop r13; ret;
0x00094aeb: pop rbx; pop rbp; mov rax, r12; pop r12; pop r13; ret;
0x00094aec: pop rbp; mov rax, r12; pop r12; pop r13; ret;
0x00094aed: mov rax, r12; pop r12; pop r13; ret;
0x00094aee: mov eax, esp; pop r12; pop r13; ret;
0x00094b60: add eax, 0x89480000; ret 0x35e8;
0x00094b62: add [rax-0x77], cl; ret 0x35e8;
0x00094b65: ret 0x35e8;
0x00094ba9: ret 0xf1e8;
0x00094bcd: stc; call qword ptr [rax+0x8c48348];
0x00094ca2: test dword ptr [rbp+rcx*4+0x48], 0xc929490f; lea r10, [rip+0xf008f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x00094ca3: lea r9, [rax+0xf]; sub r9, rcx; lea r10, [rip+0xf008f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x00094ca4: lea ecx, [rax+0xf]; sub r9, rcx; lea r10, [rip+0xf008f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x00094ca5: cmovns rbp, [rcx]; leave; lea r10, [rip+0xf008f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x00094ca6: cmovns ebp, [rcx]; leave; lea r10, [rip+0xf008f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x00094ca7: sub r9, rcx; lea r10, [rip+0xf008f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x00094ca8: sub ecx, ecx; lea r10, [rip+0xf008f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x00094ca9: leave; lea r10, [rip+0xf008f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x00094caa: lea r10, [rip+0xf008f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x00094cab: lea edx, [rip+0xf008f]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x00094cac: adc eax, 0xf008f; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x00094cad: pop qword ptr [rax]; str [rdi+0x63]; or al, 0x8a; lea r10, [r10+r9]; jmp r10;
0x00094cae: add [rdi], cl; add [rdi+0x63], cl; or al, 0x8a; lea r10, [r10+r9]; jmp r10;
0x00094caf: str [rdi+0x63]; or al, 0x8a; lea r10, [r10+r9]; jmp r10;
0x000960aa: adc eax, 0xd0bc0f48; movzx eax, byte ptr [rdi+rdx]; movzx edx, byte ptr [rsi+rdx]; sub eax, edx; ret;
0x000960ab: bsf rdx, rax; movzx eax, byte ptr [rdi+rdx]; movzx edx, byte ptr [rsi+rdx]; sub eax, edx; ret;
0x000960ac: bsf edx, eax; movzx eax, byte ptr [rdi+rdx]; movzx edx, byte ptr [rsi+rdx]; sub eax, edx; ret;
0x000960af: movzx eax, byte ptr [rdi+rdx]; movzx edx, byte ptr [rsi+rdx]; sub eax, edx; ret;
0x000960b1: add al, 0x17; movzx edx, byte ptr [rsi+rdx]; sub eax, edx; ret;
0x000960b3: movzx edx, byte ptr [rsi+rdx]; sub eax, edx; ret;
0x000960b5: adc al, 0x16; sub eax, edx; ret;
0x0009615b: add [rax], al; add [rax], al; add [rax-0x7d], cl; rol byte ptr [rax+0x48], 0x83; ret 0x4840;
0x0009615d: add [rax], al; add [rax-0x7d], cl; rol byte ptr [rax+0x48], 0x83; ret 0x4840;
0x0009615f: add [rax-0x7d], cl; rol byte ptr [rax+0x48], 0x83; ret 0x4840;
0x00096162: rol byte ptr [rax+0x48], 0x83; ret 0x4840;
0x00096216: or rcx, rsi; bsf rcx, rcx; movzx eax, byte ptr [rax+rcx]; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; ret;
0x00096217: or ecx, esi; bsf rcx, rcx; movzx eax, byte ptr [rax+rcx]; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; ret;
0x00096218: int1; bsf rcx, rcx; movzx eax, byte ptr [rax+rcx]; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; ret;
0x00096219: bsf rcx, rcx; movzx eax, byte ptr [rax+rcx]; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; ret;
0x0009621a: bsf ecx, ecx; movzx eax, byte ptr [rax+rcx]; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; ret;
0x0009621c: leave; movzx eax, byte ptr [rax+rcx]; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; ret;
0x00096269: ret 0x4266;
0x000962da: test [rsi+0x48fffffe], dl; bsf ecx, edi; movzx eax, byte ptr [rax+rcx]; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; ret;
0x000962df: bsf rcx, rdi; movzx eax, byte ptr [rax+rcx]; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; ret;
0x000962e0: bsf ecx, edi; movzx eax, byte ptr [rax+rcx]; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; ret;
0x000962e3: movzx eax, byte ptr [rax+rcx]; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; ret;
0x000962e5: add al, 8; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; ret;
0x000962e7: movzx edx, byte ptr [rdx+rcx]; sub eax, edx; ret;
0x000962e9: adc al, 0xa; sub eax, edx; ret;
0x0009630b: shl byte ptr [rbp-0x1e], 0x31; shr byte ptr [rcx], 0xc8; ret;
0x0009630e: xor eax, eax; sub eax, ecx; ret;
0x0009630f: shr byte ptr [rcx], 0xc8; ret;
0x0009637a: ret 0x17;
0x000963b2: test dword ptr [rbp+rcx*4+0x48], 0xc929490f; lea r10, [rip+0xee9ff]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x000963b3: lea r9, [rax+0xf]; sub r9, rcx; lea r10, [rip+0xee9ff]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x000963b4: lea ecx, [rax+0xf]; sub r9, rcx; lea r10, [rip+0xee9ff]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x000963b5: cmovns rbp, [rcx]; leave; lea r10, [rip+0xee9ff]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x000963b6: cmovns ebp, [rcx]; leave; lea r10, [rip+0xee9ff]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x000963b7: sub r9, rcx; lea r10, [rip+0xee9ff]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x000963b8: sub ecx, ecx; lea r10, [rip+0xee9ff]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x000963b9: leave; lea r10, [rip+0xee9ff]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x000963ba: lea r10, [rip+0xee9ff]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x000963bb: lea edx, [rip+0xee9ff]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x000963bc: adc eax, 0xee9ff; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x00097ef7: shl byte ptr [rsi+rdx+0xf], 0xbc; ror byte ptr [rax+1], 0xf8; add rax, rcx; ret;
0x00097efa: bsf eax, eax; add rax, rdi; add rax, rcx; ret;
0x00097efb: mov esp, 0xf80148c0; add rax, rcx; ret;
0x00097efc: ror byte ptr [rax+1], 0xf8; add rax, rcx; ret;
0x00098021: xlat [rbx]; rol byte ptr [rbp+0x664975c0], 0xf; xlat [rbx]; ret 0xc085;
0x00098022: rol byte ptr [rbp+0x664975c0], 0xf; xlat [rbx]; ret 0xc085;
0x00098042: shl byte ptr [rbp+0x4b], 0x66; pmovmskb eax, mm1; bsf eax, eax; lea rax, [rdi+rax+0x30]; ret;
0x00098050: xor bl, al; nop [rax+rax]; nop [rax]; bsf eax, eax; lea rax, [rax+rdi-0x10]; ret;
0x00098053: nop [rax+rax]; nop [rax]; bsf eax, eax; lea rax, [rax+rdi-0x10]; ret;
0x00098054: nop [rax+rax]; nop [rax]; bsf eax, eax; lea rax, [rax+rdi-0x10]; ret;
0x00098055: nop [rax+rax]; nop [rax]; bsf eax, eax; lea rax, [rax+rdi-0x10]; ret;
0x00098059: add [rax], al; add [rax], al; nop [rax]; bsf eax, eax; lea rax, [rax+rdi-0x10]; ret;
0x0009805b: add [rax], al; nop [rax]; bsf eax, eax; lea rax, [rax+rdi-0x10]; ret;
0x0009805d: nop [rax]; bsf eax, eax; lea rax, [rax+rdi-0x10]; ret;
0x000980e0: adc [rax-0x7d], cl; ret 0x4810;
0x00098208: shl byte ptr [rsi+0xf], 1; xlat [rbx]; ret 0xc085;
0x00098218: test ebx, esi; add [rax], al; add [rsi+0xf], ah; xlat [rbx]; ret;
0x0009821a: add [rax], al; add [rsi+0xf], ah; xlat [rbx]; ret;
0x0009821c: add [rsi+0xf], ah; xlat [rbx]; ret;
0x00098235: pcmpgtd mm1, [rdi]; xlat [rbx]; ret 0xc085;
0x0009823d: test [rsi+0x66000000], ebp; pmovmskb eax, mm1; bsr eax, eax; add rax, rdi; ret;
0x0009823f: add [rax], al; add [rsi+0xf], ah; xlat [rbx]; ror dword ptr [rdi], 0xbd; ror byte ptr [rax+1], 0xf8; ret;
0x00098240: add [rax], al; pmovmskb eax, xmm1; bsr eax, eax; add rax, rdi; ret;
0x00098241: add [rsi+0xf], ah; xlat [rbx]; ror dword ptr [rdi], 0xbd; ror byte ptr [rax+1], 0xf8; ret;
0x00098242: pmovmskb eax, xmm1; bsr eax, eax; add rax, rdi; ret;
0x00098243: pmovmskb eax, mm1; bsr eax, eax; add rax, rdi; ret;
0x00098244: xlat [rbx]; ror dword ptr [rdi], 0xbd; ror byte ptr [rax+1], 0xf8; ret;
0x00098245: ror dword ptr [rdi], 0xbd; ror byte ptr [rax+1], 0xf8; ret;
0x00098251: ret 0x8340;
0x000982a3: pcmpgtd mm1, [rdi]; xlat [rbx]; rol dword ptr [rbp+0x317475c0], 0xc0; ret;
0x000982a6: xlat [rbx]; rol dword ptr [rbp+0x317475c0], 0xc0; ret;
0x000982a7: rol dword ptr [rbp+0x317475c0], 0xc0; ret;
0x000982be: ror byte ptr [rdi], 0x85; stosd [rdi]; add [rax], al; add [rbx-0x79f0ef06], al; ret 0;
0x000982c1: stosd [rdi]; add [rax], al; add [rbx-0x79f0ef06], al; ret 0;
0x000982c2: add [rax], al; add [rbx-0x79f0ef06], al; ret 0;
0x000982c4: add [rbx-0x79f0ef06], al; ret 0;
0x000982d1: and [r14+0xf], r12b; xlat [rbx]; rol dword ptr [rbp+0x317575c0], 0xc0; ret;
0x000982d2: and [rsi+0xf], ah; xlat [rbx]; rol dword ptr [rbp+0x317575c0], 0xc0; ret;
0x000982d5: xlat [rbx]; rol dword ptr [rbp+0x317575c0], 0xc0; ret;
0x000982d6: rol dword ptr [rbp+0x317575c0], 0xc0; ret;
0x000982d8: shl byte ptr [rbp+0x75], 0x31; rol bl, 0x66; nop; bsr eax, eax; add rax, rdi; ret;
0x000982dc: rol bl, 0x66; nop; bsr eax, eax; add rax, rdi; ret;
0x000982de: xchg ax, ax; bsr eax, eax; add rax, rdi; ret;
0x000982df: nop; bsr eax, eax; add rax, rdi; ret;
0x000982e7: nop [rax+rax]; bsr eax, eax; lea rax, [rax+rdi+0x10]; ret;
0x000982e8: nop [rax+rax]; bsr eax, eax; lea rax, [rax+rdi+0x10]; ret;
0x000982ea: test [rax], al; add [rax], al; add [rax], al; bsr eax, eax; lea rax, [rax+rdi+0x10]; ret;
0x000982eb: add [rax], al; add [rax], al; add [rdi], cl; mov ebp, 0x448d48c0; cmp [rax], dl; ret;
0x000982ec: add [rax], al; add [rax], al; bsr eax, eax; lea rax, [rax+rdi+0x10]; ret;
0x000982ed: add [rax], al; add [rdi], cl; mov ebp, 0x448d48c0; cmp [rax], dl; ret;
0x000982ee: add [rax], al; bsr eax, eax; lea rax, [rax+rdi+0x10]; ret;
0x000982f7: adc bl, al; nop [rax]; bsr eax, eax; lea rax, [rax+rdi+0x20]; ret;
0x000982f9: nop [rax]; bsr eax, eax; lea rax, [rax+rdi+0x20]; ret;
0x000982fb: add byte ptr [rax], 0; add [rax], al; bsr eax, eax; lea rax, [rax+rdi+0x20]; ret;
0x000982fc: add [rax], al; add [rax], al; bsr eax, eax; lea rax, [rax+rdi+0x20]; ret;
0x000982fd: add [rax], al; add [rdi], cl; mov ebp, 0x448d48c0; cmp [rax], ah; ret;
0x000982fe: add [rax], al; bsr eax, eax; lea rax, [rax+rdi+0x20]; ret;
0x000982ff: add [rdi], cl; mov ebp, 0x448d48c0; cmp [rax], ah; ret;
0x00098300: bsr eax, eax; lea rax, [rax+rdi+0x20]; ret;
0x00098301: mov ebp, 0x448d48c0; cmp [rax], ah; ret;
0x00098307: and bl, al; nop [rax]; bsr eax, eax; lea rax, [rax+rdi+0x30]; ret;
0x00098309: nop [rax]; bsr eax, eax; lea rax, [rax+rdi+0x30]; ret;
0x0009830b: add byte ptr [rax], 0; add [rax], al; bsr eax, eax; lea rax, [rax+rdi+0x30]; ret;
0x0009830c: add [rax], al; add [rax], al; bsr eax, eax; lea rax, [rax+rdi+0x30]; ret;
0x0009830d: add [rax], al; add [rdi], cl; mov ebp, 0x448d48c0; cmp [rax], dh; ret;
0x0009830e: add [rax], al; bsr eax, eax; lea rax, [rax+rdi+0x30]; ret;
0x0009830f: add [rdi], cl; mov ebp, 0x448d48c0; cmp [rax], dh; ret;
0x00098310: bsr eax, eax; lea rax, [rax+rdi+0x30]; ret;
0x00098311: mov ebp, 0x448d48c0; cmp [rax], dh; ret;
0x00098312: ror byte ptr [rax-0x73], 0x44; cmp [rax], dh; ret;
0x00098313: lea rax, [rax+rdi+0x30]; ret;
0x00098314: lea eax, [rax+rdi+0x30]; ret;
0x00098315: cmp [rax], r14b; ret;
0x00098316: cmp [rax], dh; ret;
0x00098329: ret 0x647c;
0x0009832b: add rax, rdi; ret;
0x00098331: mov ebp, 0xea8348c0; xor [rax+1], cl; ret 0x547c;
0x00098332: ror byte ptr [rax-0x7d], 0xea; xor [rax+1], cl; ret 0x547c;
0x00098336: xor [rax+1], cl; ret 0x547c;
0x00098339: ret 0x547c;
0x0009833b: push rsp; lea rax, [rdi+rax+0x10]; ret;
0x0009834f: add [rdi], cl; mov ebp, 0xea8348c0; and [rax+1], cl; ret 0x347c;
0x00098351: mov ebp, 0xea8348c0; and [rax+1], cl; ret 0x347c;
0x00098352: ror byte ptr [rax-0x7d], 0xea; and [rax+1], cl; ret 0x347c;
0x00098356: and [rax+1], cl; ret 0x347c;
0x0009835b: xor al, 0x48; lea eax, [rdi+rax+0x20]; ret;
0x0009836f: add [rdi], cl; mov ebp, 0xea8348c0; adc [rax+1], cl; ret 0x147c;
0x00098371: mov ebp, 0xea8348c0; adc [rax+1], cl; ret 0x147c;
0x00098372: ror byte ptr [rax-0x7d], 0xea; adc [rax+1], cl; ret 0x147c;
0x00098376: adc [rax+1], cl; ret 0x147c;
0x0009837b: adc al, 0x48; lea eax, [rdi+rax+0x30]; ret;
0x00098380: xor bl, al; nop [rax+rax]; nop [rax]; xor eax, eax; ret;
0x000983b9: rol byte ptr [rbp+0xfd274c0], 1; mov ebp, 0xf80148c0; ret;
0x000983bb: shl byte ptr [rdx+rdx*8+0xf], 0xbd; ror byte ptr [rax+1], 0xf8; ret;
0x000983bd: ror byte ptr [rdi], cl; mov ebp, 0xf80148c0; ret;
0x000983d9: ret 0x6610;
0x00098428: shl dword ptr [rsi+0xf], 1; xlat [rbx]; ret 0xf188;
0x0009842b: xlat [rbx]; ret 0xf188;
0x0009842c: ret 0xf188;
0x0009844c: ror byte ptr [rdi], 0x84; cmp eax, 0xfffffff; mov ebp, 0xf80148c0; add rax, rsi; ret;
0x0009844e: test [rip+0xfffffff], bh; mov ebp, 0xf80148c0; add rax, rsi; ret;
0x0009844f: cmp eax, 0xfffffff; mov ebp, 0xf80148c0; add rax, rsi; ret;
0x00098452: dec dword ptr [rdi]; mov ebp, 0xf80148c0; add rax, rsi; ret;
0x00098453: bsr eax, eax; add rax, rdi; add rax, rsi; ret;
0x00098454: mov ebp, 0xf80148c0; add rax, rsi; ret;
0x00098455: ror byte ptr [rax+1], 0xf8; add rax, rsi; ret;
0x00098456: add rax, rdi; add rax, rsi; ret;
0x00098457: add eax, edi; add rax, rsi; ret;
0x00098458: clc; add rax, rsi; ret;
0x00098459: add rax, rsi; ret;
0x0009845a: add eax, esi; ret;
0x0009845d: nop [rax]; bsr eax, eax; lea rax, [rax+rdi+0x10]; ret;
0x0009845f: add [rdi], cl; mov ebp, 0x448d48c0; cmp [rax], dl; ret;
0x00098460: bsr eax, eax; lea rax, [rax+rdi+0x10]; ret;
0x00098461: mov ebp, 0x448d48c0; cmp [rax], dl; ret;
0x00098490: add [rax], al; add [rcx-9], cl; ret 1;
0x00098492: add [rcx-9], cl; ret 1;
0x000984b6: add [rax], al; add [rcx-9], cl; ret 2;
0x000984b8: add [rcx-9], cl; ret 2;
0x0009853d: nop [rax]; movzx eax, byte ptr [rdi]; movzx edx, byte ptr [rsi]; sub eax, edx; ret;
0x0009853f: add [rdi], cl; mov dh, 7; movzx edx, byte ptr [rsi]; sub eax, edx; ret;
0x00098540: movzx eax, byte ptr [rdi]; movzx edx, byte ptr [rsi]; sub eax, edx; ret;
0x00098541: mov dh, 7; movzx edx, byte ptr [rsi]; sub eax, edx; ret;
0x00098543: movzx edx, byte ptr [rsi]; sub eax, edx; ret;
0x00098544: mov dh, 0x16; sub eax, edx; ret;
0x0009854d: and cl, [rcx-0x77]; ret;
0x00098560: sar rax, cl; movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret;
0x00098561: sar eax, cl; movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret;
0x00098562: clc; movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret;
0x00098563: movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret;
0x00098564: mov dh, 0xc0; sar rdx, cl; movzx edx, dl; sub eax, edx; ret;
0x00098565: ror byte ptr [rax-0x2d], 0xfa; movzx edx, dl; sub eax, edx; ret;
0x00098566: sar rdx, cl; movzx edx, dl; sub eax, edx; ret;
0x00098567: sar edx, cl; movzx edx, dl; sub eax, edx; ret;
0x00098568: cli; movzx edx, dl; sub eax, edx; ret;
0x00098569: movzx edx, dl; sub eax, edx; ret;
0x0009856a: mov dh, 0xd2; sub eax, edx; ret;
0x0009856b: shr byte ptr [rcx], cl; rol bl, 1; nop; xor eax, eax; ret;
0x0009856d: rol bl, 1; nop; xor eax, eax; ret;
0x00098972: test dword ptr [rbp+rcx*4+0x48], 0xc929490f; lea r10, [rip+0xec4bf]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x00098973: lea r9, [rax+0xf]; sub r9, rcx; lea r10, [rip+0xec4bf]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x00098974: lea ecx, [rax+0xf]; sub r9, rcx; lea r10, [rip+0xec4bf]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x00098975: cmovns rbp, [rcx]; leave; lea r10, [rip+0xec4bf]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x00098976: cmovns ebp, [rcx]; leave; lea r10, [rip+0xec4bf]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x00098977: sub r9, rcx; lea r10, [rip+0xec4bf]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x00098978: sub ecx, ecx; lea r10, [rip+0xec4bf]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x00098979: leave; lea r10, [rip+0xec4bf]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0009897a: lea r10, [rip+0xec4bf]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0009897b: lea edx, [rip+0xec4bf]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0009897c: adc eax, 0xec4bf; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0009897d: mov edi, 0x4f000ec4; movsxd ecx, [rdx+rcx*4]; lea r10, [r10+r9]; jmp r10;
0x0009aa7e: adc eax, 0xd6a3d; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret;
0x0009aa7f: cmp eax, 0x8b000d6a; or al, 0x8a; mov eax, [rdx+rax*4]; sub eax, ecx; ret;
0x0009aa98: adc eax, 0xd6a23; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret;
0x0009abd2: test dword ptr [rbp+rcx*4+0x48], 0xc929490f; lea r10, [rip+0xea2df]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0009abd3: lea r9, [rax+0xf]; sub r9, rcx; lea r10, [rip+0xea2df]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0009abd4: lea ecx, [rax+0xf]; sub r9, rcx; lea r10, [rip+0xea2df]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0009abd5: cmovns rbp, [rcx]; leave; lea r10, [rip+0xea2df]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0009abd6: cmovns ebp, [rcx]; leave; lea r10, [rip+0xea2df]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0009abd7: sub r9, rcx; lea r10, [rip+0xea2df]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0009abd8: sub ecx, ecx; lea r10, [rip+0xea2df]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0009abd9: leave; lea r10, [rip+0xea2df]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0009abda: lea r10, [rip+0xea2df]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0009abdb: lea edx, [rip+0xea2df]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0009abdc: adc eax, 0xea2df; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0009abdd: fbld st, tbyte ptr [rdx+0x634f000e]; or al, 0x8a; lea r10, [r10+r9]; jmp r10;
0x0009abde: mov [0x8d4f8a0c634f000e], al; adc al, 0xa; jmp r10;
0x0009b992: call qword ptr [rsi];
0x0009d0c3: adc eax, 0xd43f8; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret;
0x0009d0c4: clc; or eax, 0x8a0c8b00; mov eax, [rdx+rax*4]; sub eax, ecx; ret;
0x0009d0e8: adc eax, 0xd43d3; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret;
0x0009d0eb: or eax, 0x8a0c8b00; mov eax, [rdx+rax*4]; sub eax, ecx; ret;
0x0009d13e: rol byte ptr [rbp+0xf1574c0], 0xbc; sar byte ptr [rdx], 0x48; lea eax, [rdi+rax]; cmp [rax], sil; cmovne rax, rdx; ret;
0x0009d140: shl byte ptr [rbp+rdx+0xf], 0xbc; sar byte ptr [rdx], 0x48; lea eax, [rdi+rax]; cmp [rax], sil; cmovne rax, rdx; ret;
0x0009d151: xor [rax+0xf], cl; ret 0x90c3;
0x0009d260: bsf rax, rax; mov edx, 0; lea rax, [rdi+rax]; cmp [rax], sil; cmovne rax, rdx; ret;
0x0009d261: bsf eax, eax; mov edx, 0; lea rax, [rdi+rax]; cmp [rax], sil; cmovne rax, rdx; ret;
0x0009d262: mov esp, 0xbac0; add [rax], al; lea rax, [rdi+rax]; cmp [rax], sil; cmovne rax, rdx; ret;
0x0009d263: sar byte ptr [rdx], 0x48; lea eax, [rdi+rax]; cmp [rax], sil; cmovne rax, rdx; ret;
0x0009d264: mov edx, 0; lea rax, [rdi+rax]; cmp [rax], sil; cmovne rax, rdx; ret;
0x0009d265: add [rax], al; add [rax], al; lea rax, [rdi+rax]; cmp [rax], sil; cmovne rax, rdx; ret;
0x0009d266: add [rax], al; add [rax-0x73], cl; add al, 7; cmp [rax], sil; cmovne rax, rdx; ret;
0x0009d267: add [rax], al; lea rax, [rdi+rax]; cmp [rax], sil; cmovne rax, rdx; ret;
0x0009d268: add [rax-0x73], cl; add al, 7; cmp [rax], sil; cmovne rax, rdx; ret;
0x0009d269: lea rax, [rdi+rax]; cmp [rax], sil; cmovne rax, rdx; ret;
0x0009d26a: lea eax, [rdi+rax]; cmp [rax], sil; cmovne rax, rdx; ret;
0x0009d26b: add al, 7; cmp [rax], sil; cmovne rax, rdx; ret;
0x0009d26d: cmp [rax], sil; cmovne rax, rdx; ret;
0x0009d26e: cmp [rax], dh; cmovne rax, rdx; ret;
0x0009d26f: xor [rax+0xf], cl; ret 0x66c3;
0x0009d362: or eax, 0x48c0bc0f; lea eax, [rdi+rax]; ret;
0x0009d3b9: enter 0xf66, 0xeb; ret;
0x0009d460: xlat [rbx]; ret 0xc148;
0x0009d475: ror byte ptr [rax+9], 0xc8; shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi+rax]; ret;
0x0009d476: or rax, rcx; shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi+rax]; ret;
0x0009d477: or eax, ecx; shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi+rax]; ret;
0x0009d479: shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi+rax]; ret;
0x0009d47a: shl edx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi+rax]; ret;
0x0009d47d: or rax, rdx; bsf rax, rax; lea rax, [rdi+rax]; ret;
0x0009d47e: or eax, edx; bsf rax, rax; lea rax, [rdi+rax]; ret;
0x0009d480: bsf rax, rax; lea rax, [rdi+rax]; ret;
0x0009d481: bsf eax, eax; lea rax, [rdi+rax]; ret;
0x0009d484: lea rax, [rdi+rax]; ret;
0x0009d485: lea eax, [rdi+rax]; ret;
0x0009d486: add al, 7; ret;
0x0009d4cc: fsub st, qword ptr [rsi+0xf]; xlat [rbx]; ret;
0x0009d505: shl byte ptr [rsi+0xf], 0xeb; ret 0xf66;
0x0009d57c: ror byte ptr [rax+0x21], 1; enter 0x840f, 0xba; add [rax], eax; add [rax+0xf], cl; mov ebp, 0xf80148c0; ret;
0x0009d57f: enter 0x840f, 0xba; add [rax], eax; add [rax+0xf], cl; mov ebp, 0xf80148c0; ret;
0x0009d581: test [rdx+0x48000001], bh; bsr eax, eax; add rax, rdi; ret;
0x0009d582: mov edx, 0x48000001; bsr eax, eax; add rax, rdi; ret;
0x0009d583: add [rax], eax; add [rax+0xf], cl; mov ebp, 0xf80148c0; ret;
0x0009d584: add [rax], al; bsr rax, rax; add rax, rdi; ret;
0x0009d585: add [rax+0xf], cl; mov ebp, 0xf80148c0; ret;
0x0009d586: bsr rax, rax; add rax, rdi; ret;
0x0009d587: bsr eax, eax; add rax, rdi; ret;
0x0009d588: mov ebp, 0xf80148c0; ret;
0x0009d60f: test [rcx+rax], ch; add [rax], al; bsr rsi, rsi; lea rax, [rdi+rsi]; ret;
0x0009d610: sub al, 1; add [rax], al; bsr rsi, rsi; lea rax, [rdi+rsi]; ret;
0x0009d612: add [rax], al; bsr rsi, rsi; lea rax, [rdi+rsi]; ret;
0x0009d614: bsr rsi, rsi; lea rax, [rdi+rsi]; ret;
0x0009d615: bsr esi, esi; lea rax, [rdi+rsi]; ret;
0x0009d618: lea rax, [rdi+rsi]; ret;
0x0009d619: lea eax, [rdi+rsi]; ret;
0x0009d61a: add al, 0x37; ret;
0x0009d657: mul byte ptr [rsi+0xf]; outsd dx, [rsi]; push rdi; xor [rsi+0xf], ah; outsd dx, [rsi]; ret;
0x0009d65a: outsd dx, [rsi]; push rdi; xor [rsi+0xf], ah; outsd dx, [rsi]; ret;
0x0009d65b: push rdi; xor [rsi+0xf], ah; outsd dx, [rsi]; ret;
0x0009d65c: xor [rsi+0xf], ah; outsd dx, [rsi]; ret;
0x0009d692: shl dword ptr [rsi+0xf], 0xd7; shl byte ptr [rsi+0xf], 1; outsd dx, [rsi]; ret;
0x0009d695: xlat [rbx]; shl byte ptr [rsi+0xf], 1; outsd dx, [rsi]; ret;
0x0009d696: shl byte ptr [rsi+0xf], 1; outsd dx, [rsi]; ret;
0x0009d6a6: xlat [rbx]; shl byte ptr [rsi+0xf], 1; outsd dx, [rsi]; ret 0xf66;
0x0009d6a7: shl byte ptr [rsi+0xf], 1; outsd dx, [rsi]; ret 0xf66;
0x0009d6aa: outsd dx, [rsi]; ret 0xf66;
0x0009d6f7: xlat [rbx]; ret 0x94c;
0x0009d70c: ror byte ptr [rcx-0x3e], 0x48; cmovne ecx, edi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx+rsi]; ret;
0x0009d70d: and rdx, r8; cmovne rcx, rdi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx+rsi]; ret;
0x0009d70e: and edx, eax; cmovne rcx, rdi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx+rsi]; ret;
0x0009d710: cmovne rcx, rdi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx+rsi]; ret;
0x0009d711: cmovne ecx, edi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx+rsi]; ret;
0x0009d714: cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx+rsi]; ret;
0x0009d715: cmovne esi, edx; bsr rsi, rsi; lea rax, [rcx+rsi]; ret;
0x0009d718: bsr rsi, rsi; lea rax, [rcx+rsi]; ret;
0x0009d719: bsr esi, esi; lea rax, [rcx+rsi]; ret;
0x0009d71c: lea rax, [rcx+rsi]; ret;
0x0009d71d: lea eax, [rcx+rsi]; ret;
0x0009d71e: add al, 0x31; ret;
0x0009d809: dec dword ptr [rax+0xf]; mov ebp, 0xf80148c6; ret;
0x0009d80a: bsr rax, rsi; add rax, rdi; ret;
0x0009d80b: bsr eax, esi; add rax, rdi; ret;
0x0009d80c: mov ebp, 0xf80148c6; ret;
0x0009d89b: ror byte ptr [rdi], cl; test [rsi], bh; add [rax], al; bsf rax, rdx; ret;
0x0009d89d: test [rsi], bh; add [rax], al; bsf rax, rdx; ret;
0x0009d9bf: add [rax-0x7b], cl; div byte ptr [rbp+4]; xor rax, rax; ret;
0x0009da5b: ror byte ptr [rdi], cl; test [rsi+0x48000000], bl; bsf eax, edx; ret;
0x0009da5d: test [rsi+0x48000000], bl; bsf eax, edx; ret;
0x0009da60: add [rax], al; bsf rax, rdx; ret;
0x0009dacb: shl byte ptr [rdx+0x48], cl; bsf eax, edx; ret;
0x0009dadc: shl byte ptr [rcx+rdx+0x48], cl; bsf eax, edx; ret;
0x0009dadf: bsf rax, rdx; ret;
0x0009dae0: bsf eax, edx; ret;
0x0009db6f: or rdx, rcx; bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret;
0x0009db70: or edx, ecx; bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret;
0x0009db72: bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret;
0x0009db73: bts edx, ebx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret;
0x0009db74: stosd [rdi]; fimul st, dword ptr [rax+0xf]; mov esp, 0xd00148d2; sub rax, rdi; ret;
0x0009db75: fimul st, dword ptr [rax+0xf]; mov esp, 0xd00148d2; sub rax, rdi; ret;
0x0009dbc6: shl rcx, 0x20; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret;
0x0009dbc7: shl ecx, 0x20; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret;
0x0009dbca: or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret;
0x0009dbcb: or edx, ecx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret;
0x0009dbcd: bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret;
0x0009dbce: bsf edx, edx; add rax, rdx; sub rax, rdi; ret;
0x0009dbcf: mov esp, 0xd00148d2; sub rax, rdi; ret;
0x0009dbd0: ror byte ptr [rax+1], cl; ror byte ptr [rax+0x29], 1; clc; ret;
0x0009dbd1: add rax, rdx; sub rax, rdi; ret;
0x0009dbd2: add eax, edx; sub rax, rdi; ret;
0x0009dbd3: ror byte ptr [rax+0x29], 1; clc; ret;
0x0009e1af: xlat [rbx]; ror byte ptr [rax-0x73], 0x76; adc [rax-0x7b], cl; ror byte ptr [rdi], 0x85; ret 0x13;
0x0009e1b0: ror byte ptr [rax-0x73], 0x76; adc [rax-0x7b], cl; ror byte ptr [rdi], 0x85; ret 0x13;
0x0009e1b4: adc [rax-0x7b], cl; ror byte ptr [rdi], 0x85; ret 0x13;
0x0009e1b7: ror byte ptr [rdi], 0x85; ret 0x13;
0x0009e1ba: ret 0x13;
0x0009fa5e: ror byte ptr [rax+0x29], 1; enter 0xd284, 0x74; cmp dh, dh; ret 0x7501;
0x0009fa61: enter 0xd284, 0x74; cmp dh, dh; ret 0x7501;
0x0009fa63: shl byte ptr [rdx+rdi-0xa], cl; ret 0x7501;
0x0009fa65: cmp dh, dh; ret 0x7501;
0x0009fa80: add [rax], al; add dh, dh; ret 0xf20;
0x0009fe80: cmpsd [rsi], [rdi]; and al, 0; add [rax-0x7b], cl; ror byte ptr [rdi], 0x85; ret;
0x0009fe81: and al, 0; add [rax-0x7b], cl; ror byte ptr [rdi], 0x85; ret;
0x0009fe83: add [rax-0x7b], cl; ror byte ptr [rdi], 0x85; ret;
0x0009feab: sar bh, 0xff; call qword ptr [rax+0xf11280f];
0x0009feae: call qword ptr [rax+0xf11280f];
0x000a186d: dec qword ptr [rax-0x7b]; ror byte ptr [rdi], 0x85; pop rax; or [rax], eax; add cl, ch; ret;
0x000a186e: dec dword ptr [rax-0x7b]; ror byte ptr [rdi], 0x85; pop rax; or [rax], eax; add cl, ch; ret;
0x000a1871: ror byte ptr [rdi], 0x85; pop rax; or [rax], eax; add cl, ch; ret;
0x000a1874: pop rax; or [rax], eax; add cl, ch; ret;
0x000a1875: or [rax], eax; add cl, ch; ret;
0x000a1a78: imul cl; ret 8;
0x000a1f8e: add eax, [rcx]; add [rax], al; movlpd xmm0, [rcx]; movlpd [rdx], xmm0; mov rax, rdi; ret;
0x000a1f8f: add [rax], eax; add [rsi+0xf], ah; adc al, [rcx]; movlpd [rdx], xmm0; mov rax, rdi; ret;
0x000a1f90: add [rax], al; movlpd xmm0, [rcx]; movlpd [rdx], xmm0; mov rax, rdi; ret;
0x000a1f91: add [rsi+0xf], ah; adc al, [rcx]; movlpd [rdx], xmm0; mov rax, rdi; ret;
0x000a2000: xor ah, ah; mov [rdx+1], ah; mov al, [rcx]; mov [rdx], al; mov rax, rdi; ret;
0x000a2002: mov [rdx+1], ah; mov al, [rcx]; mov [rdx], al; mov rax, rdi; ret;
0x000a2004: add [rdx+0x48028801], ecx; mov eax, edi; ret;
0x000a2010: xor ah, ah; mov [rdx+2], ah; mov ax, [rcx]; mov [rdx], ax; mov rax, rdi; ret;
0x000a2012: mov [rdx+2], ah; mov ax, [rcx]; mov [rdx], ax; mov rax, rdi; ret;
0x000a2014: add ah, [rsi-0x75]; add [rsi-0x77], esp; add cl, [rax-0x77]; clc; ret;
0x000a2024: add esp, [rsi-0x75]; add [rsi-0x77], esp; add cl, [rdx+0x42880241]; add cl, [rax-0x77]; clc; ret;
0x000a2040: xor ah, ah; mov [rdx+4], ah; mov eax, [rcx]; mov [rdx], eax; mov rax, rdi; ret;
0x000a2042: mov [rdx+4], ah; mov eax, [rcx]; mov [rdx], eax; mov rax, rdi; ret;
0x000a2044: add al, 0x8b; add [rcx-0x776b7fe], ecx; ret;
0x000a2054: add eax, 0x289018b; mov al, [rcx+4]; mov [rdx+4], al; mov rax, rdi; ret;
0x000a20b0: xor ah, ah; mov [rdx+8], ah; movlpd xmm0, [rcx]; movlpd [rdx], xmm0; mov rax, rdi; ret;
0x000a20b2: mov [rdx+8], ah; movlpd xmm0, [rcx]; movlpd [rdx], xmm0; mov rax, rdi; ret;
0x000a20b4: or [rsi+0xf], ah; adc al, [rcx]; movlpd [rdx], xmm0; mov rax, rdi; ret;
0x000a20b5: movlpd xmm0, [rcx]; movlpd [rdx], xmm0; mov rax, rdi; ret;
0x000a20b6: movlps xmm0, [rcx]; movlpd [rdx], xmm0; mov rax, rdi; ret;
0x000a20b7: adc al, [rcx]; movlpd [rdx], xmm0; mov rax, rdi; ret;
0x000a20b8: add [rsi+0xf], esp; adc eax, [rdx]; mov rax, rdi; ret;
0x000a20b9: movlpd [rdx], xmm0; mov rax, rdi; ret;
0x000a20ba: movlps [rdx], xmm0; mov rax, rdi; ret;
0x000a20bb: adc eax, [rdx]; mov rax, rdi; ret;
0x000a20d5: movlpd xmm0, [rcx]; movlpd [rdx], xmm0; mov al, [rcx+8]; mov [rdx+8], al; mov rax, rdi; ret;
0x000a20d6: movlps xmm0, [rcx]; movlpd [rdx], xmm0; mov al, [rcx+8]; mov [rdx+8], al; mov rax, rdi; ret;
0x000a20d7: adc al, [rcx]; movlpd [rdx], xmm0; mov al, [rcx+8]; mov [rdx+8], al; mov rax, rdi; ret;
0x000a20d8: add [rsi+0xf], esp; adc eax, [rdx]; mov al, [rcx+8]; mov [rdx+8], al; mov rax, rdi; ret;
0x000a20d9: movlpd [rdx], xmm0; mov al, [rcx+8]; mov [rdx+8], al; mov rax, rdi; ret;
0x000a20da: movlps [rdx], xmm0; mov al, [rcx+8]; mov [rdx+8], al; mov rax, rdi; ret;
0x000a20db: adc eax, [rdx]; mov al, [rcx+8]; mov [rdx+8], al; mov rax, rdi; ret;
0x000a20dc: add cl, [rdx+0x42880841]; or [rax-0x77], cl; clc; ret;
0x000a20dd: mov al, [rcx+8]; mov [rdx+8], al; mov rax, rdi; ret;
0x000a20de: or [r8-0x76b7f7be], cl; clc; ret;
0x000a20df: or [rax-0x76b7f7be], cl; clc; ret;
0x000a20e0: mov [rdx+8], al; mov rax, rdi; ret;
0x000a20f5: movlpd xmm0, [rcx]; movlpd [rdx], xmm0; mov ax, [rcx+8]; mov [rdx+8], ax; mov rax, rdi; ret;
0x000a20f6: movlps xmm0, [rcx]; movlpd [rdx], xmm0; mov ax, [rcx+8]; mov [rdx+8], ax; mov rax, rdi; ret;
0x000a20f7: adc al, [rcx]; movlpd [rdx], xmm0; mov ax, [rcx+8]; mov [rdx+8], ax; mov rax, rdi; ret;
0x000a20f8: add [rsi+0xf], esp; adc eax, [rdx]; mov ax, [rcx+8]; mov [rdx+8], ax; mov rax, rdi; ret;
0x000a20f9: movlpd [rdx], xmm0; mov ax, [rcx+8]; mov [rdx+8], ax; mov rax, rdi; ret;
0x000a20fa: movlps [rdx], xmm0; mov ax, [rcx+8]; mov [rdx+8], ax; mov rax, rdi; ret;
0x000a20fb: adc eax, [rdx]; mov ax, [rcx+8]; mov [rdx+8], ax; mov rax, rdi; ret;
0x000a20fc: add ah, [rsi-0x75]; or [r14-0x77], spl; or [rax-0x77], cl; clc; ret;
0x000a20fd: mov ax, [rcx+8]; mov [rdx+8], ax; mov rax, rdi; ret;
0x000a20fe: mov eax, [rcx+8]; mov [rdx+8], ax; mov rax, rdi; ret;
0x000a20ff: or [r14-0x77], spl; or [rax-0x77], cl; clc; ret;
0x000a2100: or [rsi-0x77], ah; or [rax-0x77], cl; clc; ret;
0x000a2101: mov [rdx+8], ax; mov rax, rdi; ret;
0x000a2115: movlpd xmm0, [rcx]; movlpd [rdx], xmm0; mov eax, [rcx+7]; mov [rdx+7], eax; mov rax, rdi; ret;
0x000a2116: movlps xmm0, [rcx]; movlpd [rdx], xmm0; mov eax, [rcx+7]; mov [rdx+7], eax; mov rax, rdi; ret;
0x000a2117: adc al, [rcx]; movlpd [rdx], xmm0; mov eax, [rcx+7]; mov [rdx+7], eax; mov rax, rdi; ret;
0x000a2118: add [rsi+0xf], esp; adc eax, [rdx]; mov eax, [rcx+7]; mov [rdx+7], eax; mov rax, rdi; ret;
0x000a2119: movlpd [rdx], xmm0; mov eax, [rcx+7]; mov [rdx+7], eax; mov rax, rdi; ret;
0x000a211a: movlps [rdx], xmm0; mov eax, [rcx+7]; mov [rdx+7], eax; mov rax, rdi; ret;
0x000a211b: adc eax, [rdx]; mov eax, [rcx+7]; mov [rdx+7], eax; mov rax, rdi; ret;
0x000a2135: movlpd xmm0, [rcx]; movlpd [rdx], xmm0; mov eax, [rcx+8]; mov [rdx+8], eax; mov rax, rdi; ret;
0x000a2136: movlps xmm0, [rcx]; movlpd [rdx], xmm0; mov eax, [rcx+8]; mov [rdx+8], eax; mov rax, rdi; ret;
0x000a2137: adc al, [rcx]; movlpd [rdx], xmm0; mov eax, [rcx+8]; mov [rdx+8], eax; mov rax, rdi; ret;
0x000a2138: add [rsi+0xf], esp; adc eax, [rdx]; mov eax, [rcx+8]; mov [rdx+8], eax; mov rax, rdi; ret;
0x000a2139: movlpd [rdx], xmm0; mov eax, [rcx+8]; mov [rdx+8], eax; mov rax, rdi; ret;
0x000a213a: movlps [rdx], xmm0; mov eax, [rcx+8]; mov [rdx+8], eax; mov rax, rdi; ret;
0x000a213b: adc eax, [rdx]; mov eax, [rcx+8]; mov [rdx+8], eax; mov rax, rdi; ret;
0x000a2154: or eax, 0x1120f66; movlpd [rdx], xmm0; movlpd xmm1, [rcx+5]; movlpd [rdx+5], xmm1; mov rax, rdi; ret;
0x000a2155: movlpd xmm0, [rcx]; movlpd [rdx], xmm0; movlpd xmm1, [rcx+5]; movlpd [rdx+5], xmm1; mov rax, rdi; ret;
0x000a2156: movlps xmm0, [rcx]; movlpd [rdx], xmm0; movlpd xmm1, [rcx+5]; movlpd [rdx+5], xmm1; mov rax, rdi; ret;
0x000a2157: adc al, [rcx]; movlpd [rdx], xmm0; movlpd xmm1, [rcx+5]; movlpd [rdx+5], xmm1; mov rax, rdi; ret;
0x000a2158: add [rsi+0xf], esp; adc eax, [rdx]; movlpd xmm1, [rcx+5]; movlpd [rdx+5], xmm1; mov rax, rdi; ret;
0x000a2159: movlpd [rdx], xmm0; movlpd xmm1, [rcx+5]; movlpd [rdx+5], xmm1; mov rax, rdi; ret;
0x000a215a: movlps [rdx], xmm0; movlpd xmm1, [rcx+5]; movlpd [rdx+5], xmm1; mov rax, rdi; ret;
0x000a215b: adc eax, [rdx]; movlpd xmm1, [rcx+5]; movlpd [rdx+5], xmm1; mov rax, rdi; ret;
0x000a215c: add ah, [rsi+0xf]; adc cl, [rcx+5]; movlpd [rdx+5], xmm1; mov rax, rdi; ret;
0x000a215d: movlpd xmm1, [rcx+5]; movlpd [rdx+5], xmm1; mov rax, rdi; ret;
0x000a215e: movlps xmm1, [rcx+5]; movlpd [rdx+5], xmm1; mov rax, rdi; ret;
0x000a215f: adc cl, [rcx+5]; movlpd [rdx+5], xmm1; mov rax, rdi; ret;
0x000a2162: movlpd [rdx+5], xmm1; mov rax, rdi; ret;
0x000a2163: movlps [rdx+5], xmm1; mov rax, rdi; ret;
0x000a2164: adc ecx, [rdx+5]; mov rax, rdi; ret;
0x000a2175: movlpd xmm0, [rcx]; movlpd [rdx], xmm0; movlpd xmm1, [rcx+6]; movlpd [rdx+6], xmm1; mov rax, rdi; ret;
0x000a2176: movlps xmm0, [rcx]; movlpd [rdx], xmm0; movlpd xmm1, [rcx+6]; movlpd [rdx+6], xmm1; mov rax, rdi; ret;
0x000a2177: adc al, [rcx]; movlpd [rdx], xmm0; movlpd xmm1, [rcx+6]; movlpd [rdx+6], xmm1; mov rax, rdi; ret;
0x000a2178: add [rsi+0xf], esp; adc eax, [rdx]; movlpd xmm1, [rcx+6]; movlpd [rdx+6], xmm1; mov rax, rdi; ret;
0x000a2179: movlpd [rdx], xmm0; movlpd xmm1, [rcx+6]; movlpd [rdx+6], xmm1; mov rax, rdi; ret;
0x000a217a: movlps [rdx], xmm0; movlpd xmm1, [rcx+6]; movlpd [rdx+6], xmm1; mov rax, rdi; ret;
0x000a217b: adc eax, [rdx]; movlpd xmm1, [rcx+6]; movlpd [rdx+6], xmm1; mov rax, rdi; ret;
0x000a217c: add ah, [rsi+0xf]; adc cl, [rcx+6]; movlpd [rdx+6], xmm1; mov rax, rdi; ret;
0x000a217d: movlpd xmm1, [rcx+6]; movlpd [rdx+6], xmm1; mov rax, rdi; ret;
0x000a217e: movlps xmm1, [rcx+6]; movlpd [rdx+6], xmm1; mov rax, rdi; ret;
0x000a217f: adc cl, [rcx+6]; movlpd [rdx+6], xmm1; mov rax, rdi; ret;
0x000a2182: movlpd [rdx+6], xmm1; mov rax, rdi; ret;
0x000a2183: movlps [rdx+6], xmm1; mov rax, rdi; ret;
0x000a2184: adc ecx, [rdx+6]; mov rax, rdi; ret;
0x000a2195: movlpd xmm0, [rcx]; movlpd [rdx], xmm0; movlpd xmm1, [rcx+7]; movlpd [rdx+7], xmm1; mov rax, rdi; ret;
0x000a2196: movlps xmm0, [rcx]; movlpd [rdx], xmm0; movlpd xmm1, [rcx+7]; movlpd [rdx+7], xmm1; mov rax, rdi; ret;
0x000a2197: adc al, [rcx]; movlpd [rdx], xmm0; movlpd xmm1, [rcx+7]; movlpd [rdx+7], xmm1; mov rax, rdi; ret;
0x000a2198: add [rsi+0xf], esp; adc eax, [rdx]; movlpd xmm1, [rcx+7]; movlpd [rdx+7], xmm1; mov rax, rdi; ret;
0x000a2199: movlpd [rdx], xmm0; movlpd xmm1, [rcx+7]; movlpd [rdx+7], xmm1; mov rax, rdi; ret;
0x000a219a: movlps [rdx], xmm0; movlpd xmm1, [rcx+7]; movlpd [rdx+7], xmm1; mov rax, rdi; ret;
0x000a219b: adc eax, [rdx]; movlpd xmm1, [rcx+7]; movlpd [rdx+7], xmm1; mov rax, rdi; ret;
0x000a219c: add ah, [rsi+0xf]; adc cl, [rcx+7]; movlpd [rdx+7], xmm1; mov rax, rdi; ret;
0x000a219d: movlpd xmm1, [rcx+7]; movlpd [rdx+7], xmm1; mov rax, rdi; ret;
0x000a219e: movlps xmm1, [rcx+7]; movlpd [rdx+7], xmm1; mov rax, rdi; ret;
0x000a219f: adc cl, [rcx+7]; movlpd [rdx+7], xmm1; mov rax, rdi; ret;
0x000a21a2: movlpd [rdx+7], xmm1; mov rax, rdi; ret;
0x000a21a3: movlps [rdx+7], xmm1; mov rax, rdi; ret;
0x000a21a4: adc ecx, [rdx+7]; mov rax, rdi; ret;
0x000a21b5: movlpd xmm0, [rcx]; movlpd xmm1, [rcx+8]; movlpd [rdx], xmm0; movlpd [rdx+8], xmm1; mov rax, rdi; ret;
0x000a21b6: movlps xmm0, [rcx]; movlpd xmm1, [rcx+8]; movlpd [rdx], xmm0; movlpd [rdx+8], xmm1; mov rax, rdi; ret;
0x000a21b7: adc al, [rcx]; movlpd xmm1, [rcx+8]; movlpd [rdx], xmm0; movlpd [rdx+8], xmm1; mov rax, rdi; ret;
0x000a21b8: add [rsi+0xf], esp; adc cl, [rcx+8]; movlpd [rdx], xmm0; movlpd [rdx+8], xmm1; mov rax, rdi; ret;
0x000a21b9: movlpd xmm1, [rcx+8]; movlpd [rdx], xmm0; movlpd [rdx+8], xmm1; mov rax, rdi; ret;
0x000a21ba: movlps xmm1, [rcx+8]; movlpd [rdx], xmm0; movlpd [rdx+8], xmm1; mov rax, rdi; ret;
0x000a21bb: adc cl, [rcx+8]; movlpd [rdx], xmm0; movlpd [rdx+8], xmm1; mov rax, rdi; ret;
0x000a21bc: or [r14+0xf], spl; adc eax, [rdx]; movlpd [rdx+8], xmm1; mov rax, rdi; ret;
0x000a21bd: or [rsi+0xf], ah; adc eax, [rdx]; movlpd [rdx+8], xmm1; mov rax, rdi; ret;
0x000a21be: movlpd [rdx], xmm0; movlpd [rdx+8], xmm1; mov rax, rdi; ret;
0x000a21bf: movlps [rdx], xmm0; movlpd [rdx+8], xmm1; mov rax, rdi; ret;
0x000a21c0: adc eax, [rdx]; movlpd [rdx+8], xmm1; mov rax, rdi; ret;
0x000a21c1: add ah, [rsi+0xf]; adc ecx, [rdx+8]; mov rax, rdi; ret;
0x000a2200: jmp far fword ptr [rax+0xc850f02];
0x000a2212: jmp far fword ptr [rax+0xa850f04];
0x000a2224: jmp far fword ptr [rax+0x18850f08];
0x000a2236: jmp far fword ptr [rax+0x16850f10];
0x000a2248: jmp far fword ptr [rax+0x24850f20];
0x000a225a: jmp far fword ptr [rax+0x32850f40];
0x000a2315: movlpd xmm0, [rcx]; movlpd [rdx], xmm0; movlpd xmm1, [rcx+8]; movlpd [rdx+8], xmm1; mov rax, rdi; ret;
0x000a2316: movlps xmm0, [rcx]; movlpd [rdx], xmm0; movlpd xmm1, [rcx+8]; movlpd [rdx+8], xmm1; mov rax, rdi; ret;
0x000a2317: adc al, [rcx]; movlpd [rdx], xmm0; movlpd xmm1, [rcx+8]; movlpd [rdx+8], xmm1; mov rax, rdi; ret;
0x000a2318: add [rsi+0xf], esp; adc eax, [rdx]; movlpd xmm1, [rcx+8]; movlpd [rdx+8], xmm1; mov rax, rdi; ret;
0x000a2319: movlpd [rdx], xmm0; movlpd xmm1, [rcx+8]; movlpd [rdx+8], xmm1; mov rax, rdi; ret;
0x000a231a: movlps [rdx], xmm0; movlpd xmm1, [rcx+8]; movlpd [rdx+8], xmm1; mov rax, rdi; ret;
0x000a231b: adc eax, [rdx]; movlpd xmm1, [rcx+8]; movlpd [rdx+8], xmm1; mov rax, rdi; ret;
0x000a231c: add ah, [rsi+0xf]; adc cl, [rcx+8]; movlpd [rdx+8], xmm1; mov rax, rdi; ret;
0x000a231d: movlpd xmm1, [rcx+8]; movlpd [rdx+8], xmm1; mov rax, rdi; ret;
0x000a231e: movlps xmm1, [rcx+8]; movlpd [rdx+8], xmm1; mov rax, rdi; ret;
0x000a231f: adc cl, [rcx+8]; movlpd [rdx+8], xmm1; mov rax, rdi; ret;
0x000a2320: or [r14+0xf], spl; adc ecx, [rdx+8]; mov rax, rdi; ret;
0x000a2321: or [rsi+0xf], ah; adc ecx, [rdx+8]; mov rax, rdi; ret;
0x000a2322: movlpd [rdx+8], xmm1; mov rax, rdi; ret;
0x000a2323: movlps [rdx+8], xmm1; mov rax, rdi; ret;
0x000a2324: adc ecx, [rdx+8]; mov rax, rdi; ret;
0x000a2396: movlpd xmm0, [rcx]; movlpd [rdx], xmm0; xor ah, ah; mov [rdx+8], ah; mov rax, rdi; ret;
0x000a2397: movlps xmm0, [rcx]; movlpd [rdx], xmm0; xor ah, ah; mov [rdx+8], ah; mov rax, rdi; ret;
0x000a2398: adc al, [rcx]; movlpd [rdx], xmm0; xor ah, ah; mov [rdx+8], ah; mov rax, rdi; ret;
0x000a2399: add [rsi+0xf], esp; adc eax, [rdx]; xor ah, ah; mov [rdx+8], ah; mov rax, rdi; ret;
0x000a239a: movlpd [rdx], xmm0; xor ah, ah; mov [rdx+8], ah; mov rax, rdi; ret;
0x000a239b: movlps [rdx], xmm0; xor ah, ah; mov [rdx+8], ah; mov rax, rdi; ret;
0x000a239c: adc eax, [rdx]; xor ah, ah; mov [rdx+8], ah; mov rax, rdi; ret;
0x000a239e: xor ah, ah; mov [rdx+8], ah; mov rax, rdi; ret;
0x000a23a0: mov [rdx+8], ah; mov rax, rdi; ret;
0x000a23fe: movlpd xmm1, [rcx+8]; movlpd [rdx+8], xmm1; xor ah, ah; mov [rdx+0x10], ah; mov rax, rdi; ret;
0x000a23ff: movlps xmm1, [rcx+8]; movlpd [rdx+8], xmm1; xor ah, ah; mov [rdx+0x10], ah; mov rax, rdi; ret;
0x000a2400: adc cl, [rcx+8]; movlpd [rdx+8], xmm1; xor ah, ah; mov [rdx+0x10], ah; mov rax, rdi; ret;
0x000a2401: or [r14+0xf], spl; adc ecx, [rdx+8]; xor ah, ah; mov [rdx+0x10], ah; mov rax, rdi; ret;
0x000a2402: or [rsi+0xf], ah; adc ecx, [rdx+8]; xor ah, ah; mov [rdx+0x10], ah; mov rax, rdi; ret;
0x000a2403: movlpd [rdx+8], xmm1; xor ah, ah; mov [rdx+0x10], ah; mov rax, rdi; ret;
0x000a2404: movlps [rdx+8], xmm1; xor ah, ah; mov [rdx+0x10], ah; mov rax, rdi; ret;
0x000a2405: adc ecx, [rdx+8]; xor ah, ah; mov [rdx+0x10], ah; mov rax, rdi; ret;
0x000a2408: xor ah, ah; mov [rdx+0x10], ah; mov rax, rdi; ret;
0x000a240a: mov [rdx+0x10], ah; mov rax, rdi; ret;
0x000a240c: adc [rax-0x77], cl; clc; ret;
0x000a2412: nop [rax+rax]; nop [rax]; mov rax, rdi; ret;
0x000a2413: nop [rax+rax]; nop [rax]; mov rax, rdi; ret;
0x000a2414: nop [rax+rax]; nop [rax]; mov rax, rdi; ret;
0x000a2416: test [rax], al; add [rax], al; add [rax], al; nop [rax]; mov rax, rdi; ret;
0x000a2418: add [rax], al; add [rax], al; nop [rax]; mov rax, rdi; ret;
0x000a241a: add [rax], al; nop [rax]; mov rax, rdi; ret;
0x000a2567: cmp byte ptr [rax], 1; sbb rax, 0xffffffffffffffff; xor cl, cl; mov [rax], cl; mov rax, rdi; ret;
0x000a2568: cmp [rcx], al; sbb rax, 0xffffffffffffffff; xor cl, cl; mov [rax], cl; mov rax, rdi; ret;
0x000a2569: add [rax-0x7d], ecx; fdivr st, st(7); xor cl, cl; mov [rax], cl; mov rax, rdi; ret;
0x000a256a: sbb rax, 0xffffffffffffffff; xor cl, cl; mov [rax], cl; mov rax, rdi; ret;
0x000a256b: sbb eax, 0xffffffff; xor cl, cl; mov [rax], cl; mov rax, rdi; ret;
0x000a256c: fdivr st, st(7); xor cl, cl; mov [rax], cl; mov rax, rdi; ret;
0x000a256d: push qword ptr [rax]; leave; mov [rax], cl; mov rax, rdi; ret;
0x000a256e: xor cl, cl; mov [rax], cl; mov rax, rdi; ret;
0x000a256f: leave; mov [rax], cl; mov rax, rdi; ret;
0x000a2570: mov [rax], cl; mov rax, rdi; ret;
0x000a294a: add rsi, 0x30; add rdi, 0x30; lea r11, [rip+0xe25e7]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a294b: add esi, 0x30; add rdi, 0x30; lea r11, [rip+0xe25e7]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a294e: add rdi, 0x30; lea r11, [rip+0xe25e7]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a294f: add edi, 0x30; lea r11, [rip+0xe25e7]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a2954: sbb eax, 0xe25e7; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a29ac: sbb eax, 0xe258f; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a29c0: add rsi, rcx; bsf rdx, rdx; lea r11, [rip+0xe258f]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a29c1: add esi, ecx; bsf rdx, rdx; lea r11, [rip+0xe258f]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a29c9: sbb eax, 0xe2572; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a29e4: add rdi, 0x10; bsf rdx, rdx; lea r11, [rip+0xe254d]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a29e5: add edi, 0x10; bsf rdx, rdx; lea r11, [rip+0xe254d]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a29e7: adc [rax+0xf], cl; mov esp, 0x1d8d4cd2; and rax, 0x6349000e; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx;
0x000a29ea: mov esp, 0x1d8d4cd2; and rax, 0x6349000e; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx;
0x000a29eb: ror byte ptr [rbp+rcx*4+0x1d], cl; and rax, 0x6349000e; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx;
0x000a29ee: sbb eax, 0xe254d; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a29ef: and rax, 0x6349000e; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx;
0x000a2a07: add rdx, 0x10; sub rdx, rcx; lea r11, [rip+0xe252b]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a2a08: add edx, 0x10; sub rdx, rcx; lea r11, [rip+0xe252b]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a2a0b: sub rdx, rcx; lea r11, [rip+0xe252b]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a2a0c: sub edx, ecx; lea r11, [rip+0xe252b]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a2a10: sbb eax, 0xe252b; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a2a11: sub esp, [rip+0x6349000e]; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx;
0x000a2a1f: nop; bsf rdx, rdx; lea r11, [rip+0xe2515]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a2a20: bsf rdx, rdx; lea r11, [rip+0xe258f]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a2a21: bsf edx, edx; lea r11, [rip+0xe258f]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a2a22: mov esp, 0x1d8d4cd2; adc eax, 0x49000e25; movsxd ecx, [rbx+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a2a23: ror byte ptr [rbp+rcx*4+0x1d], cl; adc eax, 0x49000e25; movsxd ecx, [rbx+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a2a26: sbb eax, 0xe2515; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a2a27: adc eax, 0x49000e25; movsxd ecx, [rbx+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a2a28: and eax, 0x6349000e; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx;
0x000a2a48: add rsi, 0x10; add rdi, 0x10; lea r11, [rip+0xe24e9]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a2a49: add esi, 0x10; add rdi, 0x10; lea r11, [rip+0xe24e9]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a2a4c: add rdi, 0x10; lea r11, [rip+0xe24e9]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a2a4d: add edi, 0x10; lea r11, [rip+0xe24e9]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a2a52: sbb eax, 0xe24e9; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a2a7d: add rsi, 0x20; add rdi, 0x20; lea r11, [rip+0xe24b4]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a2a7e: add esi, 0x20; add rdi, 0x20; lea r11, [rip+0xe24b4]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a2a81: add rdi, 0x20; lea r11, [rip+0xe24b4]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a2a82: add edi, 0x20; lea r11, [rip+0xe24b4]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a2a85: lea r11, [rip+0xe25e7]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a2a86: lea ebx, [rip+0xe25e7]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a2a87: sbb eax, 0xe24b4; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a2a89: and al, 0xe; add [rcx+0x63], cl; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx;
0x000a2dad: ret 0x11;
0x000a2dee: seto [rax+0x29]; iretd;
0x000a3060: add rsi, rcx; bsf rdx, rdx; lea r11, [rip+0xe1f52]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a3061: add esi, ecx; bsf rdx, rdx; lea r11, [rip+0xe1f52]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a3069: sbb eax, 0xe1f52; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a3088: sub r8, 0x10; bsf rdx, rdx; lea r11, [rip+0xe1f29]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a3089: sub eax, 0x10; bsf rdx, rdx; lea r11, [rip+0xe1f29]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a308c: bsf rdx, rdx; lea r11, [rip+0xe1f52]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a308d: bsf edx, edx; lea r11, [rip+0xe1f52]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a3092: sbb eax, 0xe1f29; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a30b7: add rdx, 0x10; sub rdx, rcx; lea r11, [rip+0xe1efb]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a30b8: add edx, 0x10; sub rdx, rcx; lea r11, [rip+0xe1efb]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a30bb: sub rdx, rcx; lea r11, [rip+0xe1efb]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a30bc: sub edx, ecx; lea r11, [rip+0xe1efb]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a30c0: sbb eax, 0xe1efb; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a3188: add [rax], al; nop [rax+rax]; lea r11, [rip+0xe1e29]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a318a: nop [rax+rax]; lea r11, [rip+0xe1e29]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a318b: nop [rax+rax]; lea r11, [rip+0xe1e29]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a318d: add [rax], r8b; lea r11, [rip+0xe1e29]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a318e: add [rax], al; lea r11, [rip+0xe1e29]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a3190: lea r11, [rip+0xe1f52]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a3191: lea ebx, [rip+0xe1f52]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a3192: sbb eax, 0xe1e29; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a31c2: int 0x4c; lea ebx, [rip+0xe1e76]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a31c5: sbb eax, 0xe1e76; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a31f2: popfq; lea r11, [rip+0xe1e46]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a31f5: sbb eax, 0xe1e46; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a3212: sbb eax, 0xe1e29; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a3230: sbb eax, 0xe1e0b; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a324d: add rdi, rcx; add rsi, rcx; lea r11, [rip+0xe1de6]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a324e: add edi, ecx; add rsi, rcx; lea r11, [rip+0xe1de6]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a3255: sbb eax, 0xe1de6; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a327e: sbb eax, 0xe1dbd; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a327f: mov ebp, 0x4b000e1d; movsxd ecx, [rbx+rax*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a3299: add rsi, rcx; lea r11, [rip+0xe1de6]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a329a: add esi, ecx; lea r11, [rip+0xe1de6]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a329e: sbb eax, 0xe1d9d; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a329f: popfq; sbb eax, 0x634b000e; or al, 0x83; lea rcx, [r11+rcx]; jmp rcx;
0x000a32c7: sbb eax, 0xe1d74; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a32c9: sbb eax, 0x634b000e; or al, 0x83; lea rcx, [r11+rcx]; jmp rcx;
0x000a32ec: mov al, 8; add [rax], al; ret;
0x000a3310: mov [rax], cs; add [rax], al; ret;
0x000a3330: add ecx, [rdi]; test [rcx+8], ebp; add [rax], al; ret;
0x000a3332: test [rcx+8], ebp; add [rax], al; ret;
0x000a334b: add al, 0xf; test [rsi+8], ecx; add [rax], al; ret;
0x000a334d: test [rsi+8], ecx; add [rax], al; ret;
0x000a336e: add eax, 0x82b850f; add [rax], al; ret;
0x000a3371: sub ecx, [rax]; add [rax], al; ret;
0x000a3418: test [rdi], al; add [rax], al; ret;
0x000a3433: or ecx, [rdi]; test [rsi+7], esp; add [rax], al; ret;
0x000a3435: test [rsi+7], esp; add [rax], al; ret;
0x000a3453: or al, 0xf; test [rsi+7], eax; add [rax], al; ret;
0x000a3455: test [rsi+7], eax; add [rax], al; ret;
0x000a3475: or eax, 0x724850f; add [rax], al; ret;
0x000a3477: test [rdi+rax], esp; add [rax], al; ret;
0x000a3478: and al, 7; add [rax], al; ret;
0x000a3497: test [rdi+rax], eax; add [rax], al; ret;
0x000a3498: add al, 7; add [rax], al; ret;
0x000a34b1: cmovs ecx, [rbp-0x7af0f081]; in al, 6; add [rax], al; ret;
0x000a34b8: in al, 6; add [rax], al; ret;
0x000a3578: adc eax, 0x621850f; add [rax], al; ret;
0x000a357b: and [rsi], eax; add [rax], al; ret;
0x000a359a: add al, [rsi]; add [rax], al; ret;
0x000a362f: sbb cl, [rdi]; test [rdx+5], ebp; add [rax], al; ret;
0x000a3631: test [rdx+5], ebp; add [rax], al; ret;
0x000a3632: push 5; add [rax], al; ret;
0x000a36b9: sbb eax, 0x4e0850f; add [rax], al; ret;
0x000a36ec: mov al, 4; add [rax], al; ret;
0x000a371c: add byte ptr [rax+rax], 0; ret;
0x000a3749: and [rdi], cl; test [rax+4], edx; add [rax], al; ret;
0x000a374b: test [rax+4], edx; add [rax], al; ret;
0x000a374c: push rax; add al, 0; add bl, al; nop [rax+rax]; nop [rax]; ret;
0x000a374d: add al, 0; add bl, al; nop [rax+rax]; nop [rax]; ret;
0x000a375f: add bl, al; nop [rax+rax]; nop [rax]; mov dl, [rsi]; mov [rdi], dl; ret;
0x000a3762: nop [rax+rax]; nop [rax]; mov dl, [rsi]; mov [rdi], dl; ret;
0x000a3763: nop [rax+rax]; nop [rax]; mov dl, [rsi]; mov [rdi], dl; ret;
0x000a3764: nop [rax+rax]; nop [rax]; mov dl, [rsi]; mov [rdi], dl; ret;
0x000a3768: add [rax], al; add [rax], al; nop [rax]; mov dl, [rsi]; mov [rdi], dl; ret;
0x000a376a: add [rax], al; nop [rax]; mov dl, [rsi]; mov [rdi], dl; ret;
0x000a376c: nop [rax]; mov dl, [rsi]; mov [rdi], dl; ret;
0x000a376f: add [rdx-0x3ce877ea], cl; nop [rax+rax]; mov dx, [rsi]; mov [rdi], dx; ret;
0x000a3770: mov dl, [rsi]; mov [rdi], dl; ret;
0x000a3776: nop [rax+rax]; mov dx, [rsi]; mov [rdi], dx; ret;
0x000a3777: nop [rax+rax]; mov dx, [rsi]; mov [rdi], dx; ret;
0x000a3778: nop [rax+rax]; mov dx, [rsi]; mov [rdi], dx; ret;
0x000a377a: test [rax], al; add [rax], al; add [rax], al; mov dx, [rsi]; mov [rdi], dx; ret;
0x000a377c: add [rax], al; add [rax], al; mov dx, [rsi]; mov [rdi], dx; ret;
0x000a377e: add [rax], al; mov dx, [rsi]; mov [rdi], dx; ret;
0x000a3787: nop [rax+rax]; mov cx, [rsi]; mov dl, [rsi+2]; mov [rdi], cx; mov [rdi+2], dl; ret;
0x000a3788: nop [rax+rax]; mov cx, [rsi]; mov dl, [rsi+2]; mov [rdi], cx; mov [rdi+2], dl; ret;
0x000a378e: add [rax], al; mov cx, [rsi]; mov dl, [rsi+2]; mov [rdi], cx; mov [rdi+2], dl; ret;
0x000a3790: mov cx, [rsi]; mov dl, [rsi+2]; mov [rdi], cx; mov [rdi+2], dl; ret;
0x000a3791: mov ecx, [rsi]; mov dl, [rsi+2]; mov [rdi], cx; mov [rdi+2], dl; ret;
0x000a3793: mov dl, [rsi+2]; mov [rdi], cx; mov [rdi+2], dl; ret;
0x000a3796: mov [rdi], cx; mov [rdi+2], dl; ret;
0x000a3797: mov [rdi], ecx; mov [rdi+2], dl; ret;
0x000a3799: mov [rdi+2], dl; ret;
0x000a379a: push rdi; add al, bl; nop [rax]; mov edx, [rsi]; mov [rdi], edx; ret;
0x000a379b: add al, bl; nop [rax]; mov edx, [rsi]; mov [rdi], edx; ret;
0x000a379d: nop [rax]; mov edx, [rsi]; mov [rdi], edx; ret;
0x000a37a6: nop [rax+rax]; mov ecx, [rsi]; mov dl, [rsi+4]; mov [rdi], ecx; mov [rdi+4], dl; ret;
0x000a37a7: nop [rax+rax]; mov ecx, [rsi]; mov dl, [rsi+4]; mov [rdi], ecx; mov [rdi+4], dl; ret;
0x000a37a8: nop [rax+rax]; mov ecx, [rsi]; mov dl, [rsi+4]; mov [rdi], ecx; mov [rdi+4], dl; ret;
0x000a37ab: add [rax], al; add [rax], al; add [rbx+0x4568a0e], cl; mov [rdi], ecx; mov [rdi+4], dl; ret;
0x000a37ad: add [rax], al; add [rbx+0x4568a0e], cl; mov [rdi], ecx; mov [rdi+4], dl; ret;
0x000a37ae: add [rax], al; mov ecx, [rsi]; mov dl, [rsi+4]; mov [rdi], ecx; mov [rdi+4], dl; ret;
0x000a37af: add [rbx+0x4568a0e], cl; mov [rdi], ecx; mov [rdi+4], dl; ret;
0x000a37b0: mov ecx, [rsi]; mov dl, [rsi+4]; mov [rdi], ecx; mov [rdi+4], dl; ret;
0x000a37b2: mov dl, [rsi+4]; mov [rdi], ecx; mov [rdi+4], dl; ret;
0x000a37b5: mov [rdi], ecx; mov [rdi+4], dl; ret;
0x000a37bb: nop [rax+rax]; mov ecx, [rsi]; mov dx, [rsi+4]; mov [rdi], ecx; mov [rdi+4], dx; ret;
0x000a37bd: add [rax], r8b; mov ecx, [rsi]; mov dx, [rsi+4]; mov [rdi], ecx; mov [rdi+4], dx; ret;
0x000a37e7: nop [rax+rax]; mov rcx, [rsi]; mov dl, [rsi+8]; mov [rdi], rcx; mov [rdi+8], dl; ret;
0x000a37e8: nop [rax+rax]; mov rcx, [rsi]; mov dl, [rsi+8]; mov [rdi], rcx; mov [rdi+8], dl; ret;
0x000a37ee: add [rax], al; mov rcx, [rsi]; mov dl, [rsi+8]; mov [rdi], rcx; mov [rdi+8], dl; ret;
0x000a37f0: mov rcx, [rsi]; mov dl, [rsi+8]; mov [rdi], rcx; mov [rdi+8], dl; ret;
0x000a37f1: mov ecx, [rsi]; mov dl, [rsi+8]; mov [rdi], rcx; mov [rdi+8], dl; ret;
0x000a37f3: mov dl, [rsi+8]; mov [rdi], rcx; mov [rdi+8], dl; ret;
0x000a37f6: mov [rdi], rcx; mov [rdi+8], dl; ret;
0x000a37f7: mov [rdi], ecx; mov [rdi+8], dl; ret;
0x000a37fd: nop [rax]; mov rcx, [rsi]; mov dx, [rsi+8]; mov [rdi], rcx; mov [rdi+8], dx; ret;
0x000a3869: nop [rax]; movdqu xmm0, [rsi]; mov cl, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], cl; ret;
0x000a386e: add [rax], al; movdqu xmm0, [rsi]; mov cl, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], cl; ret;
0x000a386f: add bl, dh; movq mm0, [rsi]; mov cl, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], cl; ret;
0x000a3870: movdqu xmm0, [rsi]; mov cl, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], cl; ret;
0x000a3871: movq mm0, [rsi]; mov cl, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], cl; ret;
0x000a3874: mov cl, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], cl; ret;
0x000a3875: adc bl, r14b; movq [rdi], mm0; mov [rdi+0x10], cl; ret;
0x000a3876: adc bl, dh; movq [rdi], mm0; mov [rdi+0x10], cl; ret;
0x000a3877: movdqu [rdi], xmm0; mov [rdi+0x10], cl; ret;
0x000a3878: movq [rdi], mm0; mov [rdi+0x10], cl; ret;
0x000a387b: mov [rdi+0x10], cl; ret;
0x000a387f: nop; movdqu xmm0, [rsi]; mov cx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], cx; ret;
0x000a38c4: mov ecx, [rsi+0x10]; mov dl, [rsi+0x14]; movdqu [rdi], xmm0; mov [rdi+0x10], ecx; mov [rdi+0x14], dl; ret;
0x000a38c7: mov dl, [rsi+0x14]; movdqu [rdi], xmm0; mov [rdi+0x10], ecx; mov [rdi+0x14], dl; ret;
0x000a38c8: push rsi; adc al, 0xf3; movq [rdi], mm0; mov [rdi+0x10], ecx; mov [rdi+0x14], dl; ret;
0x000a38c9: adc al, 0xf3; movq [rdi], mm0; mov [rdi+0x10], ecx; mov [rdi+0x14], dl; ret;
0x000a38ca: movdqu [rdi], xmm0; mov [rdi+0x10], ecx; mov [rdi+0x14], dl; ret;
0x000a38cb: movq [rdi], mm0; mov [rdi+0x10], ecx; mov [rdi+0x14], dl; ret;
0x000a38ce: mov [rdi+0x10], ecx; mov [rdi+0x14], dl; ret;
0x000a38d1: mov [rdi+0x14], dl; ret;
0x000a38d6: nop [rax+rax]; movdqu xmm0, [rsi]; mov rcx, [rsi+0xe]; movdqu [rdi], xmm0; mov [rdi+0xe], rcx; ret;
0x000a38d7: nop [rax+rax]; movdqu xmm0, [rsi]; mov rcx, [rsi+0xe]; movdqu [rdi], xmm0; mov [rdi+0xe], rcx; ret;
0x000a38d8: nop [rax+rax]; movdqu xmm0, [rsi]; mov rcx, [rsi+0xe]; movdqu [rdi], xmm0; mov [rdi+0xe], rcx; ret;
0x000a38de: add [rax], al; movdqu xmm0, [rsi]; mov rcx, [rsi+0xe]; movdqu [rdi], xmm0; mov [rdi+0xe], rcx; ret;
0x000a3944: mov rdx, [rsi+0x10]; mov cl, [rsi+0x18]; movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cl; ret;
0x000a3945: mov edx, [rsi+0x10]; mov cl, [rsi+0x18]; movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cl; ret;
0x000a3948: mov cl, [rsi+0x18]; movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cl; ret;
0x000a3949: sbb bl, r14b; movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cl; ret;
0x000a394a: sbb bl, dh; movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cl; ret;
0x000a394b: movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cl; ret;
0x000a394c: movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cl; ret;
0x000a394f: mov [rdi+0x10], rdx; mov [rdi+0x18], cl; ret;
0x000a3950: mov [rdi+0x10], edx; mov [rdi+0x18], cl; ret;
0x000a3953: mov [rdi+0x18], cl; ret;
0x000a3c09: adc [rbp+rcx*4+0x1d], cl; mov edi, 0x4b000e14; movsxd ecx, [rbx+rax*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a3c0c: sbb eax, 0xe14bf; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a3c0d: mov edi, 0x4b000e14; movsxd ecx, [rbx+rax*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a3c21: movdqa [rdi], xmm0; add rdi, 0x10; lea r11, [rip+0xe14bf]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a3c22: movq [rdi], mm0; add rdi, 0x10; lea r11, [rip+0xe14bf]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a3c25: add rdi, 0x10; lea r11, [rip+0xe14bf]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a3c26: add edi, 0x10; lea r11, [rip+0xe14bf]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a3c28: adc [rbp+rcx*4+0x1d], cl; mov al, [0x49830c634b000e14]; lea ecx, [rbx+rcx]; jmp rcx;
0x000a3c2b: sbb eax, 0xe14a0; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a3c2c: mov al, [0x49830c634b000e14]; lea ecx, [rbx+rcx]; jmp rcx;
0x000a3c3a: add r8, 0x10; lea r11, [rip+0xe148b]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a3c3b: add eax, 0x10; lea r11, [rip+0xe148b]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a3c3c: rcl byte ptr [rax], 0x4c; lea ebx, [rip+0xe148b]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a3c3d: adc [rbp+rcx*4+0x1d], cl; mov edx, [rsi+rcx]; add [rbx+0x63], cl; or al, 0x83; lea rcx, [r11+rcx]; jmp rcx;
0x000a3c3e: lea r11, [rip+0xe14bf]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a3c3f: lea ebx, [rip+0xe14bf]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a3c40: sbb eax, 0xe148b; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a3c41: mov edx, [rsi+rcx]; add [rbx+0x63], cl; or al, 0x83; lea rcx, [r11+rcx]; jmp rcx;
0x000a3c42: adc al, 0xe; add [rbx+0x63], cl; or al, 0x83; lea rcx, [r11+rcx]; jmp rcx;
0x000a3c92: push rbx; movq [rdi+0x30], mm7; ret;
0x000a3c93: movdqu [rdi+0x30], xmm7; ret;
0x000a3c94: movq [rdi+0x30], mm7; ret;
0x000a3d29: lea r11, [rip+0xe1e76]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a3d2a: lea ebx, [rip+0xe1e76]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a3d2b: sbb eax, 0xe1310; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a3d2d: adc ecx, [rsi]; add [rbx+0x63], cl; or al, 0x83; lea rcx, [r11+rcx]; jmp rcx;
0x000a3f4a: add rsi, 0x30; add rdi, 0x30; lea r11, [rip+0xe11bb]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a3f4b: add esi, 0x30; add rdi, 0x30; lea r11, [rip+0xe11bb]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a3f4e: add rdi, 0x30; lea r11, [rip+0xe11bb]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a3f4f: add edi, 0x30; lea r11, [rip+0xe11bb]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a3f51: xor [rbp+rcx*4+0x1d], cl; mov ebx, 0x49000e11; movsxd ecx, [rbx+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a3f54: sbb eax, 0xe11bb; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a3f55: mov ebx, 0x49000e11; movsxd ecx, [rbx+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a3fac: sbb eax, 0xe1163; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a3fc0: add rsi, rcx; bsf rdx, rdx; lea r11, [rip+0xe1163]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a3fc1: add esi, ecx; bsf rdx, rdx; lea r11, [rip+0xe1163]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a3fc5: mov esp, 0x1d8d4cd2; adc [rsi], r9d; add [rcx+0x63], cl; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx;
0x000a3fc6: ror byte ptr [rbp+rcx*4+0x1d], cl; adc [rsi], r9d; add [rcx+0x63], cl; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx;
0x000a3fc9: sbb eax, 0xe1146; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a3fca: adc [rsi], r9d; add [rcx+0x63], cl; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx;
0x000a3fe4: add rdi, 0x10; bsf rdx, rdx; lea r11, [rip+0xe1121]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a3fe5: add edi, 0x10; bsf rdx, rdx; lea r11, [rip+0xe1121]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a3fee: sbb eax, 0xe1121; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a3ff0: adc [rsi], ecx; add [rcx+0x63], cl; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx;
0x000a4007: add rdx, 0x10; sub rdx, rcx; lea r11, [rip+0xe10ff]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a4008: add edx, 0x10; sub rdx, rcx; lea r11, [rip+0xe10ff]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a400b: sub rdx, rcx; lea r11, [rip+0xe10ff]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a400c: sub edx, ecx; lea r11, [rip+0xe10ff]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a4010: sbb eax, 0xe10ff; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a401f: nop; bsf rdx, rdx; lea r11, [rip+0xe10e9]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a4020: bsf rdx, rdx; lea r11, [rip+0xe1163]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a4021: bsf edx, edx; lea r11, [rip+0xe1163]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a4026: sbb eax, 0xe10e9; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a4048: add rsi, 0x10; add rdi, 0x10; lea r11, [rip+0xe10bd]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a4049: add esi, 0x10; add rdi, 0x10; lea r11, [rip+0xe10bd]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a404c: add rdi, 0x10; lea r11, [rip+0xe10bd]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a404d: add edi, 0x10; lea r11, [rip+0xe10bd]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a404f: adc [rbp+rcx*4+0x1d], cl; mov ebp, 0x49000e10; movsxd ecx, [rbx+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a4052: sbb eax, 0xe10bd; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a4053: mov ebp, 0x49000e10; movsxd ecx, [rbx+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a407d: add rsi, 0x20; add rdi, 0x20; lea r11, [rip+0xe1088]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a407e: add esi, 0x20; add rdi, 0x20; lea r11, [rip+0xe1088]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a4081: add rdi, 0x20; lea r11, [rip+0xe1088]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a4082: add edi, 0x20; lea r11, [rip+0xe1088]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a4085: lea r11, [rip+0xe11bb]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a4086: lea ebx, [rip+0xe11bb]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a4087: sbb eax, 0xe1088; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a4089: adc [rsi], cl; add [rcx+0x63], cl; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx;
0x000a4096: nop [rax+rax]; mov [rdi], dh; lea rax, [rdi]; ret;
0x000a4097: nop [rax+rax]; mov [rdi], dh; lea rax, [rdi]; ret;
0x000a4098: nop [rax+rax]; mov [rdi], dh; lea rax, [rdi]; ret;
0x000a409a: test [rax], al; add [rax], al; add [rax], al; mov [rdi], dh; lea rax, [rdi]; ret;
0x000a409b: add [rax], al; add [rax], al; add [rax+0x78d4837], cl; ret;
0x000a409c: add [rax], al; add [rax], al; mov [rdi], dh; lea rax, [rdi]; ret;
0x000a409d: add [rax], al; add [rax+0x78d4837], cl; ret;
0x000a409e: add [rax], al; mov [rdi], dh; lea rax, [rdi]; ret;
0x000a409f: add [rax+0x78d4837], cl; ret;
0x000a40a0: mov [rdi], dh; lea rax, [rdi]; ret;
0x000a40a6: nop [rax+rax]; mov dx, [rsi]; mov [rdi], dx; lea rax, [rdi+1]; ret;
0x000a40a7: nop [rax+rax]; mov dx, [rsi]; mov [rdi], dx; lea rax, [rdi+1]; ret;
0x000a40a8: nop [rax+rax]; mov dx, [rsi]; mov [rdi], dx; lea rax, [rdi+1]; ret;
0x000a40ac: add [rax], al; add [rax], al; mov dx, [rsi]; mov [rdi], dx; lea rax, [rdi+1]; ret;
0x000a40ae: add [rax], al; mov dx, [rsi]; mov [rdi], dx; lea rax, [rdi+1]; ret;
0x000a40b0: mov dx, [rsi]; mov [rdi], dx; lea rax, [rdi+1]; ret;
0x000a40b1: mov edx, [rsi]; mov [rdi], dx; lea rax, [rdi+1]; ret;
0x000a40b3: mov [rdi], dx; lea rax, [rdi+1]; ret;
0x000a40b4: mov [rdi], edx; lea rax, [rdi+1]; ret;
0x000a40bb: nop [rax+rax]; mov cx, [rsi]; mov [rdi], cx; mov [rdi+2], dh; lea rax, [rdi+2]; ret;
0x000a40bd: add [rax], r8b; mov cx, [rsi]; mov [rdi], cx; mov [rdi+2], dh; lea rax, [rdi+2]; ret;
0x000a40be: add [rax], al; mov cx, [rsi]; mov [rdi], cx; mov [rdi+2], dh; lea rax, [rdi+2]; ret;
0x000a40c0: mov cx, [rsi]; mov [rdi], cx; mov [rdi+2], dh; lea rax, [rdi+2]; ret;
0x000a40c1: mov ecx, [rsi]; mov [rdi], cx; mov [rdi+2], dh; lea rax, [rdi+2]; ret;
0x000a40c3: mov [rdi], cx; mov [rdi+2], dh; lea rax, [rdi+2]; ret;
0x000a40c4: mov [rdi], ecx; mov [rdi+2], dh; lea rax, [rdi+2]; ret;
0x000a40c6: mov [rdi+2], dh; lea rax, [rdi+2]; ret;
0x000a40cb: add r8b, r11b; xchg ax, ax; mov edx, [rsi]; mov [rdi], edx; lea rax, [rdi+3]; ret;
0x000a40cc: add al, bl; xchg ax, ax; mov edx, [rsi]; mov [rdi], edx; lea rax, [rdi+3]; ret;
0x000a40ce: xchg ax, ax; mov edx, [rsi]; mov [rdi], edx; lea rax, [rdi+3]; ret;
0x000a40cf: nop; mov edx, [rsi]; mov [rdi], edx; lea rax, [rdi+3]; ret;
0x000a40d0: mov edx, [rsi]; mov [rdi], edx; lea rax, [rdi+3]; ret;
0x000a40d2: mov [rdi], edx; lea rax, [rdi+3]; ret;
0x000a40d9: nop [rax]; mov ecx, [rsi]; mov [rdi+4], dh; mov [rdi], ecx; lea rax, [rdi+4]; ret;
0x000a40dd: add [rax], al; add [rbx+0x477880e], cl; mov [rdi], ecx; lea rax, [rdi+4]; ret;
0x000a40de: add [rax], al; mov ecx, [rsi]; mov [rdi+4], dh; mov [rdi], ecx; lea rax, [rdi+4]; ret;
0x000a40df: add [rbx+0x477880e], cl; mov [rdi], ecx; lea rax, [rdi+4]; ret;
0x000a40e0: mov ecx, [rsi]; mov [rdi+4], dh; mov [rdi], ecx; lea rax, [rdi+4]; ret;
0x000a40e2: mov [rdi+4], dh; mov [rdi], ecx; lea rax, [rdi+4]; ret;
0x000a40e5: mov [rdi], ecx; lea rax, [rdi+4]; ret;
0x000a40f0: mov ecx, [rsi]; mov dx, [rsi+4]; mov [rdi], ecx; mov [rdi+4], dx; lea rax, [rdi+5]; ret;
0x000a40f2: mov dx, [rsi+4]; mov [rdi], ecx; mov [rdi+4], dx; lea rax, [rdi+5]; ret;
0x000a40f3: mov edx, [rsi+4]; mov [rdi], ecx; mov [rdi+4], dx; lea rax, [rdi+5]; ret;
0x000a40f6: mov [rdi], ecx; mov [rdi+4], dx; lea rax, [rdi+5]; ret;
0x000a40f8: mov [rdi+4], dx; lea rax, [rdi+5]; ret;
0x000a40f9: mov [rdi+4], edx; lea rax, [rdi+5]; ret;
0x000a410f: add [rbx+0x3568b0e], cl; mov [rdi], ecx; mov [rdi+3], edx; lea rax, [rdi+6]; ret;
0x000a4110: mov ecx, [rsi]; mov edx, [rsi+3]; mov [rdi], ecx; mov [rdi+3], edx; lea rax, [rdi+6]; ret;
0x000a4112: mov edx, [rsi+3]; mov [rdi], ecx; mov [rdi+3], edx; lea rax, [rdi+6]; ret;
0x000a4113: push rsi; add ecx, [rcx+0x357890f]; lea rax, [rdi+6]; ret;
0x000a4114: add ecx, [rcx+0x357890f]; lea rax, [rdi+6]; ret;
0x000a4115: mov [rdi], ecx; mov [rdi+3], edx; lea rax, [rdi+6]; ret;
0x000a4117: mov [rdi+3], edx; lea rax, [rdi+6]; ret;
0x000a411f: nop; mov rdx, [rsi]; mov [rdi], rdx; lea rax, [rdi+7]; ret;
0x000a4120: mov rdx, [rsi]; mov [rdi], rdx; lea rax, [rdi+7]; ret;
0x000a4121: mov edx, [rsi]; mov [rdi], rdx; lea rax, [rdi+7]; ret;
0x000a4123: mov [rdi], rdx; lea rax, [rdi+7]; ret;
0x000a4124: mov [rdi], edx; lea rax, [rdi+7]; ret;
0x000a412b: nop [rax+rax]; mov rcx, [rsi]; mov [rdi+8], dh; mov [rdi], rcx; lea rax, [rdi+8]; ret;
0x000a412d: add [rax], r8b; mov rcx, [rsi]; mov [rdi+8], dh; mov [rdi], rcx; lea rax, [rdi+8]; ret;
0x000a412e: add [rax], al; mov rcx, [rsi]; mov [rdi+8], dh; mov [rdi], rcx; lea rax, [rdi+8]; ret;
0x000a4130: mov rcx, [rsi]; mov [rdi+8], dh; mov [rdi], rcx; lea rax, [rdi+8]; ret;
0x000a4131: mov ecx, [rsi]; mov [rdi+8], dh; mov [rdi], rcx; lea rax, [rdi+8]; ret;
0x000a4133: mov [rdi+8], dh; mov [rdi], rcx; lea rax, [rdi+8]; ret;
0x000a4136: mov [rdi], rcx; lea rax, [rdi+8]; ret;
0x000a4137: mov [rdi], ecx; lea rax, [rdi+8]; ret;
0x000a4140: mov rcx, [rsi]; mov dx, [rsi+8]; mov [rdi], rcx; mov [rdi+8], dx; lea rax, [rdi+9]; ret;
0x000a4141: mov ecx, [rsi]; mov dx, [rsi+8]; mov [rdi], rcx; mov [rdi+8], dx; lea rax, [rdi+9]; ret;
0x000a4143: mov dx, [rsi+8]; mov [rdi], rcx; mov [rdi+8], dx; lea rax, [rdi+9]; ret;
0x000a4144: mov edx, [rsi+8]; mov [rdi], rcx; mov [rdi+8], dx; lea rax, [rdi+9]; ret;
0x000a4147: mov [rdi], rcx; mov [rdi+8], dx; lea rax, [rdi+9]; ret;
0x000a4148: mov [rdi], ecx; mov [rdi+8], dx; lea rax, [rdi+9]; ret;
0x000a414a: mov [rdi+8], dx; lea rax, [rdi+9]; ret;
0x000a414b: mov [rdi+8], edx; lea rax, [rdi+9]; ret;
0x000a4160: mov rcx, [rsi]; mov edx, [rsi+7]; mov [rdi], rcx; mov [rdi+7], edx; lea rax, [rdi+0xa]; ret;
0x000a4161: mov ecx, [rsi]; mov edx, [rsi+7]; mov [rdi], rcx; mov [rdi+7], edx; lea rax, [rdi+0xa]; ret;
0x000a4163: mov edx, [rsi+7]; mov [rdi], rcx; mov [rdi+7], edx; lea rax, [rdi+0xa]; ret;
0x000a4166: mov [rdi], rcx; mov [rdi+7], edx; lea rax, [rdi+0xa]; ret;
0x000a4167: mov [rdi], ecx; mov [rdi+7], edx; lea rax, [rdi+0xa]; ret;
0x000a4169: mov [rdi+7], edx; lea rax, [rdi+0xa]; ret;
0x000a4180: mov rcx, [rsi]; mov edx, [rsi+8]; mov [rdi], rcx; mov [rdi+8], edx; lea rax, [rdi+0xb]; ret;
0x000a4181: mov ecx, [rsi]; mov edx, [rsi+8]; mov [rdi], rcx; mov [rdi+8], edx; lea rax, [rdi+0xb]; ret;
0x000a4183: mov edx, [rsi+8]; mov [rdi], rcx; mov [rdi+8], edx; lea rax, [rdi+0xb]; ret;
0x000a4186: mov [rdi], rcx; mov [rdi+8], edx; lea rax, [rdi+0xb]; ret;
0x000a4187: mov [rdi], ecx; mov [rdi+8], edx; lea rax, [rdi+0xb]; ret;
0x000a4189: mov [rdi+8], edx; lea rax, [rdi+0xb]; ret;
0x000a41a0: mov rcx, [rsi]; mov rdx, [rsi+5]; mov [rdi], rcx; mov [rdi+5], rdx; lea rax, [rdi+0xc]; ret;
0x000a41a1: mov ecx, [rsi]; mov rdx, [rsi+5]; mov [rdi], rcx; mov [rdi+5], rdx; lea rax, [rdi+0xc]; ret;
0x000a41a3: mov rdx, [rsi+5]; mov [rdi], rcx; mov [rdi+5], rdx; lea rax, [rdi+0xc]; ret;
0x000a41a4: mov edx, [rsi+5]; mov [rdi], rcx; mov [rdi+5], rdx; lea rax, [rdi+0xc]; ret;
0x000a41a5: push rsi; add eax, 0x480f8948; mov [rdi+5], edx; lea rax, [rdi+0xc]; ret;
0x000a41a6: add eax, 0x480f8948; mov [rdi+5], edx; lea rax, [rdi+0xc]; ret;
0x000a41a7: mov [rdi], rcx; mov [rdi+5], rdx; lea rax, [rdi+0xc]; ret;
0x000a41a8: mov [rdi], ecx; mov [rdi+5], rdx; lea rax, [rdi+0xc]; ret;
0x000a41aa: mov [rdi+5], rdx; lea rax, [rdi+0xc]; ret;
0x000a41ab: mov [rdi+5], edx; lea rax, [rdi+0xc]; ret;
0x000a41ac: push rdi; add eax, 0xc478d48; ret;
0x000a41ad: add eax, 0xc478d48; ret;
0x000a41c0: mov rcx, [rsi]; mov rdx, [rsi+6]; mov [rdi], rcx; mov [rdi+6], rdx; lea rax, [rdi+0xd]; ret;
0x000a41c1: mov ecx, [rsi]; mov rdx, [rsi+6]; mov [rdi], rcx; mov [rdi+6], rdx; lea rax, [rdi+0xd]; ret;
0x000a41c3: mov rdx, [rsi+6]; mov [rdi], rcx; mov [rdi+6], rdx; lea rax, [rdi+0xd]; ret;
0x000a41c4: mov edx, [rsi+6]; mov [rdi], rcx; mov [rdi+6], rdx; lea rax, [rdi+0xd]; ret;
0x000a41c7: mov [rdi], rcx; mov [rdi+6], rdx; lea rax, [rdi+0xd]; ret;
0x000a41c8: mov [rdi], ecx; mov [rdi+6], rdx; lea rax, [rdi+0xd]; ret;
0x000a41ca: mov [rdi+6], rdx; lea rax, [rdi+0xd]; ret;
0x000a41cb: mov [rdi+6], edx; lea rax, [rdi+0xd]; ret;
0x000a41e0: mov rcx, [rsi]; mov rdx, [rsi+7]; mov [rdi], rcx; mov [rdi+7], rdx; lea rax, [rdi+0xe]; ret;
0x000a41e1: mov ecx, [rsi]; mov rdx, [rsi+7]; mov [rdi], rcx; mov [rdi+7], rdx; lea rax, [rdi+0xe]; ret;
0x000a41e3: mov rdx, [rsi+7]; mov [rdi], rcx; mov [rdi+7], rdx; lea rax, [rdi+0xe]; ret;
0x000a41e4: mov edx, [rsi+7]; mov [rdi], rcx; mov [rdi+7], rdx; lea rax, [rdi+0xe]; ret;
0x000a41e7: mov [rdi], rcx; mov [rdi+7], rdx; lea rax, [rdi+0xe]; ret;
0x000a41e8: mov [rdi], ecx; mov [rdi+7], rdx; lea rax, [rdi+0xe]; ret;
0x000a41ea: mov [rdi+7], rdx; lea rax, [rdi+0xe]; ret;
0x000a41eb: mov [rdi+7], edx; lea rax, [rdi+0xe]; ret;
0x000a41f4: nop [rax+rax]; xchg ax, ax; movdqu xmm0, [rsi]; movdqu [rdi], xmm0; lea rax, [rdi+0xf]; ret;
0x000a41f5: nop [rax+rax]; xchg ax, ax; movdqu xmm0, [rsi]; movdqu [rdi], xmm0; lea rax, [rdi+0xf]; ret;
0x000a41f6: nop [rax+rax]; xchg ax, ax; movdqu xmm0, [rsi]; movdqu [rdi], xmm0; lea rax, [rdi+0xf]; ret;
0x000a41fb: add [rax], al; add [rsi-0x70], ah; movdqu xmm0, [rsi]; movdqu [rdi], xmm0; lea rax, [rdi+0xf]; ret;
0x000a41fc: add [rax], al; xchg ax, ax; movdqu xmm0, [rsi]; movdqu [rdi], xmm0; lea rax, [rdi+0xf]; ret;
0x000a41fd: add [rsi-0x70], ah; movdqu xmm0, [rsi]; movdqu [rdi], xmm0; lea rax, [rdi+0xf]; ret;
0x000a41fe: xchg ax, ax; movdqu xmm0, [rsi]; movdqu [rdi], xmm0; lea rax, [rdi+0xf]; ret;
0x000a41ff: nop; movdqu xmm0, [rsi]; movdqu [rdi], xmm0; lea rax, [rdi+0xf]; ret;
0x000a4200: movdqu xmm0, [rsi]; movdqu [rdi], xmm0; lea rax, [rdi+0xf]; ret;
0x000a4201: movq mm0, [rsi]; movdqu [rdi], xmm0; lea rax, [rdi+0xf]; ret;
0x000a4204: movdqu [rdi], xmm0; lea rax, [rdi+0xf]; ret;
0x000a4205: movq [rdi], mm0; lea rax, [rdi+0xf]; ret;
0x000a420d: nop [rax]; movdqu xmm0, [rsi]; movdqu [rdi], xmm0; mov [rdi+0x10], dh; lea rax, [rdi+0x10]; ret;
0x000a420f: add bl, dh; movq mm0, [rsi]; movdqu [rdi], xmm0; mov [rdi+0x10], dh; lea rax, [rdi+0x10]; ret;
0x000a4210: movdqu xmm0, [rsi]; movdqu [rdi], xmm0; mov [rdi+0x10], dh; lea rax, [rdi+0x10]; ret;
0x000a4211: movq mm0, [rsi]; movdqu [rdi], xmm0; mov [rdi+0x10], dh; lea rax, [rdi+0x10]; ret;
0x000a4214: movdqu [rdi], xmm0; mov [rdi+0x10], dh; lea rax, [rdi+0x10]; ret;
0x000a4215: movq [rdi], mm0; mov [rdi+0x10], dh; lea rax, [rdi+0x10]; ret;
0x000a4218: mov [rdi+0x10], dh; lea rax, [rdi+0x10]; ret;
0x000a4220: movdqu xmm0, [rsi]; mov cx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], cx; lea rax, [rdi+0x11]; ret;
0x000a4221: movq mm0, [rsi]; mov cx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], cx; lea rax, [rdi+0x11]; ret;
0x000a4224: mov cx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], cx; lea rax, [rdi+0x11]; ret;
0x000a4225: mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], cx; lea rax, [rdi+0x11]; ret;
0x000a4226: adc bl, r14b; movq [rdi], mm0; mov [rdi+0x10], cx; lea rax, [rdi+0x11]; ret;
0x000a4227: adc bl, dh; movq [rdi], mm0; mov [rdi+0x10], cx; lea rax, [rdi+0x11]; ret;
0x000a4228: movdqu [rdi], xmm0; mov [rdi+0x10], cx; lea rax, [rdi+0x11]; ret;
0x000a4229: movq [rdi], mm0; mov [rdi+0x10], cx; lea rax, [rdi+0x11]; ret;
0x000a422c: mov [rdi+0x10], cx; lea rax, [rdi+0x11]; ret;
0x000a422d: mov [rdi+0x10], ecx; lea rax, [rdi+0x11]; ret;
0x000a4240: movdqu xmm0, [rsi]; mov ecx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], ecx; lea rax, [rdi+0x12]; ret;
0x000a4241: movq mm0, [rsi]; mov ecx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], ecx; lea rax, [rdi+0x12]; ret;
0x000a4244: mov ecx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], ecx; lea rax, [rdi+0x12]; ret;
0x000a4247: movdqu [rdi], xmm0; mov [rdi+0xf], ecx; lea rax, [rdi+0x12]; ret;
0x000a4248: movq [rdi], mm0; mov [rdi+0xf], ecx; lea rax, [rdi+0x12]; ret;
0x000a424b: mov [rdi+0xf], ecx; lea rax, [rdi+0x12]; ret;
0x000a4260: movdqu xmm0, [rsi]; mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], ecx; lea rax, [rdi+0x13]; ret;
0x000a4261: movq mm0, [rsi]; mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], ecx; lea rax, [rdi+0x13]; ret;
0x000a4264: mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], ecx; lea rax, [rdi+0x13]; ret;
0x000a4265: adc bl, r14b; movq [rdi], mm0; mov [rdi+0x10], ecx; lea rax, [rdi+0x13]; ret;
0x000a4266: adc bl, dh; movq [rdi], mm0; mov [rdi+0x10], ecx; lea rax, [rdi+0x13]; ret;
0x000a4267: movdqu [rdi], xmm0; mov [rdi+0x10], ecx; lea rax, [rdi+0x13]; ret;
0x000a4268: movq [rdi], mm0; mov [rdi+0x10], ecx; lea rax, [rdi+0x13]; ret;
0x000a426b: mov [rdi+0x10], ecx; lea rax, [rdi+0x13]; ret;
0x000a4284: mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], ecx; mov [rdi+0x14], dh; lea rax, [rdi+0x14]; ret;
0x000a4285: adc bl, r14b; movq [rdi], mm0; mov [rdi+0x10], ecx; mov [rdi+0x14], dh; lea rax, [rdi+0x14]; ret;
0x000a4286: adc bl, dh; movq [rdi], mm0; mov [rdi+0x10], ecx; mov [rdi+0x14], dh; lea rax, [rdi+0x14]; ret;
0x000a4287: movdqu [rdi], xmm0; mov [rdi+0x10], ecx; mov [rdi+0x14], dh; lea rax, [rdi+0x14]; ret;
0x000a4288: movq [rdi], mm0; mov [rdi+0x10], ecx; mov [rdi+0x14], dh; lea rax, [rdi+0x14]; ret;
0x000a428b: mov [rdi+0x10], ecx; mov [rdi+0x14], dh; lea rax, [rdi+0x14]; ret;
0x000a428e: mov [rdi+0x14], dh; lea rax, [rdi+0x14]; ret;
0x000a4290: adc al, 0x48; lea eax, [rdi+0x14]; ret;
0x000a42a0: movdqu xmm0, [rsi]; mov rcx, [rsi+0xe]; movdqu [rdi], xmm0; mov [rdi+0xe], rcx; lea rax, [rdi+0x15]; ret;
0x000a42a1: movq mm0, [rsi]; mov rcx, [rsi+0xe]; movdqu [rdi], xmm0; mov [rdi+0xe], rcx; lea rax, [rdi+0x15]; ret;
0x000a42a4: mov rcx, [rsi+0xe]; movdqu [rdi], xmm0; mov [rdi+0xe], rcx; lea rax, [rdi+0x15]; ret;
0x000a42a5: mov ecx, [rsi+0xe]; movdqu [rdi], xmm0; mov [rdi+0xe], rcx; lea rax, [rdi+0x15]; ret;
0x000a42a8: movdqu [rdi], xmm0; mov [rdi+0xe], rcx; lea rax, [rdi+0x15]; ret;
0x000a42a9: movq [rdi], mm0; mov [rdi+0xe], rcx; lea rax, [rdi+0x15]; ret;
0x000a42ac: mov [rdi+0xe], rcx; lea rax, [rdi+0x15]; ret;
0x000a42ad: mov [rdi+0xe], ecx; lea rax, [rdi+0x15]; ret;
0x000a42c0: movdqu xmm0, [rsi]; mov rcx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], rcx; lea rax, [rdi+0x16]; ret;
0x000a42c1: movq mm0, [rsi]; mov rcx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], rcx; lea rax, [rdi+0x16]; ret;
0x000a42c4: mov rcx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], rcx; lea rax, [rdi+0x16]; ret;
0x000a42c5: mov ecx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], rcx; lea rax, [rdi+0x16]; ret;
0x000a42c8: movdqu [rdi], xmm0; mov [rdi+0xf], rcx; lea rax, [rdi+0x16]; ret;
0x000a42c9: movq [rdi], mm0; mov [rdi+0xf], rcx; lea rax, [rdi+0x16]; ret;
0x000a42cc: mov [rdi+0xf], rcx; lea rax, [rdi+0x16]; ret;
0x000a42cd: mov [rdi+0xf], ecx; lea rax, [rdi+0x16]; ret;
0x000a42e0: movdqu xmm0, [rsi]; mov rcx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], rcx; lea rax, [rdi+0x17]; ret;
0x000a42e1: movq mm0, [rsi]; mov rcx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], rcx; lea rax, [rdi+0x17]; ret;
0x000a42e4: mov rcx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], rcx; lea rax, [rdi+0x17]; ret;
0x000a42e5: mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], rcx; lea rax, [rdi+0x17]; ret;
0x000a42e6: adc bl, r14b; movq [rdi], mm0; mov [rdi+0x10], rcx; lea rax, [rdi+0x17]; ret;
0x000a42e7: adc bl, dh; movq [rdi], mm0; mov [rdi+0x10], rcx; lea rax, [rdi+0x17]; ret;
0x000a42e8: movdqu [rdi], xmm0; mov [rdi+0x10], rcx; lea rax, [rdi+0x17]; ret;
0x000a42e9: movq [rdi], mm0; mov [rdi+0x10], rcx; lea rax, [rdi+0x17]; ret;
0x000a42ec: mov [rdi+0x10], rcx; lea rax, [rdi+0x17]; ret;
0x000a42ed: mov [rdi+0x10], ecx; lea rax, [rdi+0x17]; ret;
0x000a4304: mov rcx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], rcx; mov [rdi+0x18], dh; lea rax, [rdi+0x18]; ret;
0x000a4305: mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], rcx; mov [rdi+0x18], dh; lea rax, [rdi+0x18]; ret;
0x000a4306: adc bl, r14b; movq [rdi], mm0; mov [rdi+0x10], rcx; mov [rdi+0x18], dh; lea rax, [rdi+0x18]; ret;
0x000a4307: adc bl, dh; movq [rdi], mm0; mov [rdi+0x10], rcx; mov [rdi+0x18], dh; lea rax, [rdi+0x18]; ret;
0x000a4308: movdqu [rdi], xmm0; mov [rdi+0x10], rcx; mov [rdi+0x18], dh; lea rax, [rdi+0x18]; ret;
0x000a4309: movq [rdi], mm0; mov [rdi+0x10], rcx; mov [rdi+0x18], dh; lea rax, [rdi+0x18]; ret;
0x000a430c: mov [rdi+0x10], rcx; mov [rdi+0x18], dh; lea rax, [rdi+0x18]; ret;
0x000a430d: mov [rdi+0x10], ecx; mov [rdi+0x18], dh; lea rax, [rdi+0x18]; ret;
0x000a4310: mov [rdi+0x18], dh; lea rax, [rdi+0x18]; ret;
0x000a4328: mov cx, [rsi+0x18]; movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; lea rax, [rdi+0x19]; ret;
0x000a4329: mov ecx, [rsi+0x18]; movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; lea rax, [rdi+0x19]; ret;
0x000a432a: sbb bl, r14b; movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; lea rax, [rdi+0x19]; ret;
0x000a432b: sbb bl, dh; movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; lea rax, [rdi+0x19]; ret;
0x000a432c: movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; lea rax, [rdi+0x19]; ret;
0x000a432d: movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; lea rax, [rdi+0x19]; ret;
0x000a4330: mov [rdi+0x10], rdx; mov [rdi+0x18], cx; lea rax, [rdi+0x19]; ret;
0x000a4331: mov [rdi+0x10], edx; mov [rdi+0x18], cx; lea rax, [rdi+0x19]; ret;
0x000a4334: mov [rdi+0x18], cx; lea rax, [rdi+0x19]; ret;
0x000a4335: mov [rdi+0x18], ecx; lea rax, [rdi+0x19]; ret;
0x000a4348: mov ecx, [rsi+0x17]; movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; lea rax, [rdi+0x1a]; ret;
0x000a434b: movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; lea rax, [rdi+0x1a]; ret;
0x000a434c: movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; lea rax, [rdi+0x1a]; ret;
0x000a434f: mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; lea rax, [rdi+0x1a]; ret;
0x000a4350: mov [rdi+0x10], edx; mov [rdi+0x17], ecx; lea rax, [rdi+0x1a]; ret;
0x000a4353: mov [rdi+0x17], ecx; lea rax, [rdi+0x1a]; ret;
0x000a4368: mov ecx, [rsi+0x18]; movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; lea rax, [rdi+0x1b]; ret;
0x000a4369: sbb bl, r14b; movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; lea rax, [rdi+0x1b]; ret;
0x000a436a: sbb bl, dh; movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; lea rax, [rdi+0x1b]; ret;
0x000a436b: movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; lea rax, [rdi+0x1b]; ret;
0x000a436c: movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; lea rax, [rdi+0x1b]; ret;
0x000a436f: mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; lea rax, [rdi+0x1b]; ret;
0x000a4370: mov [rdi+0x10], edx; mov [rdi+0x18], ecx; lea rax, [rdi+0x1b]; ret;
0x000a4373: mov [rdi+0x18], ecx; lea rax, [rdi+0x1b]; ret;
0x000a4380: movdqu xmm0, [rsi]; movdqu xmm2, [rsi+0xd]; movdqu [rdi], xmm0; movdqu [rdi+0xd], xmm2; lea rax, [rdi+0x1c]; ret;
0x000a4381: movq mm0, [rsi]; movdqu xmm2, [rsi+0xd]; movdqu [rdi], xmm0; movdqu [rdi+0xd], xmm2; lea rax, [rdi+0x1c]; ret;
0x000a4384: movdqu xmm2, [rsi+0xd]; movdqu [rdi], xmm0; movdqu [rdi+0xd], xmm2; lea rax, [rdi+0x1c]; ret;
0x000a4385: movq mm2, [rsi+0xd]; movdqu [rdi], xmm0; movdqu [rdi+0xd], xmm2; lea rax, [rdi+0x1c]; ret;
0x000a4386: outsd dx, [rsi]; push rsi; or eax, 0x77f0ff3; movdqu [rdi+0xd], xmm2; lea rax, [rdi+0x1c]; ret;
0x000a4387: push rsi; or eax, 0x77f0ff3; movdqu [rdi+0xd], xmm2; lea rax, [rdi+0x1c]; ret;
0x000a4388: or eax, 0x77f0ff3; movdqu [rdi+0xd], xmm2; lea rax, [rdi+0x1c]; ret;
0x000a4389: movdqu [rdi], xmm0; movdqu [rdi+0xd], xmm2; lea rax, [rdi+0x1c]; ret;
0x000a438a: movq [rdi], mm0; movdqu [rdi+0xd], xmm2; lea rax, [rdi+0x1c]; ret;
0x000a438d: movdqu [rdi+0xd], xmm2; lea rax, [rdi+0x1c]; ret;
0x000a438e: movq [rdi+0xd], mm2; lea rax, [rdi+0x1c]; ret;
0x000a4390: push rdi; or eax, 0x1c478d48; ret;
0x000a4391: or eax, 0x1c478d48; ret;
0x000a43a0: movdqu xmm0, [rsi]; movdqu xmm2, [rsi+0xe]; movdqu [rdi], xmm0; movdqu [rdi+0xe], xmm2; lea rax, [rdi+0x1d]; ret;
0x000a43a1: movq mm0, [rsi]; movdqu xmm2, [rsi+0xe]; movdqu [rdi], xmm0; movdqu [rdi+0xe], xmm2; lea rax, [rdi+0x1d]; ret;
0x000a43a4: movdqu xmm2, [rsi+0xe]; movdqu [rdi], xmm0; movdqu [rdi+0xe], xmm2; lea rax, [rdi+0x1d]; ret;
0x000a43a5: movq mm2, [rsi+0xe]; movdqu [rdi], xmm0; movdqu [rdi+0xe], xmm2; lea rax, [rdi+0x1d]; ret;
0x000a43a9: movdqu [rdi], xmm0; movdqu [rdi+0xe], xmm2; lea rax, [rdi+0x1d]; ret;
0x000a43aa: movq [rdi], mm0; movdqu [rdi+0xe], xmm2; lea rax, [rdi+0x1d]; ret;
0x000a43ad: movdqu [rdi+0xe], xmm2; lea rax, [rdi+0x1d]; ret;
0x000a43ae: movq [rdi+0xe], mm2; lea rax, [rdi+0x1d]; ret;
0x000a43c0: movdqu xmm0, [rsi]; movdqu xmm2, [rsi+0xf]; movdqu [rdi], xmm0; movdqu [rdi+0xf], xmm2; lea rax, [rdi+0x1e]; ret;
0x000a43c1: movq mm0, [rsi]; movdqu xmm2, [rsi+0xf]; movdqu [rdi], xmm0; movdqu [rdi+0xf], xmm2; lea rax, [rdi+0x1e]; ret;
0x000a43c4: movdqu xmm2, [rsi+0xf]; movdqu [rdi], xmm0; movdqu [rdi+0xf], xmm2; lea rax, [rdi+0x1e]; ret;
0x000a43c5: movq mm2, [rsi+0xf]; movdqu [rdi], xmm0; movdqu [rdi+0xf], xmm2; lea rax, [rdi+0x1e]; ret;
0x000a43c9: movdqu [rdi], xmm0; movdqu [rdi+0xf], xmm2; lea rax, [rdi+0x1e]; ret;
0x000a43ca: movq [rdi], mm0; movdqu [rdi+0xf], xmm2; lea rax, [rdi+0x1e]; ret;
0x000a43cd: movdqu [rdi+0xf], xmm2; lea rax, [rdi+0x1e]; ret;
0x000a43ce: movq [rdi+0xf], mm2; lea rax, [rdi+0x1e]; ret;
0x000a43e0: movdqu xmm0, [rsi]; movdqu xmm2, [rsi+0x10]; movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; lea rax, [rdi+0x1f]; ret;
0x000a43e1: movq mm0, [rsi]; movdqu xmm2, [rsi+0x10]; movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; lea rax, [rdi+0x1f]; ret;
0x000a43e4: movdqu xmm2, [rsi+0x10]; movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; lea rax, [rdi+0x1f]; ret;
0x000a43e5: movq mm2, [rsi+0x10]; movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; lea rax, [rdi+0x1f]; ret;
0x000a43e7: push rsi; adc bl, dh; movq [rdi], mm0; movdqu [rdi+0x10], xmm2; lea rax, [rdi+0x1f]; ret;
0x000a43e8: adc bl, dh; movq [rdi], mm0; movdqu [rdi+0x10], xmm2; lea rax, [rdi+0x1f]; ret;
0x000a43e9: movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; lea rax, [rdi+0x1f]; ret;
0x000a43ea: movq [rdi], mm0; movdqu [rdi+0x10], xmm2; lea rax, [rdi+0x1f]; ret;
0x000a43ed: movdqu [rdi+0x10], xmm2; lea rax, [rdi+0x1f]; ret;
0x000a43ee: movq [rdi+0x10], mm2; lea rax, [rdi+0x1f]; ret;
0x000a4700: add rsi, rcx; bsf rdx, rdx; lea r11, [rip+0xe0a92]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a4701: add esi, ecx; bsf rdx, rdx; lea r11, [rip+0xe0a92]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a4709: sbb eax, 0xe0a92; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a470a: xchg edx, eax; or cl, [rsi]; add [rcx+0x63], cl; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx;
0x000a4728: sub r8, 0x10; bsf rdx, rdx; lea r11, [rip+0xe0a69]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a4729: sub eax, 0x10; bsf rdx, rdx; lea r11, [rip+0xe0a69]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a472b: adc [rax+0xf], cl; mov esp, 0x1d8d4cd2; imul ecx, [rdx], 0x6349000e; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx;
0x000a472c: bsf rdx, rdx; lea r11, [rip+0xe0a92]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a472d: bsf edx, edx; lea r11, [rip+0xe0a92]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a472e: mov esp, 0x1d8d4cd2; imul ecx, [rdx], 0x6349000e; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx;
0x000a472f: ror byte ptr [rbp+rcx*4+0x1d], cl; imul ecx, [rdx], 0x6349000e; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx;
0x000a4732: sbb eax, 0xe0a69; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a4733: imul ecx, [rdx], 0x6349000e; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx;
0x000a4757: add rdx, 0x10; sub rdx, rcx; lea r11, [rip+0xe0a3b]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a4758: add edx, 0x10; sub rdx, rcx; lea r11, [rip+0xe0a3b]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a475b: sub rdx, rcx; lea r11, [rip+0xe0a3b]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a475c: sub edx, ecx; lea r11, [rip+0xe0a3b]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a4760: sbb eax, 0xe0a3b; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a4762: or cl, [rsi]; add [rcx+0x63], cl; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx;
0x000a4838: add [rax], al; nop [rax+rax]; lea r11, [rip+0xe0959]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a483a: nop [rax+rax]; lea r11, [rip+0xe0959]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a483b: nop [rax+rax]; lea r11, [rip+0xe0959]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a483d: add [rax], r8b; lea r11, [rip+0xe0959]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a483e: add [rax], al; lea r11, [rip+0xe0959]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a4840: lea r11, [rip+0xe0a92]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a4841: lea ebx, [rip+0xe0a92]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a4842: sbb eax, 0xe0959; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a4843: pop rcx; or [rsi], ecx; add [rcx+0x63], cl; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx;
0x000a4844: or [rsi], ecx; add [rcx+0x63], cl; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx;
0x000a4872: int 0x4c; lea ebx, [rip+0xe09a6]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a4875: sbb eax, 0xe09a6; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a4876: cmpsb [rsi], [rdi]; or [rsi], ecx; add [rbx+0x63], cl; or al, 0x83; lea rcx, [r11+rcx]; jmp rcx;
0x000a48a2: popfq; lea r11, [rip+0xe0976]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a48a5: sbb eax, 0xe0976; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a48bf: or byte ptr [rbp+rcx*4+0x1d], 0x59; or [rsi], ecx; add [rbx+0x63], cl; or al, 0x83; lea rcx, [r11+rcx]; jmp rcx;
0x000a48c2: sbb eax, 0xe0959; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a48c3: pop rcx; or [rsi], ecx; add [rbx+0x63], cl; or al, 0x83; lea rcx, [r11+rcx]; jmp rcx;
0x000a48e0: sbb eax, 0xe093b; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a48fd: add rdi, rcx; add rsi, rcx; lea r11, [rip+0xe0916]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a48fe: add edi, ecx; add rsi, rcx; lea r11, [rip+0xe0916]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a4905: sbb eax, 0xe0916; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a4907: or [rsi], ecx; add [rbx+0x63], cl; or al, 0x83; lea rcx, [r11+rcx]; jmp rcx;
0x000a492e: sbb eax, 0xe08ed; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a492f: in eax, dx; or [rsi], cl; add [rbx+0x63], cl; or al, 0x83; lea rcx, [r11+rcx]; jmp rcx;
0x000a4949: add rsi, rcx; lea r11, [rip+0xe0916]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a494a: add esi, ecx; lea r11, [rip+0xe0916]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a494e: sbb eax, 0xe08cd; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a4977: sbb eax, 0xe08a4; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a4978: movsb [rdi], [rsi]; or [rsi], cl; add [rbx+0x63], cl; or al, 0x83; lea rcx, [r11+rcx]; jmp rcx;
0x000a4979: or [rsi], cl; add [rbx+0x63], cl; or al, 0x83; lea rcx, [r11+rcx]; jmp rcx;
0x000a4a22: add eax, 0x997850f; add [rax], al; ret;
0x000a4a49: test [rdx+9], esi; add [rax], al; ret;
0x000a4a84: cmp [rcx], cl; add [rax], al; ret;
0x000a4b39: or eax, 0x880850f; add [rax], al; ret;
0x000a4b6b: test [rax+8], edx; add [rax], al; ret;
0x000a4b95: cmovs ecx, [rbp-0x7af0f081]; and [rax], cl; add [rax], al; ret;
0x000a4b9c: and [rax], cl; add [rax], al; ret;
0x000a4be9: rol dword ptr [rdi], cl; add [rax], al; ret;
0x000a4c69: adc al, 0xf; test [rax+7], edx; add [rax], al; ret;
0x000a4c6b: test [rax+7], edx; add [rax], al; ret;
0x000a4c9c: adc eax, 0x71d850f; add [rax], al; ret;
0x000a4d2e: mov es, [rsi]; add [rax], al; ret;
0x000a4d5e: sbb [rdi], ecx; test [rbx+6], ebx; add [rax], al; ret;
0x000a4d60: test [rbx+6], ebx; add [rax], al; ret;
0x000a4df4: enter 5, 0; ret;
0x000a4e1d: sbb eax, 0x59c850f; add [rax], al; ret;
0x000a4e80: cmp al, 5; add [rax], al; ret;
0x000a4ead: and [rdi], cl; test [rax*1+0x66c30000], ecx; nop [rax+rax]; mov rax, rdi; ret;
0x000a4eaf: test [rax*1+0x66c30000], ecx; nop [rax+rax]; mov rax, rdi; ret;
0x000a4eb0: or al, 5; add [rax], al; ret;
0x000a4eb1: add eax, 0x66c30000; nop [rax+rax]; mov rax, rdi; ret;
0x000a4eb3: add bl, al; nop [rax+rax]; mov rax, rdi; ret;
0x000a4eb6: nop [rax+rax]; mov rax, rdi; ret;
0x000a4eb7: nop [rax+rax]; mov rax, rdi; ret;
0x000a4eb8: nop [rax+rax]; mov rax, rdi; ret;
0x000a4eba: test [rax], al; add [rax], al; add [rax], al; mov rax, rdi; ret;
0x000a4ebb: add [rax], al; add [rax], al; add [rax-0x77], cl; clc; ret;
0x000a4ebc: add [rax], al; add [rax], al; mov rax, rdi; ret;
0x000a4ebd: add [rax], al; add [rax-0x77], cl; clc; ret;
0x000a4ec5: nop [rax+rax]; nop; mov dl, [rsi]; mov [rdi], dl; lea rax, [rdi+1]; ret;
0x000a4ec6: nop [rax+rax]; nop; mov dl, [rsi]; mov [rdi], dl; lea rax, [rdi+1]; ret;
0x000a4ec7: nop [rax+rax]; nop; mov dl, [rsi]; mov [rdi], dl; lea rax, [rdi+1]; ret;
0x000a4eca: add [rax], al; add [rax], al; add [rax+0x1788168a], dl; lea rax, [rdi+1]; ret;
0x000a4ecc: add [rax], al; add [rax+0x1788168a], dl; lea rax, [rdi+1]; ret;
0x000a4ecd: add [rax], al; nop; mov dl, [rsi]; mov [rdi], dl; lea rax, [rdi+1]; ret;
0x000a4ece: add [rax+0x1788168a], dl; lea rax, [rdi+1]; ret;
0x000a4ecf: nop; mov dl, [rsi]; mov [rdi], dl; lea rax, [rdi+1]; ret;
0x000a4ed0: mov dl, [rsi]; mov [rdi], dl; lea rax, [rdi+1]; ret;
0x000a4ed2: mov [rdi], dl; lea rax, [rdi+1]; ret;
0x000a4ed6: add r11d, r8d; nop [rax]; mov dx, [rsi]; mov [rdi], dx; lea rax, [rdi+2]; ret;
0x000a4ed7: add ebx, eax; nop [rax]; mov dx, [rsi]; mov [rdi], dx; lea rax, [rdi+2]; ret;
0x000a4ed9: nop [rax]; mov dx, [rsi]; mov [rdi], dx; lea rax, [rdi+2]; ret;
0x000a4edb: add byte ptr [rax], 0; add [rax], al; mov dx, [rsi]; mov [rdi], dx; lea rax, [rdi+2]; ret;
0x000a4edc: add [rax], al; add [rax], al; mov dx, [rsi]; mov [rdi], dx; lea rax, [rdi+2]; ret;
0x000a4ede: add [rax], al; mov dx, [rsi]; mov [rdi], dx; lea rax, [rdi+2]; ret;
0x000a4ee0: mov dx, [rsi]; mov [rdi], dx; lea rax, [rdi+2]; ret;
0x000a4ee1: mov edx, [rsi]; mov [rdi], dx; lea rax, [rdi+2]; ret;
0x000a4ee3: mov [rdi], dx; lea rax, [rdi+2]; ret;
0x000a4ee4: mov [rdi], edx; lea rax, [rdi+2]; ret;
0x000a4ef0: mov cx, [rsi]; mov dl, [rsi+2]; mov [rdi], cx; mov [rdi+2], dl; lea rax, [rdi+3]; ret;
0x000a4ef1: mov ecx, [rsi]; mov dl, [rsi+2]; mov [rdi], cx; mov [rdi+2], dl; lea rax, [rdi+3]; ret;
0x000a4ef3: mov dl, [rsi+2]; mov [rdi], cx; mov [rdi+2], dl; lea rax, [rdi+3]; ret;
0x000a4ef6: mov [rdi], cx; mov [rdi+2], dl; lea rax, [rdi+3]; ret;
0x000a4ef7: mov [rdi], ecx; mov [rdi+2], dl; lea rax, [rdi+3]; ret;
0x000a4ef9: mov [rdi+2], dl; lea rax, [rdi+3]; ret;
0x000a4f02: nop [rax+rax]; nop [rax]; mov edx, [rsi]; mov [rdi], edx; lea rax, [rdi+4]; ret;
0x000a4f03: nop [rax+rax]; nop [rax]; mov edx, [rsi]; mov [rdi], edx; lea rax, [rdi+4]; ret;
0x000a4f04: nop [rax+rax]; nop [rax]; mov edx, [rsi]; mov [rdi], edx; lea rax, [rdi+4]; ret;
0x000a4f0a: add [rax], al; nop [rax]; mov edx, [rsi]; mov [rdi], edx; lea rax, [rdi+4]; ret;
0x000a4f0c: nop [rax]; mov edx, [rsi]; mov [rdi], edx; lea rax, [rdi+4]; ret;
0x000a4f0f: add [rbx+0x48178916], cl; lea eax, [rdi+4]; ret;
0x000a4f10: mov edx, [rsi]; mov [rdi], edx; lea rax, [rdi+4]; ret;
0x000a4f12: mov [rdi], edx; lea rax, [rdi+4]; ret;
0x000a4f1d: add [rax], al; add [rbx+0x4568a0e], cl; mov [rdi], ecx; mov [rdi+4], dl; lea rax, [rdi+5]; ret;
0x000a4f1f: add [rbx+0x4568a0e], cl; mov [rdi], ecx; mov [rdi+4], dl; lea rax, [rdi+5]; ret;
0x000a4f20: mov ecx, [rsi]; mov dl, [rsi+4]; mov [rdi], ecx; mov [rdi+4], dl; lea rax, [rdi+5]; ret;
0x000a4f22: mov dl, [rsi+4]; mov [rdi], ecx; mov [rdi+4], dl; lea rax, [rdi+5]; ret;
0x000a4f25: mov [rdi], ecx; mov [rdi+4], dl; lea rax, [rdi+5]; ret;
0x000a4f27: mov [rdi+4], dl; lea rax, [rdi+5]; ret;
0x000a4f28: push rdi; add al, 0x48; lea eax, [rdi+5]; ret;
0x000a4f29: add al, 0x48; lea eax, [rdi+5]; ret;
0x000a4f2d: add eax, 0xe8b90c3; mov dx, [rsi+4]; mov [rdi], ecx; mov [rdi+4], dx; lea rax, [rdi+6]; ret;
0x000a4f30: mov ecx, [rsi]; mov dx, [rsi+4]; mov [rdi], ecx; mov [rdi+4], dx; lea rax, [rdi+6]; ret;
0x000a4f32: mov dx, [rsi+4]; mov [rdi], ecx; mov [rdi+4], dx; lea rax, [rdi+6]; ret;
0x000a4f33: mov edx, [rsi+4]; mov [rdi], ecx; mov [rdi+4], dx; lea rax, [rdi+6]; ret;
0x000a4f36: mov [rdi], ecx; mov [rdi+4], dx; lea rax, [rdi+6]; ret;
0x000a4f38: mov [rdi+4], dx; lea rax, [rdi+6]; ret;
0x000a4f39: mov [rdi+4], edx; lea rax, [rdi+6]; ret;
0x000a4f3a: push rdi; add al, 0x48; lea eax, [rdi+6]; ret;
0x000a4f3b: add al, 0x48; lea eax, [rdi+6]; ret;
0x000a4f4f: add [rbx+0x3568b0e], cl; mov [rdi], ecx; mov [rdi+3], edx; lea rax, [rdi+7]; ret;
0x000a4f50: mov ecx, [rsi]; mov edx, [rsi+3]; mov [rdi], ecx; mov [rdi+3], edx; lea rax, [rdi+7]; ret;
0x000a4f52: mov edx, [rsi+3]; mov [rdi], ecx; mov [rdi+3], edx; lea rax, [rdi+7]; ret;
0x000a4f53: push rsi; add ecx, [rcx+0x357890f]; lea rax, [rdi+7]; ret;
0x000a4f54: add ecx, [rcx+0x357890f]; lea rax, [rdi+7]; ret;
0x000a4f55: mov [rdi], ecx; mov [rdi+3], edx; lea rax, [rdi+7]; ret;
0x000a4f57: mov [rdi+3], edx; lea rax, [rdi+7]; ret;
0x000a4f5f: nop; mov rdx, [rsi]; mov [rdi], rdx; lea rax, [rdi+8]; ret;
0x000a4f60: mov rdx, [rsi]; mov [rdi], rdx; lea rax, [rdi+8]; ret;
0x000a4f61: mov edx, [rsi]; mov [rdi], rdx; lea rax, [rdi+8]; ret;
0x000a4f63: mov [rdi], rdx; lea rax, [rdi+8]; ret;
0x000a4f64: mov [rdi], edx; lea rax, [rdi+8]; ret;
0x000a4f70: mov rcx, [rsi]; mov dl, [rsi+8]; mov [rdi], rcx; mov [rdi+8], dl; lea rax, [rdi+9]; ret;
0x000a4f71: mov ecx, [rsi]; mov dl, [rsi+8]; mov [rdi], rcx; mov [rdi+8], dl; lea rax, [rdi+9]; ret;
0x000a4f73: mov dl, [rsi+8]; mov [rdi], rcx; mov [rdi+8], dl; lea rax, [rdi+9]; ret;
0x000a4f76: mov [rdi], rcx; mov [rdi+8], dl; lea rax, [rdi+9]; ret;
0x000a4f77: mov [rdi], ecx; mov [rdi+8], dl; lea rax, [rdi+9]; ret;
0x000a4f79: mov [rdi+8], dl; lea rax, [rdi+9]; ret;
0x000a4f90: mov rcx, [rsi]; mov dx, [rsi+8]; mov [rdi], rcx; mov [rdi+8], dx; lea rax, [rdi+0xa]; ret;
0x000a4f91: mov ecx, [rsi]; mov dx, [rsi+8]; mov [rdi], rcx; mov [rdi+8], dx; lea rax, [rdi+0xa]; ret;
0x000a4f93: mov dx, [rsi+8]; mov [rdi], rcx; mov [rdi+8], dx; lea rax, [rdi+0xa]; ret;
0x000a4f94: mov edx, [rsi+8]; mov [rdi], rcx; mov [rdi+8], dx; lea rax, [rdi+0xa]; ret;
0x000a4f97: mov [rdi], rcx; mov [rdi+8], dx; lea rax, [rdi+0xa]; ret;
0x000a4f98: mov [rdi], ecx; mov [rdi+8], dx; lea rax, [rdi+0xa]; ret;
0x000a4f9a: mov [rdi+8], dx; lea rax, [rdi+0xa]; ret;
0x000a4f9b: mov [rdi+8], edx; lea rax, [rdi+0xa]; ret;
0x000a4fb0: mov rcx, [rsi]; mov edx, [rsi+7]; mov [rdi], rcx; mov [rdi+7], edx; lea rax, [rdi+0xb]; ret;
0x000a4fb1: mov ecx, [rsi]; mov edx, [rsi+7]; mov [rdi], rcx; mov [rdi+7], edx; lea rax, [rdi+0xb]; ret;
0x000a4fb3: mov edx, [rsi+7]; mov [rdi], rcx; mov [rdi+7], edx; lea rax, [rdi+0xb]; ret;
0x000a4fb6: mov [rdi], rcx; mov [rdi+7], edx; lea rax, [rdi+0xb]; ret;
0x000a4fb7: mov [rdi], ecx; mov [rdi+7], edx; lea rax, [rdi+0xb]; ret;
0x000a4fb9: mov [rdi+7], edx; lea rax, [rdi+0xb]; ret;
0x000a4fd0: mov rcx, [rsi]; mov edx, [rsi+8]; mov [rdi], rcx; mov [rdi+8], edx; lea rax, [rdi+0xc]; ret;
0x000a4fd1: mov ecx, [rsi]; mov edx, [rsi+8]; mov [rdi], rcx; mov [rdi+8], edx; lea rax, [rdi+0xc]; ret;
0x000a4fd3: mov edx, [rsi+8]; mov [rdi], rcx; mov [rdi+8], edx; lea rax, [rdi+0xc]; ret;
0x000a4fd6: mov [rdi], rcx; mov [rdi+8], edx; lea rax, [rdi+0xc]; ret;
0x000a4fd7: mov [rdi], ecx; mov [rdi+8], edx; lea rax, [rdi+0xc]; ret;
0x000a4fd9: mov [rdi+8], edx; lea rax, [rdi+0xc]; ret;
0x000a4ff0: mov rcx, [rsi]; mov rdx, [rsi+5]; mov [rdi], rcx; mov [rdi+5], rdx; lea rax, [rdi+0xd]; ret;
0x000a4ff1: mov ecx, [rsi]; mov rdx, [rsi+5]; mov [rdi], rcx; mov [rdi+5], rdx; lea rax, [rdi+0xd]; ret;
0x000a4ff3: mov rdx, [rsi+5]; mov [rdi], rcx; mov [rdi+5], rdx; lea rax, [rdi+0xd]; ret;
0x000a4ff4: mov edx, [rsi+5]; mov [rdi], rcx; mov [rdi+5], rdx; lea rax, [rdi+0xd]; ret;
0x000a4ff5: push rsi; add eax, 0x480f8948; mov [rdi+5], edx; lea rax, [rdi+0xd]; ret;
0x000a4ff6: add eax, 0x480f8948; mov [rdi+5], edx; lea rax, [rdi+0xd]; ret;
0x000a4ff7: mov [rdi], rcx; mov [rdi+5], rdx; lea rax, [rdi+0xd]; ret;
0x000a4ff8: mov [rdi], ecx; mov [rdi+5], rdx; lea rax, [rdi+0xd]; ret;
0x000a4ffa: mov [rdi+5], rdx; lea rax, [rdi+0xd]; ret;
0x000a4ffb: mov [rdi+5], edx; lea rax, [rdi+0xd]; ret;
0x000a4ffc: push rdi; add eax, 0xd478d48; ret;
0x000a4ffd: add eax, 0xd478d48; ret;
0x000a5010: mov rcx, [rsi]; mov rdx, [rsi+6]; mov [rdi], rcx; mov [rdi+6], rdx; lea rax, [rdi+0xe]; ret;
0x000a5011: mov ecx, [rsi]; mov rdx, [rsi+6]; mov [rdi], rcx; mov [rdi+6], rdx; lea rax, [rdi+0xe]; ret;
0x000a5013: mov rdx, [rsi+6]; mov [rdi], rcx; mov [rdi+6], rdx; lea rax, [rdi+0xe]; ret;
0x000a5014: mov edx, [rsi+6]; mov [rdi], rcx; mov [rdi+6], rdx; lea rax, [rdi+0xe]; ret;
0x000a5017: mov [rdi], rcx; mov [rdi+6], rdx; lea rax, [rdi+0xe]; ret;
0x000a5018: mov [rdi], ecx; mov [rdi+6], rdx; lea rax, [rdi+0xe]; ret;
0x000a501a: mov [rdi+6], rdx; lea rax, [rdi+0xe]; ret;
0x000a501b: mov [rdi+6], edx; lea rax, [rdi+0xe]; ret;
0x000a5030: mov rcx, [rsi]; mov rdx, [rsi+7]; mov [rdi], rcx; mov [rdi+7], rdx; lea rax, [rdi+0xf]; ret;
0x000a5031: mov ecx, [rsi]; mov rdx, [rsi+7]; mov [rdi], rcx; mov [rdi+7], rdx; lea rax, [rdi+0xf]; ret;
0x000a5033: mov rdx, [rsi+7]; mov [rdi], rcx; mov [rdi+7], rdx; lea rax, [rdi+0xf]; ret;
0x000a5034: mov edx, [rsi+7]; mov [rdi], rcx; mov [rdi+7], rdx; lea rax, [rdi+0xf]; ret;
0x000a5037: mov [rdi], rcx; mov [rdi+7], rdx; lea rax, [rdi+0xf]; ret;
0x000a5038: mov [rdi], ecx; mov [rdi+7], rdx; lea rax, [rdi+0xf]; ret;
0x000a503a: mov [rdi+7], rdx; lea rax, [rdi+0xf]; ret;
0x000a503b: mov [rdi+7], edx; lea rax, [rdi+0xf]; ret;
0x000a5044: nop [rax+rax]; xchg ax, ax; movdqu xmm0, [rsi]; movdqu [rdi], xmm0; lea rax, [rdi+0x10]; ret;
0x000a5045: nop [rax+rax]; xchg ax, ax; movdqu xmm0, [rsi]; movdqu [rdi], xmm0; lea rax, [rdi+0x10]; ret;
0x000a5046: nop [rax+rax]; xchg ax, ax; movdqu xmm0, [rsi]; movdqu [rdi], xmm0; lea rax, [rdi+0x10]; ret;
0x000a504b: add [rax], al; add [rsi-0x70], ah; movdqu xmm0, [rsi]; movdqu [rdi], xmm0; lea rax, [rdi+0x10]; ret;
0x000a504c: add [rax], al; xchg ax, ax; movdqu xmm0, [rsi]; movdqu [rdi], xmm0; lea rax, [rdi+0x10]; ret;
0x000a504d: add [rsi-0x70], ah; movdqu xmm0, [rsi]; movdqu [rdi], xmm0; lea rax, [rdi+0x10]; ret;
0x000a504e: xchg ax, ax; movdqu xmm0, [rsi]; movdqu [rdi], xmm0; lea rax, [rdi+0x10]; ret;
0x000a504f: nop; movdqu xmm0, [rsi]; movdqu [rdi], xmm0; lea rax, [rdi+0x10]; ret;
0x000a5050: movdqu xmm0, [rsi]; movdqu [rdi], xmm0; lea rax, [rdi+0x10]; ret;
0x000a5051: movq mm0, [rsi]; movdqu [rdi], xmm0; lea rax, [rdi+0x10]; ret;
0x000a5054: movdqu [rdi], xmm0; lea rax, [rdi+0x10]; ret;
0x000a5055: movq [rdi], mm0; lea rax, [rdi+0x10]; ret;
0x000a5058: lea rax, [rdi+0x10]; ret;
0x000a5059: lea eax, [rdi+0x10]; ret;
0x000a5060: movdqu xmm0, [rsi]; mov cl, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], cl; lea rax, [rdi+0x11]; ret;
0x000a5061: movq mm0, [rsi]; mov cl, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], cl; lea rax, [rdi+0x11]; ret;
0x000a5064: mov cl, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], cl; lea rax, [rdi+0x11]; ret;
0x000a5065: adc bl, r14b; movq [rdi], mm0; mov [rdi+0x10], cl; lea rax, [rdi+0x11]; ret;
0x000a5066: adc bl, dh; movq [rdi], mm0; mov [rdi+0x10], cl; lea rax, [rdi+0x11]; ret;
0x000a5067: movdqu [rdi], xmm0; mov [rdi+0x10], cl; lea rax, [rdi+0x11]; ret;
0x000a5068: movq [rdi], mm0; mov [rdi+0x10], cl; lea rax, [rdi+0x11]; ret;
0x000a506b: mov [rdi+0x10], cl; lea rax, [rdi+0x11]; ret;
0x000a506e: lea rax, [rdi+0x11]; ret;
0x000a506f: lea eax, [rdi+0x11]; ret;
0x000a5080: movdqu xmm0, [rsi]; mov cx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], cx; lea rax, [rdi+0x12]; ret;
0x000a5081: movq mm0, [rsi]; mov cx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], cx; lea rax, [rdi+0x12]; ret;
0x000a5084: mov cx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], cx; lea rax, [rdi+0x12]; ret;
0x000a5085: mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], cx; lea rax, [rdi+0x12]; ret;
0x000a5086: adc bl, r14b; movq [rdi], mm0; mov [rdi+0x10], cx; lea rax, [rdi+0x12]; ret;
0x000a5087: adc bl, dh; movq [rdi], mm0; mov [rdi+0x10], cx; lea rax, [rdi+0x12]; ret;
0x000a5088: movdqu [rdi], xmm0; mov [rdi+0x10], cx; lea rax, [rdi+0x12]; ret;
0x000a5089: movq [rdi], mm0; mov [rdi+0x10], cx; lea rax, [rdi+0x12]; ret;
0x000a508c: mov [rdi+0x10], cx; lea rax, [rdi+0x12]; ret;
0x000a508d: mov [rdi+0x10], ecx; lea rax, [rdi+0x12]; ret;
0x000a5090: lea rax, [rdi+0x12]; ret;
0x000a5091: lea eax, [rdi+0x12]; ret;
0x000a50a0: movdqu xmm0, [rsi]; mov ecx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], ecx; lea rax, [rdi+0x13]; ret;
0x000a50a1: movq mm0, [rsi]; mov ecx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], ecx; lea rax, [rdi+0x13]; ret;
0x000a50a4: mov ecx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], ecx; lea rax, [rdi+0x13]; ret;
0x000a50a7: movdqu [rdi], xmm0; mov [rdi+0xf], ecx; lea rax, [rdi+0x13]; ret;
0x000a50a8: movq [rdi], mm0; mov [rdi+0xf], ecx; lea rax, [rdi+0x13]; ret;
0x000a50ab: mov [rdi+0xf], ecx; lea rax, [rdi+0x13]; ret;
0x000a50ae: lea rax, [rdi+0x13]; ret;
0x000a50af: lea eax, [rdi+0x13]; ret;
0x000a50c0: movdqu xmm0, [rsi]; mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], ecx; lea rax, [rdi+0x14]; ret;
0x000a50c1: movq mm0, [rsi]; mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], ecx; lea rax, [rdi+0x14]; ret;
0x000a50c4: mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], ecx; lea rax, [rdi+0x14]; ret;
0x000a50c5: adc bl, r14b; movq [rdi], mm0; mov [rdi+0x10], ecx; lea rax, [rdi+0x14]; ret;
0x000a50c6: adc bl, dh; movq [rdi], mm0; mov [rdi+0x10], ecx; lea rax, [rdi+0x14]; ret;
0x000a50c7: movdqu [rdi], xmm0; mov [rdi+0x10], ecx; lea rax, [rdi+0x14]; ret;
0x000a50c8: movq [rdi], mm0; mov [rdi+0x10], ecx; lea rax, [rdi+0x14]; ret;
0x000a50cb: mov [rdi+0x10], ecx; lea rax, [rdi+0x14]; ret;
0x000a50ce: lea rax, [rdi+0x14]; ret;
0x000a50cf: lea eax, [rdi+0x14]; ret;
0x000a50e7: mov dl, [rsi+0x14]; movdqu [rdi], xmm0; mov [rdi+0x10], ecx; mov [rdi+0x14], dl; lea rax, [rdi+0x15]; ret;
0x000a50e9: adc al, 0xf3; movq [rdi], mm0; mov [rdi+0x10], ecx; mov [rdi+0x14], dl; lea rax, [rdi+0x15]; ret;
0x000a50ea: movdqu [rdi], xmm0; mov [rdi+0x10], ecx; mov [rdi+0x14], dl; lea rax, [rdi+0x15]; ret;
0x000a50eb: movq [rdi], mm0; mov [rdi+0x10], ecx; mov [rdi+0x14], dl; lea rax, [rdi+0x15]; ret;
0x000a50ee: mov [rdi+0x10], ecx; mov [rdi+0x14], dl; lea rax, [rdi+0x15]; ret;
0x000a50f1: mov [rdi+0x14], dl; lea rax, [rdi+0x15]; ret;
0x000a50f2: push rdi; adc al, 0x48; lea eax, [rdi+0x15]; ret;
0x000a50f3: adc al, 0x48; lea eax, [rdi+0x15]; ret;
0x000a50f4: lea rax, [rdi+0x15]; ret;
0x000a50f5: lea eax, [rdi+0x15]; ret;
0x000a5100: movdqu xmm0, [rsi]; mov rcx, [rsi+0xe]; movdqu [rdi], xmm0; mov [rdi+0xe], rcx; lea rax, [rdi+0x16]; ret;
0x000a5101: movq mm0, [rsi]; mov rcx, [rsi+0xe]; movdqu [rdi], xmm0; mov [rdi+0xe], rcx; lea rax, [rdi+0x16]; ret;
0x000a5104: mov rcx, [rsi+0xe]; movdqu [rdi], xmm0; mov [rdi+0xe], rcx; lea rax, [rdi+0x16]; ret;
0x000a5105: mov ecx, [rsi+0xe]; movdqu [rdi], xmm0; mov [rdi+0xe], rcx; lea rax, [rdi+0x16]; ret;
0x000a5108: movdqu [rdi], xmm0; mov [rdi+0xe], rcx; lea rax, [rdi+0x16]; ret;
0x000a5109: movq [rdi], mm0; mov [rdi+0xe], rcx; lea rax, [rdi+0x16]; ret;
0x000a510c: mov [rdi+0xe], rcx; lea rax, [rdi+0x16]; ret;
0x000a510d: mov [rdi+0xe], ecx; lea rax, [rdi+0x16]; ret;
0x000a5110: lea rax, [rdi+0x16]; ret;
0x000a5111: lea eax, [rdi+0x16]; ret;
0x000a5120: movdqu xmm0, [rsi]; mov rcx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], rcx; lea rax, [rdi+0x17]; ret;
0x000a5121: movq mm0, [rsi]; mov rcx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], rcx; lea rax, [rdi+0x17]; ret;
0x000a5124: mov rcx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], rcx; lea rax, [rdi+0x17]; ret;
0x000a5125: mov ecx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], rcx; lea rax, [rdi+0x17]; ret;
0x000a5128: movdqu [rdi], xmm0; mov [rdi+0xf], rcx; lea rax, [rdi+0x17]; ret;
0x000a5129: movq [rdi], mm0; mov [rdi+0xf], rcx; lea rax, [rdi+0x17]; ret;
0x000a512c: mov [rdi+0xf], rcx; lea rax, [rdi+0x17]; ret;
0x000a512d: mov [rdi+0xf], ecx; lea rax, [rdi+0x17]; ret;
0x000a5130: lea rax, [rdi+0x17]; ret;
0x000a5131: lea eax, [rdi+0x17]; ret;
0x000a5140: movdqu xmm0, [rsi]; mov rcx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], rcx; lea rax, [rdi+0x18]; ret;
0x000a5141: movq mm0, [rsi]; mov rcx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], rcx; lea rax, [rdi+0x18]; ret;
0x000a5144: mov rcx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], rcx; lea rax, [rdi+0x18]; ret;
0x000a5145: mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], rcx; lea rax, [rdi+0x18]; ret;
0x000a5146: adc bl, r14b; movq [rdi], mm0; mov [rdi+0x10], rcx; lea rax, [rdi+0x18]; ret;
0x000a5147: adc bl, dh; movq [rdi], mm0; mov [rdi+0x10], rcx; lea rax, [rdi+0x18]; ret;
0x000a5148: movdqu [rdi], xmm0; mov [rdi+0x10], rcx; lea rax, [rdi+0x18]; ret;
0x000a5149: movq [rdi], mm0; mov [rdi+0x10], rcx; lea rax, [rdi+0x18]; ret;
0x000a514c: mov [rdi+0x10], rcx; lea rax, [rdi+0x18]; ret;
0x000a514d: mov [rdi+0x10], ecx; lea rax, [rdi+0x18]; ret;
0x000a5150: lea rax, [rdi+0x18]; ret;
0x000a5151: lea eax, [rdi+0x18]; ret;
0x000a5168: mov cl, [rsi+0x18]; movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cl; lea rax, [rdi+0x19]; ret;
0x000a5169: sbb bl, r14b; movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cl; lea rax, [rdi+0x19]; ret;
0x000a516a: sbb bl, dh; movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cl; lea rax, [rdi+0x19]; ret;
0x000a516b: movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cl; lea rax, [rdi+0x19]; ret;
0x000a516c: movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cl; lea rax, [rdi+0x19]; ret;
0x000a516f: mov [rdi+0x10], rdx; mov [rdi+0x18], cl; lea rax, [rdi+0x19]; ret;
0x000a5170: mov [rdi+0x10], edx; mov [rdi+0x18], cl; lea rax, [rdi+0x19]; ret;
0x000a5173: mov [rdi+0x18], cl; lea rax, [rdi+0x19]; ret;
0x000a5176: lea rax, [rdi+0x19]; ret;
0x000a5177: lea eax, [rdi+0x19]; ret;
0x000a5188: mov cx, [rsi+0x18]; movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; lea rax, [rdi+0x1a]; ret;
0x000a5189: mov ecx, [rsi+0x18]; movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; lea rax, [rdi+0x1a]; ret;
0x000a518a: sbb bl, r14b; movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; lea rax, [rdi+0x1a]; ret;
0x000a518b: sbb bl, dh; movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; lea rax, [rdi+0x1a]; ret;
0x000a518c: movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; lea rax, [rdi+0x1a]; ret;
0x000a518d: movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; lea rax, [rdi+0x1a]; ret;
0x000a5190: mov [rdi+0x10], rdx; mov [rdi+0x18], cx; lea rax, [rdi+0x1a]; ret;
0x000a5191: mov [rdi+0x10], edx; mov [rdi+0x18], cx; lea rax, [rdi+0x1a]; ret;
0x000a5194: mov [rdi+0x18], cx; lea rax, [rdi+0x1a]; ret;
0x000a5195: mov [rdi+0x18], ecx; lea rax, [rdi+0x1a]; ret;
0x000a5198: lea rax, [rdi+0x1a]; ret;
0x000a5199: lea eax, [rdi+0x1a]; ret;
0x000a51a8: mov ecx, [rsi+0x17]; movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; lea rax, [rdi+0x1b]; ret;
0x000a51ab: movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; lea rax, [rdi+0x1b]; ret;
0x000a51ac: movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; lea rax, [rdi+0x1b]; ret;
0x000a51af: mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; lea rax, [rdi+0x1b]; ret;
0x000a51b0: mov [rdi+0x10], edx; mov [rdi+0x17], ecx; lea rax, [rdi+0x1b]; ret;
0x000a51b3: mov [rdi+0x17], ecx; lea rax, [rdi+0x1b]; ret;
0x000a51b6: lea rax, [rdi+0x1b]; ret;
0x000a51b7: lea eax, [rdi+0x1b]; ret;
0x000a51c8: mov ecx, [rsi+0x18]; movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; lea rax, [rdi+0x1c]; ret;
0x000a51c9: sbb bl, r14b; movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; lea rax, [rdi+0x1c]; ret;
0x000a51ca: sbb bl, dh; movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; lea rax, [rdi+0x1c]; ret;
0x000a51cb: movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; lea rax, [rdi+0x1c]; ret;
0x000a51cc: movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; lea rax, [rdi+0x1c]; ret;
0x000a51cf: mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; lea rax, [rdi+0x1c]; ret;
0x000a51d0: mov [rdi+0x10], edx; mov [rdi+0x18], ecx; lea rax, [rdi+0x1c]; ret;
0x000a51d3: mov [rdi+0x18], ecx; lea rax, [rdi+0x1c]; ret;
0x000a51d6: lea rax, [rdi+0x1c]; ret;
0x000a51d7: lea eax, [rdi+0x1c]; ret;
0x000a51e0: movdqu xmm0, [rsi]; movdqu xmm2, [rsi+0xd]; movdqu [rdi], xmm0; movdqu [rdi+0xd], xmm2; lea rax, [rdi+0x1d]; ret;
0x000a51e1: movq mm0, [rsi]; movdqu xmm2, [rsi+0xd]; movdqu [rdi], xmm0; movdqu [rdi+0xd], xmm2; lea rax, [rdi+0x1d]; ret;
0x000a51e4: movdqu xmm2, [rsi+0xd]; movdqu [rdi], xmm0; movdqu [rdi+0xd], xmm2; lea rax, [rdi+0x1d]; ret;
0x000a51e5: movq mm2, [rsi+0xd]; movdqu [rdi], xmm0; movdqu [rdi+0xd], xmm2; lea rax, [rdi+0x1d]; ret;
0x000a51e6: outsd dx, [rsi]; push rsi; or eax, 0x77f0ff3; movdqu [rdi+0xd], xmm2; lea rax, [rdi+0x1d]; ret;
0x000a51e7: push rsi; or eax, 0x77f0ff3; movdqu [rdi+0xd], xmm2; lea rax, [rdi+0x1d]; ret;
0x000a51e8: or eax, 0x77f0ff3; movdqu [rdi+0xd], xmm2; lea rax, [rdi+0x1d]; ret;
0x000a51e9: movdqu [rdi], xmm0; movdqu [rdi+0xd], xmm2; lea rax, [rdi+0x1d]; ret;
0x000a51ea: movq [rdi], mm0; movdqu [rdi+0xd], xmm2; lea rax, [rdi+0x1d]; ret;
0x000a51ed: movdqu [rdi+0xd], xmm2; lea rax, [rdi+0x1d]; ret;
0x000a51ee: movq [rdi+0xd], mm2; lea rax, [rdi+0x1d]; ret;
0x000a51f0: push rdi; or eax, 0x1d478d48; ret;
0x000a51f1: or eax, 0x1d478d48; ret;
0x000a51f2: lea rax, [rdi+0x1d]; ret;
0x000a51f3: lea eax, [rdi+0x1d]; ret;
0x000a5200: movdqu xmm0, [rsi]; movdqu xmm2, [rsi+0xe]; movdqu [rdi], xmm0; movdqu [rdi+0xe], xmm2; lea rax, [rdi+0x1e]; ret;
0x000a5201: movq mm0, [rsi]; movdqu xmm2, [rsi+0xe]; movdqu [rdi], xmm0; movdqu [rdi+0xe], xmm2; lea rax, [rdi+0x1e]; ret;
0x000a5204: movdqu xmm2, [rsi+0xe]; movdqu [rdi], xmm0; movdqu [rdi+0xe], xmm2; lea rax, [rdi+0x1e]; ret;
0x000a5205: movq mm2, [rsi+0xe]; movdqu [rdi], xmm0; movdqu [rdi+0xe], xmm2; lea rax, [rdi+0x1e]; ret;
0x000a5209: movdqu [rdi], xmm0; movdqu [rdi+0xe], xmm2; lea rax, [rdi+0x1e]; ret;
0x000a520a: movq [rdi], mm0; movdqu [rdi+0xe], xmm2; lea rax, [rdi+0x1e]; ret;
0x000a520d: movdqu [rdi+0xe], xmm2; lea rax, [rdi+0x1e]; ret;
0x000a520e: movq [rdi+0xe], mm2; lea rax, [rdi+0x1e]; ret;
0x000a5212: lea rax, [rdi+0x1e]; ret;
0x000a5213: lea eax, [rdi+0x1e]; ret;
0x000a5220: movdqu xmm0, [rsi]; movdqu xmm2, [rsi+0xf]; movdqu [rdi], xmm0; movdqu [rdi+0xf], xmm2; lea rax, [rdi+0x1f]; ret;
0x000a5221: movq mm0, [rsi]; movdqu xmm2, [rsi+0xf]; movdqu [rdi], xmm0; movdqu [rdi+0xf], xmm2; lea rax, [rdi+0x1f]; ret;
0x000a5224: movdqu xmm2, [rsi+0xf]; movdqu [rdi], xmm0; movdqu [rdi+0xf], xmm2; lea rax, [rdi+0x1f]; ret;
0x000a5225: movq mm2, [rsi+0xf]; movdqu [rdi], xmm0; movdqu [rdi+0xf], xmm2; lea rax, [rdi+0x1f]; ret;
0x000a5229: movdqu [rdi], xmm0; movdqu [rdi+0xf], xmm2; lea rax, [rdi+0x1f]; ret;
0x000a522a: movq [rdi], mm0; movdqu [rdi+0xf], xmm2; lea rax, [rdi+0x1f]; ret;
0x000a522d: movdqu [rdi+0xf], xmm2; lea rax, [rdi+0x1f]; ret;
0x000a522e: movq [rdi+0xf], mm2; lea rax, [rdi+0x1f]; ret;
0x000a5232: lea rax, [rdi+0x1f]; ret;
0x000a5233: lea eax, [rdi+0x1f]; ret;
0x000a5240: movdqu xmm0, [rsi]; movdqu xmm2, [rsi+0x10]; movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; lea rax, [rdi+0x20]; ret;
0x000a5241: movq mm0, [rsi]; movdqu xmm2, [rsi+0x10]; movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; lea rax, [rdi+0x20]; ret;
0x000a5244: movdqu xmm2, [rsi+0x10]; movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; lea rax, [rdi+0x20]; ret;
0x000a5245: movq mm2, [rsi+0x10]; movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; lea rax, [rdi+0x20]; ret;
0x000a5247: push rsi; adc bl, dh; movq [rdi], mm0; movdqu [rdi+0x10], xmm2; lea rax, [rdi+0x20]; ret;
0x000a5248: adc bl, dh; movq [rdi], mm0; movdqu [rdi+0x10], xmm2; lea rax, [rdi+0x20]; ret;
0x000a5249: movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; lea rax, [rdi+0x20]; ret;
0x000a524a: movq [rdi], mm0; movdqu [rdi+0x10], xmm2; lea rax, [rdi+0x20]; ret;
0x000a524d: movdqu [rdi+0x10], xmm2; lea rax, [rdi+0x20]; ret;
0x000a524e: movq [rdi+0x10], mm2; lea rax, [rdi+0x20]; ret;
0x000a5252: lea rax, [rdi+0x20]; ret;
0x000a5253: lea eax, [rdi+0x20]; ret;
0x000a5264: movdqu xmm2, [rsi+0x10]; mov cl, [rsi+0x20]; movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; mov [rdi+0x20], cl; ret;
0x000a5265: movq mm2, [rsi+0x10]; mov cl, [rsi+0x20]; movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; mov [rdi+0x20], cl; ret;
0x000a5269: mov cl, [rsi+0x20]; movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; mov [rdi+0x20], cl; ret;
0x000a526a: and bl, r14b; movq [rdi], mm0; movdqu [rdi+0x10], xmm2; mov [rdi+0x20], cl; ret;
0x000a526b: and bl, dh; movq [rdi], mm0; movdqu [rdi+0x10], xmm2; mov [rdi+0x20], cl; ret;
0x000a526c: movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; mov [rdi+0x20], cl; ret;
0x000a526d: movq [rdi], mm0; movdqu [rdi+0x10], xmm2; mov [rdi+0x20], cl; ret;
0x000a5270: movdqu [rdi+0x10], xmm2; mov [rdi+0x20], cl; ret;
0x000a5271: movq [rdi+0x10], mm2; mov [rdi+0x20], cl; ret;
0x000a5275: mov [rdi+0x20], cl; ret;
0x000a5276: and r11b, r8b; nop [rax]; ret;
0x000a5277: and bl, al; nop [rax]; ret;
0x000a527d: add [rax], al; add bl, al; nop [rax+rax]; nop [rax]; mov [rdi], dl; ret;
0x000a527f: add bl, al; nop [rax+rax]; nop [rax]; mov [rdi], dl; ret;
0x000a5282: nop [rax+rax]; nop [rax]; mov [rdi], dl; ret;
0x000a5283: nop [rax+rax]; nop [rax]; mov [rdi], dl; ret;
0x000a5284: nop [rax+rax]; nop [rax]; mov [rdi], dl; ret;
0x000a5286: test [rax], al; add [rax], al; add [rax], al; nop [rax]; mov [rdi], dl; ret;
0x000a5288: add [rax], al; add [rax], al; nop [rax]; mov [rdi], dl; ret;
0x000a528a: add [rax], al; nop [rax]; mov [rdi], dl; ret;
0x000a528c: nop [rax]; mov [rdi], dl; ret;
0x000a528f: add [rax+0x6666c317], cl; nop [rax+rax]; xchg ax, ax; mov [rdi], dx; ret;
0x000a5294: nop [rax+rax]; xchg ax, ax; mov [rdi], dx; ret;
0x000a5295: nop [rax+rax]; xchg ax, ax; mov [rdi], dx; ret;
0x000a5296: nop [rax+rax]; xchg ax, ax; mov [rdi], dx; ret;
0x000a5298: test [rax], al; add [rax], al; add [rax], al; xchg ax, ax; mov [rdi], dx; ret;
0x000a5299: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov [rdi], dx; ret;
0x000a529a: add [rax], al; add [rax], al; xchg ax, ax; mov [rdi], dx; ret;
0x000a529b: add [rax], al; add [rsi-0x70], ah; mov [rdi], dx; ret;
0x000a529c: add [rax], al; xchg ax, ax; mov [rdi], dx; ret;
0x000a529d: add [rsi-0x70], ah; mov [rdi], dx; ret;
0x000a529e: xchg ax, ax; mov [rdi], dx; ret;
0x000a529f: nop; mov [rdi], dx; ret;
0x000a52a5: nop [rax+rax]; nop; mov [rdi-1], edx; ret;
0x000a52a6: nop [rax+rax]; nop; mov [rdi-1], edx; ret;
0x000a52a7: nop [rax+rax]; nop; mov [rdi-1], edx; ret;
0x000a52a9: test [rax], al; add [rax], al; add [rax], al; nop; mov [rdi-1], edx; ret;
0x000a52ab: add [rax], al; add [rax], al; nop; mov [rdi-1], edx; ret;
0x000a52ac: add [rax], al; add [rax-0x3c00a877], dl; nop [rax+rax]; nop; mov [rdi], edx; ret;
0x000a52ad: add [rax], al; nop; mov [rdi-1], edx; ret;
0x000a52ae: add [rax-0x3c00a877], dl; nop [rax+rax]; nop; mov [rdi], edx; ret;
0x000a52af: nop; mov [rdi-1], edx; ret;
0x000a52b1: push rdi; inc ebx; nop [rax+rax]; nop; mov [rdi], edx; ret;
0x000a52b2: inc ebx; nop [rax+rax]; nop; mov [rdi], edx; ret;
0x000a52b5: nop [rax+rax]; nop; mov [rdi], edx; ret;
0x000a52b6: nop [rax+rax]; nop; mov [rdi], edx; ret;
0x000a52b7: nop [rax+rax]; nop; mov [rdi], edx; ret;
0x000a52b9: test [rax], al; add [rax], al; add [rax], al; nop; mov [rdi], edx; ret;
0x000a52bb: add [rax], al; add [rax], al; nop; mov [rdi], edx; ret;
0x000a52bd: add [rax], al; nop; mov [rdi], edx; ret;
0x000a52be: add [rax+0x66c31789], dl; nop [rax+rax]; xchg ax, ax; mov [rdi], edx; mov [rdi+4], dl; ret;
0x000a52bf: nop; mov [rdi], edx; ret;
0x000a52c4: nop [rax+rax]; xchg ax, ax; mov [rdi], edx; mov [rdi+4], dl; ret;
0x000a52c5: nop [rax+rax]; xchg ax, ax; mov [rdi], edx; mov [rdi+4], dl; ret;
0x000a52c6: nop [rax+rax]; xchg ax, ax; mov [rdi], edx; mov [rdi+4], dl; ret;
0x000a52c9: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov [rdi], edx; mov [rdi+4], dl; ret;
0x000a52ca: add [rax], al; add [rax], al; xchg ax, ax; mov [rdi], edx; mov [rdi+4], dl; ret;
0x000a52cb: add [rax], al; add [rsi-0x70], ah; mov [rdi], edx; mov [rdi+4], dl; ret;
0x000a52cc: add [rax], al; xchg ax, ax; mov [rdi], edx; mov [rdi+4], dl; ret;
0x000a52cd: add [rsi-0x70], ah; mov [rdi], edx; mov [rdi+4], dl; ret;
0x000a52ce: xchg ax, ax; mov [rdi], edx; mov [rdi+4], dl; ret;
0x000a52cf: nop; mov [rdi], edx; mov [rdi+4], dl; ret;
0x000a52d0: mov [rdi], edx; mov [rdi+4], dl; ret;
0x000a52d2: mov [rdi+4], dl; ret;
0x000a52d3: push rdi; add al, 0xc3; nop [rax+rax]; mov [rdi], edx; mov [rdi+4], dx; ret;
0x000a52d4: add al, 0xc3; nop [rax+rax]; mov [rdi], edx; mov [rdi+4], dx; ret;
0x000a52d6: nop [rax+rax]; mov [rdi], edx; mov [rdi+4], dx; ret;
0x000a52d7: nop [rax+rax]; mov [rdi], edx; mov [rdi+4], dx; ret;
0x000a52d8: nop [rax+rax]; mov [rdi], edx; mov [rdi+4], dx; ret;
0x000a52da: test [rax], al; add [rax], al; add [rax], al; mov [rdi], edx; mov [rdi+4], dx; ret;
0x000a52dc: add [rax], al; add [rax], al; mov [rdi], edx; mov [rdi+4], dx; ret;
0x000a52dd: add [rax], al; add [rcx+0x57896617], cl; add al, 0xc3; nop [rax+rax]; mov [rdi-1], rdx; ret;
0x000a52de: add [rax], al; mov [rdi], edx; mov [rdi+4], dx; ret;
0x000a52df: add [rcx+0x57896617], cl; add al, 0xc3; nop [rax+rax]; mov [rdi-1], rdx; ret;
0x000a52e0: mov [rdi], edx; mov [rdi+4], dx; ret;
0x000a52e4: push rdi; add al, 0xc3; nop [rax+rax]; mov [rdi-1], rdx; ret;
0x000a52e5: add al, 0xc3; nop [rax+rax]; mov [rdi-1], rdx; ret;
0x000a52e7: nop [rax+rax]; mov [rdi-1], rdx; ret;
0x000a52e8: nop [rax+rax]; mov [rdi-1], rdx; ret;
0x000a52ea: test [rax], al; add [rax], al; add [rax], al; mov [rdi-1], rdx; ret;
0x000a52ec: add [rax], al; add [rax], al; mov [rdi-1], rdx; ret;
0x000a52ee: add [rax], al; mov [rdi-1], rdx; ret;
0x000a52ef: add [rax-0x77], cl; push rdi; inc ebx; nop [rax+rax]; mov [rdi], rdx; ret;
0x000a52f0: mov [rdi-1], rdx; ret;
0x000a52f1: mov [rdi-1], edx; ret;
0x000a52f2: push rdi; inc ebx; nop [rax+rax]; mov [rdi], rdx; ret;
0x000a52f3: inc ebx; nop [rax+rax]; mov [rdi], rdx; ret;
0x000a52f6: nop [rax+rax]; mov [rdi], rdx; ret;
0x000a52f7: nop [rax+rax]; mov [rdi], rdx; ret;
0x000a52f8: nop [rax+rax]; mov [rdi], rdx; ret;
0x000a52fa: test [rax], al; add [rax], al; add [rax], al; mov [rdi], rdx; ret;
0x000a52fc: add [rax], al; add [rax], al; mov [rdi], rdx; ret;
0x000a52fe: add [rax], al; mov [rdi], rdx; ret;
0x000a5305: nop [rax+rax]; nop; mov [rdi], rdx; mov [rdi+8], dl; ret;
0x000a5306: nop [rax+rax]; nop; mov [rdi], rdx; mov [rdi+8], dl; ret;
0x000a5307: nop [rax+rax]; nop; mov [rdi], rdx; mov [rdi+8], dl; ret;
0x000a530b: add [rax], al; add [rax], al; nop; mov [rdi], rdx; mov [rdi+8], dl; ret;
0x000a530d: add [rax], al; nop; mov [rdi], rdx; mov [rdi+8], dl; ret;
0x000a530f: nop; mov [rdi], rdx; mov [rdi+8], dl; ret;
0x000a5310: mov [rdi], rdx; mov [rdi+8], dl; ret;
0x000a5311: mov [rdi], edx; mov [rdi+8], dl; ret;
0x000a5313: mov [rdi+8], dl; ret;
0x000a5314: push rdi; or bl, al; nop [rax+rax]; mov [rdi], rdx; mov [rdi+8], dx; ret;
0x000a5315: or bl, al; nop [rax+rax]; mov [rdi], rdx; mov [rdi+8], dx; ret;
0x000a5317: nop [rax+rax]; mov [rdi], rdx; mov [rdi+8], dx; ret;
0x000a5318: nop [rax+rax]; mov [rdi], rdx; mov [rdi+8], dx; ret;
0x000a531a: test [rax], al; add [rax], al; add [rax], al; mov [rdi], rdx; mov [rdi+8], dx; ret;
0x000a531c: add [rax], al; add [rax], al; mov [rdi], rdx; mov [rdi+8], dx; ret;
0x000a531e: add [rax], al; mov [rdi], rdx; mov [rdi+8], dx; ret;
0x000a5320: mov [rdi], rdx; mov [rdi+8], dx; ret;
0x000a5321: mov [rdi], edx; mov [rdi+8], dx; ret;
0x000a5325: push rdi; or bl, al; nop [rax+rax]; mov [rdi], rdx; mov [rdi+7], edx; ret;
0x000a5326: or bl, al; nop [rax+rax]; mov [rdi], rdx; mov [rdi+7], edx; ret;
0x000a5328: nop [rax+rax]; mov [rdi], rdx; mov [rdi+7], edx; ret;
0x000a532a: test [rax], al; add [rax], al; add [rax], al; mov [rdi], rdx; mov [rdi+7], edx; ret;
0x000a532c: add [rax], al; add [rax], al; mov [rdi], rdx; mov [rdi+7], edx; ret;
0x000a532e: add [rax], al; mov [rdi], rdx; mov [rdi+7], edx; ret;
0x000a5330: mov [rdi], rdx; mov [rdi+7], edx; ret;
0x000a5331: mov [rdi], edx; mov [rdi+7], edx; ret;
0x000a5337: nop [rax+rax]; mov [rdi], rdx; mov [rdi+8], edx; ret;
0x000a5338: nop [rax+rax]; mov [rdi], rdx; mov [rdi+8], edx; ret;
0x000a533a: test [rax], al; add [rax], al; add [rax], al; mov [rdi], rdx; mov [rdi+8], edx; ret;
0x000a533c: add [rax], al; add [rax], al; mov [rdi], rdx; mov [rdi+8], edx; ret;
0x000a533e: add [rax], al; mov [rdi], rdx; mov [rdi+8], edx; ret;
0x000a5340: mov [rdi], rdx; mov [rdi+8], edx; ret;
0x000a5341: mov [rdi], edx; mov [rdi+8], edx; ret;
0x000a5344: push rdi; or bl, al; nop [rax+rax]; mov [rdi], rdx; mov [rdi+5], rdx; ret;
0x000a5345: or bl, al; nop [rax+rax]; mov [rdi], rdx; mov [rdi+5], rdx; ret;
0x000a5347: nop [rax+rax]; mov [rdi], rdx; mov [rdi+5], rdx; ret;
0x000a5348: nop [rax+rax]; mov [rdi], rdx; mov [rdi+5], rdx; ret;
0x000a534a: test [rax], al; add [rax], al; add [rax], al; mov [rdi], rdx; mov [rdi+5], rdx; ret;
0x000a534c: add [rax], al; add [rax], al; mov [rdi], rdx; mov [rdi+5], rdx; ret;
0x000a534e: add [rax], al; mov [rdi], rdx; mov [rdi+5], rdx; ret;
0x000a5350: mov [rdi], rdx; mov [rdi+5], rdx; ret;
0x000a5351: mov [rdi], edx; mov [rdi+5], rdx; ret;
0x000a5358: nop [rax+rax]; mov [rdi], rdx; mov [rdi+6], rdx; ret;
0x000a535a: test [rax], al; add [rax], al; add [rax], al; mov [rdi], rdx; mov [rdi+6], rdx; ret;
0x000a535c: add [rax], al; add [rax], al; mov [rdi], rdx; mov [rdi+6], rdx; ret;
0x000a535e: add [rax], al; mov [rdi], rdx; mov [rdi+6], rdx; ret;
0x000a5360: mov [rdi], rdx; mov [rdi+6], rdx; ret;
0x000a5361: mov [rdi], edx; mov [rdi+6], rdx; ret;
0x000a5368: nop [rax+rax]; movdqu [rdi-1], xmm0; ret;
0x000a536a: test [rax], al; add [rax], al; add [rax], al; movdqu [rdi-1], xmm0; ret;
0x000a536b: add [rax], al; add [rax], al; add bl, dh; movq [rdi-1], mm0; ret;
0x000a536c: add [rax], al; add [rax], al; movdqu [rdi-1], xmm0; ret;
0x000a536d: add [rax], al; add bl, dh; movq [rdi-1], mm0; ret;
0x000a536e: add [rax], al; movdqu [rdi-1], xmm0; ret;
0x000a536f: add bl, dh; movq [rdi-1], mm0; ret;
0x000a5370: movdqu [rdi-1], xmm0; ret;
0x000a5371: movq [rdi-1], mm0; ret;
0x000a5373: inc r11d; nop [rax+rax]; movdqu [rdi], xmm0; ret;
0x000a5374: inc ebx; nop [rax+rax]; movdqu [rdi], xmm0; ret;
0x000a5376: nop [rax+rax]; movdqu [rdi], xmm0; ret;
0x000a5377: nop [rax+rax]; movdqu [rdi], xmm0; ret;
0x000a5378: nop [rax+rax]; movdqu [rdi], xmm0; ret;
0x000a537a: test [rax], al; add [rax], al; add [rax], al; movdqu [rdi], xmm0; ret;
0x000a537b: add [rax], al; add [rax], al; add bl, dh; movq [rdi], mm0; ret;
0x000a537c: add [rax], al; add [rax], al; movdqu [rdi], xmm0; ret;
0x000a537d: add [rax], al; add bl, dh; movq [rdi], mm0; ret;
0x000a537e: add [rax], al; movdqu [rdi], xmm0; ret;
0x000a537f: add bl, dh; movq [rdi], mm0; ret;
0x000a539b: add [rax], al; add [rax], al; add [rax+0xf], cl; mov esp, 0xc08349d2; cmovs eax, [rcx]; iretd;
0x000a539d: add [rax], al; add [rax+0xf], cl; mov esp, 0xc08349d2; cmovs eax, [rcx]; iretd;
0x000a539f: add [rax+0xf], cl; mov esp, 0xc08349d2; cmovs eax, [rcx]; iretd;
0x000a53a2: mov esp, 0xc08349d2; cmovs eax, [rcx]; iretd;
0x000a53a7: cmovs eax, [rcx]; iretd;
0x000a542c: sbb eax, 0xdfe7f; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a5441: movdqa [rdi], xmm0; add rdi, 0x10; lea r11, [rip+0xdfe7f]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a5442: movq [rdi], mm0; add rdi, 0x10; lea r11, [rip+0xdfe7f]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a5445: add rdi, 0x10; lea r11, [rip+0xdfe7f]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a5446: add edi, 0x10; lea r11, [rip+0xdfe7f]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a544b: sbb eax, 0xdfe60; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a545a: add r8, 0x10; lea r11, [rip+0xdfe4b]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a545b: add eax, 0x10; lea r11, [rip+0xdfe4b]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a545c: rcl byte ptr [rax], 0x4c; lea ebx, [rip+0xdfe4b]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a545e: lea r11, [rip+0xdfe7f]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a545f: lea ebx, [rip+0xdfe7f]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a5460: sbb eax, 0xdfe4b; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a54b2: push rbx; movq [rdi+0x30], mm7; lea rax, [rdi+0x40]; ret;
0x000a54b3: movdqu [rdi+0x30], xmm7; lea rax, [rdi+0x40]; ret;
0x000a54b4: movq [rdi+0x30], mm7; lea rax, [rdi+0x40]; ret;
0x000a54b7: xor [rax-0x73], cl; ret;
0x000a54b8: lea rax, [rdi+0x40]; ret;
0x000a54b9: lea eax, [rdi+0x40]; ret;
0x000a5549: lea r11, [rip+0xe09a6]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a554a: lea ebx, [rip+0xe09a6]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a554b: sbb eax, 0xdfcd0; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a555a: nop [rax+rax]; mov rax, rdi; ret;
0x000a555b: nop [rax+rax]; mov rax, rdi; ret;
0x000a555d: add [rax], r8b; mov rax, rdi; ret;
0x000a555e: add [rax], al; mov rax, rdi; ret;
0x000a5589: or [rax-0x7bf0ffc8], al; ret 0;
0x000a55b7: ret 0x5675;
0x000a55d1: ret 0x3c75;
0x000a55eb: ret 0x2275;
0x000a5602: ret 0xff48;
0x000a5605: ret 0x9874;
0x000a565d: ret 0x2074;
0x000a5676: ret 0xc9ff;
0x000a56df: xor [rax-0x77], cl; add cl, [rax-0x7d]; ret 0x4808;
0x000a56e2: add cl, [rax-0x7d]; ret 0x4808;
0x000a5703: add cl, [rax-0x7d]; ret 0xe908;
0x000a5706: ret 0xe908;
0x000a570f: add [rax+0x74c08402], cl; adc cl, [rax-1]; ret 0x2288;
0x000a5711: add al, [rax+rax*8-0xb7ed8c]; ret 0x2288;
0x000a5713: shl byte ptr [rdx+rdx+0x48], 0xff; ret 0x2288;
0x000a5715: adc cl, [rax-1]; ret 0x2288;
0x000a5718: ret 0x2288;
0x000a571a: and al, [rsp-0xb7f68c]; ret 0xc148;
0x000a571c: in al, 0x74; or [rax-1], ecx; ret 0xc148;
0x000a571e: or [rax-1], ecx; ret 0xc148;
0x000a5bfa: add rsi, 0x30; add rdi, 0x30; lea r11, [rip+0xdf6eb]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a5bfb: add esi, 0x30; add rdi, 0x30; lea r11, [rip+0xdf6eb]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a5bfe: add rdi, 0x30; lea r11, [rip+0xdf6eb]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a5bff: add edi, 0x30; lea r11, [rip+0xdf6eb]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a5c04: sbb eax, 0xdf6eb; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a5c06: test byte ptr [rip+0xc634900], 0x93; lea rcx, [r11+rcx]; jmp rcx;
0x000a5c2c: imul esp, [rsi+0xf], 0x74; ret 0xff3;
0x000a5c58: mov esp, 0x1d8d4cd2; xchg ebx, eax; test byte ptr [rip+0xc634900], 0x93; lea rcx, [r11+rcx]; jmp rcx;
0x000a5c59: ror byte ptr [rbp+rcx*4+0x1d], cl; xchg ebx, eax; test byte ptr [rip+0xc634900], 0x93; lea rcx, [r11+rcx]; jmp rcx;
0x000a5c5c: sbb eax, 0xdf693; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a5c5d: xchg ebx, eax; test byte ptr [rip+0xc634900], 0x93; lea rcx, [r11+rcx]; jmp rcx;
0x000a5c5e: test byte ptr [rip+0xc634900], 0x93; lea rcx, [r11+rcx]; jmp rcx;
0x000a5c70: add rsi, rcx; bsf rdx, rdx; lea r11, [rip+0xdf693]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a5c71: add esi, ecx; bsf rdx, rdx; lea r11, [rip+0xdf693]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a5c79: sbb eax, 0xdf676; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a5c7b: test byte ptr [rip+0xc634900], 0x93; lea rcx, [r11+rcx]; jmp rcx;
0x000a5c94: add rdi, 0x10; bsf rdx, rdx; lea r11, [rip+0xdf651]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a5c95: add edi, 0x10; bsf rdx, rdx; lea r11, [rip+0xdf651]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a5c97: adc [rax+0xf], cl; mov esp, 0x1d8d4cd2; push rcx; test byte ptr [rip+0xc634900], 0x93; lea rcx, [r11+rcx]; jmp rcx;
0x000a5c9a: mov esp, 0x1d8d4cd2; push rcx; test byte ptr [rip+0xc634900], 0x93; lea rcx, [r11+rcx]; jmp rcx;
0x000a5c9b: ror byte ptr [rbp+rcx*4+0x1d], cl; push rcx; test byte ptr [rip+0xc634900], 0x93; lea rcx, [r11+rcx]; jmp rcx;
0x000a5c9e: sbb eax, 0xdf651; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a5c9f: push rcx; test byte ptr [rip+0xc634900], 0x93; lea rcx, [r11+rcx]; jmp rcx;
0x000a5ca0: test byte ptr [rip+0xc634900], 0x93; lea rcx, [r11+rcx]; jmp rcx;
0x000a5cb7: add rdx, 0x10; sub rdx, rcx; lea r11, [rip+0xdf62f]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a5cb8: add edx, 0x10; sub rdx, rcx; lea r11, [rip+0xdf62f]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a5cbb: sub rdx, rcx; lea r11, [rip+0xdf62f]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a5cbc: sub edx, ecx; lea r11, [rip+0xdf62f]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a5cc0: sbb eax, 0xdf62f; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a5cc2: test byte ptr [rip+0xc634900], 0x93; lea rcx, [r11+rcx]; jmp rcx;
0x000a5ccf: nop; bsf rdx, rdx; lea r11, [rip+0xdf619]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a5cd0: bsf rdx, rdx; lea r11, [rip+0xdf693]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a5cd1: bsf edx, edx; lea r11, [rip+0xdf693]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a5cd2: mov esp, 0x1d8d4cd2; sbb esi, esi; or eax, 0xc634900; xchg ebx, eax; lea rcx, [r11+rcx]; jmp rcx;
0x000a5cd3: ror byte ptr [rbp+rcx*4+0x1d], cl; sbb esi, esi; or eax, 0xc634900; xchg ebx, eax; lea rcx, [r11+rcx]; jmp rcx;
0x000a5cd6: sbb eax, 0xdf619; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a5cd7: sbb esi, esi; or eax, 0xc634900; xchg ebx, eax; lea rcx, [r11+rcx]; jmp rcx;
0x000a5cd8: test byte ptr [rip+0xc634900], 0x93; lea rcx, [r11+rcx]; jmp rcx;
0x000a5cf8: add rsi, 0x10; add rdi, 0x10; lea r11, [rip+0xdf5ed]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a5cf9: add esi, 0x10; add rdi, 0x10; lea r11, [rip+0xdf5ed]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a5cfc: add rdi, 0x10; lea r11, [rip+0xdf5ed]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a5cfd: add edi, 0x10; lea r11, [rip+0xdf5ed]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a5d02: sbb eax, 0xdf5ed; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a5d03: in eax, dx; cmc; or eax, 0xc634900; xchg ebx, eax; lea rcx, [r11+rcx]; jmp rcx;
0x000a5d2d: add rsi, 0x20; add rdi, 0x20; lea r11, [rip+0xdf5b8]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a5d2e: add esi, 0x20; add rdi, 0x20; lea r11, [rip+0xdf5b8]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a5d31: add rdi, 0x20; lea r11, [rip+0xdf5b8]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a5d32: add edi, 0x20; lea r11, [rip+0xdf5b8]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a5d34: and [rbp+rcx*4+0x1d], cl; mov eax, 0x49000df5; movsxd ecx, [rbx+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a5d35: lea r11, [rip+0xdf6eb]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a5d36: lea ebx, [rip+0xdf6eb]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a5d37: sbb eax, 0xdf5b8; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a5d38: mov eax, 0x49000df5; movsxd ecx, [rbx+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a5d39: cmc; or eax, 0xc634900; xchg ebx, eax; lea rcx, [r11+rcx]; jmp rcx;
0x000a633b: adc [rsi+0xf], r12b; xlat [rbx]; ror byte ptr [rcx-0x7d], 1; ret 0x4d10;
0x000a633c: adc [rsi+0xf], ah; xlat [rbx]; ror byte ptr [rcx-0x7d], 1; ret 0x4d10;
0x000a633f: xlat [rbx]; ror byte ptr [rcx-0x7d], 1; ret 0x4d10;
0x000a6340: ror byte ptr [rcx-0x7d], 1; ret 0x4d10;
0x000a6343: ret 0x4d10;
0x000a635f: cmovs ebp, [rcx]; iretd;
0x000a656b: add rsi, 0x30; add rdi, 0x30; lea r11, [rip+0xdedfa]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a656c: add esi, 0x30; add rdi, 0x30; lea r11, [rip+0xdedfa]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a656f: add rdi, 0x30; lea r11, [rip+0xdedfa]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a6570: add edi, 0x30; lea r11, [rip+0xdedfa]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a6575: sbb eax, 0xdedfa; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a6576: cli; in eax, dx; or eax, 0xc634900; xchg ebx, eax; lea rcx, [r11+rcx]; jmp rcx;
0x000a65cf: dec dword ptr [rax+1]; iretd;
0x000a65dc: sbb eax, 0xded93; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a65dd: xchg ebx, eax; in eax, dx; or eax, 0xc634900; xchg ebx, eax; lea rcx, [r11+rcx]; jmp rcx;
0x000a65f0: add rsi, rcx; bsf rdx, rdx; lea r11, [rip+0xded93]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a65f1: add esi, ecx; bsf rdx, rdx; lea r11, [rip+0xded93]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a65f9: sbb eax, 0xded76; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a6614: add rdi, 0x10; bsf rdx, rdx; lea r11, [rip+0xded51]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a6615: add edi, 0x10; bsf rdx, rdx; lea r11, [rip+0xded51]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a661e: sbb eax, 0xded51; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a661f: push rcx; in eax, dx; or eax, 0xc634900; xchg ebx, eax; lea rcx, [r11+rcx]; jmp rcx;
0x000a6637: add rdx, 0x10; sub rdx, rcx; lea r11, [rip+0xded2f]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a6638: add edx, 0x10; sub rdx, rcx; lea r11, [rip+0xded2f]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a663b: sub rdx, rcx; lea r11, [rip+0xded2f]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a663c: sub edx, ecx; lea r11, [rip+0xded2f]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a6640: sbb eax, 0xded2f; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a664f: nop; bsf rdx, rdx; lea r11, [rip+0xded19]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a6650: bsf rdx, rdx; lea r11, [rip+0xded93]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a6651: bsf edx, edx; lea r11, [rip+0xded93]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a6652: mov esp, 0x1d8d4cd2; sbb ebp, ebp; or eax, 0xc634900; xchg ebx, eax; lea rcx, [r11+rcx]; jmp rcx;
0x000a6653: ror byte ptr [rbp+rcx*4+0x1d], cl; sbb ebp, ebp; or eax, 0xc634900; xchg ebx, eax; lea rcx, [r11+rcx]; jmp rcx;
0x000a6656: sbb eax, 0xded19; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a6657: sbb ebp, ebp; or eax, 0xc634900; xchg ebx, eax; lea rcx, [r11+rcx]; jmp rcx;
0x000a6658: in eax, dx; or eax, 0xc634900; xchg ebx, eax; lea rcx, [r11+rcx]; jmp rcx;
0x000a6678: add rsi, 0x10; add rdi, 0x10; lea r11, [rip+0xdeced]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a6679: add esi, 0x10; add rdi, 0x10; lea r11, [rip+0xdeced]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a667c: add rdi, 0x10; lea r11, [rip+0xdeced]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a667d: add edi, 0x10; lea r11, [rip+0xdeced]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a6682: sbb eax, 0xdeced; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a6683: in eax, dx; in al, dx; or eax, 0xc634900; xchg ebx, eax; lea rcx, [r11+rcx]; jmp rcx;
0x000a66ad: add rsi, 0x20; add rdi, 0x20; lea r11, [rip+0xdecb8]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a66ae: add esi, 0x20; add rdi, 0x20; lea r11, [rip+0xdecb8]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a66b1: add rdi, 0x20; lea r11, [rip+0xdecb8]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a66b2: add edi, 0x20; lea r11, [rip+0xdecb8]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a66b4: and [rbp+rcx*4+0x1d], cl; mov eax, 0x49000dec; movsxd ecx, [rbx+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a66b7: sbb eax, 0xdecb8; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a66b8: mov eax, 0x49000dec; movsxd ecx, [rbx+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a66c6: nop [rax+rax]; lea r11, [rip+0xdec9d]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a66c7: nop [rax+rax]; lea r11, [rip+0xdec9d]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a66c8: nop [rax+rax]; lea r11, [rip+0xdec9d]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a66cc: add [rax], al; add [rax], al; lea r11, [rip+0xdec9d]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a66ce: add [rax], al; lea r11, [rip+0xdec9d]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a66d0: lea r11, [rip+0xdedfa]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a66d1: lea ebx, [rip+0xdedfa]; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a66d2: sbb eax, 0xdec9d; movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a66d3: popfq; in al, dx; or eax, 0xc634900; xchg ebx, eax; lea rcx, [r11+rcx]; jmp rcx;
0x000a66d4: in al, dx; or eax, 0xc634900; xchg ebx, eax; lea rcx, [r11+rcx]; jmp rcx;
0x000a66d5: or eax, 0xc634900; xchg ebx, eax; lea rcx, [r11+rcx]; jmp rcx;
0x000a66d6: add [rcx+0x63], cl; or al, 0x93; lea rcx, [r11+rcx]; jmp rcx;
0x000a66d7: movsxd rcx, [r11+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a66d8: movsxd ecx, [rbx+rdx*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a66d9: or al, 0x93; lea rcx, [r11+rcx]; jmp rcx;
0x000a66da: xchg ebx, eax; lea rcx, [r11+rcx]; jmp rcx;
0x000a6700: ret 0xcd72;
0x000a6702: int 0x4c; lea ebx, [rip+0xdecea]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a6705: sbb eax, 0xdecea; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a6726: ror byte ptr [rax-0x7d], cl; ret 0x4810;
0x000a6729: ret 0x4810;
0x000a6730: ret 0x9d72;
0x000a6732: popfq; lea r11, [rip+0xdecba]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a6735: sbb eax, 0xdecba; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a6736: mov edx, 0x4b000dec; movsxd ecx, [rbx+rax*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a674d: ret 0x8072;
0x000a6752: sbb eax, 0xdec9d; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a6770: sbb eax, 0xdec7f; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a678c: adc [rax+1], cl; iretd;
0x000a678d: add rdi, rcx; add rsi, rcx; lea r11, [rip+0xdec5a]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a678e: add edi, ecx; add rsi, rcx; lea r11, [rip+0xdec5a]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a6795: sbb eax, 0xdec5a; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a67be: sbb eax, 0xdec31; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a67d9: add rsi, rcx; lea r11, [rip+0xdec5a]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a67da: add esi, ecx; lea r11, [rip+0xdec5a]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a67de: sbb eax, 0xdec11; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a6807: sbb eax, 0xdebe8; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a6816: nop [rax+rax]; mov [rdi], dh; ret;
0x000a6817: nop [rax+rax]; mov [rdi], dh; ret;
0x000a6818: nop [rax+rax]; mov [rdi], dh; ret;
0x000a681a: test [rax], al; add [rax], al; add [rax], al; mov [rdi], dh; ret;
0x000a681c: add [rax], al; add [rax], al; mov [rdi], dh; ret;
0x000a681e: add [rax], al; mov [rdi], dh; ret;
0x000a681f: add [rax+0x6666c337], cl; nop [rax+rax]; xchg ax, ax; mov dx, [rsi]; mov [rdi], dx; ret;
0x000a6820: mov [rdi], dh; ret;
0x000a6824: nop [rax+rax]; xchg ax, ax; mov dx, [rsi]; mov [rdi], dx; ret;
0x000a6825: nop [rax+rax]; xchg ax, ax; mov dx, [rsi]; mov [rdi], dx; ret;
0x000a6826: nop [rax+rax]; xchg ax, ax; mov dx, [rsi]; mov [rdi], dx; ret;
0x000a6829: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov dx, [rsi]; mov [rdi], dx; ret;
0x000a682a: add [rax], al; add [rax], al; xchg ax, ax; mov dx, [rsi]; mov [rdi], dx; ret;
0x000a682b: add [rax], al; add [rsi-0x70], ah; mov dx, [rsi]; mov [rdi], dx; ret;
0x000a682c: add [rax], al; xchg ax, ax; mov dx, [rsi]; mov [rdi], dx; ret;
0x000a682d: add [rsi-0x70], ah; mov dx, [rsi]; mov [rdi], dx; ret;
0x000a682e: xchg ax, ax; mov dx, [rsi]; mov [rdi], dx; ret;
0x000a682f: nop; mov dx, [rsi]; mov [rdi], dx; ret;
0x000a6830: mov dx, [rsi]; mov [rdi], dx; ret;
0x000a6831: mov edx, [rsi]; mov [rdi], dx; ret;
0x000a6837: nop [rax+rax]; mov cx, [rsi]; mov [rdi], cx; mov [rdi+2], dh; ret;
0x000a6838: nop [rax+rax]; mov cx, [rsi]; mov [rdi], cx; mov [rdi+2], dh; ret;
0x000a683c: add [rax], al; add [rax], al; mov cx, [rsi]; mov [rdi], cx; mov [rdi+2], dh; ret;
0x000a683e: add [rax], al; mov cx, [rsi]; mov [rdi], cx; mov [rdi+2], dh; ret;
0x000a6840: mov cx, [rsi]; mov [rdi], cx; mov [rdi+2], dh; ret;
0x000a6841: mov ecx, [rsi]; mov [rdi], cx; mov [rdi+2], dh; ret;
0x000a6843: mov [rdi], cx; mov [rdi+2], dh; ret;
0x000a6844: mov [rdi], ecx; mov [rdi+2], dh; ret;
0x000a6846: mov [rdi+2], dh; ret;
0x000a6848: add al, bl; nop [rax+rax]; mov edx, [rsi]; mov [rdi], edx; ret;
0x000a684a: nop [rax+rax]; mov edx, [rsi]; mov [rdi], edx; ret;
0x000a684b: nop [rax+rax]; mov edx, [rsi]; mov [rdi], edx; ret;
0x000a684d: add [rax], r8b; mov edx, [rsi]; mov [rdi], edx; ret;
0x000a684f: add [rbx-0x3ce876ea], cl; nop [rax+rax]; mov ecx, [rsi]; mov [rdi+4], dh; mov [rdi], ecx; ret;
0x000a6856: nop [rax+rax]; mov ecx, [rsi]; mov [rdi+4], dh; mov [rdi], ecx; ret;
0x000a6857: nop [rax+rax]; mov ecx, [rsi]; mov [rdi+4], dh; mov [rdi], ecx; ret;
0x000a6858: nop [rax+rax]; mov ecx, [rsi]; mov [rdi+4], dh; mov [rdi], ecx; ret;
0x000a685b: add [rax], al; add [rax], al; add [rbx+0x477880e], cl; mov [rdi], ecx; ret;
0x000a685c: add [rax], al; add [rax], al; mov ecx, [rsi]; mov [rdi+4], dh; mov [rdi], ecx; ret;
0x000a685d: add [rax], al; add [rbx+0x477880e], cl; mov [rdi], ecx; ret;
0x000a685e: add [rax], al; mov ecx, [rsi]; mov [rdi+4], dh; mov [rdi], ecx; ret;
0x000a685f: add [rbx+0x477880e], cl; mov [rdi], ecx; ret;
0x000a6860: mov ecx, [rsi]; mov [rdi+4], dh; mov [rdi], ecx; ret;
0x000a6862: mov [rdi+4], dh; mov [rdi], ecx; ret;
0x000a6868: nop [rax+rax]; mov ecx, [rsi]; mov dx, [rsi+4]; mov [rdi], ecx; mov [rdi+4], dx; ret;
0x000a686e: add [rax], al; mov ecx, [rsi]; mov dx, [rsi+4]; mov [rdi], ecx; mov [rdi+4], dx; ret;
0x000a6870: mov ecx, [rsi]; mov dx, [rsi+4]; mov [rdi], ecx; mov [rdi+4], dx; ret;
0x000a6872: mov dx, [rsi+4]; mov [rdi], ecx; mov [rdi+4], dx; ret;
0x000a6873: mov edx, [rsi+4]; mov [rdi], ecx; mov [rdi+4], dx; ret;
0x000a6876: mov [rdi], ecx; mov [rdi+4], dx; ret;
0x000a6878: mov [rdi+4], dx; ret;
0x000a6879: mov [rdi+4], edx; ret;
0x000a687d: nop [rax]; mov ecx, [rsi]; mov edx, [rsi+3]; mov [rdi], ecx; mov [rdi+3], edx; ret;
0x000a687f: add [rbx+0x3568b0e], cl; mov [rdi], ecx; mov [rdi+3], edx; ret;
0x000a6880: mov ecx, [rsi]; mov edx, [rsi+3]; mov [rdi], ecx; mov [rdi+3], edx; ret;
0x000a6882: mov edx, [rsi+3]; mov [rdi], ecx; mov [rdi+3], edx; ret;
0x000a6883: push rsi; add ecx, [rcx+0x357890f]; ret;
0x000a6884: add ecx, [rcx+0x357890f]; ret;
0x000a6885: mov [rdi], ecx; mov [rdi+3], edx; ret;
0x000a6887: mov [rdi+3], edx; ret;
0x000a6888: push rdi; add eax, ebx; nop [rax+rax]; mov rdx, [rsi]; mov [rdi], rdx; ret;
0x000a6889: add eax, ebx; nop [rax+rax]; mov rdx, [rsi]; mov [rdi], rdx; ret;
0x000a688b: nop [rax+rax]; mov rdx, [rsi]; mov [rdi], rdx; ret;
0x000a688d: add [rax], r8b; mov rdx, [rsi]; mov [rdi], rdx; ret;
0x000a6897: nop [rax+rax]; mov rcx, [rsi]; mov [rdi+8], dh; mov [rdi], rcx; ret;
0x000a6898: nop [rax+rax]; mov rcx, [rsi]; mov [rdi+8], dh; mov [rdi], rcx; ret;
0x000a689c: add [rax], al; add [rax], al; mov rcx, [rsi]; mov [rdi+8], dh; mov [rdi], rcx; ret;
0x000a689e: add [rax], al; mov rcx, [rsi]; mov [rdi+8], dh; mov [rdi], rcx; ret;
0x000a68a0: mov rcx, [rsi]; mov [rdi+8], dh; mov [rdi], rcx; ret;
0x000a68a1: mov ecx, [rsi]; mov [rdi+8], dh; mov [rdi], rcx; ret;
0x000a68a3: mov [rdi+8], dh; mov [rdi], rcx; ret;
0x000a68aa: nop [rax+rax]; mov rcx, [rsi]; mov dx, [rsi+8]; mov [rdi], rcx; mov [rdi+8], dx; ret;
0x000a68ab: nop [rax+rax]; mov rcx, [rsi]; mov dx, [rsi+8]; mov [rdi], rcx; mov [rdi+8], dx; ret;
0x000a68ad: add [rax], r8b; mov rcx, [rsi]; mov dx, [rsi+8]; mov [rdi], rcx; mov [rdi+8], dx; ret;
0x000a68ae: add [rax], al; mov rcx, [rsi]; mov dx, [rsi+8]; mov [rdi], rcx; mov [rdi+8], dx; ret;
0x000a68b0: mov rcx, [rsi]; mov dx, [rsi+8]; mov [rdi], rcx; mov [rdi+8], dx; ret;
0x000a68b1: mov ecx, [rsi]; mov dx, [rsi+8]; mov [rdi], rcx; mov [rdi+8], dx; ret;
0x000a68b3: mov dx, [rsi+8]; mov [rdi], rcx; mov [rdi+8], dx; ret;
0x000a68b4: mov edx, [rsi+8]; mov [rdi], rcx; mov [rdi+8], dx; ret;
0x000a68b7: mov [rdi], rcx; mov [rdi+8], dx; ret;
0x000a68b8: mov [rdi], ecx; mov [rdi+8], dx; ret;
0x000a68b9: pcmpgtd mm1, [rcx-0x6f3cf7a9]; mov rcx, [rsi]; mov edx, [rsi+7]; mov [rdi], rcx; mov [rdi+7], edx; ret;
0x000a68ba: mov [rdi+8], dx; ret;
0x000a68bf: nop; mov rcx, [rsi]; mov edx, [rsi+7]; mov [rdi], rcx; mov [rdi+7], edx; ret;
0x000a68c0: mov rcx, [rsi]; mov edx, [rsi+7]; mov [rdi], rcx; mov [rdi+7], edx; ret;
0x000a68c1: mov ecx, [rsi]; mov edx, [rsi+7]; mov [rdi], rcx; mov [rdi+7], edx; ret;
0x000a68c3: mov edx, [rsi+7]; mov [rdi], rcx; mov [rdi+7], edx; ret;
0x000a68c6: mov [rdi], rcx; mov [rdi+7], edx; ret;
0x000a68c7: mov [rdi], ecx; mov [rdi+7], edx; ret;
0x000a68cd: nop [rax]; mov rcx, [rsi]; mov edx, [rsi+8]; mov [rdi], rcx; mov [rdi+8], edx; ret;
0x000a68d0: mov rcx, [rsi]; mov edx, [rsi+8]; mov [rdi], rcx; mov [rdi+8], edx; ret;
0x000a68d1: mov ecx, [rsi]; mov edx, [rsi+8]; mov [rdi], rcx; mov [rdi+8], edx; ret;
0x000a68d3: mov edx, [rsi+8]; mov [rdi], rcx; mov [rdi+8], edx; ret;
0x000a68d6: mov [rdi], rcx; mov [rdi+8], edx; ret;
0x000a68d7: mov [rdi], ecx; mov [rdi+8], edx; ret;
0x000a68d9: mov [rdi+8], edx; ret;
0x000a68dd: nop [rax]; mov rcx, [rsi]; mov rdx, [rsi+5]; mov [rdi], rcx; mov [rdi+5], rdx; ret;
0x000a68e0: mov rcx, [rsi]; mov rdx, [rsi+5]; mov [rdi], rcx; mov [rdi+5], rdx; ret;
0x000a68e1: mov ecx, [rsi]; mov rdx, [rsi+5]; mov [rdi], rcx; mov [rdi+5], rdx; ret;
0x000a68e3: mov rdx, [rsi+5]; mov [rdi], rcx; mov [rdi+5], rdx; ret;
0x000a68e4: mov edx, [rsi+5]; mov [rdi], rcx; mov [rdi+5], rdx; ret;
0x000a68e5: push rsi; add eax, 0x480f8948; mov [rdi+5], edx; ret;
0x000a68e6: add eax, 0x480f8948; mov [rdi+5], edx; ret;
0x000a68e7: mov [rdi], rcx; mov [rdi+5], rdx; ret;
0x000a68e8: mov [rdi], ecx; mov [rdi+5], rdx; ret;
0x000a68e9: cmovs ecx, [rcx-0x6f3cfaa9]; mov rcx, [rsi]; mov rdx, [rsi+6]; mov [rdi], rcx; mov [rdi+6], rdx; ret;
0x000a68ea: mov [rdi+5], rdx; ret;
0x000a68eb: mov [rdi+5], edx; ret;
0x000a68ef: nop; mov rcx, [rsi]; mov rdx, [rsi+6]; mov [rdi], rcx; mov [rdi+6], rdx; ret;
0x000a68f0: mov rcx, [rsi]; mov rdx, [rsi+6]; mov [rdi], rcx; mov [rdi+6], rdx; ret;
0x000a68f1: mov ecx, [rsi]; mov rdx, [rsi+6]; mov [rdi], rcx; mov [rdi+6], rdx; ret;
0x000a68f3: mov rdx, [rsi+6]; mov [rdi], rcx; mov [rdi+6], rdx; ret;
0x000a68f4: mov edx, [rsi+6]; mov [rdi], rcx; mov [rdi+6], rdx; ret;
0x000a68f7: mov [rdi], rcx; mov [rdi+6], rdx; ret;
0x000a68f8: mov [rdi], ecx; mov [rdi+6], rdx; ret;
0x000a68f9: cmovs ecx, [rcx-0x6f3cf9a9]; mov rcx, [rsi]; mov rdx, [rsi+7]; mov [rdi], rcx; mov [rdi+7], rdx; ret;
0x000a68fa: mov [rdi+6], rdx; ret;
0x000a68fb: mov [rdi+6], edx; ret;
0x000a68ff: nop; mov rcx, [rsi]; mov rdx, [rsi+7]; mov [rdi], rcx; mov [rdi+7], rdx; ret;
0x000a6900: mov rcx, [rsi]; mov rdx, [rsi+7]; mov [rdi], rcx; mov [rdi+7], rdx; ret;
0x000a6901: mov ecx, [rsi]; mov rdx, [rsi+7]; mov [rdi], rcx; mov [rdi+7], rdx; ret;
0x000a6903: mov rdx, [rsi+7]; mov [rdi], rcx; mov [rdi+7], rdx; ret;
0x000a6904: mov edx, [rsi+7]; mov [rdi], rcx; mov [rdi+7], rdx; ret;
0x000a6907: mov [rdi], rcx; mov [rdi+7], rdx; ret;
0x000a6908: mov [rdi], ecx; mov [rdi+7], rdx; ret;
0x000a6909: cmovs ecx, [rcx-0x6f3cf8a9]; movdqu xmm0, [rsi]; movdqu [rdi], xmm0; ret;
0x000a690a: mov [rdi+7], rdx; ret;
0x000a690b: mov [rdi+7], edx; ret;
0x000a690f: nop; movdqu xmm0, [rsi]; movdqu [rdi], xmm0; ret;
0x000a6910: movdqu xmm0, [rsi]; movdqu [rdi], xmm0; ret;
0x000a6911: movq mm0, [rsi]; movdqu [rdi], xmm0; ret;
0x000a6919: nop [rax]; movdqu xmm0, [rsi]; movdqu [rdi], xmm0; mov [rdi+0x10], dh; ret;
0x000a691b: add byte ptr [rax], 0; add [rax], al; movdqu xmm0, [rsi]; movdqu [rdi], xmm0; mov [rdi+0x10], dh; ret;
0x000a691c: add [rax], al; add [rax], al; movdqu xmm0, [rsi]; movdqu [rdi], xmm0; mov [rdi+0x10], dh; ret;
0x000a691d: add [rax], al; add bl, dh; movq mm0, [rsi]; movdqu [rdi], xmm0; mov [rdi+0x10], dh; ret;
0x000a691e: add [rax], al; movdqu xmm0, [rsi]; movdqu [rdi], xmm0; mov [rdi+0x10], dh; ret;
0x000a691f: add bl, dh; movq mm0, [rsi]; movdqu [rdi], xmm0; mov [rdi+0x10], dh; ret;
0x000a6920: movdqu xmm0, [rsi]; movdqu [rdi], xmm0; mov [rdi+0x10], dh; ret;
0x000a6921: movq mm0, [rsi]; movdqu [rdi], xmm0; mov [rdi+0x10], dh; ret;
0x000a6924: movdqu [rdi], xmm0; mov [rdi+0x10], dh; ret;
0x000a6925: movq [rdi], mm0; mov [rdi+0x10], dh; ret;
0x000a6928: mov [rdi+0x10], dh; ret;
0x000a692c: nop [rax]; movdqu xmm0, [rsi]; mov cx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], cx; ret;
0x000a692e: add bl, sil; movq mm0, [rsi]; mov cx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], cx; ret;
0x000a692f: add bl, dh; movq mm0, [rsi]; mov cx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], cx; ret;
0x000a6930: movdqu xmm0, [rsi]; mov cx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], cx; ret;
0x000a6931: movq mm0, [rsi]; mov cx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], cx; ret;
0x000a6934: mov cx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], cx; ret;
0x000a6935: mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], cx; ret;
0x000a6936: adc bl, r14b; movq [rdi], mm0; mov [rdi+0x10], cx; ret;
0x000a6937: adc bl, dh; movq [rdi], mm0; mov [rdi+0x10], cx; ret;
0x000a6938: movdqu [rdi], xmm0; mov [rdi+0x10], cx; ret;
0x000a6939: movq [rdi], mm0; mov [rdi+0x10], cx; ret;
0x000a693c: mov [rdi+0x10], cx; ret;
0x000a694c: nop [rax]; movdqu xmm0, [rsi]; mov ecx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], ecx; ret;
0x000a694e: add bl, sil; movq mm0, [rsi]; mov ecx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], ecx; ret;
0x000a694f: add bl, dh; movq mm0, [rsi]; mov ecx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], ecx; ret;
0x000a6950: movdqu xmm0, [rsi]; mov ecx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], ecx; ret;
0x000a6951: movq mm0, [rsi]; mov ecx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], ecx; ret;
0x000a6954: mov ecx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], ecx; ret;
0x000a6957: movdqu [rdi], xmm0; mov [rdi+0xf], ecx; ret;
0x000a6958: movq [rdi], mm0; mov [rdi+0xf], ecx; ret;
0x000a695c: movnti [r8+0x66f0ff3], r10; mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], ecx; ret;
0x000a695d: movnti [rax+0x66f0ff3], edx; mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], ecx; ret;
0x000a695f: nop; movdqu xmm0, [rsi]; mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], ecx; ret;
0x000a6960: movdqu xmm0, [rsi]; mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], ecx; ret;
0x000a6961: movq mm0, [rsi]; mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], ecx; ret;
0x000a6964: mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], ecx; ret;
0x000a6965: adc bl, r14b; movq [rdi], mm0; mov [rdi+0x10], ecx; ret;
0x000a6966: adc bl, dh; movq [rdi], mm0; mov [rdi+0x10], ecx; ret;
0x000a6967: movdqu [rdi], xmm0; mov [rdi+0x10], ecx; ret;
0x000a6968: movq [rdi], mm0; mov [rdi+0x10], ecx; ret;
0x000a6970: movdqu xmm0, [rsi]; mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], ecx; mov [rdi+0x14], dh; ret;
0x000a6971: movq mm0, [rsi]; mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], ecx; mov [rdi+0x14], dh; ret;
0x000a6974: mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], ecx; mov [rdi+0x14], dh; ret;
0x000a6975: adc bl, r14b; movq [rdi], mm0; mov [rdi+0x10], ecx; mov [rdi+0x14], dh; ret;
0x000a6976: adc bl, dh; movq [rdi], mm0; mov [rdi+0x10], ecx; mov [rdi+0x14], dh; ret;
0x000a6977: movdqu [rdi], xmm0; mov [rdi+0x10], ecx; mov [rdi+0x14], dh; ret;
0x000a6978: movq [rdi], mm0; mov [rdi+0x10], ecx; mov [rdi+0x14], dh; ret;
0x000a697b: mov [rdi+0x10], ecx; mov [rdi+0x14], dh; ret;
0x000a697e: mov [rdi+0x14], dh; ret;
0x000a698d: nop [rax]; movdqu xmm0, [rsi]; mov rcx, [rsi+0xe]; movdqu [rdi], xmm0; mov [rdi+0xe], rcx; ret;
0x000a698f: add bl, dh; movq mm0, [rsi]; mov rcx, [rsi+0xe]; movdqu [rdi], xmm0; mov [rdi+0xe], rcx; ret;
0x000a6990: movdqu xmm0, [rsi]; mov rcx, [rsi+0xe]; movdqu [rdi], xmm0; mov [rdi+0xe], rcx; ret;
0x000a6991: movq mm0, [rsi]; mov rcx, [rsi+0xe]; movdqu [rdi], xmm0; mov [rdi+0xe], rcx; ret;
0x000a6994: mov rcx, [rsi+0xe]; movdqu [rdi], xmm0; mov [rdi+0xe], rcx; ret;
0x000a6995: mov ecx, [rsi+0xe]; movdqu [rdi], xmm0; mov [rdi+0xe], rcx; ret;
0x000a6998: movdqu [rdi], xmm0; mov [rdi+0xe], rcx; ret;
0x000a6999: movq [rdi], mm0; mov [rdi+0xe], rcx; ret;
0x000a699c: mov [rdi+0xe], rcx; ret;
0x000a699d: mov [rdi+0xe], ecx; ret;
0x000a69ac: nop [rax]; movdqu xmm0, [rsi]; mov rcx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], rcx; ret;
0x000a69ae: add bl, sil; movq mm0, [rsi]; mov rcx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], rcx; ret;
0x000a69af: add bl, dh; movq mm0, [rsi]; mov rcx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], rcx; ret;
0x000a69b0: movdqu xmm0, [rsi]; mov rcx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], rcx; ret;
0x000a69b1: movq mm0, [rsi]; mov rcx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], rcx; ret;
0x000a69b4: mov rcx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], rcx; ret;
0x000a69b5: mov ecx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], rcx; ret;
0x000a69b8: movdqu [rdi], xmm0; mov [rdi+0xf], rcx; ret;
0x000a69b9: movq [rdi], mm0; mov [rdi+0xf], rcx; ret;
0x000a69bc: mov [rdi+0xf], rcx; ret;
0x000a69bd: mov [rdi+0xf], ecx; ret;
0x000a69cc: nop [rax]; movdqu xmm0, [rsi]; mov rcx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], rcx; ret;
0x000a69ce: add bl, sil; movq mm0, [rsi]; mov rcx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], rcx; ret;
0x000a69cf: add bl, dh; movq mm0, [rsi]; mov rcx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], rcx; ret;
0x000a69d0: movdqu xmm0, [rsi]; mov rcx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], rcx; ret;
0x000a69d1: movq mm0, [rsi]; mov rcx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], rcx; ret;
0x000a69d4: mov rcx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], rcx; ret;
0x000a69d5: mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], rcx; ret;
0x000a69d6: adc bl, r14b; movq [rdi], mm0; mov [rdi+0x10], rcx; ret;
0x000a69d7: adc bl, dh; movq [rdi], mm0; mov [rdi+0x10], rcx; ret;
0x000a69d8: movdqu [rdi], xmm0; mov [rdi+0x10], rcx; ret;
0x000a69d9: movq [rdi], mm0; mov [rdi+0x10], rcx; ret;
0x000a69dc: mov [rdi+0x10], rcx; ret;
0x000a69dd: mov [rdi+0x10], ecx; ret;
0x000a69f0: movdqu xmm0, [rsi]; mov rcx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], rcx; mov [rdi+0x18], dh; ret;
0x000a69f1: movq mm0, [rsi]; mov rcx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], rcx; mov [rdi+0x18], dh; ret;
0x000a69f4: mov rcx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], rcx; mov [rdi+0x18], dh; ret;
0x000a69f5: mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], rcx; mov [rdi+0x18], dh; ret;
0x000a69f6: adc bl, r14b; movq [rdi], mm0; mov [rdi+0x10], rcx; mov [rdi+0x18], dh; ret;
0x000a69f7: adc bl, dh; movq [rdi], mm0; mov [rdi+0x10], rcx; mov [rdi+0x18], dh; ret;
0x000a69f8: movdqu [rdi], xmm0; mov [rdi+0x10], rcx; mov [rdi+0x18], dh; ret;
0x000a69f9: movq [rdi], mm0; mov [rdi+0x10], rcx; mov [rdi+0x18], dh; ret;
0x000a69fc: mov [rdi+0x10], rcx; mov [rdi+0x18], dh; ret;
0x000a69fd: mov [rdi+0x10], ecx; mov [rdi+0x18], dh; ret;
0x000a6a00: mov [rdi+0x18], dh; ret;
0x000a6a14: mov rdx, [rsi+0x10]; mov cx, [rsi+0x18]; movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; ret;
0x000a6a15: mov edx, [rsi+0x10]; mov cx, [rsi+0x18]; movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; ret;
0x000a6a17: adc [rsi-0x75], ah; sbb bl, r14b; movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; ret;
0x000a6a18: mov cx, [rsi+0x18]; movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; ret;
0x000a6a19: mov ecx, [rsi+0x18]; movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; ret;
0x000a6a1a: sbb bl, r14b; movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; ret;
0x000a6a1b: sbb bl, dh; movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; ret;
0x000a6a1c: movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; ret;
0x000a6a1d: movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; ret;
0x000a6a20: mov [rdi+0x10], rdx; mov [rdi+0x18], cx; ret;
0x000a6a21: mov [rdi+0x10], edx; mov [rdi+0x18], cx; ret;
0x000a6a24: mov [rdi+0x18], cx; ret;
0x000a6a34: mov rdx, [rsi+0x10]; mov ecx, [rsi+0x17]; movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; ret;
0x000a6a35: mov edx, [rsi+0x10]; mov ecx, [rsi+0x17]; movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; ret;
0x000a6a38: mov ecx, [rsi+0x17]; movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; ret;
0x000a6a3b: movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; ret;
0x000a6a3c: movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; ret;
0x000a6a3f: mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; ret;
0x000a6a40: mov [rdi+0x10], edx; mov [rdi+0x17], ecx; ret;
0x000a6a43: mov [rdi+0x17], ecx; ret;
0x000a6a54: mov rdx, [rsi+0x10]; mov ecx, [rsi+0x18]; movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; ret;
0x000a6a55: mov edx, [rsi+0x10]; mov ecx, [rsi+0x18]; movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; ret;
0x000a6a58: mov ecx, [rsi+0x18]; movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; ret;
0x000a6a59: sbb bl, r14b; movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; ret;
0x000a6a5a: sbb bl, dh; movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; ret;
0x000a6a5b: movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; ret;
0x000a6a5c: movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; ret;
0x000a6a5f: mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; ret;
0x000a6a60: mov [rdi+0x10], edx; mov [rdi+0x18], ecx; ret;
0x000a6a63: mov [rdi+0x18], ecx; ret;
0x000a6a67: nop [rax+rax]; movdqu xmm0, [rsi]; movdqu xmm2, [rsi+0xd]; movdqu [rdi], xmm0; movdqu [rdi+0xd], xmm2; ret;
0x000a6a68: nop [rax+rax]; movdqu xmm0, [rsi]; movdqu xmm2, [rsi+0xd]; movdqu [rdi], xmm0; movdqu [rdi+0xd], xmm2; ret;
0x000a6a6e: add [rax], al; movdqu xmm0, [rsi]; movdqu xmm2, [rsi+0xd]; movdqu [rdi], xmm0; movdqu [rdi+0xd], xmm2; ret;
0x000a6a6f: add bl, dh; movq mm0, [rsi]; movdqu xmm2, [rsi+0xd]; movdqu [rdi], xmm0; movdqu [rdi+0xd], xmm2; ret;
0x000a6a70: movdqu xmm0, [rsi]; movdqu xmm2, [rsi+0xd]; movdqu [rdi], xmm0; movdqu [rdi+0xd], xmm2; ret;
0x000a6a71: movq mm0, [rsi]; movdqu xmm2, [rsi+0xd]; movdqu [rdi], xmm0; movdqu [rdi+0xd], xmm2; ret;
0x000a6a74: movdqu xmm2, [rsi+0xd]; movdqu [rdi], xmm0; movdqu [rdi+0xd], xmm2; ret;
0x000a6a75: movq mm2, [rsi+0xd]; movdqu [rdi], xmm0; movdqu [rdi+0xd], xmm2; ret;
0x000a6a76: outsd dx, [rsi]; push rsi; or eax, 0x77f0ff3; movdqu [rdi+0xd], xmm2; ret;
0x000a6a77: push rsi; or eax, 0x77f0ff3; movdqu [rdi+0xd], xmm2; ret;
0x000a6a78: or eax, 0x77f0ff3; movdqu [rdi+0xd], xmm2; ret;
0x000a6a79: movdqu [rdi], xmm0; movdqu [rdi+0xd], xmm2; ret;
0x000a6a7a: movq [rdi], mm0; movdqu [rdi+0xd], xmm2; ret;
0x000a6a7d: movdqu [rdi+0xd], xmm2; ret;
0x000a6a7e: movq [rdi+0xd], mm2; ret;
0x000a6a8d: add [rsi-0x70], ah; movdqu xmm0, [rsi]; movdqu xmm2, [rsi+0xe]; movdqu [rdi], xmm0; movdqu [rdi+0xe], xmm2; ret;
0x000a6a8e: xchg ax, ax; movdqu xmm0, [rsi]; movdqu xmm2, [rsi+0xe]; movdqu [rdi], xmm0; movdqu [rdi+0xe], xmm2; ret;
0x000a6a8f: nop; movdqu xmm0, [rsi]; movdqu xmm2, [rsi+0xe]; movdqu [rdi], xmm0; movdqu [rdi+0xe], xmm2; ret;
0x000a6a90: movdqu xmm0, [rsi]; movdqu xmm2, [rsi+0xe]; movdqu [rdi], xmm0; movdqu [rdi+0xe], xmm2; ret;
0x000a6a91: movq mm0, [rsi]; movdqu xmm2, [rsi+0xe]; movdqu [rdi], xmm0; movdqu [rdi+0xe], xmm2; ret;
0x000a6a94: movdqu xmm2, [rsi+0xe]; movdqu [rdi], xmm0; movdqu [rdi+0xe], xmm2; ret;
0x000a6a95: movq mm2, [rsi+0xe]; movdqu [rdi], xmm0; movdqu [rdi+0xe], xmm2; ret;
0x000a6a99: movdqu [rdi], xmm0; movdqu [rdi+0xe], xmm2; ret;
0x000a6a9a: movq [rdi], mm0; movdqu [rdi+0xe], xmm2; ret;
0x000a6a9d: movdqu [rdi+0xe], xmm2; ret;
0x000a6a9e: movq [rdi+0xe], mm2; ret;
0x000a6aad: add [rsi-0x70], ah; movdqu xmm0, [rsi]; movdqu xmm2, [rsi+0xf]; movdqu [rdi], xmm0; movdqu [rdi+0xf], xmm2; ret;
0x000a6aae: xchg ax, ax; movdqu xmm0, [rsi]; movdqu xmm2, [rsi+0xf]; movdqu [rdi], xmm0; movdqu [rdi+0xf], xmm2; ret;
0x000a6aaf: nop; movdqu xmm0, [rsi]; movdqu xmm2, [rsi+0xf]; movdqu [rdi], xmm0; movdqu [rdi+0xf], xmm2; ret;
0x000a6ab0: movdqu xmm0, [rsi]; movdqu xmm2, [rsi+0xf]; movdqu [rdi], xmm0; movdqu [rdi+0xf], xmm2; ret;
0x000a6ab1: movq mm0, [rsi]; movdqu xmm2, [rsi+0xf]; movdqu [rdi], xmm0; movdqu [rdi+0xf], xmm2; ret;
0x000a6ab4: movdqu xmm2, [rsi+0xf]; movdqu [rdi], xmm0; movdqu [rdi+0xf], xmm2; ret;
0x000a6ab5: movq mm2, [rsi+0xf]; movdqu [rdi], xmm0; movdqu [rdi+0xf], xmm2; ret;
0x000a6ab9: movdqu [rdi], xmm0; movdqu [rdi+0xf], xmm2; ret;
0x000a6aba: movq [rdi], mm0; movdqu [rdi+0xf], xmm2; ret;
0x000a6abd: movdqu [rdi+0xf], xmm2; ret;
0x000a6abe: movq [rdi+0xf], mm2; ret;
0x000a6acd: add [rsi-0x70], ah; movdqu xmm0, [rsi]; movdqu xmm2, [rsi+0x10]; movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; ret;
0x000a6ace: xchg ax, ax; movdqu xmm0, [rsi]; movdqu xmm2, [rsi+0x10]; movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; ret;
0x000a6acf: nop; movdqu xmm0, [rsi]; movdqu xmm2, [rsi+0x10]; movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; ret;
0x000a6ad0: movdqu xmm0, [rsi]; movdqu xmm2, [rsi+0x10]; movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; ret;
0x000a6ad1: movq mm0, [rsi]; movdqu xmm2, [rsi+0x10]; movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; ret;
0x000a6ad4: movdqu xmm2, [rsi+0x10]; movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; ret;
0x000a6ad5: movq mm2, [rsi+0x10]; movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; ret;
0x000a6ad6: outsd dx, [rsi]; push rsi; adc bl, dh; movq [rdi], mm0; movdqu [rdi+0x10], xmm2; ret;
0x000a6ad7: push rsi; adc bl, dh; movq [rdi], mm0; movdqu [rdi+0x10], xmm2; ret;
0x000a6ad8: adc bl, dh; movq [rdi], mm0; movdqu [rdi+0x10], xmm2; ret;
0x000a6ad9: movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; ret;
0x000a6ada: movq [rdi], mm0; movdqu [rdi+0x10], xmm2; ret;
0x000a6add: movdqu [rdi+0x10], xmm2; ret;
0x000a6ade: movq [rdi+0x10], mm2; ret;
0x000a6ae1: adc bl, al; nop [rax+rax]; xchg ax, ax; xor ch, ch; mov [rdi], ch; ret;
0x000a6ae4: nop [rax+rax]; xchg ax, ax; xor ch, ch; mov [rdi], ch; ret;
0x000a6ae5: nop [rax+rax]; xchg ax, ax; xor ch, ch; mov [rdi], ch; ret;
0x000a6ae6: nop [rax+rax]; xchg ax, ax; xor ch, ch; mov [rdi], ch; ret;
0x000a6ae9: add [rax], al; add [rax], al; add [rsi-0x70], ah; xor ch, ch; mov [rdi], ch; ret;
0x000a6aea: add [rax], al; add [rax], al; xchg ax, ax; xor ch, ch; mov [rdi], ch; ret;
0x000a6aeb: add [rax], al; add [rsi-0x70], ah; xor ch, ch; mov [rdi], ch; ret;
0x000a6aec: add [rax], al; xchg ax, ax; xor ch, ch; mov [rdi], ch; ret;
0x000a6aed: add [rsi-0x70], ah; xor ch, ch; mov [rdi], ch; ret;
0x000a6aee: xchg ax, ax; xor ch, ch; mov [rdi], ch; ret;
0x000a6aef: nop; xor ch, ch; mov [rdi], ch; ret;
0x000a6af0: xor ch, ch; mov [rdi], ch; ret;
0x000a6af1: in eax, dx; mov [rdi], ch; ret;
0x000a6af2: mov [rdi], ch; ret;
0x000a6af6: nop [rax+rax]; mov dl, [rsi]; mov [rdi], dl; xor ch, ch; mov [rdi+1], ch; ret;
0x000a6af7: nop [rax+rax]; mov dl, [rsi]; mov [rdi], dl; xor ch, ch; mov [rdi+1], ch; ret;
0x000a6af8: nop [rax+rax]; mov dl, [rsi]; mov [rdi], dl; xor ch, ch; mov [rdi+1], ch; ret;
0x000a6afb: add [rax], al; add [rax], al; add [rdx+0x30178816], cl; in eax, dx; mov [rdi+1], ch; ret;
0x000a6afd: add [rax], al; add [rdx+0x30178816], cl; in eax, dx; mov [rdi+1], ch; ret;
0x000a6afe: add [rax], al; mov dl, [rsi]; mov [rdi], dl; xor ch, ch; mov [rdi+1], ch; ret;
0x000a6aff: add [rdx+0x30178816], cl; in eax, dx; mov [rdi+1], ch; ret;
0x000a6b00: mov dl, [rsi]; mov [rdi], dl; xor ch, ch; mov [rdi+1], ch; ret;
0x000a6b02: mov [rdi], dl; xor ch, ch; mov [rdi+1], ch; ret;
0x000a6b04: xor ch, ch; mov [rdi+1], ch; ret;
0x000a6b05: in eax, dx; mov [rdi+1], ch; ret;
0x000a6b06: mov [rdi+1], ch; ret;
0x000a6b0a: nop [rax+rax]; mov dx, [rsi]; mov [rdi], dx; xor ch, ch; mov [rdi+2], ch; ret;
0x000a6b0b: nop [rax+rax]; mov dx, [rsi]; mov [rdi], dx; xor ch, ch; mov [rdi+2], ch; ret;
0x000a6b0d: add [rax], r8b; mov dx, [rsi]; mov [rdi], dx; xor ch, ch; mov [rdi+2], ch; ret;
0x000a6b0e: add [rax], al; mov dx, [rsi]; mov [rdi], dx; xor ch, ch; mov [rdi+2], ch; ret;
0x000a6b10: mov dx, [rsi]; mov [rdi], dx; xor ch, ch; mov [rdi+2], ch; ret;
0x000a6b11: mov edx, [rsi]; mov [rdi], dx; xor ch, ch; mov [rdi+2], ch; ret;
0x000a6b13: mov [rdi], dx; xor ch, ch; mov [rdi+2], ch; ret;
0x000a6b14: mov [rdi], edx; xor ch, ch; mov [rdi+2], ch; ret;
0x000a6b16: xor ch, ch; mov [rdi+2], ch; ret;
0x000a6b17: in eax, dx; mov [rdi+2], ch; ret;
0x000a6b18: mov [rdi+2], ch; ret;
0x000a6b23: mov dl, [rsi+2]; mov [rdi], cx; mov [rdi+2], dl; xor ch, ch; mov [rdi+3], ch; ret;
0x000a6b26: mov [rdi], cx; mov [rdi+2], dl; xor ch, ch; mov [rdi+3], ch; ret;
0x000a6b27: mov [rdi], ecx; mov [rdi+2], dl; xor ch, ch; mov [rdi+3], ch; ret;
0x000a6b29: mov [rdi+2], dl; xor ch, ch; mov [rdi+3], ch; ret;
0x000a6b2a: push rdi; add dh, [rax]; in eax, dx; mov [rdi+3], ch; ret;
0x000a6b2b: add dh, [rax]; in eax, dx; mov [rdi+3], ch; ret;
0x000a6b2c: xor ch, ch; mov [rdi+3], ch; ret;
0x000a6b2d: in eax, dx; mov [rdi+3], ch; ret;
0x000a6b2e: mov [rdi+3], ch; ret;
0x000a6b3d: nop [rax]; mov edx, [rsi]; mov [rdi], edx; xor ch, ch; mov [rdi+4], ch; ret;
0x000a6b3f: add [rbx+0x30178916], cl; in eax, dx; mov [rdi+4], ch; ret;
0x000a6b40: mov edx, [rsi]; mov [rdi], edx; xor ch, ch; mov [rdi+4], ch; ret;
0x000a6b42: mov [rdi], edx; xor ch, ch; mov [rdi+4], ch; ret;
0x000a6b44: xor ch, ch; mov [rdi+4], ch; ret;
0x000a6b45: in eax, dx; mov [rdi+4], ch; ret;
0x000a6b46: mov [rdi+4], ch; ret;
0x000a6b4f: add [rbx+0x4568a0e], cl; mov [rdi], ecx; mov [rdi+4], dl; xor ch, ch; mov [rdi+5], ch; ret;
0x000a6b52: mov dl, [rsi+4]; mov [rdi], ecx; mov [rdi+4], dl; xor ch, ch; mov [rdi+5], ch; ret;
0x000a6b55: mov [rdi], ecx; mov [rdi+4], dl; xor ch, ch; mov [rdi+5], ch; ret;
0x000a6b57: mov [rdi+4], dl; xor ch, ch; mov [rdi+5], ch; ret;
0x000a6b58: push rdi; add al, 0x30; in eax, dx; mov [rdi+5], ch; ret;
0x000a6b59: add al, 0x30; in eax, dx; mov [rdi+5], ch; ret;
0x000a6b5a: xor ch, ch; mov [rdi+5], ch; ret;
0x000a6b5b: in eax, dx; mov [rdi+5], ch; ret;
0x000a6b5c: mov [rdi+5], ch; ret;
0x000a6b62: mov dx, [rsi+4]; mov [rdi], ecx; mov [rdi+4], dx; xor ch, ch; mov [rdi+6], ch; ret;
0x000a6b63: mov edx, [rsi+4]; mov [rdi], ecx; mov [rdi+4], dx; xor ch, ch; mov [rdi+6], ch; ret;
0x000a6b64: push rsi; add al, 0x89; pcmpgtd mm1, [rcx-0x12cffba9]; mov [rdi+6], ch; ret;
0x000a6b65: add al, 0x89; pcmpgtd mm1, [rcx-0x12cffba9]; mov [rdi+6], ch; ret;
0x000a6b66: mov [rdi], ecx; mov [rdi+4], dx; xor ch, ch; mov [rdi+6], ch; ret;
0x000a6b67: pcmpgtd mm1, [rcx-0x12cffba9]; mov [rdi+6], ch; ret;
0x000a6b68: mov [rdi+4], dx; xor ch, ch; mov [rdi+6], ch; ret;
0x000a6b69: mov [rdi+4], edx; xor ch, ch; mov [rdi+6], ch; ret;
0x000a6b6a: push rdi; add al, 0x30; in eax, dx; mov [rdi+6], ch; ret;
0x000a6b6b: add al, 0x30; in eax, dx; mov [rdi+6], ch; ret;
0x000a6b6c: xor ch, ch; mov [rdi+6], ch; ret;
0x000a6b6d: in eax, dx; mov [rdi+6], ch; ret;
0x000a6b6e: mov [rdi+6], ch; ret;
0x000a6b7f: add [rbx+0x3568b0e], cl; mov [rdi], ecx; mov [rdi+3], edx; xor ch, ch; mov [rdi+7], ch; ret;
0x000a6b82: mov edx, [rsi+3]; mov [rdi], ecx; mov [rdi+3], edx; xor ch, ch; mov [rdi+7], ch; ret;
0x000a6b83: push rsi; add ecx, [rcx+0x357890f]; xor ch, ch; mov [rdi+7], ch; ret;
0x000a6b84: add ecx, [rcx+0x357890f]; xor ch, ch; mov [rdi+7], ch; ret;
0x000a6b85: mov [rdi], ecx; mov [rdi+3], edx; xor ch, ch; mov [rdi+7], ch; ret;
0x000a6b87: mov [rdi+3], edx; xor ch, ch; mov [rdi+7], ch; ret;
0x000a6b88: push rdi; add esi, [rax]; in eax, dx; mov [rdi+7], ch; ret;
0x000a6b89: add esi, [rax]; in eax, dx; mov [rdi+7], ch; ret;
0x000a6b8a: xor ch, ch; mov [rdi+7], ch; ret;
0x000a6b8b: in eax, dx; mov [rdi+7], ch; ret;
0x000a6b8c: mov [rdi+7], ch; ret;
0x000a6b90: mov rdx, [rsi]; mov [rdi], rdx; xor ch, ch; mov [rdi+8], ch; ret;
0x000a6b91: mov edx, [rsi]; mov [rdi], rdx; xor ch, ch; mov [rdi+8], ch; ret;
0x000a6b93: mov [rdi], rdx; xor ch, ch; mov [rdi+8], ch; ret;
0x000a6b94: mov [rdi], edx; xor ch, ch; mov [rdi+8], ch; ret;
0x000a6b96: xor ch, ch; mov [rdi+8], ch; ret;
0x000a6b97: in eax, dx; mov [rdi+8], ch; ret;
0x000a6b98: mov [rdi+8], ch; ret;
0x000a6ba3: mov dl, [rsi+8]; mov [rdi], rcx; mov [rdi+8], dl; xor ch, ch; mov [rdi+9], ch; ret;
0x000a6ba6: mov [rdi], rcx; mov [rdi+8], dl; xor ch, ch; mov [rdi+9], ch; ret;
0x000a6ba7: mov [rdi], ecx; mov [rdi+8], dl; xor ch, ch; mov [rdi+9], ch; ret;
0x000a6ba9: mov [rdi+8], dl; xor ch, ch; mov [rdi+9], ch; ret;
0x000a6baa: push rdi; or [rax], dh; in eax, dx; mov [rdi+9], ch; ret;
0x000a6bab: or [rax], dh; in eax, dx; mov [rdi+9], ch; ret;
0x000a6bac: xor ch, ch; mov [rdi+9], ch; ret;
0x000a6bad: in eax, dx; mov [rdi+9], ch; ret;
0x000a6bae: mov [rdi+9], ch; ret;
0x000a6bc3: mov dx, [rsi+8]; mov [rdi], rcx; mov [rdi+8], dx; xor ch, ch; mov [rdi+0xa], ch; ret;
0x000a6bc4: mov edx, [rsi+8]; mov [rdi], rcx; mov [rdi+8], dx; xor ch, ch; mov [rdi+0xa], ch; ret;
0x000a6bc5: push rsi; or [rax-0x77], cl; pcmpgtd mm1, [rcx-0x12cff7a9]; mov [rdi+0xa], ch; ret;
0x000a6bc6: or [rax-0x77], cl; pcmpgtd mm1, [rcx-0x12cff7a9]; mov [rdi+0xa], ch; ret;
0x000a6bc7: mov [rdi], rcx; mov [rdi+8], dx; xor ch, ch; mov [rdi+0xa], ch; ret;
0x000a6bc8: mov [rdi], ecx; mov [rdi+8], dx; xor ch, ch; mov [rdi+0xa], ch; ret;
0x000a6bc9: pcmpgtd mm1, [rcx-0x12cff7a9]; mov [rdi+0xa], ch; ret;
0x000a6bca: mov [rdi+8], dx; xor ch, ch; mov [rdi+0xa], ch; ret;
0x000a6bcb: mov [rdi+8], edx; xor ch, ch; mov [rdi+0xa], ch; ret;
0x000a6bcc: push rdi; or [rax], dh; in eax, dx; mov [rdi+0xa], ch; ret;
0x000a6bcd: or [rax], dh; in eax, dx; mov [rdi+0xa], ch; ret;
0x000a6bce: xor ch, ch; mov [rdi+0xa], ch; ret;
0x000a6bcf: in eax, dx; mov [rdi+0xa], ch; ret;
0x000a6bd0: mov [rdi+0xa], ch; ret;
0x000a6be3: mov edx, [rsi+7]; mov [rdi], rcx; mov [rdi+7], edx; xor ch, ch; mov [rdi+0xb], ch; ret;
0x000a6be6: mov [rdi], rcx; mov [rdi+7], edx; xor ch, ch; mov [rdi+0xb], ch; ret;
0x000a6be7: mov [rdi], ecx; mov [rdi+7], edx; xor ch, ch; mov [rdi+0xb], ch; ret;
0x000a6be9: mov [rdi+7], edx; xor ch, ch; mov [rdi+0xb], ch; ret;
0x000a6bec: xor ch, ch; mov [rdi+0xb], ch; ret;
0x000a6bed: in eax, dx; mov [rdi+0xb], ch; ret;
0x000a6bee: mov [rdi+0xb], ch; ret;
0x000a6c03: mov edx, [rsi+8]; mov [rdi], rcx; mov [rdi+8], edx; xor ch, ch; mov [rdi+0xc], ch; ret;
0x000a6c06: mov [rdi], rcx; mov [rdi+8], edx; xor ch, ch; mov [rdi+0xc], ch; ret;
0x000a6c07: mov [rdi], ecx; mov [rdi+8], edx; xor ch, ch; mov [rdi+0xc], ch; ret;
0x000a6c09: mov [rdi+8], edx; xor ch, ch; mov [rdi+0xc], ch; ret;
0x000a6c0a: push rdi; or [rax], dh; in eax, dx; mov [rdi+0xc], ch; ret;
0x000a6c0b: or [rax], dh; in eax, dx; mov [rdi+0xc], ch; ret;
0x000a6c0c: xor ch, ch; mov [rdi+0xc], ch; ret;
0x000a6c0d: in eax, dx; mov [rdi+0xc], ch; ret;
0x000a6c0e: mov [rdi+0xc], ch; ret;
0x000a6c23: mov rdx, [rsi+5]; mov [rdi], rcx; mov [rdi+5], rdx; xor ch, ch; mov [rdi+0xd], ch; ret;
0x000a6c24: mov edx, [rsi+5]; mov [rdi], rcx; mov [rdi+5], rdx; xor ch, ch; mov [rdi+0xd], ch; ret;
0x000a6c25: push rsi; add eax, 0x480f8948; mov [rdi+5], edx; xor ch, ch; mov [rdi+0xd], ch; ret;
0x000a6c26: add eax, 0x480f8948; mov [rdi+5], edx; xor ch, ch; mov [rdi+0xd], ch; ret;
0x000a6c27: mov [rdi], rcx; mov [rdi+5], rdx; xor ch, ch; mov [rdi+0xd], ch; ret;
0x000a6c28: mov [rdi], ecx; mov [rdi+5], rdx; xor ch, ch; mov [rdi+0xd], ch; ret;
0x000a6c29: cmovs ecx, [rcx-0x12cffaa9]; mov [rdi+0xd], ch; ret;
0x000a6c2a: mov [rdi+5], rdx; xor ch, ch; mov [rdi+0xd], ch; ret;
0x000a6c2b: mov [rdi+5], edx; xor ch, ch; mov [rdi+0xd], ch; ret;
0x000a6c2e: xor ch, ch; mov [rdi+0xd], ch; ret;
0x000a6c2f: in eax, dx; mov [rdi+0xd], ch; ret;
0x000a6c30: mov [rdi+0xd], ch; ret;
0x000a6c43: mov rdx, [rsi+6]; mov [rdi], rcx; mov [rdi+6], rdx; xor ch, ch; mov [rdi+0xe], ch; ret;
0x000a6c44: mov edx, [rsi+6]; mov [rdi], rcx; mov [rdi+6], rdx; xor ch, ch; mov [rdi+0xe], ch; ret;
0x000a6c47: mov [rdi], rcx; mov [rdi+6], rdx; xor ch, ch; mov [rdi+0xe], ch; ret;
0x000a6c48: mov [rdi], ecx; mov [rdi+6], rdx; xor ch, ch; mov [rdi+0xe], ch; ret;
0x000a6c49: cmovs ecx, [rcx-0x12cff9a9]; mov [rdi+0xe], ch; ret;
0x000a6c4a: mov [rdi+6], rdx; xor ch, ch; mov [rdi+0xe], ch; ret;
0x000a6c4b: mov [rdi+6], edx; xor ch, ch; mov [rdi+0xe], ch; ret;
0x000a6c4e: xor ch, ch; mov [rdi+0xe], ch; ret;
0x000a6c4f: in eax, dx; mov [rdi+0xe], ch; ret;
0x000a6c50: mov [rdi+0xe], ch; ret;
0x000a6c63: mov rdx, [rsi+7]; mov [rdi], rcx; mov [rdi+7], rdx; xor ch, ch; mov [rdi+0xf], ch; ret;
0x000a6c64: mov edx, [rsi+7]; mov [rdi], rcx; mov [rdi+7], rdx; xor ch, ch; mov [rdi+0xf], ch; ret;
0x000a6c67: mov [rdi], rcx; mov [rdi+7], rdx; xor ch, ch; mov [rdi+0xf], ch; ret;
0x000a6c68: mov [rdi], ecx; mov [rdi+7], rdx; xor ch, ch; mov [rdi+0xf], ch; ret;
0x000a6c69: cmovs ecx, [rcx-0x12cff8a9]; mov [rdi+0xf], ch; ret;
0x000a6c6a: mov [rdi+7], rdx; xor ch, ch; mov [rdi+0xf], ch; ret;
0x000a6c6b: mov [rdi+7], edx; xor ch, ch; mov [rdi+0xf], ch; ret;
0x000a6c6e: xor ch, ch; mov [rdi+0xf], ch; ret;
0x000a6c6f: in eax, dx; mov [rdi+0xf], ch; ret;
0x000a6c70: mov [rdi+0xf], ch; ret;
0x000a6c7c: add [rax], al; add [rax+0x66f0ff3], dl; movdqu [rdi], xmm0; xor ch, ch; mov [rdi+0x10], ch; ret;
0x000a6c7e: add [rax+0x66f0ff3], dl; movdqu [rdi], xmm0; xor ch, ch; mov [rdi+0x10], ch; ret;
0x000a6c7f: nop; movdqu xmm0, [rsi]; movdqu [rdi], xmm0; xor ch, ch; mov [rdi+0x10], ch; ret;
0x000a6c80: movdqu xmm0, [rsi]; movdqu [rdi], xmm0; xor ch, ch; mov [rdi+0x10], ch; ret;
0x000a6c81: movq mm0, [rsi]; movdqu [rdi], xmm0; xor ch, ch; mov [rdi+0x10], ch; ret;
0x000a6c84: movdqu [rdi], xmm0; xor ch, ch; mov [rdi+0x10], ch; ret;
0x000a6c85: movq [rdi], mm0; xor ch, ch; mov [rdi+0x10], ch; ret;
0x000a6c88: xor ch, ch; mov [rdi+0x10], ch; ret;
0x000a6c89: in eax, dx; mov [rdi+0x10], ch; ret;
0x000a6c8a: mov [rdi+0x10], ch; ret;
0x000a6c94: mov cl, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], cl; xor ch, ch; mov [rdi+0x11], ch; ret;
0x000a6c95: adc bl, r14b; movq [rdi], mm0; mov [rdi+0x10], cl; xor ch, ch; mov [rdi+0x11], ch; ret;
0x000a6c96: adc bl, dh; movq [rdi], mm0; mov [rdi+0x10], cl; xor ch, ch; mov [rdi+0x11], ch; ret;
0x000a6c97: movdqu [rdi], xmm0; mov [rdi+0x10], cl; xor ch, ch; mov [rdi+0x11], ch; ret;
0x000a6c98: movq [rdi], mm0; mov [rdi+0x10], cl; xor ch, ch; mov [rdi+0x11], ch; ret;
0x000a6c9b: mov [rdi+0x10], cl; xor ch, ch; mov [rdi+0x11], ch; ret;
0x000a6c9c: adc [r8], r14b; in eax, dx; mov [rdi+0x11], ch; ret;
0x000a6c9d: adc [rax], dh; in eax, dx; mov [rdi+0x11], ch; ret;
0x000a6c9e: xor ch, ch; mov [rdi+0x11], ch; ret;
0x000a6c9f: in eax, dx; mov [rdi+0x11], ch; ret;
0x000a6ca0: mov [rdi+0x11], ch; ret;
0x000a6cb4: mov cx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], cx; xor ch, ch; mov [rdi+0x12], ch; ret;
0x000a6cb5: mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], cx; xor ch, ch; mov [rdi+0x12], ch; ret;
0x000a6cb6: adc bl, r14b; movq [rdi], mm0; mov [rdi+0x10], cx; xor ch, ch; mov [rdi+0x12], ch; ret;
0x000a6cb7: adc bl, dh; movq [rdi], mm0; mov [rdi+0x10], cx; xor ch, ch; mov [rdi+0x12], ch; ret;
0x000a6cb8: movdqu [rdi], xmm0; mov [rdi+0x10], cx; xor ch, ch; mov [rdi+0x12], ch; ret;
0x000a6cb9: movq [rdi], mm0; mov [rdi+0x10], cx; xor ch, ch; mov [rdi+0x12], ch; ret;
0x000a6cbc: mov [rdi+0x10], cx; xor ch, ch; mov [rdi+0x12], ch; ret;
0x000a6cbd: mov [rdi+0x10], ecx; xor ch, ch; mov [rdi+0x12], ch; ret;
0x000a6cbe: adc [r8], r14b; in eax, dx; mov [rdi+0x12], ch; ret;
0x000a6cbf: adc [rax], dh; in eax, dx; mov [rdi+0x12], ch; ret;
0x000a6cc0: xor ch, ch; mov [rdi+0x12], ch; ret;
0x000a6cc1: in eax, dx; mov [rdi+0x12], ch; ret;
0x000a6cc2: mov [rdi+0x12], ch; ret;
0x000a6cd4: mov ecx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], ecx; xor ch, ch; mov [rdi+0x13], ch; ret;
0x000a6cd7: movdqu [rdi], xmm0; mov [rdi+0xf], ecx; xor ch, ch; mov [rdi+0x13], ch; ret;
0x000a6cd8: movq [rdi], mm0; mov [rdi+0xf], ecx; xor ch, ch; mov [rdi+0x13], ch; ret;
0x000a6cdb: mov [rdi+0xf], ecx; xor ch, ch; mov [rdi+0x13], ch; ret;
0x000a6cdd: wrmsr; in eax, dx; mov [rdi+0x13], ch; ret;
0x000a6cde: xor ch, ch; mov [rdi+0x13], ch; ret;
0x000a6cdf: in eax, dx; mov [rdi+0x13], ch; ret;
0x000a6ce0: mov [rdi+0x13], ch; ret;
0x000a6cf4: mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], ecx; xor ch, ch; mov [rdi+0x14], ch; ret;
0x000a6cf5: adc bl, r14b; movq [rdi], mm0; mov [rdi+0x10], ecx; xor ch, ch; mov [rdi+0x14], ch; ret;
0x000a6cf6: adc bl, dh; movq [rdi], mm0; mov [rdi+0x10], ecx; xor ch, ch; mov [rdi+0x14], ch; ret;
0x000a6cf7: movdqu [rdi], xmm0; mov [rdi+0x10], ecx; xor ch, ch; mov [rdi+0x14], ch; ret;
0x000a6cf8: movq [rdi], mm0; mov [rdi+0x10], ecx; xor ch, ch; mov [rdi+0x14], ch; ret;
0x000a6cfb: mov [rdi+0x10], ecx; xor ch, ch; mov [rdi+0x14], ch; ret;
0x000a6cfc: adc [r8], r14b; in eax, dx; mov [rdi+0x14], ch; ret;
0x000a6cfd: adc [rax], dh; in eax, dx; mov [rdi+0x14], ch; ret;
0x000a6cfe: xor ch, ch; mov [rdi+0x14], ch; ret;
0x000a6cff: in eax, dx; mov [rdi+0x14], ch; ret;
0x000a6d00: mov [rdi+0x14], ch; ret;
0x000a6d1a: movdqu [rdi], xmm0; mov [rdi+0x10], ecx; mov [rdi+0x14], dl; xor ch, ch; mov [rdi+0x15], ch; ret;
0x000a6d1b: movq [rdi], mm0; mov [rdi+0x10], ecx; mov [rdi+0x14], dl; xor ch, ch; mov [rdi+0x15], ch; ret;
0x000a6d1e: mov [rdi+0x10], ecx; mov [rdi+0x14], dl; xor ch, ch; mov [rdi+0x15], ch; ret;
0x000a6d1f: adc [r8-0x12cfeba9], r9b; mov [rdi+0x15], ch; ret;
0x000a6d20: adc [rax-0x12cfeba9], cl; mov [rdi+0x15], ch; ret;
0x000a6d21: mov [rdi+0x14], dl; xor ch, ch; mov [rdi+0x15], ch; ret;
0x000a6d22: push rdi; adc al, 0x30; in eax, dx; mov [rdi+0x15], ch; ret;
0x000a6d23: adc al, 0x30; in eax, dx; mov [rdi+0x15], ch; ret;
0x000a6d24: xor ch, ch; mov [rdi+0x15], ch; ret;
0x000a6d25: in eax, dx; mov [rdi+0x15], ch; ret;
0x000a6d26: mov [rdi+0x15], ch; ret;
0x000a6d34: mov rcx, [rsi+0xe]; movdqu [rdi], xmm0; mov [rdi+0xe], rcx; xor ch, ch; mov [rdi+0x16], ch; ret;
0x000a6d35: mov ecx, [rsi+0xe]; movdqu [rdi], xmm0; mov [rdi+0xe], rcx; xor ch, ch; mov [rdi+0x16], ch; ret;
0x000a6d38: movdqu [rdi], xmm0; mov [rdi+0xe], rcx; xor ch, ch; mov [rdi+0x16], ch; ret;
0x000a6d39: movq [rdi], mm0; mov [rdi+0xe], rcx; xor ch, ch; mov [rdi+0x16], ch; ret;
0x000a6d3c: mov [rdi+0xe], rcx; xor ch, ch; mov [rdi+0x16], ch; ret;
0x000a6d3d: mov [rdi+0xe], ecx; xor ch, ch; mov [rdi+0x16], ch; ret;
0x000a6d40: xor ch, ch; mov [rdi+0x16], ch; ret;
0x000a6d41: in eax, dx; mov [rdi+0x16], ch; ret;
0x000a6d42: mov [rdi+0x16], ch; ret;
0x000a6d54: mov rcx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], rcx; xor ch, ch; mov [rdi+0x17], ch; ret;
0x000a6d55: mov ecx, [rsi+0xf]; movdqu [rdi], xmm0; mov [rdi+0xf], rcx; xor ch, ch; mov [rdi+0x17], ch; ret;
0x000a6d58: movdqu [rdi], xmm0; mov [rdi+0xf], rcx; xor ch, ch; mov [rdi+0x17], ch; ret;
0x000a6d59: movq [rdi], mm0; mov [rdi+0xf], rcx; xor ch, ch; mov [rdi+0x17], ch; ret;
0x000a6d5c: mov [rdi+0xf], rcx; xor ch, ch; mov [rdi+0x17], ch; ret;
0x000a6d5d: mov [rdi+0xf], ecx; xor ch, ch; mov [rdi+0x17], ch; ret;
0x000a6d5f: wrmsr; in eax, dx; mov [rdi+0x17], ch; ret;
0x000a6d60: xor ch, ch; mov [rdi+0x17], ch; ret;
0x000a6d61: in eax, dx; mov [rdi+0x17], ch; ret;
0x000a6d62: mov [rdi+0x17], ch; ret;
0x000a6d74: mov rcx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], rcx; xor ch, ch; mov [rdi+0x18], ch; ret;
0x000a6d75: mov ecx, [rsi+0x10]; movdqu [rdi], xmm0; mov [rdi+0x10], rcx; xor ch, ch; mov [rdi+0x18], ch; ret;
0x000a6d76: adc bl, r14b; movq [rdi], mm0; mov [rdi+0x10], rcx; xor ch, ch; mov [rdi+0x18], ch; ret;
0x000a6d77: adc bl, dh; movq [rdi], mm0; mov [rdi+0x10], rcx; xor ch, ch; mov [rdi+0x18], ch; ret;
0x000a6d78: movdqu [rdi], xmm0; mov [rdi+0x10], rcx; xor ch, ch; mov [rdi+0x18], ch; ret;
0x000a6d79: movq [rdi], mm0; mov [rdi+0x10], rcx; xor ch, ch; mov [rdi+0x18], ch; ret;
0x000a6d7c: mov [rdi+0x10], rcx; xor ch, ch; mov [rdi+0x18], ch; ret;
0x000a6d7d: mov [rdi+0x10], ecx; xor ch, ch; mov [rdi+0x18], ch; ret;
0x000a6d7e: adc [r8], r14b; in eax, dx; mov [rdi+0x18], ch; ret;
0x000a6d7f: adc [rax], dh; in eax, dx; mov [rdi+0x18], ch; ret;
0x000a6d80: xor ch, ch; mov [rdi+0x18], ch; ret;
0x000a6d81: in eax, dx; mov [rdi+0x18], ch; ret;
0x000a6d82: mov [rdi+0x18], ch; ret;
0x000a6d9b: movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cl; xor ch, ch; mov [rdi+0x19], ch; ret;
0x000a6d9c: movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cl; xor ch, ch; mov [rdi+0x19], ch; ret;
0x000a6d9f: mov [rdi+0x10], rdx; mov [rdi+0x18], cl; xor ch, ch; mov [rdi+0x19], ch; ret;
0x000a6da0: mov [rdi+0x10], edx; mov [rdi+0x18], cl; xor ch, ch; mov [rdi+0x19], ch; ret;
0x000a6da1: push rdi; adc [rax-0x12cfe7b1], cl; mov [rdi+0x19], ch; ret;
0x000a6da2: adc [rax-0x12cfe7b1], cl; mov [rdi+0x19], ch; ret;
0x000a6da3: mov [rdi+0x18], cl; xor ch, ch; mov [rdi+0x19], ch; ret;
0x000a6da4: sbb [r8], r14b; in eax, dx; mov [rdi+0x19], ch; ret;
0x000a6da5: sbb [rax], dh; in eax, dx; mov [rdi+0x19], ch; ret;
0x000a6da6: xor ch, ch; mov [rdi+0x19], ch; ret;
0x000a6da7: in eax, dx; mov [rdi+0x19], ch; ret;
0x000a6da8: mov [rdi+0x19], ch; ret;
0x000a6dbc: movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; xor ch, ch; mov [rdi+0x1a], ch; ret;
0x000a6dbd: movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], cx; xor ch, ch; mov [rdi+0x1a], ch; ret;
0x000a6dc0: mov [rdi+0x10], rdx; mov [rdi+0x18], cx; xor ch, ch; mov [rdi+0x1a], ch; ret;
0x000a6dc1: mov [rdi+0x10], edx; mov [rdi+0x18], cx; xor ch, ch; mov [rdi+0x1a], ch; ret;
0x000a6dc2: push rdi; adc [rsi-0x77], ah; sbb [r8], r14b; in eax, dx; mov [rdi+0x1a], ch; ret;
0x000a6dc3: adc [rsi-0x77], ah; sbb [r8], r14b; in eax, dx; mov [rdi+0x1a], ch; ret;
0x000a6dc4: mov [rdi+0x18], cx; xor ch, ch; mov [rdi+0x1a], ch; ret;
0x000a6dc5: mov [rdi+0x18], ecx; xor ch, ch; mov [rdi+0x1a], ch; ret;
0x000a6dc6: sbb [r8], r14b; in eax, dx; mov [rdi+0x1a], ch; ret;
0x000a6dc7: sbb [rax], dh; in eax, dx; mov [rdi+0x1a], ch; ret;
0x000a6dc8: xor ch, ch; mov [rdi+0x1a], ch; ret;
0x000a6dc9: in eax, dx; mov [rdi+0x1a], ch; ret;
0x000a6dca: mov [rdi+0x1a], ch; ret;
0x000a6ddb: movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; xor ch, ch; mov [rdi+0x1b], ch; ret;
0x000a6ddc: movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; xor ch, ch; mov [rdi+0x1b], ch; ret;
0x000a6ddf: mov [rdi+0x10], rdx; mov [rdi+0x17], ecx; xor ch, ch; mov [rdi+0x1b], ch; ret;
0x000a6de0: mov [rdi+0x10], edx; mov [rdi+0x17], ecx; xor ch, ch; mov [rdi+0x1b], ch; ret;
0x000a6de1: push rdi; adc [rcx-0x12cfe8b1], cl; mov [rdi+0x1b], ch; ret;
0x000a6de2: adc [rcx-0x12cfe8b1], cl; mov [rdi+0x1b], ch; ret;
0x000a6de3: mov [rdi+0x17], ecx; xor ch, ch; mov [rdi+0x1b], ch; ret;
0x000a6de6: xor ch, ch; mov [rdi+0x1b], ch; ret;
0x000a6de7: in eax, dx; mov [rdi+0x1b], ch; ret;
0x000a6de8: mov [rdi+0x1b], ch; ret;
0x000a6dfb: movdqu [rdi], xmm0; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; xor ch, ch; mov [rdi+0x1c], ch; ret;
0x000a6dfc: movq [rdi], mm0; mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; xor ch, ch; mov [rdi+0x1c], ch; ret;
0x000a6dff: mov [rdi+0x10], rdx; mov [rdi+0x18], ecx; xor ch, ch; mov [rdi+0x1c], ch; ret;
0x000a6e00: mov [rdi+0x10], edx; mov [rdi+0x18], ecx; xor ch, ch; mov [rdi+0x1c], ch; ret;
0x000a6e01: push rdi; adc [rcx-0x12cfe7b1], cl; mov [rdi+0x1c], ch; ret;
0x000a6e02: adc [rcx-0x12cfe7b1], cl; mov [rdi+0x1c], ch; ret;
0x000a6e03: mov [rdi+0x18], ecx; xor ch, ch; mov [rdi+0x1c], ch; ret;
0x000a6e04: sbb [r8], r14b; in eax, dx; mov [rdi+0x1c], ch; ret;
0x000a6e05: sbb [rax], dh; in eax, dx; mov [rdi+0x1c], ch; ret;
0x000a6e06: xor ch, ch; mov [rdi+0x1c], ch; ret;
0x000a6e07: in eax, dx; mov [rdi+0x1c], ch; ret;
0x000a6e08: mov [rdi+0x1c], ch; ret;
0x000a6e14: movdqu xmm2, [rsi+0xd]; movdqu [rdi], xmm0; movdqu [rdi+0xd], xmm2; xor ch, ch; mov [rdi+0x1d], ch; ret;
0x000a6e15: movq mm2, [rsi+0xd]; movdqu [rdi], xmm0; movdqu [rdi+0xd], xmm2; xor ch, ch; mov [rdi+0x1d], ch; ret;
0x000a6e17: push rsi; or eax, 0x77f0ff3; movdqu [rdi+0xd], xmm2; xor ch, ch; mov [rdi+0x1d], ch; ret;
0x000a6e18: or eax, 0x77f0ff3; movdqu [rdi+0xd], xmm2; xor ch, ch; mov [rdi+0x1d], ch; ret;
0x000a6e19: movdqu [rdi], xmm0; movdqu [rdi+0xd], xmm2; xor ch, ch; mov [rdi+0x1d], ch; ret;
0x000a6e1a: movq [rdi], mm0; movdqu [rdi+0xd], xmm2; xor ch, ch; mov [rdi+0x1d], ch; ret;
0x000a6e1d: movdqu [rdi+0xd], xmm2; xor ch, ch; mov [rdi+0x1d], ch; ret;
0x000a6e1e: movq [rdi+0xd], mm2; xor ch, ch; mov [rdi+0x1d], ch; ret;
0x000a6e22: xor ch, ch; mov [rdi+0x1d], ch; ret;
0x000a6e23: in eax, dx; mov [rdi+0x1d], ch; ret;
0x000a6e24: mov [rdi+0x1d], ch; ret;
0x000a6e34: movdqu xmm2, [rsi+0xe]; movdqu [rdi], xmm0; movdqu [rdi+0xe], xmm2; xor ch, ch; mov [rdi+0x1e], ch; ret;
0x000a6e35: movq mm2, [rsi+0xe]; movdqu [rdi], xmm0; movdqu [rdi+0xe], xmm2; xor ch, ch; mov [rdi+0x1e], ch; ret;
0x000a6e39: movdqu [rdi], xmm0; movdqu [rdi+0xe], xmm2; xor ch, ch; mov [rdi+0x1e], ch; ret;
0x000a6e3a: movq [rdi], mm0; movdqu [rdi+0xe], xmm2; xor ch, ch; mov [rdi+0x1e], ch; ret;
0x000a6e3d: movdqu [rdi+0xe], xmm2; xor ch, ch; mov [rdi+0x1e], ch; ret;
0x000a6e3e: movq [rdi+0xe], mm2; xor ch, ch; mov [rdi+0x1e], ch; ret;
0x000a6e42: xor ch, ch; mov [rdi+0x1e], ch; ret;
0x000a6e43: in eax, dx; mov [rdi+0x1e], ch; ret;
0x000a6e44: mov [rdi+0x1e], ch; ret;
0x000a6e54: movdqu xmm2, [rsi+0xf]; movdqu [rdi], xmm0; movdqu [rdi+0xf], xmm2; xor ch, ch; mov [rdi+0x1f], ch; ret;
0x000a6e55: movq mm2, [rsi+0xf]; movdqu [rdi], xmm0; movdqu [rdi+0xf], xmm2; xor ch, ch; mov [rdi+0x1f], ch; ret;
0x000a6e59: movdqu [rdi], xmm0; movdqu [rdi+0xf], xmm2; xor ch, ch; mov [rdi+0x1f], ch; ret;
0x000a6e5a: movq [rdi], mm0; movdqu [rdi+0xf], xmm2; xor ch, ch; mov [rdi+0x1f], ch; ret;
0x000a6e5d: movdqu [rdi+0xf], xmm2; xor ch, ch; mov [rdi+0x1f], ch; ret;
0x000a6e5e: movq [rdi+0xf], mm2; xor ch, ch; mov [rdi+0x1f], ch; ret;
0x000a6e60: push rdi; wrmsr; in eax, dx; mov [rdi+0x1f], ch; ret;
0x000a6e61: wrmsr; in eax, dx; mov [rdi+0x1f], ch; ret;
0x000a6e62: xor ch, ch; mov [rdi+0x1f], ch; ret;
0x000a6e63: in eax, dx; mov [rdi+0x1f], ch; ret;
0x000a6e64: mov [rdi+0x1f], ch; ret;
0x000a6e74: movdqu xmm2, [rsi+0x10]; movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; xor ch, ch; mov [rdi+0x20], ch; ret;
0x000a6e75: movq mm2, [rsi+0x10]; movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; xor ch, ch; mov [rdi+0x20], ch; ret;
0x000a6e78: adc bl, dh; movq [rdi], mm0; movdqu [rdi+0x10], xmm2; xor ch, ch; mov [rdi+0x20], ch; ret;
0x000a6e79: movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; xor ch, ch; mov [rdi+0x20], ch; ret;
0x000a6e7a: movq [rdi], mm0; movdqu [rdi+0x10], xmm2; xor ch, ch; mov [rdi+0x20], ch; ret;
0x000a6e7d: movdqu [rdi+0x10], xmm2; xor ch, ch; mov [rdi+0x20], ch; ret;
0x000a6e7e: movq [rdi+0x10], mm2; xor ch, ch; mov [rdi+0x20], ch; ret;
0x000a6e80: push rdi; adc [rax], dh; in eax, dx; mov [rdi+0x20], ch; ret;
0x000a6e81: adc [rax], dh; in eax, dx; mov [rdi+0x20], ch; ret;
0x000a6e82: xor ch, ch; mov [rdi+0x20], ch; ret;
0x000a6e83: in eax, dx; mov [rdi+0x20], ch; ret;
0x000a6e84: mov [rdi+0x20], ch; ret;
0x000a6e9c: movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm2; mov [rdi+0x20], cl; xor ch, ch; mov [rdi+0x21], ch; ret;
0x000a6e9d: movq [rdi], mm0; movdqu [rdi+0x10], xmm2; mov [rdi+0x20], cl; xor ch, ch; mov [rdi+0x21], ch; ret;
0x000a6ea0: movdqu [rdi+0x10], xmm2; mov [rdi+0x20], cl; xor ch, ch; mov [rdi+0x21], ch; ret;
0x000a6ea1: movq [rdi+0x10], mm2; mov [rdi+0x20], cl; xor ch, ch; mov [rdi+0x21], ch; ret;
0x000a6ea3: push rdi; adc [rax-0x12cfdfb1], cl; mov [rdi+0x21], ch; ret;
0x000a6ea4: adc [rax-0x12cfdfb1], cl; mov [rdi+0x21], ch; ret;
0x000a6ea5: mov [rdi+0x20], cl; xor ch, ch; mov [rdi+0x21], ch; ret;
0x000a6ea6: and [r8], r14b; in eax, dx; mov [rdi+0x21], ch; ret;
0x000a6ea7: and [rax], dh; in eax, dx; mov [rdi+0x21], ch; ret;
0x000a6ea8: xor ch, ch; mov [rdi+0x21], ch; ret;
0x000a6ea9: in eax, dx; mov [rdi+0x21], ch; ret;
0x000a6eaa: mov [rdi+0x21], ch; ret;
0x000a6ef2: push rbx; movq [rdi+0x30], mm7; xor ch, ch; mov [rdi+0x40], ch; ret;
0x000a6ef3: movdqu [rdi+0x30], xmm7; xor ch, ch; mov [rdi+0x40], ch; ret;
0x000a6ef4: movq [rdi+0x30], mm7; xor ch, ch; mov [rdi+0x40], ch; ret;
0x000a6ef7: xor [rax], dh; in eax, dx; mov [rdi+0x40], ch; ret;
0x000a6ef8: xor ch, ch; mov [rdi+0x40], ch; ret;
0x000a6ef9: in eax, dx; mov [rdi+0x40], ch; ret;
0x000a6efa: mov [rdi+0x40], ch; ret;
0x000a6f61: imul esi, 0xffffffff; jmp qword ptr [rsi+0xf];
0x000a6f88: dec dword ptr [rbp+rcx*4+0x1d]; in al, 0xd; add [rbx+0x63], cl; or al, 0x83; lea rcx, [r11+rcx]; jmp rcx;
0x000a6f89: lea r11, [rip+0xdecea]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a6f8a: lea ebx, [rip+0xdecea]; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a6f8b: sbb eax, 0xde464; movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a6f8c: in al, 0xd; add [rbx+0x63], cl; or al, 0x83; lea rcx, [r11+rcx]; jmp rcx;
0x000a6f8d: in al, 0xd; add [rbx+0x63], cl; or al, 0x83; lea rcx, [r11+rcx]; jmp rcx;
0x000a6f8f: add [rbx+0x63], cl; or al, 0x83; lea rcx, [r11+rcx]; jmp rcx;
0x000a6f90: movsxd rcx, [r11+r8*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a6f91: movsxd ecx, [rbx+rax*4]; lea rcx, [r11+rcx]; jmp rcx;
0x000a6f92: or al, 0x83; lea rcx, [r11+rcx]; jmp rcx;
0x000a6f94: lea rcx, [r11+rcx]; jmp rcx;
0x000a6f95: lea ecx, [rbx+rcx]; jmp rcx;
0x000a6f96: or al, 0xb; jmp rcx;
0x000a708b: add [rax], al; add [rax], al; add [rax-0x7d], cl; ret 0x3a01;
0x000a708d: add [rax], al; add [rax-0x7d], cl; ret 0x3a01;
0x000a70ff: shl dword ptr [rsi+0xf], 0xda; ret;
0x000a713f: add [rax-0x7d], cl; ret 0x3a01;
0x000a714e: add eax, [rcx+rcx*8+0x31c3ed75]; rol bl, 0x48; mov eax, edi; ret;
0x000a7152: in eax, dx; ret;
0x000a7155: rol bl, 0x48; mov eax, edi; ret;
0x000a71df: shl byte ptr [rsi+0x44], 0xf; out dx, eax; ret 0xf66;
0x000a71e3: out dx, eax; ret 0xf66;
0x000a72c0: shl byte ptr [rbp-0x13], cl; lea rax, [rcx-1]; ret;
0x000a72c2: in eax, dx; lea rax, [rcx-1]; ret;
0x000a72c3: lea rax, [rcx-1]; ret;
0x000a72c4: lea eax, [rcx-1]; ret;
0x000a72cb: add [rax], al; add [rax], al; add [rcx+1], cl; ret;
0x000a72cd: add [rax], al; add [rcx+1], cl; ret;
0x000a72cf: add [rcx+1], cl; ret;
0x000a7402: ret 0x3a01;
0x000a7412: in eax, dx; sub rax, 1; ret;
0x000a7413: sub rax, 1; ret;
0x000a7428: test eax, 0xfffd3be9; jmp qword ptr [rsi-0x70];
0x000a742e: xchg ax, ax; rep ret;
0x000a742f: nop; rep ret;
0x000a7433: nop [rax+rax]; nop [rax]; xor eax, eax; ret;
0x000a7434: nop [rax+rax]; nop [rax]; xor eax, eax; ret;
0x000a7435: nop [rax+rax]; nop [rax]; xor eax, eax; ret;
0x000a7437: test [rax], al; add [rax], al; add [rax], al; nop [rax]; xor eax, eax; ret;
0x000a7439: add [rax], al; add [rax], al; nop [rax]; xor eax, eax; ret;
0x000a743b: add [rax], al; nop [rax]; xor eax, eax; ret;
0x000a7578: ror byte ptr [rax-1], 0xc0; add rsp, 0x100; xor edx, edx; or cl, cl; cmove rax, rdx; ret;
0x000a7579: inc rax; add rsp, 0x100; xor edx, edx; or cl, cl; cmove rax, rdx; ret;
0x000a757a: inc eax; add rsp, 0x100; xor edx, edx; or cl, cl; cmove rax, rdx; ret;
0x000a757c: add rsp, 0x100; xor edx, edx; or cl, cl; cmove rax, rdx; ret;
0x000a757d: add esp, 0x100; xor edx, edx; or cl, cl; cmove rax, rdx; ret;
0x000a757f: add [rcx], al; add [rax], al; xor edx, edx; or cl, cl; cmove rax, rdx; ret;
0x000a7580: add [rax], eax; add [rcx], dh; ror byte ptr [rax], cl; leave; cmove rax, rdx; ret;
0x000a7581: add [rax], al; xor edx, edx; or cl, cl; cmove rax, rdx; ret;
0x000a7582: add [rcx], dh; ror byte ptr [rax], cl; leave; cmove rax, rdx; ret;
0x000a7583: xor edx, edx; or cl, cl; cmove rax, rdx; ret;
0x000a7584: ror byte ptr [rax], cl; leave; cmove rax, rdx; ret;
0x000a7585: or cl, cl; cmove rax, rdx; ret;
0x000a7586: leave; cmove rax, rdx; ret;
0x000a7612: fisttp qword ptr [rax-1], st; ror byte ptr [rax-1], 0xc0; inc rax; add rsp, 0x100; sub rax, rdx; ret;
0x000a7613: inc rax; inc rax; inc rax; add rsp, 0x100; sub rax, rdx; ret;
0x000a7614: inc eax; inc rax; inc rax; add rsp, 0x100; sub rax, rdx; ret;
0x000a7615: ror byte ptr [rax-1], 0xc0; inc rax; add rsp, 0x100; sub rax, rdx; ret;
0x000a7616: inc rax; inc rax; add rsp, 0x100; sub rax, rdx; ret;
0x000a7617: inc eax; inc rax; add rsp, 0x100; sub rax, rdx; ret;
0x000a7618: ror byte ptr [rax-1], 0xc0; add rsp, 0x100; sub rax, rdx; ret;
0x000a7619: inc rax; add rsp, 0x100; sub rax, rdx; ret;
0x000a761a: inc eax; add rsp, 0x100; sub rax, rdx; ret;
0x000a761b: ror byte ptr [rax-0x7f], 0xc4; add [rcx], al; add [rax], al; sub rax, rdx; ret;
0x000a761c: add rsp, 0x100; sub rax, rdx; ret;
0x000a761d: add esp, 0x100; sub rax, rdx; ret;
0x000a761f: add [rcx], al; add [rax], al; sub rax, rdx; ret;
0x000a7621: add [rax], al; sub rax, rdx; ret;
0x000a7675: add [rax], al; movups xmm0, [rsi]; movups xmm1, [rsi+rdx-0x10]; movups [rdi], xmm0; movups [rdi+rdx-0x10], xmm1; ret;
0x000a7676: add [rdi], cl; adc [rsi], al; movups xmm1, [rsi+rdx-0x10]; movups [rdi], xmm0; movups [rdi+rdx-0x10], xmm1; ret;
0x000a76da: add esi, ebx; movsb [rdi], [rsi]; ret;
0x000a76ea: movsb [rdi], [rsi]; cld; ret;
0x000a772c: and [rdi+0x7e], dh; movups xmm0, [rsi]; movups xmm1, [rsi+rdx-0x10]; movups [rdi], xmm0; movups [rdi+rdx-0x10], xmm1; ret;
0x000a772f: movups xmm0, [rsi]; movups xmm1, [rsi+rdx-0x10]; movups [rdi], xmm0; movups [rdi+rdx-0x10], xmm1; ret;
0x000a7730: adc [rsi], al; movups xmm1, [rsi+rdx-0x10]; movups [rdi], xmm0; movups [rdi+rdx-0x10], xmm1; ret;
0x000a7732: movups xmm1, [rsi+rdx-0x10]; movups [rdi], xmm0; movups [rdi+rdx-0x10], xmm1; ret;
0x000a7733: adc [rsi+rdx-0x10], cl; movups [rdi], xmm0; movups [rdi+rdx-0x10], xmm1; ret;
0x000a7737: movups [rdi], xmm0; movups [rdi+rdx-0x10], xmm1; ret;
0x000a7738: adc [rdi], eax; movups [rdi+rdx-0x10], xmm1; ret;
0x000a773a: movups [rdi+rdx-0x10], xmm1; ret;
0x000a773b: adc [rdi+rdx-0x10], ecx; ret;
0x000a775e: add [rax], eax; add [rax-0x77], cl; shl ebx, 1; movsb [rdi], [rsi]; ret;
0x000a77f3: movups [rdi+0x30], xmm3; movups [rdi+rdx-0x10], xmm4; movups [rdi+rdx-0x20], xmm5; movups [rdi+rdx-0x30], xmm6; movups [rdi+rdx-0x40], xmm7; ret;
0x000a77f4: adc [rdi+0x30], ebx; movups [rdi+rdx-0x10], xmm4; movups [rdi+rdx-0x20], xmm5; movups [rdi+rdx-0x30], xmm6; movups [rdi+rdx-0x40], xmm7; ret;
0x000a77f6: xor [rdi], cl; adc [rdi+rdx-0x10], esp; movups [rdi+rdx-0x20], xmm5; movups [rdi+rdx-0x30], xmm6; movups [rdi+rdx-0x40], xmm7; ret;
0x000a77f7: movups [rdi+rdx-0x10], xmm4; movups [rdi+rdx-0x20], xmm5; movups [rdi+rdx-0x30], xmm6; movups [rdi+rdx-0x40], xmm7; ret;
0x000a77f8: adc [rdi+rdx-0x10], esp; movups [rdi+rdx-0x20], xmm5; movups [rdi+rdx-0x30], xmm6; movups [rdi+rdx-0x40], xmm7; ret;
0x000a77fc: movups [rdi+rdx-0x20], xmm5; movups [rdi+rdx-0x30], xmm6; movups [rdi+rdx-0x40], xmm7; ret;
0x000a77fd: adc [rdi+rdx-0x20], ebp; movups [rdi+rdx-0x30], xmm6; movups [rdi+rdx-0x40], xmm7; ret;
0x000a7801: movups [rdi+rdx-0x30], xmm6; movups [rdi+rdx-0x40], xmm7; ret;
0x000a7802: adc [rdi+rdx-0x30], esi; movups [rdi+rdx-0x40], xmm7; ret;
0x000a7805: ror byte ptr [rdi], 1; adc [rdi+rdx-0x40], edi; ret;
0x000a7806: movups [rdi+rdx-0x40], xmm7; ret;
0x000a7807: adc [rdi+rdx-0x40], edi; ret;
0x000a7818: movups xmm3, [rsi+rdx-0x20]; movups [rdi], xmm0; movups [rdi+0x10], xmm1; movups [rdi+rdx-0x10], xmm2; movups [rdi+rdx-0x20], xmm3; ret;
0x000a7819: adc [rsi+rdx-0x20], bl; movups [rdi], xmm0; movups [rdi+0x10], xmm1; movups [rdi+rdx-0x10], xmm2; movups [rdi+rdx-0x20], xmm3; ret;
0x000a781d: movups [rdi], xmm0; movups [rdi+0x10], xmm1; movups [rdi+rdx-0x10], xmm2; movups [rdi+rdx-0x20], xmm3; ret;
0x000a781e: adc [rdi], eax; movups [rdi+0x10], xmm1; movups [rdi+rdx-0x10], xmm2; movups [rdi+rdx-0x20], xmm3; ret;
0x000a7820: movups [rdi+0x10], xmm1; movups [rdi+rdx-0x10], xmm2; movups [rdi+rdx-0x20], xmm3; ret;
0x000a7821: adc [rdi+0x10], ecx; movups [rdi+rdx-0x10], xmm2; movups [rdi+rdx-0x20], xmm3; ret;
0x000a7822: adc [r15], r9b; adc [rdi+rdx-0x10], edx; movups [rdi+rdx-0x20], xmm3; ret;
0x000a7823: adc [rdi], cl; adc [rdi+rdx-0x10], edx; movups [rdi+rdx-0x20], xmm3; ret;
0x000a7824: movups [rdi+rdx-0x10], xmm2; movups [rdi+rdx-0x20], xmm3; ret;
0x000a7825: adc [rdi+rdx-0x10], edx; movups [rdi+rdx-0x20], xmm3; ret;
0x000a7829: movups [rdi+rdx-0x20], xmm3; ret;
0x000a782a: adc [rdi+rdx-0x20], ebx; ret;
0x000a799d: movups [rcx], xmm5; movups [rcx-0x10], xmm6; movups [rcx-0x20], xmm7; movups [rcx-0x30], xmm8; movups [r11], xmm4; ret;
0x000a799e: adc [rcx], ebp; movups [rcx-0x10], xmm6; movups [rcx-0x20], xmm7; movups [rcx-0x30], xmm8; movups [r11], xmm4; ret;
0x000a799f: sub [rdi], ecx; adc [rcx-0x10], esi; movups [rcx-0x20], xmm7; movups [rcx-0x30], xmm8; movups [r11], xmm4; ret;
0x000a79a0: movups [rcx-0x10], xmm6; movups [rcx-0x20], xmm7; movups [rcx-0x30], xmm8; movups [r11], xmm4; ret;
0x000a79a1: adc [rcx-0x10], esi; movups [rcx-0x20], xmm7; movups [rcx-0x30], xmm8; movups [r11], xmm4; ret;
0x000a79a4: movups [rcx-0x20], xmm7; movups [rcx-0x30], xmm8; movups [r11], xmm4; ret;
0x000a79a5: adc [rcx-0x20], edi; movups [rcx-0x30], xmm8; movups [r11], xmm4; ret;
0x000a79a8: movups [rcx-0x30], xmm8; movups [r11], xmm4; ret;
0x000a79a9: movups [rcx-0x30], xmm0; movups [r11], xmm4; ret;
0x000a79aa: adc [rcx-0x30], eax; movups [r11], xmm4; ret;
0x000a79ab: rol byte ptr [r9+0xf], 1; adc [rbx], esp; ret;
0x000a79ac: rol byte ptr [rcx+0xf], 1; adc [rbx], esp; ret;
0x000a79ad: movups [r11], xmm4; ret;
0x000a79ae: movups [rbx], xmm4; ret;
0x000a79af: adc [rbx], esp; ret;
0x000a7a05: movups [rdi], xmm4; movups [rdi+0x10], xmm5; movups [rdi+0x20], xmm6; movups [rdi+0x30], xmm7; movups [r11], xmm8; ret;
0x000a7a06: adc [rdi], esp; movups [rdi+0x10], xmm5; movups [rdi+0x20], xmm6; movups [rdi+0x30], xmm7; movups [r11], xmm8; ret;
0x000a7a08: movups [rdi+0x10], xmm5; movups [rdi+0x20], xmm6; movups [rdi+0x30], xmm7; movups [r11], xmm8; ret;
0x000a7a09: adc [rdi+0x10], ebp; movups [rdi+0x20], xmm6; movups [rdi+0x30], xmm7; movups [r11], xmm8; ret;
0x000a7a0a: outsd dx, [rsi]; adc [rdi], cl; adc [rdi+0x20], esi; movups [rdi+0x30], xmm7; movups [r11], xmm8; ret;
0x000a7a0b: adc [rdi], cl; adc [rdi+0x20], esi; movups [rdi+0x30], xmm7; movups [r11], xmm8; ret;
0x000a7a0c: movups [rdi+0x20], xmm6; movups [rdi+0x30], xmm7; movups [r11], xmm8; ret;
0x000a7a0d: adc [rdi+0x20], esi; movups [rdi+0x30], xmm7; movups [r11], xmm8; ret;
0x000a7a0f: and [rdi], cl; adc [rdi+0x30], edi; movups [r11], xmm8; ret;
0x000a7a10: movups [rdi+0x30], xmm7; movups [r11], xmm8; ret;
0x000a7a11: adc [rdi+0x30], edi; movups [r11], xmm8; ret;
0x000a7a13: xor [rbp+0xf], al; adc [rbx], eax; ret;
0x000a7a14: movups [r11], xmm8; ret;
0x000a7a15: movups [rbx], xmm0; ret;
0x000a7a16: adc [rbx], eax; ret;
0x000a7a90: cli; and [rdi], cl; xchg [rax-0xd000000], edx; movq [rdi+rdx-0x10], mm0; movdqu [rdi], xmm0; ret;
0x000a7a91: and [rdi], cl; xchg [rax-0xd000000], edx; movq [rdi+rdx-0x10], mm0; movdqu [rdi], xmm0; ret;
0x000a7a93: xchg [rax-0xd000000], edx; movq [rdi+rdx-0x10], mm0; movdqu [rdi], xmm0; ret;
0x000a7a94: nop; add [rax], al; add bl, dh; movq [rdi+rdx-0x10], mm0; movdqu [rdi], xmm0; ret;
0x000a7a95: add [rax], al; add bl, dh; movq [rdi+rdx-0x10], mm0; movdqu [rdi], xmm0; ret;
0x000a7a96: add [rax], al; movdqu [rdi+rdx-0x10], xmm0; movdqu [rdi], xmm0; ret;
0x000a7a97: add bl, dh; movq [rdi+rdx-0x10], mm0; movdqu [rdi], xmm0; ret;
0x000a7abd: add [rax], al; add [rax-0x7b], cl; shl byte ptr [rbp+4], cl; mov rax, rdi; ret;
0x000a7abf: add [rax-0x7b], cl; shl byte ptr [rbp+4], cl; mov rax, rdi; ret;
0x000a7ac2: shl byte ptr [rbp+4], cl; mov rax, rdi; ret;
0x000a7b0d: add [rax-0x7d], cl; cli; and [rdi+0xb], dh; movdqu [rdi+rdx-0x10], xmm0; movdqu [rdi], xmm0; ret;
0x000a7b10: cli; and [rdi+0xb], dh; movdqu [rdi+rdx-0x10], xmm0; movdqu [rdi], xmm0; ret;
0x000a7b11: and [rdi+0xb], dh; movdqu [rdi+rdx-0x10], xmm0; movdqu [rdi], xmm0; ret;
0x000a7b13: or esi, ebx; movq [rdi+rdx-0x10], mm0; movdqu [rdi], xmm0; ret;
0x000a7b14: movdqu [rdi+rdx-0x10], xmm0; movdqu [rdi], xmm0; ret;
0x000a7b15: movq [rdi+rdx-0x10], mm0; movdqu [rdi], xmm0; ret;
0x000a7b2e: movdqu [rdi], xmm0; movdqu [rdi+0x10], xmm0; movdqu [rdi+rdx-0x10], xmm0; movdqu [rdi+rdx-0x20], xmm0; ret;
0x000a7b2f: movq [rdi], mm0; movdqu [rdi+0x10], xmm0; movdqu [rdi+rdx-0x10], xmm0; movdqu [rdi+rdx-0x20], xmm0; ret;
0x000a7b32: movdqu [rdi+0x10], xmm0; movdqu [rdi+rdx-0x10], xmm0; movdqu [rdi+rdx-0x20], xmm0; ret;
0x000a7b33: movq [rdi+0x10], mm0; movdqu [rdi+rdx-0x10], xmm0; movdqu [rdi+rdx-0x20], xmm0; ret;
0x000a7b35: adc r11b, r14b; movq [rdi+rdx-0x10], mm0; movdqu [rdi+rdx-0x20], xmm0; ret;
0x000a7b36: adc bl, dh; movq [rdi+rdx-0x10], mm0; movdqu [rdi+rdx-0x20], xmm0; ret;
0x000a7b37: movdqu [rdi+rdx-0x10], xmm0; movdqu [rdi+rdx-0x20], xmm0; ret;
0x000a7b38: movq [rdi+rdx-0x10], mm0; movdqu [rdi+rdx-0x20], xmm0; ret;
0x000a7b3d: movdqu [rdi+rdx-0x20], xmm0; ret;
0x000a7b3e: movq [rdi+rdx-0x20], mm0; ret;
0x000a7b9e: in al, 0xf3; ret;
0x000a7bb4: adc eax, 0xf880272; ret;
0x000a7bba: mov [rdi+rdx-8], rcx; mov [rdi], rcx; ret;
0x000a7bbb: mov [rdi+rdx-8], ecx; mov [rdi], rcx; ret;
0x000a7bbe: clc; mov [rdi], rcx; ret;
0x000a7bc3: mov [rdi+rdx-4], ecx; mov [rdi], ecx; ret;
0x000a7bc6: cld; mov [rdi], ecx; ret;
0x000a7bca: mov [rdi+rdx-2], cx; mov [rdi], cx; ret;
0x000a7bcb: mov [rdi+rdx-2], ecx; mov [rdi], cx; ret;
0x000a7c1d: xchg [rax+1], esi; add [rax], al; lea rsi, [rip+0xdd877]; movsxd rax, [rsi+rdi*4]; add rax, rsi; jmp rax;
0x000a7c1f: add [rax], eax; add [rax-0x73], cl; xor eax, 0xdd877; movsxd rax, [rsi+rdi*4]; add rax, rsi; jmp rax;
0x000a7c20: add [rax], al; lea rsi, [rip+0xdd877]; movsxd rax, [rsi+rdi*4]; add rax, rsi; jmp rax;
0x000a7c21: add [rax-0x73], cl; xor eax, 0xdd877; movsxd rax, [rsi+rdi*4]; add rax, rsi; jmp rax;
0x000a7c22: lea rsi, [rip+0xdd877]; movsxd rax, [rsi+rdi*4]; add rax, rsi; jmp rax;
0x000a7c23: lea esi, [rip+0xdd877]; movsxd rax, [rsi+rdi*4]; add rax, rsi; jmp rax;
0x000a7c24: xor eax, 0xdd877; movsxd rax, [rsi+rdi*4]; add rax, rsi; jmp rax;
0x000a7c28: add [rax+0x63], cl; add al, 0xbe; add rax, rsi; jmp rax;
0x000a7c29: movsxd rax, [rsi+rdi*4]; add rax, rsi; jmp rax;
0x000a7c2a: movsxd eax, [rsi+rdi*4]; add rax, rsi; jmp rax;
0x000a7c2b: add al, 0xbe; add rax, rsi; jmp rax;
0x000a7c32: nop [rax+rax]; xor eax, eax; pop rbx; ret;
0x000a7c33: nop [rax+rax]; xor eax, eax; pop rbx; ret;
0x000a7c35: add [rax], r8b; xor eax, eax; pop rbx; ret;
0x000a7c4d: mov [0x6b358d48d089c3eb], al; fmul st, dword ptr [rip+0xce8c100]; and eax, 0xf; movsxd rcx, [rsi+rax*4]; add rcx, rsi; jmp rcx;
0x000a7c52: lea rsi, [rip+0xdd86b]; shr eax, 0xc; and eax, 0xf; movsxd rcx, [rsi+rax*4]; add rcx, rsi; jmp rcx;
0x000a7c53: lea esi, [rip+0xdd86b]; shr eax, 0xc; and eax, 0xf; movsxd rcx, [rsi+rax*4]; add rcx, rsi; jmp rcx;
0x000a7c54: xor eax, 0xdd86b; shr eax, 0xc; and eax, 0xf; movsxd rcx, [rsi+rax*4]; add rcx, rsi; jmp rcx;
0x000a7c56: fmul st, dword ptr [rip+0xce8c100]; and eax, 0xf; movsxd rcx, [rsi+rax*4]; add rcx, rsi; jmp rcx;
0x000a7c57: or eax, 0xce8c100; and eax, 0xf; movsxd rcx, [rsi+rax*4]; add rcx, rsi; jmp rcx;
0x000a7c59: shr eax, 0xc; and eax, 0xf; movsxd rcx, [rsi+rax*4]; add rcx, rsi; jmp rcx;
0x000a7c5c: and eax, 0xf; movsxd rcx, [rsi+rax*4]; add rcx, rsi; jmp rcx;
0x000a7c5e: cmovs esp, [rbx+0xc]; xchg [rax+1], cl; int1; jmp rcx;
0x000a7c5f: movsxd rcx, [rsi+rax*4]; add rcx, rsi; jmp rcx;
0x000a7c60: movsxd ecx, [rsi+rax*4]; add rcx, rsi; jmp rcx;
0x000a7c61: or al, 0x86; add rcx, rsi; jmp rcx;
0x000a7c62: xchg [rax+1], cl; int1; jmp rcx;
0x000a7c63: add rcx, rsi; jmp rcx;
0x000a7c64: add ecx, esi; jmp rcx;
0x000a7c65: int1; jmp rcx;
0x000a7c70: movzx eax, dl; and dh, 0xf0; mov edx, 0; pop rbx; cmove rax, rdx; ret;
0x000a7c71: mov dh, 0xc2; and dh, 0xf0; mov edx, 0; pop rbx; cmove rax, rdx; ret;
0x000a7c72: ret 0xe680;
0x000a7c73: and dh, 0xf0; mov edx, 0; pop rbx; cmove rax, rdx; ret;
0x000a7c74: out 0xf0, al; mov edx, 0; pop rbx; cmove rax, rdx; ret;
0x000a7c76: mov edx, 0; pop rbx; cmove rax, rdx; ret;
0x000a7c77: add [rax], al; add [rax], al; pop rbx; cmove rax, rdx; ret;
0x000a7c78: add [rax], al; add [rbx+0x48], bl; cmove eax, edx; ret;
0x000a7c79: add [rax], al; pop rbx; cmove rax, rdx; ret;
0x000a7c7a: add [rbx+0x48], bl; cmove eax, edx; ret;
0x000a7c7b: pop rbx; cmove rax, rdx; ret;
0x000a7c81: nop [rax]; mov eax, ecx; pop rbx; shr eax, 0xe; and eax, 0x3fc00; ret;
0x000a7c86: add [rax], al; mov eax, ecx; pop rbx; shr eax, 0xe; and eax, 0x3fc00; ret;
0x000a7c88: mov eax, ecx; pop rbx; shr eax, 0xe; and eax, 0x3fc00; ret;
0x000a7c8a: pop rbx; shr eax, 0xe; and eax, 0x3fc00; ret;
0x000a7c8b: shr eax, 0xe; and eax, 0x3fc00; ret;
0x000a7c8e: and eax, 0x3fc00; ret;
0x000a7c8f: add ah, bh; add eax, [rax]; ret;
0x000a7c90: cld; add eax, [rax]; ret;
0x000a7c91: add eax, [rax]; ret;
0x000a7ca4: mov ecx, eax; mov eax, edx; and ecx, 0x3fc00; cmp edx, 0xff; cmove rax, rcx; ret;
0x000a7ca5: ror dword ptr [rcx+0xe181d0], 0xfc; add eax, [rax]; cmp edx, 0xff; cmove rax, rcx; ret;
0x000a7ca6: mov eax, edx; and ecx, 0x3fc00; cmp edx, 0xff; cmove rax, rcx; ret;
0x000a7ca8: and ecx, 0x3fc00; cmp edx, 0xff; cmove rax, rcx; ret;
0x000a7caa: add ah, bh; add eax, [rax]; cmp edx, 0xff; cmove rax, rcx; ret;
0x000a7cab: cld; add eax, [rax]; cmp edx, 0xff; cmove rax, rcx; ret;
0x000a7cac: add eax, [rax]; cmp edx, 0xff; cmove rax, rcx; ret;
0x000a7cae: cmp edx, 0xff; cmove rax, rcx; ret;
0x000a7caf: cli; inc dword ptr [rax]; add [rax], al; cmove rax, rcx; ret;
0x000a7cb0: inc dword ptr [rax]; add [rax], al; cmove rax, rcx; ret;
0x000a7cb2: add [rax], al; cmove rax, rcx; ret;
0x000a7cb4: cmove rax, rcx; ret;
0x000a7cb5: cmove eax, ecx; ret;
0x000a7cb9: nop [rax]; movzx eax, cl; pop rbx; ret;
0x000a7cbb: add byte ptr [rax], 0; add [rax], al; movzx eax, cl; pop rbx; ret;
0x000a7cbc: add [rax], al; add [rax], al; movzx eax, cl; pop rbx; ret;
0x000a7cbd: add [rax], al; add [rdi], cl; mov dh, 0xc1; pop rbx; ret;
0x000a7cbe: add [rax], al; movzx eax, cl; pop rbx; ret;
0x000a7cbf: add [rdi], cl; mov dh, 0xc1; pop rbx; ret;
0x000a7cc0: movzx eax, cl; pop rbx; ret;
0x000a7cc1: mov dh, 0xc1; pop rbx; ret;
0x000a7cd3: mov eax, ecx; pop rbx; shr eax, 6; and eax, 0x3fffc00; ret;
0x000a7cd5: pop rbx; shr eax, 6; and eax, 0x3fffc00; ret;
0x000a7cd6: shr eax, 6; and eax, 0x3fffc00; ret;
0x000a7cd9: and eax, 0x3fffc00; ret;
0x000a7cda: add ah, bh; inc dword ptr [rbx]; ret;
0x000a7cdb: cld; inc dword ptr [rbx]; ret;
0x000a7cdc: inc dword ptr [rbx]; ret;
0x000a7ce6: fmul st, dword ptr [rip+0xce8c100]; mov edx, eax; and edx, 0xf; movsxd rax, [rsi+rdx*4]; add rax, rsi; jmp rax;
0x000a7ce7: or eax, 0xce8c100; mov edx, eax; and edx, 0xf; movsxd rax, [rsi+rdx*4]; add rax, rsi; jmp rax;
0x000a7ce9: shr eax, 0xc; mov edx, eax; and edx, 0xf; movsxd rax, [rsi+rdx*4]; add rax, rsi; jmp rax;
0x000a7ceb: or al, 0x89; ret 0xe283;
0x000a7cec: mov edx, eax; and edx, 0xf; movsxd rax, [rsi+rdx*4]; add rax, rsi; jmp rax;
0x000a7cee: and edx, 0xf; movsxd rax, [rsi+rdx*4]; add rax, rsi; jmp rax;
0x000a7cf0: cmovs esp, [rbx+4]; xchg esi, eax; add rax, rsi; jmp rax;
0x000a7d00: movzx edx, cl; mov eax, 0; and ch, 0xf0; pop rbx; cmovne rax, rdx; ret;
0x000a7d01: mov dh, 0xd1; mov eax, 0; and ch, 0xf0; pop rbx; cmovne rax, rdx; ret;
0x000a7d02: sar dword ptr [rax], 1; and ch, 0xf0; pop rbx; cmovne rax, rdx; ret;
0x000a7d03: mov eax, 0; and ch, 0xf0; pop rbx; cmovne rax, rdx; ret;
0x000a7d04: add [rax], al; add [rax], al; and ch, 0xf0; pop rbx; cmovne rax, rdx; ret;
0x000a7d05: add [rax], al; add [rax+0x485bf0e5], al; cmovne eax, edx; ret;
0x000a7d06: add [rax], al; and ch, 0xf0; pop rbx; cmovne rax, rdx; ret;
0x000a7d07: add [rax+0x485bf0e5], al; cmovne eax, edx; ret;
0x000a7d08: and ch, 0xf0; pop rbx; cmovne rax, rdx; ret;
0x000a7d09: in eax, 0xf0; pop rbx; cmovne rax, rdx; ret;
0x000a7d0b: pop rbx; cmovne rax, rdx; ret;
0x000a7d23: lea eax, [rdx+rdx]; pop rbx; and eax, 0x7ff80000; ret;
0x000a7d24: add al, 0x12; pop rbx; and eax, 0x7ff80000; ret;
0x000a7d26: pop rbx; and eax, 0x7ff80000; ret;
0x000a7d27: and eax, 0x7ff80000; ret;
0x000a7d2d: nop [rax]; mov rax, rdx; pop rbx; ret;
0x000a7d2f: add [rax-0x77], cl; rcr byte ptr [rbx-0x3d], 1; mov eax, 0x60; pop rbx; ret;
0x000a7d30: mov rax, rdx; pop rbx; ret;
0x000a7d31: mov eax, edx; pop rbx; ret;
0x000a7d32: rcr byte ptr [rbx-0x3d], 1; mov eax, 0x60; pop rbx; ret;
0x000a7d35: mov eax, 0x60; pop rbx; ret;
0x000a7d37: add [rax], al; add [rbx-0x3d], bl; mov eax, 0x40; pop rbx; ret;
0x000a7d39: add [rbx-0x3d], bl; mov eax, 0x40; pop rbx; ret;
0x000a7d3c: mov eax, 0x40; pop rbx; ret;
0x000a7d3e: add [rax], al; add [rbx-0x3d], bl; mov eax, 0x30; pop rbx; ret;
0x000a7d40: add [rbx-0x3d], bl; mov eax, 0x30; pop rbx; ret;
0x000a7d43: mov eax, 0x30; pop rbx; ret;
0x000a7d44: xor [rax], al; add [rax], al; pop rbx; ret;
0x000a7d45: add [rax], al; add [rbx-0x3d], bl; mov eax, 0x20; pop rbx; ret;
0x000a7d47: add [rbx-0x3d], bl; mov eax, 0x20; pop rbx; ret;
0x000a7d4a: mov eax, 0x20; pop rbx; ret;
0x000a7d4b: and [rax], al; add [rax], al; pop rbx; ret;
0x000a7d4c: add [rax], al; add [rbx-0x3d], bl; mov eax, 0x10; pop rbx; ret;
0x000a7d4e: add [rbx-0x3d], bl; mov eax, 0x10; pop rbx; ret;
0x000a7d51: mov eax, 0x10; pop rbx; ret;
0x000a7d52: adc [rax], al; add [rax], al; pop rbx; ret;
0x000a7d53: add [rax], al; add [rbx-0x3d], bl; mov eax, 8; pop rbx; ret;
0x000a7d55: add [rbx-0x3d], bl; mov eax, 8; pop rbx; ret;
0x000a7d58: mov eax, 8; pop rbx; ret;
0x000a7d59: or [rax], al; add [rax], al; pop rbx; ret;
0x000a7d5a: add [rax], al; add [rbx-0x3d], bl; mov eax, 0x80; pop rbx; ret;
0x000a7d5c: add [rbx-0x3d], bl; mov eax, 0x80; pop rbx; ret;
0x000a7d5f: mov eax, 0x80; pop rbx; ret;
0x000a7d6e: pop rbx; mov eax, ecx; and eax, 0x7ff80000; div esi; mov eax, eax; ret;
0x000a7d6f: mov eax, ecx; and eax, 0x7ff80000; div esi; mov eax, eax; ret;
0x000a7d71: and eax, 0x7ff80000; div esi; mov eax, eax; ret;
0x000a7d76: div esi; mov eax, eax; ret;
0x000a7d84: mov eax, edx; xor edx, edx; and eax, 0x3fffc00; div ecx; mov eax, eax; ret;
0x000a7d85: shl byte ptr [rcx], 1; shl byte ptr [rip+0x3fffc00], cl; div ecx; mov eax, eax; ret;
0x000a7d86: xor edx, edx; and eax, 0x3fffc00; div ecx; mov eax, eax; ret;
0x000a7d87: shl byte ptr [rip+0x3fffc00], cl; div ecx; mov eax, eax; ret;
0x000a7d88: and eax, 0x3fffc00; div ecx; mov eax, eax; ret;
0x000a7d89: add ah, bh; inc dword ptr [rbx]; div ecx; mov eax, eax; ret;
0x000a7d8a: cld; inc dword ptr [rbx]; div ecx; mov eax, eax; ret;
0x000a7d8b: inc dword ptr [rbx]; div ecx; mov eax, eax; ret;
0x000a7d8c: add esi, edi; int1; mov eax, eax; ret;
0x000a7d8d: div ecx; mov eax, eax; ret;
0x000a7d8e: int1; mov eax, eax; ret;
0x000a7dd9: dec dword ptr [rax+0x63]; ret 0xfac1;
0x000a7ea8: add [rbp-0x75], esi; xor eax, eax; pop rbx; pop rbp; pop r12; ret;
0x000a7eaa: mov esi, [rcx]; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret;
0x000a7f7f: add [rbx-0x3f7cfe3e], al; add [rdi], ecx; scasd [rdi]; ret 0xda89;
0x000a7f82: add [rbx-0x50f0fe40], eax; ret 0xda89;
0x000a7f84: rol byte ptr [rcx], 0xf; scasd [rdi]; ret 0xda89;
0x000a7f85: add [rdi], ecx; scasd [rdi]; ret 0xda89;
0x000a7f87: scasd [rdi]; ret 0xda89;
0x000a7f88: ret 0xda89;
0x000a7f8a: fiadd st, dword ptr [rcx+0x3ffe2]; add [rbx-0x50f0fe3e], al; ror dword ptr [rdi], 0xaf; ret 0xee9;
0x000a7f8e: add eax, [rax]; add [rbx-0x50f0fe3e], al; ror dword ptr [rdi], 0xaf; ret 0xee9;
0x000a7f90: add [rbx-0x50f0fe3e], al; ror dword ptr [rdi], 0xaf; ret 0xee9;
0x000a7f93: add [rdi], ecx; scasd [rdi]; ror dword ptr [rdi], 0xaf; ret 0xee9;
0x000a7f95: scasd [rdi]; ror dword ptr [rdi], 0xaf; ret 0xee9;
0x000a7f96: ror dword ptr [rdi], 0xaf; ret 0xee9;
0x000a7f98: scasd [rdi]; ret 0xee9;
0x000a7f99: ret 0xee9;
0x000a809d: or [rcx-0x77], al; iretd;
0x000a81a7: add [rax-0x7d], cl; ret 0x4001;
0x000a81c0: sub dword ptr [rbx], 0xe274b104; ret;
0x000a8208: add [rcx+0x39], ecx; ret 0x1574;
0x000a820b: ret 0x1574;
0x000a8220: mov cl, 0x74; fisttp qword ptr [rcx+0x2e66c3d0], st; nop [rax+rax]; xor edx, edx; mov eax, edx; ret;
0x000a8222: fisttp qword ptr [rcx+0x2e66c3d0], st; nop [rax+rax]; xor edx, edx; mov eax, edx; ret;
0x000a8224: rol bl, 1; nop [rax+rax]; xor edx, edx; mov eax, edx; ret;
0x000a8226: nop [rax+rax]; xor edx, edx; mov eax, edx; ret;
0x000a8227: nop [rax+rax]; xor edx, edx; mov eax, edx; ret;
0x000a8228: nop [rax+rax]; xor edx, edx; mov eax, edx; ret;
0x000a822a: test [rax], al; add [rax], al; add [rax], al; xor edx, edx; mov eax, edx; ret;
0x000a822c: add [rax], al; add [rax], al; xor edx, edx; mov eax, edx; ret;
0x000a822e: add [rax], al; xor edx, edx; mov eax, edx; ret;
0x000a8230: xor edx, edx; mov eax, edx; ret;
0x000a825c: idiv edi; add rsp, 8; mov rax, r12; pop rbp; pop r12; ret;
0x000a8288: mov rdx, 0x10000000002; cmp rax, rdx; lea rdx, [rip+0xbbd54]; lea rax, [rip+0x10d8d]; cmove rax, rdx; ret;
0x000a8290: add [rax], al; cmp rax, rdx; lea rdx, [rip+0xbbd54]; lea rax, [rip+0x10d8d]; cmove rax, rdx; ret;
0x000a8291: add [rax+0x39], cl; ror byte ptr [rax-0x73], 1; adc eax, 0xbbd54; lea rax, [rip+0x10d8d]; cmove rax, rdx; ret;
0x000a8292: cmp rax, rdx; lea rdx, [rip+0xbbd54]; lea rax, [rip+0x10d8d]; cmove rax, rdx; ret;
0x000a8293: cmp eax, edx; lea rdx, [rip+0xbbd54]; lea rax, [rip+0x10d8d]; cmove rax, rdx; ret;
0x000a8294: ror byte ptr [rax-0x73], 1; adc eax, 0xbbd54; lea rax, [rip+0x10d8d]; cmove rax, rdx; ret;
0x000a8295: lea rdx, [rip+0xbbd54]; lea rax, [rip+0x10d8d]; cmove rax, rdx; ret;
0x000a8296: lea edx, [rip+0xbbd54]; lea rax, [rip+0x10d8d]; cmove rax, rdx; ret;
0x000a8297: adc eax, 0xbbd54; lea rax, [rip+0x10d8d]; cmove rax, rdx; ret;
0x000a8298: push rsp; mov ebp, 0x8d48000b; add eax, 0x10d8d; cmove rax, rdx; ret;
0x000a8299: mov ebp, 0x8d48000b; add eax, 0x10d8d; cmove rax, rdx; ret;
0x000a829a: or eax, [rax]; lea rax, [rip+0x10d8d]; cmove rax, rdx; ret;
0x000a829b: add [rax-0x73], cl; add eax, 0x10d8d; cmove rax, rdx; ret;
0x000a829c: lea rax, [rip+0x10d8d]; cmove rax, rdx; ret;
0x000a829d: lea eax, [rip+0x10d8d]; cmove rax, rdx; ret;
0x000a829e: add eax, 0x10d8d; cmove rax, rdx; ret;
0x000a829f: lea ecx, [rip+0xf480001]; ret 0xfc3;
0x000a82a0: or eax, 0xf480001; ret 0xfc3;
0x000a82c8: mov rdx, 0x10000000002; cmp rax, rdx; lea rdx, [rip+0xbb3b4]; lea rax, [rip+0xff7d]; cmove rax, rdx; ret;
0x000a82d0: add [rax], al; cmp rax, rdx; lea rdx, [rip+0xbb3b4]; lea rax, [rip+0xff7d]; cmove rax, rdx; ret;
0x000a82d1: add [rax+0x39], cl; ror byte ptr [rax-0x73], 1; adc eax, 0xbb3b4; lea rax, [rip+0xff7d]; cmove rax, rdx; ret;
0x000a82d2: cmp rax, rdx; lea rdx, [rip+0xbb3b4]; lea rax, [rip+0xff7d]; cmove rax, rdx; ret;
0x000a82d3: cmp eax, edx; lea rdx, [rip+0xbb3b4]; lea rax, [rip+0xff7d]; cmove rax, rdx; ret;
0x000a82d4: ror byte ptr [rax-0x73], 1; adc eax, 0xbb3b4; lea rax, [rip+0xff7d]; cmove rax, rdx; ret;
0x000a82d5: lea rdx, [rip+0xbb3b4]; lea rax, [rip+0xff7d]; cmove rax, rdx; ret;
0x000a82d6: lea edx, [rip+0xbb3b4]; lea rax, [rip+0xff7d]; cmove rax, rdx; ret;
0x000a82d7: adc eax, 0xbb3b4; lea rax, [rip+0xff7d]; cmove rax, rdx; ret;
0x000a82d8: mov ah, 0xb3; or eax, [rax]; lea rax, [rip+0xff7d]; cmove rax, rdx; ret;
0x000a82d9: mov bl, 0xb; add [rax-0x73], cl; add eax, 0xff7d; cmove rax, rdx; ret;
0x000a82da: or eax, [rax]; lea rax, [rip+0xff7d]; cmove rax, rdx; ret;
0x000a82db: add [rax-0x73], cl; add eax, 0xff7d; cmove rax, rdx; ret;
0x000a82dc: lea rax, [rip+0xff7d]; cmove rax, rdx; ret;
0x000a82dd: lea eax, [rip+0xff7d]; cmove rax, rdx; ret;
0x000a82de: add eax, 0xff7d; cmove rax, rdx; ret;
0x000a82e0: inc dword ptr [rax]; add [rax+0xf], cl; ret 0xfc3;
0x000a82f0: mov rax, [rip+0x115b69]; lea rdx, [rip+0xac9d2]; test byte ptr [rax+0x71], 2; lea rax, [rip+0x10cf7]; cmovne rax, rdx; ret;
0x000a82f1: mov eax, [rip+0x115b69]; lea rdx, [rip+0xac9d2]; test byte ptr [rax+0x71], 2; lea rax, [rip+0x10cf7]; cmovne rax, rdx; ret;
0x000a82f2: add eax, 0x115b69; lea rdx, [rip+0xac9d2]; test byte ptr [rax+0x71], 2; lea rax, [rip+0x10cf7]; cmovne rax, rdx; ret;
0x000a82f5: adc [rax], eax; lea rdx, [rip+0xac9d2]; test byte ptr [rax+0x71], 2; lea rax, [rip+0x10cf7]; cmovne rax, rdx; ret;
0x000a82f6: add [rax-0x73], cl; adc eax, 0xac9d2; test byte ptr [rax+0x71], 2; lea rax, [rip+0x10cf7]; cmovne rax, rdx; ret;
0x000a82f7: lea rdx, [rip+0xac9d2]; test byte ptr [rax+0x71], 2; lea rax, [rip+0x10cf7]; cmovne rax, rdx; ret;
0x000a82f8: lea edx, [rip+0xac9d2]; test byte ptr [rax+0x71], 2; lea rax, [rip+0x10cf7]; cmovne rax, rdx; ret;
0x000a82f9: adc eax, 0xac9d2; test byte ptr [rax+0x71], 2; lea rax, [rip+0x10cf7]; cmovne rax, rdx; ret;
0x000a82fa: ror cl, cl; or al, [rax]; test byte ptr [rax+0x71], 2; lea rax, [rip+0x10cf7]; cmovne rax, rdx; ret;
0x000a82fb: leave; or al, [rax]; test byte ptr [rax+0x71], 2; lea rax, [rip+0x10cf7]; cmovne rax, rdx; ret;
0x000a82fc: or al, [rax]; test byte ptr [rax+0x71], 2; lea rax, [rip+0x10cf7]; cmovne rax, rdx; ret;
0x000a82fe: test byte ptr [rax+0x71], 2; lea rax, [rip+0x10cf7]; cmovne rax, rdx; ret;
0x000a8301: add cl, [rax-0x73]; add eax, 0x10cf7; cmovne rax, rdx; ret;
0x000a8302: lea rax, [rip+0x10cf7]; cmovne rax, rdx; ret;
0x000a8303: lea eax, [rip+0x10cf7]; cmovne rax, rdx; ret;
0x000a8304: add eax, 0x10cf7; cmovne rax, rdx; ret;
0x000a8305: test dword ptr [rcx+rax], 0x450f4800; ret 0x66c3;
0x000a8306: or al, 1; add [rax+0xf], cl; ret 0x66c3;
0x000a8307: add [rax], eax; cmovne rax, rdx; ret;
0x000a8340: out 0x4c, eax; mov eax, esp; pop rbx; pop rbp; pop r12; ret;
0x000a8369: out 0xe8, eax; cdq; iretd;
0x000a836b: cdq; iretd;
0x000a8387: idiv edi; pop rdx; xor eax, eax; pop rbp; pop r12; ret;
0x000a8388: call far fword ptr [rdx+0x31];
0x000a8389: pop rdx; xor eax, eax; pop rbp; pop r12; ret;
0x000a83a8: mov rdx, 0x10000000002; cmp rax, rdx; lea rdx, [rip+0xbc054]; lea rax, [rip+0x1135d]; cmove rax, rdx; ret;
0x000a83b0: add [rax], al; cmp rax, rdx; lea rdx, [rip+0xbc054]; lea rax, [rip+0x1135d]; cmove rax, rdx; ret;
0x000a83b1: add [rax+0x39], cl; ror byte ptr [rax-0x73], 1; adc eax, 0xbc054; lea rax, [rip+0x1135d]; cmove rax, rdx; ret;
0x000a83b2: cmp rax, rdx; lea rdx, [rip+0xbc054]; lea rax, [rip+0x1135d]; cmove rax, rdx; ret;
0x000a83b3: cmp eax, edx; lea rdx, [rip+0xbc054]; lea rax, [rip+0x1135d]; cmove rax, rdx; ret;
0x000a83b4: ror byte ptr [rax-0x73], 1; adc eax, 0xbc054; lea rax, [rip+0x1135d]; cmove rax, rdx; ret;
0x000a83b5: lea rdx, [rip+0xbc054]; lea rax, [rip+0x1135d]; cmove rax, rdx; ret;
0x000a83b6: lea edx, [rip+0xbc054]; lea rax, [rip+0x1135d]; cmove rax, rdx; ret;
0x000a83b7: adc eax, 0xbc054; lea rax, [rip+0x1135d]; cmove rax, rdx; ret;
0x000a83b8: push rsp; ror byte ptr [rbx], 0; lea rax, [rip+0x1135d]; cmove rax, rdx; ret;
0x000a83b9: ror byte ptr [rbx], 0; lea rax, [rip+0x1135d]; cmove rax, rdx; ret;
0x000a83ba: or eax, [rax]; lea rax, [rip+0x1135d]; cmove rax, rdx; ret;
0x000a83bb: add [rax-0x73], cl; add eax, 0x1135d; cmove rax, rdx; ret;
0x000a83bc: lea rax, [rip+0x1135d]; cmove rax, rdx; ret;
0x000a83bd: lea eax, [rip+0x1135d]; cmove rax, rdx; ret;
0x000a83be: add eax, 0x1135d; cmove rax, rdx; ret;
0x000a83bf: pop rbp; adc eax, [rcx]; add [rax+0xf], cl; ret 0xfc3;
0x000a83c0: adc eax, [rcx]; add [rax+0xf], cl; ret 0xfc3;
0x000a8401: xchg [rax], al; add [rax], al; add [rax-0x77], cl; ret 0xb2e8;
0x000a8403: add [rax], al; add [rax-0x77], cl; ret 0xb2e8;
0x000a8405: add [rax-0x77], cl; ret 0xb2e8;
0x000a8408: ret 0xb2e8;
0x000a8411: or [rcx+rcx*4-0x20], cl; pop rbp; pop r12; pop r13; pop r14; ret;
0x000a8438: mov rdx, 0x10000000002; cmp rax, rdx; lea rdx, [rip+0xbb684]; lea rax, [rip+0x10add]; cmove rax, rdx; ret;
0x000a8440: add [rax], al; cmp rax, rdx; lea rdx, [rip+0xbb684]; lea rax, [rip+0x10add]; cmove rax, rdx; ret;
0x000a8441: add [rax+0x39], cl; ror byte ptr [rax-0x73], 1; adc eax, 0xbb684; lea rax, [rip+0x10add]; cmove rax, rdx; ret;
0x000a8442: cmp rax, rdx; lea rdx, [rip+0xbb684]; lea rax, [rip+0x10add]; cmove rax, rdx; ret;
0x000a8443: cmp eax, edx; lea rdx, [rip+0xbb684]; lea rax, [rip+0x10add]; cmove rax, rdx; ret;
0x000a8444: ror byte ptr [rax-0x73], 1; adc eax, 0xbb684; lea rax, [rip+0x10add]; cmove rax, rdx; ret;
0x000a8445: lea rdx, [rip+0xbb684]; lea rax, [rip+0x10add]; cmove rax, rdx; ret;
0x000a8446: lea edx, [rip+0xbb684]; lea rax, [rip+0x10add]; cmove rax, rdx; ret;
0x000a8447: adc eax, 0xbb684; lea rax, [rip+0x10add]; cmove rax, rdx; ret;
0x000a8448: test [rsi-0x72b7fff5], dh; add eax, 0x10add; cmove rax, rdx; ret;
0x000a8449: mov dh, 0xb; add [rax-0x73], cl; add eax, 0x10add; cmove rax, rdx; ret;
0x000a844a: or eax, [rax]; lea rax, [rip+0x10add]; cmove rax, rdx; ret;
0x000a844b: add [rax-0x73], cl; add eax, 0x10add; cmove rax, rdx; ret;
0x000a844c: lea rax, [rip+0x10add]; cmove rax, rdx; ret;
0x000a844d: lea eax, [rip+0x10add]; cmove rax, rdx; ret;
0x000a844e: add eax, 0x10add; cmove rax, rdx; ret;
0x000a844f: fisttp qword ptr [rdx], st; add [rax], eax; cmove rax, rdx; ret;
0x000a8450: or al, [rcx]; add [rax+0xf], cl; ret 0xfc3;
0x000a8485: adc cl, [rax+0x29]; ret;
0x000a84c7: add [rbx-0x7cb7fb8d], cl; ret;
0x000a84e0: mov rax, rbx; add rsp, 8; pop rbx; pop rbp; ret;
0x000a84e1: mov eax, ebx; add rsp, 8; pop rbx; pop rbp; ret;
0x000a8508: mov rdx, 0x10000000002; cmp rax, rdx; lea rdx, [rip+0xbbd04]; lea rax, [rip+0x10c9d]; cmove rax, rdx; ret;
0x000a8510: add [rax], al; cmp rax, rdx; lea rdx, [rip+0xbbd04]; lea rax, [rip+0x10c9d]; cmove rax, rdx; ret;
0x000a8511: add [rax+0x39], cl; ror byte ptr [rax-0x73], 1; adc eax, 0xbbd04; lea rax, [rip+0x10c9d]; cmove rax, rdx; ret;
0x000a8512: cmp rax, rdx; lea rdx, [rip+0xbbd04]; lea rax, [rip+0x10c9d]; cmove rax, rdx; ret;
0x000a8513: cmp eax, edx; lea rdx, [rip+0xbbd04]; lea rax, [rip+0x10c9d]; cmove rax, rdx; ret;
0x000a8514: ror byte ptr [rax-0x73], 1; adc eax, 0xbbd04; lea rax, [rip+0x10c9d]; cmove rax, rdx; ret;
0x000a8515: lea rdx, [rip+0xbbd04]; lea rax, [rip+0x10c9d]; cmove rax, rdx; ret;
0x000a8516: lea edx, [rip+0xbbd04]; lea rax, [rip+0x10c9d]; cmove rax, rdx; ret;
0x000a8517: adc eax, 0xbbd04; lea rax, [rip+0x10c9d]; cmove rax, rdx; ret;
0x000a8518: add al, 0xbd; or eax, [rax]; lea rax, [rip+0x10c9d]; cmove rax, rdx; ret;
0x000a8519: mov ebp, 0x8d48000b; add eax, 0x10c9d; cmove rax, rdx; ret;
0x000a851a: or eax, [rax]; lea rax, [rip+0x10c9d]; cmove rax, rdx; ret;
0x000a851b: add [rax-0x73], cl; add eax, 0x10c9d; cmove rax, rdx; ret;
0x000a851c: lea rax, [rip+0x10c9d]; cmove rax, rdx; ret;
0x000a851d: lea eax, [rip+0x10c9d]; cmove rax, rdx; ret;
0x000a851e: add eax, 0x10c9d; cmove rax, rdx; ret;
0x000a851f: popfq; or al, 1; add [rax+0xf], cl; ret 0xfc3;
0x000a8520: or al, 1; add [rax+0xf], cl; ret 0xfc3;
0x000a8521: add [rax], eax; cmove rax, rdx; ret;
0x000a8557: add [rbx-0x7cb7fbbe], cl; ret 0x8504;
0x000a856e: xchg [rbp+0x4cd575c9], eax; mov eax, eax; ret;
0x000a862e: or [rbx+0x4c], bl; mov eax, ebp; pop rbp; pop r12; pop r13; ret;
0x000a8664: rol byte ptr [rax*4+0x31ee75d2], 0xc0; ret;
0x000a8665: add al, 0x85; shl byte ptr [rbp-0x12], cl; xor eax, eax; ret;
0x000a8667: shl byte ptr [rbp-0x12], cl; xor eax, eax; ret;
0x000a8669: out dx, al; xor eax, eax; ret;
0x000a8701: shl byte ptr [rbp-0x24], cl; ret;
0x000a8703: fadd st(3), st; ret;
0x000a8728: mov rdx, 0x10000000002; cmp rax, rdx; lea rdx, [rip+0xbac84]; lea rax, [rip+0xf7ed]; cmove rax, rdx; ret;
0x000a8730: add [rax], al; cmp rax, rdx; lea rdx, [rip+0xbac84]; lea rax, [rip+0xf7ed]; cmove rax, rdx; ret;
0x000a8731: add [rax+0x39], cl; ror byte ptr [rax-0x73], 1; adc eax, 0xbac84; lea rax, [rip+0xf7ed]; cmove rax, rdx; ret;
0x000a8732: cmp rax, rdx; lea rdx, [rip+0xbac84]; lea rax, [rip+0xf7ed]; cmove rax, rdx; ret;
0x000a8733: cmp eax, edx; lea rdx, [rip+0xbac84]; lea rax, [rip+0xf7ed]; cmove rax, rdx; ret;
0x000a8734: ror byte ptr [rax-0x73], 1; adc eax, 0xbac84; lea rax, [rip+0xf7ed]; cmove rax, rdx; ret;
0x000a8735: lea rdx, [rip+0xbac84]; lea rax, [rip+0xf7ed]; cmove rax, rdx; ret;
0x000a8736: lea edx, [rip+0xbac84]; lea rax, [rip+0xf7ed]; cmove rax, rdx; ret;
0x000a8737: adc eax, 0xbac84; lea rax, [rip+0xf7ed]; cmove rax, rdx; ret;
0x000a8738: test [rbx+rcx+0x58d4800], ch; in eax, dx; test dword ptr [rax], 0x440f4800; ret 0xfc3;
0x000a8739: lodsb [rsi]; or eax, [rax]; lea rax, [rip+0xf7ed]; cmove rax, rdx; ret;
0x000a873a: or eax, [rax]; lea rax, [rip+0xf7ed]; cmove rax, rdx; ret;
0x000a873b: add [rax-0x73], cl; add eax, 0xf7ed; cmove rax, rdx; ret;
0x000a873c: lea rax, [rip+0xf7ed]; cmove rax, rdx; ret;
0x000a873d: lea eax, [rip+0xf7ed]; cmove rax, rdx; ret;
0x000a873e: add eax, 0xf7ed; cmove rax, rdx; ret;
0x000a873f: in eax, dx; test dword ptr [rax], 0x440f4800; ret 0xfc3;
0x000a8740: test dword ptr [rax], 0x440f4800; ret 0xfc3;
0x000a877d: add [rbp+0x15], dh; and ch, 2; lea rax, [rip+0xf726]; lea rdx, [rip+0xc121f]; cmovne rax, rdx; ret;
0x000a877f: adc eax, 0x4802e580; lea eax, [rip+0xf726]; lea rdx, [rip+0xc121f]; cmovne rax, rdx; ret;
0x000a8780: and ch, 2; lea rax, [rip+0xf726]; lea rdx, [rip+0xc121f]; cmovne rax, rdx; ret;
0x000a8781: in eax, 2; lea rax, [rip+0xf726]; lea rdx, [rip+0xc121f]; cmovne rax, rdx; ret;
0x000a8782: add cl, [rax-0x73]; add eax, 0xf726; lea rdx, [rip+0xc121f]; cmovne rax, rdx; ret;
0x000a8783: lea rax, [rip+0xf726]; lea rdx, [rip+0xc121f]; cmovne rax, rdx; ret;
0x000a8784: lea eax, [rip+0xf726]; lea rdx, [rip+0xc121f]; cmovne rax, rdx; ret;
0x000a8785: add eax, 0xf726; lea rdx, [rip+0xc121f]; cmovne rax, rdx; ret;
0x000a8788: add [rax], al; lea rdx, [rip+0xc121f]; cmovne rax, rdx; ret;
0x000a8789: add [rax-0x73], cl; adc eax, 0xc121f; cmovne rax, rdx; ret;
0x000a878a: lea rdx, [rip+0xc121f]; cmovne rax, rdx; ret;
0x000a878b: lea edx, [rip+0xc121f]; cmovne rax, rdx; ret;
0x000a878c: adc eax, 0xc121f; cmovne rax, rdx; ret;
0x000a878e: adc cl, [rax+rax]; cmovne rax, rdx; ret;
0x000a878f: or al, 0; cmovne rax, rdx; ret;
0x000a8822: and rdx, rax; lea rax, [rip+0xba684]; cmp rdx, 4; cmovne r8, rax; mov rax, r8; ret;
0x000a8823: and edx, eax; lea rax, [rip+0xba684]; cmp rdx, 4; cmovne r8, rax; mov rax, r8; ret;
0x000a8825: lea rax, [rip+0xba684]; cmp rdx, 4; cmovne r8, rax; mov rax, r8; ret;
0x000a8826: lea eax, [rip+0xba684]; cmp rdx, 4; cmovne r8, rax; mov rax, r8; ret;
0x000a8827: add eax, 0xba684; cmp rdx, 4; cmovne r8, rax; mov rax, r8; ret;
0x000a8828: test [rsi-0x7cb7fff5], ah; cli; add al, 0x4c; cmovne eax, eax; mov rax, r8; ret;
0x000a8829: cmpsb [rsi], [rdi]; or eax, [rax]; cmp rdx, 4; cmovne r8, rax; mov rax, r8; ret;
0x000a882a: or eax, [rax]; cmp rdx, 4; cmovne r8, rax; mov rax, r8; ret;
0x000a8863: dec dword ptr [rax-0x73]; add al, 0x98; pop rbx; pop rbp; pop r12; ret;
0x000a8864: lea rax, [rax+rbx*4]; pop rbx; pop rbp; pop r12; ret;
0x000a8865: lea eax, [rax+rbx*4]; pop rbx; pop rbp; pop r12; ret;
0x000a8866: add al, 0x98; pop rbx; pop rbp; pop r12; ret;
0x000a8867: cwde; pop rbx; pop rbp; pop r12; ret;
0x000a8899: ret 0x21e8;
0x000a88be: call qword ptr [rax+0x8c48348];
0x000a8935: add rsp, 0x68; pop rbx; pop rbp; pop r12; pop r13; ret;
0x000a8936: add esp, 0x68; pop rbx; pop rbp; pop r12; pop r13; ret;
0x000a8938: push 0x5c415d5b; pop r13; ret;
0x000a89aa: mov rax, rbp; pop rbx; pop rbp; pop r12; pop r13; jmp rax;
0x000a89ab: mov eax, ebp; pop rbx; pop rbp; pop r12; pop r13; jmp rax;
0x000a89ad: pop rbx; pop rbp; pop r12; pop r13; jmp rax;
0x000a8a40: and [rdx+1], ch; push 0; lea rcx, [rax+1]; mov rdi, [r12]; lea r9, [rsp+0x28]; call rbx;
0x000a8a41: push 1; push 0; lea rcx, [rax+1]; mov rdi, [r12]; lea r9, [rsp+0x28]; call rbx;
0x000a8a42: add [rdx], ebp; lea rcx, [rax+1]; mov rdi, [r12]; lea r9, [rsp+0x28]; call rbx;
0x000a8a43: push 0; lea rcx, [rax+1]; mov rdi, [r12]; lea r9, [rsp+0x28]; call rbx;
0x000a8a44: add [rax-0x73], cl; add [rcx-0x75], rcx; cmp al, 0x24; lea r9, [rsp+0x28]; call rbx;
0x000a8a45: lea rcx, [rax+1]; mov rdi, [r12]; lea r9, [rsp+0x28]; call rbx;
0x000a8a46: lea ecx, [rax+1]; mov rdi, [r12]; lea r9, [rsp+0x28]; call rbx;
0x000a8a47: add [rcx-0x75], rcx; cmp al, 0x24; lea r9, [rsp+0x28]; call rbx;
0x000a8a48: add [rcx-0x75], ecx; cmp al, 0x24; lea r9, [rsp+0x28]; call rbx;
0x000a8a49: mov rdi, [r12]; lea r9, [rsp+0x28]; call rbx;
0x000a8a4a: mov edi, [rsp]; lea r9, [rsp+0x28]; call rbx;
0x000a8a4b: cmp al, 0x24; lea r9, [rsp+0x28]; call rbx;
0x000a8a4c: and al, 0x4c; lea ecx, [rsp+0x28]; call rbx;
0x000a8b96: lea rsi, [rsp+0x20]; push 1; push 0; lea rcx, [rax+4]; lea r9, [rsp+0x18]; call rbx;
0x000a8b97: lea esi, [rsp+0x20]; push 1; push 0; lea rcx, [rax+4]; lea r9, [rsp+0x18]; call rbx;
0x000a8b99: and al, 0x20; push 1; push 0; lea rcx, [rax+4]; lea r9, [rsp+0x18]; call rbx;
0x000a8b9a: and [rdx+1], ch; push 0; lea rcx, [rax+4]; lea r9, [rsp+0x18]; call rbx;
0x000a8b9b: push 1; push 0; lea rcx, [rax+4]; lea r9, [rsp+0x18]; call rbx;
0x000a8b9c: add [rdx], ebp; lea rcx, [rax+4]; lea r9, [rsp+0x18]; call rbx;
0x000a8b9d: push 0; lea rcx, [rax+4]; lea r9, [rsp+0x18]; call rbx;
0x000a8b9e: add [rax-0x73], cl; add al, 0x4c; lea ecx, [rsp+0x18]; call rbx;
0x000a8b9f: lea rcx, [rax+4]; lea r9, [rsp+0x18]; call rbx;
0x000a8ba0: lea ecx, [rax+4]; lea r9, [rsp+0x18]; call rbx;
0x000a8ba2: add al, 0x4c; lea ecx, [rsp+0x18]; call rbx;
0x000a8ba3: lea r9, [rsp+0x18]; call rbx;
0x000a8ba4: lea ecx, [rsp+0x18]; call rbx;
0x000a8c1a: mov edx, [rdi]; xor eax, eax; test edx, edx; sete al; ret;
0x000a8d53: lea rsi, [rsp+0x20]; push 1; xor r8d, r8d; push 0; lea r9, [rsp+0x18]; call r13;
0x000a8d54: lea rsi, [rsp+0x20]; push 1; xor r8d, r8d; push 0; lea r9, [rsp+0x18]; call r13;
0x000a8d55: lea esi, [rsp+0x20]; push 1; xor r8d, r8d; push 0; lea r9, [rsp+0x18]; call r13;
0x000a8d57: and al, 0x20; push 1; xor r8d, r8d; push 0; lea r9, [rsp+0x18]; call r13;
0x000a8d58: and [rdx+1], ch; xor r8d, r8d; push 0; lea r9, [rsp+0x18]; call r13;
0x000a8d59: push 1; xor r8d, r8d; push 0; lea r9, [rsp+0x18]; call r13;
0x000a8d5a: add [rbp+0x31], eax; shr byte ptr [rdx], 0x4c; lea ecx, [rsp+0x18]; call r13;
0x000a8d5b: xor r8d, r8d; push 0; lea r9, [rsp+0x18]; call r13;
0x000a8d5c: xor eax, eax; push 0; lea r9, [rsp+0x18]; call r13;
0x000a8d5d: shr byte ptr [rdx], 0x4c; lea ecx, [rsp+0x18]; call r13;
0x000a8d5e: push 0; lea r9, [rsp+0x18]; call r13;
0x000a8d5f: add [rbp+rcx*4+0x4c], cl; and al, 0x18; call r13;
0x000a8d60: lea r9, [rsp+0x18]; call r13;
0x000a8d61: lea ecx, [rsp+0x18]; call r13;
0x000a8d63: and al, 0x18; call r13;
0x000a8f22: mov rdi, [r12+0x10]; push 1; xor edx, edx; push 1; lea r9, [rsp+0x20]; call rbx;
0x000a8f23: mov edi, [rsp+0x10]; push 1; xor edx, edx; push 1; lea r9, [rsp+0x20]; call rbx;
0x000a8f25: and al, 0x10; push 1; xor edx, edx; push 1; lea r9, [rsp+0x20]; call rbx;
0x000a8f26: adc [rdx+1], ch; xor edx, edx; push 1; lea r9, [rsp+0x20]; call rbx;
0x000a8f27: push 1; xor edx, edx; push 1; lea r9, [rsp+0x20]; call rbx;
0x000a8f28: add [rcx], esi; shr byte ptr [rdx+1], cl; lea r9, [rsp+0x20]; call rbx;
0x000a8f29: xor edx, edx; push 1; lea r9, [rsp+0x20]; call rbx;
0x000a8f2a: shr byte ptr [rdx+1], cl; lea r9, [rsp+0x20]; call rbx;
0x000a8f2b: push 1; lea r9, [rsp+0x20]; call rbx;
0x000a8f2c: add [rbp+rcx*4+0x4c], ecx; and al, 0x20; call rbx;
0x000a8f68: add [rax], al; add rsp, 0x70; pop rbx; pop rbp; pop r12; ret;
0x000a8f6a: add rsp, 0x70; pop rbx; pop rbp; pop r12; ret;
0x000a8f6b: add esp, 0x70; pop rbx; pop rbp; pop r12; ret;
0x000a8f9c: mov rdi, [r12+0x10]; push 1; push 0; lea rcx, [rax+4]; lea r9, [rsp+0x20]; call rbx;
0x000a8f9d: mov edi, [rsp+0x10]; push 1; push 0; lea rcx, [rax+4]; lea r9, [rsp+0x20]; call rbx;
0x000a8f9f: and al, 0x10; push 1; push 0; lea rcx, [rax+4]; lea r9, [rsp+0x20]; call rbx;
0x000a8fa0: adc [rdx+1], ch; push 0; lea rcx, [rax+4]; lea r9, [rsp+0x20]; call rbx;
0x000a8fa1: push 1; push 0; lea rcx, [rax+4]; lea r9, [rsp+0x20]; call rbx;
0x000a8fa2: add [rdx], ebp; lea rcx, [rax+4]; lea r9, [rsp+0x20]; call rbx;
0x000a8fa3: push 0; lea rcx, [rax+4]; lea r9, [rsp+0x20]; call rbx;
0x000a8fa4: add [rax-0x73], cl; add al, 0x4c; lea ecx, [rsp+0x20]; call rbx;
0x000a8fa5: lea rcx, [rax+4]; lea r9, [rsp+0x20]; call rbx;
0x000a8fa6: lea ecx, [rax+4]; lea r9, [rsp+0x20]; call rbx;
0x000a8fa8: add al, 0x4c; lea ecx, [rsp+0x20]; call rbx;
0x000a8fa9: lea r9, [rsp+0x20]; call rbx;
0x000a8faa: lea ecx, [rsp+0x20]; call rbx;
0x000a8fac: and al, 0x20; call rbx;
0x000a913c: push 0; mov rdx, r13; xor r8d, r8d; mov rdi, rbp; lea r9, [rsp+0x30]; call rbx;
0x000a913d: add [rcx+rcx*4-0x16], cl; xor r8d, r8d; mov rdi, rbp; lea r9, [rsp+0x30]; call rbx;
0x000a913e: mov rdx, r13; xor r8d, r8d; mov rdi, rbp; lea r9, [rsp+0x30]; call rbx;
0x000a913f: mov edx, ebp; xor r8d, r8d; mov rdi, rbp; lea r9, [rsp+0x30]; call rbx;
0x000a9281: ror byte ptr [rcx+rcx*4-7], 0x6a; add [rcx+rcx*4-0x16], cl; mov r9, [rsp+0x10]; mov rdi, rbp; mov rsi, [rsp+0x18]; call rbx;
0x000a9285: push 0; mov rdx, r13; mov r9, [rsp+0x10]; mov rdi, rbp; mov rsi, [rsp+0x18]; call rbx;
0x000a9286: add [rcx+rcx*4-0x16], cl; mov r9, [rsp+0x10]; mov rdi, rbp; mov rsi, [rsp+0x18]; call rbx;
0x000a9287: mov rdx, r13; mov r9, [rsp+0x10]; mov rdi, rbp; mov rsi, [rsp+0x18]; call rbx;
0x000a9288: mov edx, ebp; mov r9, [rsp+0x10]; mov rdi, rbp; mov rsi, [rsp+0x18]; call rbx;
0x000a928a: mov r9, [rsp+0x10]; mov rdi, rbp; mov rsi, [rsp+0x18]; call rbx;
0x000a928b: mov ecx, [rsp+0x10]; mov rdi, rbp; mov rsi, [rsp+0x18]; call rbx;
0x000a928d: and al, 0x10; mov rdi, rbp; mov rsi, [rsp+0x18]; call rbx;
0x000a928e: adc [rax-0x77], cl; out dx, eax; mov rsi, [rsp+0x18]; call rbx;
0x000a928f: mov rdi, rbp; mov rsi, [rsp+0x18]; call rbx;
0x000a9290: mov edi, ebp; mov rsi, [rsp+0x18]; call rbx;
0x000a9291: out dx, eax; mov rsi, [rsp+0x18]; call rbx;
0x000a9292: mov rsi, [rsp+0x18]; call rbx;
0x000a9293: mov esi, [rsp+0x18]; call rbx;
0x000a9295: and al, 0x18; call rbx;
0x000a9357: mov dl, 0xf8; jmp qword ptr [rsi+0xf];
0x000a945d: push 0; mov rdx, r14; mov rdi, rbp; xor r8d, r8d; lea r9, [rsp+0x28]; call rbx;
0x000a945e: add [rcx+rcx*4-0xe], cl; mov rdi, rbp; xor r8d, r8d; lea r9, [rsp+0x28]; call rbx;
0x000a945f: mov rdx, r14; mov rdi, rbp; xor r8d, r8d; lea r9, [rsp+0x28]; call rbx;
0x000a9460: mov edx, esi; mov rdi, rbp; xor r8d, r8d; lea r9, [rsp+0x28]; call rbx;
0x000a9462: mov rdi, rbp; xor r8d, r8d; lea r9, [rsp+0x28]; call rbx;
0x000a9463: mov edi, ebp; xor r8d, r8d; lea r9, [rsp+0x28]; call rbx;
0x000a9464: out dx, eax; xor r8d, r8d; lea r9, [rsp+0x28]; call rbx;
0x000a9465: xor r8d, r8d; lea r9, [rsp+0x28]; call rbx;
0x000a9466: xor eax, eax; lea r9, [rsp+0x28]; call rbx;
0x000a9468: lea r9, [rsp+0x28]; call rbx;
0x000a9469: lea ecx, [rsp+0x28]; call rbx;
0x000a946b: and al, 0x28; call rbx;
0x000a9528: shr byte ptr [rdx], 0x4c; mov ecx, esp; mov rsi, [rsp+0x18]; mov rdx, r14; mov rdi, rbp; call rbx;
0x000a9529: push 0; mov rcx, r12; mov rsi, [rsp+0x18]; mov rdx, r14; mov rdi, rbp; call rbx;
0x000a952a: add [rcx+rcx*4-0x1f], cl; mov rsi, [rsp+0x18]; mov rdx, r14; mov rdi, rbp; call rbx;
0x000a952b: mov rcx, r12; mov rsi, [rsp+0x18]; mov rdx, r14; mov rdi, rbp; call rbx;
0x000a952c: mov ecx, esp; mov rsi, [rsp+0x18]; mov rdx, r14; mov rdi, rbp; call rbx;
0x000a952e: mov rsi, [rsp+0x18]; mov rdx, r14; mov rdi, rbp; call rbx;
0x000a952f: mov esi, [rsp+0x18]; mov rdx, r14; mov rdi, rbp; call rbx;
0x000a9531: and al, 0x18; mov rdx, r14; mov rdi, rbp; call rbx;
0x000a9532: sbb [rcx+rcx*4-0xe], cl; mov rdi, rbp; call rbx;
0x000a9533: mov rdx, r14; mov rdi, rbp; call rbx;
0x000a9534: mov edx, esi; mov rdi, rbp; call rbx;
0x000a9629: stosb [rdi]; sbb eax, 0xeee8000e; scasd [rdi]; clc; jmp qword ptr [rsi+0x2e];
0x000a962a: sbb eax, 0xeee8000e; scasd [rdi]; clc; jmp qword ptr [rsi+0x2e];
0x000a962c: add al, ch; out dx, al; scasd [rdi]; clc; jmp qword ptr [rsi+0x2e];
0x000a962e: out dx, al; scasd [rdi]; clc; jmp qword ptr [rsi+0x2e];
0x000a962f: scasd [rdi]; clc; jmp qword ptr [rsi+0x2e];
0x000a9630: clc; jmp qword ptr [rsi+0x2e];
0x000a96c8: test byte ptr [rax-0x73], 0x72; dec dword ptr [rcx-0x77]; iretd;
0x000a973e: push 0; mov rdx, r14; xor r8d, r8d; mov rdi, rbp; lea r9, [rsp+0x30]; call rbx;
0x000a973f: add [rcx+rcx*4-0xe], cl; xor r8d, r8d; mov rdi, rbp; lea r9, [rsp+0x30]; call rbx;
0x000a9740: mov rdx, r14; xor r8d, r8d; mov rdi, rbp; lea r9, [rsp+0x30]; call rbx;
0x000a9741: mov edx, esi; xor r8d, r8d; mov rdi, rbp; lea r9, [rsp+0x30]; call rbx;
0x000a9743: xor r8d, r8d; mov rdi, rbp; lea r9, [rsp+0x30]; call rbx;
0x000a9744: xor eax, eax; mov rdi, rbp; lea r9, [rsp+0x30]; call rbx;
0x000a9745: ror byte ptr [rax-0x77], 0xef; lea r9, [rsp+0x30]; call rbx;
0x000a9746: mov rdi, rbp; lea r9, [rsp+0x30]; call rbx;
0x000a9747: mov edi, ebp; lea r9, [rsp+0x30]; call rbx;
0x000a9748: out dx, eax; lea r9, [rsp+0x30]; call rbx;
0x000a9749: lea r9, [rsp+0x30]; call rbx;
0x000a974a: lea ecx, [rsp+0x30]; call rbx;
0x000a974c: and al, 0x30; call rbx;
0x000a97bc: scasb [rdi]; clc; call qword ptr [rax-0x7bf03f7b];
0x000a97bd: clc; call qword ptr [rax-0x7bf03f7b];
0x000a97be: call qword ptr [rax-0x7bf03f7b];
0x000a97d7: add [rcx-0x39], cl; ret 0xffff;
0x000a9855: ror byte ptr [rcx+rcx*4-0x1f], 0x6a; add [rcx+rcx*4-0xe], cl; mov rsi, [rsp+0x18]; mov rdi, rbp; mov r9, r15; call rbx;
0x000a9859: push 0; mov rdx, r14; mov rsi, [rsp+0x18]; mov rdi, rbp; mov r9, r15; call rbx;
0x000a985a: add [rcx+rcx*4-0xe], cl; mov rsi, [rsp+0x18]; mov rdi, rbp; mov r9, r15; call rbx;
0x000a985b: mov rdx, r14; mov rsi, [rsp+0x18]; mov rdi, rbp; mov r9, r15; call rbx;
0x000a985c: mov edx, esi; mov rsi, [rsp+0x18]; mov rdi, rbp; mov r9, r15; call rbx;
0x000a985e: mov rsi, [rsp+0x18]; mov rdi, rbp; mov r9, r15; call rbx;
0x000a985f: mov esi, [rsp+0x18]; mov rdi, rbp; mov r9, r15; call rbx;
0x000a9861: and al, 0x18; mov rdi, rbp; mov r9, r15; call rbx;
0x000a9862: sbb [rax-0x77], cl; out dx, eax; mov r9, r15; call rbx;
0x000a9863: mov rdi, rbp; mov r9, r15; call rbx;
0x000a9864: mov edi, ebp; mov r9, r15; call rbx;
0x000a9865: out dx, eax; mov r9, r15; call rbx;
0x000a9866: mov r9, r15; call rbx;
0x000a9867: mov ecx, edi; call rbx;
0x000a9868: stc; call rbx;
0x000a993e: test byte ptr [rcx+0x72], 8; lea rax, [rip+0xfda7]; lea rdx, [rip+0xfb80]; cmovne rax, rdx; ret;
0x000a9941: or [rax-0x73], cl; add eax, 0xfda7; lea rdx, [rip+0xfb80]; cmovne rax, rdx; ret;
0x000a9942: lea rax, [rip+0xfda7]; lea rdx, [rip+0xfb80]; cmovne rax, rdx; ret;
0x000a9943: lea eax, [rip+0xfda7]; lea rdx, [rip+0xfb80]; cmovne rax, rdx; ret;
0x000a9944: add eax, 0xfda7; lea rdx, [rip+0xfb80]; cmovne rax, rdx; ret;
0x000a9945: cmpsd [rsi], [rdi]; std; add [rax], al; lea rdx, [rip+0xfb80]; cmovne rax, rdx; ret;
0x000a9946: std; add [rax], al; lea rdx, [rip+0xfb80]; cmovne rax, rdx; ret;
0x000a9947: add [rax], al; lea rdx, [rip+0xfb80]; cmovne rax, rdx; ret;
0x000a9948: add [rax-0x73], cl; adc eax, 0xfb80; cmovne rax, rdx; ret;
0x000a9949: lea rdx, [rip+0xfb80]; cmovne rax, rdx; ret;
0x000a994a: lea edx, [rip+0xfb80]; cmovne rax, rdx; ret;
0x000a994b: adc eax, 0xfb80; cmovne rax, rdx; ret;
0x000a994c: cmp bl, 0; add [rax+0xf], cl; ret 0x66c3;
0x000a994d: sti; add [rax], al; cmovne rax, rdx; ret;
0x000a997a: add al, 0x85; shl byte ptr [rbp-0xf], cl; ret;
0x000a997c: shl byte ptr [rbp-0xf], cl; ret;
0x000a9b43: pop rcx; or eax, 0x348b4800; ret 0x8d48;
0x000a9b44: or eax, 0x348b4800; ret 0x8d48;
0x000a9c5b: add [rax], al; add [rax], al; add [rbx-0x7cb7fb85], cl; ret;
0x000a9c5d: add [rax], al; add [rbx-0x7cb7fb85], cl; ret;
0x000a9c5f: add [rbx-0x7cb7fb85], cl; ret;
0x000a9cfe: and al, 1; add [rax], al; add [rax-0x7d], cl; ret;
0x000a9f44: adc bl, ch; or eax, 0x841f0f66; add [rax], al; add [rax], al; add [rax-0x7d], cl; ret;
0x000a9f46: or eax, 0x841f0f66; add [rax], al; add [rax], al; add [rax-0x7d], cl; ret;
0x000a9fb3: push rsp; or eax, 0x148b4800; ret 0x8948;
0x000a9fb4: or eax, 0x148b4800; ret 0x8948;
0x000aa0bf: dec dword ptr [rbx-0x7cb7fb85]; ret;
0x000aa116: sub al, 1; add [rax], al; add [rax-0x7d], cl; ret;
0x000aa19e: call qword ptr [rax+0x82444c7];
0x000aa263: in al, 0x75; ret 0x894c;
0x000aa2b7: dec dword ptr [rbx+0xeb8087b]; add [rax], al; add [rax-0x7d], cl; ret;
0x000aa701: cmp ebx, [rip-0x7cb70006]; ret;
0x000aa702: sbb eax, 0x8348fffa; ret;
0x000aa703: cli; dec dword ptr [rax-0x7d]; ret;
0x000aa9e4: or eax, 0x3d8d4800; mov esi, esi; or eax, 0x9c2ee800; clc; jmp qword ptr [rsi+0x66];
0x000aa9e9: mov esi, esi; or eax, 0x9c2ee800; clc; jmp qword ptr [rsi+0x66];
0x000aa9ea: test byte ptr [rip-0x63d11800], 0xf8; jmp qword ptr [rsi+0x66];
0x000aa9eb: or eax, 0x9c2ee800; clc; jmp qword ptr [rsi+0x66];
0x000aa9ec: add al, ch; pushfq; clc; jmp qword ptr [rsi+0x66];
0x000aa9ee: pushfq; clc; jmp qword ptr [rsi+0x66];
0x000aa9ef: pushfq; clc; jmp qword ptr [rsi+0x66];
0x000aac7e: ror byte ptr [rdi], 0x88; ret 0x1a;
0x000aac81: ret 0x1a;
0x000aace9: ror dword ptr [rdi], 0x8f; iretd;
0x000aae0d: or al, ch; lea esp, [rbx+0x145fff7]; dec dword ptr [rax-0x7d]; ret;
0x000aae0f: lea esp, [rbx+0x145fff7]; dec dword ptr [rax-0x7d]; ret;
0x000ab6ba: push rbp; idiv edi; jmp qword ptr [rsi-0x70];
0x000abcdb: add [rax], al; add bl, ch; ret;
0x000abf00: adc [rax-0x77], cl; ret 0xdae9;
0x000abf03: ret 0xdae9;
0x000ac328: push 0xffffffffffff7fe9; jmp qword ptr [rsi-0x70];
0x000ac3b8: ret 0x4435;
0x000ac953: fcom st, st(7); or eax, 0x3d8d4800; xlat [rbx]; or eax, 0x7cbde800; clc; jmp qword ptr [rsi+0x66];
0x000ac954: xlat [rbx]; or eax, 0x3d8d4800; xlat [rbx]; or eax, 0x7cbde800; clc; jmp qword ptr [rsi+0x66];
0x000ac955: or eax, 0x3d8d4800; xlat [rbx]; or eax, 0x7cbde800; clc; jmp qword ptr [rsi+0x66];
0x000ac95b: xlat [rbx]; or eax, 0x7cbde800; clc; jmp qword ptr [rsi+0x66];
0x000ac95c: or eax, 0x7cbde800; clc; jmp qword ptr [rsi+0x66];
0x000acad3: sti; ret 0xffbf;
0x000acad4: ret 0xffbf;
0x000acc26: out 0xc, al; cli; jmp qword ptr [rsi+0xf];
0x000acc27: or al, 0xfa; jmp qword ptr [rsi+0xf];
0x000acc31: cmp eax, 0x850f0400; ret 1;
0x000acc7c: ror byte ptr [rax+0x21], 1; ret 0x8548;
0x000accd3: imul esi, edi, 0x8348fff9; ret;
0x000accd4: idiv ecx; dec dword ptr [rax-0x7d]; ret;
0x000acd5b: add [rax], al; add [rax-0x39], cl; ret 0xffff;
0x000acddb: sar ch, 0xff; dec dword ptr [rbx+rcx*4+0x7d]; add [rax-0x39], cl; ret;
0x000acdde: dec dword ptr [rbx+rcx*4+0x7d]; add [rax-0x39], cl; ret;
0x000ad025: ror dword ptr [rip+0x3d8d4800], 1; ror byte ptr [rip+0x75ece800], 1; clc; jmp qword ptr [rsi+0x66];
0x000ad026: or eax, 0x3d8d4800; ror byte ptr [rip+0x75ece800], 1; clc; jmp qword ptr [rsi+0x66];
0x000ad02c: ror byte ptr [rip+0x75ece800], 1; clc; jmp qword ptr [rsi+0x66];
0x000ad02d: or eax, 0x75ece800; clc; jmp qword ptr [rsi+0x66];
0x000ad75c: ret 0x3489;
0x000adf0a: shl byte ptr [rbx+rbp*4+0x48], 0x89; ret 0x894c;
0x000ae12b: test [rbp+1], al; dec dword ptr [rax-0x7d]; ret;
0x000ae8a1: mov es, [rcx-0x42]; add [rax], al; add [rcx-0x39], cl; ret;
0x000ae8a5: add [rax], al; add [rcx-0x39], cl; ret;
0x000ae8a7: add [rcx-0x39], cl; ret;
0x000aedc5: or eax, 0x3d8d4800; ret 0xdf5;
0x000aedca: ret 0xdf5;
0x000aeeea: or eax, 0x572fe800; clc; jmp qword ptr [rsi+0x66];
0x000aeeee: push rdi; clc; jmp qword ptr [rsi+0x66];
0x000af20b: or [rax], al; add cl, ch; iretd;
0x000af2c7: sbb [rax-0x39], cl; ret;
0x000af301: cmp edx, ecx; stc; dec dword ptr [rax-0x7d]; ret;
0x000af302: sar ecx, 1; dec dword ptr [rax-0x7d]; ret;
0x000af3b2: insd [rdi], dx; add [rax-0x39], cl; ret;
0x000af5e2: stosq [rdi]; or eax, 0x3d8d4800; mov ebp, [rdx+0x2ee8000d]; push rax; clc; jmp qword ptr [rsi+0x66];
0x000af5e3: stosd [rdi]; or eax, 0x3d8d4800; mov ebp, [rdx+0x2ee8000d]; push rax; clc; jmp qword ptr [rsi+0x66];
0x000af5e4: or eax, 0x3d8d4800; mov ebp, [rdx+0x2ee8000d]; push rax; clc; jmp qword ptr [rsi+0x66];
0x000af5e9: mov ebp, [rdx+0x2ee8000d]; push rax; clc; jmp qword ptr [rsi+0x66];
0x000af5ea: stosb [rdi]; or eax, 0x502ee800; clc; jmp qword ptr [rsi+0x66];
0x000af5eb: or eax, 0x502ee800; clc; jmp qword ptr [rsi+0x66];
0x000af5ec: add al, ch; push rax; clc; jmp qword ptr [rsi+0x66];
0x000af5ee: push rax; clc; jmp qword ptr [rsi+0x66];
0x000af5ef: push rax; clc; jmp qword ptr [rsi+0x66];
0x000af6d0: or eax, [rax]; add [rbp-0x7b], al; dec dword ptr [rbp-0x77]; in eax, 0xf; xchg ebp, eax; ret 0xaeb;
0x000af6d2: add [rbp-0x7b], al; dec dword ptr [rbp-0x77]; in eax, 0xf; xchg ebp, eax; ret 0xaeb;
0x000af6d5: dec dword ptr [rbp-0x77]; in eax, 0xf; xchg ebp, eax; ret 0xaeb;
0x000af6d8: in eax, 0xf; xchg ebp, eax; ret 0xaeb;
0x000af6da: xchg ebp, eax; ret 0xaeb;
0x000af6db: ret 0xaeb;
0x000af7e3: or [rax], al; add [rbp-0x77], cl; iretd;
0x000af7e5: add [rbp-0x77], cl; iretd;
0x000af8e9: ror dword ptr [rdi], 0x8f; ret;
0x000af9b7: add [rax], al; add [rcx-0x77], al; ret 0x4489;
0x000af9b9: add [rcx-0x77], al; ret 0x4489;
0x000afa0a: inc dword ptr [rbp+1]; dec dword ptr [rax-0x7d]; ret;
0x000afe92: xor [rax-0x77], cl; ret;
0x000aff6f: inc dword ptr [rbx+0xf10243c]; test dh, dl; or eax, 0xb8480000; ret 0xffff;
0x000aff71: cmp al, 0x24; adc [rdi], cl; test dh, dl; or eax, 0xb8480000; ret 0xffff;
0x000aff73: adc [rdi], cl; test dh, dl; or eax, 0xb8480000; ret 0xffff;
0x000aff75: test dh, dl; or eax, 0xb8480000; ret 0xffff;
0x000aff77: or eax, 0xb8480000; ret 0xffff;
0x000aff79: add [rax-0x48], cl; ret 0xffff;
0x000b0165: jmp qword ptr [rsi];
0x000b0172: ror byte ptr [rdi], 0x85; ret 0xfffc;
0x000b02ba: idiv r15; jmp qword ptr [rsi-0x70];
0x000b04ac: shl byte ptr [rcx+rbp*4+0x48], 0x89; ret 0x894c;
0x000b0556: ret 0xe26;
0x000b0af0: adc [rax-0x77], cl; ret 0xeae9;
0x000b0af3: ret 0xeae9;
0x000b0bc5: ror byte ptr [rdi], 0x92; ret 0x2040;
0x000b0cec: ret 0xfee9;
0x000b0e5d: dec dword ptr [rcx+1]; iretd;
0x000b0f18: push 0xffffffffffff7ae9; jmp qword ptr [rsi-0x70];
0x000b0f64: test byte ptr [rcx+rcx*4-9], 0xe8; ret;
0x000b0fa8: ret 0x4418;
0x000b1072: ret 0xf8;
0x000b1141: paddsw mm7, mm7; inc dword ptr [rbp+0x31]; in al, 0xe9; iretd;
0x000b1144: inc dword ptr [rbp+0x31]; in al, 0xe9; iretd;
0x000b1147: in al, 0xe9; iretd;
0x000b1544: mov ecx, [rip+0x3d8d4800]; pop rcx; mov ecx, [rip+0x30cde800]; clc; jmp qword ptr [rsi+0x66];
0x000b1545: or eax, 0x3d8d4800; pop rcx; mov ecx, [rip+0x30cde800]; clc; jmp qword ptr [rsi+0x66];
0x000b154a: pop rcx; mov ecx, [rip+0x30cde800]; clc; jmp qword ptr [rsi+0x66];
0x000b154b: mov ecx, [rip+0x30cde800]; clc; jmp qword ptr [rsi+0x66];
0x000b154c: or eax, 0x30cde800; clc; jmp qword ptr [rsi+0x66];
0x000b154d: add al, ch; int 0x30; clc; jmp qword ptr [rsi+0x66];
0x000b154f: int 0x30; clc; jmp qword ptr [rsi+0x66];
0x000b1550: xor al, bh; jmp qword ptr [rsi+0x66];
0x000b1551: clc; jmp qword ptr [rsi+0x66];
0x000b15d0: add [rax], al; add [rbp+0x5f], dh; add rsp, 0x18; pop rbx; pop rbp; ret;
0x000b15d2: add [rbp+0x5f], dh; add rsp, 0x18; pop rbx; pop rbp; ret;
0x000b15d4: pop rdi; add rsp, 0x18; pop rbx; pop rbp; ret;
0x000b1622: and [rcx+0xfffffe2], al; add [rcx], cl; ret 0x8f74;
0x000b1626: dec dword ptr [rdi]; add [rcx], cl; ret 0x8f74;
0x000b1627: str [rcx]; ret 0x8f74;
0x000b1628: add [rcx], cl; ret 0x8f74;
0x000b162a: ret 0x8f74;
0x000b169e: add [rax], al; add [rbp+0x5a], dh; add rsp, 0x38; pop rbx; pop rbp; ret;
0x000b16a0: add [rbp+0x5a], dh; add rsp, 0x38; pop rbx; pop rbp; ret;
0x000b16a2: pop rdx; add rsp, 0x38; pop rbx; pop rbp; ret;
0x000b16c9: adc eax, 0x8948000e; ret 0xc148;
0x000b16f2: adc al, 9; ret 0x8d74;
0x000b16f4: ret 0x8d74;
0x000b1770: add [rax], al; add [rbp+0x30], dh; add rsp, 0x18; pop rbx; pop rbp; ret;
0x000b1772: add [rbp+0x30], dh; add rsp, 0x18; pop rbx; pop rbp; ret;
0x000b1826: add [rax], al; add [rsp+rax+0x44], dh; mov eax, eax; ret;
0x000b1828: add [rsp+rax+0x44], dh; mov eax, eax; ret;
0x000b182a: add al, 0x44; mov eax, eax; ret;
0x000b18ca: add al, 0x72; mov [0x8944ffffffffb841], eax; rcr byte ptr [rbx-0x3d], 0x45; xor eax, eax; mov eax, r8d; ret;
0x000b18cc: mov [0x8944ffffffffb841], eax; rcr byte ptr [rbx-0x3d], 0x45; xor eax, eax; mov eax, r8d; ret;
0x000b18cd: mov r8d, 0xffffffff; mov eax, r8d; pop rbx; ret;
0x000b18ce: mov eax, 0xffffffff; mov eax, r8d; pop rbx; ret;
0x000b18d2: inc dword ptr [rcx+rcx*4-0x40]; pop rbx; ret;
0x000b18d5: rcr byte ptr [rbx-0x3d], 0x45; xor eax, eax; mov eax, r8d; ret;
0x000b218a: ret 0x890f;
0x000b2195: adc [rcx-9], al; fimul st, dword ptr [rcx+0x63]; ret 0x8d48;
0x000b2198: fimul st, dword ptr [rcx+0x63]; ret 0x8d48;
0x000b21f8: ret 0x8b44;
0x000b2279: ror byte ptr [rcx+0x63], 1; ret 0x148;
0x000b25f6: idiv r15b; jmp qword ptr [rsi+0xf];
0x000b263a: ret 0xd8d;
0x000b26a0: or eax, 0x1f79e800; clc; jmp qword ptr [rsi+0xf];
0x000b27a0: fimul st, word ptr [rax-0x77]; ret;
0x000b2a23: ror byte ptr [rax-0x39], 1; ret 0xffff;
0x000b2bb2: pop rbp; test al, 0xf; mov dh, 0x3c; or ecx, [rcx+rdi+0x5d]; mov al, [0x894d000000d9840f]; ret;
0x000b2bb3: test al, 0xf; mov dh, 0x3c; or ecx, [rcx+rdi+0x5d]; mov al, [0x894d000000d9840f]; ret;
0x000b2bb5: mov dh, 0x3c; or ecx, [rcx+rdi+0x5d]; mov al, [0x894d000000d9840f]; ret;
0x000b2bb7: or ecx, [rcx+rdi+0x5d]; mov al, [0x894d000000d9840f]; ret;
0x000b2bba: pop rbp; mov al, [0x894d000000d9840f]; ret;
0x000b2bbb: mov al, [0x894d000000d9840f]; ret;
0x000b2bbd: test cl, bl; add [rax], al; add [rbp-0x77], cl; ret;
0x000b2bbf: add [rax], al; add [rbp-0x77], cl; ret;
0x000b2bc1: add [rbp-0x77], cl; ret;
0x000b2bcc: xchg [rax-0x7d], cl; cli; dec dword ptr [rcx+0xf]; shr ebx, cl; ret 0xc083;
0x000b2bcf: cli; dec dword ptr [rcx+0xf]; shr ebx, cl; ret 0xc083;
0x000b2bd0: dec dword ptr [rcx+0xf]; shr ebx, cl; ret 0xc083;
0x000b2bd4: shr ebx, cl; ret 0xc083;
0x000b2bd9: add [rax-0x39], ecx; ret 0xffff;
0x000b2c6a: cli; dec dword ptr [rdi]; test ebx, ebp; add [rax], al; add [rax-0x7d], cl; ret;
0x000b2c6b: dec dword ptr [rdi]; test ebx, ebp; add [rax], al; add [rax-0x7d], cl; ret;
0x000b2c6d: test ebx, ebp; add [rax], al; add [rax-0x7d], cl; ret;
0x000b2c7b: or al, 0x31; ror byte ptr [rax+0x39], cl; pop rbp; mov [rdi], cl; xchg edi, eax; ret 0x1489;
0x000b2c7d: ror byte ptr [rax+0x39], cl; pop rbp; mov [rdi], cl; xchg edi, eax; ret 0x1489;
0x000b2c80: pop rbp; mov [rdi], cl; xchg edi, eax; ret 0x1489;
0x000b2c81: mov [rdi], cl; xchg edi, eax; ret 0x1489;
0x000b2c83: xchg edi, eax; ret 0x1489;
0x000b2c84: ret 0x1489;
0x000b2cf6: dec dword ptr [rbp+rcx*4+0x40]; add [rax+0x63], ecx; cmp cl, [rbp-0x77]; ret;
0x000b2cfa: add [rax+0x63], ecx; cmp cl, [rbp-0x77]; ret;
0x000b2cfd: cmp cl, [rbp-0x77]; ret;
0x000b2d52: add [rcx+0x39], ecx; ret 0xed75;
0x000b2fc6: add [rax], al; add [rax+1], cl; ret;
0x000b2fc8: add [rax+1], cl; ret;
0x000b31d0: dec dword ptr [rcx-0x77]; ret 0x854d;
0x000b33c0: ret 0xa27f;
0x000b35e3: inc dword ptr [rbx-0x14fe7fbb]; ret;
0x000b35e5: add byte ptr [r9], 0xeb; ret;
0x000b35e6: add byte ptr [rcx], 0xeb; ret;
0x000b35e7: add ebx, ebp; ret;
0x000b3771: ror dword ptr [rax+0x63], cl; iretd;
0x000b38b8: ret 0x328b;
0x000b3acf: mov ebx, 0x83480e8b; ret 0x4804;
0x000b3c07: mov bl, 0x8b; xor [rax-0x7d], ecx; ret 0x4804;
0x000b3c09: xor [rax-0x7d], ecx; ret 0x4804;
0x000b3c38: xchg [rbx-0x7cb76efc], cl; ret 0x8901;
0x000b3c6d: ret 0x8f0f;
0x000b3d68: ret 0x3a8b;
0x000b3ece: add [rax+0x39], ecx; ret 0xef75;
0x000b3ed1: ret 0xef75;
0x000b4056: add [rcx+0x75db85c2], cl; fisttp dword ptr [rcx+0x295d5bd8], st; rol byte ptr [rcx+0x5c], 1; ret;
0x000b405c: fisttp dword ptr [rcx+0x295d5bd8], st; rol byte ptr [rcx+0x5c], 1; ret;
0x000b405d: mov eax, ebx; pop rbx; pop rbp; sub eax, edx; pop r12; ret;
0x000b405e: fcomp st, dword ptr [rbx+0x5d]; sub eax, edx; pop r12; ret;
0x000b405f: pop rbx; pop rbp; sub eax, edx; pop r12; ret;
0x000b4060: pop rbp; sub eax, edx; pop r12; ret;
0x000b4061: sub eax, edx; pop r12; ret;
0x000b4062: rol byte ptr [rcx+0x5c], 1; ret;
0x000b40c6: fstp dword ptr [rbx+0x31], st; rcr byte ptr [rbp+0x41], 0x5c; pop r13; pop r14; ret;
0x000b40d7: add [rcx+0x295d5bd8], cl; rol byte ptr [rcx+0x5c], 1; pop r13; pop r14; ret;
0x000b40d9: fcomp st, dword ptr [rbx+0x5d]; sub eax, edx; pop r12; pop r13; pop r14; ret;
0x000b40db: pop rbp; sub eax, edx; pop r12; pop r13; pop r14; ret;
0x000b40dc: sub eax, edx; pop r12; pop r13; pop r14; ret;
0x000b40dd: rol byte ptr [rcx+0x5c], 1; pop r13; pop r14; ret;
0x000b4127: add [rbx-0x76b30383], cl; out 0x89, al; ret;
0x000b413e: or [rcx+0x5bd029d8], cl; pop rbp; pop r12; pop r13; ret;
0x000b4140: fsubr st, dword ptr [rcx]; rcr byte ptr [rbx+0x5d], 1; pop r12; pop r13; ret;
0x000b4141: sub eax, edx; pop rbx; pop rbp; pop r12; pop r13; ret;
0x000b4142: rcr byte ptr [rbx+0x5d], 1; pop r12; pop r13; ret;
0x000b41a3: out 0x89, al; ret;
0x000b41ac: ret 0xdb85;
0x000b41d7: rcr byte ptr [rbx+0x5d], 1; pop r12; pop r13; pop r14; pop r15; ret;
0x000b422b: idiv edi; nop [rax]; pop rbp; ret;
0x000b422d: nop [rax]; pop rbp; ret;
0x000b428c: add [rax], al; add [rbp+0x23], dh; add rsp, 0x20; pop rbx; ret;
0x000b428e: add [rbp+0x23], dh; add rsp, 0x20; pop rbx; ret;
0x000b42ef: add [rax], al; mov rax, [rip+0x18d601]; lea rdi, [rip+0x18c4ea]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000b42f0: add [rax-0x75], cl; add eax, 0x10d4b8; lea rdi, [rip+0x10c3a1]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000b42f3: add eax, 0x10d4b8; lea rdi, [rip+0x10c3a1]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000b42f4: mov eax, 0x480010d4; lea edi, [rip+0x10c3a1]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000b42f7: add [rax-0x73], cl; cmp eax, 0x10c3a1; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000b42fa: cmp eax, 0x10c3a1; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000b42fb: mov eax, [0x6411c8c1480010c3]; xor rax, [0x30]; call rax;
0x000b4377: add [rax-0x7d], cl; ret 0x8001;
0x000b43ba: or dword ptr [rcx-0x77], 0xc68348d2; add [rax-0x7d], ecx; ret 0x8801;
0x000b43c1: add [rax-0x7d], ecx; ret 0x8801;
0x000b4485: shl byte ptr [rbp+rbx+0x48], 0x8b; add eax, 0x10d329; lea rdi, [rip+0x10c20a]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000b448a: add eax, 0x10d329; lea rdi, [rip+0x10c20a]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000b448b: sub ebx, edx; adc [rax], al; lea rdi, [rip+0x10c20a]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000b448c: rcl dword ptr [rax], cl; add [rax-0x73], cl; cmp eax, 0x10c20a; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000b448d: adc [rax], al; lea rdi, [rip+0x10c3a1]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000b448e: add [rax-0x73], cl; cmp eax, 0x10c20a; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000b4491: cmp eax, 0x10c20a; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000b4492: or al, dl; adc [rax], al; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000b4494: adc [rax], al; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000b4588: add dh, dh; rol dword ptr [rdx], 0xf; test [rax+rax+0x14c0000], eax; ret 0x41e9;
0x000b458a: rol dword ptr [rdx], 0xf; test [rax+rax+0x14c0000], eax; ret 0x41e9;
0x000b458b: add cl, [rdi]; test [rax+rax+0x14c0000], eax; ret 0x41e9;
0x000b458d: test [rax+rax+0x14c0000], eax; ret 0x41e9;
0x000b4594: ret 0x41e9;
0x000b46c9: test [rdi+0x48000000], ecx; add esp, 8; pop rbx; pop rbp; ret;
0x000b46ca: pop qword ptr [rax]; add [rax], al; add rsp, 8; pop rbx; pop rbp; ret;
0x000b473c: mov [rbp+0x31], al; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x10beea]; syscall;
0x000b473d: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x197f66]; syscall;
0x000b473e: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x197f66]; syscall;
0x000b473f: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x197f66]; syscall;
0x000b4740: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x197f66]; syscall;
0x000b4741: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x197f66]; syscall;
0x000b4742: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x197f66]; syscall;
0x000b4743: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x197f66]; syscall;
0x000b4744: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x197f66]; syscall;
0x000b4745: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x197f66]; syscall;
0x000b4746: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x10beea; syscall;
0x000b4747: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0x197f66]; syscall;
0x000b4748: add [rax], al; mov eax, 0xca; lea rdi, [rip+0x197f66]; syscall;
0x000b4749: add [rax+0xca], bh; lea rdi, [rip+0x197f66]; syscall;
0x000b474a: mov eax, 0xca; lea rdi, [rip+0x197f66]; syscall;
0x000b474c: add [rax], al; add [rax-0x73], cl; cmp eax, 0x10beea; syscall;
0x000b474d: add [rax], al; lea rdi, [rip+0x197f66]; syscall;
0x000b474e: add [rax-0x73], cl; cmp eax, 0x10beea; syscall;
0x000b474f: lea rdi, [rip+0x197f66]; syscall;
0x000b4750: lea edi, [rip+0x197f66]; syscall;
0x000b4751: cmp eax, 0x10beea; syscall;
0x000b497b: push 0; xor r8d, r8d; mov rsi, [rsp+0x18]; mov rcx, r12; mov rdx, r13; call rbx;
0x000b497c: add [rbp+0x31], al; ror byte ptr [rax-0x75], 0x74; and al, 0x18; mov rcx, r12; mov rdx, r13; call rbx;
0x000b497d: xor r8d, r8d; mov rsi, [rsp+0x18]; mov rcx, r12; mov rdx, r13; call rbx;
0x000b497e: xor eax, eax; mov rsi, [rsp+0x18]; mov rcx, r12; mov rdx, r13; call rbx;
0x000b497f: ror byte ptr [rax-0x75], 0x74; and al, 0x18; mov rcx, r12; mov rdx, r13; call rbx;
0x000b4980: mov rsi, [rsp+0x18]; mov rcx, r12; mov rdx, r13; call rbx;
0x000b4981: mov esi, [rsp+0x18]; mov rcx, r12; mov rdx, r13; call rbx;
0x000b4983: and al, 0x18; mov rcx, r12; mov rdx, r13; call rbx;
0x000b4984: sbb [rcx+rcx*4-0x1f], cl; mov rdx, r13; call rbx;
0x000b4985: mov rcx, r12; mov rdx, r13; call rbx;
0x000b4986: mov ecx, esp; mov rdx, r13; call rbx;
0x000b4988: mov rdx, r13; call rbx;
0x000b4989: mov edx, ebp; call rbx;
0x000b49ef: add [rcx-0x7d], cl; out dx, eax; add [rbp-0x57c03b0], ecx; add ecx, [rdi]; xchg esi, eax; ret 0xc085;
0x000b49f2: out dx, eax; add [rbp-0x57c03b0], ecx; add ecx, [rdi]; xchg esi, eax; ret 0xc085;
0x000b49f3: add [rbp-0x57c03b0], ecx; add ecx, [rdi]; xchg esi, eax; ret 0xc085;
0x000b49f8: cli; add ecx, [rdi]; xchg esi, eax; ret 0xc085;
0x000b49f9: add ecx, [rdi]; xchg esi, eax; ret 0xc085;
0x000b49fb: xchg esi, eax; ret 0xc085;
0x000b4a54: cli; add ecx, [rdi]; xchg esi, eax; ret 0xd284;
0x000b4a55: add ecx, [rdi]; xchg esi, eax; ret 0xd284;
0x000b4a57: xchg esi, eax; ret 0xd284;
0x000b4a58: ret 0xd284;
0x000b4a88: ret 0x9772;
0x000b4afa: push 0; mov rdx, r13; mov rsi, [rsp+0x18]; xor r8d, r8d; mov rdi, rbp; call rbx;
0x000b4afb: add [rcx+rcx*4-0x16], cl; mov rsi, [rsp+0x18]; xor r8d, r8d; mov rdi, rbp; call rbx;
0x000b4afc: mov rdx, r13; mov rsi, [rsp+0x18]; xor r8d, r8d; mov rdi, rbp; call rbx;
0x000b4afd: mov edx, ebp; mov rsi, [rsp+0x18]; xor r8d, r8d; mov rdi, rbp; call rbx;
0x000b4aff: mov rsi, [rsp+0x18]; xor r8d, r8d; mov rdi, rbp; call rbx;
0x000b4b00: mov esi, [rsp+0x18]; xor r8d, r8d; mov rdi, rbp; call rbx;
0x000b4b02: and al, 0x18; xor r8d, r8d; mov rdi, rbp; call rbx;
0x000b4b03: sbb [rbp+0x31], al; ror byte ptr [rax-0x77], 0xef; call rbx;
0x000b4b04: xor r8d, r8d; mov rdi, rbp; call rbx;
0x000b4b05: xor eax, eax; mov rdi, rbp; call rbx;
0x000b4b06: ror byte ptr [rax-0x77], 0xef; call rbx;
0x000b4ccf: add [rax], al; add [rax-0x75], cl; cmp cl, ch; push rsi; mov bh, 0xfa; jmp qword ptr [rsi+0xf];
0x000b4cd1: add [rax-0x75], cl; cmp cl, ch; push rsi; mov bh, 0xfa; jmp qword ptr [rsi+0xf];
0x000b4cd4: cmp cl, ch; push rsi; mov bh, 0xfa; jmp qword ptr [rsi+0xf];
0x000b4cd6: push rsi; mov bh, 0xfa; jmp qword ptr [rsi+0xf];
0x000b4cd7: mov bh, 0xfa; jmp qword ptr [rsi+0xf];
0x000b4da7: mov dh, 0xfa; jmp qword ptr [rsi+0xf];
0x000b4ed3: add [rbp+0xd], dh; add rsp, 0x2c0; pop rbp; pop r12; pop r13; ret;
0x000b4ed5: or eax, 0xc0c48148; add al, [rax]; add [rbp+0x41], bl; pop rsp; pop r13; ret;
0x000b4ed6: add rsp, 0x2c0; pop rbp; pop r12; pop r13; ret;
0x000b4ed7: add esp, 0x2c0; pop rbp; pop r12; pop r13; ret;
0x000b4ed9: rol byte ptr [rdx], 0; add [rbp+0x41], bl; pop rsp; pop r13; ret;
0x000b4eda: add al, [rax]; add [rbp+0x41], bl; pop rsp; pop r13; ret;
0x000b4edb: add [rax], al; pop rbp; pop r12; pop r13; ret;
0x000b4f88: cmovs eax, [rcx+0x1f8c4]; add [rbp+0x41], bl; pop rsp; pop r13; pop r14; ret;
0x000b4f89: add rsp, 0x1f8; pop rbp; pop r12; pop r13; pop r14; ret;
0x000b4f8a: add esp, 0x1f8; pop rbp; pop r12; pop r13; pop r14; ret;
0x000b4f8d: add [rax], eax; add [rbp+0x41], bl; pop rsp; pop r13; pop r14; ret;
0x000b5098: and al, 0xe8; ret 0x825;
0x000b509a: ret 0x825;
0x000b50ad: xor [rdx+1], ch; push 0; mov rax, [rsp+0x10]; mov r9, [rsp+0x18]; mov rdi, [rax]; call r13;
0x000b50ae: push 1; push 0; mov rax, [rsp+0x10]; mov r9, [rsp+0x18]; mov rdi, [rax]; call r13;
0x000b50af: add [rdx], ebp; mov rax, [rsp+0x10]; mov r9, [rsp+0x18]; mov rdi, [rax]; call r13;
0x000b50b0: push 0; mov rax, [rsp+0x10]; mov r9, [rsp+0x18]; mov rdi, [rax]; call r13;
0x000b50b1: add [rax-0x75], cl; and al, 0x10; mov r9, [rsp+0x18]; mov rdi, [rax]; call r13;
0x000b50b2: mov rax, [rsp+0x10]; mov r9, [rsp+0x18]; mov rdi, [rax]; call r13;
0x000b50b3: mov eax, [rsp+0x10]; mov r9, [rsp+0x18]; mov rdi, [rax]; call r13;
0x000b50b5: and al, 0x10; mov r9, [rsp+0x18]; mov rdi, [rax]; call r13;
0x000b50b6: adc [rbx+rcx*4+0x4c], cl; and al, 0x18; mov rdi, [rax]; call r13;
0x000b50b7: mov r9, [rsp+0x18]; mov rdi, [rax]; call r13;
0x000b50b8: mov ecx, [rsp+0x18]; mov rdi, [rax]; call r13;
0x000b50ba: and al, 0x18; mov rdi, [rax]; call r13;
0x000b50bc: mov rdi, [rax]; call r13;
0x000b50bd: mov edi, [rax]; call r13;
0x000b50fe: call qword ptr [rax+0x24448b48];
0x000b5189: ret 0xdc00;
0x000b5289: add [rdi+0x50], dh; or eax, 0x80000000; mov [rdx+4], r8d; mov [rdx], eax; xor eax, eax; ret;
0x000b528b: push rax; or eax, 0x80000000; mov [rdx+4], r8d; mov [rdx], eax; xor eax, eax; ret;
0x000b528c: or eax, 0x80000000; mov [rdx+4], r8d; mov [rdx], eax; xor eax, eax; ret;
0x000b528d: add [rax], al; add [rax+0x4428944], al; mov [rdx], eax; xor eax, eax; ret;
0x000b528e: add [rax], al; add byte ptr [rcx+rcx*4+0x42], 4; mov [rdx], eax; xor eax, eax; ret;
0x000b528f: add [rax+0x4428944], al; mov [rdx], eax; xor eax, eax; ret;
0x000b5290: add byte ptr [rcx+rcx*4+0x42], 4; mov [rdx], eax; xor eax, eax; ret;
0x000b5291: mov [rdx+4], r8d; mov [rdx], eax; xor eax, eax; ret;
0x000b5292: mov [rdx+4], eax; mov [rdx], eax; xor eax, eax; ret;
0x000b5295: mov [rdx], eax; xor eax, eax; ret;
0x000b52f1: add [rax], al; add [rbp+0x31], al; ror byte ptr [rcx-0x3976bbfe], 0xe9; outsd dx, [rsi]; cmp edi, edi; jmp qword ptr [rsi+0x2e];
0x000b52f3: add [rbp+0x31], al; ror byte ptr [rcx-0x3976bbfe], 0xe9; outsd dx, [rsi]; cmp edi, edi; jmp qword ptr [rsi+0x2e];
0x000b52f6: ror byte ptr [rcx-0x3976bbfe], 0xe9; outsd dx, [rsi]; cmp edi, edi; jmp qword ptr [rsi+0x2e];
0x000b52fd: outsd dx, [rsi]; cmp edi, edi; jmp qword ptr [rsi+0x2e];
0x000b5320: cmp edi, edi; jmp qword ptr [rsi+0x2e];
0x000b5340: cmp edi, edi; jmp qword ptr [rsi+0x2e];
0x000b5364: or ecx, esi; mov eax, 0; test dl, dl; cmovne eax, ecx; add rsp, 8; ret;
0x000b5365: int1; mov eax, 0; test dl, dl; cmovne eax, ecx; add rsp, 8; ret;
0x000b5366: mov eax, 0; test dl, dl; cmovne eax, ecx; add rsp, 8; ret;
0x000b5367: add [rax], al; add [rax], al; test dl, dl; cmovne eax, ecx; add rsp, 8; ret;
0x000b5368: add [rax], al; add [rdx+rdx*8+0x48c1450f], al; add esp, 8; ret;
0x000b5369: add [rax], al; test dl, dl; cmovne eax, ecx; add rsp, 8; ret;
0x000b536a: add [rdx+rdx*8+0x48c1450f], al; add esp, 8; ret;
0x000b536b: test dl, dl; cmovne eax, ecx; add rsp, 8; ret;
0x000b5380: or r9d, edx; mov eax, 0; test dil, dil; cmovne eax, ecx; add rsp, 8; ret;
0x000b5381: or ecx, edx; mov eax, 0; test dil, dil; cmovne eax, ecx; add rsp, 8; ret;
0x000b5382: sar dword ptr [rax], 1; test dil, dil; cmovne eax, ecx; add rsp, 8; ret;
0x000b5383: mov eax, 0; test dil, dil; cmovne eax, ecx; add rsp, 8; ret;
0x000b5384: add [rax], al; add [rax], al; test dil, dil; cmovne eax, ecx; add rsp, 8; ret;
0x000b5386: add [rax], al; test dil, dil; cmovne eax, ecx; add rsp, 8; ret;
0x000b5388: test dil, dil; cmovne eax, ecx; add rsp, 8; ret;
0x000b5389: test bh, bh; cmovne eax, ecx; add rsp, 8; ret;
0x000b538b: cmovne eax, ecx; add rsp, 8; ret;
0x000b539a: clc; add [rax+rax], cl; add [rbp+0x1e], dh; xor eax, eax; add rsp, 8; ret;
0x000b539b: add [rax+rax], cl; add [rbp+0x1e], dh; xor eax, eax; add rsp, 8; ret;
0x000b539c: or al, 0; add [rbp+0x1e], dh; xor eax, eax; add rsp, 8; ret;
0x000b539e: add [rbp+0x1e], dh; xor eax, eax; add rsp, 8; ret;
0x000b5446: dec dword ptr [rdi]; mov ebx, ds; add al, [rax]; add [rax-0x39], cl; ret 0xffff;
0x000b5448: mov ebx, ds; add al, [rax]; add [rax-0x39], cl; ret 0xffff;
0x000b544a: add al, [rax]; add [rax-0x39], cl; ret 0xffff;
0x000b54b6: or [rcx-0x39], cl; ret;
0x000b551d: add [rax], al; add al, ch; pop rbx; push 0xb; add [rax-0x39], cl; ret;
0x000b551f: add al, ch; pop rbx; push 0xb; add [rax-0x39], cl; ret;
0x000b5521: pop rbx; push 0xb; add [rax-0x39], cl; ret;
0x000b5522: push 0xb; add [rax-0x39], cl; ret;
0x000b5524: add [rax-0x39], cl; ret;
0x000b567a: insd [rdi], dx; stc; dec dword ptr [rax-0x7d]; ret;
0x000b567b: stc; dec dword ptr [rax-0x7d]; ret;
0x000b57b5: add [rdi], cl; xchg ebp, eax; ret 0x941;
0x000b57b7: xchg ebp, eax; ret 0x941;
0x000b57b8: ret 0x941;
0x000b57d0: xchg ebp, eax; ret 0xb60f;
0x000b5930: or [rbp+0x31], al; fisttp dword ptr [rax-0x39], st; ret;
0x000b5933: fisttp dword ptr [rax-0x39], st; ret;
0x000b5a0c: or dh, bh; call qword ptr [rax-0x76b6a8bf];
0x000b5afe: call qword ptr [rax-0x2dce24cf];
0x000b5d0b: xchg ebp, eax; ret 0x9eb;
0x000b5d0c: ret 0x9eb;
0x000b5d66: ret 0x8d04;
0x000b5dcc: sbb al, ch; outsb dx, [rsi]; ret;
0x000b64e1: sub [rbp-0x77], cl; iretd;
0x000b6630: add [rax+0x39], cl; ret 0xda7d;
0x000b6633: ret 0xda7d;
0x000b693a: std; idiv bh; jmp qword ptr [rsi-0x70];
0x000b6a37: add [rax-0x77], cl; ret 0x788b;
0x000b6a3a: ret 0x788b;
0x000b6b40: shl byte ptr [rbp+rbp*4+0x48], 0x89; ret 0x894c;
0x000b6cb0: mov bh, 0xd; add cl, ch; xlat [rbx]; idiv edi; dec dword ptr [rax-0x77]; ret 0xf748;
0x000b6cb2: add cl, ch; xlat [rbx]; idiv edi; dec dword ptr [rax-0x77]; ret 0xf748;
0x000b6cb4: xlat [rbx]; idiv edi; dec dword ptr [rax-0x77]; ret 0xf748;
0x000b6cb5: idiv edi; dec dword ptr [rax-0x77]; ret 0xf748;
0x000b6cb7: dec dword ptr [rax-0x77]; ret 0xf748;
0x000b6cbd: fiadd st, dword ptr [rbp+0x450f48ff]; ret 0x8948;
0x000b6cbf: dec dword ptr [rax+0xf]; ret 0x8948;
0x000b6d9f: adc [rax-0x77], cl; ret 0x348;
0x000b7153: adc [rax-0x77], cl; ret 0x47e9;
0x000b7156: ret 0x47e9;
0x000b71b6: xchg edx, eax; ret 0x2040;
0x000b720f: ret 0xd329;
0x000b727c: mov dword ptr [rcx+rcx*4+0x5c], 0xa9e81024; push rax; stc; inc dword ptr [rcx-0x73]; iretq;
0x000b7284: push rax; stc; inc dword ptr [rcx-0x73]; iretq;
0x000b7285: stc; inc dword ptr [rcx-0x73]; iretq;
0x000b7286: inc dword ptr [rcx-0x73]; iretq;
0x000b72cf: mov esp, 0x83fffff1; ret;
0x000b770a: ret 0xdac;
0x000b7bfd: jmp qword ptr [rdx+0x4cba000d];
0x000b7dc7: fdivp st(7), st; jmp qword ptr [rsi+0xf];
0x000b7de6: add [rcx], dh; shl byte ptr [rax+rcx*2-0x75], cl; or cl, ch; fdivp st(7), st; jmp qword ptr [rsi+0x2e];
0x000b7de8: shl byte ptr [rax+rcx*2-0x75], cl; or cl, ch; fdivp st(7), st; jmp qword ptr [rsi+0x2e];
0x000b7dec: or cl, ch; fdivp st(7), st; jmp qword ptr [rsi+0x2e];
0x000b7def: fdivp st(7), st; jmp qword ptr [rsi+0x2e];
0x000b7e60: add [rax], al; add [rbp+0x3d], dh; add rsp, 0x28; pop rbx; pop rbp; ret;
0x000b7e62: add [rbp+0x3d], dh; add rsp, 0x28; pop rbx; pop rbp; ret;
0x000b7e64: cmp eax, 0x28c48348; pop rbx; pop rbp; ret;
0x000b7f11: nop [rax]; setg al; movzx eax, al; lea eax, [rax+rax-1]; ret;
0x000b7f13: add byte ptr [rax], 0; add [rax], al; setg al; movzx eax, al; lea eax, [rax+rax-1]; ret;
0x000b7f14: add [rax], al; add [rax], al; setg al; movzx eax, al; lea eax, [rax+rax-1]; ret;
0x000b7f16: add [rax], al; setg al; movzx eax, al; lea eax, [rax+rax-1]; ret;
0x000b7f18: setg al; movzx eax, al; lea eax, [rax+rax-1]; ret;
0x000b7f1b: movzx eax, al; lea eax, [rax+rax-1]; ret;
0x000b7f1c: mov dh, 0xc0; lea eax, [rax+rax-1]; ret;
0x000b7fb0: xchg [rbx+0x48000002], bl; add eax, edi; add rax, rcx; ret;
0x000b7fb1: fwait; add al, [rax]; add [rax+1], cl; clc; add rax, rcx; ret;
0x000b7fb2: add al, [rax]; add [rax+1], cl; clc; add rax, rcx; ret;
0x000b8100: test ebx, ebx; add [rax], al; add [rsi+0xf], ah; xlat [rbx]; ret 0xc085;
0x000b8102: add [rax], al; add [rsi+0xf], ah; xlat [rbx]; ret 0xc085;
0x000b8104: add [rsi+0xf], ah; xlat [rbx]; ret 0xc085;
0x000b811d: xor [r14+0xf], r12b; xlat [rbx]; ret;
0x000b811e: xor [rsi+0xf], ah; xlat [rbx]; ret;
0x000b8129: add [rax], al; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi+rax+0x30]; ret;
0x000b812b: pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi+rax+0x30]; ret;
0x000b812c: pmovmskb eax, mm1; bsf eax, eax; lea rax, [rdi+rax+0x30]; ret;
0x000b812f: bsf eax, eax; lea rax, [rdi+rax+0x30]; ret;
0x000b8141: ret 0x7e20;
0x000b8161: shl dword ptr [rsi+0xf], 1; xlat [rbx]; ret 0xc085;
0x000b8176: fldenv [rsi+0xf]; xlat [rbx]; ret;
0x000b818f: xor [r14+0xf], r12b; xlat [rbx]; rol dword ptr [rbp-0x5c7af040], 0; add [rax], al; xor eax, eax; ret;
0x000b8190: xor [rsi+0xf], ah; xlat [rbx]; rol dword ptr [rbp-0x5c7af040], 0; add [rax], al; xor eax, eax; ret;
0x000b8193: xlat [rbx]; rol dword ptr [rbp-0x5c7af040], 0; add [rax], al; xor eax, eax; ret;
0x000b8194: rol dword ptr [rbp-0x5c7af040], 0; add [rax], al; xor eax, eax; ret;
0x000b8198: test [rbx+0x31000000], esp; rol bl, 0x83; ret 0x6620;
0x000b819a: add [rax], al; add [rcx], dh; rol bl, 0x83; ret 0x6620;
0x000b819c: add [rcx], dh; rol bl, 0x83; ret 0x6620;
0x000b819e: rol bl, 0x83; ret 0x6620;
0x000b81a1: ret 0x6620;
0x000b81bf: adc [r14+0xf], r12b; xlat [rbx]; rol dword ptr [rbp+0x315775c0], 0xc0; ret;
0x000b81c0: adc [rsi+0xf], ah; xlat [rbx]; rol dword ptr [rbp+0x315775c0], 0xc0; ret;
0x000b81c3: xlat [rbx]; rol dword ptr [rbp+0x315775c0], 0xc0; ret;
0x000b81c4: rol dword ptr [rbp+0x315775c0], 0xc0; ret;
0x000b81c8: push rdi; xor eax, eax; ret;
0x000b81cc: nop [rax]; bsf eax, eax; lea rax, [rax+rdi-0x10]; ret;
0x000b81cf: add [rdi], cl; mov esp, 0x448d48c0; cmp al, dh; ret;
0x000b81d0: bsf eax, eax; lea rax, [rax+rdi-0x10]; ret;
0x000b81d1: mov esp, 0x448d48c0; cmp al, dh; ret;
0x000b81d2: ror byte ptr [rax-0x73], 0x44; cmp al, dh; ret;
0x000b81d3: lea rax, [rax+rdi-0x10]; ret;
0x000b81d4: lea eax, [rax+rdi-0x10]; ret;
0x000b81d5: cmp al, r14b; ret;
0x000b81d6: cmp al, dh; ret;
0x000b81d9: nop [rax]; bsf eax, eax; add rax, rdi; ret;
0x000b81db: add byte ptr [rax], 0; add [rax], al; bsf eax, eax; add rax, rdi; ret;
0x000b81dc: add [rax], al; add [rax], al; bsf eax, eax; add rax, rdi; ret;
0x000b81dd: add [rax], al; add [rdi], cl; mov esp, 0xf80148c0; ret;
0x000b81de: add [rax], al; bsf eax, eax; add rax, rdi; ret;
0x000b81df: add [rdi], cl; mov esp, 0xf80148c0; ret;
0x000b81e0: bsf eax, eax; add rax, rdi; ret;
0x000b81e1: mov esp, 0xf80148c0; ret;
0x000b81e2: ror byte ptr [rax+1], 0xf8; ret;
0x000b81e7: nop [rax+rax]; bsf eax, eax; lea rax, [rax+rdi+0x10]; ret;
0x000b81e8: nop [rax+rax]; bsf eax, eax; lea rax, [rax+rdi+0x10]; ret;
0x000b81ea: test [rax], al; add [rax], al; add [rax], al; bsf eax, eax; lea rax, [rax+rdi+0x10]; ret;
0x000b81eb: add [rax], al; add [rax], al; add [rdi], cl; mov esp, 0x448d48c0; cmp [rax], dl; ret;
0x000b81ec: add [rax], al; add [rax], al; bsf eax, eax; lea rax, [rax+rdi+0x10]; ret;
0x000b81ed: add [rax], al; add [rdi], cl; mov esp, 0x448d48c0; cmp [rax], dl; ret;
0x000b81ee: add [rax], al; bsf eax, eax; lea rax, [rax+rdi+0x10]; ret;
0x000b81ef: add [rdi], cl; mov esp, 0x448d48c0; cmp [rax], dl; ret;
0x000b81f0: bsf eax, eax; lea rax, [rax+rdi+0x10]; ret;
0x000b81f1: mov esp, 0x448d48c0; cmp [rax], dl; ret;
0x000b81f2: ror byte ptr [rax-0x73], 0x44; cmp [rax], dl; ret;
0x000b81f3: lea rax, [rax+rdi+0x10]; ret;
0x000b81f4: lea eax, [rax+rdi+0x10]; ret;
0x000b81f5: cmp [rax], r10b; ret;
0x000b81f6: cmp [rax], dl; ret;
0x000b81f7: adc bl, al; nop [rax]; bsf eax, eax; lea rax, [rax+rdi+0x20]; ret;
0x000b81f9: nop [rax]; bsf eax, eax; lea rax, [rax+rdi+0x20]; ret;
0x000b81fb: add byte ptr [rax], 0; add [rax], al; bsf eax, eax; lea rax, [rax+rdi+0x20]; ret;
0x000b81fc: add [rax], al; add [rax], al; bsf eax, eax; lea rax, [rax+rdi+0x20]; ret;
0x000b81fd: add [rax], al; add [rdi], cl; mov esp, 0x448d48c0; cmp [rax], ah; ret;
0x000b81fe: add [rax], al; bsf eax, eax; lea rax, [rax+rdi+0x20]; ret;
0x000b81ff: add [rdi], cl; mov esp, 0x448d48c0; cmp [rax], ah; ret;
0x000b8200: bsf eax, eax; lea rax, [rax+rdi+0x20]; ret;
0x000b8201: mov esp, 0x448d48c0; cmp [rax], ah; ret;
0x000b8202: ror byte ptr [rax-0x73], 0x44; cmp [rax], ah; ret;
0x000b8203: lea rax, [rax+rdi+0x20]; ret;
0x000b8204: lea eax, [rax+rdi+0x20]; ret;
0x000b8205: cmp [rax], r12b; ret;
0x000b8206: cmp [rax], ah; ret;
0x000b8215: ret 0x3876;
0x000b8217: cmp [rax+1], cl; clc; ret;
0x000b8225: ret 0x2876;
0x000b8228: lea rax, [rdi+rax+0x10]; ret;
0x000b8229: lea eax, [rdi+rax+0x10]; ret;
0x000b8235: ret 0x1876;
0x000b8238: lea rax, [rdi+rax+0x20]; ret;
0x000b8239: lea eax, [rdi+rax+0x20]; ret;
0x000b8245: ret 0x876;
0x000b8248: lea rax, [rdi+rax+0x30]; ret;
0x000b8249: lea eax, [rdi+rax+0x30]; ret;
0x000b824c: xor bl, al; xchg ax, ax; xor eax, eax; ret;
0x000b8929: and cl, ch; sar ebx, 0xff; call qword ptr [rax+0x166f0ff3];
0x000b892b: sar ebx, 0xff; call qword ptr [rax+0x166f0ff3];
0x000b892e: call qword ptr [rax+0x166f0ff3];
0x000b8ae9: and cl, ch; sar esi, 0xff; call qword ptr [rax+0xf6f0ff3];
0x000b8aeb: sar esi, 0xff; call qword ptr [rax+0xf6f0ff3];
0x000b8aee: call qword ptr [rax+0xf6f0ff3];
0x000b8dc0: test [rbx+1], ecx; add [rax], al; ret;
0x000b8dcd: add [rax], al; add [rbx+0x463b0447], cl; add al, 0xf; test [rcx+rax], esi; add [rax], al; ret;
0x000b8dcf: add [rbx+0x463b0447], cl; add al, 0xf; test [rcx+rax], esi; add [rax], al; ret;
0x000b8dd2: add al, 0x3b; add al, 0xf; test [rcx+rax], esi; add [rax], al; ret;
0x000b8dd5: add al, 0xf; test [rcx+rax], esi; add [rax], al; ret;
0x000b8dd7: test [rcx+rax], esi; add [rax], al; ret;
0x000b8dd8: xor al, 1; add [rax], al; ret;
0x000b8dff: add [rbx+0x463b0c47], cl; or al, 0xf; test [rcx+rax], eax; add [rax], al; ret;
0x000b8e02: or al, 0x3b; or al, 0xf; test [rcx+rax], eax; add [rax], al; ret;
0x000b8e05: or al, 0xf; test [rcx+rax], eax; add [rax], al; ret;
0x000b8e07: test [rcx+rax], eax; add [rax], al; ret;
0x000b8e08: add al, 1; add [rax], al; ret;
0x000b8e83: mov [rax], eax; add [rax], al; ret;
0x000b8ea4: or ecx, [rbx+0x463b2847]; sub [rbp+0x63], dh; ret;
0x000b8ea6: sub [r11], r15b; sub [rbp+0x63], r14b; ret;
0x000b8ea7: sub [rbx], bh; sub [rbp+0x63], r14b; ret;
0x000b8ea9: sub [rbp+0x63], r14b; ret;
0x000b8eaa: sub [rbp+0x63], dh; ret;
0x000b8eb2: sub al, 0x3b; sub al, 0x75; pop rax; ret;
0x000b8eb5: sub al, 0x75; pop rax; ret;
0x000b8ec8: pcmpeqb mm2, [rip+0x3b30478b]; xor [rbp+0x3d], r14b; ret;
0x000b8eca: adc eax, 0x3b30478b; xor [rbp+0x3d], r14b; ret;
0x000b8ecc: xor [r11], r15b; xor [rbp+0x3d], r14b; ret;
0x000b8ecd: xor [rbx], bh; xor [rbp+0x3d], r14b; ret;
0x000b8ecf: xor [rbp+0x3d], r14b; ret;
0x000b8ed0: xor [rbp+0x3d], dh; ret;
0x000b8ef4: or ecx, [rbx+0x463b3847]; cmp [rbp+0x13], dh; ret;
0x000b8ef6: cmp [r11], r15b; cmp [rbp+0x13], r14b; ret;
0x000b8ef7: cmp [rbx], bh; cmp [rbp+0x13], r14b; ret;
0x000b8ef9: cmp [rbp+0x13], r14b; ret;
0x000b8efa: cmp [rbp+0x13], dh; ret;
0x000b8f12: add [rax], al; add [rdi+2], bh; neg eax; ret;
0x000b8f14: add [rdi+2], bh; neg eax; ret;
0x000b8f16: add dh, bh; fadd st, st(3); nop [rax+rax]; xor rax, rax; ret;
0x000b8f18: fadd st, st(3); nop [rax+rax]; xor rax, rax; ret;
0x000b8f1a: nop [rax+rax]; xor rax, rax; ret;
0x000b8f1b: nop [rax+rax]; xor rax, rax; ret;
0x000b8f1d: add [rax], r8b; xor rax, rax; ret;
0x000b8fb1: add [rcx+0x39], ecx; shl byte ptr [rbp-0x17], 0x45; xor eax, eax; mov eax, r8d; ret;
0x000b8fb4: shl byte ptr [rbp-0x17], 0x45; xor eax, eax; mov eax, r8d; ret;
0x000b8fc8: rol byte ptr [rcx-9], 0xd8; cmp eax, ecx; mov eax, 1; cmovg r8d, eax; mov eax, r8d; ret;
0x000b8fc9: neg r8d; cmp eax, ecx; mov eax, 1; cmovg r8d, eax; mov eax, r8d; ret;
0x000b8fca: neg eax; cmp eax, ecx; mov eax, 1; cmovg r8d, eax; mov eax, r8d; ret;
0x000b8fcb: fdivr st, dword ptr [rcx]; enter 0x1b8, 0; add [rax], al; cmovg r8d, eax; mov eax, r8d; ret;
0x000b8fcc: cmp eax, ecx; mov eax, 1; cmovg r8d, eax; mov eax, r8d; ret;
0x000b8fcd: enter 0x1b8, 0; add [rax], al; cmovg r8d, eax; mov eax, r8d; ret;
0x000b8fce: mov eax, 1; cmovg r8d, eax; mov eax, r8d; ret;
0x000b8fcf: add [rax], eax; add [rax], al; cmovg r8d, eax; mov eax, r8d; ret;
0x000b8fd1: add [rax], al; cmovg r8d, eax; mov eax, r8d; ret;
0x000b8fea: setl r8b; neg r8d; cmp edx, ecx; cmovg r8d, eax; mov eax, r8d; ret;
0x000b8feb: setl al; neg r8d; cmp edx, ecx; cmovg r8d, eax; mov eax, r8d; ret;
0x000b8fec: pushfq; rol byte ptr [rcx-9], 0xd8; cmp edx, ecx; cmovg r8d, eax; mov eax, r8d; ret;
0x000b8fed: rol byte ptr [rcx-9], 0xd8; cmp edx, ecx; cmovg r8d, eax; mov eax, r8d; ret;
0x000b8fee: neg r8d; cmp edx, ecx; cmovg r8d, eax; mov eax, r8d; ret;
0x000b8fef: neg eax; cmp edx, ecx; cmovg r8d, eax; mov eax, r8d; ret;
0x000b8ff1: cmp edx, ecx; cmovg r8d, eax; mov eax, r8d; ret;
0x000b8ff3: cmovg r8d, eax; mov eax, r8d; ret;
0x000b8ff4: cmovg eax, eax; mov eax, r8d; ret;
0x000b90ce: xchg ebp, ebx; add [rax], al; add [rax+1], cl; clc; add rax, rcx; ret;
0x000b90cf: fld st, qword ptr [rax]; add [rax], al; add rax, rdi; add rax, rcx; ret;
0x000b90d0: add [rax], al; add [rax+1], cl; clc; add rax, rcx; ret;
0x000b90d1: add [rax], al; add rax, rdi; add rax, rcx; ret;
0x000b90d2: add [rax+1], cl; clc; add rax, rcx; ret;
0x000b90d3: add rax, rdi; add rax, rcx; ret;
0x000b90d4: add eax, edi; add rax, rcx; ret;
0x000b90d5: clc; add rax, rcx; ret;
0x000b90d6: add rax, rcx; ret;
0x000b90d7: add eax, ecx; ret;
0x000b911a: ret 0x6375;
0x000b9137: ret 0x4675;
0x000b9154: ret 0x2975;
0x000b9171: ret 0xc75;
0x000b9198: enter 0x1577, 0x48; sub edi, 0x10; add rax, rdi; ret;
0x000b919a: adc eax, 0x10ef8348; add rax, rdi; ret;
0x000b919b: sub rdi, 0x10; add rax, rdi; ret;
0x000b919c: sub edi, 0x10; add rax, rdi; ret;
0x000b919d: out dx, eax; adc [rax+1], cl; clc; ret;
0x000b919e: adc [rax+1], cl; clc; ret;
0x000b91a4: nop [rax+rax]; xchg ax, ax; xor rax, rax; ret;
0x000b91a5: nop [rax+rax]; xchg ax, ax; xor rax, rax; ret;
0x000b91a6: nop [rax+rax]; xchg ax, ax; xor rax, rax; ret;
0x000b91a8: test [rax], al; add [rax], al; add [rax], al; xchg ax, ax; xor rax, rax; ret;
0x000b91a9: add [rax], al; add [rax], al; add [rsi-0x70], ah; xor rax, rax; ret;
0x000b91aa: add [rax], al; add [rax], al; xchg ax, ax; xor rax, rax; ret;
0x000b91ab: add [rax], al; add [rsi-0x70], ah; xor rax, rax; ret;
0x000b91ac: add [rax], al; xchg ax, ax; xor rax, rax; ret;
0x000b91ad: add [rsi-0x70], ah; xor rax, rax; ret;
0x000b91ae: xchg ax, ax; xor rax, rax; ret;
0x000b9328: test [rbx+1], esp; add [rax], al; lea rax, [rdi-0x10]; ret;
0x000b9329: movsxd eax, [rcx]; add [rax], al; lea rax, [rdi-0x10]; ret;
0x000b938b: add [rcx], eax; add [rax], al; lea rax, [rdi-0x10]; ret;
0x000b93c9: jmp far fword ptr [rax-0x417af010];
0x000b93cd: test [rsi+0x48000000], edi; lea eax, [rdi-0x10]; ret;
0x000b93ce: mov esi, 0x48000000; lea eax, [rdi-0x10]; ret;
0x000b93fa: add [rax], al; lea rax, [rdi-0x10]; ret;
0x000b9421: pcmpeqw mm1, [rax+rcx*2+0x25]; call far fword ptr [rdi];
0x000b943c: push rbx; lea rax, [rdi-0x10]; ret;
0x000b9453: add [rax], al; add [rax+rbp*2+0x48], dh; lea eax, [rdi-0x10]; ret;
0x000b9455: add [rax+rbp*2+0x48], dh; lea eax, [rdi-0x10]; ret;
0x000b9457: push 0xfffffffff0478d48; ret;
0x000b9469: lea rax, [rdi-0x10]; ret;
0x000b9480: lea rax, [rdi-0x10]; ret;
0x000b9481: lea eax, [rdi-0x10]; ret;
0x000b9486: nop [rax+rax]; lea rax, [rdi-0xc]; ret;
0x000b9487: nop [rax+rax]; lea rax, [rdi-0xc]; ret;
0x000b9488: nop [rax+rax]; lea rax, [rdi-0xc]; ret;
0x000b948a: test [rax], al; add [rax], al; add [rax], al; lea rax, [rdi-0xc]; ret;
0x000b948b: add [rax], al; add [rax], al; add [rax-0x73], cl; hlt; ret;
0x000b948c: add [rax], al; add [rax], al; lea rax, [rdi-0xc]; ret;
0x000b948d: add [rax], al; add [rax-0x73], cl; hlt; ret;
0x000b948e: add [rax], al; lea rax, [rdi-0xc]; ret;
0x000b948f: add [rax-0x73], cl; hlt; ret;
0x000b9490: lea rax, [rdi-0xc]; ret;
0x000b9491: lea eax, [rdi-0xc]; ret;
0x000b9493: hlt; ret;
0x000b9496: nop [rax+rax]; lea rax, [rdi-8]; ret;
0x000b9497: nop [rax+rax]; lea rax, [rdi-8]; ret;
0x000b9498: nop [rax+rax]; lea rax, [rdi-8]; ret;
0x000b949a: test [rax], al; add [rax], al; add [rax], al; lea rax, [rdi-8]; ret;
0x000b949b: add [rax], al; add [rax], al; add [rax-0x73], cl; clc; ret;
0x000b949c: add [rax], al; add [rax], al; lea rax, [rdi-8]; ret;
0x000b949d: add [rax], al; add [rax-0x73], cl; clc; ret;
0x000b949e: add [rax], al; lea rax, [rdi-8]; ret;
0x000b949f: add [rax-0x73], cl; clc; ret;
0x000b94a0: lea rax, [rdi-8]; ret;
0x000b94a1: lea eax, [rdi-8]; ret;
0x000b94a6: nop [rax+rax]; lea rax, [rdi-4]; ret;
0x000b94a7: nop [rax+rax]; lea rax, [rdi-4]; ret;
0x000b94a8: nop [rax+rax]; lea rax, [rdi-4]; ret;
0x000b94aa: test [rax], al; add [rax], al; add [rax], al; lea rax, [rdi-4]; ret;
0x000b94ab: add [rax], al; add [rax], al; add [rax-0x73], cl; cld; ret;
0x000b94ac: add [rax], al; add [rax], al; lea rax, [rdi-4]; ret;
0x000b94ad: add [rax], al; add [rax-0x73], cl; cld; ret;
0x000b94ae: add [rax], al; lea rax, [rdi-4]; ret;
0x000b94af: add [rax-0x73], cl; cld; ret;
0x000b94b0: lea rax, [rdi-4]; ret;
0x000b94b1: lea eax, [rdi-4]; ret;
0x000b94d2: div byte ptr [rbp+4]; xor rax, rax; ret;
0x000b94d4: add al, 0x48; xor eax, eax; ret;
0x000b9506: add [rax-0x7f], cl; stc; iretd;
0x000b9509: stc; iretd;
0x000b956f: ror byte ptr [rdi], cl; test [rdx+0x48000000], bl; bsf eax, edx; shr rax, 2; ret;
0x000b9571: test [rdx+0x48000000], bl; bsf eax, edx; shr rax, 2; ret;
0x000b9574: add [rax], al; bsf rax, rdx; shr rax, 2; ret;
0x000b95db: shl byte ptr [rdx+0x48], cl; bsf eax, edx; shr rax, 2; ret;
0x000b95f0: shl byte ptr [rbp+rcx+0x48], cl; bsf eax, edx; shr rax, 2; ret;
0x000b95f2: or eax, 0xc2bc0f48; shr rax, 2; ret;
0x000b95f3: bsf rax, rdx; shr rax, 2; ret;
0x000b95f4: bsf eax, edx; shr rax, 2; ret;
0x000b960f: add [rax-0x7d], cl; rol byte ptr [rax+0x49], 0x39; ret 0x2774;
0x000b9612: rol byte ptr [rax+0x49], 0x39; ret 0x2774;
0x000b9616: ret 0x2774;
0x000b963f: add [rcx+0x39], cl; ret;
0x000b9682: bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret;
0x000b9683: bts edx, ebx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret;
0x000b9684: stosd [rdi]; fimul st, dword ptr [rax+0xf]; mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret;
0x000b9685: fimul st, dword ptr [rax+0xf]; mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret;
0x000b96c2: xlat [rbx]; ret 0xf66;
0x000b96da: or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret;
0x000b96db: or edx, ecx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret;
0x000b96dd: bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret;
0x000b96de: bsf edx, edx; add rax, rdx; sub rax, rdi; shr rax, 2; ret;
0x000b96df: mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret;
0x000b96e0: ror byte ptr [rax+1], cl; ror byte ptr [rax+0x29], 1; clc; shr rax, 2; ret;
0x000b96e1: add rax, rdx; sub rax, rdi; shr rax, 2; ret;
0x000b96e2: add eax, edx; sub rax, rdi; shr rax, 2; ret;
0x000b96e3: ror byte ptr [rax+0x29], 1; clc; shr rax, 2; ret;
0x000b96e4: sub rax, rdi; shr rax, 2; ret;
0x000b96e5: sub eax, edi; shr rax, 2; ret;
0x000b96e6: clc; shr rax, 2; ret;
0x000b96e7: shr rax, 2; ret;
0x000b96e8: shr eax, 2; ret;
0x000b9703: mov edx, 0x8948fff6; ret 0x2948;
0x000b9705: dec dword ptr [rax-0x77]; ret 0x2948;
0x000b970e: clc; add cl, [rax-0x7b]; ror byte ptr [rax+0xf], cl; ret;
0x000b970f: add cl, [rax-0x7b]; ror byte ptr [rax+0xf], cl; ret;
0x000b9710: test rdx, rdx; cmove rax, rbx; add rsp, 8; pop rbx; pop rbp; ret;
0x000b9711: test edx, edx; cmove rax, rbx; add rsp, 8; pop rbx; pop rbp; ret;
0x000b9712: ror byte ptr [rax+0xf], cl; ret;
0x000b9713: cmove rax, rbx; add rsp, 8; pop rbx; pop rbp; ret;
0x000b9714: cmove eax, ebx; add rsp, 8; pop rbx; pop rbp; ret;
0x000b98f8: shl byte ptr [rbp+rdx-0x78], cl; rol dword ptr [rax+0x1e740fe1], 1; ret;
0x000b98fa: adc eax, 0xe180d188; pcmpeqb mm3, [rsi]; ret;
0x000b98fc: rol dword ptr [rax+0x1e740fe1], 1; ret;
0x000b98ff: pcmpeqb mm3, [rsi]; ret;
0x000b9914: pcmpeqb mm3, [rcx]; add rax, 2; ret;
0x000b9916: sbb [rax-0x7d], ecx; rol byte ptr [rdx], 0xc3; nop [rax]; add rax, 1; ret;
0x000b9917: add rax, 2; ret;
0x000b9918: add eax, 2; ret;
0x000b9919: rol byte ptr [rdx], 0xc3; nop [rax]; add rax, 1; ret;
0x000b991a: add al, bl; nop [rax]; add rax, 1; ret;
0x000b991c: nop [rax]; add rax, 1; ret;
0x000b991f: add [rax-0x7d], cl; rol byte ptr [rcx], 0xc3; nop [rax+rax]; add rax, 3; ret;
0x000b9920: add rax, 1; ret;
0x000b9921: add eax, 1; ret;
0x000b9922: rol byte ptr [rcx], 0xc3; nop [rax+rax]; add rax, 3; ret;
0x000b9923: add ebx, eax; nop [rax+rax]; add rax, 3; ret;
0x000b9926: nop [rax+rax]; add rax, 3; ret;
0x000b9927: nop [rax+rax]; add rax, 3; ret;
0x000b9928: nop [rax+rax]; add rax, 3; ret;
0x000b992a: test [rax], al; add [rax], al; add [rax], al; add rax, 3; ret;
0x000b992c: add [rax], al; add [rax], al; add rax, 3; ret;
0x000b992d: add [rax], al; add [rax-0x7d], cl; rol byte ptr [rbx], 0xc3; nop [rax+rax]; xor rax, rax; ret;
0x000b992e: add [rax], al; add rax, 3; ret;
0x000b992f: add [rax-0x7d], cl; rol byte ptr [rbx], 0xc3; nop [rax+rax]; xor rax, rax; ret;
0x000b9930: add rax, 3; ret;
0x000b9931: add eax, 3; ret;
0x000b9932: rol byte ptr [rbx], 0xc3; nop [rax+rax]; xor rax, rax; ret;
0x000b9933: add eax, ebx; nop [rax+rax]; xor rax, rax; ret;
0x000b9936: nop [rax+rax]; xor rax, rax; ret;
0x000b9937: nop [rax+rax]; xor rax, rax; ret;
0x000b9938: nop [rax+rax]; xor rax, rax; ret;
0x000b993a: test [rax], al; add [rax], al; add [rax], al; xor rax, rax; ret;
0x000b993c: add [rax], al; add [rax], al; xor rax, rax; ret;
0x000b993e: add [rax], al; xor rax, rax; ret;
0x000b993f: add [rax+0x31], cl; rol bl, 0x66; nop [rax+rax]; nop; mov rax, 1; ret;
0x000b9942: rol bl, 0x66; nop [rax+rax]; nop; mov rax, 1; ret;
0x000b9945: nop [rax+rax]; nop; mov rax, 1; ret;
0x000b9946: nop [rax+rax]; nop; mov rax, 1; ret;
0x000b9947: nop [rax+rax]; nop; mov rax, 1; ret;
0x000b9949: test [rax], al; add [rax], al; add [rax], al; nop; mov rax, 1; ret;
0x000b994b: add [rax], al; add [rax], al; nop; mov rax, 1; ret;
0x000b994d: add [rax], al; nop; mov rax, 1; ret;
0x000b994e: add [rax+0x1c0c748], dl; add [rax], al; add bl, al; nop [rax+rax]; mov rax, 2; ret;
0x000b994f: nop; mov rax, 1; ret;
0x000b9950: mov rax, 1; ret;
0x000b9951: mov eax, 1; ret;
0x000b9952: rol byte ptr [rcx], 0; add [rax], al; ret;
0x000b9954: add [rax], al; add bl, al; nop [rax+rax]; mov rax, 2; ret;
0x000b9956: add bl, al; nop [rax+rax]; mov rax, 2; ret;
0x000b9958: nop [rax+rax]; mov rax, 2; ret;
0x000b995a: test [rax], al; add [rax], al; add [rax], al; mov rax, 2; ret;
0x000b995b: add [rax], al; add [rax], al; add [rax-0x39], cl; rol byte ptr [rdx], 0; add [rax], al; ret;
0x000b995c: add [rax], al; add [rax], al; mov rax, 2; ret;
0x000b995d: add [rax], al; add [rax-0x39], cl; rol byte ptr [rdx], 0; add [rax], al; ret;
0x000b995e: add [rax], al; mov rax, 2; ret;
0x000b995f: add [rax-0x39], cl; rol byte ptr [rdx], 0; add [rax], al; ret;
0x000b9960: mov rax, 2; ret;
0x000b9961: mov eax, 2; ret;
0x000b9962: rol byte ptr [rdx], 0; add [rax], al; ret;
0x000b9964: add [rax], al; add bl, al; nop [rax+rax]; mov rax, 3; ret;
0x000b9966: add bl, al; nop [rax+rax]; mov rax, 3; ret;
0x000b9968: nop [rax+rax]; mov rax, 3; ret;
0x000b996a: test [rax], al; add [rax], al; add [rax], al; mov rax, 3; ret;
0x000b996b: add [rax], al; add [rax], al; add [rax-0x39], cl; rol byte ptr [rbx], 0; add [rax], al; ret;
0x000b996c: add [rax], al; add [rax], al; mov rax, 3; ret;
0x000b996d: add [rax], al; add [rax-0x39], cl; rol byte ptr [rbx], 0; add [rax], al; ret;
0x000b996e: add [rax], al; mov rax, 3; ret;
0x000b996f: add [rax-0x39], cl; rol byte ptr [rbx], 0; add [rax], al; ret;
0x000b9970: mov rax, 3; ret;
0x000b9971: mov eax, 3; ret;
0x000b9972: rol byte ptr [rbx], 0; add [rax], al; ret;
0x000b9973: add eax, [rax]; add [rax], al; ret;
0x000b9974: add [rax], al; add bl, al; nop [rax+rax]; mov rax, 4; ret;
0x000b9976: add bl, al; nop [rax+rax]; mov rax, 4; ret;
0x000b9978: nop [rax+rax]; mov rax, 4; ret;
0x000b997a: test [rax], al; add [rax], al; add [rax], al; mov rax, 4; ret;
0x000b997c: add [rax], al; add [rax], al; mov rax, 4; ret;
0x000b997e: add [rax], al; mov rax, 4; ret;
0x000b997f: add [rax-0x39], cl; rol byte ptr [rax+rax], 0; add bl, al; nop [rax+rax]; mov rax, 5; ret;
0x000b9980: mov rax, 4; ret;
0x000b9981: mov eax, 4; ret;
0x000b9982: rol byte ptr [rax+rax], 0; add bl, al; nop [rax+rax]; mov rax, 5; ret;
0x000b9983: add al, 0; add [rax], al; ret;
0x000b9984: add [rax], al; add bl, al; nop [rax+rax]; mov rax, 5; ret;
0x000b9986: add bl, al; nop [rax+rax]; mov rax, 5; ret;
0x000b9988: nop [rax+rax]; mov rax, 5; ret;
0x000b998a: test [rax], al; add [rax], al; add [rax], al; mov rax, 5; ret;
0x000b998c: add [rax], al; add [rax], al; mov rax, 5; ret;
0x000b998e: add [rax], al; mov rax, 5; ret;
0x000b9990: mov rax, 5; ret;
0x000b9991: mov eax, 5; ret;
0x000b9993: add eax, 0xc3000000; nop [rax+rax]; mov rax, 6; ret;
0x000b9994: add [rax], al; add bl, al; nop [rax+rax]; mov rax, 6; ret;
0x000b9996: add bl, al; nop [rax+rax]; mov rax, 6; ret;
0x000b9998: nop [rax+rax]; mov rax, 6; ret;
0x000b999a: test [rax], al; add [rax], al; add [rax], al; mov rax, 6; ret;
0x000b999b: add [rax], al; add [rax], al; add [rax-0x39], cl; rol byte ptr [rsi], 0; add [rax], al; ret;
0x000b999c: add [rax], al; add [rax], al; mov rax, 6; ret;
0x000b999d: add [rax], al; add [rax-0x39], cl; rol byte ptr [rsi], 0; add [rax], al; ret;
0x000b999e: add [rax], al; mov rax, 6; ret;
0x000b999f: add [rax-0x39], cl; rol byte ptr [rsi], 0; add [rax], al; ret;
0x000b99a0: mov rax, 6; ret;
0x000b99a1: mov eax, 6; ret;
0x000b99a2: rol byte ptr [rsi], 0; add [rax], al; ret;
0x000b99a4: add [rax], al; add bl, al; nop [rax+rax]; mov rax, 7; ret;
0x000b99a6: add bl, al; nop [rax+rax]; mov rax, 7; ret;
0x000b99a8: nop [rax+rax]; mov rax, 7; ret;
0x000b99aa: test [rax], al; add [rax], al; add [rax], al; mov rax, 7; ret;
0x000b99ab: add [rax], al; add [rax], al; add [rax-0x39], cl; rol byte ptr [rdi], 0; add [rax], al; ret;
0x000b99ac: add [rax], al; add [rax], al; mov rax, 7; ret;
0x000b99ad: add [rax], al; add [rax-0x39], cl; rol byte ptr [rdi], 0; add [rax], al; ret;
0x000b99ae: add [rax], al; mov rax, 7; ret;
0x000b99af: add [rax-0x39], cl; rol byte ptr [rdi], 0; add [rax], al; ret;
0x000b99b0: mov rax, 7; ret;
0x000b99b1: mov eax, 7; ret;
0x000b99b2: rol byte ptr [rdi], 0; add [rax], al; ret;
0x000b99ed: ret 0x5180;
0x000b9c5d: sub cl, [rax-0x3f]; iretd;
0x000b9c66: sub cl, [rax-0x48]; mov al, 0x1e; test ebx, ebp; push rcx; mov eax, 0x148051e; ret 0xb848;
0x000b9c68: mov eax, 0xeb851eb0; push rcx; mov eax, 0x148051e; ret 0xb848;
0x000b9c69: mov al, 0x1e; test ebx, ebp; push rcx; mov eax, 0x148051e; ret 0xb848;
0x000b9c6b: test ebx, ebp; push rcx; mov eax, 0x148051e; ret 0xb848;
0x000b9c6d: push rcx; mov eax, 0x148051e; ret 0xb848;
0x000b9c6e: mov eax, 0x148051e; ret 0xb848;
0x000b9d3d: ret 0x207f;
0x000b9d6f: ret 0xce7e;
0x000b9da5: ret 0x987e;
0x000b9e3e: fdiv st, dword ptr [rbx+0x1f]; add rsp, 8; mov rax, r12; pop rbx; pop r12; ret;
0x000b9e6a: mov dword ptr fs:[rax], 0x4b; add rsp, 8; mov rax, r12; pop rbx; pop r12; ret;
0x000b9e6b: mov dword ptr [rax], 0x4b; add rsp, 8; mov rax, r12; pop rbx; pop r12; ret;
0x000b9e6f: add [rax], al; add rsp, 8; mov rax, r12; pop rbx; pop r12; ret;
0x000b9e80: xor r12d, r12d; add rsp, 8; mov rax, r12; pop rbx; pop r12; ret;
0x000b9e81: xor esp, esp; add rsp, 8; mov rax, r12; pop rbx; pop r12; ret;
0x000b9f09: or [rax+0x69], cl; xor al, 0x24; str [rax-0x46]; iretd;
0x000b9f0c: xor al, 0x24; str [rax-0x46]; iretd;
0x000b9f0d: and al, 0x40; str [rax-0x46]; iretd;
0x000b9f10: str [rax-0x46]; iretd;
0x000b9f11: add [rax-0x46], cl; iretd;
0x000b9f3c: add [rax], al; add [rbp+0x18], dh; add rsp, 0x28; ret;
0x000b9f3e: add [rbp+0x18], dh; add rsp, 0x28; ret;
0x000b9f58: fsubr st, st(0); ret 0x536;
0x000b9f5a: ret 0x536;
0x000b9fd9: mov [rsp-0x10], rsi; fild st, qword ptr [rsp-0x10]; fsubp; fstp qword ptr [rsp-0x10], st; movsd xmm0, [rsp-0x10]; ret;
0x000b9fda: mov [rsp-0x10], esi; fild st, qword ptr [rsp-0x10]; fsubp; fstp qword ptr [rsp-0x10], st; movsd xmm0, [rsp-0x10]; ret;
0x000b9fdc: and al, 0xf0; fild st, qword ptr [rsp-0x10]; fsubp; fstp qword ptr [rsp-0x10], st; movsd xmm0, [rsp-0x10]; ret;
0x000b9fde: fild st, qword ptr [rsp-0x10]; fsubp; fstp qword ptr [rsp-0x10], st; movsd xmm0, [rsp-0x10]; ret;
0x000b9fdf: insb [rdi], dx; and al, 0xf0; fsubp; fstp qword ptr [rsp-0x10], st; movsd xmm0, [rsp-0x10]; ret;
0x000b9fe0: and al, 0xf0; fsubp; fstp qword ptr [rsp-0x10], st; movsd xmm0, [rsp-0x10]; ret;
0x000b9fe2: fsubp; fstp qword ptr [rsp-0x10], st; movsd xmm0, [rsp-0x10]; ret;
0x000b9fe4: fstp qword ptr [rsp-0x10], st; movsd xmm0, [rsp-0x10]; ret;
0x000b9fe5: pop rsp; and al, 0xf0; movsd xmm0, [rsp-0x10]; ret;
0x000b9fe6: and al, 0xf0; movsd xmm0, [rsp-0x10]; ret;
0x000b9fe8: movsd xmm0, [rsp-0x10]; ret;
0x000b9fe9: movups xmm0, [rsp-0x10]; ret;
0x000b9fea: adc [rsp-0x10], al; ret;
0x000b9fec: and al, 0xf0; ret;
0x000ba088: rol dword ptr [rbx+0x634801f8], 1; ret 0x8141;
0x000ba08a: clc; add [rax+0x63], ecx; ret 0x8141;
0x000ba08b: add [rax+0x63], ecx; ret 0x8141;
0x000ba0f6: ret 0x2941;
0x000ba13f: xor [rax+0x29], cl; ror byte ptr [rax-0x77], 1; ret 0xc148;
0x000ba151: movsxd rdx, [rsp+0x38]; pop rbx; pop rbp; pop r12; sub rax, rdx; ret;
0x000ba152: movsxd edx, [rsp+0x38]; pop rbx; pop rbp; pop r12; sub rax, rdx; ret;
0x000ba154: and al, 0x38; pop rbx; pop rbp; pop r12; sub rax, rdx; ret;
0x000ba155: cmp [rbx+0x5d], bl; pop r12; sub rax, rdx; ret;
0x000ba156: pop rbx; pop rbp; pop r12; sub rax, rdx; ret;
0x000ba157: pop rbp; pop r12; sub rax, rdx; ret;
0x000ba158: pop r12; sub rax, rdx; ret;
0x000ba159: pop rsp; sub rax, rdx; ret;
0x000ba15a: sub rax, rdx; ret;
0x000ba187: mov rdi, rbp; mov rax, fs:[0x28]; mov [rsp+0x58], rax; xor eax, eax; mov [rsp+0x50], r12; call rbx;
0x000ba188: mov edi, ebp; mov rax, fs:[0x28]; mov [rsp+0x58], rax; xor eax, eax; mov [rsp+0x50], r12; call rbx;
0x000ba189: out dx, eax; mov rax, fs:[0x28]; mov [rsp+0x58], rax; xor eax, eax; mov [rsp+0x50], r12; call rbx;
0x000ba18a: mov rax, fs:[0x28]; mov [rsp+0x58], rax; xor eax, eax; mov [rsp+0x50], r12; call rbx;
0x000ba18b: mov rax, [0x28]; mov [rsp+0x58], rax; xor eax, eax; mov [rsp+0x50], r12; call rbx;
0x000ba18c: mov eax, [0x28]; mov [rsp+0x58], rax; xor eax, eax; mov [rsp+0x50], r12; call rbx;
0x000ba18e: and eax, 0x28; mov [rsp+0x58], rax; xor eax, eax; mov [rsp+0x50], r12; call rbx;
0x000ba18f: sub [rax], al; add [rax], al; mov [rsp+0x58], rax; xor eax, eax; mov [rsp+0x50], r12; call rbx;
0x000ba190: add [rax], al; add [rax-0x77], cl; and al, 0x58; xor eax, eax; mov [rsp+0x50], r12; call rbx;
0x000ba191: add [rax], al; mov [rsp+0x58], rax; xor eax, eax; mov [rsp+0x50], r12; call rbx;
0x000ba192: add [rax-0x77], cl; and al, 0x58; xor eax, eax; mov [rsp+0x50], r12; call rbx;
0x000ba193: mov [rsp+0x58], rax; xor eax, eax; mov [rsp+0x50], r12; call rbx;
0x000ba194: mov [rsp+0x58], eax; xor eax, eax; mov [rsp+0x50], r12; call rbx;
0x000ba196: and al, 0x58; xor eax, eax; mov [rsp+0x50], r12; call rbx;
0x000ba197: pop rax; xor eax, eax; mov [rsp+0x50], r12; call rbx;
0x000ba198: xor eax, eax; mov [rsp+0x50], r12; call rbx;
0x000ba199: ror byte ptr [rcx+rcx*4+0x64], 0x24; push rax; call rbx;
0x000ba19a: mov [rsp+0x50], r12; call rbx;
0x000ba19b: mov [rsp+0x50], esp; call rbx;
0x000ba19c: and al, 0x50; call rbx;
0x000ba19d: and al, 0x50; call rbx;
0x000ba19e: push rax; call rbx;
0x000ba2b1: mov [rsp+0x50], r12; mov rsi, r15; mov rdi, rbp; call rbx;
0x000ba2b2: mov [rsp+0x50], r12; mov rsi, r15; mov rdi, rbp; call rbx;
0x000ba2b3: mov [rsp+0x50], esp; mov rsi, r15; mov rdi, rbp; call rbx;
0x000ba2b4: and al, 0x50; mov rsi, r15; mov rdi, rbp; call rbx;
0x000ba2b5: and al, 0x50; mov rsi, r15; mov rdi, rbp; call rbx;
0x000ba2b6: push rax; mov rsi, r15; mov rdi, rbp; call rbx;
0x000ba2b7: mov rsi, r15; mov rdi, rbp; call rbx;
0x000ba2b8: mov esi, edi; mov rdi, rbp; call rbx;
0x000ba2b9: dec byte ptr [rax-0x77]; out dx, eax; call rbx;
0x000ba2ba: mov rdi, rbp; call rbx;
0x000ba2bb: mov edi, ebp; call rbx;
0x000ba2bc: out dx, eax; call rbx;
0x000ba3d4: add ch, [rcx]; ror dword ptr [rcx+0x1fe8c1c8], 0x29; ret;
0x000ba3d6: ror dword ptr [rcx+0x1fe8c1c8], 0x29; ret;
0x000ba3e4: fisttp dword ptr [rax+1], st; ret;
0x000ba400: add eax, 0x8f5cbf48; ret 0x28f5;
0x000ba40a: add cl, [rax+0xf]; scasd [rdi]; ret;
0x000ba40d: scasd [rdi]; ret;
0x000ba57e: call qword ptr [rax-0x4fdb4b75];
0x000ba58e: cmp [rdi], cl; xchg ebp, eax; ret 0xc985;
0x000ba590: xchg ebp, eax; ret 0xc985;
0x000ba591: ret 0xc985;
0x000ba5b7: ret 0x5c8b;
0x000ba5ce: adc al, 0xf; sahf; ret 0xc031;
0x000ba5d0: sahf; ret 0xc031;
0x000ba5f2: mov gs:[rsp+0xd0], rax; lea rdi, [rsp+0xd0]; mov rax, [rsp+0x20]; mov rsi, r15; call rax;
0x000ba5f3: mov [rsp+0xd0], rax; lea rdi, [rsp+0xd0]; mov rax, [rsp+0x20]; mov rsi, r15; call rax;
0x000ba5f4: mov [rsp+0xd0], eax; lea rdi, [rsp+0xd0]; mov rax, [rsp+0x20]; mov rsi, r15; call rax;
0x000ba5f7: rol byte ptr [rax], 1; add [rax], al; lea rdi, [rsp+0xd0]; mov rax, [rsp+0x20]; mov rsi, r15; call rax;
0x000ba5f9: add [rax], al; lea rdi, [rsp+0xd0]; mov rax, [rsp+0x20]; mov rsi, r15; call rax;
0x000ba5fa: add [rax-0x73], cl; mov esp, 0xd024; add [rax-0x75], cl; and al, 0x20; mov rsi, r15; call rax;
0x000ba5fb: lea rdi, [rsp+0xd0]; mov rax, [rsp+0x20]; mov rsi, r15; call rax;
0x000ba5fc: lea edi, [rsp+0xd0]; mov rax, [rsp+0x20]; mov rsi, r15; call rax;
0x000ba5fd: mov esp, 0xd024; add [rax-0x75], cl; and al, 0x20; mov rsi, r15; call rax;
0x000ba5fe: and al, 0xd0; add [rax], al; add [rax-0x75], cl; and al, 0x20; mov rsi, r15; call rax;
0x000ba5ff: rol byte ptr [rax], 1; add [rax], al; mov rax, [rsp+0x20]; mov rsi, r15; call rax;
0x000ba600: add [rax], al; add [rax-0x75], cl; and al, 0x20; mov rsi, r15; call rax;
0x000ba601: add [rax], al; mov rax, [rsp+0x20]; mov rsi, r15; call rax;
0x000ba602: add [rax-0x75], cl; and al, 0x20; mov rsi, r15; call rax;
0x000ba603: mov rax, [rsp+0x20]; mov rsi, r15; call rax;
0x000ba604: mov eax, [rsp+0x20]; mov rsi, r15; call rax;
0x000ba606: and al, 0x20; mov rsi, r15; call rax;
0x000ba607: and [rcx+rcx*4-2], cl; call rax;
0x000ba608: mov rsi, r15; call rax;
0x000ba609: mov esi, edi; call rax;
0x000ba6c3: add ecx, [rax-0x7d]; cli; add [rdi], ecx; xchg esp, eax; ret 0xb60f;
0x000ba6c6: cli; add [rdi], ecx; xchg esp, eax; ret 0xb60f;
0x000ba6c7: add [rdi], ecx; xchg esp, eax; ret 0xb60f;
0x000ba6c9: xchg esp, eax; ret 0xb60f;
0x000ba708: sub [rdi], cl; xchg esp, eax; ret 0x3840;
0x000ba70a: xchg esp, eax; ret 0x3840;
0x000ba70b: ret 0x3840;
0x000ba76a: add [rax], al; add bh, dh; fisttp dword ptr [rax+0x63], st; ret;
0x000ba76c: add bh, dh; fisttp dword ptr [rax+0x63], st; ret;
0x000ba76e: fisttp dword ptr [rax+0x63], st; ret;
0x000ba7ca: ror byte ptr [rdi], 0x94; ret 0x5438;
0x000ba7cc: xchg esp, eax; ret 0x5438;
0x000ba7cd: ret 0x5438;
0x000ba823: add rax, [rsp+0x80]; mov rsi, [rsp+0x60]; mov [rsp+0x88], rax; mov r15, rax; lea rdi, [rsp+0x88]; call rbp;
0x000ba824: add eax, [rsp+0x80]; mov rsi, [rsp+0x60]; mov [rsp+0x88], rax; mov r15, rax; lea rdi, [rsp+0x88]; call rbp;
0x000ba829: add [rax], al; mov rsi, [rsp+0x60]; mov [rsp+0x88], rax; mov r15, rax; lea rdi, [rsp+0x88]; call rbp;
0x000ba82b: mov rsi, [rsp+0x60]; mov [rsp+0x88], rax; mov r15, rax; lea rdi, [rsp+0x88]; call rbp;
0x000ba82c: mov esi, [rsp+0x60]; mov [rsp+0x88], rax; mov r15, rax; lea rdi, [rsp+0x88]; call rbp;
0x000ba82e: and al, 0x60; mov [rsp+0x88], rax; mov r15, rax; lea rdi, [rsp+0x88]; call rbp;
0x000ba830: mov [rsp+0x88], rax; mov r15, rax; lea rdi, [rsp+0x88]; call rbp;
0x000ba831: mov [rsp+0x88], eax; mov r15, rax; lea rdi, [rsp+0x88]; call rbp;
0x000ba834: mov [rax], al; add [rax], al; mov r15, rax; lea rdi, [rsp+0x88]; call rbp;
0x000ba836: add [rax], al; mov r15, rax; lea rdi, [rsp+0x88]; call rbp;
0x000ba838: mov r15, rax; lea rdi, [rsp+0x88]; call rbp;
0x000ba839: mov edi, eax; lea rdi, [rsp+0x88]; call rbp;
0x000ba83b: lea rdi, [rsp+0x88]; call rbp;
0x000ba83c: lea edi, [rsp+0x88]; call rbp;
0x000ba83f: mov [rax], al; add [rax], al; call rbp;
0x000ba841: add [rax], al; call rbp;
0x000ba8d0: mov eax, 0xc9; syscall;
0x000ba8e2: adc eax, 0x103589; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000ba8e3: mov [rip-0x2708fff0], esi; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000ba8e4: xor eax, 0xd8f70010; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000ba8e5: adc [rax], al; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000ba99d: mov rax, [rax]; add rax, [rdx+8]; lea rdx, [rip-0xdb]; cmove rax, rdx; add rsp, 0x58; ret;
0x000ba99e: mov eax, [rax]; add rax, [rdx+8]; lea rdx, [rip-0xdb]; cmove rax, rdx; add rsp, 0x58; ret;
0x000ba99f: add [rax+3], cl; or [rax-0x73], cl; adc eax, 0xffffff25; cmove rax, rdx; add rsp, 0x58; ret;
0x000ba9a0: add rax, [rdx+8]; lea rdx, [rip-0xdb]; cmove rax, rdx; add rsp, 0x58; ret;
0x000ba9a1: add eax, [rdx+8]; lea rdx, [rip-0xdb]; cmove rax, rdx; add rsp, 0x58; ret;
0x000ba9a3: or [rax-0x73], cl; adc eax, 0xffffff25; cmove rax, rdx; add rsp, 0x58; ret;
0x000ba9a4: lea rdx, [rip-0xdb]; cmove rax, rdx; add rsp, 0x58; ret;
0x000ba9a5: lea edx, [rip-0xdb]; cmove rax, rdx; add rsp, 0x58; ret;
0x000ba9a6: adc eax, 0xffffff25; cmove rax, rdx; add rsp, 0x58; ret;
0x000ba9a7: and eax, 0x48ffffff; cmove eax, edx; add rsp, 0x58; ret;
0x000ba9b6: add [rcx], sil; shr bl, 0xe4; nop [rax]; lea rax, [rip-0xf7]; add rsp, 0x58; ret;
0x000ba9b7: add [rcx], dh; shr bl, 0xe4; nop [rax]; lea rax, [rip-0xf7]; add rsp, 0x58; ret;
0x000ba9b9: shr bl, 0xe4; nop [rax]; lea rax, [rip-0xf7]; add rsp, 0x58; ret;
0x000ba9bc: nop [rax]; lea rax, [rip-0xf7]; add rsp, 0x58; ret;
0x000ba9bf: add [rax-0x73], cl; add eax, 0xffffff09; add rsp, 0x58; ret;
0x000ba9c0: lea rax, [rip-0xf7]; add rsp, 0x58; ret;
0x000ba9c1: lea eax, [rip-0xf7]; add rsp, 0x58; ret;
0x000ba9c2: add eax, 0xffffff09; add rsp, 0x58; ret;
0x000ba9cc: nop [rax]; lea rax, [rip-0x107]; ret;
0x000ba9cf: add [rax-0x73], cl; add eax, 0xfffffef9; ret;
0x000ba9d0: lea rax, [rip-0x107]; ret;
0x000ba9d1: lea eax, [rip-0x107]; ret;
0x000ba9d2: add eax, 0xfffffef9; ret;
0x000ba9db: add [rax], al; add [rax], al; add [rax-0x7b], cl; div byte ptr [rbp+0x2b]; mov eax, 0x60; syscall;
0x000ba9dd: add [rax], al; add [rax-0x7b], cl; div byte ptr [rbp+0x2b]; mov eax, 0x60; syscall;
0x000ba9df: add [rax-0x7b], cl; div byte ptr [rbp+0x2b]; mov eax, 0x60; syscall;
0x000ba9e2: div byte ptr [rbp+0x2b]; mov eax, 0x60; syscall;
0x000ba9e4: sub edi, [rax+0x60]; syscall;
0x000ba9e5: mov eax, 0x60; syscall;
0x000ba9f7: add [rax-0x75], cl; adc eax, 0x103471; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ba9fa: adc eax, 0x103471; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ba9fc: xor al, 0x10; add bh, dh; fsub st, dword ptr [rcx+rcx*4+2]; mov eax, 0xffffffff; ret;
0x000baa88: mov byte ptr [rsp+0x14], 0x20; mov qword ptr [rsp+0x40], 0; push 0; push 0; lea r8, [rsp+0x40]; call qword ptr [rax+0x1e8];
0x000baa8b: adc al, 0x20; mov qword ptr [rsp+0x40], 0; push 0; push 0; lea r8, [rsp+0x40]; call qword ptr [rax+0x1e8];
0x000baa8d: mov qword ptr [rsp+0x40], 0; push 0; push 0; lea r8, [rsp+0x40]; call qword ptr [rax+0x1e8];
0x000baa8e: mov dword ptr [rsp+0x40], 0; push 0; push 0; lea r8, [rsp+0x40]; call qword ptr [rax+0x1e8];
0x000baa92: add [rax], al; add [rax], al; push 0; push 0; lea r8, [rsp+0x40]; call qword ptr [rax+0x1e8];
0x000baa93: add [rax], al; add [rdx], ch; push 0; lea r8, [rsp+0x40]; call qword ptr [rax+0x1e8];
0x000baa94: add [rax], al; push 0; push 0; lea r8, [rsp+0x40]; call qword ptr [rax+0x1e8];
0x000baa95: add [rdx], ch; push 0; lea r8, [rsp+0x40]; call qword ptr [rax+0x1e8];
0x000baa96: push 0; push 0; lea r8, [rsp+0x40]; call qword ptr [rax+0x1e8];
0x000baa97: add [rdx], ch; lea r8, [rsp+0x40]; call qword ptr [rax+0x1e8];
0x000baa98: push 0; lea r8, [rsp+0x40]; call qword ptr [rax+0x1e8];
0x000baa99: add [rbp+rcx*4+0x44], cl; and al, 0x40; call qword ptr [rax+0x1e8];
0x000baa9a: lea r8, [rsp+0x40]; call qword ptr [rax+0x1e8];
0x000baa9b: lea eax, [rsp+0x40]; call qword ptr [rax+0x1e8];
0x000baa9d: and al, 0x40; call qword ptr [rax+0x1e8];
0x000baabd: mov rax, [rax]; add rax, [rdx+8]; lea rdx, [rip-0xeb]; cmove rax, rdx; add rsp, 0x58; ret;
0x000baabe: mov eax, [rax]; add rax, [rdx+8]; lea rdx, [rip-0xeb]; cmove rax, rdx; add rsp, 0x58; ret;
0x000baabf: add [rax+3], cl; or [rax-0x73], cl; adc eax, 0xffffff15; cmove rax, rdx; add rsp, 0x58; ret;
0x000baac0: add rax, [rdx+8]; lea rdx, [rip-0xeb]; cmove rax, rdx; add rsp, 0x58; ret;
0x000baac1: add eax, [rdx+8]; lea rdx, [rip-0xeb]; cmove rax, rdx; add rsp, 0x58; ret;
0x000baac3: or [rax-0x73], cl; adc eax, 0xffffff15; cmove rax, rdx; add rsp, 0x58; ret;
0x000baac4: lea rdx, [rip-0xeb]; cmove rax, rdx; add rsp, 0x58; ret;
0x000baac5: lea edx, [rip-0xeb]; cmove rax, rdx; add rsp, 0x58; ret;
0x000baac6: adc eax, 0xffffff15; cmove rax, rdx; add rsp, 0x58; ret;
0x000baac7: adc eax, 0x48ffffff; cmove eax, edx; add rsp, 0x58; ret;
0x000baaca: dec dword ptr [rax+0xf]; ret 0x8348;
0x000baacb: cmove rax, rdx; add rsp, 0x58; ret;
0x000baacc: cmove eax, edx; add rsp, 0x58; ret;
0x000baad6: add [rcx], sil; shr bl, 0xe4; nop [rax]; lea rax, [rip-0x107]; add rsp, 0x58; ret;
0x000baad7: add [rcx], dh; shr bl, 0xe4; nop [rax]; lea rax, [rip-0x107]; add rsp, 0x58; ret;
0x000baad9: shr bl, 0xe4; nop [rax]; lea rax, [rip-0x107]; add rsp, 0x58; ret;
0x000baadc: nop [rax]; lea rax, [rip-0x107]; add rsp, 0x58; ret;
0x000baadf: add [rax-0x73], cl; add eax, 0xfffffef9; add rsp, 0x58; ret;
0x000baae0: lea rax, [rip-0x107]; add rsp, 0x58; ret;
0x000baae1: lea eax, [rip-0x107]; add rsp, 0x58; ret;
0x000baae2: add eax, 0xfffffef9; add rsp, 0x58; ret;
0x000baaec: nop [rax]; lea rax, [rip-0x117]; ret;
0x000baaef: add [rax-0x73], cl; add eax, 0xfffffee9; ret;
0x000baaf0: lea rax, [rip-0x117]; ret;
0x000baaf1: lea eax, [rip-0x117]; ret;
0x000baaf2: add eax, 0xfffffee9; ret;
0x000bab42: add [rax], al; add [rbp+0x3f], dh; add rsp, 0x28; ret;
0x000bab44: add [rbp+0x3f], dh; add rsp, 0x28; ret;
0x000bab88: sub al, [rip+0x441f0f00]; add [rax], al; mov rsi, rdi; mov eax, 0xa4; xor edi, edi; syscall;
0x000bab89: add eax, 0x441f0f00; add [rax], al; mov rsi, rdi; mov eax, 0xa4; xor edi, edi; syscall;
0x000bab8b: nop [rax+rax]; mov rsi, rdi; mov eax, 0xa4; xor edi, edi; syscall;
0x000bab8d: add [rax], r8b; mov rsi, rdi; mov eax, 0xa4; xor edi, edi; syscall;
0x000bab8e: add [rax], al; mov rsi, rdi; mov eax, 0xa4; xor edi, edi; syscall;
0x000bab90: mov rsi, rdi; mov eax, 0xa4; xor edi, edi; syscall;
0x000bab91: mov esi, edi; mov eax, 0xa4; xor edi, edi; syscall;
0x000bab93: mov eax, 0xa4; xor edi, edi; syscall;
0x000baba7: add [rax-0x75], cl; adc eax, 0x1032c1; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000babaa: adc eax, 0x1032c1; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000babab: shl dword ptr [rdx], 0x10; add bh, dh; fsub st, dword ptr [rcx+rcx*4+2]; mov eax, 0xffffffff; ret;
0x000babac: xor dl, [rax]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+2]; mov eax, 0xffffffff; ret;
0x000babad: adc [rax], al; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000bac07: cli; adc cl, [rax+0x29]; ret 0x148;
0x000bac08: adc cl, [rax+0x29]; ret 0x148;
0x000bac22: ret 0x10;
0x000baca4: add [rax], al; add [rbp+0x65], dh; add rsp, 0xe0; mov eax, r8d; pop rbx; ret;
0x000baca6: add [rbp+0x65], dh; add rsp, 0xe0; mov eax, r8d; pop rbx; ret;
0x000baca8: add rsp, 0xe0; mov eax, r8d; pop rbx; ret;
0x000baca9: add rsp, 0xe0; mov eax, r8d; pop rbx; ret;
0x000bacaa: add esp, 0xe0; mov eax, r8d; pop rbx; ret;
0x000bacad: add [rax], al; add [rcx+rcx*4-0x40], al; pop rbx; ret;
0x000bada5: movsxd rdx, [rdi+0x14]; pop r13; pop r14; add rax, rdx; mov [rdi+0x20], rax; ret;
0x000bada6: movsxd edx, [rdi+0x14]; pop r13; pop r14; add rax, rdx; mov [rdi+0x20], rax; ret;
0x000bada8: adc al, 0x41; pop rbp; pop r14; add rax, rdx; mov [rdi+0x20], rax; ret;
0x000bada9: pop r13; pop r14; add rax, rdx; mov [rdi+0x20], rax; ret;
0x000badaa: pop rbp; pop r14; add rax, rdx; mov [rdi+0x20], rax; ret;
0x000badab: pop r14; add rax, rdx; mov [rdi+0x20], rax; ret;
0x000badac: pop rsi; add rax, rdx; mov [rdi+0x20], rax; ret;
0x000badad: add rax, rdx; mov [rdi+0x20], rax; ret;
0x000badae: add eax, edx; mov [rdi+0x20], rax; ret;
0x000badb0: mov [rdi+0x20], rax; ret;
0x000badb1: mov [rdi+0x20], eax; ret;
0x000bae65: rol byte ptr [rax+0x49000151], 1; rol byte ptr [rcx-0x73], 0x42; or [rax-0x77], ecx; ret 0xf48;
0x000bae69: add [rcx+1], cl; rol byte ptr [rcx-0x73], 0x42; or [rax-0x77], ecx; ret 0xf48;
0x000bae6c: rol byte ptr [rcx-0x73], 0x42; or [rax-0x77], ecx; ret 0xf48;
0x000bae70: or [rax-0x77], ecx; ret 0xf48;
0x000bae7b: and ecx, [rbp-0x1f3ebffc]; add ch, [rcx]; ret 0xc283;
0x000bae81: add ch, [rcx]; ret 0xc283;
0x000baea6: add cl, [rax-0x77]; ret;
0x000baf18: ret 0x408d;
0x000baf3e: or dword ptr [rbp+0xd50c], 0x1490000; ret 0xd129;
0x000baf43: add [rax], al; add [rcx+1], cl; ret 0xd129;
0x000baf45: add [rcx+1], cl; ret 0xd129;
0x000baf48: ret 0xd129;
0x000baf7e: call qword ptr [rax-0x76319cb8];
0x000bafd1: fimul st, dword ptr [rax+0x63]; ret 0x6948;
0x000bb0da: adc eax, ebp; sub [rdx-0x76b7000a], ah; ret;
0x000bb0dc: sub [rdx-0x76b7000a], ah; ret;
0x000bb16f: add [rax-0x7d], cl; ret 0xf01;
0x000bb19f: add dh, [rdi+7]; pop rbx; xor eax, eax; pop rbp; pop r12; ret;
0x000bb1ca: adc [rax+1], edi; mov [r12], rbx; pop rbx; pop rbp; pop r12; ret;
0x000bb1cb: mov eax, 1; mov [r12], rbx; pop rbx; pop rbp; pop r12; ret;
0x000bb1ce: add [rax], al; mov [r12], rbx; pop rbx; pop rbp; pop r12; ret;
0x000bb1cf: add [rcx-0x77], cl; sbb al, 0x24; pop rbx; pop rbp; pop r12; ret;
0x000bb1d0: mov [r12], rbx; pop rbx; pop rbp; pop r12; ret;
0x000bb1d1: mov [rsp], ebx; pop rbx; pop rbp; pop r12; ret;
0x000bb1d2: sbb al, 0x24; pop rbx; pop rbp; pop r12; ret;
0x000bb27f: sar cl, 1; call far fword ptr [rdx+0x59];
0x000bb280: stc; call far fword ptr [rdx+0x59];
0x000bb304: sub [rcx+rcx*4-0x40], al; pop rbx; pop rbp; pop r12; pop r13; ret;
0x000bb357: sbb dl, [rax+0x31]; ror byte ptr [rbp+rcx*4+0x44], 0x24; and al, ch; cmp ecx, edi; stc; call far fword ptr [rcx+0x5e];
0x000bb35a: ror byte ptr [rbp+rcx*4+0x44], 0x24; and al, ch; cmp ecx, edi; stc; call far fword ptr [rcx+0x5e];
0x000bb35f: and al, ch; cmp ecx, edi; stc; call far fword ptr [rcx+0x5e];
0x000bb361: cmp ecx, edi; stc; call far fword ptr [rcx+0x5e];
0x000bb363: stc; call far fword ptr [rcx+0x5e];
0x000bb7fb: mov rax, [rip+0x102646]; mov [rax], rdx; mov [rax+8], rsi; add rsp, 0x10; pop rbp; ret;
0x000bb7fc: mov eax, [rip+0x102646]; mov [rax], rdx; mov [rax+8], rsi; add rsp, 0x10; pop rbp; ret;
0x000bb7fd: add eax, 0x102646; mov [rax], rdx; mov [rax+8], rsi; add rsp, 0x10; pop rbp; ret;
0x000bb7ff: adc [rax], al; mov [rax], rdx; mov [rax+8], rsi; add rsp, 0x10; pop rbp; ret;
0x000bb800: adc [rax], al; mov [rax], rdx; mov [rax+8], rsi; add rsp, 0x10; pop rbp; ret;
0x000bb802: mov [rax], rdx; mov [rax+8], rsi; add rsp, 0x10; pop rbp; ret;
0x000bb803: mov [rax], edx; mov [rax+8], rsi; add rsp, 0x10; pop rbp; ret;
0x000bb805: mov [rax+8], rsi; add rsp, 0x10; pop rbp; ret;
0x000bb806: mov [rax+8], esi; add rsp, 0x10; pop rbp; ret;
0x000bba0f: mov [rdx], rax; mov [rdx+8], rax; add rsp, 8; pop rbp; pop r12; ret;
0x000bba10: mov [rdx], eax; mov [rdx+8], rax; add rsp, 8; pop rbp; pop r12; ret;
0x000bba12: mov [rdx+8], rax; add rsp, 8; pop rbp; pop r12; ret;
0x000bba13: mov [rdx+8], eax; add rsp, 8; pop rbp; pop r12; ret;
0x000bbb0b: popfq; ret 0x3948;
0x000bbb22: ror byte ptr [rax+0xf], 0x4f; ret 0x8b48;
0x000bbb31: ret 0x4389;
0x000bbb48: movsxd rax, [rdx+rax+0x18]; mov [rbx+0x28], rax; pop rbx; pop rbp; pop r12; ret;
0x000bbb49: movsxd eax, [rdx+rax+0x18]; mov [rbx+0x28], rax; pop rbx; pop rbp; pop r12; ret;
0x000bbb4a: add r11b, [rax]; mov [rbx+0x28], rax; pop rbx; pop rbp; pop r12; ret;
0x000bbb4b: add bl, [rax]; mov [rbx+0x28], rax; pop rbx; pop rbp; pop r12; ret;
0x000bbb4c: sbb [rax-0x77], cl; sub [r11+0x5d], bl; pop r12; ret;
0x000bbb4d: mov [rbx+0x28], rax; pop rbx; pop rbp; pop r12; ret;
0x000bbb4e: mov [rbx+0x28], eax; pop rbx; pop rbp; pop r12; ret;
0x000bbb4f: sub [r11+0x5d], bl; pop r12; ret;
0x000bbbb7: cmp [rbx+0x1066412d], al; add [rcx], al; add rsp, 8; ret;
0x000bbbb8: sub dword ptr [rip+0x106641], 1; add rsp, 8; ret;
0x000bbc06: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x1065ea; syscall;
0x000bbc0c: add [rax], al; add [rax-0x73], cl; cmp eax, 0x1065ea; syscall;
0x000bbc0e: add [rax-0x73], cl; cmp eax, 0x1065ea; syscall;
0x000bbc11: cmp eax, 0x1065ea; syscall;
0x000bbc13: adc gs:[rax], al; syscall;
0x000bbd80: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x106466]; syscall;
0x000bbd81: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x1065ea]; syscall;
0x000bbd82: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x1065ea]; syscall;
0x000bbd83: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x1065ea]; syscall;
0x000bbd84: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x1065ea]; syscall;
0x000bbd85: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x1065ea]; syscall;
0x000bbd86: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x1065ea]; syscall;
0x000bbd87: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x1065ea]; syscall;
0x000bbd88: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x1065ea]; syscall;
0x000bbd89: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x1065ea]; syscall;
0x000bbd8a: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x106466; syscall;
0x000bbd8b: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0x1065ea]; syscall;
0x000bbd8c: add [rax], al; mov eax, 0xca; lea rdi, [rip+0x1065ea]; syscall;
0x000bbd8d: add [rax+0xca], bh; lea rdi, [rip+0x1065ea]; syscall;
0x000bbd8e: mov eax, 0xca; lea rdi, [rip+0x1065ea]; syscall;
0x000bbd90: add [rax], al; add [rax-0x73], cl; cmp eax, 0x106466; syscall;
0x000bbd91: add [rax], al; lea rdi, [rip+0x1065ea]; syscall;
0x000bbd92: add [rax-0x73], cl; cmp eax, 0x106466; syscall;
0x000bbd93: lea rdi, [rip+0x1065ea]; syscall;
0x000bbd94: lea edi, [rip+0x1065ea]; syscall;
0x000bbd95: cmp eax, 0x106466; syscall;
0x000bbd97: adc fs:[rax], al; syscall;
0x000bbd98: adc [rax], al; syscall;
0x000bbf32: add al, ch; pop rax; sbb al, 0xf8; dec dword ptr [rax-0x77]; ret 0x8548;
0x000bbf34: pop rax; sbb al, 0xf8; dec dword ptr [rax-0x77]; ret 0x8548;
0x000bbf35: sbb al, 0xf8; dec dword ptr [rax-0x77]; ret 0x8548;
0x000bbf36: clc; dec dword ptr [rax-0x77]; ret 0x8548;
0x000bc159: push 0x45334861; add [rax+9], cl; ret 0x850f;
0x000bc15d: add [r8+9], r9b; ret 0x850f;
0x000bc15e: add [rax+9], cl; ret 0x850f;
0x000bc18a: sub ch, bh; push qword ptr [rcx]; dec dword ptr [rax-0x7b]; ror byte ptr [rdi], 0x85; iretd;
0x000bc18b: std; push qword ptr [rcx]; dec dword ptr [rax-0x7b]; ror byte ptr [rdi], 0x85; iretd;
0x000bc18c: push qword ptr [rcx]; dec dword ptr [rax-0x7b]; ror byte ptr [rdi], 0x85; iretd;
0x000bc18e: dec dword ptr [rax-0x7b]; ror byte ptr [rdi], 0x85; iretd;
0x000bc1fc: and [rax+1], cl; ret 0x820f;
0x000bc301: add [rax-0x77], cl; ret 0x850f;
0x000bc446: imul ecx, [rdi], 0xfffcf685; jmp qword ptr [rsi-0x7f];
0x000bc603: adc al, ch; imul dword ptr [rsi]; cld; dec dword ptr [rax+0x39]; ret;
0x000bc605: imul dword ptr [rsi]; cld; dec dword ptr [rax+0x39]; ret;
0x000bc606: cld; dec dword ptr [rax+0x39]; ret;
0x000bc615: call far fword ptr [rbx+0x10];
0x000bc627: ret 0x3c83;
0x000bc7f6: add bl, ch; ret 0x8948;
0x000bc82c: sbb [rdx+0x10], bl; add bl, ch; or [rax-0x7d], ecx; ret;
0x000bc82f: add bl, ch; or [rax-0x7d], ecx; ret;
0x000bc8a6: dec dword ptr [rax-0x7b]; ror byte ptr [rdi], 0x84; imul esi, 0xffffffff; dec dword ptr [rax-0x7d]; ret;
0x000bc8a9: ror byte ptr [rdi], 0x84; imul esi, 0xffffffff; dec dword ptr [rax-0x7d]; ret;
0x000bc8ac: imul esi, 0xffffffff; dec dword ptr [rax-0x7d]; ret;
0x000bc8ad: idiv bh; dec dword ptr [rax-0x7d]; ret;
0x000bc9ae: sub r15, rsp; dec dword ptr [rax+0x39]; ret;
0x000bc9af: sub edi, esp; dec dword ptr [rax+0x39]; ret;
0x000bc9b0: cld; dec dword ptr [rax+0x39]; ret;
0x000bca8c: add [rcx+0x39], ecx; ret;
0x000bcbda: ret 0xf685;
0x000bcc0a: or [rax+0x63], cl; ret;
0x000bd0d7: add [rax-0x77], cl; ret 0x6e9;
0x000bd0da: ret 0x6e9;
0x000bd300: and al, 0xe9; iretd;
0x000bd372: idiv edi; nop [rax+rax]; xchg ax, ax; mov eax, 0x24; syscall;
0x000bd374: nop [rax+rax]; xchg ax, ax; mov eax, 0x24; syscall;
0x000bd375: nop [rax+rax]; xchg ax, ax; mov eax, 0x24; syscall;
0x000bd376: nop [rax+rax]; xchg ax, ax; mov eax, 0x24; syscall;
0x000bd378: test [rax], al; add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0x24; syscall;
0x000bd379: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, 0x24; syscall;
0x000bd37a: add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0x24; syscall;
0x000bd37b: add [rax], al; add [rsi-0x70], ah; mov eax, 0x24; syscall;
0x000bd37c: add [rax], al; xchg ax, ax; mov eax, 0x24; syscall;
0x000bd37d: add [rsi-0x70], ah; mov eax, 0x24; syscall;
0x000bd37e: xchg ax, ax; mov eax, 0x24; syscall;
0x000bd37f: nop; mov eax, 0x24; syscall;
0x000bd380: mov eax, 0x24; syscall;
0x000bd381: and al, 0; add [rax], al; syscall;
0x000bd392: or eax, 0x100ad9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000bd39b: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x26; syscall;
0x000bd39e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x26; syscall;
0x000bd39f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x26; syscall;
0x000bd3a1: nop [rax+rax]; nop [rax+rax]; mov eax, 0x26; syscall;
0x000bd3a2: nop [rax+rax]; nop [rax+rax]; mov eax, 0x26; syscall;
0x000bd3a3: nop [rax+rax]; nop [rax+rax]; mov eax, 0x26; syscall;
0x000bd3a5: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x26; syscall;
0x000bd3a7: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x26; syscall;
0x000bd3a9: add [rax], al; nop [rax+rax]; mov eax, 0x26; syscall;
0x000bd3ab: nop [rax+rax]; mov eax, 0x26; syscall;
0x000bd3ad: add [rax], r8b; mov eax, 0x26; syscall;
0x000bd3ae: add [rax], al; mov eax, 0x26; syscall;
0x000bd3af: add [rax+0x26], bh; syscall;
0x000bd3b0: mov eax, 0x26; syscall;
0x000bd3c2: or eax, 0x100aa9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000bd3c3: test eax, 0xf700100a; fsub st, dword ptr [rcx+rcx*4+1]; or rax, 0xffffffffffffffff; ret;
0x000bd3c4: or dl, [rax]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+1]; or rax, 0xffffffffffffffff; ret;
0x000bd3c5: adc [rax], al; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000bd3f3: add [rax], eax; add [rcx+0x1eb850c7], al; add eax, 0xcac1fa89; add al, [rcx-0x70a3d706]; add dh, [rsi+7]; ret;
0x000bd3f5: add [rcx+0x1eb850c7], al; add eax, 0xcac1fa89; add al, [rcx-0x70a3d706]; add dh, [rsi+7]; ret;
0x000bd3fb: add eax, 0xcac1fa89; add al, [rcx-0x70a3d706]; add dh, [rsi+7]; ret;
0x000bd400: add al, [rcx-0x70a3d706]; add dh, [rsi+7]; ret;
0x000bd406: add dh, [rsi+7]; ret;
0x000bd40f: add cl, al; iretd;
0x000bd410: ror edi, 4; xor eax, eax; cmp edi, 0xa3d70b; setb al; add eax, 0x16d; ret;
0x000bd412: add al, 0x31; rol byte ptr [rcx-0x5c28f401], 0; setb al; add eax, 0x16d; ret;
0x000bd413: xor eax, eax; cmp edi, 0xa3d70b; setb al; add eax, 0x16d; ret;
0x000bd414: rol byte ptr [rcx-0x5c28f401], 0; setb al; add eax, 0x16d; ret;
0x000bd415: cmp edi, 0xa3d70b; setb al; add eax, 0x16d; ret;
0x000bd41b: setb al; add eax, 0x16d; ret;
0x000bd41e: add eax, 0x16d; ret;
0x000bd4af: add [rax], al; add [rbp+8], dh; add rsp, 0x20; xor eax, eax; pop rbx; ret;
0x000bd4b1: add [rbp+8], dh; add rsp, 0x20; xor eax, eax; pop rbx; ret;
0x000bd4b4: add rsp, 0x20; xor eax, eax; pop rbx; ret;
0x000bd4b5: add esp, 0x20; xor eax, eax; pop rbx; ret;
0x000bd62a: cmovs eax, [rbx-0x76b70f1f]; iretd;
0x000bd7f5: ret 0x8141;
0x000bd84b: fmul st, qword ptr [rbx-0x74be000a]; adc [r8-0x73], r9b; adc eax, 0xc80da; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000bd84d: idiv bh; mov eax, [r15+0x10]; lea rdx, [rip+0xc80da]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000bd84e: inc dword ptr [rcx-0x75]; adc [r8-0x73], r9b; adc eax, 0xc80da; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000bd84f: mov eax, [r15+0x10]; lea rdx, [rip+0xc80da]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000bd850: mov eax, [rdi+0x10]; lea rdx, [rip+0xc80da]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000bd851: adc [r8-0x73], r9b; adc eax, 0xc80da; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000bd852: adc [rax-0x73], cl; adc eax, 0xc80da; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000bd853: lea rdx, [rip+0xc80da]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000bd854: lea edx, [rip+0xc80da]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000bd855: adc eax, 0xc80da; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000bd856: fiadd st, dword ptr [rax+0x6348000c]; add al, 0x82; add rax, rdx; jmp rax;
0x000bd857: or byte ptr [rax+rax], 0x48; movsxd eax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000bd858: or al, 0; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000bd95a: ret 0x1dba;
0x000bd97b: add [rdi], cl; xchg edx, eax; ret 0xc283;
0x000bd97d: xchg edx, eax; ret 0xc283;
0x000bd980: ret 0x391c;
0x000bd9c7: add [rax], eax; add [rbx-0x13f6b], cl; jmp far fword ptr [rbx];
0x000bd9c9: add [rbx-0x13f6b], cl; jmp far fword ptr [rbx];
0x000bd9cb: xchg ebp, eax; sar dh, 0xff; jmp far fword ptr [rbx];
0x000bd9cc: sar dh, 0xff; jmp far fword ptr [rbx];
0x000bdad5: int 0xff; jmp far fword ptr [rbx];
0x000bdb81: add [rax], al; or byte ptr [rdi], 0x84; sar dh, 0xff; inc dword ptr [rcx-0x77]; ret 0x64e9;
0x000bdb83: or byte ptr [rdi], 0x84; sar dh, 0xff; inc dword ptr [rcx-0x77]; ret 0x64e9;
0x000bdb86: sar dh, 0xff; inc dword ptr [rcx-0x77]; ret 0x64e9;
0x000bdb89: inc dword ptr [rcx-0x77]; ret 0x64e9;
0x000bdc26: add [rbp+0x4c0d75c0], al; mov eax, eax; add rsp, 8; ret;
0x000bdc28: shl byte ptr [rbp+0xd], 0x4c; mov eax, eax; add rsp, 8; ret;
0x000bdc2a: or eax, 0x48c0894c; add esp, 8; ret;
0x000bdc38: mov rdx, [rip+0x1001f9]; xor r8d, r8d; mov [rdx], eax; mov rax, r8; add rsp, 8; ret;
0x000bdc39: mov edx, [rip+0x1001f9]; xor r8d, r8d; mov [rdx], eax; mov rax, r8; add rsp, 8; ret;
0x000bdc3a: adc eax, 0x1001f9; xor r8d, r8d; mov [rdx], eax; mov rax, r8; add rsp, 8; ret;
0x000bdc3b: stc; add [rax], edx; add [rbp+0x31], al; ror byte ptr [rcx-0x3f76b3fe], 0x48; add esp, 8; ret;
0x000bdc3c: add [rax], edx; add [rbp+0x31], al; ror byte ptr [rcx-0x3f76b3fe], 0x48; add esp, 8; ret;
0x000bdc3d: adc [rax], al; xor r8d, r8d; mov [rdx], eax; mov rax, r8; add rsp, 8; ret;
0x000bdc3e: add [rbp+0x31], al; ror byte ptr [rcx-0x3f76b3fe], 0x48; add esp, 8; ret;
0x000bdc3f: xor r8d, r8d; mov [rdx], eax; mov rax, r8; add rsp, 8; ret;
0x000bdc40: xor eax, eax; mov [rdx], eax; mov rax, r8; add rsp, 8; ret;
0x000bdc41: ror byte ptr [rcx-0x3f76b3fe], 0x48; add esp, 8; ret;
0x000bdc42: mov [rdx], eax; mov rax, r8; add rsp, 8; ret;
0x000bdc43: add cl, [rcx+rcx*4-0x40]; add rsp, 8; ret;
0x000bdd1f: and [rcx], al; ret 0xfac1;
0x000bdd21: ret 0xfac1;
0x000bdd4e: shr edx, 2; lea ecx, [rdx*8]; sub ecx, edx; sub eax, ecx; mov [rdi+0x18], eax; ret;
0x000bdd50: add cl, [rbp+0xd50c]; add [rax], al; sub ecx, edx; sub eax, ecx; mov [rdi+0x18], eax; ret;
0x000bdd51: lea ecx, [rdx*8]; sub ecx, edx; sub eax, ecx; mov [rdi+0x18], eax; ret;
0x000bdd54: add [rax], al; add [rax], al; sub ecx, edx; sub eax, ecx; mov [rdi+0x18], eax; ret;
0x000bdd55: add [rax], al; add [rcx], ch; shr dword ptr [rcx], 1; enter 0x4789, 0x18; ret;
0x000bdd56: add [rax], al; sub ecx, edx; sub eax, ecx; mov [rdi+0x18], eax; ret;
0x000bdd57: add [rcx], ch; shr dword ptr [rcx], 1; enter 0x4789, 0x18; ret;
0x000bdd58: sub ecx, edx; sub eax, ecx; mov [rdi+0x18], eax; ret;
0x000bdd59: shr dword ptr [rcx], 1; enter 0x4789, 0x18; ret;
0x000bdd5a: sub eax, ecx; mov [rdi+0x18], eax; ret;
0x000bdd5b: enter 0x4789, 0x18; ret;
0x000bdd5c: mov [rdi+0x18], eax; ret;
0x000bddff: mov esi, 0x5d8d48d0; add [rax-0x77], ecx; iretd;
0x000bde00: ror byte ptr [rax-0x73], 1; pop rbp; add [rax-0x77], ecx; iretd;
0x000bde03: pop rbp; add [rax-0x77], ecx; iretd;
0x000bde04: add [rax-0x77], ecx; iretd;
0x000bdef1: add [rdi+rcx], al; test [rdx+0x66000015], bl; and eax, 0x3d660404; add [rdi+rcx], al; test [rip-0x9ffffeb], dl; ret;
0x000bdef2: add al, 0xf; test [rdx+0x66000015], bl; and eax, 0x3d660404; add [rdi+rcx], al; test [rip-0x9ffffeb], dl; ret;
0x000bdef4: test [rdx+0x66000015], bl; and eax, 0x3d660404; add [rdi+rcx], al; test [rip-0x9ffffeb], dl; ret;
0x000bdefa: and eax, 0x3d660404; add [rdi+rcx], al; test [rip-0x9ffffeb], dl; ret;
0x000bdefc: add al, 0x66; cmp eax, 0x840f0400; adc eax, 0xf6000015; ret;
0x000bdefe: cmp eax, 0x840f0400; adc eax, 0xf6000015; ret;
0x000bdeff: add [rdi+rcx], al; test [rip-0x9ffffeb], dl; ret;
0x000bdf00: add al, 0xf; test [rip-0x9ffffeb], dl; ret;
0x000bdf02: test [rip-0x9ffffeb], dl; ret;
0x000bdf03: adc eax, 0xf6000015; ret;
0x000bdf0b: or esi, esi; ret;
0x000be00d: add [rax], al; add [rcx+0xf], cl; mov [0xf00000826830fd1], eax; mov dh, 0x43; add [rax-0x7d], ecx; ret;
0x000be00f: add [rcx+0xf], cl; mov [0xf00000826830fd1], eax; mov dh, 0x43; add [rax-0x7d], ecx; ret;
0x000be012: mov [0xf00000826830fd1], eax; mov dh, 0x43; add [rax-0x7d], ecx; ret;
0x000be016: or [rax], al; add [rdi], cl; mov dh, 0x43; add [rax-0x7d], ecx; ret;
0x000be017: or [rax], al; add [rdi], cl; mov dh, 0x43; add [rax-0x7d], ecx; ret;
0x000be038: dec dword ptr [rax-0x73]; adc eax, 0xc7924; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000be039: lea rdx, [rip+0xc7924]; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000be03a: lea edx, [rip+0xc7924]; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000be03b: adc eax, 0xc7924; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000be03c: and al, 0x79; or al, 0; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000be06c: call qword ptr [rdi];
0x000be150: add [rax], al; add [rax+0x29], cl; ret 0x8948;
0x000be152: add [rax+0x29], cl; ret 0x8948;
0x000be15b: rol byte ptr [rcx-0x77], 1; sbb cl, r13b; iretd;
0x000be15e: sbb cl, r13b; iretd;
0x000be15f: sbb cl, ch; iretd;
0x000beb6e: call qword ptr [rax+0x2444b60f];
0x000beb90: ret 0x44c7;
0x000bee24: lea r11, [rip+0xc6c91]; movzx edx, dl; movsxd rdx, [r11+rdx*4]; add rdx, r11; jmp rdx;
0x000bee25: lea ebx, [rip+0xc6c91]; movzx edx, dl; movsxd rdx, [r11+rdx*4]; add rdx, r11; jmp rdx;
0x000bee26: sbb eax, 0xc6c91; movzx edx, dl; movsxd rdx, [r11+rdx*4]; add rdx, r11; jmp rdx;
0x000bee28: insb [rdi], dx; or al, 0; movzx edx, dl; movsxd rdx, [r11+rdx*4]; add rdx, r11; jmp rdx;
0x000bee29: or al, 0; movzx edx, dl; movsxd rdx, [r11+rdx*4]; add rdx, r11; jmp rdx;
0x000bee2a: add [rdi], cl; mov dh, 0xd2; movsxd rdx, [r11+rdx*4]; add rdx, r11; jmp rdx;
0x000bee2b: movzx edx, dl; movsxd rdx, [r11+rdx*4]; add rdx, r11; jmp rdx;
0x000bee2c: mov dh, 0xd2; movsxd rdx, [r11+rdx*4]; add rdx, r11; jmp rdx;
0x000bee2d: ror byte ptr [rcx+0x63], cl; adc al, 0x93; add rdx, r11; jmp rdx;
0x000bee2e: movsxd rdx, [r11+rdx*4]; add rdx, r11; jmp rdx;
0x000bee2f: movsxd edx, [rbx+rdx*4]; add rdx, r11; jmp rdx;
0x000bee30: adc al, 0x93; add rdx, r11; jmp rdx;
0x000bee31: xchg ebx, eax; add rdx, r11; jmp rdx;
0x000bee32: add rdx, r11; jmp rdx;
0x000bee33: add edx, ebx; jmp rdx;
0x000befaf: ret 0x4c80;
0x000bf0ce: dec dword ptr [rdi]; mov dh, 0x45; add [rax-0x7d], cl; ret;
0x000bf0d0: mov dh, 0x45; add [rax-0x7d], cl; ret;
0x000bf0d1: add [r8-0x7d], r9b; ret;
0x000bf0e5: xchg [rsi+0x48ffffee], ebx; lea edx, [rip+0xc6aab]; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000bf0e9: dec dword ptr [rax-0x73]; adc eax, 0xc6aab; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000bf0ea: lea rdx, [rip+0xc6aab]; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000bf0eb: lea edx, [rip+0xc6aab]; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000bf0ec: adc eax, 0xc6aab; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000bf0ee: push 0xc; add [rdi], cl; mov dh, 0xc0; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000bf0ef: or al, 0; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000bf32a: dec byte ptr [rax-0x77]; ret 0x8949;
0x000bf450: ret 0xcac1;
0x000bf499: sbb [rdi], cl; test bh, bl; add [rax], al; add dh, dh; ret;
0x000bf49b: test bh, bl; add [rax], al; add dh, dh; ret;
0x000bf49d: add [rax], al; add dh, dh; ret;
0x000bf49f: add dh, dh; ret;
0x000bf4ba: add ecx, [rax+0x63]; ret 0xd189;
0x000bf4f9: ret 0x3101;
0x000bf578: sbb [rax-0x76a7dbbc], cl; ret;
0x000bf6de: outsb dx, [rsi]; or al, 0x89; iretd;
0x000bf6df: or al, 0x89; iretd;
0x000bf700: ret 0x2b41;
0x000bf726: ret 0x8d44;
0x000bf73d: ret 0xf44;
0x000bf75c: ret 0x8945;
0x000bf7a6: add ecx, [rax+0x63]; ret 0x6948;
0x000bf7ca: rcl byte ptr [rax+0x45000001], 0x6b; ret;
0x000bf7cb: nop; add [rax], eax; add [rbp+0x6b], al; ret;
0x000bf7cc: add [rax], eax; add [rbp+0x6b], al; ret;
0x000bf7ce: add [rbp+0x6b], al; ret;
0x000bf7d5: shr dword ptr [rcx], cl; ret 0xc031;
0x000bf8da: add [rax], al; add [rax-0x41], cl; ret;
0x000bf8dc: add [rax-0x41], cl; ret;
0x000bf954: ret 0xf748;
0x000bf974: out 0xff, al; jmp qword ptr [rsi+0xf];
0x000bf9b8: dec dword ptr [rax-0x41]; ret;
0x000bf9fb: in eax, 0xff; jmp qword ptr [rsi-0x70];
0x000bfa40: pushfq; ret;
0x000bfa8d: jmp qword ptr [rsi-0x7b];
0x000bfb84: ret 0x8d0f;
0x000c00cd: or [rax], eax; add [rax-0x7d], cl; clc; movsxd ecx, [rdi]; xchg [rsi-0x76000022], ebp; ret 0x8348;
0x000c00cf: add [rax-0x7d], cl; clc; movsxd ecx, [rdi]; xchg [rsi-0x76000022], ebp; ret 0x8348;
0x000c00d2: clc; movsxd ecx, [rdi]; xchg [rsi-0x76000022], ebp; ret 0x8348;
0x000c00d3: movsxd ecx, [rdi]; xchg [rsi-0x76000022], ebp; ret 0x8348;
0x000c00d5: xchg [rsi-0x76000022], ebp; ret 0x8348;
0x000c052e: jmp qword ptr [rsi-0x7f];
0x000c087f: sbb [rax-0x7bf0f706], al; call rsi;
0x000c0979: ret 0x527d;
0x000c0c1b: add [rax], al; add [rax], al; add [rcx-0x77], cl; enter 0xc931, 0xe9; sar edi, 1; jmp qword ptr [rsi+0xf];
0x000c0c1d: add [rax], al; add [rcx-0x77], cl; enter 0xc931, 0xe9; sar edi, 1; jmp qword ptr [rsi+0xf];
0x000c0c1f: add [rcx-0x77], cl; enter 0xc931, 0xe9; sar edi, 1; jmp qword ptr [rsi+0xf];
0x000c0c22: enter 0xc931, 0xe9; sar edi, 1; jmp qword ptr [rsi+0xf];
0x000c0c26: sar edi, 1; jmp qword ptr [rsi+0xf];
0x000c0c27: sar edi, 1; jmp qword ptr [rsi+0xf];
0x000c0d9f: adc [rcx-0x80], al; jmp qword ptr [rbx];
0x000c0db2: call far fword ptr [rsi+0x75];
0x000c0dc3: sub eax, 0xbd412275; sub eax, 0xeb000000; mov edx, 0x80419066; call far fword ptr [rdi+0xf];
0x000c0dc5: and al, [rcx-0x43]; sub eax, 0xeb000000; mov edx, 0x80419066; call far fword ptr [rdi+0xf];
0x000c0dc8: sub eax, 0xeb000000; mov edx, 0x80419066; call far fword ptr [rdi+0xf];
0x000c0dc9: add [rax], al; add bl, ch; mov edx, 0x80419066; call far fword ptr [rdi+0xf];
0x000c0dcb: add bl, ch; mov edx, 0x80419066; call far fword ptr [rdi+0xf];
0x000c0dcd: mov edx, 0x80419066; call far fword ptr [rdi+0xf];
0x000c0dd2: call far fword ptr [rdi+0xf];
0x000c0df2: sub eax, [rax+0x4b777af9]; lea rdi, [rip+0xc4e25]; movzx edx, cl; movsxd rdx, [rdi+rdx*4]; add rdx, rdi; jmp rdx;
0x000c0df8: lea rdi, [rip+0xc4e25]; movzx edx, cl; movsxd rdx, [rdi+rdx*4]; add rdx, rdi; jmp rdx;
0x000c0df9: lea edi, [rip+0xc4e25]; movzx edx, cl; movsxd rdx, [rdi+rdx*4]; add rdx, rdi; jmp rdx;
0x000c0dfa: cmp eax, 0xc4e25; movzx edx, cl; movsxd rdx, [rdi+rdx*4]; add rdx, rdi; jmp rdx;
0x000c0dfb: and eax, 0xf000c4e; mov dh, 0xd1; movsxd rdx, [rdi+rdx*4]; add rdx, rdi; jmp rdx;
0x000c0dfd: or al, 0; movzx edx, cl; movsxd rdx, [rdi+rdx*4]; add rdx, rdi; jmp rdx;
0x000c0dfe: add [rdi], cl; mov dh, 0xd1; movsxd rdx, [rdi+rdx*4]; add rdx, rdi; jmp rdx;
0x000c0dff: movzx edx, cl; movsxd rdx, [rdi+rdx*4]; add rdx, rdi; jmp rdx;
0x000c0e00: mov dh, 0xd1; movsxd rdx, [rdi+rdx*4]; add rdx, rdi; jmp rdx;
0x000c0e01: ror dword ptr [rax+0x63], 1; adc al, 0x97; add rdx, rdi; jmp rdx;
0x000c0e02: movsxd rdx, [rdi+rdx*4]; add rdx, rdi; jmp rdx;
0x000c0e03: movsxd edx, [rdi+rdx*4]; add rdx, rdi; jmp rdx;
0x000c0e04: adc al, 0x97; add rdx, rdi; jmp rdx;
0x000c0e05: xchg edi, eax; add rdx, rdi; jmp rdx;
0x000c0e25: add [rax+0x15777af9], eax; lea rsi, [rip+0xc4fde]; movzx edx, cl; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; jmp rdx;
0x000c0e2a: adc eax, 0xde358d48; or al, 0; movzx edx, cl; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; jmp rdx;
0x000c0e2b: lea rsi, [rip+0xc4fde]; movzx edx, cl; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; jmp rdx;
0x000c0e2c: lea esi, [rip+0xc4fde]; movzx edx, cl; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; jmp rdx;
0x000c0e2d: xor eax, 0xc4fde; movzx edx, cl; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; jmp rdx;
0x000c0e2e: fimul st, word ptr [rdi+0xc]; add [rdi], cl; mov dh, 0xd1; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; jmp rdx;
0x000c0e30: or al, 0; movzx edx, cl; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; jmp rdx;
0x000c0e31: add [rdi], cl; mov dh, 0xd1; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; jmp rdx;
0x000c0e32: movzx edx, cl; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; jmp rdx;
0x000c0e33: mov dh, 0xd1; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; jmp rdx;
0x000c0e34: ror dword ptr [rax+0x63], 1; adc al, 0x96; add rdx, rsi; jmp rdx;
0x000c0e6b: inc dword ptr [r9+0x29]; iretd;
0x000c0e6c: inc dword ptr [rcx+0x29]; iretd;
0x000c0f0e: sbb [rbx-0x76bbeb88], cl; ret 0x2944;
0x000c0f1b: xor [rcx+0x17ec2], al; add [rax+0x63], cl; ret 0xd789;
0x000c163f: add [rax], al; add [rdi], cl; ret 0x5841;
0x000c1641: add [rdi], cl; ret 0x5841;
0x000c1644: ret 0x5841;
0x000c1655: idiv bh; dec dword ptr [rax+1]; ret;
0x000c1811: sbb [rax+0x63], cl; ret 0x894c;
0x000c18fb: add [rax], al; add [rbx+0x490f01ea], al; ret 0x8941;
0x000c18fd: add [rbx+0x490f01ea], al; ret 0x8941;
0x000c1900: add [rdi], ecx; ret 0x8941;
0x000c198a: mov [rax-0x76bb7778], ecx; ret 0x4b8;
0x000c1990: ret 0x4b8;
0x000c1a45: add [rax], al; add [rcx], ch; ret 0x8b48;
0x000c1a47: add [rcx], ch; ret 0x8b48;
0x000c1b72: enter 0xc289, 0xf7; fimul st, dword ptr [rbp-0x7b]; ror byte ptr [rdi], 0x48; ret 0x8349;
0x000c1b76: fimul st, dword ptr [rbp-0x7b]; ror byte ptr [rdi], 0x48; ret 0x8349;
0x000c1b79: ror byte ptr [rdi], 0x48; ret 0x8349;
0x000c261e: call qword ptr [rax+0x34b60f41];
0x000c2b4a: fiadd st, word ptr [rcx+1]; iretd;
0x000c2c4f: add [rdi], cl; test [rdx-0x16000017], ebp; ret 0xfff7;
0x000c2c51: test [rdx-0x16000017], ebp; ret 0xfff7;
0x000c33d9: add [rax], al; lea rsi, [rip+0xc2c1a]; mov edx, ecx; movsxd rax, [rsi+rdx*4]; add rax, rsi; jmp rax;
0x000c33da: add [rax-0x73], cl; xor eax, 0xc2c1a; mov edx, ecx; movsxd rax, [rsi+rdx*4]; add rax, rsi; jmp rax;
0x000c33db: lea rsi, [rip+0xc2c1a]; mov edx, ecx; movsxd rax, [rsi+rdx*4]; add rax, rsi; jmp rax;
0x000c33dc: lea esi, [rip+0xc2c1a]; mov edx, ecx; movsxd rax, [rsi+rdx*4]; add rax, rsi; jmp rax;
0x000c33dd: xor eax, 0xc2c1a; mov edx, ecx; movsxd rax, [rsi+rdx*4]; add rax, rsi; jmp rax;
0x000c33de: sbb ch, [rsp+rcx]; add [rcx+0x46348ca], cl; xchg esi, eax; add rax, rsi; jmp rax;
0x000c33df: sub al, 0xc; add [rcx+0x46348ca], cl; xchg esi, eax; add rax, rsi; jmp rax;
0x000c33e0: or al, 0; mov edx, ecx; movsxd rax, [rsi+rdx*4]; add rax, rsi; jmp rax;
0x000c33e1: add [rcx+0x46348ca], cl; xchg esi, eax; add rax, rsi; jmp rax;
0x000c33e2: mov edx, ecx; movsxd rax, [rsi+rdx*4]; add rax, rsi; jmp rax;
0x000c33e4: movsxd rax, [rsi+rdx*4]; add rax, rsi; jmp rax;
0x000c33e5: movsxd eax, [rsi+rdx*4]; add rax, rsi; jmp rax;
0x000c33e6: add al, 0x96; add rax, rsi; jmp rax;
0x000c33e7: xchg esi, eax; add rax, rsi; jmp rax;
0x000c33ff: add [rax], al; lea rdi, [rip+0xc2de0]; mov esi, eax; movsxd rdx, [rdi+rsi*4]; add rdx, rdi; jmp rdx;
0x000c3400: add [rax-0x73], cl; cmp eax, 0xc2de0; mov esi, eax; movsxd rdx, [rdi+rsi*4]; add rdx, rdi; jmp rdx;
0x000c3401: lea rdi, [rip+0xc2de0]; mov esi, eax; movsxd rdx, [rdi+rsi*4]; add rdx, rdi; jmp rdx;
0x000c3402: lea edi, [rip+0xc2de0]; mov esi, eax; movsxd rdx, [rdi+rsi*4]; add rdx, rdi; jmp rdx;
0x000c3403: cmp eax, 0xc2de0; mov esi, eax; movsxd rdx, [rdi+rsi*4]; add rdx, rdi; jmp rdx;
0x000c3405: sub eax, 0xc689000c; movsxd rdx, [rdi+rsi*4]; add rdx, rdi; jmp rdx;
0x000c3406: or al, 0; mov esi, eax; movsxd rdx, [rdi+rsi*4]; add rdx, rdi; jmp rdx;
0x000c3407: add [rcx+0x146348c6], cl; mov bh, 0x48; add edx, edi; jmp rdx;
0x000c3408: mov esi, eax; movsxd rdx, [rdi+rsi*4]; add rdx, rdi; jmp rdx;
0x000c340a: movsxd rdx, [rdi+rsi*4]; add rdx, rdi; jmp rdx;
0x000c340b: movsxd edx, [rdi+rsi*4]; add rdx, rdi; jmp rdx;
0x000c340c: adc al, 0xb7; add rdx, rdi; jmp rdx;
0x000c340d: mov bh, 0x48; add edx, edi; jmp rdx;
0x000c340e: add rdx, rdi; jmp rdx;
0x000c340f: add edx, edi; jmp rdx;
0x000c3410: cli; jmp rdx;
0x000c3467: add [rax], al; lea rdi, [rip+0xc2f64]; mov esi, eax; movsxd rsi, [rdi+rsi*4]; add rsi, rdi; jmp rsi;
0x000c3468: add [rax-0x73], cl; cmp eax, 0xc2f64; mov esi, eax; movsxd rsi, [rdi+rsi*4]; add rsi, rdi; jmp rsi;
0x000c3469: lea rdi, [rip+0xc2f64]; mov esi, eax; movsxd rsi, [rdi+rsi*4]; add rsi, rdi; jmp rsi;
0x000c346a: lea edi, [rip+0xc2f64]; mov esi, eax; movsxd rsi, [rdi+rsi*4]; add rsi, rdi; jmp rsi;
0x000c346b: cmp eax, 0xc2f64; mov esi, eax; movsxd rsi, [rdi+rsi*4]; add rsi, rdi; jmp rsi;
0x000c346e: or al, 0; mov esi, eax; movsxd rsi, [rdi+rsi*4]; add rsi, rdi; jmp rsi;
0x000c346f: add [rcx+0x346348c6], cl; mov bh, 0x48; add esi, edi; jmp rsi;
0x000c3470: mov esi, eax; movsxd rsi, [rdi+rsi*4]; add rsi, rdi; jmp rsi;
0x000c3472: movsxd rsi, [rdi+rsi*4]; add rsi, rdi; jmp rsi;
0x000c3473: movsxd esi, [rdi+rsi*4]; add rsi, rdi; jmp rsi;
0x000c3474: xor al, 0xb7; add rsi, rdi; jmp rsi;
0x000c3475: mov bh, 0x48; add esi, edi; jmp rsi;
0x000c3476: add rsi, rdi; jmp rsi;
0x000c3477: add esi, edi; jmp rsi;
0x000c34b1: dec dword ptr [rbp-0x77]; ret;
0x000c3616: ret 0x2944;
0x000c361d: add [rax], eax; add [rax+0x63], cl; ret 0xd789;
0x000c361f: add [rax+0x63], cl; ret 0xd789;
0x000c3622: ret 0xd789;
0x000c366d: ret 0xc281;
0x000c3680: outsb dx, [rsi]; add [rax], eax; add [rcx-0x12f43], al; jmp far fword ptr [rax];
0x000c3681: add [rax], eax; add [rcx-0x12f43], al; jmp far fword ptr [rax];
0x000c3683: add [rcx-0x12f43], al; jmp far fword ptr [rax];
0x000c3711: test [rsi+rbx], dh; add [rbx+0x2b802fb], al; add [rax], al; add [rdi], cl; ret;
0x000c3715: add [rbx+0x2b802fb], al; add [rax], al; add [rdi], cl; ret;
0x000c37b2: ror dword ptr [rdi], 0x84; push rdi; sbb eax, [rax]; add [rcx], ch; ret;
0x000c37b5: push rdi; sbb eax, [rax]; add [rcx], ch; ret;
0x000c37b6: sbb eax, [rax]; add [rcx], ch; ret;
0x000c3bdd: fist word ptr [rsi+rsi*8], st; jmp far fword ptr [rcx];
0x000c3bde: adc al, 0xf6; jmp far fword ptr [rcx];
0x000c3dd9: ror dword ptr [rdi], cl; ret 0x294d;
0x000c3ddc: ret 0x294d;
0x000c3eb2: ror qword ptr [r8+0x69], cl; call far fword ptr [rdi];
0x000c3eb3: ror dword ptr [rax+0x69], cl; call far fword ptr [rdi];
0x000c3ec0: call far fword ptr [rcx+0x25ffc148];
0x000c3f39: adc esi, esi; jmp far fword ptr [rcx];
0x000c41ba: ret 0x4130;
0x000c43e6: out dx, eax; and [rcx], al; iretd;
0x000c43e7: and [rcx], al; iretd;
0x000c43ef: add ch, [rcx]; iretd;
0x000c448a: xor cl, [rsi+rsi*8]; jmp far fword ptr [rcx];
0x000c448b: or al, 0xf6; jmp far fword ptr [rcx];
0x000c4979: ret 0x6948;
0x000c4990: ret 0x7a8d;
0x000c49fd: idiv bh; dec dword ptr [rbp-0x77]; fnsave [rcx]; test byte ptr [rbp+0x1b8db], 0; add [rdi], cl; ret;
0x000c49ff: dec dword ptr [rbp-0x77]; fnsave [rcx]; test byte ptr [rbp+0x1b8db], 0; add [rdi], cl; ret;
0x000c4a02: fnsave [rcx]; test byte ptr [rbp+0x1b8db], 0; add [rdi], cl; ret;
0x000c4a04: test byte ptr [rbp+0x1b8db], 0; add [rdi], cl; ret;
0x000c4a40: add [rax], al; add [rcx], ch; ret 0xd729;
0x000c4a42: add [rcx], ch; ret 0xd729;
0x000c4a44: ret 0xd729;
0x000c4b3f: cli; add cl, [rax+0x29]; ret 0x8948;
0x000c4b40: add cl, [rax+0x29]; ret 0x8948;
0x000c4b57: fimul st, dword ptr [rax-0x7b]; dec dword ptr [rdi]; ret 0x8349;
0x000c4b5a: dec dword ptr [rdi]; ret 0x8349;
0x000c4c1b: mov byte ptr [rax-0x18], 0x9e; add al, 0xf6; jmp far fword ptr [rcx];
0x000c4c1e: sahf; add al, 0xf6; jmp far fword ptr [rcx];
0x000c4c1f: add al, 0xf6; jmp far fword ptr [rcx];
0x000c4db0: add [rax], al; add [rbx-0xff43], cl; dec dword ptr [rdi]; ret;
0x000c4db2: add [rbx-0xff43], cl; dec dword ptr [rdi]; ret;
0x000c4e5e: pop rsi; add dh, dh; jmp far fword ptr [rcx];
0x000c4e5f: add dh, dh; jmp far fword ptr [rcx];
0x000c4e70: add [rax], al; add [rax+0x63], cl; ror dword ptr [rdi], cl; ret 0xf001;
0x000c4e72: add [rax+0x63], cl; ror dword ptr [rdi], cl; ret 0xf001;
0x000c4e75: ror dword ptr [rdi], cl; ret 0xf001;
0x000c4e78: ret 0xf001;
0x000c5036: add [rax], al; add cl, ch; ret 0xfff7;
0x000c5038: add cl, ch; ret 0xfff7;
0x000c509a: add dh, dh; jmp far fword ptr [rcx];
0x000c514c: ror byte ptr [rax-0x75], 0x5c; ret;
0x000c51e2: dec dword ptr [rbx-0xfb7b]; inc dword ptr [rcx+0xf]; ret 0x8589;
0x000c51e8: inc dword ptr [rcx+0xf]; ret 0x8589;
0x000c528d: dec dword ptr [rax-0x7b]; ror byte ptr [rdi], 0x84; ret 0xfff6;
0x000c5290: ror byte ptr [rdi], 0x84; ret 0xfff6;
0x000c5293: ret 0xfff6;
0x000c52ab: jmp far fword ptr [rbx];
0x000c5498: test ah, dl; add [rax], al; add [rbx+rcx*4+0x74], cl; ret;
0x000c549a: add [rax], al; add [rbx+rcx*4+0x74], cl; ret;
0x000c549c: add [rbx+rcx*4+0x74], cl; ret;
0x000c54fc: ret 0x6eb8;
0x000c5503: ret 0xb850;
0x000c5535: ret 0x17e;
0x000c5537: add [rax], eax; add [rax+0x63], cl; ret 0x8941;
0x000c5539: add [rax+0x63], cl; ret 0x8941;
0x000c55b0: call qword ptr [rbx+0x48924924];
0x000c57fe: call qword ptr [rax-0xf6a76bc];
0x000c581c: add ecx, ebp; ret 0xffed;
0x000c58f0: ror byte ptr [rax-0x75], 0x74; ret;
0x000c5a5b: add [rax], al; add [rax+1], bh; add rsp, 8; ret;
0x000c5a5c: add [rax], al; mov eax, 1; add rsp, 8; ret;
0x000c5a70: not edi; mov rdx, rsi; mov eax, 0xe5; xor esi, esi; lea edi, [rdi*8+2]; syscall;
0x000c5a71: xlat [rbx]; mov rdx, rsi; mov eax, 0xe5; xor esi, esi; lea edi, [rdi*8+2]; syscall;
0x000c5a72: mov rdx, rsi; mov eax, 0xe5; xor esi, esi; lea edi, [rdi*8+2]; syscall;
0x000c5a73: mov edx, esi; mov eax, 0xe5; xor esi, esi; lea edi, [rdi*8+2]; syscall;
0x000c5a75: mov eax, 0xe5; xor esi, esi; lea edi, [rdi*8+2]; syscall;
0x000c5a76: in eax, 0; add [rax], al; xor esi, esi; lea edi, [rdi*8+2]; syscall;
0x000c5a78: add [rax], al; xor esi, esi; lea edi, [rdi*8+2]; syscall;
0x000c5a7a: xor esi, esi; lea edi, [rdi*8+2]; syscall;
0x000c5a7c: lea edi, [rdi*8+2]; syscall;
0x000c5a7d: cmp al, 0xfd; add al, [rax]; add [rax], al; syscall;
0x000c5a7e: std; add al, [rax]; add [rax], al; syscall;
0x000c5a7f: add al, [rax]; add [rax], al; syscall;
0x000c5a8b: adc al, 0x89; ret 0xdaf7;
0x000c5a8c: mov edx, eax; neg edx; cmp eax, 0xffffffea; mov eax, 3; cmovne eax, edx; ret;
0x000c5a8e: neg edx; cmp eax, 0xffffffea; mov eax, 3; cmovne eax, edx; ret;
0x000c5a8f: fiadd st, dword ptr [rbx+0x3b8eaf8]; add [rax], al; add [rdi], cl; ret 0xfc3;
0x000c5a90: cmp eax, 0xffffffea; mov eax, 3; cmovne eax, edx; ret;
0x000c5a93: mov eax, 3; cmovne eax, edx; ret;
0x000c5a94: add eax, [rax]; add [rax], al; cmovne eax, edx; ret;
0x000c5a96: add [rax], al; cmovne eax, edx; ret;
0x000c5a9c: nop [rax]; mov [rdx], edi; xor eax, eax; ret;
0x000c5aa0: mov [rdx], edi; xor eax, eax; ret;
0x000c5afc: nop [rax]; mov rsi, r12; mov edi, ebp; mov eax, 0xe5; syscall;
0x000c5aff: add [rcx+rcx*4-0x1a], cl; mov edi, ebp; mov eax, 0xe5; syscall;
0x000c5b00: mov rsi, r12; mov edi, ebp; mov eax, 0xe5; syscall;
0x000c5b01: mov esi, esp; mov edi, ebp; mov eax, 0xe5; syscall;
0x000c5b02: out 0x89, al; out dx, eax; mov eax, 0xe5; syscall;
0x000c5b03: mov edi, ebp; mov eax, 0xe5; syscall;
0x000c5b04: out dx, eax; mov eax, 0xe5; syscall;
0x000c5b05: mov eax, 0xe5; syscall;
0x000c5b06: in eax, 0; add [rax], al; syscall;
0x000c5b6c: nop [rax]; mov rsi, r12; mov edi, ebp; mov eax, 0xe4; syscall;
0x000c5b6f: add [rcx+rcx*4-0x1a], cl; mov edi, ebp; mov eax, 0xe4; syscall;
0x000c5b70: mov rsi, r12; mov edi, ebp; mov eax, 0xe4; syscall;
0x000c5b71: mov esi, esp; mov edi, ebp; mov eax, 0xe4; syscall;
0x000c5b72: out 0x89, al; out dx, eax; mov eax, 0xe4; syscall;
0x000c5b73: mov edi, ebp; mov eax, 0xe4; syscall;
0x000c5b74: out dx, eax; mov eax, 0xe4; syscall;
0x000c5b97: cmp esi, [rdi+0x2e]; mov eax, 0xe3; syscall;
0x000c5b99: mov eax, 0xe3; syscall;
0x000c5b9a: mov eax, 0xe3; syscall;
0x000c5baf: add [rax-0x75], cl; adc eax, 0xf82b9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000c5bb2: adc eax, 0xf82b9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000c5bb3: mov ecx, 0xf7000f82; fsub st, dword ptr [rcx+rcx*4+2]; mov eax, 0xffffffff; ret;
0x000c5bc7: add [rax-0x75], cl; add eax, 0xf82a1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000c5bca: add eax, 0xf82a1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000c5bcb: mov eax, [0x1600c764000f82]; add [rax], al; mov eax, 0xffffffff; ret;
0x000c5bfc: add [rax], al; add [rbp-0x47d28a40], al; out 0, al; add [rax], al; syscall;
0x000c5bfe: add [rbp-0x47d28a40], al; out 0, al; add [rax], al; syscall;
0x000c5c00: shl byte ptr [rbp+0x2d], 0xb8; out 0, al; add [rax], al; syscall;
0x000c5c09: add eax, 0xdaf7c289; cmp eax, 0xfffff000; mov eax, 0; cmova eax, edx; add rsp, 0x28; ret;
0x000c5c0c: neg edx; cmp eax, 0xfffff000; mov eax, 0; cmova eax, edx; add rsp, 0x28; ret;
0x000c5c0d: fidivr st, dword ptr [rip-0x1000]; mov eax, 0; cmova eax, edx; add rsp, 0x28; ret;
0x000c5c0e: cmp eax, 0xfffff000; mov eax, 0; cmova eax, edx; add rsp, 0x28; ret;
0x000c5c13: mov eax, 0; cmova eax, edx; add rsp, 0x28; ret;
0x000c5c14: add [rax], al; add [rax], al; cmova eax, edx; add rsp, 0x28; ret;
0x000c5c15: add [rax], al; add [rdi], cl; ret 0x8348;
0x000c5c16: add [rax], al; cmova eax, edx; add rsp, 0x28; ret;
0x000c5c17: add [rdi], cl; ret 0x8348;
0x000c5c18: cmova eax, edx; add rsp, 0x28; ret;
0x000c5c1e: sub bl, al; mov eax, 0x16; ret;
0x000c5c20: mov eax, 0x16; ret;
0x000c5c4b: mov rdx, [rsp+0x10]; mov r8d, eax; mov esi, [rsp+0xc]; mov edi, [rsp]; mov eax, 0xe6; syscall;
0x000c5c4c: mov edx, [rsp+0x10]; mov r8d, eax; mov esi, [rsp+0xc]; mov edi, [rsp]; mov eax, 0xe6; syscall;
0x000c5c4e: and al, 0x10; mov r8d, eax; mov esi, [rsp+0xc]; mov edi, [rsp]; mov eax, 0xe6; syscall;
0x000c5c4f: adc [rcx-0x77], al; ror byte ptr [rbx-0x74f3db8c], 0x3c; and al, 0xb8; out 0, al; add [rax], al; syscall;
0x000c5c50: mov r8d, eax; mov esi, [rsp+0xc]; mov edi, [rsp]; mov eax, 0xe6; syscall;
0x000c5c51: mov eax, eax; mov esi, [rsp+0xc]; mov edi, [rsp]; mov eax, 0xe6; syscall;
0x000c5c52: ror byte ptr [rbx-0x74f3db8c], 0x3c; and al, 0xb8; out 0, al; add [rax], al; syscall;
0x000c5c53: mov esi, [rsp+0xc]; mov edi, [rsp]; mov eax, 0xe6; syscall;
0x000c5c55: and al, 0xc; mov edi, [rsp]; mov eax, 0xe6; syscall;
0x000c5c56: or al, 0x8b; cmp al, 0x24; mov eax, 0xe6; syscall;
0x000c5c57: mov edi, [rsp]; mov eax, 0xe6; syscall;
0x000c5c58: cmp al, 0x24; mov eax, 0xe6; syscall;
0x000c5c59: and al, 0xb8; out 0, al; add [rax], al; syscall;
0x000c5c5a: mov eax, 0xe6; syscall;
0x000c5c5b: out 0, al; add [rax], al; syscall;
0x000c5c94: sbb eax, 0x14058b48; mov ebx, 0x8d48000f; cmp eax, 0xfa9fd; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c5c97: add eax, 0xfbb14; lea rdi, [rip+0xfa9fd]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c5c98: adc al, 0xbb; str [rax-0x73]; cmp eax, 0xfa9fd; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c5c99: mov ebx, 0x8d48000f; cmp eax, 0xfa9fd; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c5c9a: str [rax-0x73]; cmp eax, 0xfa9fd; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c5c9b: add [rax-0x73], cl; cmp eax, 0xfa9fd; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c5c9e: cmp eax, 0xfa9fd; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c5c9f: std; test eax, 0xc148000f; enter 0x6411, 0x48; xor eax, [0x30]; call rax;
0x000c5ca0: test eax, 0xc148000f; enter 0x6411, 0x48; xor eax, [0x30]; call rax;
0x000c5cdd: pop r12; ror rax, 0x11; xor rax, fs:[0x30]; pop r13; pop r14; jmp rax;
0x000c5cde: pop rsp; ror rax, 0x11; xor rax, fs:[0x30]; pop r13; pop r14; jmp rax;
0x000c5cdf: ror rax, 0x11; xor rax, fs:[0x30]; pop r13; pop r14; jmp rax;
0x000c5ce0: ror eax, 0x11; xor rax, fs:[0x30]; pop r13; pop r14; jmp rax;
0x000c5ce1: enter 0x6411, 0x48; xor eax, [0x30]; pop r13; pop r14; jmp rax;
0x000c5ce3: xor rax, fs:[0x30]; pop r13; pop r14; jmp rax;
0x000c5ce4: xor rax, [0x30]; pop r13; pop r14; jmp rax;
0x000c5ce5: xor eax, [0x30]; pop r13; pop r14; jmp rax;
0x000c5ce6: add al, 0x25; xor [rax], al; add [rax], al; pop r13; pop r14; jmp rax;
0x000c5ce7: and eax, 0x30; pop r13; pop r14; jmp rax;
0x000c5ce8: xor [rax], al; add [rax], al; pop r13; pop r14; jmp rax;
0x000c5ce9: add [rax], al; add [rcx+0x5d], al; pop r14; jmp rax;
0x000c5cea: add [rax], al; pop r13; pop r14; jmp rax;
0x000c5ceb: add [rcx+0x5d], al; pop r14; jmp rax;
0x000c5cec: pop r13; pop r14; jmp rax;
0x000c5ced: pop rbp; pop r14; jmp rax;
0x000c5cee: pop r14; jmp rax;
0x000c5cef: pop rsi; jmp rax;
0x000c5f31: adc [rdi-0x34], bh; add rsp, 8; mov rax, r8; pop rbx; pop rbp; ret;
0x000c5f33: int3; add rsp, 8; mov rax, r8; pop rbx; pop rbp; ret;
0x000c5f67: add [rbp+0x31], al; ror byte ptr [rax-0x7d], 0xc4; or [rcx+rcx*4-0x40], cl; pop rbx; pop rbp; ret;
0x000c5f68: xor r8d, r8d; add rsp, 8; mov rax, r8; pop rbx; pop rbp; ret;
0x000c5f69: xor eax, eax; add rsp, 8; mov rax, r8; pop rbx; pop rbp; ret;
0x000c5f6a: ror byte ptr [rax-0x7d], 0xc4; or [rcx+rcx*4-0x40], cl; pop rbx; pop rbp; ret;
0x000c5f6b: add rsp, 8; mov rax, r8; pop rbx; pop rbp; ret;
0x000c5f6c: add esp, 8; mov rax, r8; pop rbx; pop rbp; ret;
0x000c5f6e: or [rcx+rcx*4-0x40], cl; pop rbx; pop rbp; ret;
0x000c602c: add rsp, 8; lea rdx, [rdi+rdi*8]; pop rbx; pop rbp; lea rax, [rax+rdx*8]; ret;
0x000c602d: add esp, 8; lea rdx, [rdi+rdi*8]; pop rbx; pop rbp; lea rax, [rax+rdx*8]; ret;
0x000c602f: or [rax-0x73], cl; adc al, 0xff; pop rbx; pop rbp; lea rax, [rax+rdx*8]; ret;
0x000c6030: lea rdx, [rdi+rdi*8]; pop rbx; pop rbp; lea rax, [rax+rdx*8]; ret;
0x000c6031: lea edx, [rdi+rdi*8]; pop rbx; pop rbp; lea rax, [rax+rdx*8]; ret;
0x000c6032: adc al, 0xff; pop rbx; pop rbp; lea rax, [rax+rdx*8]; ret;
0x000c6034: pop rbx; pop rbp; lea rax, [rax+rdx*8]; ret;
0x000c6035: pop rbp; lea rax, [rax+rdx*8]; ret;
0x000c6036: lea rax, [rax+rdx*8]; ret;
0x000c6037: lea eax, [rax+rdx*8]; ret;
0x000c6038: add al, 0xd0; ret;
0x000c6045: add [rbp+0x48cb75c0], al; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret;
0x000c6047: shl byte ptr [rbp-0x35], 0x48; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret;
0x000c6074: sub [rbp+0x5b2b74c0], al; pop rbp; pop r12; ret;
0x000c6076: shl byte ptr [rbx+rbp+0x5b], 0x5d; pop r12; ret;
0x000c6078: sub ebx, [rbx+0x5d]; pop r12; ret;
0x000c60f8: out 0x5b, eax; pop rbp; pop r12; ret;
0x000c6154: shl byte ptr [rbp+rbx+0x48], 0x8b; add eax, 0xfb65a; lea rdi, [rip+0xfa53b]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c6159: add eax, 0xfb65a; lea rdi, [rip+0xfa53b]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c615b: mov dh, 0xf; add [rax-0x73], cl; cmp eax, 0xfa53b; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c615c: str [rax-0x73]; cmp eax, 0xfa53b; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c615d: add [rax-0x73], cl; cmp eax, 0xfa53b; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c6160: cmp eax, 0xfa53b; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c6161: cmp esp, [rbp-0x3eb7fff1]; enter 0x6411, 0x48; xor eax, [0x30]; call rax;
0x000c6171: add bh, bh; ror byte ptr [rcx+rcx*4-0x20], 1; pop rbx; pop rbp; pop r12; ret;
0x000c6173: ror byte ptr [rcx+rcx*4-0x20], 1; pop rbx; pop rbp; pop r12; ret;
0x000c617c: nop [rax]; mov rax, [rip+0xfb629]; lea rdi, [rip+0xfa512]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c617f: add [rax-0x75], cl; add eax, 0xfb629; lea rdi, [rip+0xfa512]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c6182: add eax, 0xfb629; lea rdi, [rip+0xfa512]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c6183: sub [rsi-0x72b7fff1], esi; cmp eax, 0xfa512; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c6184: mov dh, 0xf; add [rax-0x73], cl; cmp eax, 0xfa512; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c6185: str [rax-0x73]; cmp eax, 0xfa512; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c6186: add [rax-0x73], cl; cmp eax, 0xfa512; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c6189: cmp eax, 0xfa512; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c618a: adc ah, [rbp-0x3eb7fff1]; enter 0x6411, 0x48; xor eax, [0x30]; call rax;
0x000c618b: movsd [rdi], [rsi]; str [rax-0x3f]; enter 0x6411, 0x48; xor eax, [0x30]; call rax;
0x000c623f: sldt [rbp+0x481d74c0]; mov eax, [rip+0xfb65a]; lea rdi, [rip+0xfa53b]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c6240: add [rbp+0x481d74c0], al; mov eax, [rip+0x18fa36]; lea rdi, [rip+0x18e917]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c6242: shl byte ptr [rbp+rbx+0x48], 0x8b; add eax, 0xfb56c; lea rdi, [rip+0xfa44d]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c6247: add eax, 0xfb56c; lea rdi, [rip+0xfa44d]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c6249: mov ch, 0xf; add [rax-0x73], cl; cmp eax, 0xfa44d; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c624a: str [rax-0x73]; cmp eax, 0xfa44d; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c624b: add [rax-0x73], cl; cmp eax, 0xfa44d; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c624e: cmp eax, 0xfa44d; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c626e: xchg ax, ax; mov rax, [rip+0xfb539]; lea rdi, [rip+0xfa422]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c6272: add eax, 0xfb539; lea rdi, [rip+0xfa422]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c6273: cmp [rbp-0x72b7fff1], esi; cmp eax, 0xfa422; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c6274: mov ch, 0xf; add [rax-0x73], cl; cmp eax, 0xfa422; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c6275: str [rax-0x73]; cmp eax, 0xfa422; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c6276: add [rax-0x73], cl; cmp eax, 0xfa422; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c6279: cmp eax, 0xfa422; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c627a: and ah, [rdi+rcx-0x373eb800]; adc [rax+rcx*2+0x33], esp; add al, 0x25; xor [rax], al; add [rax], al; call rax;
0x000c627b: movsb [rdi], [rsi]; str [rax-0x3f]; enter 0x6411, 0x48; xor eax, [0x30]; call rax;
0x000c62e9: shl byte ptr [rsp+rsi+0x48], 0x89; ret;
0x000c63d7: imul eax; push rbx; in eax, dx; cmc; dec dword ptr [rax-0x77]; ret;
0x000c63d9: push rbx; in eax, dx; cmc; dec dword ptr [rax-0x77]; ret;
0x000c63da: in eax, dx; cmc; dec dword ptr [rax-0x77]; ret;
0x000c6401: add [rcx-0x7d], ecx; jmp qword ptr [rbp+rsi*2-0x38];
0x000c6404: jmp qword ptr [rbp+rsi*2-0x38];
0x000c640c: sldt [rbp+0x481d74d2]; mov eax, [rip+0xfb39f]; lea rdi, [rip+0xfa280]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c640d: add [rbp+0x481d74d2], al; mov eax, [rip+0x18fc57]; lea rdi, [rip+0x18eb38]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c640f: shl byte ptr [rbp+rbx+0x48], cl; mov eax, [rip+0x18fc57]; lea rdi, [rip+0x18eb38]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c6412: mov rax, [rip+0x18fe55]; lea rdi, [rip+0x18ed36]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c6413: mov eax, [rip+0x18fe55]; lea rdi, [rip+0x18ed36]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c6414: add eax, 0xfb39f; lea rdi, [rip+0xfa280]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c6416: mov bl, 0xf; add [rax-0x73], cl; cmp eax, 0xfa280; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c6417: str [rax-0x73]; cmp eax, 0xfa280; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c6418: add [rax-0x73], cl; cmp eax, 0xfa280; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c641b: cmp eax, 0xfa280; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c641c: and byte ptr [rdx-0x3eb7fff1], 0xc8; adc [rax+rcx*2+0x33], esp; add al, 0x25; xor [rax], al; add [rax], al; call rax;
0x000c644f: nop; mov rax, [rip+0xfb539]; lea rdi, [rip+0xfa422]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c6450: mov rax, [rip+0x18fe8e]; lea rdi, [rip+0x18ed77]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c6451: mov eax, [rip+0x18fe8e]; lea rdi, [rip+0x18ed77]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c6452: add eax, 0xfb359; lea rdi, [rip+0xfa242]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c6454: mov bl, 0xf; add [rax-0x73], cl; cmp eax, 0xfa242; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c6455: str [rax-0x73]; cmp eax, 0xfa242; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c6456: add [rax-0x73], cl; cmp eax, 0xfa242; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c6457: lea rdi, [rip+0x18ed77]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c6458: lea edi, [rip+0x18ed77]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c6459: cmp eax, 0xfa242; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c645b: mov [0x486411c8c148000f], al; xor eax, [0x30]; call rax;
0x000c64ba: pop rdx; out dx, al; cmc; jmp qword ptr [rsi-0x70];
0x000c64bb: out dx, al; cmc; jmp qword ptr [rsi-0x70];
0x000c64be: xchg ax, ax; pop rbp; ret;
0x000c64bf: nop; pop rbp; ret;
0x000c65c2: add [rax], al; add [rbp+9], dh; add rsp, 0xe0; pop rbx; ret;
0x000c65c4: add [rbp+9], dh; add rsp, 0xe0; pop rbx; ret;
0x000c65c7: add rsp, 0xe0; pop rbx; ret;
0x000c65c8: add esp, 0xe0; pop rbx; ret;
0x000c66a0: inc dword ptr [rbp+0x31]; in al, 0xeb; iretd;
0x000c66a3: in al, 0xeb; iretd;
0x000c6748: add [rax], al; add [rbp+0x37], dh; add rsp, 0xa8; pop rbp; pop r12; ret;
0x000c674a: add [rbp+0x37], dh; add rsp, 0xa8; pop rbp; pop r12; ret;
0x000c67af: dec dword ptr [rax-0x75]; add eax, 0xf76b9; mov dword ptr fs:[rax], 2; xor eax, eax; ret;
0x000c67b2: add eax, 0xf76b9; mov dword ptr fs:[rax], 2; xor eax, eax; ret;
0x000c67b3: mov ecx, 0x64000f76; mov dword ptr [rax], 2; xor eax, eax; ret;
0x000c67ef: dec dword ptr [rax-0x75]; add eax, 0xf7679; mov dword ptr fs:[rax], 2; xor eax, eax; ret;
0x000c67f2: add eax, 0xf7679; mov dword ptr fs:[rax], 2; xor eax, eax; ret;
0x000c67f5: verr [rdi+rax*8]; add al, [rax]; add [rax], al; xor eax, eax; ret;
0x000c6823: add al, [rax]; mov rax, [rip+0xf7644]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000c6824: add [rax-0x75], cl; add eax, 0xf7644; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000c6827: add eax, 0xf7644; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000c6893: add [rbp-0x7cd78a40], al; imul eax, [rcx+rax], 0x48; add esp, 8; pop rbx; pop rbp; ret;
0x000c6895: shl byte ptr [rbp+0x28], 0x83; imul eax, [rcx+rax], 0x48; add esp, 8; pop rbx; pop rbp; ret;
0x000c6897: sub [rbx+0x4801046b], al; add esp, 8; pop rbx; pop rbp; ret;
0x000c6898: sub dword ptr [rbx+4], 1; add rsp, 8; pop rbx; pop rbp; ret;
0x000c6899: imul eax, [rcx+rax], 0x48; add esp, 8; pop rbx; pop rbp; ret;
0x000c689a: add al, 1; add rsp, 8; pop rbx; pop rbp; ret;
0x000c68c9: rol byte ptr [rbp+0x31], cl; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov rdi, rbp; mov eax, 0xca; syscall;
0x000c68ca: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov rdi, rbp; mov eax, 0xca; syscall;
0x000c68cb: xor edx, edx; mov edx, 1; mov esi, 0x81; mov rdi, rbp; mov eax, 0xca; syscall;
0x000c68cc: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov rdi, rbp; mov eax, 0xca; syscall;
0x000c68cd: mov edx, 1; mov esi, 0x81; mov rdi, rbp; mov eax, 0xca; syscall;
0x000c68ce: add [rax], eax; add [rax], al; mov esi, 0x81; mov rdi, rbp; mov eax, 0xca; syscall;
0x000c68cf: add [rax], al; add [rsi+0x81], bh; mov rdi, rbp; mov eax, 0xca; syscall;
0x000c68d0: add [rax], al; mov esi, 0x81; mov rdi, rbp; mov eax, 0xca; syscall;
0x000c68d1: add [rsi+0x81], bh; mov rdi, rbp; mov eax, 0xca; syscall;
0x000c68d2: mov esi, 0x81; mov rdi, rbp; mov eax, 0xca; syscall;
0x000c68d3: add dword ptr [rax], 0x89480000; out dx, eax; mov eax, 0xca; syscall;
0x000c68d4: add [rax], al; add [rax-0x77], cl; out dx, eax; mov eax, 0xca; syscall;
0x000c68d5: add [rax], al; mov rdi, rbp; mov eax, 0xca; syscall;
0x000c68d6: add [rax-0x77], cl; out dx, eax; mov eax, 0xca; syscall;
0x000c68d7: mov rdi, rbp; mov eax, 0xca; syscall;
0x000c6938: add [rax], al; add [rbp-0x7cce8a40], al; imul eax, [rcx+rax], 0x5b; pop rbp; pop r12; ret;
0x000c693a: add [rbp-0x7cce8a40], al; imul eax, [rcx+rax], 0x5b; pop rbp; pop r12; ret;
0x000c693c: shl byte ptr [rbp+0x31], 0x83; imul eax, [rcx+rax], 0x5b; pop rbp; pop r12; ret;
0x000c693e: xor [rbx+0x5b01046b], eax; pop rbp; pop r12; ret;
0x000c693f: sub dword ptr [rbx+4], 1; pop rbx; pop rbp; pop r12; ret;
0x000c6940: imul eax, [rcx+rax], 0x5b; pop rbp; pop r12; ret;
0x000c697a: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov rdi, r12; mov eax, 0xca; syscall;
0x000c697b: xor edx, edx; mov edx, 1; mov esi, 0x81; mov rdi, r12; mov eax, 0xca; syscall;
0x000c697c: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov rdi, r12; mov eax, 0xca; syscall;
0x000c697d: mov edx, 1; mov esi, 0x81; mov rdi, r12; mov eax, 0xca; syscall;
0x000c697e: add [rax], eax; add [rax], al; mov esi, 0x81; mov rdi, r12; mov eax, 0xca; syscall;
0x000c697f: add [rax], al; add [rsi+0x81], bh; mov rdi, r12; mov eax, 0xca; syscall;
0x000c6980: add [rax], al; mov esi, 0x81; mov rdi, r12; mov eax, 0xca; syscall;
0x000c6981: add [rsi+0x81], bh; mov rdi, r12; mov eax, 0xca; syscall;
0x000c6982: mov esi, 0x81; mov rdi, r12; mov eax, 0xca; syscall;
0x000c6984: add [rax], al; add [rcx+rcx*4-0x19], cl; mov eax, 0xca; syscall;
0x000c6985: add [rax], al; mov rdi, r12; mov eax, 0xca; syscall;
0x000c6986: add [rcx+rcx*4-0x19], cl; mov eax, 0xca; syscall;
0x000c6987: mov rdi, r12; mov eax, 0xca; syscall;
0x000c6988: mov edi, esp; mov eax, 0xca; syscall;
0x000c698e: add [rdi], cl; add eax, 0x2e66b0eb; nop [rax+rax]; nop [rax]; mov rax, [rdi+0x20]; ret;
0x000c6990: add eax, 0x2e66b0eb; nop [rax+rax]; nop [rax]; mov rax, [rdi+0x20]; ret;
0x000c6992: mov al, 0x66; nop [rax+rax]; nop [rax]; mov rax, [rdi+0x20]; ret;
0x000c6993: nop [rax+rax]; nop [rax]; mov rax, [rdi+0x20]; ret;
0x000c6994: nop [rax+rax]; nop [rax]; mov rax, [rdi+0x20]; ret;
0x000c6995: nop [rax+rax]; nop [rax]; mov rax, [rdi+0x20]; ret;
0x000c6997: test [rax], al; add [rax], al; add [rax], al; nop [rax]; mov rax, [rdi+0x20]; ret;
0x000c6999: add [rax], al; add [rax], al; nop [rax]; mov rax, [rdi+0x20]; ret;
0x000c699b: add [rax], al; nop [rax]; mov rax, [rdi+0x20]; ret;
0x000c699d: nop [rax]; mov rax, [rdi+0x20]; ret;
0x000c69a0: mov rax, [rdi+0x20]; ret;
0x000c69a1: mov eax, [rdi+0x20]; ret;
0x000c69af: nop; cmp rdx, 0x7fffffff; mov eax, 0x7fffffff; cmova rdx, rax; mov eax, 0xd9; syscall;
0x000c69b0: cmp rdx, 0x7fffffff; mov eax, 0x7fffffff; cmova rdx, rax; mov eax, 0xd9; syscall;
0x000c69b1: cmp edx, 0x7fffffff; mov eax, 0x7fffffff; cmova rdx, rax; mov eax, 0xd9; syscall;
0x000c69b7: mov eax, 0x7fffffff; cmova rdx, rax; mov eax, 0xd9; syscall;
0x000c69bc: cmova rdx, rax; mov eax, 0xd9; syscall;
0x000c69bd: cmova edx, eax; mov eax, 0xd9; syscall;
0x000c69be: sar byte ptr [r8+0xd9], 1; syscall;
0x000c69bf: sar byte ptr [rax+0xd9], 1; syscall;
0x000c69c0: mov eax, 0xd9; syscall;
0x000c69c1: fld st, dword ptr [rax]; add [rax], al; syscall;
0x000c69d2: adc eax, 0xf7499; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000c69e2: inc ebx; nop [rax+rax]; xchg ax, ax; mov eax, [rdi]; ret;
0x000c69e4: nop [rax+rax]; xchg ax, ax; mov eax, [rdi]; ret;
0x000c69e5: nop [rax+rax]; xchg ax, ax; mov eax, [rdi]; ret;
0x000c69e6: nop [rax+rax]; xchg ax, ax; mov eax, [rdi]; ret;
0x000c69e8: test [rax], al; add [rax], al; add [rax], al; xchg ax, ax; mov eax, [rdi]; ret;
0x000c69e9: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, [rdi]; ret;
0x000c69ea: add [rax], al; add [rax], al; xchg ax, ax; mov eax, [rdi]; ret;
0x000c69eb: add [rax], al; add [rsi-0x70], ah; mov eax, [rdi]; ret;
0x000c69ec: add [rax], al; xchg ax, ax; mov eax, [rdi]; ret;
0x000c69ed: add [rsi-0x70], ah; mov eax, [rdi]; ret;
0x000c69ee: xchg ax, ax; mov eax, [rdi]; ret;
0x000c69ef: nop; mov eax, [rdi]; ret;
0x000c69f0: mov eax, [rdi]; ret;
0x000c6ad2: fld st, qword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov rdi, r13; mov eax, 0xca; syscall;
0x000c6ce0: mov rdi, [rsp+8]; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x000c6ce1: mov edi, [rsp+8]; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x000c6ce3: and al, 8; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x000c6ce4: or [rbp+0x31], al; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; syscall;
0x000c6d90: outsd dx, [rsi]; cld; jmp qword ptr [rsi+0x2e];
0x000c6d91: cld; jmp qword ptr [rsi+0x2e];
0x000c6de7: add [rax], al; add [rcx-0x173fce11], cl; lodsd [rsi]; iretd;
0x000c6de9: add [rcx-0x173fce11], cl; lodsd [rsi]; iretd;
0x000c6ded: shr al, 0xad; iretd;
0x000c6def: lodsd [rsi]; iretd;
0x000c6e1c: add [rax], al; add [rbp+0x39], dh; add rsp, 0xa8; pop rbp; pop r12; ret;
0x000c6e1e: add [rbp+0x39], dh; add rsp, 0xa8; pop rbp; pop r12; ret;
0x000c6e21: add rsp, 0xa8; pop rbp; pop r12; ret;
0x000c6e22: add esp, 0xa8; pop rbp; pop r12; ret;
0x000c6e24: test al, 0; add [rax], al; pop rbp; pop r12; ret;
0x000c6f58: shl byte ptr [rbx+rdi*2+0x4d], 0x85; in al, 0x74; adc eax, 0x48eb894c; mov edi, ebp; call r12;
0x000c6f5d: in al, 0x74; adc eax, 0x48eb894c; mov edi, ebp; call r12;
0x000c6f5f: adc eax, 0x48eb894c; mov edi, ebp; call r12;
0x000c6f60: mov rbx, r13; mov rdi, rbp; call r12;
0x000c6f61: mov ebx, ebp; mov rdi, rbp; call r12;
0x000c70b6: add [rax-0x77], cl; vpcmpeqd xmm6, xmm2, xmm3; cmc; call qword ptr [rax-0x76b6a9bf];
0x000c70b9: vpcmpeqd xmm6, xmm2, xmm3; cmc; call qword ptr [rax-0x76b6a9bf];
0x000c70bd: cmc; call qword ptr [rax-0x76b6a9bf];
0x000c70be: call qword ptr [rax-0x76b6a9bf];
0x000c70f7: sub ebx, [rbx+0x5d]; pop r12; pop r13; pop r14; ret;
0x000c71d4: mov cl, 0xf; add [rbx+rcx*4+0x3d], cl; ret 0xfd1;
0x000c71d5: str [rbx+rcx*4+0x3d]; ret 0xfd1;
0x000c71d6: add [rbx+rcx*4+0x3d], cl; ret 0xfd1;
0x000c71da: ret 0xfd1;
0x000c7208: cmc; jmp qword ptr [rcx+rax*2-0x77];
0x000c72a8: hlt; ror byte ptr [rdi], 1; add [rax-0x77], cl; ret 0xc0e9;
0x000c72a9: ror byte ptr [rdi], 1; add [rax-0x77], cl; ret 0xc0e9;
0x000c72aa: str [rax-0x77]; ret 0xc0e9;
0x000c72ab: add [rax-0x77], cl; ret 0xc0e9;
0x000c72ae: ret 0xc0e9;
0x000c72c8: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xfb026]; syscall;
0x000c72c9: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xfb026]; syscall;
0x000c72ca: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xfb026]; syscall;
0x000c72cb: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xfb026]; syscall;
0x000c72cc: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xfb026]; syscall;
0x000c72cd: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xfb026]; syscall;
0x000c72ce: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xfb026]; syscall;
0x000c72cf: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xfb026]; syscall;
0x000c72d0: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xfb026]; syscall;
0x000c72d1: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xfb026]; syscall;
0x000c72d2: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xfb026; syscall;
0x000c72d3: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xfb026]; syscall;
0x000c72d4: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xfb026]; syscall;
0x000c72d5: add [rax+0xca], bh; lea rdi, [rip+0xfb026]; syscall;
0x000c72d6: mov eax, 0xca; lea rdi, [rip+0xfb026]; syscall;
0x000c72d8: add [rax], al; add [rax-0x73], cl; cmp eax, 0xfb026; syscall;
0x000c72d9: add [rax], al; lea rdi, [rip+0xfb026]; syscall;
0x000c72da: add [rax-0x73], cl; cmp eax, 0xfb026; syscall;
0x000c72db: lea rdi, [rip+0xfb026]; syscall;
0x000c72dc: lea edi, [rip+0xfb026]; syscall;
0x000c72dd: cmp eax, 0xfb026; syscall;
0x000c73f4: push 0x48000702; mov ecx, [rsp+8]; mov rdx, [rsp+0x68]; mov rdi, r15; mov rsi, [rsp+0x60]; call r12;
0x000c73f7: add [rax-0x75], cl; and al, 8; mov rdx, [rsp+0x68]; mov rdi, r15; mov rsi, [rsp+0x60]; call r12;
0x000c73f8: mov rcx, [rsp+8]; mov rdx, [rsp+0x68]; mov rdi, r15; mov rsi, [rsp+0x60]; call r12;
0x000c73f9: mov ecx, [rsp+8]; mov rdx, [rsp+0x68]; mov rdi, r15; mov rsi, [rsp+0x60]; call r12;
0x000c73fb: and al, 8; mov rdx, [rsp+0x68]; mov rdi, r15; mov rsi, [rsp+0x60]; call r12;
0x000c73fc: or [rax-0x75], cl; push rsp; and al, 0x68; mov rdi, r15; mov rsi, [rsp+0x60]; call r12;
0x000c73fd: mov rdx, [rsp+0x68]; mov rdi, r15; mov rsi, [rsp+0x60]; call r12;
0x000c73fe: mov edx, [rsp+0x68]; mov rdi, r15; mov rsi, [rsp+0x60]; call r12;
0x000c73ff: push rsp; and al, 0x68; mov rdi, r15; mov rsi, [rsp+0x60]; call r12;
0x000c7400: and al, 0x68; mov rdi, r15; mov rsi, [rsp+0x60]; call r12;
0x000c7401: push 0x48ff894c; mov esi, [rsp+0x60]; call r12;
0x000c7402: mov rdi, r15; mov rsi, [rsp+0x60]; call r12;
0x000c7403: mov edi, edi; mov rsi, [rsp+0x60]; call r12;
0x000c7405: mov rsi, [rsp+0x60]; call r12;
0x000c7406: mov esi, [rsp+0x60]; call r12;
0x000c7408: and al, 0x60; call r12;
0x000c7496: sbb [rcx-0x77], al; pop rsp; xchg ebp, eax; add [rax-0x7d], cl; ret 0x4801;
0x000c7499: pop rsp; xchg ebp, eax; add [rax-0x7d], cl; ret 0x4801;
0x000c749a: xchg ebp, eax; add [rax-0x7d], cl; ret 0x4801;
0x000c74e2: add [rdi], eax; add [rcx+rcx*4-8], cl; call rax;
0x000c74e4: add [rcx+rcx*4-8], cl; call rax;
0x000c74e5: mov rax, r15; call rax;
0x000c74e6: mov eax, edi; call rax;
0x000c74e7: clc; call rax;
0x000c7507: add [rcx+0x415d5bd8], cl; pop rsp; pop r13; pop r14; pop r15; ret;
0x000c7509: fcomp st, dword ptr [rbx+0x5d]; pop r12; pop r13; pop r14; pop r15; ret;
0x000c7637: and [rcx], al; add [rax], al; add [rbp-0x7b], cl; test byte ptr [rdi], 0x84; iretd;
0x000c7639: add [rax], al; add [rbp-0x7b], cl; test byte ptr [rdi], 0x84; iretd;
0x000c76ab: add rdx, fs:[0]; push rdx; mov r9, [rsp+0x20]; mov rdx, [rsp+0x28]; mov rax, [rsp+0x18]; call rax;
0x000c76ac: add rdx, [0]; push rdx; mov r9, [rsp+0x20]; mov rdx, [rsp+0x28]; mov rax, [rsp+0x18]; call rax;
0x000c76ad: add edx, [0]; push rdx; mov r9, [rsp+0x20]; mov rdx, [rsp+0x28]; mov rax, [rsp+0x18]; call rax;
0x000c76af: and eax, 0; push rdx; mov r9, [rsp+0x20]; mov rdx, [rsp+0x28]; mov rax, [rsp+0x18]; call rax;
0x000c76b1: add [rax], al; add [rdx+0x4c], dl; mov ecx, [rsp+0x20]; mov rdx, [rsp+0x28]; mov rax, [rsp+0x18]; call rax;
0x000c76b2: add [rax], al; push rdx; mov r9, [rsp+0x20]; mov rdx, [rsp+0x28]; mov rax, [rsp+0x18]; call rax;
0x000c76b3: add [rdx+0x4c], dl; mov ecx, [rsp+0x20]; mov rdx, [rsp+0x28]; mov rax, [rsp+0x18]; call rax;
0x000c76b4: push rdx; mov r9, [rsp+0x20]; mov rdx, [rsp+0x28]; mov rax, [rsp+0x18]; call rax;
0x000c76b5: mov r9, [rsp+0x20]; mov rdx, [rsp+0x28]; mov rax, [rsp+0x18]; call rax;
0x000c76b6: mov ecx, [rsp+0x20]; mov rdx, [rsp+0x28]; mov rax, [rsp+0x18]; call rax;
0x000c76b8: and al, 0x20; mov rdx, [rsp+0x28]; mov rax, [rsp+0x18]; call rax;
0x000c76b9: and [rax-0x75], cl; push rsp; and al, 0x28; mov rax, [rsp+0x18]; call rax;
0x000c76ba: mov rdx, [rsp+0x28]; mov rax, [rsp+0x18]; call rax;
0x000c76bb: mov edx, [rsp+0x28]; mov rax, [rsp+0x18]; call rax;
0x000c76bc: push rsp; and al, 0x28; mov rax, [rsp+0x18]; call rax;
0x000c76bd: and al, 0x28; mov rax, [rsp+0x18]; call rax;
0x000c76be: sub [rax-0x75], cl; and al, 0x18; call rax;
0x000c76bf: mov rax, [rsp+0x18]; call rax;
0x000c76c0: mov eax, [rsp+0x18]; call rax;
0x000c76c3: sbb bh, bh; rol byte ptr [rcx-0x77], 1; ret;
0x000c76c5: rol byte ptr [rcx-0x77], 1; ret;
0x000c785b: adc [rcx+rcx*4+0x35], ecx; pop rbp; ret;
0x000c7887: add eax, 0x358b4c00; ret;
0x000c7888: add [rbx+rcx*4+0x35], cl; ret;
0x000c78b9: lodsd [rsi]; cmp al, 0xc; add al, ch; pop rsi; int 0xf6; jmp qword ptr [rsi+0x66];
0x000c78ba: cmp al, 0xc; add al, ch; pop rsi; int 0xf6; jmp qword ptr [rsi+0x66];
0x000c78bc: add al, ch; pop rsi; int 0xf6; jmp qword ptr [rsi+0x66];
0x000c78be: pop rsi; int 0xf6; jmp qword ptr [rsi+0x66];
0x000c78bf: int 0xf6; jmp qword ptr [rsi+0x66];
0x000c7944: ret 0x4e0f;
0x000c7abd: sub bh, [rax+0x74]; syscall;
0x000c7abe: mov eax, 0x74; syscall;
0x000c7af4: mov rdi, rsp; mov dword ptr [rsp], 0x74; mov [rsp+0x10], rsi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c7af5: mov edi, esp; mov dword ptr [rsp], 0x74; mov [rsp+0x10], rsi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c7af7: mov dword ptr [rsp], 0x74; mov [rsp+0x10], rsi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c7afc: add [rax], al; mov [rsp+0x10], rsi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c7afe: mov [rsp+0x10], rsi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c7aff: mov [rsp+0x10], esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c7b01: and al, 0x10; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000c7b02: adc [rax-0x3f], cl; enter 0x6411, 0x48; xor eax, [0x30]; call rax;
0x000c7b87: add [rbp-0x7ccb8a40], al; sub eax, 0xfa7cd; add [rcx+rax*2-0x77], esp; sbb [rcx+rcx*4-0x40], ecx; pop rbx; ret;
0x000c7b89: shl byte ptr [rbp+0x34], 0x83; sub eax, 0xfa7cd; add [rcx+rax*2-0x77], esp; sbb [rcx+rcx*4-0x40], ecx; pop rbx; ret;
0x000c7b8b: xor al, 0x83; sub eax, 0xfa7cd; add [rcx+rax*2-0x77], esp; sbb [rcx+rcx*4-0x40], ecx; pop rbx; ret;
0x000c7b8c: sub dword ptr [rip+0xfa7cd], 1; mov fs:[r9], ebx; mov rax, r8; pop rbx; ret;
0x000c7b8d: sub eax, 0xfa7cd; add [rcx+rax*2-0x77], esp; sbb [rcx+rcx*4-0x40], ecx; pop rbx; ret;
0x000c7b8e: int 0xa7; sldt [rcx]; mov fs:[r9], ebx; mov rax, r8; pop rbx; ret;
0x000c7b8f: cmpsd [rsi], [rdi]; sldt [rcx]; mov fs:[r9], ebx; mov rax, r8; pop rbx; ret;
0x000c7bcc: mov byte ptr [rbp+0x31], 0xd2; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xfa77a]; syscall;
0x000c7bcd: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xfa77a]; syscall;
0x000c7bce: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xfa77a]; syscall;
0x000c7bcf: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xfa77a]; syscall;
0x000c7bd0: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xfa77a]; syscall;
0x000c7bd1: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xfa77a]; syscall;
0x000c7bd2: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xfa77a]; syscall;
0x000c7bd3: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xfa77a]; syscall;
0x000c7bd4: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xfa77a]; syscall;
0x000c7bd5: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xfa77a]; syscall;
0x000c7bd6: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xfa77a; syscall;
0x000c7bd7: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xfa77a]; syscall;
0x000c7bd8: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xfa77a]; syscall;
0x000c7bd9: add [rax+0xca], bh; lea rdi, [rip+0xfa77a]; syscall;
0x000c7bda: mov eax, 0xca; lea rdi, [rip+0xfa77a]; syscall;
0x000c7bdc: add [rax], al; add [rax-0x73], cl; cmp eax, 0xfa77a; syscall;
0x000c7bdd: add [rax], al; lea rdi, [rip+0xfa77a]; syscall;
0x000c7bde: add [rax-0x73], cl; cmp eax, 0xfa77a; syscall;
0x000c7bdf: lea rdi, [rip+0xfa77a]; syscall;
0x000c7be0: lea edi, [rip+0xfa77a]; syscall;
0x000c7be1: cmp eax, 0xfa77a; syscall;
0x000c7c6b: xor [rdi-0x3317fff1], esp; shl ebp, cl; dec dword ptr [rax-0x77]; ret 0x8548;
0x000c7c6c: cmpsd [rsi], [rdi]; verw ax; int3; shl ebp, cl; dec dword ptr [rax-0x77]; ret 0x8548;
0x000c7c6d: verw ax; int3; shl ebp, cl; dec dword ptr [rax-0x77]; ret 0x8548;
0x000c7c6e: add al, ch; int3; shl ebp, cl; dec dword ptr [rax-0x77]; ret 0x8548;
0x000c7c70: int3; shl ebp, cl; dec dword ptr [rax-0x77]; ret 0x8548;
0x000c7c71: shl ebp, cl; dec dword ptr [rax-0x77]; ret 0x8548;
0x000c7d80: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xfa60e]; syscall;
0x000c7d81: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xfa60e]; syscall;
0x000c7d82: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xfa60e]; syscall;
0x000c7d83: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xfa60e]; syscall;
0x000c7d84: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xfa60e]; syscall;
0x000c7d85: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xfa60e]; syscall;
0x000c7d86: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xfa60e]; syscall;
0x000c7d87: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xfa60e]; syscall;
0x000c7d88: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xfa60e]; syscall;
0x000c7d89: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xfa60e]; syscall;
0x000c7d8a: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xfa60e; syscall;
0x000c7d8b: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xfa60e]; syscall;
0x000c7d8c: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xfa60e]; syscall;
0x000c7d8d: add [rax+0xca], bh; lea rdi, [rip+0xfa60e]; syscall;
0x000c7d8e: mov eax, 0xca; lea rdi, [rip+0xfa60e]; syscall;
0x000c7d90: add [rax], al; add [rax-0x73], cl; cmp eax, 0xfa60e; syscall;
0x000c7d91: add [rax], al; lea rdi, [rip+0xfa60e]; syscall;
0x000c7d92: add [rax-0x73], cl; cmp eax, 0xfa60e; syscall;
0x000c7d93: lea rdi, [rip+0xfa60e]; syscall;
0x000c7d94: lea edi, [rip+0xfa60e]; syscall;
0x000c7d95: cmp eax, 0xfa60e; syscall;
0x000c7e2b: mov cl, 0xa5; verw ax; or al, 0xd2; cmc; dec dword ptr [rax-0x77]; ret 0x8548;
0x000c7e2c: movsd [rdi], [rsi]; verw ax; or al, 0xd2; cmc; dec dword ptr [rax-0x77]; ret 0x8548;
0x000c7e2d: verw ax; or al, 0xd2; cmc; dec dword ptr [rax-0x77]; ret 0x8548;
0x000c7e2e: add al, ch; or al, 0xd2; cmc; dec dword ptr [rax-0x77]; ret 0x8548;
0x000c7e30: or al, 0xd2; cmc; dec dword ptr [rax-0x77]; ret 0x8548;
0x000c7e31: shl ch, cl; dec dword ptr [rax-0x77]; ret 0x8548;
0x000c7eaa: ret 0xf5f;
0x000c7eee: mov ah, 0xf; add [rax-0x77], cl; ret 0x8548;
0x000c7f40: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xfa48e]; syscall;
0x000c7f41: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xfa48e]; syscall;
0x000c7f42: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xfa48e]; syscall;
0x000c7f43: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xfa48e]; syscall;
0x000c7f44: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xfa48e]; syscall;
0x000c7f45: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xfa48e]; syscall;
0x000c7f46: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xfa48e]; syscall;
0x000c7f47: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xfa48e]; syscall;
0x000c7f48: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xfa48e]; syscall;
0x000c7f49: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xfa48e]; syscall;
0x000c7f4a: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xfa48e; syscall;
0x000c7f4b: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xfa48e]; syscall;
0x000c7f4c: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xfa48e]; syscall;
0x000c7f4d: add [rax+0xca], bh; lea rdi, [rip+0xfa48e]; syscall;
0x000c7f4e: mov eax, 0xca; lea rdi, [rip+0xfa48e]; syscall;
0x000c7f50: add [rax], al; add [rax-0x73], cl; cmp eax, 0xfa48e; syscall;
0x000c7f51: add [rax], al; lea rdi, [rip+0xfa48e]; syscall;
0x000c7f52: add [rax-0x73], cl; cmp eax, 0xfa48e; syscall;
0x000c7f53: lea rdi, [rip+0xfa48e]; syscall;
0x000c7f54: lea edi, [rip+0xfa48e]; syscall;
0x000c7f55: cmp eax, 0xfa48e; syscall;
0x000c8177: add [rbx-0x76bbfed1], al; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; pop r13; pop r14; ret;
0x000c81b2: rcr byte ptr [rbx+0x5d], 0x44; mov eax, eax; pop r12; pop r13; pop r14; ret;
0x000c822c: mov esp, 0x45fffffe; xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x000c828c: mov es, [rip+0x3d8d4800]; ret 0xc32;
0x000c828d: add eax, 0x3d8d4800; ret 0xc32;
0x000c8292: ret 0xc32;
0x000c82b6: xor eax, 0x1000fa1; mov fs:[r8], r9d; add rsp, 8; ret;
0x000c82b7: mov eax, [0x480889456401000f]; add esp, 8; ret;
0x000c8306: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xfa0da; syscall;
0x000c830c: add [rax], al; add [rax-0x73], cl; cmp eax, 0xfa0da; syscall;
0x000c830e: add [rax-0x73], cl; cmp eax, 0xfa0da; syscall;
0x000c8311: cmp eax, 0xfa0da; syscall;
0x000c838c: sub dword ptr [rip+0xfa135], 1; mov fs:[r8], r9d; add rsp, 8; ret;
0x000c838e: pop rbp; mov al, [0x480889456401000f]; add esp, 8; ret;
0x000c838f: mov al, [0x480889456401000f]; add esp, 8; ret;
0x000c83b4: fiadd st, word ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xfa022]; syscall;
0x000c83be: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xfa022; syscall;
0x000c83c4: add [rax], al; add [rax-0x73], cl; cmp eax, 0xfa022; syscall;
0x000c83c6: add [rax-0x73], cl; cmp eax, 0xfa022; syscall;
0x000c83c9: cmp eax, 0xfa022; syscall;
0x000c847b: sub dword ptr [rip+0xf9f6e], 1; mov fs:[r9], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret;
0x000c84e5: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xfa0da]; syscall;
0x000c84e6: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xfa0da]; syscall;
0x000c84e7: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xfa0da]; syscall;
0x000c84e8: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xfa0da]; syscall;
0x000c84e9: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xfa0da]; syscall;
0x000c84ea: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xfa0da]; syscall;
0x000c84eb: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xfa0da]; syscall;
0x000c84ec: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xfa0da]; syscall;
0x000c84ed: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xfa0da]; syscall;
0x000c84ee: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xf9ef2; syscall;
0x000c84ef: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xfa0da]; syscall;
0x000c84f0: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xfa0da]; syscall;
0x000c84f1: add [rax+0xca], bh; lea rdi, [rip+0xfa0da]; syscall;
0x000c84f2: mov eax, 0xca; lea rdi, [rip+0xfa0da]; syscall;
0x000c84f4: add [rax], al; add [rax-0x73], cl; cmp eax, 0xf9ef2; syscall;
0x000c84f5: add [rax], al; lea rdi, [rip+0xfa0da]; syscall;
0x000c84f6: add [rax-0x73], cl; cmp eax, 0xf9ef2; syscall;
0x000c84f7: lea rdi, [rip+0xfa0da]; syscall;
0x000c84f8: lea edi, [rip+0xfa0da]; syscall;
0x000c84f9: cmp eax, 0xf9ef2; syscall;
0x000c86bc: mov al, [0x824448b4c0006ef]; mov rcx, r12; mov rdx, r13; mov rsi, rbp; mov edi, r14d; call qword ptr [rsp+0x48];
0x000c86c0: mov r8, [rsp+8]; mov rcx, r12; mov rdx, r13; mov rsi, rbp; mov edi, r14d; call qword ptr [rsp+0x48];
0x000c86c1: mov eax, [rsp+8]; mov rcx, r12; mov rdx, r13; mov rsi, rbp; mov edi, r14d; call qword ptr [rsp+0x48];
0x000c86c3: and al, 8; mov rcx, r12; mov rdx, r13; mov rsi, rbp; mov edi, r14d; call qword ptr [rsp+0x48];
0x000c86c4: or [rcx+rcx*4-0x1f], cl; mov rdx, r13; mov rsi, rbp; mov edi, r14d; call qword ptr [rsp+0x48];
0x000c86c5: mov rcx, r12; mov rdx, r13; mov rsi, rbp; mov edi, r14d; call qword ptr [rsp+0x48];
0x000c86c6: mov ecx, esp; mov rdx, r13; mov rsi, rbp; mov edi, r14d; call qword ptr [rsp+0x48];
0x000c86c8: mov rdx, r13; mov rsi, rbp; mov edi, r14d; call qword ptr [rsp+0x48];
0x000c86c9: mov edx, ebp; mov rsi, rbp; mov edi, r14d; call qword ptr [rsp+0x48];
0x000c86cb: mov rsi, rbp; mov edi, r14d; call qword ptr [rsp+0x48];
0x000c86cc: mov esi, ebp; mov edi, r14d; call qword ptr [rsp+0x48];
0x000c86cd: out dx, al; mov edi, r14d; call qword ptr [rsp+0x48];
0x000c86ce: mov edi, r14d; call qword ptr [rsp+0x48];
0x000c8915: call far fword ptr [rdx+0x5c6000f];
0x000c8b58: add al, ch; ret 0x572;
0x000c8b5a: ret 0x572;
0x000c8b70: mov r8, [rsp+8]; mov rcx, r12; mov rdx, r13; mov rsi, rbp; mov rdi, r14; call qword ptr [rsp+0x48];
0x000c8b71: mov eax, [rsp+8]; mov rcx, r12; mov rdx, r13; mov rsi, rbp; mov rdi, r14; call qword ptr [rsp+0x48];
0x000c8b73: and al, 8; mov rcx, r12; mov rdx, r13; mov rsi, rbp; mov rdi, r14; call qword ptr [rsp+0x48];
0x000c8b74: or [rcx+rcx*4-0x1f], cl; mov rdx, r13; mov rsi, rbp; mov rdi, r14; call qword ptr [rsp+0x48];
0x000c8b75: mov rcx, r12; mov rdx, r13; mov rsi, rbp; mov rdi, r14; call qword ptr [rsp+0x48];
0x000c8b76: mov ecx, esp; mov rdx, r13; mov rsi, rbp; mov rdi, r14; call qword ptr [rsp+0x48];
0x000c8b78: mov rdx, r13; mov rsi, rbp; mov rdi, r14; call qword ptr [rsp+0x48];
0x000c8b79: mov edx, ebp; mov rsi, rbp; mov rdi, r14; call qword ptr [rsp+0x48];
0x000c8b7b: mov rsi, rbp; mov rdi, r14; call qword ptr [rsp+0x48];
0x000c8b7c: mov esi, ebp; mov rdi, r14; call qword ptr [rsp+0x48];
0x000c8b7d: out dx, al; mov rdi, r14; call qword ptr [rsp+0x48];
0x000c8b7e: mov rdi, r14; call qword ptr [rsp+0x48];
0x000c8b7f: mov edi, esi; call qword ptr [rsp+0x48];
0x000c8b81: call qword ptr [rsp+0x48];
0x000c8c9d: jmp qword ptr [rcx+rcx*4+0x18];
0x000c900b: test al, dl; add [rax], al; add [rdi], cl; mov dh, 0x43; add [rax-0x7d], ecx; ret;
0x000c9165: dec dword ptr [rax-0x7d]; ret 0xe901;
0x000c937b: add [rsi-0x53], edi; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x000c937d: lodsd [rsi]; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x000c93e4: add [rsi-0x26], edi; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x000c93e6: fiadd st, dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; syscall;
0x000c9427: add dword ptr [rax], 0xcab80000; add [rax], al; add [rdi], cl; add eax, 0xfffe99e9; jmp qword ptr [rsi+0xf];
0x000c942d: add [rax], al; add [rdi], cl; add eax, 0xfffe99e9; jmp qword ptr [rsi+0xf];
0x000c942f: add [rdi], cl; add eax, 0xfffe99e9; jmp qword ptr [rsi+0xf];
0x000c9431: add eax, 0xfffe99e9; jmp qword ptr [rsi+0xf];
0x000c96b7: ret 0x7500;
0x000c9725: dec byte ptr [rax-0x77]; iretd;
0x000c97a6: or ecx, [rax-0x7d]; ret;
0x000c97aa: or [rax+0x29], cl; ret;
0x000c99b0: or al, 0xaa; str [rax-0x77]; ret 0xd8e9;
0x000c99b1: stosb [rdi]; str [rax-0x77]; ret 0xd8e9;
0x000c99b2: str [rax-0x77]; ret 0xd8e9;
0x000c99f2: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xf8a6c]; syscall;
0x000c99f3: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xf8a6c]; syscall;
0x000c99f4: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xf8a6c]; syscall;
0x000c99f5: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xf8a6c]; syscall;
0x000c99f6: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xf8a6c]; syscall;
0x000c99f7: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xf8a6c]; syscall;
0x000c99f8: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xf8a6c]; syscall;
0x000c99f9: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xf8a6c]; syscall;
0x000c99fa: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xf8a6c]; syscall;
0x000c99fb: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xf8a6c]; syscall;
0x000c99fc: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xf8a6c; syscall;
0x000c99fd: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xf8a6c]; syscall;
0x000c99fe: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xf8a6c]; syscall;
0x000c99ff: add [rax+0xca], bh; lea rdi, [rip+0xf8a6c]; syscall;
0x000c9a00: mov eax, 0xca; lea rdi, [rip+0xf8a6c]; syscall;
0x000c9a02: add [rax], al; add [rax-0x73], cl; cmp eax, 0xf8a6c; syscall;
0x000c9a03: add [rax], al; lea rdi, [rip+0xf8a6c]; syscall;
0x000c9a04: add [rax-0x73], cl; cmp eax, 0xf8a6c; syscall;
0x000c9a05: lea rdi, [rip+0xf8a6c]; syscall;
0x000c9a06: lea edi, [rip+0xf8a6c]; syscall;
0x000c9a07: cmp eax, 0xf8a6c; syscall;
0x000c9a23: cmc; jmp qword ptr [rbp+rax*2-0x77];
0x000c9ae8: add [rbp+0x29], dh; lea rsp, [rbp-0x10]; pop r12; pop r13; pop rbp; ret;
0x000c9c23: add [rax], al; add [rdi], cl; ret;
0x000c9c25: add [rdi], cl; ret;
0x000c9c34: add [rax], al; add [rbp+0x6b], dh; add rsp, 0x18; pop rbx; pop rbp; ret;
0x000c9c36: add [rbp+0x6b], dh; add rsp, 0x18; pop rbx; pop rbp; ret;
0x000c9c38: imul ecx, [rax-0x7d], 0xffffffc4; sbb [rbx+0x5d], bl; ret;
0x000c9c5b: add [rax+0xf], cl; ret 0x854d;
0x000c9c74: rcl byte ptr [rax+0x31], cl; shr al, 0xb3; iretd;
0x000c9c77: shr al, 0xb3; iretd;
0x000c9d07: add [rbp-0x7ccb8a40], al; sub eax, 0xf87bd; add [rcx+rax*2-0x77], esp; sbb [rcx+rcx*4-0x40], ecx; pop rbx; ret;
0x000c9d09: shl byte ptr [rbp+0x34], 0x83; sub eax, 0xf87bd; add [rcx+rax*2-0x77], esp; sbb [rcx+rcx*4-0x40], ecx; pop rbx; ret;
0x000c9d0b: xor al, 0x83; sub eax, 0xf87bd; add [rcx+rax*2-0x77], esp; sbb [rcx+rcx*4-0x40], ecx; pop rbx; ret;
0x000c9d0c: sub dword ptr [rip+0xf87bd], 1; mov fs:[r9], ebx; mov rax, r8; pop rbx; ret;
0x000c9d0d: sub eax, 0xf87bd; add [rcx+rax*2-0x77], esp; sbb [rcx+rcx*4-0x40], ecx; pop rbx; ret;
0x000c9d0e: mov ebp, 0x1000f87; mov fs:[r9], ebx; mov rax, r8; pop rbx; ret;
0x000c9d0f: xchg [rdi], ecx; add [rcx], al; mov fs:[r9], ebx; mov rax, r8; pop rbx; ret;
0x000c9d10: sldt [rcx]; mov fs:[r9], ebx; mov rax, r8; pop rbx; ret;
0x000c9d4c: mov byte ptr [rbp+0x31], 0xd2; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xf876a]; syscall;
0x000c9d4d: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xf876a]; syscall;
0x000c9d4e: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xf876a]; syscall;
0x000c9d4f: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xf876a]; syscall;
0x000c9d50: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xf876a]; syscall;
0x000c9d51: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xf876a]; syscall;
0x000c9d52: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xf876a]; syscall;
0x000c9d53: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xf876a]; syscall;
0x000c9d54: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xf876a]; syscall;
0x000c9d55: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xf876a]; syscall;
0x000c9d56: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xf876a; syscall;
0x000c9d57: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xf876a]; syscall;
0x000c9d58: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xf876a]; syscall;
0x000c9d59: add [rax+0xca], bh; lea rdi, [rip+0xf876a]; syscall;
0x000c9d5a: mov eax, 0xca; lea rdi, [rip+0xf876a]; syscall;
0x000c9d5c: add [rax], al; add [rax-0x73], cl; cmp eax, 0xf876a; syscall;
0x000c9d5d: add [rax], al; lea rdi, [rip+0xf876a]; syscall;
0x000c9d5e: add [rax-0x73], cl; cmp eax, 0xf876a; syscall;
0x000c9d5f: lea rdi, [rip+0xf876a]; syscall;
0x000c9d60: lea edi, [rip+0xf876a]; syscall;
0x000c9d61: cmp eax, 0xf876a; syscall;
0x000c9de4: test dword ptr [rcx+rcx*4-0x1a], 0x2125894c; xchg [rdi], ecx; add al, ch; mov dl, 0xf5; dec dword ptr [rax-0x77]; ret 0x8548;
0x000c9deb: and [rdi+0x4ce8000f], eax; mov dl, 0xf5; dec dword ptr [rax-0x77]; ret 0x8548;
0x000c9dec: xchg [rdi], ecx; add al, ch; mov dl, 0xf5; dec dword ptr [rax-0x77]; ret 0x8548;
0x000c9ded: verw ax; mov dl, 0xf5; dec dword ptr [rax-0x77]; ret 0x8548;
0x000c9dee: add al, ch; mov dl, 0xf5; dec dword ptr [rax-0x77]; ret 0x8548;
0x000c9df1: mov dl, 0xf5; dec dword ptr [rax-0x77]; ret 0x8548;
0x000c9eaf: movsd [rdi], [rsi]; str [rax-0x77]; ret 0x8548;
0x000c9f00: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xf85fe]; syscall;
0x000c9f01: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xf85fe]; syscall;
0x000c9f02: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xf85fe]; syscall;
0x000c9f03: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xf85fe]; syscall;
0x000c9f04: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xf85fe]; syscall;
0x000c9f05: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xf85fe]; syscall;
0x000c9f06: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xf85fe]; syscall;
0x000c9f07: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xf85fe]; syscall;
0x000c9f08: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xf85fe]; syscall;
0x000c9f09: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xf85fe]; syscall;
0x000c9f0a: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xf85fe; syscall;
0x000c9f0b: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xf85fe]; syscall;
0x000c9f0c: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xf85fe]; syscall;
0x000c9f0d: add [rax+0xca], bh; lea rdi, [rip+0xf85fe]; syscall;
0x000c9f0e: mov eax, 0xca; lea rdi, [rip+0xf85fe]; syscall;
0x000c9f10: add [rax], al; add [rax-0x73], cl; cmp eax, 0xf85fe; syscall;
0x000c9f11: add [rax], al; lea rdi, [rip+0xf85fe]; syscall;
0x000c9f12: add [rax-0x73], cl; cmp eax, 0xf85fe; syscall;
0x000c9f13: lea rdi, [rip+0xf85fe]; syscall;
0x000c9f14: lea edi, [rip+0xf85fe]; syscall;
0x000c9f15: cmp eax, 0xf85fe; syscall;
0x000c9fb1: mov al, 0xf5; dec dword ptr [rax-0x77]; ret 0x8548;
0x000ca070: str [rax-0x77]; ret 0x8548;
0x000ca0c0: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xf847e]; syscall;
0x000ca0c1: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xf847e]; syscall;
0x000ca0c2: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xf847e]; syscall;
0x000ca0c3: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xf847e]; syscall;
0x000ca0c4: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xf847e]; syscall;
0x000ca0c5: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xf847e]; syscall;
0x000ca0c6: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xf847e]; syscall;
0x000ca0c7: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xf847e]; syscall;
0x000ca0c8: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xf847e]; syscall;
0x000ca0c9: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xf847e]; syscall;
0x000ca0ca: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xf847e; syscall;
0x000ca0cb: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xf847e]; syscall;
0x000ca0cc: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xf847e]; syscall;
0x000ca0cd: add [rax+0xca], bh; lea rdi, [rip+0xf847e]; syscall;
0x000ca0ce: mov eax, 0xca; lea rdi, [rip+0xf847e]; syscall;
0x000ca0d0: add [rax], al; add [rax-0x73], cl; cmp eax, 0xf847e; syscall;
0x000ca0d1: add [rax], al; lea rdi, [rip+0xf847e]; syscall;
0x000ca0d2: add [rax-0x73], cl; cmp eax, 0xf847e; syscall;
0x000ca0d3: lea rdi, [rip+0xf847e]; syscall;
0x000ca0d4: lea edi, [rip+0xf847e]; syscall;
0x000ca0d5: cmp eax, 0xf847e; syscall;
0x000ca156: add eax, 0x1000f84; mov fs:[r8], r9d; add rsp, 8; ret;
0x000ca157: test [rdi], cl; add [rcx], al; mov fs:[r8], r9d; add rsp, 8; ret;
0x000ca1a6: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xf83aa; syscall;
0x000ca1ac: add [rax], al; add [rax-0x73], cl; cmp eax, 0xf83aa; syscall;
0x000ca1ae: add [rax-0x73], cl; cmp eax, 0xf83aa; syscall;
0x000ca1b1: cmp eax, 0xf83aa; syscall;
0x000ca1b2: stosb [rdi]; or dword ptr [rdi], 0; syscall;
0x000ca1b3: or dword ptr [rdi], 0; syscall;
0x000ca22c: sub dword ptr [rip+0xf8405], 1; mov fs:[r8], r9d; add rsp, 8; ret;
0x000ca22e: sub eax, 0x1000f83; mov fs:[r8], r9d; add rsp, 8; ret;
0x000ca230: sldt [rcx]; mov fs:[r8], r9d; add rsp, 8; ret;
0x000ca254: fiadd st, word ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xf82f2]; syscall;
0x000ca25e: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xf82f2; syscall;
0x000ca264: add [rax], al; add [rax-0x73], cl; cmp eax, 0xf82f2; syscall;
0x000ca266: add [rax-0x73], cl; cmp eax, 0xf82f2; syscall;
0x000ca269: cmp eax, 0xf82f2; syscall;
0x000ca31b: sub dword ptr [rip+0xf823e], 1; mov fs:[r9], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret;
0x000ca31f: sldt [rcx]; mov fs:[r9], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret;
0x000ca385: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xf83aa]; syscall;
0x000ca386: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xf83aa]; syscall;
0x000ca387: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xf83aa]; syscall;
0x000ca388: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xf83aa]; syscall;
0x000ca389: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xf83aa]; syscall;
0x000ca38a: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xf83aa]; syscall;
0x000ca38b: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xf83aa]; syscall;
0x000ca38c: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xf83aa]; syscall;
0x000ca38d: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xf83aa]; syscall;
0x000ca38e: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xf81c2; syscall;
0x000ca38f: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xf83aa]; syscall;
0x000ca390: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xf83aa]; syscall;
0x000ca391: add [rax+0xca], bh; lea rdi, [rip+0xf83aa]; syscall;
0x000ca392: mov eax, 0xca; lea rdi, [rip+0xf83aa]; syscall;
0x000ca394: add [rax], al; add [rax-0x73], cl; cmp eax, 0xf81c2; syscall;
0x000ca395: add [rax], al; lea rdi, [rip+0xf83aa]; syscall;
0x000ca396: add [rax-0x73], cl; cmp eax, 0xf81c2; syscall;
0x000ca397: lea rdi, [rip+0xf83aa]; syscall;
0x000ca398: lea edi, [rip+0xf83aa]; syscall;
0x000ca399: cmp eax, 0xf81c2; syscall;
0x000ca39a: ret 0xf81;
0x000cac0e: cmp dh, [rdi+rdx-0x7c]; shl byte ptr [rsi+rbx+0xf], 0x1f; add [rdi], cl; mov dh, 0x43; add [rax-0x7d], ecx; ret;
0x000cac12: shl byte ptr [rsi+rbx+0xf], 0x1f; add [rdi], cl; mov dh, 0x43; add [rax-0x7d], ecx; ret;
0x000cacc5: add [rax], al; add [rcx+0x39], cl; fisttp qword ptr [rdi], st; ret 0x4589;
0x000cacc7: add [rcx+0x39], cl; fisttp qword ptr [rdi], st; ret 0x4589;
0x000cacca: fisttp qword ptr [rdi], st; ret 0x4589;
0x000caccd: ret 0x4589;
0x000cad02: dec dword ptr [rax-0x77]; ret 0xffb8;
0x000cad05: ret 0xffb8;
0x000cad0a: dec dword ptr [rax+0x39]; ret 0x870f;
0x000cb0e4: nop [rax+rax]; xchg ax, ax; mov eax, 0x3f; syscall;
0x000cb0e5: nop [rax+rax]; xchg ax, ax; mov eax, 0x3f; syscall;
0x000cb0e6: nop [rax+rax]; xchg ax, ax; mov eax, 0x3f; syscall;
0x000cb0e8: test [rax], al; add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0x3f; syscall;
0x000cb0e9: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, 0x3f; syscall;
0x000cb0ea: add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0x3f; syscall;
0x000cb0eb: add [rax], al; add [rsi-0x70], ah; mov eax, 0x3f; syscall;
0x000cb0ec: add [rax], al; xchg ax, ax; mov eax, 0x3f; syscall;
0x000cb0ed: add [rsi-0x70], ah; mov eax, 0x3f; syscall;
0x000cb0ee: xchg ax, ax; mov eax, 0x3f; syscall;
0x000cb0ef: nop; mov eax, 0x3f; syscall;
0x000cb0f0: mov eax, 0x3f; syscall;
0x000cb102: or eax, 0xf2d69; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000cb103: imul ebp, [rip-0x2708fff1], 0x48018964; or eax, 0xffffffff; ret;
0x000cb104: sub eax, 0xd8f7000f; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000cb10b: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x64; syscall;
0x000cb10e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x64; syscall;
0x000cb10f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x64; syscall;
0x000cb111: nop [rax+rax]; nop [rax+rax]; mov eax, 0x64; syscall;
0x000cb112: nop [rax+rax]; nop [rax+rax]; mov eax, 0x64; syscall;
0x000cb113: nop [rax+rax]; nop [rax+rax]; mov eax, 0x64; syscall;
0x000cb115: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x64; syscall;
0x000cb117: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x64; syscall;
0x000cb119: add [rax], al; nop [rax+rax]; mov eax, 0x64; syscall;
0x000cb11b: nop [rax+rax]; mov eax, 0x64; syscall;
0x000cb11d: add [rax], r8b; mov eax, 0x64; syscall;
0x000cb11e: add [rax], al; mov eax, 0x64; syscall;
0x000cb11f: add [rax+0x64], bh; syscall;
0x000cb120: mov eax, 0x64; syscall;
0x000cb135: cmp rax, 0xffffffffffffffff; mov edx, 0; cmove rax, rdx; ret;
0x000cb136: cmp eax, 0xffffffff; mov edx, 0; cmove rax, rdx; ret;
0x000cb139: mov edx, 0; cmove rax, rdx; ret;
0x000cb13a: add [rax], al; add [rax], al; cmove rax, rdx; ret;
0x000cb157: mov [rdi+8], rdx; mov rdx, [rdi+0x10]; mov [rdi+0x10], rdx; mov rdx, [rdi+0x18]; mov [rdi+0x18], rdx; ret;
0x000cb158: mov [rdi+8], edx; mov rdx, [rdi+0x10]; mov [rdi+0x10], rdx; mov rdx, [rdi+0x18]; mov [rdi+0x18], rdx; ret;
0x000cb15b: mov rdx, [rdi+0x10]; mov [rdi+0x10], rdx; mov rdx, [rdi+0x18]; mov [rdi+0x18], rdx; ret;
0x000cb15c: mov edx, [rdi+0x10]; mov [rdi+0x10], rdx; mov rdx, [rdi+0x18]; mov [rdi+0x18], rdx; ret;
0x000cb15f: mov [rdi+0x10], rdx; mov rdx, [rdi+0x18]; mov [rdi+0x18], rdx; ret;
0x000cb160: mov [rdi+0x10], edx; mov rdx, [rdi+0x18]; mov [rdi+0x18], rdx; ret;
0x000cb163: mov rdx, [rdi+0x18]; mov [rdi+0x18], rdx; ret;
0x000cb164: mov edx, [rdi+0x18]; mov [rdi+0x18], rdx; ret;
0x000cb167: mov [rdi+0x18], rdx; ret;
0x000cb168: mov [rdi+0x18], edx; ret;
0x000cb1be: adc [rax+0x3d], edi; syscall;
0x000cb1ef: sbb [rbx+0x41142454], cl; mov eax, eax; mov rsi, [rsp+8]; mov edi, [rsp+0x10]; mov eax, 0x3d; syscall;
0x000cb1f0: mov edx, [rsp+0x14]; mov r8d, eax; mov rsi, [rsp+8]; mov edi, [rsp+0x10]; mov eax, 0x3d; syscall;
0x000cb1f2: and al, 0x14; mov r8d, eax; mov rsi, [rsp+8]; mov edi, [rsp+0x10]; mov eax, 0x3d; syscall;
0x000cb1f3: adc al, 0x41; mov eax, eax; mov rsi, [rsp+8]; mov edi, [rsp+0x10]; mov eax, 0x3d; syscall;
0x000cb1f4: mov r8d, eax; mov rsi, [rsp+8]; mov edi, [rsp+0x10]; mov eax, 0x3d; syscall;
0x000cb1f5: mov eax, eax; mov rsi, [rsp+8]; mov edi, [rsp+0x10]; mov eax, 0x3d; syscall;
0x000cb1f6: ror byte ptr [rax-0x75], 0x74; and al, 8; mov edi, [rsp+0x10]; mov eax, 0x3d; syscall;
0x000cb1f7: mov rsi, [rsp+8]; mov edi, [rsp+0x10]; mov eax, 0x3d; syscall;
0x000cb1f8: mov esi, [rsp+8]; mov edi, [rsp+0x10]; mov eax, 0x3d; syscall;
0x000cb1fa: and al, 8; mov edi, [rsp+0x10]; mov eax, 0x3d; syscall;
0x000cb1fc: mov edi, [rsp+0x10]; mov eax, 0x3d; syscall;
0x000cb1fe: and al, 0x10; mov eax, 0x3d; syscall;
0x000cb1ff: adc [rax+0x3d], bh; syscall;
0x000cb200: mov eax, 0x3d; syscall;
0x000cb218: fwait; sti; dec dword ptr [rbx+0x48102444]; add esp, 0x28; ret;
0x000cb219: sti; dec dword ptr [rbx+0x48102444]; add esp, 0x28; ret;
0x000cb21a: dec dword ptr [rbx+0x48102444]; add esp, 0x28; ret;
0x000cb21b: mov eax, [rsp+0x10]; add rsp, 0x28; ret;
0x000cb21d: and al, 0x10; add rsp, 0x28; ret;
0x000cb227: add [rax-0x75], cl; adc eax, 0xf2c41; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000cb22a: adc eax, 0xf2c41; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000cb22c: sub al, 0xf; add bh, dh; fsub st, dword ptr [rcx+rcx*4+2]; mov eax, 0xffffffff; ret;
0x000cb268: add [rax], al; add [rbp+0x451975c0], al; xor eax, eax; mov eax, 0xf7; syscall;
0x000cb26a: add [rbp+0x451975c0], al; xor eax, eax; mov eax, 0xf7; syscall;
0x000cb26c: shl byte ptr [rbp+0x19], 0x45; xor eax, eax; mov eax, 0xf7; syscall;
0x000cb26f: xor r8d, r8d; mov eax, 0xf7; syscall;
0x000cb270: xor eax, eax; mov eax, 0xf7; syscall;
0x000cb2aa: xor r8d, r8d; mov r9d, eax; mov r10d, [rsp+0x1c]; mov rdx, [rsp+0x10]; mov eax, 0xf7; syscall;
0x000cb2ab: xor eax, eax; mov r9d, eax; mov r10d, [rsp+0x1c]; mov rdx, [rsp+0x10]; mov eax, 0xf7; syscall;
0x000cb2ac: rol byte ptr [rcx-0x77], 0xc1; mov r10d, [rsp+0x1c]; mov rdx, [rsp+0x10]; mov eax, 0xf7; syscall;
0x000cb2ad: mov r9d, eax; mov r10d, [rsp+0x1c]; mov rdx, [rsp+0x10]; mov eax, 0xf7; syscall;
0x000cb2ae: mov ecx, eax; mov r10d, [rsp+0x1c]; mov rdx, [rsp+0x10]; mov eax, 0xf7; syscall;
0x000cb2af: rol dword ptr [rbx+rcx*4+0x54], 0x24; sbb al, 0x48; mov edx, [rsp+0x10]; mov eax, 0xf7; syscall;
0x000cb2b0: mov r10d, [rsp+0x1c]; mov rdx, [rsp+0x10]; mov eax, 0xf7; syscall;
0x000cb2b1: mov edx, [rsp+0x1c]; mov rdx, [rsp+0x10]; mov eax, 0xf7; syscall;
0x000cb2b2: push rsp; and al, 0x1c; mov rdx, [rsp+0x10]; mov eax, 0xf7; syscall;
0x000cb2b3: and al, 0x1c; mov rdx, [rsp+0x10]; mov eax, 0xf7; syscall;
0x000cb2b4: sbb al, 0x48; mov edx, [rsp+0x10]; mov eax, 0xf7; syscall;
0x000cb2b5: mov rdx, [rsp+0x10]; mov eax, 0xf7; syscall;
0x000cb2b6: mov edx, [rsp+0x10]; mov eax, 0xf7; syscall;
0x000cb2b7: push rsp; and al, 0x10; mov eax, 0xf7; syscall;
0x000cb2b8: and al, 0x10; mov eax, 0xf7; syscall;
0x000cb2b9: adc [rax+0xf7], bh; syscall;
0x000cb2ba: mov eax, 0xf7; syscall;
0x000cb2cf: or al, 0xe8; or ebx, [rbx+0x448bfffb]; and al, 0xc; add rsp, 0x28; ret;
0x000cb2d1: or ebx, [rbx+0x448bfffb]; and al, 0xc; add rsp, 0x28; ret;
0x000cb2d2: fwait; sti; dec dword ptr [rbx+0x480c2444]; add esp, 0x28; ret;
0x000cb2d3: sti; dec dword ptr [rbx+0x480c2444]; add esp, 0x28; ret;
0x000cb2e2: adc eax, 0xf2b89; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000cb2e4: sub ecx, [rdi]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+2]; mov eax, 0xffffffff; ret;
0x000cb30a: mov esi, 0x441f0f; add [rax+0x25], bh; syscall;
0x000cb30b: nop [rax+rax]; mov eax, 0x25; syscall;
0x000cb30d: add [rax], r8b; mov eax, 0x25; syscall;
0x000cb30e: add [rax], al; mov eax, 0x25; syscall;
0x000cb30f: add [rax+0x25], bh; syscall;
0x000cb310: mov eax, 0x25; syscall;
0x000cb322: or eax, 0xf2b49; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000cb323: sub rcx, [r15]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+1]; or rax, 0xffffffffffffffff; ret;
0x000cb324: sub ecx, [rdi]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+1]; or rax, 0xffffffffffffffff; ret;
0x000cb38e: add [rax], al; add [rbp+0x12], dh; add rsp, 0x28; pop rbx; pop rbp; ret;
0x000cb390: add [rbp+0x12], dh; add rsp, 0x28; pop rbx; pop rbp; ret;
0x000cb3b5: add [rax], al; add [rbp-0x47eb8a40], al; and al, [rax]; add [rax], al; syscall;
0x000cb3b7: add [rbp-0x47eb8a40], al; and al, [rax]; add [rax], al; syscall;
0x000cb3b9: shl byte ptr [rbp+0x14], 0xb8; and al, [rax]; add [rax], al; syscall;
0x000cb3bb: adc al, 0xb8; and al, [rax]; add [rax], al; syscall;
0x000cb3c8: push qword ptr [rdi+0x35]; ret;
0x000cb3d5: cmpsd [rsi], [rdi]; cdq; sti; dec dword ptr [rcx+0x22b8c7]; add [rax], al; syscall;
0x000cb3d6: cdq; sti; dec dword ptr [rcx+0x22b8c7]; add [rax], al; syscall;
0x000cb3d7: sti; dec dword ptr [rcx+0x22b8c7]; add [rax], al; syscall;
0x000cb3d8: dec dword ptr [rcx+0x22b8c7]; add [rax], al; syscall;
0x000cb3d9: mov edi, eax; mov eax, 0x22; syscall;
0x000cb3db: mov eax, 0x22; syscall;
0x000cb3dc: and al, [rax]; add [rax], al; syscall;
0x000cb3ef: in eax, dx; cdq; sti; dec dword ptr [rbx+0x480c2444]; add esp, 0x18; ret;
0x000cb3f0: cdq; sti; dec dword ptr [rbx+0x480c2444]; add esp, 0x18; ret;
0x000cb3f1: sti; dec dword ptr [rbx+0x480c2444]; add esp, 0x18; ret;
0x000cb3ff: add [rax-0x75], cl; adc eax, 0xf2a69; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000cb402: adc eax, 0xf2a69; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000cb403: imul ebp, [rdx], 0xd8f7000f; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000cb404: sub cl, [rdi]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+2]; mov eax, 0xffffffff; ret;
0x000cb442: inc dword ptr [rbp+0x480975c0]; add esp, 8; ret;
0x000cb444: shl byte ptr [rbp+9], 0x48; add esp, 8; ret;
0x000cb4a4: lea r10, [r9+0x2d0]; xor edx, edx; xor esi, esi; mov edi, 0x1200011; mov eax, 0x38; syscall;
0x000cb4a5: lea edx, [rcx+0x2d0]; xor edx, edx; xor esi, esi; mov edi, 0x1200011; mov eax, 0x38; syscall;
0x000cb4a8: add al, [rax]; add [rcx], dh; shl byte ptr [rcx], cl; idiv byte ptr [rdi+0x1200011]; mov eax, 0x38; syscall;
0x000cb4a9: add [rax], al; xor edx, edx; xor esi, esi; mov edi, 0x1200011; mov eax, 0x38; syscall;
0x000cb4aa: add [rcx], dh; shl byte ptr [rcx], cl; idiv byte ptr [rdi+0x1200011]; mov eax, 0x38; syscall;
0x000cb4ab: xor edx, edx; xor esi, esi; mov edi, 0x1200011; mov eax, 0x38; syscall;
0x000cb4ac: shl byte ptr [rcx], cl; idiv byte ptr [rdi+0x1200011]; mov eax, 0x38; syscall;
0x000cb4ad: xor esi, esi; mov edi, 0x1200011; mov eax, 0x38; syscall;
0x000cb4ae: idiv byte ptr [rdi+0x1200011]; mov eax, 0x38; syscall;
0x000cb4af: mov edi, 0x1200011; mov eax, 0x38; syscall;
0x000cb4b0: adc [rax], eax; and [rcx], al; mov eax, 0x38; syscall;
0x000cb4b1: add [rax], ah; add [rax+0x38], edi; syscall;
0x000cb4b2: and [rcx], al; mov eax, 0x38; syscall;
0x000cb4b3: add [rax+0x38], edi; syscall;
0x000cb57f: add al, ch; cmp ebx, [rbx+rdi*8-0x1776bb01]; pop rbp; pop r12; pop r13; ret;
0x000cb581: cmp ebx, [rbx+rdi*8-0x1776bb01]; pop rbp; pop r12; pop r13; ret;
0x000cb583: sti; inc dword ptr [rcx+rcx*4-0x18]; pop rbp; pop r12; pop r13; ret;
0x000cb584: inc dword ptr [rcx+rcx*4-0x18]; pop rbp; pop r12; pop r13; ret;
0x000cb585: mov eax, r13d; pop rbp; pop r12; pop r13; ret;
0x000cb59e: call qword ptr [rax-0x415a418];
0x000cb607: nop [rax+rax]; mov rax, [rip+0xf61f1]; mov rdi, r9; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000cb608: nop [rax+rax]; mov rax, [rip+0xf61f1]; mov rdi, r9; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000cb60e: add [rax], al; mov rax, [rip+0xf61f1]; mov rdi, r9; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000cb60f: add [rax-0x75], cl; add eax, 0xf61f1; mov rdi, r9; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000cb610: mov rax, [rip+0xf61f1]; mov rdi, r9; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000cb611: mov eax, [rip+0xf61f1]; mov rdi, r9; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000cb612: add eax, 0xf61f1; mov rdi, r9; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000cb615: str [rcx+rcx*4-0x31]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000cb616: add [rcx+rcx*4-0x31], cl; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000cb617: mov rdi, r9; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000cb618: mov edi, ecx; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000cb63a: nop [rax+rax]; pop rdi; mov eax, 0x3a; syscall;
0x000cb63b: nop [rax+rax]; pop rdi; mov eax, 0x3a; syscall;
0x000cb63d: add [rax], r8b; pop rdi; mov eax, 0x3a; syscall;
0x000cb63e: add [rax], al; pop rdi; mov eax, 0x3a; syscall;
0x000cb63f: add [rdi-0x48], bl; cmp al, [rax]; add [rax], al; syscall;
0x000cb640: pop rdi; mov eax, 0x3a; syscall;
0x000cb641: mov eax, 0x3a; syscall;
0x000cb642: cmp al, [rax]; add [rax], al; syscall;
0x000cb653: or eax, 0xf2818; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000cb655: sub [rdi], cl; add bh, dh; fsub st, dword ptr [rcx+rcx*4+1]; or rax, 0xffffffffffffffff; ret;
0x000cb683: nop [rax+rax]; mov eax, edx; syscall;
0x000cb685: add [rax], r8b; mov eax, edx; syscall;
0x000cb686: add [rax], al; mov eax, edx; syscall;
0x000cb688: mov eax, edx; syscall;
0x000cb691: push qword ptr [rdi+0x1c]; hlt; mov eax, esi; syscall;
0x000cb693: sbb al, 0xf4; mov eax, esi; syscall;
0x000cb694: hlt; mov eax, esi; syscall;
0x000cb695: mov eax, esi; syscall;
0x000cb6b8: nop [rax+rax]; mov eax, 0x3b; syscall;
0x000cb6ba: test [rax], al; add [rax], al; add [rax], al; mov eax, 0x3b; syscall;
0x000cb6bb: add [rax], al; add [rax], al; add [rax+0x3b], bh; syscall;
0x000cb6bc: add [rax], al; add [rax], al; mov eax, 0x3b; syscall;
0x000cb6bd: add [rax], al; add [rax+0x3b], bh; syscall;
0x000cb6be: add [rax], al; mov eax, 0x3b; syscall;
0x000cb6bf: add [rax+0x3b], bh; syscall;
0x000cb6c0: mov eax, 0x3b; syscall;
0x000cb6c1: cmp eax, [rax]; add [rax], al; syscall;
0x000cb6d2: or eax, 0xf2799; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000cb717: test byte ptr [rdi], 0x94; ret 0x854d;
0x000cb722: ret 0x6b75;
0x000cb72c: mov rdx, rsi; mov r8d, 0x1000; mov r10, r12; lea rsi, [rip+0xbe7fe]; mov eax, 0x142; syscall;
0x000cb72d: mov edx, esi; mov r8d, 0x1000; mov r10, r12; lea rsi, [rip+0xbe7fe]; mov eax, 0x142; syscall;
0x000cb72f: mov r8d, 0x1000; mov r10, r12; lea rsi, [rip+0xbe7fe]; mov eax, 0x142; syscall;
0x000cb730: mov eax, 0x1000; mov r10, r12; lea rsi, [rip+0xbe7fe]; mov eax, 0x142; syscall;
0x000cb731: add [rax], dl; add [rax], al; mov r10, r12; lea rsi, [rip+0xbe7fe]; mov eax, 0x142; syscall;
0x000cb733: add [rax], al; mov r10, r12; lea rsi, [rip+0xbe7fe]; mov eax, 0x142; syscall;
0x000cb735: mov r10, r12; lea rsi, [rip+0xbe7fe]; mov eax, 0x142; syscall;
0x000cb736: mov edx, esp; lea rsi, [rip+0xbe7fe]; mov eax, 0x142; syscall;
0x000cb738: lea rsi, [rip+0xbe7fe]; mov eax, 0x142; syscall;
0x000cb739: lea esi, [rip+0xbe7fe]; mov eax, 0x142; syscall;
0x000cb73a: xor eax, 0xbe7fe; mov eax, 0x142; syscall;
0x000cb73c: out 0xb, eax; add [rax+0x142], bh; syscall;
0x000cb73d: or eax, [rax]; mov eax, 0x142; syscall;
0x000cb73e: add [rax+0x142], bh; syscall;
0x000cb73f: mov eax, 0x142; syscall;
0x000cb82e: call qword ptr [rax-0xd76b6ab];
0x000cb89e: test bl, dh; add [rax], al; add [rax-0x7d], cl; ret 0x8301;
0x000cb983: add [rax], al; add [rbp+0x23], dh; mov rbx, [rbp-8]; leave; ret;
0x000cb985: add [rbp+0x23], dh; mov rbx, [rbp-8]; leave; ret;
0x000cb987: and ecx, [rax-0x75]; pop rbp; clc; leave; ret;
0x000cbb8e: test bl, dl; add [rax], al; add [rax-0x7d], cl; ret 0x8301;
0x000cbb90: add [rax], al; add [rax-0x7d], cl; ret 0x8301;
0x000cbb92: add [rax-0x7d], cl; ret 0x8301;
0x000cbc5b: add [rax], al; add [rbp+0x1b], dh; mov rbx, [rbp-8]; leave; ret;
0x000cbc5d: add [rbp+0x1b], dh; mov rbx, [rbp-8]; leave; ret;
0x000cbc5f: sbb ecx, [rax-0x75]; pop rbp; clc; leave; ret;
0x000cbc60: mov rbx, [rbp-8]; leave; ret;
0x000cbc61: mov ebx, [rbp-8]; leave; ret;
0x000cbc62: pop rbp; clc; leave; ret;
0x000cbc63: clc; leave; ret;
0x000cbcb8: cmpsd [rsi], [rdi]; add [rax], al; add [rax-0x77], cl; ret 0x8348;
0x000cbcb9: add [rax], al; add [rax-0x77], cl; ret 0x8348;
0x000cbcbb: add [rax-0x77], cl; ret 0x8348;
0x000cbd5b: ret 0x3fe8;
0x000cbe1b: call far fword ptr [rbx+0x41];
0x000cbeb2: stosb [rdi]; xchg ecx, eax; cmc; dec dword ptr [rax-0x77]; ret 0x8949;
0x000cbeb3: xchg ecx, eax; cmc; dec dword ptr [rax-0x77]; ret 0x8949;
0x000cbeb4: cmc; dec dword ptr [rax-0x77]; ret 0x8949;
0x000cc0c7: nop [rax+rax]; mov eax, 0x27; syscall; ret;
0x000cc0c7: nop [rax+rax]; mov eax, 0x27; syscall;
0x000cc0c8: nop [rax+rax]; mov eax, 0x27; syscall; ret;
0x000cc0c8: nop [rax+rax]; mov eax, 0x27; syscall;
0x000cc0ca: test [rax], al; add [rax], al; add [rax], al; mov eax, 0x27; syscall; ret;
0x000cc0ca: test [rax], al; add [rax], al; add [rax], al; mov eax, 0x27; syscall;
0x000cc0cb: add [rax], al; add [rax], al; add [rax+0x27], bh; syscall;
0x000cc0cb: add [rax], al; add [rax], al; add [rax+0x27], bh; syscall; ret;
0x000cc0cc: add [rax], al; add [rax], al; mov eax, 0x27; syscall; ret;
0x000cc0cc: add [rax], al; add [rax], al; mov eax, 0x27; syscall;
0x000cc0cd: add [rax], al; add [rax+0x27], bh; syscall; ret;
0x000cc0cd: add [rax], al; add [rax+0x27], bh; syscall;
0x000cc0ce: add [rax], al; mov eax, 0x27; syscall;
0x000cc0ce: add [rax], al; mov eax, 0x27; syscall; ret;
0x000cc0cf: add [rax+0x27], bh; syscall;
0x000cc0cf: add [rax+0x27], bh; syscall; ret;
0x000cc0d0: mov eax, 0x27; syscall; ret;
0x000cc0d4: add [rdi], cl; add eax, 0x841f0fc3; add [rax], al; add [rax], al; add [rax+0x6e], bh; syscall;
0x000cc0d6: add eax, 0x841f0fc3; add [rax], al; add [rax], al; add [rax+0x6e], bh; syscall; ret;
0x000cc0d6: add eax, 0x841f0fc3; add [rax], al; add [rax], al; add [rax+0x6e], bh; syscall;
0x000cc0d8: nop [rax+rax]; mov eax, 0x6e; syscall; ret;
0x000cc0d8: nop [rax+rax]; mov eax, 0x6e; syscall;
0x000cc0da: test [rax], al; add [rax], al; add [rax], al; mov eax, 0x6e; syscall;
0x000cc0da: test [rax], al; add [rax], al; add [rax], al; mov eax, 0x6e; syscall; ret;
0x000cc0db: add [rax], al; add [rax], al; add [rax+0x6e], bh; syscall;
0x000cc0db: add [rax], al; add [rax], al; add [rax+0x6e], bh; syscall; ret;
0x000cc0dc: add [rax], al; add [rax], al; mov eax, 0x6e; syscall;
0x000cc0dc: add [rax], al; add [rax], al; mov eax, 0x6e; syscall; ret;
0x000cc0dd: add [rax], al; add [rax+0x6e], bh; syscall;
0x000cc0dd: add [rax], al; add [rax+0x6e], bh; syscall; ret;
0x000cc0de: add [rax], al; mov eax, 0x6e; syscall;
0x000cc0de: add [rax], al; mov eax, 0x6e; syscall; ret;
0x000cc0df: add [rax+0x6e], bh; syscall; ret;
0x000cc0df: add [rax+0x6e], bh; syscall;
0x000cc0e0: mov eax, 0x6e; syscall; ret;
0x000cc0e0: mov eax, 0x6e; syscall;
0x000cc0e4: add [rdi], cl; add eax, 0x841f0fc3; add [rax], al; add [rax], al; add [rax+0x66], bh; syscall;
0x000cc0e6: add eax, 0x841f0fc3; add [rax], al; add [rax], al; add [rax+0x66], bh; syscall;
0x000cc0e6: add eax, 0x841f0fc3; add [rax], al; add [rax], al; add [rax+0x66], bh; syscall; ret;
0x000cc0e8: nop [rax+rax]; mov eax, 0x66; syscall;
0x000cc0e8: nop [rax+rax]; mov eax, 0x66; syscall; ret;
0x000cc0ea: test [rax], al; add [rax], al; add [rax], al; mov eax, 0x66; syscall; ret;
0x000cc0ea: test [rax], al; add [rax], al; add [rax], al; mov eax, 0x66; syscall;
0x000cc0eb: add [rax], al; add [rax], al; add [rax+0x66], bh; syscall;
0x000cc0eb: add [rax], al; add [rax], al; add [rax+0x66], bh; syscall; ret;
0x000cc0ec: add [rax], al; add [rax], al; mov eax, 0x66; syscall; ret;
0x000cc0ec: add [rax], al; add [rax], al; mov eax, 0x66; syscall;
0x000cc0ed: add [rax], al; add [rax+0x66], bh; syscall; ret;
0x000cc0ed: add [rax], al; add [rax+0x66], bh; syscall;
0x000cc0ee: add [rax], al; mov eax, 0x66; syscall;
0x000cc0ee: add [rax], al; mov eax, 0x66; syscall; ret;
0x000cc0ef: add [rax+0x66], bh; syscall; ret;
0x000cc0ef: add [rax+0x66], bh; syscall;
0x000cc0f0: mov eax, 0x66; syscall; ret;
0x000cc0f0: mov eax, 0x66; syscall;
0x000cc0f4: add [rdi], cl; add eax, 0x841f0fc3; add [rax], al; add [rax], al; add [rax+0x6b], bh; syscall;
0x000cc0f6: add eax, 0x841f0fc3; add [rax], al; add [rax], al; add [rax+0x6b], bh; syscall;
0x000cc0f6: add eax, 0x841f0fc3; add [rax], al; add [rax], al; add [rax+0x6b], bh; syscall; ret;
0x000cc0f8: nop [rax+rax]; mov eax, 0x6b; syscall;
0x000cc0f8: nop [rax+rax]; mov eax, 0x6b; syscall; ret;
0x000cc0fa: test [rax], al; add [rax], al; add [rax], al; mov eax, 0x6b; syscall; ret;
0x000cc0fa: test [rax], al; add [rax], al; add [rax], al; mov eax, 0x6b; syscall;
0x000cc0fb: add [rax], al; add [rax], al; add [rax+0x6b], bh; syscall; ret;
0x000cc0fb: add [rax], al; add [rax], al; add [rax+0x6b], bh; syscall;
0x000cc0fc: add [rax], al; add [rax], al; mov eax, 0x6b; syscall; ret;
0x000cc0fc: add [rax], al; add [rax], al; mov eax, 0x6b; syscall;
0x000cc0fd: add [rax], al; add [rax+0x6b], bh; syscall;
0x000cc0fd: add [rax], al; add [rax+0x6b], bh; syscall; ret;
0x000cc0fe: add [rax], al; mov eax, 0x6b; syscall; ret;
0x000cc0fe: add [rax], al; mov eax, 0x6b; syscall;
0x000cc0ff: add [rax+0x6b], bh; syscall; ret;
0x000cc0ff: add [rax+0x6b], bh; syscall;
0x000cc100: mov eax, 0x6b; syscall;
0x000cc100: mov eax, 0x6b; syscall; ret;
0x000cc104: add [rdi], cl; add eax, 0x841f0fc3; add [rax], al; add [rax], al; add [rax+0x68], bh; syscall;
0x000cc106: add eax, 0x841f0fc3; add [rax], al; add [rax], al; add [rax+0x68], bh; syscall;
0x000cc106: add eax, 0x841f0fc3; add [rax], al; add [rax], al; add [rax+0x68], bh; syscall; ret;
0x000cc108: nop [rax+rax]; mov eax, 0x68; syscall; ret;
0x000cc108: nop [rax+rax]; mov eax, 0x68; syscall;
0x000cc10a: test [rax], al; add [rax], al; add [rax], al; mov eax, 0x68; syscall; ret;
0x000cc10a: test [rax], al; add [rax], al; add [rax], al; mov eax, 0x68; syscall;
0x000cc10b: add [rax], al; add [rax], al; add [rax+0x68], bh; syscall;
0x000cc10b: add [rax], al; add [rax], al; add [rax+0x68], bh; syscall; ret;
0x000cc10c: add [rax], al; add [rax], al; mov eax, 0x68; syscall;
0x000cc10c: add [rax], al; add [rax], al; mov eax, 0x68; syscall; ret;
0x000cc10d: add [rax], al; add [rax+0x68], bh; syscall; ret;
0x000cc10d: add [rax], al; add [rax+0x68], bh; syscall;
0x000cc10e: add [rax], al; mov eax, 0x68; syscall; ret;
0x000cc10e: add [rax], al; mov eax, 0x68; syscall;
0x000cc10f: add [rax+0x68], bh; syscall;
0x000cc10f: add [rax+0x68], bh; syscall; ret;
0x000cc110: mov eax, 0x68; syscall; ret;
0x000cc110: mov eax, 0x68; syscall;
0x000cc111: push 0xf000000; add eax, 0x841f0fc3; add [rax], al; add [rax], al; add [rax+0x6c], bh; syscall;
0x000cc114: add [rdi], cl; add eax, 0x841f0fc3; add [rax], al; add [rax], al; add [rax+0x6c], bh; syscall;
0x000cc116: add eax, 0x841f0fc3; add [rax], al; add [rax], al; add [rax+0x6c], bh; syscall;
0x000cc116: add eax, 0x841f0fc3; add [rax], al; add [rax], al; add [rax+0x6c], bh; syscall; ret;
0x000cc118: nop [rax+rax]; mov eax, 0x6c; syscall;
0x000cc118: nop [rax+rax]; mov eax, 0x6c; syscall; ret;
0x000cc11a: test [rax], al; add [rax], al; add [rax], al; mov eax, 0x6c; syscall;
0x000cc11a: test [rax], al; add [rax], al; add [rax], al; mov eax, 0x6c; syscall; ret;
0x000cc11b: add [rax], al; add [rax], al; add [rax+0x6c], bh; syscall;
0x000cc11b: add [rax], al; add [rax], al; add [rax+0x6c], bh; syscall; ret;
0x000cc11c: add [rax], al; add [rax], al; mov eax, 0x6c; syscall; ret;
0x000cc11c: add [rax], al; add [rax], al; mov eax, 0x6c; syscall;
0x000cc11d: add [rax], al; add [rax+0x6c], bh; syscall; ret;
0x000cc11d: add [rax], al; add [rax+0x6c], bh; syscall;
0x000cc11e: add [rax], al; mov eax, 0x6c; syscall; ret;
0x000cc11e: add [rax], al; mov eax, 0x6c; syscall;
0x000cc11f: add [rax+0x6c], bh; syscall;
0x000cc11f: add [rax+0x6c], bh; syscall; ret;
0x000cc120: mov eax, 0x6c; syscall; ret;
0x000cc120: mov eax, 0x6c; syscall;
0x000cc124: add [rdi], cl; add eax, 0x841f0fc3; add [rax], al; add [rax], al; add [rax+0x73], bh; syscall;
0x000cc126: add eax, 0x841f0fc3; add [rax], al; add [rax], al; add [rax+0x73], bh; syscall;
0x000cc128: nop [rax+rax]; mov eax, 0x73; syscall;
0x000cc12a: test [rax], al; add [rax], al; add [rax], al; mov eax, 0x73; syscall;
0x000cc12b: add [rax], al; add [rax], al; add [rax+0x73], bh; syscall;
0x000cc12c: add [rax], al; add [rax], al; mov eax, 0x73; syscall;
0x000cc12d: add [rax], al; add [rax+0x73], bh; syscall;
0x000cc12e: add [rax], al; mov eax, 0x73; syscall;
0x000cc12f: add [rax+0x73], bh; syscall;
0x000cc130: mov eax, 0x73; syscall;
0x000cc142: or eax, 0xf1d29; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000cc143: sub [rip-0x2708fff1], ebx; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000cc144: sbb eax, 0xd8f7000f; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000cc17d: sub bh, [rax+0x69]; syscall;
0x000cc17e: mov eax, 0x69; syscall;
0x000cc1b8: or [rax-0x75], cl; add eax, 0xf5640; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000cc1bb: add eax, 0xf5640; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000cc1bd: push rsi; str [rax-0x3f]; enter 0x6411, 0x48; xor eax, [0x30]; call rax;
0x000cc206: xchg esi, eax; push rsp; sldt [rbp-0x47d58a40]; push 0; add [rax], al; syscall;
0x000cc207: push rsp; sldt [rbp-0x47d58a40]; push 0; add [rax], al; syscall;
0x000cc208: sldt [rbp-0x47d58a40]; push 0; add [rax], al; syscall;
0x000cc209: add [rbp-0x47d58a40], al; push 0; add [rax], al; syscall;
0x000cc20b: shl byte ptr [rbp+0x2a], 0xb8; push 0; add [rax], al; syscall;
0x000cc20d: sub bh, [rax+0x6a]; syscall;
0x000cc20e: mov eax, 0x6a; syscall;
0x000cc20f: push 0; add [rax], al; syscall;
0x000cc228: add [rax], al; add [rbp+0x4e], dh; add rsp, 0x38; ret;
0x000cc22a: add [rbp+0x4e], dh; add rsp, 0x38; ret;
0x000cc241: mov rdi, rsp; mov [rsp+8], rax; mov rax, [rip+0xf5640]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000cc242: mov edi, esp; mov [rsp+8], rax; mov rax, [rip+0xf5640]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000cc243: out 0x48, eax; mov [rsp+8], eax; mov rax, [rip+0xf5640]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000cc244: mov [rsp+8], rax; mov rax, [rip+0xf5640]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000cc245: mov [rsp+8], eax; mov rax, [rip+0xf5640]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000cc247: and al, 8; mov rax, [rip+0xf5640]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000cc248: or [rax-0x75], cl; add eax, 0xf55b0; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000cc24b: add eax, 0xf55b0; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000cc24c: mov al, 0x55; str [rax-0x3f]; enter 0x6411, 0x48; xor eax, [0x30]; call rax;
0x000cc24d: push rbp; str [rax-0x3f]; enter 0x6411, 0x48; xor eax, [0x30]; call rax;
0x000cc29b: add [rax], al; add [rax-0x77], cl; fdiv st, dword ptr [r9]; ror byte ptr [rdi], 0x1f; add [rax+0x63], cl; ret;
0x000cc29d: add [rax-0x77], cl; fdiv st, dword ptr [r9]; ror byte ptr [rdi], 0x1f; add [rax+0x63], cl; ret;
0x000cc2a0: fdiv st, dword ptr [r9]; ror byte ptr [rdi], 0x1f; add [rax+0x63], cl; ret;
0x000cc2a1: fdiv st, dword ptr [rcx]; ror byte ptr [rdi], 0x1f; add [rax+0x63], cl; ret;
0x000cc2a3: ror byte ptr [rdi], 0x1f; add [rax+0x63], cl; ret;
0x000cc2a7: add [rax+0x63], cl; ret;
0x000cc2cc: dec dword ptr [rcx+0x39db01da]; ret 0xd374;
0x000cc2ce: fiadd st, dword ptr [rcx]; fstp tbyte ptr [rcx], st; ret 0xd374;
0x000cc2d0: fstp tbyte ptr [rcx], st; ret 0xd374;
0x000cc2d2: ret 0xd374;
0x000cc300: lea rsp, [rbp-0x18]; pop rbx; pop r12; pop r13; pop rbp; ret;
0x000cc301: lea esp, [rbp-0x18]; pop rbx; pop r12; pop r13; pop rbp; ret;
0x000cc318: add al, 0x13; add al, 0; nop [rax]; mov eax, 0x79; syscall;
0x000cc319: adc eax, [rax+rax]; nop [rax]; mov eax, 0x79; syscall;
0x000cc31a: add al, 0; nop [rax]; mov eax, 0x79; syscall;
0x000cc31c: nop [rax]; mov eax, 0x79; syscall;
0x000cc31e: add [rax+0x79], dil; syscall;
0x000cc31f: add [rax+0x79], bh; syscall;
0x000cc320: mov eax, 0x79; syscall;
0x000cc332: or eax, 0xf1b39; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000cc33b: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x6d; syscall;
0x000cc33e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x6d; syscall;
0x000cc33f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x6d; syscall;
0x000cc341: nop [rax+rax]; nop [rax+rax]; mov eax, 0x6d; syscall;
0x000cc342: nop [rax+rax]; nop [rax+rax]; mov eax, 0x6d; syscall;
0x000cc343: nop [rax+rax]; nop [rax+rax]; mov eax, 0x6d; syscall;
0x000cc345: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x6d; syscall;
0x000cc347: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x6d; syscall;
0x000cc349: add [rax], al; nop [rax+rax]; mov eax, 0x6d; syscall;
0x000cc34b: nop [rax+rax]; mov eax, 0x6d; syscall;
0x000cc34d: add [rax], r8b; mov eax, 0x6d; syscall;
0x000cc34e: add [rax], al; mov eax, 0x6d; syscall;
0x000cc34f: add [rax+0x6d], bh; syscall;
0x000cc350: mov eax, 0x6d; syscall;
0x000cc362: or eax, 0xf1b09; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000cc364: sbb ecx, [rdi]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+1]; or rax, 0xffffffffffffffff; ret;
0x000cc36b: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x6f; syscall;
0x000cc36e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x6f; syscall; ret;
0x000cc36e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x6f; syscall;
0x000cc36f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x6f; syscall;
0x000cc36f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x6f; syscall; ret;
0x000cc371: nop [rax+rax]; nop [rax+rax]; mov eax, 0x6f; syscall;
0x000cc371: nop [rax+rax]; nop [rax+rax]; mov eax, 0x6f; syscall; ret;
0x000cc372: nop [rax+rax]; nop [rax+rax]; mov eax, 0x6f; syscall; ret;
0x000cc372: nop [rax+rax]; nop [rax+rax]; mov eax, 0x6f; syscall;
0x000cc373: nop [rax+rax]; nop [rax+rax]; mov eax, 0x6f; syscall; ret;
0x000cc373: nop [rax+rax]; nop [rax+rax]; mov eax, 0x6f; syscall;
0x000cc375: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x6f; syscall;
0x000cc377: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x6f; syscall;
0x000cc377: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x6f; syscall; ret;
0x000cc379: add [rax], al; nop [rax+rax]; mov eax, 0x6f; syscall; ret;
0x000cc379: add [rax], al; nop [rax+rax]; mov eax, 0x6f; syscall;
0x000cc37b: nop [rax+rax]; mov eax, 0x6f; syscall; ret;
0x000cc37b: nop [rax+rax]; mov eax, 0x6f; syscall;
0x000cc37d: add [rax], r8b; mov eax, 0x6f; syscall; ret;
0x000cc37d: add [rax], r8b; mov eax, 0x6f; syscall;
0x000cc37e: add [rax], al; mov eax, 0x6f; syscall;
0x000cc37e: add [rax], al; mov eax, 0x6f; syscall; ret;
0x000cc37f: add [rax+0x6f], bh; syscall;
0x000cc37f: add [rax+0x6f], bh; syscall; ret;
0x000cc380: mov eax, 0x6f; syscall; ret;
0x000cc380: mov eax, 0x6f; syscall;
0x000cc3a9: nop [rax]; mov eax, 0x7c; syscall;
0x000cc3ab: add byte ptr [rax], 0; add [rax], al; mov eax, 0x7c; syscall;
0x000cc3ac: add [rax], al; add [rax], al; mov eax, 0x7c; syscall;
0x000cc3ad: add [rax], al; add [rax+0x7c], bh; syscall;
0x000cc3ae: add [rax], al; mov eax, 0x7c; syscall;
0x000cc3af: add [rax+0x7c], bh; syscall;
0x000cc3b0: mov eax, 0x7c; syscall;
0x000cc3c2: or eax, 0xf1aa9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000cc3c3: test eax, 0xf7000f1a; fsub st, dword ptr [rcx+rcx*4+1]; or rax, 0xffffffffffffffff; ret;
0x000cc3cb: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x70; syscall;
0x000cc3ce: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x70; syscall;
0x000cc3cf: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x70; syscall;
0x000cc3d1: nop [rax+rax]; nop [rax+rax]; mov eax, 0x70; syscall;
0x000cc3d2: nop [rax+rax]; nop [rax+rax]; mov eax, 0x70; syscall;
0x000cc3d3: nop [rax+rax]; nop [rax+rax]; mov eax, 0x70; syscall;
0x000cc3d5: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x70; syscall;
0x000cc3d7: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x70; syscall;
0x000cc3d9: add [rax], al; nop [rax+rax]; mov eax, 0x70; syscall;
0x000cc3db: nop [rax+rax]; mov eax, 0x70; syscall;
0x000cc3dd: add [rax], r8b; mov eax, 0x70; syscall;
0x000cc3de: add [rax], al; mov eax, 0x70; syscall;
0x000cc3df: add [rax+0x70], bh; syscall;
0x000cc3e0: mov eax, 0x70; syscall;
0x000cc3f2: or eax, 0xf1a79; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000cc3fb: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x76; syscall;
0x000cc3fe: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x76; syscall;
0x000cc3ff: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x76; syscall;
0x000cc401: nop [rax+rax]; nop [rax+rax]; mov eax, 0x76; syscall;
0x000cc402: nop [rax+rax]; nop [rax+rax]; mov eax, 0x76; syscall;
0x000cc403: nop [rax+rax]; nop [rax+rax]; mov eax, 0x76; syscall;
0x000cc405: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x76; syscall;
0x000cc407: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x76; syscall;
0x000cc409: add [rax], al; nop [rax+rax]; mov eax, 0x76; syscall;
0x000cc40b: nop [rax+rax]; mov eax, 0x76; syscall;
0x000cc40d: add [rax], r8b; mov eax, 0x76; syscall;
0x000cc40e: add [rax], al; mov eax, 0x76; syscall;
0x000cc40f: add [rax+0x76], bh; syscall;
0x000cc410: mov eax, 0x76; syscall;
0x000cc422: or eax, 0xf1a49; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000cc423: sbb cl, [r15]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+1]; or rax, 0xffffffffffffffff; ret;
0x000cc42b: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x78; syscall;
0x000cc42e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x78; syscall;
0x000cc42f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x78; syscall;
0x000cc431: nop [rax+rax]; nop [rax+rax]; mov eax, 0x78; syscall;
0x000cc432: nop [rax+rax]; nop [rax+rax]; mov eax, 0x78; syscall;
0x000cc433: nop [rax+rax]; nop [rax+rax]; mov eax, 0x78; syscall;
0x000cc435: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x78; syscall;
0x000cc437: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x78; syscall;
0x000cc439: add [rax], al; nop [rax+rax]; mov eax, 0x78; syscall;
0x000cc43b: nop [rax+rax]; mov eax, 0x78; syscall;
0x000cc43d: add [rax], r8b; mov eax, 0x78; syscall;
0x000cc43e: add [rax], al; mov eax, 0x78; syscall;
0x000cc43f: add [rax+0x78], bh; syscall;
0x000cc440: mov eax, 0x78; syscall;
0x000cc452: or eax, 0xf1a19; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000cc454: sbb cl, [rdi]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+1]; or rax, 0xffffffffffffffff; ret;
0x000cc48d: sub bh, [rax+0x75]; syscall;
0x000cc4d6: sbb [rax-0x75], cl; add eax, 0xf5322; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000cc4d9: add eax, 0xf5322; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000cc4da: and dl, [rbx+0xf]; add [rax-0x3f], cl; enter 0x6411, 0x48; xor eax, [0x30]; call rax;
0x000cc4db: push rbx; str [rax-0x3f]; enter 0x6411, 0x48; xor eax, [0x30]; call rax;
0x000cc52d: sub bh, [rax+0x77]; syscall;
0x000cc56f: adc [rcx+0x448948d0], cl; and al, 0x18; mov rax, [rip+0xf5322]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000cc570: mov eax, edx; mov [rsp+0x18], rax; mov rax, [rip+0xf5322]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000cc571: ror byte ptr [rax-0x77], 1; and al, 0x18; mov rax, [rip+0xf5322]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000cc572: mov [rsp+0x18], rax; mov rax, [rip+0xf5322]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000cc573: mov [rsp+0x18], eax; mov rax, [rip+0xf5322]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000cc575: and al, 0x18; mov rax, [rip+0xf5322]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000cc576: sbb [rax-0x75], cl; add eax, 0xf5282; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000cc579: add eax, 0xf5282; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000cc57b: push rdx; str [rax-0x3f]; enter 0x6411, 0x48; xor eax, [0x30]; call rax;
0x000cc57c: str [rax-0x3f]; enter 0x6411, 0x48; xor eax, [0x30]; call rax;
0x000cc8f8: ret 0x7275;
0x000cc8fb: mov eax, 0x7d00; ret;
0x000cc913: add [rdi+rdx*8+0x48], esi; cmp edx, 0xbd00bd0; mov eax, 0x7f; mov edx, 0xfde8; cmove rax, rdx; ret;
0x000cc915: xlat [rbx]; cmp rdx, 0xbd00bd0; mov eax, 0x7f; mov edx, 0xfde8; cmove rax, rdx; ret;
0x000cc916: cmp rdx, 0xbd00bd0; mov eax, 0x7f; mov edx, 0xfde8; cmove rax, rdx; ret;
0x000cc917: cmp edx, 0xbd00bd0; mov eax, 0x7f; mov edx, 0xfde8; cmove rax, rdx; ret;
0x000cc919: ror byte ptr [rbx], 1; ror byte ptr [rbx], 1; mov eax, 0x7f; mov edx, 0xfde8; cmove rax, rdx; ret;
0x000cc91a: or edx, eax; or edi, [rax+0x7f]; mov edx, 0xfde8; cmove rax, rdx; ret;
0x000cc91b: ror byte ptr [rbx], 1; mov eax, 0x7f; mov edx, 0xfde8; cmove rax, rdx; ret;
0x000cc91c: or edi, [rax+0x7f]; mov edx, 0xfde8; cmove rax, rdx; ret;
0x000cc91d: mov eax, 0x7f; mov edx, 0xfde8; cmove rax, rdx; ret;
0x000cc91f: add [rax], al; add [rdx+0xfde8], bh; cmove rax, rdx; ret;
0x000cc920: add [rax], al; mov edx, 0xfde8; cmove rax, rdx; ret;
0x000cc921: add [rdx+0xfde8], bh; cmove rax, rdx; ret;
0x000cc922: mov edx, 0xfde8; cmove rax, rdx; ret;
0x000cc924: std; add [rax], al; cmove rax, rdx; ret;
0x000cc92c: nop [rax]; cmp rdx, 0x11954; mov eax, 0x7f; mov edx, 0x7d00; cmove rax, rdx; ret;
0x000cc930: cmp rdx, 0x11954; mov eax, 0x7f; mov edx, 0x7d00; cmove rax, rdx; ret;
0x000cc931: cmp edx, 0x11954; mov eax, 0x7f; mov edx, 0x7d00; cmove rax, rdx; ret;
0x000cc933: push rsp; sbb [rcx], eax; add [rax+0x7f], bh; mov edx, 0x7d00; cmove rax, rdx; ret;
0x000cc934: sbb [rcx], eax; add [rax+0x7f], bh; mov edx, 0x7d00; cmove rax, rdx; ret;
0x000cc935: add [rax], eax; mov eax, 0x7f; mov edx, 0x7d00; cmove rax, rdx; ret;
0x000cc936: add [rax+0x7f], bh; mov edx, 0x7d00; cmove rax, rdx; ret;
0x000cc93d: add [rbp], bh; add [rax+0xf], cl; ret 0x66c3;
0x000cc962: and al, 0; add [rbp+0x1c], dh; mov eax, 0xfffa; ret;
0x000cc964: add [rbp+0x1c], dh; mov eax, 0xfffa; ret;
0x000cc967: mov eax, 0xfffa; ret;
0x000cc96b: add bl, al; cmp rdx, 0x54190100; mov eax, 0x7f; mov edx, 0x7d00; cmove rax, rdx; ret;
0x000cc96d: cmp rdx, 0x54190100; mov eax, 0x7f; mov edx, 0x7d00; cmove rax, rdx; ret;
0x000cc96e: cmp edx, 0x54190100; mov eax, 0x7f; mov edx, 0x7d00; cmove rax, rdx; ret;
0x000cc970: add [rcx], al; sbb [rax+rdi*4+0x7f], edx; add [rax], al; add [rdx+0x7d00], bh; cmove rax, rdx; ret;
0x000cc971: add [rcx], ebx; push rsp; mov eax, 0x7f; mov edx, 0x7d00; cmove rax, rdx; ret;
0x000cc972: sbb [rax+rdi*4+0x7f], edx; add [rax], al; add [rdx+0x7d00], bh; cmove rax, rdx; ret;
0x000cc973: push rsp; mov eax, 0x7f; mov edx, 0x7d00; cmove rax, rdx; ret;
0x000cc974: mov eax, 0x7f; mov edx, 0x7d00; cmove rax, rdx; ret;
0x000cc976: add [rax], al; add [rdx+0x7d00], bh; cmove rax, rdx; ret;
0x000cc977: add [rax], al; mov edx, 0x7d00; cmove rax, rdx; ret;
0x000cc978: add [rdx+0x7d00], bh; cmove rax, rdx; ret;
0x000cc979: mov edx, 0x7d00; cmove rax, rdx; ret;
0x000cc97a: add [rbp], bh; add [rax+0xf], cl; ret 0x48c3;
0x000cc97d: add [rax+0xf], cl; ret 0x48c3;
0x000cc981: ret 0x48c3;
0x000cc983: cmp rdx, 0x137f; mov edx, 0x7f; cmovne rax, rdx; ret;
0x000cc984: cmp edx, 0x137f; mov edx, 0x7f; cmovne rax, rdx; ret;
0x000cc987: adc eax, [rax]; add [rdx+0x7f], bh; cmovne rax, rdx; ret;
0x000cc988: add [rax], al; mov edx, 0x7f; cmovne rax, rdx; ret;
0x000cc989: add [rdx+0x7f], bh; cmovne rax, rdx; ret;
0x000cc98a: mov edx, 0x7f; cmovne rax, rdx; ret;
0x000cc998: mov rax, [rip+0xf14d1]; mov rdx, 0xffffffffffffffff; cmp dword ptr fs:[rax], 0x26; mov eax, 0x7f; cmovne rax, rdx; ret;
0x000cc999: mov eax, [rip+0xf14d1]; mov rdx, 0xffffffffffffffff; cmp dword ptr fs:[rax], 0x26; mov eax, 0x7f; cmovne rax, rdx; ret;
0x000cc99a: add eax, 0xf14d1; mov rdx, 0xffffffffffffffff; cmp dword ptr fs:[rax], 0x26; mov eax, 0x7f; cmovne rax, rdx; ret;
0x000cc99b: rcl dword ptr [rdi+rcx], 1; add [rax-0x39], cl; ret 0xffff;
0x000cc99c: adc al, 0xf; add [rax-0x39], cl; ret 0xffff;
0x000cc99f: mov rdx, 0xffffffffffffffff; cmp dword ptr fs:[rax], 0x26; mov eax, 0x7f; cmovne rax, rdx; ret;
0x000cc9a0: mov edx, 0xffffffff; cmp dword ptr fs:[rax], 0x26; mov eax, 0x7f; cmovne rax, rdx; ret;
0x000cc9a6: cmp dword ptr fs:[rax], 0x26; mov eax, 0x7f; cmovne rax, rdx; ret;
0x000cc9a7: cmp dword ptr [rax], 0x26; mov eax, 0x7f; cmovne rax, rdx; ret;
0x000cc9a8: cmp [rsi], ah; mov eax, 0x7f; cmovne rax, rdx; ret;
0x000cc9a9: mov eax, 0x7f; cmovne rax, rdx; ret;
0x000cc9aa: mov eax, 0x7f; cmovne rax, rdx; ret;
0x000cc9b4: nop [rax]; mov eax, 0xfc17; ret;
0x000cc9b6: add [rax+0xfc17], dil; ret;
0x000cc9b7: add [rax+0xfc17], bh; ret;
0x000cc9b8: mov eax, 0xfc17; ret;
0x000cc9ba: cld; add [rax], al; ret;
0x000cc9bc: add bl, al; xchg ax, ax; mov eax, 0x7e; ret;
0x000cc9be: xchg ax, ax; mov eax, 0x7e; ret;
0x000cc9bf: nop; mov eax, 0x7e; ret;
0x000cc9c0: mov eax, 0x7e; ret;
0x000cc9f6: add [rax], al; add [rax-0x7f], cl; ret 0x231b;
0x000cc9f8: add [rax-0x7f], cl; ret 0x231b;
0x000cc9f9: add rdx, 0x4df3231b; cmp rax, rdx; mov edx, 0x100; mov eax, 0x20; cmove rax, rdx; ret;
0x000cc9fa: add edx, 0x4df3231b; cmp rax, rdx; mov edx, 0x100; mov eax, 0x20; cmove rax, rdx; ret;
0x000cc9fb: ret 0x231b;
0x000cc9fd: and esi, ebx; cmp rax, rdx; mov edx, 0x100; mov eax, 0x20; cmove rax, rdx; ret;
0x000cca00: cmp rax, rdx; mov edx, 0x100; mov eax, 0x20; cmove rax, rdx; ret;
0x000cca01: cmp eax, edx; mov edx, 0x100; mov eax, 0x20; cmove rax, rdx; ret;
0x000cca02: sar byte ptr [rdx+0x100], 1; mov eax, 0x20; cmove rax, rdx; ret;
0x000cca03: mov edx, 0x100; mov eax, 0x20; cmove rax, rdx; ret;
0x000cca04: add [rcx], al; add [rax], al; mov eax, 0x20; cmove rax, rdx; ret;
0x000cca05: add [rax], eax; add [rax+0x20], bh; cmove rax, rdx; ret;
0x000cca30: sbb [rsp+rsi*2+0x54], edx; cmp rax, 0x58465342; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret;
0x000cca33: push rsp; cmp rax, 0x58465342; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret;
0x000cca34: cmp rax, 0x58465342; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret;
0x000cca35: cmp eax, 0x58465342; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret;
0x000cca37: push rbx; pop rax; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret;
0x000cca39: pop rax; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret;
0x000cca5f: add [rsi+0x48], dh; cmp eax, 0xbd00bd0; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret;
0x000cca61: cmp rax, 0xbd00bd0; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret;
0x000cca62: cmp rax, 0xbd00bd0; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret;
0x000cca63: cmp eax, 0xbd00bd0; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret;
0x000cca64: ror byte ptr [rbx], 1; ror byte ptr [rbx], 1; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret;
0x000cca65: or edx, eax; or edi, [rdx+0x40]; mov eax, 0x20; cmove rax, rdx; ret;
0x000cca66: ror byte ptr [rbx], 1; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret;
0x000cca67: or edi, [rdx+0x40]; mov eax, 0x20; cmove rax, rdx; ret;
0x000cca6f: add [rax], al; add [rax+0xf], cl; ret 0x66c3;
0x000cca85: add [rbp+8], dh; mov eax, 0x40; ret;
0x000cca87: or [rax+0x40], bh; ret;
0x000cca88: mov eax, 0x40; ret;
0x000cca8e: xchg ax, ax; cmp rax, 0xef53; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret;
0x000cca8f: nop; cmp rax, 0xef53; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret;
0x000cca90: cmp rax, 0xef53; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret;
0x000cca91: cmp eax, 0xef53; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret;
0x000cca93: out dx, eax; add [rax], al; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret;
0x000cca94: add [rax], al; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret;
0x000cca95: add [rdx+0x40], bh; mov eax, 0x20; cmove rax, rdx; ret;
0x000ccaad: xor [rax+rbx*8+0x48], esi; cmp eax, 0x52654973; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret;
0x000ccab0: cmp rax, 0x52654973; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret;
0x000ccab1: cmp eax, 0x52654973; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret;
0x000ccab4: push rdx; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret;
0x000ccab5: push rdx; mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret;
0x000ccab6: mov edx, 0x40; mov eax, 0x20; cmove rax, rdx; ret;
0x000ccab8: add [rax], al; add [rax+0x20], bh; cmove rax, rdx; ret;
0x000ccab9: add [rax], al; mov eax, 0x20; cmove rax, rdx; ret;
0x000ccaba: add [rax+0x20], bh; cmove rax, rdx; ret;
0x000ccabb: mov eax, 0x20; cmove rax, rdx; ret;
0x000ccabc: and [rax], al; add [rax], al; cmove rax, rdx; ret;
0x000ccabe: add [rax], al; cmove rax, rdx; ret;
0x000ccac8: mov rax, [rip+0xf13a1]; mov rdx, 0xffffffffffffffff; cmp dword ptr fs:[rax], 0x26; mov eax, 0x20; cmovne rax, rdx; ret;
0x000ccac9: mov eax, [rip+0xf13a1]; mov rdx, 0xffffffffffffffff; cmp dword ptr fs:[rax], 0x26; mov eax, 0x20; cmovne rax, rdx; ret;
0x000ccaca: add eax, 0xf13a1; mov rdx, 0xffffffffffffffff; cmp dword ptr fs:[rax], 0x26; mov eax, 0x20; cmovne rax, rdx; ret;
0x000ccacc: adc ecx, [rdi]; add [rax-0x39], cl; ret 0xffff;
0x000ccacd: str [rax-0x39]; ret 0xffff;
0x000ccace: add [rax-0x39], cl; ret 0xffff;
0x000ccacf: mov rdx, 0xffffffffffffffff; cmp dword ptr fs:[rax], 0x26; mov eax, 0x20; cmovne rax, rdx; ret;
0x000ccad0: mov edx, 0xffffffff; cmp dword ptr fs:[rax], 0x26; mov eax, 0x20; cmovne rax, rdx; ret;
0x000ccad6: cmp dword ptr fs:[rax], 0x26; mov eax, 0x20; cmovne rax, rdx; ret;
0x000ccad7: cmp dword ptr [rax], 0x26; mov eax, 0x20; cmovne rax, rdx; ret;
0x000ccad8: cmp [rsi], ah; mov eax, 0x20; cmovne rax, rdx; ret;
0x000ccad9: mov eax, 0x20; cmovne rax, rdx; ret;
0x000ccada: mov eax, 0x20; cmovne rax, rdx; ret;
0x000ccadb: and [rax], al; add [rax], al; cmovne rax, rdx; ret;
0x000ccadc: add [rax], al; add [rax+0xf], cl; ret 0xfc3;
0x000ccadd: add [rax], al; cmovne rax, rdx; ret;
0x000ccae4: nop [rax]; mov eax, 0xff; ret;
0x000ccae6: add [rax+0xff], dil; ret;
0x000ccae7: add [rax+0xff], bh; ret;
0x000ccae8: mov eax, 0xff; ret;
0x000ccb23: xor eax, eax; cmp rdx, 0xadf5; setne al; ret;
0x000ccb24: ror byte ptr [rax-0x7f], 0xfa; cmc; lodsd [rsi]; add [rax], al; setne al; ret;
0x000ccb25: cmp rdx, 0xadf5; setne al; ret;
0x000ccb26: cmp edx, 0xadf5; setne al; ret;
0x000ccb27: cli; cmc; lodsd [rsi]; add [rax], al; setne al; ret;
0x000ccb28: cmc; lodsd [rsi]; add [rax], al; setne al; ret;
0x000ccb29: lodsd [rsi]; add [rax], al; setne al; ret;
0x000ccb3a: adc eax, 0x8148c031; cli; push rsp; push rbx; setne al; ret;
0x000ccb3b: xor eax, eax; cmp rdx, 0x5346544e; setne al; ret;
0x000ccb3c: ror byte ptr [rax-0x7f], 0xfa; push rsp; push rbx; setne al; ret;
0x000ccb3d: cmp rdx, 0x5346544e; setne al; ret;
0x000ccb3e: cmp edx, 0x5346544e; setne al; ret;
0x000ccb3f: cli; push rsp; push rbx; setne al; ret;
0x000ccb41: push rsp; push rbx; setne al; ret;
0x000ccb43: push rbx; setne al; ret;
0x000ccb5b: xor eax, eax; cmp rdx, 0x1badface; setne al; ret;
0x000ccb5d: cmp rdx, 0x1badface; setne al; ret;
0x000ccb5e: cmp edx, 0x1badface; setne al; ret;
0x000ccb76: xor eax, eax; cmp rdx, 0x1cd1; setne al; ret;
0x000ccb78: cmp rdx, 0x1cd1; setne al; ret;
0x000ccb79: cmp edx, 0x1cd1; setne al; ret;
0x000ccb7d: add [rax], al; setne al; ret;
0x000ccb7f: setne al; ret;
0x000ccb92: add eax, 0xf12d9; cmp dword ptr fs:[rax], 0x26; sete al; movzx eax, al; lea rax, [rax+rax-1]; ret;
0x000ccb93: fst dword ptr [rdx], st; verr [rbx+rax*4+0x38]; sete al; movzx eax, al; lea rax, [rax+rax-1]; ret;
0x000ccb94: adc cl, [rdi]; add [rbx+rax*4+0x38], ah; sete al; movzx eax, al; lea rax, [rax+rax-1]; ret;
0x000ccc5d: xchg [rbp+0x48000001], eax; lea edx, [rip+0xb9957]; mov esi, esi; movsxd rax, [rdx+rsi*4]; add rax, rdx; jmp rax;
0x000ccc60: add [rax], al; lea rdx, [rip+0xb9957]; mov esi, esi; movsxd rax, [rdx+rsi*4]; add rax, rdx; jmp rax;
0x000ccc61: add [rax-0x73], cl; adc eax, 0xb9957; mov esi, esi; movsxd rax, [rdx+rsi*4]; add rax, rdx; jmp rax;
0x000ccc62: lea rdx, [rip+0xb9957]; mov esi, esi; movsxd rax, [rdx+rsi*4]; add rax, rdx; jmp rax;
0x000ccc63: lea edx, [rip+0xb9957]; mov esi, esi; movsxd rax, [rdx+rsi*4]; add rax, rdx; jmp rax;
0x000ccc64: adc eax, 0xb9957; mov esi, esi; movsxd rax, [rdx+rsi*4]; add rax, rdx; jmp rax;
0x000ccc66: cdq; or eax, [rax]; mov esi, esi; movsxd rax, [rdx+rsi*4]; add rax, rdx; jmp rax;
0x000cce40: mov rax, [rip+0xf12d9]; cmp dword ptr fs:[rax], 0x26; sete al; movzx eax, al; lea rax, [rax+rax-1]; ret;
0x000cce41: mov eax, [rip+0xf12d9]; cmp dword ptr fs:[rax], 0x26; sete al; movzx eax, al; lea rax, [rax+rax-1]; ret;
0x000cce42: add eax, 0xf1029; cmp dword ptr fs:[rax], 0x26; sete al; movzx eax, al; lea rax, [rax+rax-1]; ret;
0x000cce43: sub [rax], edx; verr [rbx+rax*4+0x38]; sete al; movzx eax, al; lea rax, [rax+rax-1]; ret;
0x000cce44: adc [rdi], cl; add [rbx+rax*4+0x38], ah; sete al; movzx eax, al; lea rax, [rax+rax-1]; ret;
0x000cce45: verr [rbx+rax*4+0x38]; sete al; movzx eax, al; lea rax, [rax+rax-1]; ret;
0x000cce46: add [rbx+rax*4+0x38], ah; sete al; movzx eax, al; lea rax, [rax+rax-1]; ret;
0x000cce47: cmp dword ptr fs:[rax], 0x26; sete al; movzx eax, al; lea rax, [rax+rax-1]; ret;
0x000cce48: cmp dword ptr [rax], 0x26; sete al; movzx eax, al; lea rax, [rax+rax-1]; ret;
0x000cce49: cmp [rsi], ah; sete al; movzx eax, al; lea rax, [rax+rax-1]; ret;
0x000cce4a: sete al; movzx eax, al; lea rax, [rax+rax-1]; ret;
0x000cce4b: sete al; movzx eax, al; lea rax, [rax+rax-1]; ret;
0x000cce4c: xchg esp, eax; ror byte ptr [rdi], 0xb6; ror byte ptr [rax-0x73], 0x44; add bh, bh; ret;
0x000cce4d: ror byte ptr [rdi], 0xb6; ror byte ptr [rax-0x73], 0x44; add bh, bh; ret;
0x000cce4e: movzx eax, al; lea rax, [rax+rax-1]; ret;
0x000cce4f: mov dh, 0xc0; lea rax, [rax+rax-1]; ret;
0x000cce50: ror byte ptr [rax-0x73], 0x44; add bh, bh; ret;
0x000cce51: lea rax, [rax+rax-1]; ret;
0x000cce52: lea eax, [rax+rax-1]; ret;
0x000cce53: add dil, r15b; ret;
0x000cce54: add bh, bh; ret;
0x000ccfdc: add rsp, 0x48; pop rbx; pop rbp; pop r12; pop r13; ret;
0x000ccfdd: add esp, 0x48; pop rbx; pop rbp; pop r12; pop r13; ret;
0x000cd01a: test byte ptr [rax], 0; add [rdi+0x78], dh; lea rdx, [rip+0xb95ed]; movsxd rax, [rdx+rbp*4]; add rax, rdx; jmp rax;
0x000cd01b: add [rax], al; add [rdi+0x78], dh; lea rdx, [rip+0xb95ed]; movsxd rax, [rdx+rbp*4]; add rax, rdx; jmp rax;
0x000cd01d: add [rdi+0x78], dh; lea rdx, [rip+0xb95ed]; movsxd rax, [rdx+rbp*4]; add rax, rdx; jmp rax;
0x000cd020: lea rdx, [rip+0xb95ed]; movsxd rax, [rdx+rbp*4]; add rax, rdx; jmp rax;
0x000cd021: lea edx, [rip+0xb95ed]; movsxd rax, [rdx+rbp*4]; add rax, rdx; jmp rax;
0x000cd022: adc eax, 0xb95ed; movsxd rax, [rdx+rbp*4]; add rax, rdx; jmp rax;
0x000cd023: in eax, dx; xchg ebp, eax; or eax, [rax]; movsxd rax, [rdx+rbp*4]; add rax, rdx; jmp rax;
0x000cd024: xchg ebp, eax; or eax, [rax]; movsxd rax, [rdx+rbp*4]; add rax, rdx; jmp rax;
0x000cd025: or eax, [rax]; movsxd rax, [rdx+rbp*4]; add rax, rdx; jmp rax;
0x000cd026: add [rax+0x63], cl; add al, 0xaa; add rax, rdx; jmp rax;
0x000cd10f: out 0xe8, eax; or ebp, [rdi+2]; add [rax-0x77], cl; ret;
0x000cd111: or ebp, [rdi+2]; add [rax-0x77], cl; ret;
0x000cd45f: add [rax], al; lea rdx, [rip+0xb9588]; mov esi, esi; movsxd rax, [rdx+rsi*4]; add rax, rdx; jmp rax;
0x000cd460: add [rax-0x73], cl; adc eax, 0xb9588; mov esi, esi; movsxd rax, [rdx+rsi*4]; add rax, rdx; jmp rax;
0x000cd461: lea rdx, [rip+0xb9588]; mov esi, esi; movsxd rax, [rdx+rsi*4]; add rax, rdx; jmp rax;
0x000cd462: lea edx, [rip+0xb9588]; mov esi, esi; movsxd rax, [rdx+rsi*4]; add rax, rdx; jmp rax;
0x000cd463: adc eax, 0xb9588; mov esi, esi; movsxd rax, [rdx+rsi*4]; add rax, rdx; jmp rax;
0x000cd464: mov [rbp-0x976fff5], dl; movsxd rax, [rdx+rsi*4]; add rax, rdx; jmp rax;
0x000cd465: xchg ebp, eax; or eax, [rax]; mov esi, esi; movsxd rax, [rdx+rsi*4]; add rax, rdx; jmp rax;
0x000cd466: or eax, [rax]; mov esi, esi; movsxd rax, [rdx+rsi*4]; add rax, rdx; jmp rax;
0x000cd467: add [rcx+0x46348f6], cl; mov dl, 0x48; add eax, edx; jmp rax;
0x000cd468: mov esi, esi; movsxd rax, [rdx+rsi*4]; add rax, rdx; jmp rax;
0x000cd469: test byte ptr [rax+0x63], 4; mov dl, 0x48; add eax, edx; jmp rax;
0x000cd46a: movsxd rax, [rdx+rsi*4]; add rax, rdx; jmp rax;
0x000cd4e9: jmp qword ptr [rcx+rcx*4+0x5d];
0x000cdc25: or [rdx], al; add [rbp-0x4d7af040], al; add al, [rax]; add [rbx-0x2e773], al; call qword ptr [rax];
0x000cde99: mov edi, edi; jmp qword ptr [rsp+rax*2-0x77];
0x000cdf91: lea rsi, [rbp-0x2e0]; mov rdi, r15; call qword ptr [r12+0x38];
0x000cdf92: lea esi, [rbp-0x2e0]; mov rdi, r15; call qword ptr [r12+0x38];
0x000cdf97: dec dword ptr [rcx+rcx*4-1]; call qword ptr [r12+0x38];
0x000cdf98: mov rdi, r15; call qword ptr [r12+0x38];
0x000cdf99: mov edi, edi; call qword ptr [r12+0x38];
0x000cdf9b: call qword ptr [r12+0x38];
0x000cdf9c: call qword ptr [rsp+0x38];
0x000cee8c: idiv bh; call qword ptr [rax-0x50c272b8];
0x000cee8e: call qword ptr [rax-0x50c272b8];
0x000cfa8f: add [rax-0x75], cl; adc [r8+1], r9b; fmul st, dword ptr [rax-0x7d]; ret;
0x000cfa92: adc [r8+1], r9b; fmul st, dword ptr [rax-0x7d]; ret;
0x000cfa93: adc [rax+1], cl; fmul st, dword ptr [rax-0x7d]; ret;
0x000cfb02: mov dh, 0x47; add [rax-0x7d], ecx; mov dword ptr [rcx], 0xcc75c084; xor eax, eax; ret;
0x000cfb03: add [r8-0x7d], r9d; mov dword ptr [rcx], 0xcc75c084; xor eax, eax; ret;
0x000cfb04: add [rax-0x7d], ecx; mov dword ptr [rcx], 0xcc75c084; xor eax, eax; ret;
0x000cfb07: mov dword ptr [rcx], 0xcc75c084; xor eax, eax; ret;
0x000cfb08: add [rax+rax*8-0x3fce338b], eax; ret;
0x000cfb0c: int3; xor eax, eax; ret;
0x000cfb1e: add [r13-0x7beb8b0a], r8; shl byte ptr [rbp+0xf], 0xb6; add r8b, [r11-0x7cb7fd36]; mov dword ptr [rdx], 0x1f0fd4eb; add [rax-0x77], cl; iretd;
0x000cfb1f: add [rbp-0x7beb8b0a], eax; shl byte ptr [rbp+0xf], 0xb6; add r8b, [r11-0x7cb7fd36]; mov dword ptr [rdx], 0x1f0fd4eb; add [rax-0x77], cl; iretd;
0x000cfb21: div byte ptr [rsp+rdx-0x7c]; shl byte ptr [rbp+0xf], 0xb6; add r8b, [r11-0x7cb7fd36]; mov dword ptr [rdx], 0x1f0fd4eb; add [rax-0x77], cl; iretd;
0x000cfb23: adc al, 0x84; shl byte ptr [rbp+0xf], 0xb6; add r8b, [r11-0x7cb7fd36]; mov dword ptr [rdx], 0x1f0fd4eb; add [rax-0x77], cl; iretd;
0x000cfb25: shl byte ptr [rbp+0xf], 0xb6; add r8b, [r11-0x7cb7fd36]; mov dword ptr [rdx], 0x1f0fd4eb; add [rax-0x77], cl; iretd;
0x000cfb27: in eax, 0xf; mov dh, 0x47; add al, [rbx-0x7cb7fd36]; mov dword ptr [rdx], 0x1f0fd4eb; add [rax-0x77], cl; iretd;
0x000cfb29: mov dh, 0x47; add al, [rbx-0x7cb7fd36]; mov dword ptr [rdx], 0x1f0fd4eb; add [rax-0x77], cl; iretd;
0x000cfb2a: add r8b, [r11-0x7cb7fd36]; mov dword ptr [rdx], 0x1f0fd4eb; add [rax-0x77], cl; iretd;
0x000cfb2b: add al, [rbx-0x7cb7fd36]; mov dword ptr [rdx], 0x1f0fd4eb; add [rax-0x77], cl; iretd;
0x000cfb2e: add cl, [rax-0x7d]; mov dword ptr [rdx], 0x1f0fd4eb; add [rax-0x77], cl; iretd;
0x000cfb31: mov dword ptr [rdx], 0x1f0fd4eb; add [rax-0x77], cl; iretd;
0x000cfbb9: adc ecx, [rbx-0x7cb7fbad]; ret;
0x000cfbd7: shl byte ptr [rbp-0x12], cl; mov rax, rbp; pop rbx; pop rbp; pop r12; ret;
0x000cfbd9: out dx, al; mov rax, rbp; pop rbx; pop rbp; pop r12; ret;
0x000cfbf7: shl byte ptr [rax+0x48], 0x8d; add al, 0xeb; test [rbx-0x7cb7f3ad], cl; ret;
0x000cfbfd: add al, 0xeb; test [rbx-0x7cb7f3ad], cl; ret;
0x000cfbff: test [rbx-0x7cb7f3ad], cl; ret;
0x000cfc2f: dec dword ptr [rax-0x73]; or [r11+0x5d], bl; pop r12; ret;
0x000cfc30: lea rax, [rbx+8]; pop rbx; pop rbp; pop r12; ret;
0x000cfc31: lea eax, [rbx+8]; pop rbx; pop rbp; pop r12; ret;
0x000cfc32: or [r11+0x5d], bl; pop r12; ret;
0x000cfc33: or [rbx+0x5d], bl; pop r12; ret;
0x000cfcc3: adc cl, [rdi]; mov dh, 0x53; add [rax-0x7d], ecx; ret;
0x000cfce0: shl byte ptr [rbp-0x13], cl; mov rax, rbp; pop rbx; pop rbp; pop r12; ret;
0x000cfce2: in eax, dx; mov rax, rbp; pop rbx; pop rbp; pop r12; ret;
0x000cfd0f: add [rdi], cl; mov dh, 0x53; add ecx, [rax-0x7d]; ret;
0x000cfd11: mov dh, 0x53; add ecx, [rax-0x7d]; ret;
0x000cfd12: push rbx; add ecx, [rax-0x7d]; ret;
0x000cfd13: add ecx, [rax-0x7d]; ret;
0x000cfd3f: dec dword ptr [rax-0x73]; add bl, [r11+0x5d]; pop r12; ret;
0x000cfd40: lea rax, [rbx+2]; pop rbx; pop rbp; pop r12; ret;
0x000cfd41: lea eax, [rbx+2]; pop rbx; pop rbp; pop r12; ret;
0x000cfd42: add bl, [r11+0x5d]; pop r12; ret;
0x000cfd43: add bl, [rbx+0x5d]; pop r12; ret;
0x000cff17: and [rbx-0x7cb7fbbe], ecx; ret 0x4804;
0x000d0021: sti; add cl, [rax-0x7d]; ret;
0x000d0022: add cl, [rax-0x7d]; ret;
0x000d00da: in eax, 2; add [rax], al; lea rdx, [rip+0xb695f]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000d00db: add al, [rax]; add [rax-0x73], cl; adc eax, 0xb695f; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000d00dc: add [rax], al; lea rdx, [rip+0xb695f]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000d00dd: add [rax-0x73], cl; adc eax, 0xb695f; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000d00de: lea rdx, [rip+0xb695f]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000d00df: lea edx, [rip+0xb695f]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000d00e0: adc eax, 0xb695f; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000d0152: mov al, [0xf551ace8a8758948]; dec dword ptr [rax-0x77]; ret;
0x000d0156: test al, 0xe8; lodsb [rsi]; push rcx; cmc; dec dword ptr [rax-0x77]; ret;
0x000d0158: lodsb [rsi]; push rcx; cmc; dec dword ptr [rax-0x77]; ret;
0x000d0159: push rcx; cmc; dec dword ptr [rax-0x77]; ret;
0x000d032a: out 0xe8, al; rol byte ptr [rcx], 0; add [rcx-0x77], al; ret;
0x000d032c: rol byte ptr [rcx], 0; add [rcx-0x77], al; ret;
0x000d05aa: adc eax, [rbx]; add [rcx-0x77], al; ret 0x8d41;
0x000d05ac: add [rcx-0x77], al; ret 0x8d41;
0x000d05b3: fild st, word ptr [rbx+0x27773bf8]; lea rsi, [rip+0xb6504]; movsxd rax, [rsi+rax*4]; add rax, rsi; jmp rax;
0x000d05b5: clc; cmp esi, [rdi+0x27]; lea rsi, [rip+0xb6504]; movsxd rax, [rsi+rax*4]; add rax, rsi; jmp rax;
0x000d05b6: cmp esi, [rdi+0x27]; lea rsi, [rip+0xb6504]; movsxd rax, [rsi+rax*4]; add rax, rsi; jmp rax;
0x000d05b9: lea rsi, [rip+0xb6504]; movsxd rax, [rsi+rax*4]; add rax, rsi; jmp rax;
0x000d05ba: lea esi, [rip+0xb6504]; movsxd rax, [rsi+rax*4]; add rax, rsi; jmp rax;
0x000d05bb: xor eax, 0xb6504; movsxd rax, [rsi+rax*4]; add rax, rsi; jmp rax;
0x000d05bc: add al, 0x65; or eax, [rax]; movsxd rax, [rsi+rax*4]; add rax, rsi; jmp rax;
0x000d05bd: or eax, gs:[rax]; movsxd rax, [rsi+rax*4]; add rax, rsi; jmp rax;
0x000d05be: or eax, [rax]; movsxd rax, [rsi+rax*4]; add rax, rsi; jmp rax;
0x000d05bf: add [rax+0x63], cl; add al, 0x86; add rax, rsi; jmp rax;
0x000d06a0: adc al, [rbx]; add [rcx-0x77], al; ret 0x3b4c;
0x000d06a2: add [rcx-0x77], al; ret 0x3b4c;
0x000d06a5: ret 0x3b4c;
0x000d0784: test [rdi-0x7cfffffd], al; call far fword ptr [rbp+0xf];
0x000d0793: call far fword ptr [rbp+rsi*2+0xb];
0x000d0817: ret 0x8304;
0x000d0ace: call qword ptr [rax+0x243c3b4c];
0x000d0b9f: outsd dx, [rsi]; add al, 0x83; call far fword ptr [rbp+0xf];
0x000d0ba0: add al, 0x83; call far fword ptr [rbp+0xf];
0x000d0ba2: call far fword ptr [rbp+0xf];
0x000d0c7e: call qword ptr [rax-0x7aff8275];
0x000d0da4: xchg esp, eax; ret 0xf883;
0x000d0df7: dec dword ptr [rax-0x7d]; ret 0x4901;
0x000d0e15: scasd [rdi]; iretd;
0x000d0ebb: xor al, ch; iretd;
0x000d0ece: add [rcx+0xf16d705], ecx; add cl, ch; stc; idiv edi; jmp qword ptr [rsi+0xf];
0x000d0ed3: verw cx; stc; idiv edi; jmp qword ptr [rsi+0xf];
0x000d0ed4: add cl, ch; stc; idiv edi; jmp qword ptr [rsi+0xf];
0x000d0ed6: stc; idiv edi; jmp qword ptr [rsi+0xf];
0x000d0efb: idiv r15d; call qword ptr [rax+0x44d8b44];
0x000d0efc: idiv edi; call qword ptr [rax+0x44d8b44];
0x000d0efe: call qword ptr [rax+0x44d8b44];
0x000d0f5c: idiv bh; call qword ptr [rax+0x244c8b44];
0x000d0f5e: call qword ptr [rax+0x244c8b44];
0x000d103c: ret 0x2000;
0x000d1167: add [rbx+0x745d087a], al; push 0xffffffffffffff8b; or [rax-0x7d], cl; ret 0x8504;
0x000d116a: or [rbp+0x74], bl; push 0xffffffffffffff8b; or [rax-0x7d], cl; ret 0x8504;
0x000d116d: push 0xffffffffffffff8b; or [rax-0x7d], cl; ret 0x8504;
0x000d1170: or [rax-0x7d], cl; ret 0x8504;
0x000d1173: ret 0x8504;
0x000d1174: add al, 0x85; ror byte ptr [rdi], 0x84; ret;
0x000d1340: ret 0xd5eb;
0x000d13c3: add [rcx+0x39], ecx; ror dword ptr [rdi], 0x84; ret;
0x000d13c6: ror dword ptr [rdi], 0x84; ret;
0x000d1661: ret 0xd9f7;
0x000d1680: sti; sbb cl, al; clc; sbb [rcx], bh; ret;
0x000d1681: sbb cl, al; clc; sbb [rcx], bh; ret;
0x000d1683: clc; sbb [rcx], bh; ret;
0x000d1684: sbb [rcx], bh; ret;
0x000d1a1e: or [rax-0x7d], ecx; ret;
0x000d1a8b: add [rax], eax; add [rax-0x73], cl; push rbx; add [rbx*2-0x49f0db8b], edi; add [rax-0x7d], ecx; ret 0x4801;
0x000d1a8d: add [rax-0x73], cl; push rbx; add [rbx*2-0x49f0db8b], edi; add [rax-0x7d], ecx; ret 0x4801;
0x000d1a90: push rbx; add [rbx*2-0x49f0db8b], edi; add [rax-0x7d], ecx; ret 0x4801;
0x000d1a91: add [rbx*2-0x49f0db8b], edi; add [rax-0x7d], ecx; ret 0x4801;
0x000d1a95: and al, 0xf; mov dh, 0x42; add [rax-0x7d], ecx; ret 0x4801;
0x000d1a97: mov dh, 0x42; add [rax-0x7d], ecx; ret 0x4801;
0x000d1b32: mov [0x7428017b800673d6], eax; adc al, 0x3c; sub [rax+rbp+0xf], esi; mov dh, 0x43; add [rax-0x7d], ecx; ret;
0x000d1b39: sub [rsp+rdx+0x3c], dh; sub [rax+rbp+0xf], esi; mov dh, 0x43; add [rax-0x7d], ecx; ret;
0x000d1b3b: adc al, 0x3c; sub [rax+rbp+0xf], esi; mov dh, 0x43; add [rax-0x7d], ecx; ret;
0x000d1b3d: sub [rax+rbp+0xf], esi; mov dh, 0x43; add [rax-0x7d], ecx; ret;
0x000d1b3f: sub [rdi], cl; mov dh, 0x43; add [rax-0x7d], ecx; ret;
0x000d1c43: fiadd st, word ptr [rdx]; add [rax], al; lea rdx, [rip+0xb4f66]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000d1c44: add al, [rax]; add [rax-0x73], cl; adc eax, 0xb4f66; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000d1c45: add [rax], al; lea rdx, [rip+0xb4f66]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000d1c46: add [rax-0x73], cl; adc eax, 0xb4f66; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000d1c47: lea rdx, [rip+0xb4f66]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000d1c48: lea edx, [rip+0xb4f66]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000d1c49: adc eax, 0xb4f66; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000d1c4b: or r8, [r8]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000d1c4c: or eax, [rax]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000d1cc0: mov al, 0xe8; cmc; dec dword ptr [rax-0x77]; ret;
0x000d1cc3: cmc; dec dword ptr [rax-0x77]; ret;
0x000d1cc4: cmc; dec dword ptr [rax-0x77]; ret;
0x000d1e95: add [rax], eax; add [rcx-0x77], al; ret;
0x000d2115: cmp esi, [rdi+0x28]; lea rsi, [rip+0xb4b15]; movzx eax, al; movsxd rax, [rsi+rax*4]; add rax, rsi; jmp rax;
0x000d2117: sub [rax-0x73], cl; xor eax, 0xb4b15; movzx eax, al; movsxd rax, [rsi+rax*4]; add rax, rsi; jmp rax;
0x000d2118: lea rsi, [rip+0xb4b15]; movzx eax, al; movsxd rax, [rsi+rax*4]; add rax, rsi; jmp rax;
0x000d2119: lea esi, [rip+0xb4b15]; movzx eax, al; movsxd rax, [rsi+rax*4]; add rax, rsi; jmp rax;
0x000d211a: xor eax, 0xb4b15; movzx eax, al; movsxd rax, [rsi+rax*4]; add rax, rsi; jmp rax;
0x000d211b: adc eax, 0xf000b4b; mov dh, 0xc0; movsxd rax, [rsi+rax*4]; add rax, rsi; jmp rax;
0x000d211c: or rax, [r8]; movzx eax, al; movsxd rax, [rsi+rax*4]; add rax, rsi; jmp rax;
0x000d211d: or eax, [rax]; movzx eax, al; movsxd rax, [rsi+rax*4]; add rax, rsi; jmp rax;
0x000d211e: add [rdi], cl; mov dh, 0xc0; movsxd rax, [rsi+rax*4]; add rax, rsi; jmp rax;
0x000d211f: movzx eax, al; movsxd rax, [rsi+rax*4]; add rax, rsi; jmp rax;
0x000d2120: mov dh, 0xc0; movsxd rax, [rsi+rax*4]; add rax, rsi; jmp rax;
0x000d2122: movsxd rax, [rsi+rax*4]; add rax, rsi; jmp rax;
0x000d2123: movsxd eax, [rsi+rax*4]; add rax, rsi; jmp rax;
0x000d2124: add al, 0x86; add rax, rsi; jmp rax;
0x000d2126: add rax, rsi; jmp rax;
0x000d2127: add eax, esi; jmp rax;
0x000d2202: adc bh, [rcx]; ret 0x840f;
0x000d25ee: call qword ptr [rax+0x55b60f];
0x000d2608: ret 0xf46;
0x000d28bf: mov ah, 0x24; iretd;
0x000d28cb: add [rax], al; add [rax], al; add [rbp-0x7fbf6086], cl; call far fword ptr [rax];
0x000d28cd: add [rax], al; add [rbp-0x7fbf6086], cl; call far fword ptr [rax];
0x000d28cf: add [rbp-0x7fbf6086], cl; call far fword ptr [rax];
0x000d28ec: dec dword ptr [rcx-0x77]; fmul st, qword ptr [rdi]; mov dh, 0x53; add [rax-0x7d], ecx; ret;
0x000d28ef: fmul st, qword ptr [rdi]; mov dh, 0x53; add [rax-0x7d], ecx; ret;
0x000d28f1: mov dh, 0x53; add [rax-0x7d], ecx; ret;
0x000d2e33: add eax, 0x8948ea74; iretd;
0x000d2e65: ret 0x8301;
0x000d2e7b: xchg [rsi-0x4500000b], edx; add [rax+rax], eax; or byte ptr [rax+0xf], 0xa3; ret 0x830f;
0x000d2e81: add [rax+rax], eax; or byte ptr [rax+0xf], 0xa3; ret 0x830f;
0x000d2e82: add al, 0; or byte ptr [rax+0xf], 0xa3; ret 0x830f;
0x000d2e84: or byte ptr [rax+0xf], 0xa3; ret 0x830f;
0x000d2eea: ror byte ptr [rdi], 0x84; add [r8], r8d; add [rax-0x7d], cl; ret;
0x000d2eed: add [r8], r8d; add [rax-0x7d], cl; ret;
0x000d2f0e: call qword ptr [rax+0x74d28548];
0x000d334a: add [rcx+0x63], ecx; ret 0xb60f;
0x000d37b6: imul eax; pop rsp; sbb esi, ebp; call far fword ptr [rsi-0x75];
0x000d37b8: pop rsp; sbb esi, ebp; call far fword ptr [rsi-0x75];
0x000d37b9: sbb esi, ebp; call far fword ptr [rsi-0x75];
0x000d37ba: cmc; call far fword ptr [rsi-0x75];
0x000d37bb: call far fword ptr [rsi-0x75];
0x000d3913: push rdi; add al, 0x3b; push rsi; add al, 0x75; cmp [rax+0x63], ecx; ret 0x8d48;
0x000d3914: add al, 0x3b; push rsi; add al, 0x75; cmp [rax+0x63], ecx; ret 0x8d48;
0x000d3916: push rsi; add al, 0x75; cmp [rax+0x63], ecx; ret 0x8d48;
0x000d3917: add al, 0x75; cmp [rax+0x63], ecx; ret 0x8d48;
0x000d3919: cmp [rax+0x63], ecx; ret 0x8d48;
0x000d3947: or eax, [rbx-0x1c86fe16]; mov r9d, 1; mov eax, r9d; ret;
0x000d394a: add [rcx-0x1d], edi; mov r9d, 1; mov eax, r9d; ret;
0x000d394d: mov r9d, 1; mov eax, r9d; ret;
0x000d394e: mov ecx, 1; mov eax, r9d; ret;
0x000d394f: add [rax], eax; add [rax], al; mov eax, r9d; ret;
0x000d3950: add [rax], al; add [rcx+rcx*4-0x38], al; ret;
0x000d3951: add [rax], al; mov eax, r9d; ret;
0x000d3952: add [rcx+rcx*4-0x38], al; ret;
0x000d3957: nop [rax+rax]; xor r9d, r9d; mov eax, r9d; ret;
0x000d3958: nop [rax+rax]; xor r9d, r9d; mov eax, r9d; ret;
0x000d395a: test [rax], al; add [rax], al; add [rax], al; xor r9d, r9d; mov eax, r9d; ret;
0x000d395b: add [rax], al; add [rax], al; add [rbp+0x31], al; leave; mov eax, r9d; ret;
0x000d395c: add [rax], al; add [rax], al; xor r9d, r9d; mov eax, r9d; ret;
0x000d395d: add [rax], al; add [rbp+0x31], al; leave; mov eax, r9d; ret;
0x000d395e: add [rax], al; xor r9d, r9d; mov eax, r9d; ret;
0x000d395f: add [rbp+0x31], al; leave; mov eax, r9d; ret;
0x000d3960: xor r9d, r9d; mov eax, r9d; ret;
0x000d3961: xor ecx, ecx; mov eax, r9d; ret;
0x000d3962: leave; mov eax, r9d; ret;
0x000d399e: ret 0xd139;
0x000d39ad: adc al, [rcx+rcx*4-0x38]; ret;
0x000d39b7: add [rbp-0x1d14feb8], cl; nop [rax]; lea r9d, [rcx+1]; mov eax, r9d; ret;
0x000d39bd: nop [rax]; lea r9d, [rcx+1]; mov eax, r9d; ret;
0x000d39bf: add [rbp+rcx*4+0x49], al; add [rcx+rcx*4-0x38], eax; ret;
0x000d39c0: lea r9d, [rcx+1]; mov eax, r9d; ret;
0x000d39c1: lea ecx, [rcx+1]; mov eax, r9d; ret;
0x000d39c2: add [r9+rcx*4-0x38], rax; ret;
0x000d39c3: add [rcx+rcx*4-0x38], eax; ret;
0x000d3a0f: add [rax], al; add [rax+0x29755efa], al; mov byte ptr [rdi+8], 0x19; mov eax, 1; ret;
0x000d3a11: add [rax+0x29755efa], al; mov byte ptr [rdi+8], 0x19; mov eax, 1; ret;
0x000d3a16: sub esi, eax; or [r9], r11b; mov eax, 1; ret;
0x000d3a17: mov byte ptr [rdi+8], 0x19; mov eax, 1; ret;
0x000d3a18: or [r9], r11b; mov eax, 1; ret;
0x000d3a19: or [rcx], bl; mov eax, 1; ret;
0x000d3a1a: sbb [rax+1], edi; ret;
0x000d3a34: imul eax, esi, 0x47; or [rcx], al; mov eax, 1; ret;
0x000d3a35: mov byte ptr [rdi+8], 1; mov eax, 1; ret;
0x000d3a36: or [r9], r8b; mov eax, 1; ret;
0x000d3a37: or [rcx], al; mov eax, 1; ret;
0x000d3a38: add [rax+1], edi; ret;
0x000d3a41: cli; sub eax, 0x47c6f075; or [rsi], dl; mov eax, 1; ret;
0x000d3a42: sub eax, 0x47c6f075; or [rsi], dl; mov eax, 1; ret;
0x000d3a45: mov byte ptr [rdi+8], 0x16; mov eax, 1; ret;
0x000d3a46: or [r14], r10b; mov eax, 1; ret;
0x000d3a47: or [rsi], dl; mov eax, 1; ret;
0x000d3a4b: add [rax], al; add bl, al; nop; mov byte ptr [rdi+8], 2; xor eax, eax; ret;
0x000d3a4d: add bl, al; nop; mov byte ptr [rdi+8], 2; xor eax, eax; ret;
0x000d3a4f: nop; mov byte ptr [rdi+8], 2; xor eax, eax; ret;
0x000d3a50: mov byte ptr [rdi+8], 2; xor eax, eax; ret;
0x000d3a51: or [r10], r8b; xor eax, eax; ret;
0x000d3a52: or [rdx], al; xor eax, eax; ret;
0x000d3a7c: mov byte ptr [rdi+8], 1; mov eax, 1; mov byte ptr [rdi], 0x5b; ret;
0x000d3a7d: or [r9], r8b; mov eax, 1; mov byte ptr [rdi], 0x5b; ret;
0x000d3a7e: or [rcx], al; mov eax, 1; mov byte ptr [rdi], 0x5b; ret;
0x000d3a7f: add [rax+1], edi; mov byte ptr [rdi], 0x5b; ret;
0x000d3a80: mov eax, 1; mov byte ptr [rdi], 0x5b; ret;
0x000d3a81: add [rax], eax; add [rax], al; mov byte ptr [rdi], 0x5b; ret;
0x000d3a83: add [rax], al; mov byte ptr [rdi], 0x5b; ret;
0x000d3a85: mov byte ptr [rdi], 0x5b; ret;
0x000d3a89: nop [rax]; mov byte ptr [rdi+8], 0x15; mov eax, 1; ret;
0x000d3a8b: add byte ptr [rax], 0; add [rax], al; mov byte ptr [rdi+8], 0x15; mov eax, 1; ret;
0x000d3a8c: add [rax], al; add [rax], al; mov byte ptr [rdi+8], 0x15; mov eax, 1; ret;
0x000d3a8e: add [rax], al; mov byte ptr [rdi+8], 0x15; mov eax, 1; ret;
0x000d3a90: mov byte ptr [rdi+8], 0x15; mov eax, 1; ret;
0x000d3a9f: add [rcx-0x67b7c7ba], cl; movzx eax, byte ptr [r9+rax]; mov byte ptr [rdi+8], 1; mov [rdi], al; mov eax, 1; ret;
0x000d3aa1: cmp [rax-0x68], r9b; movzx eax, byte ptr [r9+rax]; mov byte ptr [rdi+8], 1; mov [rdi], al; mov eax, 1; ret;
0x000d3aa2: cmp [rax-0x68], cl; movzx eax, byte ptr [r9+rax]; mov byte ptr [rdi+8], 1; mov [rdi], al; mov eax, 1; ret;
0x000d3aa3: cdqe; movzx eax, byte ptr [r9+rax]; mov byte ptr [rdi+8], 1; mov [rdi], al; mov eax, 1; ret;
0x000d3aa4: cwde; movzx eax, byte ptr [r9+rax]; mov byte ptr [rdi+8], 1; mov [rdi], al; mov eax, 1; ret;
0x000d3aa5: movzx eax, byte ptr [r9+rax]; mov byte ptr [rdi+8], 1; mov [rdi], al; mov eax, 1; ret;
0x000d3aa6: movzx eax, byte ptr [rcx+rax]; mov byte ptr [rdi+8], 1; mov [rdi], al; mov eax, 1; ret;
0x000d3aa7: mov dh, 4; add esi, eax; or [r9], r8b; mov [rdi], al; mov eax, 1; ret;
0x000d3aa8: add al, 1; mov byte ptr [rdi+8], 1; mov [rdi], al; mov eax, 1; ret;
0x000d3aa9: add esi, eax; or [r9], r8b; mov [rdi], al; mov eax, 1; ret;
0x000d3aaa: mov byte ptr [rdi+8], 1; mov [rdi], al; mov eax, 1; ret;
0x000d3aab: or [r9], r8b; mov [rdi], al; mov eax, 1; ret;
0x000d3aac: or [rcx], al; mov [rdi], al; mov eax, 1; ret;
0x000d3aad: add [rax+0x1b807], ecx; add [rax], al; ret;
0x000d3aae: mov [rdi], al; mov eax, 1; ret;
0x000d3ab2: add [rax], al; add bl, al; nop [rax+rax]; mov byte ptr [rdi+8], 0x1a; mov eax, 2; ret;
0x000d3ab4: add bl, al; nop [rax+rax]; mov byte ptr [rdi+8], 0x1a; mov eax, 2; ret;
0x000d3ab6: nop [rax+rax]; mov byte ptr [rdi+8], 0x1a; mov eax, 2; ret;
0x000d3ab7: nop [rax+rax]; mov byte ptr [rdi+8], 0x1a; mov eax, 2; ret;
0x000d3ab8: nop [rax+rax]; mov byte ptr [rdi+8], 0x1a; mov eax, 2; ret;
0x000d3aba: test [rax], al; add [rax], al; add [rax], al; mov byte ptr [rdi+8], 0x1a; mov eax, 2; ret;
0x000d3abb: add [rax], al; add [rax], al; add dh, al; or [r10], r11b; mov eax, 2; ret;
0x000d3abc: add [rax], al; add [rax], al; mov byte ptr [rdi+8], 0x1a; mov eax, 2; ret;
0x000d3abd: add [rax], al; add dh, al; or [r10], r11b; mov eax, 2; ret;
0x000d3abe: add [rax], al; mov byte ptr [rdi+8], 0x1a; mov eax, 2; ret;
0x000d3abf: add dh, al; or [r10], r11b; mov eax, 2; ret;
0x000d3ac0: mov byte ptr [rdi+8], 0x1a; mov eax, 2; ret;
0x000d3ac1: or [r10], r11b; mov eax, 2; ret;
0x000d3ac2: or [rdx], bl; mov eax, 2; ret;
0x000d3ac3: sbb bh, [rax+2]; ret;
0x000d3ac6: add [rax], al; add bl, al; nop [rax+rax]; mov byte ptr [rdi+8], 0x1c; mov eax, 2; ret;
0x000d3ac8: add bl, al; nop [rax+rax]; mov byte ptr [rdi+8], 0x1c; mov eax, 2; ret;
0x000d3aca: nop [rax+rax]; mov byte ptr [rdi+8], 0x1c; mov eax, 2; ret;
0x000d3acb: nop [rax+rax]; mov byte ptr [rdi+8], 0x1c; mov eax, 2; ret;
0x000d3acd: add [rax], r8b; mov byte ptr [rdi+8], 0x1c; mov eax, 2; ret;
0x000d3ace: add [rax], al; mov byte ptr [rdi+8], 0x1c; mov eax, 2; ret;
0x000d3acf: add dh, al; or [r8+r15*4], r11b; add al, [rax]; add [rax], al; ret;
0x000d3ad0: mov byte ptr [rdi+8], 0x1c; mov eax, 2; ret;
0x000d3ad1: or [r8+r15*4], r11b; add al, [rax]; add [rax], al; ret;
0x000d3ad2: or [rax+rdi*4], bl; add al, [rax]; add [rax], al; ret;
0x000d3ad3: sbb al, 0xb8; add al, [rax]; add [rax], al; ret;
0x000d3adf: add [rbx-0x688bfb1f], al; mov byte ptr [rdi+8], 0x1e; mov eax, 2; ret;
0x000d3ae2: add al, 0x74; xchg edi, eax; mov byte ptr [rdi+8], 0x1e; mov eax, 2; ret;
0x000d3ae4: xchg edi, eax; mov byte ptr [rdi+8], 0x1e; mov eax, 2; ret;
0x000d3ae5: mov byte ptr [rdi+8], 0x1e; mov eax, 2; ret;
0x000d3ae6: or [r14], r11b; mov eax, 2; ret;
0x000d3ae7: or [rsi], bl; mov eax, 2; ret;
0x000d3b1e: add [rax], eax; add [rcx+0x63], cl; ror byte ptr [rcx+0x4ded31d1], 0x89; iretd;
0x000d3b20: add [rcx+0x63], cl; ror byte ptr [rcx+0x4ded31d1], 0x89; iretd;
0x000d3b23: ror byte ptr [rcx+0x4ded31d1], 0x89; iretd;
0x000d3bc1: mov rax, 0x5c415d5bffffffff; pop r13; pop r14; pop r15; ret;
0x000d3cee: pop r12; pop r13; neg eax; pop r14; pop r15; ret;
0x000d3cef: pop rsp; pop r13; neg eax; pop r14; pop r15; ret;
0x000d3cf0: pop r13; neg eax; pop r14; pop r15; ret;
0x000d3cf1: pop rbp; neg eax; pop r14; pop r15; ret;
0x000d3cf2: neg eax; pop r14; pop r15; ret;
0x000d3cf3: fadd st, dword ptr [rcx+0x5e]; pop r15; ret;
0x000d3d47: lea rax, [rdx+rax*4]; cmp [rax+4], esi; mov eax, 0xffffffff; cmovne r8d, eax; mov eax, r8d; ret;
0x000d3d48: lea eax, [rdx+rax*4]; cmp [rax+4], esi; mov eax, 0xffffffff; cmovne r8d, eax; mov eax, r8d; ret;
0x000d3d49: add al, 0x82; cmp [rax+4], esi; mov eax, 0xffffffff; cmovne r8d, eax; mov eax, r8d; ret;
0x000d3d4b: cmp [rax+4], esi; mov eax, 0xffffffff; cmovne r8d, eax; mov eax, r8d; ret;
0x000d3d4e: mov eax, 0xffffffff; cmovne r8d, eax; mov eax, r8d; ret;
0x000d3d53: cmovne r8d, eax; mov eax, r8d; ret;
0x000d3d54: cmovne eax, eax; mov eax, r8d; ret;
0x000d3dc0: sbb [r8+0x7500637b], al; adc [rcx-0x3fcecb95], cl; pop rbx; pop rbp; pop r12; ret;
0x000d3dc1: sbb [rax+0x7500637b], al; adc [rcx-0x3fcecb95], cl; pop rbx; pop rbp; pop r12; ret;
0x000d3dc7: adc [rcx-0x3fcecb95], cl; pop rbx; pop rbp; pop r12; ret;
0x000d3dc8: mov [rbx+0x34], ebp; xor eax, eax; pop rbx; pop rbp; pop r12; ret;
0x000d3dc9: imul esi, [rcx+rsi], 0xffffffc0; pop rbx; pop rbp; pop r12; ret;
0x000d3dca: xor al, 0x31; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret;
0x000d3deb: or r11b, bpl; fst dword ptr [rax+0xcb85b], st; add [rax], al; pop rbp; pop r12; ret;
0x000d3dec: or bl, ch; fst dword ptr [rax+0xcb85b], st; add [rax], al; pop rbp; pop r12; ret;
0x000d3dee: fst dword ptr [rax+0xcb85b], st; add [rax], al; pop rbp; pop r12; ret;
0x000d3def: nop; pop rbx; mov eax, 0xc; pop rbp; pop r12; ret;
0x000d3df0: pop rbx; mov eax, 0xc; pop rbp; pop r12; ret;
0x000d3df1: mov eax, 0xc; pop rbp; pop r12; ret;
0x000d3df2: or al, 0; add [rax], al; pop rbp; pop r12; ret;
0x000d3e19: add [rcx+0x2c890453], ecx; xchg [rax+1], edi; add rsp, 8; pop rbx; pop rbp; ret;
0x000d3e1d: mov [rdi+rax*4], ebp; mov eax, 1; add rsp, 8; pop rbx; pop rbp; ret;
0x000d3e1e: sub al, 0x87; mov eax, 1; add rsp, 8; pop rbx; pop rbp; ret;
0x000d3e1f: xchg [rax+1], edi; add rsp, 8; pop rbx; pop rbp; ret;
0x000d3e47: shl byte ptr [rsi+rcx+0x48], 0x89; or [r8+0x63], cl; add al, 0xeb; ret;
0x000d3e4c: or [r8+0x63], cl; add al, 0xeb; ret;
0x000d3e4d: or [rax+0x63], cl; add al, 0xeb; ret;
0x000d3ee6: add rsp, 0x10; mov rax, r8; pop rbx; pop r12; pop r13; ret;
0x000d3ee7: add esp, 0x10; mov rax, r8; pop rbx; pop r12; pop r13; ret;
0x000d3ee9: adc [rcx+rcx*4-0x40], cl; pop rbx; pop r12; pop r13; ret;
0x000d3eea: mov rax, r8; pop rbx; pop r12; pop r13; ret;
0x000d3eeb: mov eax, eax; pop rbx; pop r12; pop r13; ret;
0x000d3eec: rcr byte ptr [rbx+0x41], 0x5c; pop r13; ret;
0x000d3eed: pop rbx; pop r12; pop r13; ret;
0x000d3f04: adc al, 0xf5; dec dword ptr [rax-0x77]; ret 0x8548;
0x000d3f05: cmc; dec dword ptr [rax-0x77]; ret 0x8548;
0x000d4000: dec dword ptr [rax-0x77]; ret 0xf66;
0x000d41d6: ret 0xc773;
0x000d4345: or al, 0x89; ret 0x8348;
0x000d4755: rol dword ptr [rdx], 1; add [rbx+0x39082454], cl; ret 0x850f;
0x000d4757: add [rbx+0x39082454], cl; ret 0x850f;
0x000d486c: div byte ptr [rcx]; ror byte ptr [rcx+3], 0x34; and al, 0x89; iretd;
0x000d486e: ror byte ptr [rcx+3], 0x34; and al, 0x89; iretd;
0x000d4a39: add [rax+0x39], ecx; ret 0xe175;
0x000d4a3c: ret 0xe175;
0x000d4b43: add [rax], al; add [rbx-0x157cfe15], al; add [rax+0x63], ecx; ret;
0x000d4b45: add [rbx-0x157cfe15], al; add [rax+0x63], ecx; ret;
0x000d4b48: add [rbx+0x634801ea], eax; ret;
0x000d4b4b: add [rax+0x63], ecx; ret;
0x000d4b7f: add [rbp-0x7cdf872e], al; ret 0x4801;
0x000d4d6f: add [rcx], dh; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; pop r12; pop r13; ret;
0x000d4d71: ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; pop r12; pop r13; ret;
0x000d4d92: add al, 0x8b; push rbp; add al, 1; ret 0x341;
0x000d4d94: push rbp; add al, 1; ret 0x341;
0x000d4d95: add al, 1; ret 0x341;
0x000d4d97: ret 0x341;
0x000d4df1: fldpi; int3; nop [rax]; ret;
0x000d4df3: int3; nop [rax]; ret;
0x000d4ebe: add [rcx+0x39], eax; shl dword ptr [rbp-0x34], 0x44; mov [rdi+0x2c], ecx; mov [rdi+0x30], r9d; ret;
0x000d4ec1: shl dword ptr [rbp-0x34], 0x44; mov [rdi+0x2c], ecx; mov [rdi+0x30], r9d; ret;
0x000d4ec3: int3; mov [rdi+0x2c], r9d; mov [rdi+0x30], r9d; ret;
0x000d4ed5: shl dword ptr [rsi+0x2e], cl; nop [rax+rax]; mov r9d, eax; mov [rdi+0x2c], r9d; mov [rdi+0x30], r9d; ret;
0x000d4ed6: nop [rax+rax]; mov r9d, eax; mov [rdi+0x2c], r9d; mov [rdi+0x30], r9d; ret;
0x000d4ed7: nop [rax+rax]; mov r9d, eax; mov [rdi+0x2c], r9d; mov [rdi+0x30], r9d; ret;
0x000d4ed8: nop [rax+rax]; mov r9d, eax; mov [rdi+0x2c], r9d; mov [rdi+0x30], r9d; ret;
0x000d4edb: add [rax], al; add [rax], al; add [rcx-0x77], al; rol dword ptr [rcx+rcx*4+0x4f], 0x2c; mov [rdi+0x30], r9d; ret;
0x000d4edc: add [rax], al; add [rax], al; mov r9d, eax; mov [rdi+0x2c], r9d; mov [rdi+0x30], r9d; ret;
0x000d4edd: add [rax], al; add [rcx-0x77], al; rol dword ptr [rcx+rcx*4+0x4f], 0x2c; mov [rdi+0x30], r9d; ret;
0x000d4ede: add [rax], al; mov r9d, eax; mov [rdi+0x2c], r9d; mov [rdi+0x30], r9d; ret;
0x000d4edf: add [rcx-0x77], al; rol dword ptr [rcx+rcx*4+0x4f], 0x2c; mov [rdi+0x30], r9d; ret;
0x000d4ee0: mov r9d, eax; mov [rdi+0x2c], r9d; mov [rdi+0x30], r9d; ret;
0x000d4ee1: mov ecx, eax; mov [rdi+0x2c], r9d; mov [rdi+0x30], r9d; ret;
0x000d4ee2: rol dword ptr [rcx+rcx*4+0x4f], 0x2c; mov [rdi+0x30], r9d; ret;
0x000d4ee3: mov [rdi+0x2c], r9d; mov [rdi+0x30], r9d; ret;
0x000d4ee4: mov [rdi+0x2c], ecx; mov [rdi+0x30], r9d; ret;
0x000d4ee6: sub al, 0x44; mov [rdi+0x30], ecx; ret;
0x000d4ee7: mov [rdi+0x30], r9d; ret;
0x000d4ee8: mov [rdi+0x30], ecx; ret;
0x000d4f38: rol byte ptr [rbx+0x3d740afb], 0x48; add esp, 8; pop rbx; pop rbp; ret;
0x000d4f3a: sti; or dh, [rbp+rdi+0x48]; add esp, 8; pop rbx; pop rbp; ret;
0x000d4f3b: or dh, [rbp+rdi+0x48]; add esp, 8; pop rbx; pop rbp; ret;
0x000d4f3d: cmp eax, 0x8c48348; pop rbx; pop rbp; ret;
0x000d4f69: ret 0x1b8;
0x000d4f81: setne al; add rsp, 8; add eax, eax; pop rbx; pop rbp; ret;
0x000d4f84: add rsp, 8; add eax, eax; pop rbx; pop rbp; ret;
0x000d4f85: add esp, 8; add eax, eax; pop rbx; pop rbp; ret;
0x000d4f88: add eax, eax; pop rbx; pop rbp; ret;
0x000d4f8d: nop [rax]; mov eax, [rbp+0x4c]; add rsp, 8; pop rbx; pop rbp; ret;
0x000d4f90: mov eax, [rbp+0x4c]; add rsp, 8; pop rbx; pop rbp; ret;
0x000d5023: add [rax], al; add bh, dh; ret;
0x000d5044: add esi, esi; ret;
0x000d5065: add edi, [rax+1]; and edx, 1; and ecx, 0x80; cmovne eax, edx; pop rbx; ret;
0x000d5066: mov eax, 1; and edx, 1; and ecx, 0x80; cmovne eax, edx; pop rbx; ret;
0x000d5068: add [rax], al; add [rbx-0x1e7efe1e], al; add byte ptr [rax], 0; add [rdi], cl; ret 0xc35b;
0x000d5069: add [rax], al; and edx, 1; and ecx, 0x80; cmovne eax, edx; pop rbx; ret;
0x000d506a: add [rbx-0x1e7efe1e], al; add byte ptr [rax], 0; add [rdi], cl; ret 0xc35b;
0x000d506b: and edx, 1; and ecx, 0x80; cmovne eax, edx; pop rbx; ret;
0x000d506d: add [rcx+0x80e1], eax; add [rdi], cl; ret 0xc35b;
0x000d506e: and ecx, 0x80; cmovne eax, edx; pop rbx; ret;
0x000d5070: add byte ptr [rax], 0; add [rdi], cl; ret 0xc35b;
0x000d5071: add [rax], al; add [rdi], cl; ret 0xc35b;
0x000d5072: add [rax], al; cmovne eax, edx; pop rbx; ret;
0x000d5073: add [rdi], cl; ret 0xc35b;
0x000d5074: cmovne eax, edx; pop rbx; ret;
0x000d5076: ret 0xc35b;
0x000d50a4: test [rdi+rdi*8-1], dh; inc ebx; nop [rax+rax]; ret;
0x000d50a8: inc ebx; nop [rax+rax]; ret;
0x000d50d1: or [rbx+rax*4+0x5b], dh; ret;
0x000d50d3: sbb dword ptr [rbx-0x3d], 0x66; nop [rax+rax]; ret;
0x000d50fa: inc ebx; xor eax, eax; pop rbx; ret;
0x000d5143: sub al, ch; iretd;
0x000d514e: mov byte ptr [rcx], 0xf5; jmp qword ptr [rsi+0x66];
0x000d514f: add ebp, esi; jmp qword ptr [rsi+0x66];
0x000d5150: cmc; jmp qword ptr [rsi+0x66];
0x000d51af: cmp [rcx-0x6bf0f7b0], cl; ret 0x8040;
0x000d51b1: push rax; or [rdi], cl; xchg esp, eax; ret 0x8040;
0x000d51b2: or [rdi], cl; xchg esp, eax; ret 0x8040;
0x000d51b4: xchg esp, eax; ret 0x8040;
0x000d51b5: ret 0x8040;
0x000d51bd: mov ebx, 0xa4; add [rdi], ecx; lahf; ret 0xd189;
0x000d51c0: add [rax], al; add [rdi], ecx; lahf; ret 0xd189;
0x000d51c2: add [rdi], ecx; lahf; ret 0xd189;
0x000d51c4: lahf; ret 0xd189;
0x000d537f: or [rcx+0x40000cb], al; add [rcx], cl; ret;
0x000d5385: add [rcx], cl; ret;
0x000d5451: ret 0x428b;
0x000d545e: ror dword ptr [rax-0x75], 1; cmp cl, [rax-0x7d]; ret;
0x000d5461: cmp cl, [rax-0x7d]; ret;
0x000d54df: hlt; dec dword ptr [rax-0x7d]; ret;
0x000d55ac: std; hlt; call qword ptr [rax-0x17c574b8];
0x000d55ad: hlt; call qword ptr [rax-0x17c574b8];
0x000d55ae: call qword ptr [rax-0x17c574b8];
0x000d5671: mov dword ptr [r14+0x94], 0; pop rbp; pop r12; pop r13; pop r14; ret;
0x000d5672: mov dword ptr [rsi+0x94], 0; pop rbp; pop r12; pop r13; pop r14; ret;
0x000d56e6: outsd dx, [rsi]; adc [r11+0x5d5b0443], cl; movups [r12], xmm0; pop r12; ret;
0x000d56e7: adc [r11+0x5d5b0443], cl; movups [r12], xmm0; pop r12; ret;
0x000d56e8: adc [rbx+0x5d5b0443], cl; movups [r12], xmm0; pop r12; ret;
0x000d56e9: mov eax, [rbx+4]; pop rbx; pop rbp; movups [r12], xmm0; pop r12; ret;
0x000d56eb: add al, 0x5b; pop rbp; movups [r12], xmm0; pop r12; ret;
0x000d56ec: pop rbx; pop rbp; movups [r12], xmm0; pop r12; ret;
0x000d56ed: pop rbp; movups [r12], xmm0; pop r12; ret;
0x000d56ee: movups [r12], xmm0; pop r12; ret;
0x000d56ef: movups [rsp], xmm0; pop r12; ret;
0x000d56f0: adc [rsp], eax; pop r12; ret;
0x000d56f1: add al, 0x24; pop r12; ret;
0x000d56f2: and al, 0x41; pop rsp; ret;
0x000d592c: fucomi st, st(1); ret 0xfffe;
0x000d6085: or [rax-0x77], cl; ret 0xc148;
0x000d61cb: add [rax], al; add [rax], al; add [rcx-0x7d], cl; ret;
0x000d61cd: add [rax], al; add [rcx-0x7d], cl; ret;
0x000d61cf: add [rcx-0x7d], cl; ret;
0x000d631b: xor al, [rbx-0x3a]; adc eax, 0xc0830100; add [rax-0x7d], ecx; ret 0x4801;
0x000d631f: adc eax, 0xc0830100; add [rax-0x7d], ecx; ret 0x4801;
0x000d6321: add [rbx-0x7cb7fe40], eax; ret 0x4801;
0x000d6324: add [rax-0x7d], ecx; ret 0x4801;
0x000d6524: add [rcx-0x7bf0b3bd], cl; ret 0;
0x000d6964: sbb [rcx-0x77], cl; ret 0x14d;
0x000d6a8f: ret 0x4d01;
0x000d6af2: ret 0x1ba;
0x000d6b05: adc dh, [rcx]; rol byte ptr [rax+0xf00657b], cl; xchg ebp, eax; ret 0xd201;
0x000d6b07: rol byte ptr [rax+0xf00657b], cl; xchg ebp, eax; ret 0xd201;
0x000d6b0a: add gs:[rdi], cl; xchg ebp, eax; ret 0xd201;
0x000d6b0b: add [rdi], cl; xchg ebp, eax; ret 0xd201;
0x000d6b0d: xchg ebp, eax; ret 0xd201;
0x000d6b0e: ret 0xd201;
0x000d6bfe: add [rcx+0x39], eax; ret 0xec7f;
0x000d6c01: ret 0xec7f;
0x000d6ceb: mov cl, 0xe4; hlt; push qword ptr [rcx]; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret;
0x000d6cec: in al, 0xf4; push qword ptr [rcx]; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret;
0x000d6ced: hlt; push qword ptr [rcx]; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret;
0x000d6d03: shl byte ptr [rcx], 0xc0; movups [rdi], xmm0; pop rbx; pop rbp; pop r12; ret;
0x000d6d04: xor eax, eax; movups [rdi], xmm0; pop rbx; pop rbp; pop r12; ret;
0x000d6d06: movups [rdi], xmm0; pop rbx; pop rbp; pop r12; ret;
0x000d6d07: adc [rdi], eax; pop rbx; pop rbp; pop r12; ret;
0x000d6da7: ret 0x4001;
0x000d6dfb: add rsp, 0x18; pop rbx; pop rbp; pop r13; pop r14; ret;
0x000d6dfc: add esp, 0x18; pop rbx; pop rbp; pop r13; pop r14; ret;
0x000d6dfe: sbb [rbx+0x5d], bl; pop r13; pop r14; ret;
0x000d6e34: sbb [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rbp; pop r14; ret;
0x000d6e35: xor eax, eax; pop rbx; pop rbp; pop r13; pop r14; ret;
0x000d6e36: rcr byte ptr [rbx+0x5d], 0x41; pop rbp; pop r14; ret;
0x000d6e37: pop rbx; pop rbp; pop r13; pop r14; ret;
0x000d6e38: pop rbp; pop r13; pop r14; ret;
0x000d6f74: xchg [rdi+0x48000000], edx; lea edx, [rip+0xafdc0]; movzx ebp, bpl; movsxd rax, [rdx+rbp*4]; add rax, rdx; jmp rax;
0x000d6f77: add [rax], al; lea rdx, [rip+0xafdc0]; movzx ebp, bpl; movsxd rax, [rdx+rbp*4]; add rax, rdx; jmp rax;
0x000d6f78: add [rax-0x73], cl; adc eax, 0xafdc0; movzx ebp, bpl; movsxd rax, [rdx+rbp*4]; add rax, rdx; jmp rax;
0x000d6f79: lea rdx, [rip+0xafdc0]; movzx ebp, bpl; movsxd rax, [rdx+rbp*4]; add rax, rdx; jmp rax;
0x000d6f7a: lea edx, [rip+0xafdc0]; movzx ebp, bpl; movsxd rax, [rdx+rbp*4]; add rax, rdx; jmp rax;
0x000d6f7b: adc eax, 0xafdc0; movzx ebp, bpl; movsxd rax, [rdx+rbp*4]; add rax, rdx; jmp rax;
0x000d6f7c: sar ch, 0xa; add [rax+0xf], al; mov dh, 0xed; movsxd rax, [rdx+rbp*4]; add rax, rdx; jmp rax;
0x000d6f7d: std; or al, [rax]; movzx ebp, bpl; movsxd rax, [rdx+rbp*4]; add rax, rdx; jmp rax;
0x000d6f7e: or al, [rax]; movzx ebp, bpl; movsxd rax, [rdx+rbp*4]; add rax, rdx; jmp rax;
0x000d6f7f: add [rax+0xf], al; mov dh, 0xed; movsxd rax, [rdx+rbp*4]; add rax, rdx; jmp rax;
0x000d6f80: movzx ebp, bpl; movsxd rax, [rdx+rbp*4]; add rax, rdx; jmp rax;
0x000d6f81: movzx ebp, ch; movsxd rax, [rdx+rbp*4]; add rax, rdx; jmp rax;
0x000d6f82: mov dh, 0xed; movsxd rax, [rdx+rbp*4]; add rax, rdx; jmp rax;
0x000d6f83: in eax, dx; movsxd rax, [rdx+rbp*4]; add rax, rdx; jmp rax;
0x000d6f84: movsxd rax, [rdx+rbp*4]; add rax, rdx; jmp rax;
0x000d6f85: movsxd eax, [rdx+rbp*4]; add rax, rdx; jmp rax;
0x000d6f86: add al, 0xaa; add rax, rdx; jmp rax;
0x000d6f87: stosb [rdi]; add rax, rdx; jmp rax;
0x000d6fe1: and dh, [rdi+0x2c]; lea rcx, [rip+0xafe2d]; movzx ebp, bpl; movsxd rax, [rcx+rbp*4]; add rax, rcx; jmp rax;
0x000d6fe3: sub al, 0x48; lea ecx, [rip+0xafe2d]; movzx ebp, bpl; movsxd rax, [rcx+rbp*4]; add rax, rcx; jmp rax;
0x000d6fe4: lea rcx, [rip+0xafe2d]; movzx ebp, bpl; movsxd rax, [rcx+rbp*4]; add rax, rcx; jmp rax;
0x000d6fe5: lea ecx, [rip+0xafe2d]; movzx ebp, bpl; movsxd rax, [rcx+rbp*4]; add rax, rcx; jmp rax;
0x000d6fe6: or eax, 0xafe2d; movzx ebp, bpl; movsxd rax, [rcx+rbp*4]; add rax, rcx; jmp rax;
0x000d6fe7: sub eax, 0x40000afe; movzx ebp, ch; movsxd rax, [rcx+rbp*4]; add rax, rcx; jmp rax;
0x000d6fe8: dec byte ptr [rdx]; add [rax+0xf], al; mov dh, 0xed; movsxd rax, [rcx+rbp*4]; add rax, rcx; jmp rax;
0x000d6fe9: or al, [rax]; movzx ebp, bpl; movsxd rax, [rcx+rbp*4]; add rax, rcx; jmp rax;
0x000d6fea: add [rax+0xf], al; mov dh, 0xed; movsxd rax, [rcx+rbp*4]; add rax, rcx; jmp rax;
0x000d6feb: movzx ebp, bpl; movsxd rax, [rcx+rbp*4]; add rax, rcx; jmp rax;
0x000d6fec: movzx ebp, ch; movsxd rax, [rcx+rbp*4]; add rax, rcx; jmp rax;
0x000d6fed: mov dh, 0xed; movsxd rax, [rcx+rbp*4]; add rax, rcx; jmp rax;
0x000d6fee: in eax, dx; movsxd rax, [rcx+rbp*4]; add rax, rcx; jmp rax;
0x000d6fef: movsxd rax, [rcx+rbp*4]; add rax, rcx; jmp rax;
0x000d6ff0: movsxd eax, [rcx+rbp*4]; add rax, rcx; jmp rax;
0x000d6ff1: add al, 0xa9; add rax, rcx; jmp rax;
0x000d70d3: lea rdx, [rip+0xafdca]; movzx r14d, r14b; movsxd rax, [rdx+r14*4]; add rax, rdx; jmp rax;
0x000d70d4: lea edx, [rip+0xafdca]; movzx r14d, r14b; movsxd rax, [rdx+r14*4]; add rax, rdx; jmp rax;
0x000d70d5: adc eax, 0xafdca; movzx r14d, r14b; movsxd rax, [rdx+r14*4]; add rax, rdx; jmp rax;
0x000d70d7: std; or al, [rax]; movzx r14d, r14b; movsxd rax, [rdx+r14*4]; add rax, rdx; jmp rax;
0x000d70d8: or al, [rax]; movzx r14d, r14b; movsxd rax, [rdx+r14*4]; add rax, rdx; jmp rax;
0x000d70d9: add [rbp+0xf], al; mov dh, 0xf6; movsxd rax, [rdx+r14*4]; add rax, rdx; jmp rax;
0x000d70da: movzx r14d, r14b; movsxd rax, [rdx+r14*4]; add rax, rdx; jmp rax;
0x000d70db: movzx esi, dh; movsxd rax, [rdx+r14*4]; add rax, rdx; jmp rax;
0x000d70dc: mov dh, 0xf6; movsxd rax, [rdx+r14*4]; add rax, rdx; jmp rax;
0x000d70dd: test byte ptr [rdx+0x63], 4; mov dl, 0x48; add eax, edx; jmp rax;
0x000d70de: movsxd rax, [rdx+r14*4]; add rax, rdx; jmp rax;
0x000d70df: movsxd eax, [rdx+rsi*4]; add rax, rdx; jmp rax;
0x000d70e0: add al, 0xb2; add rax, rdx; jmp rax;
0x000d70e1: mov dl, 0x48; add eax, edx; jmp rax;
0x000d7638: cmovno edi, [rsi+rdi*8-0x14000001]; iretd;
0x000d76d6: add cl, [rax-0x75]; cmp [rax-0x75], ecx; adc [r9-0x77], r8b; ret 0x8d4c;
0x000d76d9: cmp [rax-0x75], ecx; adc [r9-0x77], r8b; ret 0x8d4c;
0x000d76dc: adc [r9-0x77], r8b; ret 0x8d4c;
0x000d76dd: adc [rcx-0x77], al; ret 0x8d4c;
0x000d76e0: ret 0x8d4c;
0x000d7712: div byte ptr [rsi-0xa]; ret 0x7404;
0x000d773a: sbb eax, 0x8c48348; mov eax, r8d; pop rbx; pop rbp; ret;
0x000d7761: add rsp, 8; xor r8d, r8d; mov eax, r8d; pop rbx; pop rbp; ret;
0x000d7762: add esp, 8; xor r8d, r8d; mov eax, r8d; pop rbx; pop rbp; ret;
0x000d7764: or [rbp+0x31], al; rol byte ptr [rcx+rcx*4-0x40], 0x5b; pop rbp; ret;
0x000d7765: xor r8d, r8d; mov eax, r8d; pop rbx; pop rbp; ret;
0x000d7766: xor eax, eax; mov eax, r8d; pop rbx; pop rbp; ret;
0x000d7767: rol byte ptr [rcx+rcx*4-0x40], 0x5b; pop rbp; ret;
0x000d7bae: rol byte ptr [rcx+0xf], cl; mov dh, 0x14; adc al, 0xf6; ret 0x7580;
0x000d7bb1: mov dh, 0x14; adc al, 0xf6; ret 0x7580;
0x000d7bb3: adc al, 0xf6; ret 0x7580;
0x000d7bb5: ret 0x7580;
0x000d7c17: cmp [rdi], r9b; mov dh, 0x14; sub ch, cl; iretd;
0x000d7c18: cmp [rdi], cl; mov dh, 0x14; sub ch, cl; iretd;
0x000d7c1a: mov dh, 0x14; sub ch, cl; iretd;
0x000d7c1c: sub ch, cl; iretd;
0x000d7c27: ret 0xa3e8;
0x000d7ce6: or [r9], dil; ret;
0x000d7ce7: or [rcx], bh; ret;
0x000d7cf7: in eax, dx; add [rax], al; add [rcx], dh; idiv byte ptr [rcx]; ret;
0x000d7cf8: add [rax], al; add [rcx], dh; idiv byte ptr [rcx]; ret;
0x000d7cfa: add [rcx], dh; idiv byte ptr [rcx]; ret;
0x000d7cfc: idiv byte ptr [rcx]; ret;
0x000d7d2a: xchg esp, eax; ret 0xcd39;
0x000d7d2b: ret 0xcd39;
0x000d7f62: rol byte ptr [rsp+rax*2], 3; xor cl, [rax-0x77]; ret 0x3948;
0x000d7f66: xor cl, [rax-0x77]; ret 0x3948;
0x000d7f96: pop rsp; ret 0xeb08;
0x000d7f97: ret 0xeb08;
0x000d802a: or [rbx+rcx*4+4], cl; and al, 0x85; rol byte ptr [rbx+rcx*4+0x4c], 0x24; sbb [rcx-0x77], al; ret;
0x000d802e: and al, 0x85; rol byte ptr [rbx+rcx*4+0x4c], 0x24; sbb [rcx-0x77], al; ret;
0x000d8030: rol byte ptr [rbx+rcx*4+0x4c], 0x24; sbb [rcx-0x77], al; ret;
0x000d8035: sbb [rcx-0x77], al; ret;
0x000d8144: xor eax, 0x24448b41; or al, 0x39; ret;
0x000d8155: or al, 0x39; ret;
0x000d82bb: add [rax], al; add [rax], al; add [rax-0x7d], cl; rol byte ptr [rsp+rax*2], 3; sub cl, [rax-0x77]; ret 0x3948;
0x000d82bd: add [rax], al; add [rax-0x7d], cl; rol byte ptr [rsp+rax*2], 3; sub cl, [rax-0x77]; ret 0x3948;
0x000d82bf: add [rax-0x7d], cl; rol byte ptr [rsp+rax*2], 3; sub cl, [rax-0x77]; ret 0x3948;
0x000d82c2: rol byte ptr [rsp+rax*2], 3; sub cl, [rax-0x77]; ret 0x3948;
0x000d82c6: sub cl, [rax-0x77]; ret 0x3948;
0x000d82e5: cmp [rbx+rcx*4+0x50], ecx; or [rbp-0x72b200be], cl; pop rsp; ret 0x6608;
0x000d82e8: push rax; or [rbp-0x72b200be], cl; pop rsp; ret 0x6608;
0x000d82e9: or [rbp-0x72b200be], cl; pop rsp; ret 0x6608;
0x000d82ec: dec dword ptr [rbp-0x73]; pop rsp; ret 0x6608;
0x000d82ef: pop rsp; ret 0x6608;
0x000d82f0: ret 0x6608;
0x000d8311: test [rdi], edx; add [rax], eax; add [rcx-0x7d], cl; ret 0x4d08;
0x000d8313: add [rax], eax; add [rcx-0x7d], cl; ret 0x4d08;
0x000d8315: add [rcx-0x7d], cl; ret 0x4d08;
0x000d8318: ret 0x4d08;
0x000d8511: sub ecx, [rax-0x7d]; ret;
0x000d86df: add [rcx-0x7d], cl; ret 0x4501;
0x000d87d8: add al, [rax]; add [rax-0x75], cl; adc [rbx-0x72bed3ae], cl; add [rcx], edi; ret 0x8e0f;
0x000d87da: add [rax-0x75], cl; adc [rbx-0x72bed3ae], cl; add [rcx], edi; ret 0x8e0f;
0x000d87de: adc [rbx-0x72bed3ae], cl; add [rcx], edi; ret 0x8e0f;
0x000d87e5: add [rcx], edi; ret 0x8e0f;
0x000d87e7: ret 0x8e0f;
0x000d8882: ror dword ptr [rax+0x29], cl; ret 0x634d;
0x000d8885: ret 0x634d;
0x000d88fd: ret 0x90eb;
0x000d8c3f: adc dword ptr [rsi+0x48fffffe], 0xffffff83; rol byte ptr [rax+rcx*2], 0x39; ret 0xe375;
0x000d8c43: dec dword ptr [rax-0x7d]; rol byte ptr [rax+rcx*2], 0x39; ret 0xe375;
0x000d8c46: rol byte ptr [rax+rcx*2], 0x39; ret 0xe375;
0x000d8c4a: ret 0xe375;
0x000d8c8e: test byte ptr [rcx-0x17f7dbb4], 0xd8; mov bh, 0xf5; dec dword ptr [rbx-0x76f7dbb4]; ret 0x6348;
0x000d8c95: mov bh, 0xf5; dec dword ptr [rbx-0x76f7dbb4]; ret 0x6348;
0x000d8c96: cmc; dec dword ptr [rbx-0x76f7dbb4]; ret 0x6348;
0x000d8c97: dec dword ptr [rbx-0x76f7dbb4]; ret 0x6348;
0x000d8d2b: add [rax+0x29], ecx; ret 0xb60f;
0x000d8da4: ret 0x88eb;
0x000d8e63: test ch, bh; add al, [rax]; add [rcx+0x39], cl; ret 0xf74;
0x000d8e64: std; add al, [rax]; add [rcx+0x39], cl; ret 0xf74;
0x000d8e65: add al, [rax]; add [rcx+0x39], cl; ret 0xf74;
0x000d8e67: add [rcx+0x39], cl; ret 0xf74;
0x000d8e6a: ret 0xf74;
0x000d8e8c: add ecx, [rax+0x29]; ret 0x14c;
0x000d8f0c: ret 0x4101;
0x000d8fcb: ret 0xe681;
0x000d9071: ret 0x428d;
0x000d918e: mov eax, 1; add dword ptr [rdi+4], 1; pop rbx; pop rbp; pop r12; ret;
0x000d9190: add [rax], al; add [rbx+0x5b010447], al; pop rbp; pop r12; ret;
0x000d9191: add [rax], al; add dword ptr [rdi+4], 1; pop rbx; pop rbp; pop r12; ret;
0x000d9192: add [rbx+0x5b010447], al; pop rbp; pop r12; ret;
0x000d9193: add dword ptr [rdi+4], 1; pop rbx; pop rbp; pop r12; ret;
0x000d9195: add al, 1; pop rbx; pop rbp; pop r12; ret;
0x000d9196: add [rbx+0x5d], ebx; pop r12; ret;
0x000d91bf: test [rax+rax+0x28890000], al; mov eax, 1; pop rbx; pop rbp; pop r12; ret;
0x000d91c3: add [rcx+0x1b828], cl; add [rax], al; pop rbx; pop rbp; pop r12; ret;
0x000d91c4: mov [rax], ebp; mov eax, 1; pop rbx; pop rbp; pop r12; ret;
0x000d91c5: sub [rax+1], bh; pop rbx; pop rbp; pop r12; ret;
0x000d9305: inc dword ptr [rbp+0x31ac74c0]; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; pop r13; pop r14; ret;
0x000d9356: mov eax, 0xc; pop rbp; pop r12; pop r13; pop r14; ret;
0x000d9a46: adc [rcx+1], cl; ret 0x8b49;
0x000d9b14: fisttp word ptr [rbx-0x74f3dbbc], st; pop rbp; or al, 1; ret;
0x000d9b18: or al, 0x8b; pop rbp; or al, 1; ret;
0x000d9b1a: pop rbp; or al, 1; ret;
0x000d9b1b: or al, 1; ret;
0x000d9b3f: sub eax, 0x89ffff9e; ret;
0x000d9b9b: out 0x89, eax; ret;
0x000d9e41: add [rax], eax; add [rax-0x7d], cl; ret;
0x000d9eaa: ret 0x5b7e;
0x000da4ae: call qword ptr [rax-0x162776b8];
0x000da7ea: test byte ptr [rax-0x3f], 0xe6; add ebp, eax; test al, 0xf4; dec dword ptr [rax-0x7b]; ror byte ptr [rdi], 0x84; ret;
0x000da7ee: add ebp, eax; test al, 0xf4; dec dword ptr [rax-0x7b]; ror byte ptr [rdi], 0x84; ret;
0x000da7f1: test al, 0xf4; dec dword ptr [rax-0x7b]; ror byte ptr [rdi], 0x84; ret;
0x000da7f2: hlt; dec dword ptr [rax-0x7b]; ror byte ptr [rdi], 0x84; ret;
0x000da7f3: dec dword ptr [rax-0x7b]; ror byte ptr [rdi], 0x84; ret;
0x000da87a: add [rcx], al; ret 0xc083;
0x000da8a0: mov eax, r12d; mov [rbp+0x30], r8d; add rsp, 8; pop rbp; pop r12; ret;
0x000da8a1: mov eax, esp; mov [rbp+0x30], r8d; add rsp, 8; pop rbp; pop r12; ret;
0x000da8a3: mov [rbp+0x30], r8d; add rsp, 8; pop rbp; pop r12; ret;
0x000da8a4: mov [rbp+0x30], eax; add rsp, 8; pop rbp; pop r12; ret;
0x000da8b1: mov ebx, 0x48ffffa5; add esp, 8; mov eax, r12d; pop rbp; pop r12; ret;
0x000da8c0: mov r12d, 0xc; add rsp, 8; mov eax, r12d; pop rbp; pop r12; ret;
0x000da8c1: mov esp, 0xc; add rsp, 8; mov eax, r12d; pop rbp; pop r12; ret;
0x000da8c4: add [rax], al; add rsp, 8; mov eax, r12d; pop rbp; pop r12; ret;
0x000da90f: xor [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret;
0x000dab59: ror byte ptr [rdi], 0x84; pop rax; add eax, [rax]; add [rax-0x7d], cl; ret;
0x000dab5c: pop rax; add eax, [rax]; add [rax-0x7d], cl; ret;
0x000dab5d: add eax, [rax]; add [rax-0x7d], cl; ret;
0x000db10a: rol byte ptr [rcx+0x39], cl; iretd;
0x000db110: xchg esp, eax; ret 0xc083;
0x000db26b: add [rax], al; add [rax], al; add dh, dh; ret 0x7401;
0x000db26d: add [rax], al; add dh, dh; ret 0x7401;
0x000db26f: add dh, dh; ret 0x7401;
0x000db27b: and [rbp+rax-0xa], dh; ret 0x7402;
0x000db27f: ret 0x7402;
0x000db2e0: sub [rax+3], cl; add [rax+0x75040878], eax; mov dh, 0x8b; pop rax; or bh, dh; ret;
0x000db2e3: add [rax+0x75040878], eax; mov dh, 0x8b; pop rax; or bh, dh; ret;
0x000db2e7: add al, 0x75; mov dh, 0x8b; pop rax; or bh, dh; ret;
0x000db2e9: mov dh, 0x8b; pop rax; or bh, dh; ret;
0x000db2eb: pop rax; or bh, dh; ret;
0x000db2ec: or bh, dh; ret;
0x000db306: ret 0xd889;
0x000db31a: jmp far fword ptr [rax+0x56840f08];
0x000db322: push rsi; ret 0xf01;
0x000db84d: add [rax], al; add [rax-0x7d], cl; ret 0x4804;
0x000db84f: add [rax-0x7d], cl; ret 0x4804;
0x000db8d2: add [rax], al; add al, ch; cdq; hlt; dec dword ptr [rax-0x77]; ret 0x8548;
0x000db8d4: add al, ch; cdq; hlt; dec dword ptr [rax-0x77]; ret 0x8548;
0x000db8d7: cdq; hlt; dec dword ptr [rax-0x77]; ret 0x8548;
0x000db8d8: hlt; dec dword ptr [rax-0x77]; ret 0x8548;
0x000db952: xor [rbx+0x634801c6], al; imul al; ret 0xf498;
0x000db955: add [rax+0x63], ecx; imul al; ret 0xf498;
0x000db958: imul al; ret 0xf498;
0x000db95a: ret 0xf498;
0x000db9cc: dec dword ptr [rbp-0x76b3feb0]; dec dword ptr [rcx+0x245489d6]; xor al, ch; ret 0xffed;
0x000db9d2: dec dword ptr [rcx+0x245489d6]; xor al, ch; ret 0xffed;
0x000db9d8: xor al, ch; ret 0xffed;
0x000db9da: ret 0xffed;
0x000dbbad: shr eax, 0x6d; ret;
0x000dbbaf: insd [rdi], dx; ret;
0x000dbc2e: call qword ptr [rax-0x161bcebb];
0x000dbf1c: add [rcx-0x7d], cl; mov dword ptr [rcx], 0x7f3e3945; ret 0x8b48;
0x000dbf1f: mov dword ptr [rcx], 0x7f3e3945; ret 0x8b48;
0x000dbf89: or [rax-0x7d], cl; ret 0x4808;
0x000dbfce: add [rax], al; add al, ch; xchg rdx, rax; hlt; dec dword ptr [rax-0x77]; ret;
0x000dbfd0: add al, ch; xchg rdx, rax; hlt; dec dword ptr [rax-0x77]; ret;
0x000dbfd2: xchg rdx, rax; hlt; dec dword ptr [rax-0x77]; ret;
0x000dbfd3: xchg edx, eax; hlt; dec dword ptr [rax-0x77]; ret;
0x000dc0aa: sbb [rax-0x75], cl; cmp ecx, [rax-0x7d]; ret;
0x000dc172: jmp far fword ptr [rax+0x41597408];
0x000dc1b5: add [rax-0x7d], cl; ret 0x4808;
0x000dc2b1: adc eax, 0xc2834800; or [rcx+9], cl; ret 0x8348;
0x000dc2b2: add [rax-0x7d], cl; ret 0x4908;
0x000dc2b6: or [rcx+9], cl; ret 0x8348;
0x000dc463: and al, 0x83; ret;
0x000dc5c5: test [rcx-0x16000005], ebp; stosd [rdi]; idiv edi; jmp qword ptr [rsi+0xf];
0x000dc5c6: test eax, 0xe9fffffb; stosd [rdi]; idiv edi; jmp qword ptr [rsi+0xf];
0x000dc5cb: stosd [rdi]; idiv edi; jmp qword ptr [rsi+0xf];
0x000dc603: add [rax], al; add dh, dh; ret 0xf40;
0x000dc605: add dh, dh; ret 0xf40;
0x000dc93c: mov ah, dh; dec dword ptr [rax-0x77]; ret;
0x000dc93d: hlt; dec dword ptr [rax-0x77]; ret;
0x000dc97d: adc al, [rcx-0xa]; ret 0x7501;
0x000dca82: or gs:[rax-0x77], cl; ret;
0x000dcb1b: or [rax+0x39], ecx; ret 0x850f;
0x000dcb4f: sbb [rcx+rcx*4-0x40], cl; pop rbx; pop rbp; pop r12; pop r13; ret;
0x000dcd19: cli; or [rdi], ecx; test [rdi+0x39000002], cl; ret;
0x000dcd1a: or [rdi], ecx; test [rdi+0x39000002], cl; ret;
0x000dcd1c: test [rdi+0x39000002], cl; ret;
0x000dcd1e: add al, [rax]; add [rcx], bh; ret;
0x000dce95: ret 0x4d04;
0x000dcea8: imul al; ret 0xff6a;
0x000dceaa: ret 0xff6a;
0x000dcff7: add [rbx-0x76b363b3], cl; iretd;
0x000dd0ae: ret 0xace8;
0x000dd1dc: add [rax+0x39], ecx; ret 0xe675;
0x000dd1df: ret 0xe675;
0x000dd210: or [rcx-0x77], cl; fisttp qword ptr [rax-0x7d], st; ret;
0x000dd4bf: fisttp qword ptr [rax-0x7d], st; ret;
0x000dd593: push 0x74f68548; and cl, [rdi]; mov dh, 0x57; cmp dh, dh; ret 0xf08;
0x000dd596: div byte ptr [rdx+0xf]; mov dh, 0x57; cmp dh, dh; ret 0xf08;
0x000dd598: and cl, [rdi]; mov dh, 0x57; cmp dh, dh; ret 0xf08;
0x000dd59a: mov dh, 0x57; cmp dh, dh; ret 0xf08;
0x000dd59b: push rdi; cmp dh, dh; ret 0xf08;
0x000dd59c: cmp dh, dh; ret 0xf08;
0x000dd6de: mov [rax+rsi], fs; add [rax], eax; add [rdi], cl; ret 0x8c89;
0x000dd6df: and al, 0x30; add [rax], eax; add [rdi], cl; ret 0x8c89;
0x000dd6e1: add [rax], eax; add [rdi], cl; ret 0x8c89;
0x000dd6e3: add [rdi], cl; ret 0x8c89;
0x000dd6e6: ret 0x8c89;
0x000dd911: add [rax+0xb], cl; test [rax+rdx*4], ah; add [rax], al; add [rdi], cl; xchg esp, eax; ret 0xe2c1;
0x000dd914: test [rax+rdx*4], ah; add [rax], al; add [rdi], cl; xchg esp, eax; ret 0xe2c1;
0x000dd915: and al, 0x90; add [rax], al; add [rdi], cl; xchg esp, eax; ret 0xe2c1;
0x000dd916: nop; add [rax], al; add [rdi], cl; xchg esp, eax; ret 0xe2c1;
0x000dd917: add [rax], al; add [rdi], cl; xchg esp, eax; ret 0xe2c1;
0x000dd919: add [rdi], cl; xchg esp, eax; ret 0xe2c1;
0x000dd91b: xchg esp, eax; ret 0xe2c1;
0x000dd91c: ret 0xe2c1;
0x000dd949: pushfq; ret 0x5c3b;
0x000dd94a: ret 0x5c3b;
0x000dd966: add [rax], al; add [rax+0xf], cl; ret 0x8948;
0x000dd968: add [rax+0xf], cl; ret 0x8948;
0x000dda1d: mov dl, 0x8b; xchg esp, eax; and al, 0x10; add al, [rax]; add [rax-0x77], cl; iretd;
0x000dda1f: xchg esp, eax; and al, 0x10; add al, [rax]; add [rax-0x77], cl; iretd;
0x000dda20: and al, 0x10; add al, [rax]; add [rax-0x77], cl; iretd;
0x000dda22: add al, [rax]; add [rax-0x77], cl; iretd;
0x000ddb84: push 0xffffffffa8ffff73; add [rdi], ecx; test ecx, ebx; or al, [rax]; add [rbp-0x76db8b40], al; ret 0xe283;
0x000ddb87: jmp far fword ptr [rax-0x267af0ff];
0x000ddb89: add [rdi], ecx; test ecx, ebx; or al, [rax]; add [rbp-0x76db8b40], al; ret 0xe283;
0x000ddb8b: test ecx, ebx; or al, [rax]; add [rbp-0x76db8b40], al; ret 0xe283;
0x000ddb8d: or al, [rax]; add [rbp-0x76db8b40], al; ret 0xe283;
0x000ddb8f: add [rbp-0x76db8b40], al; ret 0xe283;
0x000ddb93: and al, 0x89; ret 0xe283;
0x000ddbfc: jmp far fword ptr [rax-0x17af0f0];
0x000ddc95: add [rax], al; add [rbp-0x77], cl; out 0x8d, al; add [r9-0x76f7dbbc], r9d; ret;
0x000ddc97: add [rbp-0x77], cl; out 0x8d, al; add [r9-0x76f7dbbc], r9d; ret;
0x000ddc9a: out 0x8d, al; add [r9-0x76f7dbbc], r9d; ret;
0x000ddc9c: add [r9-0x76f7dbbc], r9d; ret;
0x000ddc9d: add [rcx-0x76f7dbbc], ecx; ret;
0x000ddca5: test [rsp], ah; add [rax], eax; add [rcx], bh; ret;
0x000ddca6: and al, 0x24; add [rax], eax; add [rcx], bh; ret;
0x000ddca8: add [rax], eax; add [rcx], bh; ret;
0x000ddd6d: adc eax, 0x83489066; ret 0xb908;
0x000ddd72: ret 0xb908;
0x000dde85: dec dword ptr [rax+0x39]; ret 0xe975;
0x000ddfae: dec dword ptr [rax+0x39]; ret 0xea75;
0x000ddfb1: ret 0xea75;
0x000de10b: or [rdi], cl; test [rsi], esi; add [rax], eax; add dh, dh; ret 0x7420;
0x000de10d: test [rsi], esi; add [rax], eax; add dh, dh; ret 0x7420;
0x000de10e: add [rax], eax; add dh, dh; ret 0x7420;
0x000de10f: add [rax], eax; add dh, dh; ret 0x7420;
0x000de2c4: jmp far fword ptr [rax+0x45840f01];
0x000de362: mov ch, [rbx-1]; jmp far fword ptr [rax-0xd7bf0ff];
0x000de365: jmp far fword ptr [rax-0xd7bf0ff];
0x000de68a: dec dword ptr [rax+0x63]; ret;
0x000de723: add [rbx+0x1be01e9], eax; add [rax], al; add [rcx+0x39], al; ret;
0x000de729: add [rax], al; add [rcx+0x39], al; ret;
0x000de72b: add [rcx+0x39], al; ret;
0x000de731: mov [0x31c789c189000001], al; rol byte ptr [rcx+0x39], cl; ret 0x57e;
0x000de732: add [rax], eax; add [rcx+0x31c789c1], cl; rol byte ptr [rcx+0x39], cl; ret 0x57e;
0x000de734: add [rcx+0x31c789c1], cl; rol byte ptr [rcx+0x39], cl; ret 0x57e;
0x000de736: ror dword ptr [rcx+0x41d231c7], 0x39; ret 0x57e;
0x000de73a: rol byte ptr [rcx+0x39], cl; ret 0x57e;
0x000de73d: ret 0x57e;
0x000de795: dec dword ptr [rax-0x77]; test [rax+rbp*4], ah; add [rax], eax; add [rax-0x7b], cl; ror byte ptr [rdi], 0x84; iretd;
0x000de798: test [rax+rbp*4], ah; add [rax], eax; add [rax-0x7b], cl; ror byte ptr [rdi], 0x84; iretd;
0x000de799: and al, 0xa8; add [rax], eax; add [rax-0x7b], cl; ror byte ptr [rdi], 0x84; iretd;
0x000de79b: add [rax], eax; add [rax-0x7b], cl; ror byte ptr [rdi], 0x84; iretd;
0x000de79d: add [rax-0x7b], cl; ror byte ptr [rdi], 0x84; iretd;
0x000de8e2: dec dword ptr [rcx-0x77]; iretd;
0x000de8f0: add [rax], al; add [rbx+rcx*4-0x5c], cl; and al, 0x78; add [rax], eax; add [rcx-0x77], cl; iretd;
0x000de8f2: add [rbx+rcx*4-0x5c], cl; and al, 0x78; add [rax], eax; add [rcx-0x77], cl; iretd;
0x000de8f5: movsb [rdi], [rsi]; and al, 0x78; add [rax], eax; add [rcx-0x77], cl; iretd;
0x000de8f6: and al, 0x78; add [rax], eax; add [rcx-0x77], cl; iretd;
0x000de8f8: add [rax], eax; add [rcx-0x77], cl; iretd;
0x000deab6: inc dword ptr [rcx+0x39]; ret 0x1474;
0x000deab9: ret 0x1474;
0x000deb71: mov rbp, [r12]; movzx eax, byte ptr [rax+8]; mov rdx, rax; movsxd rax, [rbx+rax*4]; add rax, rbx; jmp rax;
0x000deb72: mov ebp, [rsp]; movzx eax, byte ptr [rax+8]; mov rdx, rax; movsxd rax, [rbx+rax*4]; add rax, rbx; jmp rax;
0x000deb73: sub al, 0x24; movzx eax, byte ptr [rax+8]; mov rdx, rax; movsxd rax, [rbx+rax*4]; add rax, rbx; jmp rax;
0x000deb74: and al, 0xf; mov dh, 0x40; or [rax-0x77], cl; ret 0x6348;
0x000deb75: movzx eax, byte ptr [rax+8]; mov rdx, rax; movsxd rax, [rbx+rax*4]; add rax, rbx; jmp rax;
0x000deb76: mov dh, 0x40; or [rax-0x77], cl; ret 0x6348;
0x000deb78: or [rax-0x77], cl; ret 0x6348;
0x000deb79: mov rdx, rax; movsxd rax, [rbx+rax*4]; add rax, rbx; jmp rax;
0x000deb7a: mov edx, eax; movsxd rax, [rbx+rax*4]; add rax, rbx; jmp rax;
0x000deb7b: ret 0x6348;
0x000dec7e: call qword ptr [rax+0x245c8b48];
0x000ded34: or [rax], al; add [rcx-0x7d], al; cld; jmp qword ptr [rsi+0xf];
0x000ded36: add [rcx-0x7d], al; cld; jmp qword ptr [rsi+0xf];
0x000ded80: fdiv st(7), st; jmp qword ptr [rsi+0xf];
0x000dede8: test [rbx-0x7cfffff9], al; ret;
0x000dee6a: add [rdi], cl; xchg esp, eax; ret;
0x000deea5: and al, ch; xchg r15d, r15d; jmp qword ptr [rsi+0xf];
0x000deea7: xchg r15d, r15d; jmp qword ptr [rsi+0xf];
0x000deea8: xchg edi, edi; jmp qword ptr [rsi+0xf];
0x000defe2: and al, ch; cmp [rdx-0xc], ah; dec dword ptr [rax-0x7b]; fisttp dword ptr [rdi], st; xchg esp, eax; ret 0x8548;
0x000defe4: cmp [rdx-0xc], ah; dec dword ptr [rax-0x7b]; fisttp dword ptr [rdi], st; xchg esp, eax; ret 0x8548;
0x000defe6: hlt; dec dword ptr [rax-0x7b]; fisttp dword ptr [rdi], st; xchg esp, eax; ret 0x8548;
0x000defe7: dec dword ptr [rax-0x7b]; fisttp dword ptr [rdi], st; xchg esp, eax; ret 0x8548;
0x000defea: fisttp dword ptr [rdi], st; xchg esp, eax; ret 0x8548;
0x000df06f: test [rax+rdx*4], ah; add [rax], al; add [rax], al; add [rax], al; add [rax-0x73], cl; ret;
0x000df070: and al, 0x90; add [rax], al; add [rax], al; add [rax], al; add [rax-0x73], cl; ret;
0x000df071: nop; add [rax], al; add [rax], al; add [rax], al; add [rax-0x73], cl; ret;
0x000df072: add [rax], al; add [rax], al; add [rax], al; add [rax-0x73], cl; ret;
0x000df074: add [rax], al; add [rax], al; add [rax-0x73], cl; ret;
0x000df076: add [rax], al; add [rax-0x73], cl; ret;
0x000df078: add [rax-0x73], cl; ret;
0x000df136: add [rax], al; lea rbx, [rip+0xa7f55]; movsxd rax, [rbx+rax*4]; add rax, rbx; jmp rax;
0x000df137: add [rax-0x73], cl; sbb eax, 0xa7f55; movsxd rax, [rbx+rax*4]; add rax, rbx; jmp rax;
0x000df138: lea rbx, [rip+0xa7f55]; movsxd rax, [rbx+rax*4]; add rax, rbx; jmp rax;
0x000df139: lea ebx, [rip+0xa7f55]; movsxd rax, [rbx+rax*4]; add rax, rbx; jmp rax;
0x000df13a: sbb eax, 0xa7f55; movsxd rax, [rbx+rax*4]; add rax, rbx; jmp rax;
0x000df13d: or al, [rax]; movsxd rax, [rbx+rax*4]; add rax, rbx; jmp rax;
0x000df13e: add [rax+0x63], cl; add al, 0x83; add rax, rbx; jmp rax;
0x000df245: ret 0x2348;
0x000df291: adc [rcx-9], al; ret 0x30f;
0x000df294: ret 0x30f;
0x000df2f9: jmp far fword ptr [rcx-0x101];
0x000df342: sbb cl, [rbx-1]; jmp qword ptr [rsi+0xf];
0x000df352: mov [rax+rdx], fs; add [rax], eax; add [rax-0x77], cl; ret 0x8949;
0x000df353: and al, 0x10; add [rax], eax; add [rax-0x77], cl; ret 0x8949;
0x000df355: add [rax], eax; add [rax-0x77], cl; ret 0x8949;
0x000df372: dec dword ptr [rax-0x7b]; fisttp dword ptr [rdi], st; xchg esp, eax; ret 0x854d;
0x000df375: fisttp dword ptr [rdi], st; xchg esp, eax; ret 0x854d;
0x000df4da: ret 0xff79;
0x000df57f: adc [rax-0x77], cl; ret;
0x000df627: test [rbx], cl; idiv edi; dec dword ptr [rax-0x75]; adc [r8+0x39], cl; ret 0x574;
0x000df629: idiv edi; dec dword ptr [rax-0x75]; adc [r8+0x39], cl; ret 0x574;
0x000df62b: dec dword ptr [rax-0x75]; adc [r8+0x39], cl; ret 0x574;
0x000df62e: adc [r8+0x39], cl; ret 0x574;
0x000df62f: adc [rax+0x39], cl; ret 0x574;
0x000df632: ret 0x574;
0x000df6ae: call qword ptr [rax+0x48c38948];
0x000df743: cmpsb [rsi], [rdi]; idiv edi; jmp qword ptr [rsi+0xf];
0x000dfd2c: add al, 0; add [rax-0x75], cl; test [rax+rdi*4], ah; add [rax], al; add cl, al; call far fword ptr [rax];
0x000dfd2e: add [rax-0x75], cl; test [rax+rdi*4], ah; add [rax], al; add cl, al; call far fword ptr [rax];
0x000dfd31: test [rax+rdi*4], ah; add [rax], al; add cl, al; call far fword ptr [rax];
0x000dfd32: and al, 0xb8; add [rax], al; add cl, al; call far fword ptr [rax];
0x000dfd33: mov eax, 0xc1000000; call far fword ptr [rax];
0x000dfe10: add [rbx+0x294803e0], eax; ret 0x148;
0x000dfe13: add ecx, [rax+0x29]; ret 0x148;
0x000dfead: add [rax], al; add cl, al; call far fword ptr [rax];
0x000dfeaf: add cl, al; call far fword ptr [rax];
0x000dfeb1: call far fword ptr [rax];
0x000e011c: mov [rip-0x7abb0000], al; in al, 0x74; ret;
0x000e011d: add eax, 0x85450000; in al, 0x74; ret;
0x000e011f: add [rbp-0x7b], al; in al, 0x74; ret;
0x000e0122: in al, 0x74; ret;
0x000e0397: or [rax+0x39], cl; ret 0xf475;
0x000e039a: ret 0xf475;
0x000e047b: test [rax+rcx*4], ah; add [rax], al; add [rax-0x77], cl; ret 0x840f;
0x000e047c: and al, 0x88; add [rax], al; add [rax-0x77], cl; ret 0x840f;
0x000e047e: add [rax], al; add [rax-0x77], cl; ret 0x840f;
0x000e0480: add [rax-0x77], cl; ret 0x840f;
0x000e0732: or [rax+0x39], cl; ret 0xed75;
0x000e0735: ret 0xed75;
0x000e0a7a: add [rcx+0x63], cl; rol byte ptr [rcx+0x29], 1; ret;
0x000e0a7d: rol byte ptr [rcx+0x29], 1; ret;
0x000e0b93: xor dh, al; and al, 0x38; adc al, ch; ret 0xff32;
0x000e0b96: and al, 0x38; adc al, ch; ret 0xff32;
0x000e0b98: adc al, ch; ret 0xff32;
0x000e0b9a: ret 0xff32;
0x000e0be1: dec dword ptr [rax-0x77]; ret 0x38b;
0x000e0be4: ret 0x38b;
0x000e0d2f: adc [r8-0x7b], r9b; shl byte ptr [rbp+rax+0x48], 0x39; ret;
0x000e0d30: adc [rax-0x7b], cl; shl byte ptr [rbp+rax+0x48], 0x39; ret;
0x000e0d33: shl byte ptr [rbp+rax+0x48], 0x39; ret;
0x000e0d4e: sub al, ch; mov esp, 0xebffff43; iretd;
0x000e0d50: mov esp, 0xebffff43; iretd;
0x000e0e66: dec dword ptr [rax-0x77]; ret 0x8b41;
0x000e1198: ret 0xe8c0;
0x000e13c2: ret 0xc083;
0x000e148d: sub edi, edi; dec dword ptr [rax-0x77]; ret;
0x000e14c4: ror byte ptr [rax-0x75], 0x34; and al, 0xf; xchg esp, eax; ret 0x8548;
0x000e14c8: and al, 0xf; xchg esp, eax; ret 0x8548;
0x000e14ca: xchg esp, eax; ret 0x8548;
0x000e14ce: fisttp dword ptr [rdi], st; xchg esp, eax; ror byte ptr [rbx+rcx*4+0x26], 8; ret 0x850f;
0x000e14d0: xchg esp, eax; ror byte ptr [rbx+rcx*4+0x26], 8; ret 0x850f;
0x000e14d1: ror byte ptr [rbx+rcx*4+0x26], 8; ret 0x850f;
0x000e16b7: push rax; or [rax-0x77], cl; ret;
0x000e1789: imul ecx, [rax-0x75], 0x42; adc [rax+0x39], cl; ret;
0x000e179a: rol dword ptr [rax+0x7410307b], cl; iretd;
0x000e188d: add [rax], al; movzx edx, byte ptr [r15+0x30]; movsxd rdx, [r14+rdx*4]; add rdx, r14; jmp rdx;
0x000e188e: add [rcx+0xf], al; mov dh, 0x57; xor [rcx+0x63], cl; adc al, 0x96; add rdx, r14; jmp rdx;
0x000e188f: movzx edx, byte ptr [r15+0x30]; movsxd rdx, [r14+rdx*4]; add rdx, r14; jmp rdx;
0x000e1890: movzx edx, byte ptr [rdi+0x30]; movsxd rdx, [r14+rdx*4]; add rdx, r14; jmp rdx;
0x000e1891: mov dh, 0x57; xor [rcx+0x63], cl; adc al, 0x96; add rdx, r14; jmp rdx;
0x000e1892: push rdi; xor [rcx+0x63], cl; adc al, 0x96; add rdx, r14; jmp rdx;
0x000e1893: xor [rcx+0x63], cl; adc al, 0x96; add rdx, r14; jmp rdx;
0x000e1894: movsxd rdx, [r14+rdx*4]; add rdx, r14; jmp rdx;
0x000e1895: movsxd edx, [rsi+rdx*4]; add rdx, r14; jmp rdx;
0x000e1896: adc al, 0x96; add rdx, r14; jmp rdx;
0x000e1897: xchg esi, eax; add rdx, r14; jmp rdx;
0x000e1898: add rdx, r14; jmp rdx;
0x000e1914: cmp [rax-0x77], cl; ret 0xf66;
0x000e192c: adc [rax+0x39], cl; ret 0xde77;
0x000e192f: ret 0xde77;
0x000e1c9b: idiv bh; dec dword ptr [rax+0x39]; ret;
0x000e1cea: and al, 0x18; add [rdi], cl; xchg esp, eax; ret 0xd020;
0x000e1cec: add [rdi], cl; xchg esp, eax; ret 0xd020;
0x000e1cee: xchg esp, eax; ret 0xd020;
0x000e1cef: ret 0xd020;
0x000e1d1b: dec dword ptr [rcx-0x76bfdbbc]; ret;
0x000e1d91: ror byte ptr [rax-0x7d], 1; ret 0x4901;
0x000e1edf: inc dword ptr [rcx+0x39]; ret;
0x000e1fa1: or [rdi+rcx], cl; xchg [rsp+rax*2-0x49f0000c], ebx; or [rcx+0x63], cl; or al, 0x88; add rcx, r8; jmp rcx;
0x000e1fa2: or al, 0xf; xchg [rsp+rax*2-0x49f0000c], ebx; or [rcx+0x63], cl; or al, 0x88; add rcx, r8; jmp rcx;
0x000e1fa4: xchg [rsp+rax*2-0x49f0000c], ebx; or [rcx+0x63], cl; or al, 0x88; add rcx, r8; jmp rcx;
0x000e1fa8: dec dword ptr [rdi]; mov dh, 0x4a; or [rcx+0x63], cl; or al, 0x88; add rcx, r8; jmp rcx;
0x000e1fa9: movzx ecx, byte ptr [rdx+8]; movsxd rcx, [r8+rcx*4]; add rcx, r8; jmp rcx;
0x000e1faa: mov dh, 0x4a; or [rcx+0x63], cl; or al, 0x88; add rcx, r8; jmp rcx;
0x000e1fac: or [rcx+0x63], cl; or al, 0x88; add rcx, r8; jmp rcx;
0x000e1fad: movsxd rcx, [r8+rcx*4]; add rcx, r8; jmp rcx;
0x000e1fae: movsxd ecx, [rax+rcx*4]; add rcx, r8; jmp rcx;
0x000e1faf: or al, 0x88; add rcx, r8; jmp rcx;
0x000e1fb0: mov [rcx+rax-0x3f], cl; jmp rcx;
0x000e1fb1: add rcx, r8; jmp rcx;
0x000e1fb2: add ecx, eax; jmp rcx;
0x000e20ff: or dh, al; and al, 0x58; add ch, al; push rsi; sbb eax, 0x8948ffff; ret;
0x000e2102: and al, 0x58; add ch, al; push rsi; sbb eax, 0x8948ffff; ret;
0x000e2103: pop rax; add ch, al; push rsi; sbb eax, 0x8948ffff; ret;
0x000e2104: add ch, al; push rsi; sbb eax, 0x8948ffff; ret;
0x000e2106: push rsi; sbb eax, 0x8948ffff; ret;
0x000e2107: sbb eax, 0x8948ffff; ret;
0x000e2128: add [rax-0x7d], ecx; ret 0x4c10;
0x000e21be: inc dword ptr [rcx-0x77]; ret 0x5ee9;
0x000e21c1: ret 0x5ee9;
0x000e21dd: sub cl, ch; mov edi, 0x89fffff7; ret;
0x000e21df: mov edi, 0x89fffff7; ret;
0x000e22f8: nop [rax+rax]; xor eax, eax; add rsp, 8; ret;
0x000e22fa: test [rax], al; add [rax], al; add [rax], al; xor eax, eax; add rsp, 8; ret;
0x000e22fc: add [rax], al; add [rax], al; xor eax, eax; add rsp, 8; ret;
0x000e2307: nop [rax+rax]; mov rax, [rip+0xdbca1]; mov r8, [rax]; mov [rax], rdi; mov rax, r8; ret;
0x000e2308: nop [rax+rax]; mov rax, [rip+0xdbca1]; mov r8, [rax]; mov [rax], rdi; mov rax, r8; ret;
0x000e230e: add [rax], al; mov rax, [rip+0xdbca1]; mov r8, [rax]; mov [rax], rdi; mov rax, r8; ret;
0x000e230f: add [rax-0x75], cl; add eax, 0xdbca1; mov r8, [rax]; mov [rax], rdi; mov rax, r8; ret;
0x000e2310: mov rax, [rip+0xdbca1]; mov r8, [rax]; mov [rax], rdi; mov rax, r8; ret;
0x000e2311: mov eax, [rip+0xdbca1]; mov r8, [rax]; mov [rax], rdi; mov rax, r8; ret;
0x000e2312: add eax, 0xdbca1; mov r8, [rax]; mov [rax], rdi; mov rax, r8; ret;
0x000e2313: mov eax, [0x8948008b4c000dbc]; cmp [rcx+rcx*4-0x40], cl; ret;
0x000e2314: mov esp, 0x8b4c000d; add [rax-0x77], cl; cmp [rcx+rcx*4-0x40], cl; ret;
0x000e2315: or eax, 0x8b4c00; mov [rax], rdi; mov rax, r8; ret;
0x000e2316: add [rbx+rcx*4], cl; mov [rax], rdi; mov rax, r8; ret;
0x000e2317: mov r8, [rax]; mov [rax], rdi; mov rax, r8; ret;
0x000e2318: mov eax, [rax]; mov [rax], rdi; mov rax, r8; ret;
0x000e2319: add [rax-0x77], cl; cmp [rcx+rcx*4-0x40], cl; ret;
0x000e231a: mov [rax], rdi; mov rax, r8; ret;
0x000e231b: mov [rax], edi; mov rax, r8; ret;
0x000e231c: cmp [rcx+rcx*4-0x40], cl; ret;
0x000e23c5: push rdi; cmp edi, edi; inc dword ptr [rax+0x3108384b]; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret;
0x000e23c6: cmp edi, edi; inc dword ptr [rax+0x3108384b]; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret;
0x000e23c8: inc dword ptr [rax+0x3108384b]; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret;
0x000e23c9: or byte ptr [rbx+0x38], 8; xor eax, eax; pop rbx; pop rbp; pop r12; ret;
0x000e23ca: cmp [r8], cl; xor eax, eax; pop rbx; pop rbp; pop r12; ret;
0x000e23cb: cmp [rax], cl; xor eax, eax; pop rbx; pop rbp; pop r12; ret;
0x000e23cc: or [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret;
0x000e250b: xor al, ch; jmp far fword ptr [rdi-0x7cb70001];
0x000e250d: jmp far fword ptr [rdi-0x7cb70001];
0x000e2534: hlt; jmp qword ptr [rbx+rcx*4+4];
0x000e2572: jmp far fword ptr [rax+0xf850f08];
0x000e2783: mov rdi, [rsp+0x28]; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x000e2784: mov edi, [rsp+0x28]; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x000e2786: and al, 0x28; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x000e2787: sub [rbp+0x31], al; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; syscall;
0x000e28f5: add al, 9; ret;
0x000e2914: ret 0x86e8;
0x000e292f: mov eax, r12d; pop rbp; pop r12; pop r13; pop r14; ret;
0x000e297d: add [rbx+0x5d], bl; mov eax, r12d; pop r12; pop r13; pop r14; ret;
0x000e297f: pop rbp; mov eax, r12d; pop r12; pop r13; pop r14; ret;
0x000e2980: mov eax, r12d; pop r12; pop r13; pop r14; ret;
0x000e2a3b: and [rax-0x39], cl; or [r8], al; add [rax], al; add al, ch; iretd;
0x000e2a3e: or [r8], al; add [rax], al; add al, ch; iretd;
0x000e2a3f: or [rax], al; add [rax], al; add al, ch; iretd;
0x000e2a54: sub al, ch; mov esi, 0x48fff428; mov dword ptr [rbx+0x28], 0; pop rbx; ret;
0x000e2a56: mov esi, 0x48fff428; mov dword ptr [rbx+0x28], 0; pop rbx; ret;
0x000e2a5a: mov qword ptr [rbx+0x28], 0; pop rbx; ret;
0x000e2a5b: mov dword ptr [rbx+0x28], 0; pop rbx; ret;
0x000e2ab4: push rax; sti; or eax, 0x285be800; hlt; jmp qword ptr [rsi+0xf];
0x000e2ab5: sti; or eax, 0x285be800; hlt; jmp qword ptr [rsi+0xf];
0x000e2ab6: or eax, 0x285be800; hlt; jmp qword ptr [rsi+0xf];
0x000e2ab7: add al, ch; pop rbx; sub ah, dh; jmp qword ptr [rsi+0xf];
0x000e2ab9: pop rbx; sub ah, dh; jmp qword ptr [rsi+0xf];
0x000e2aba: sub ah, dh; jmp qword ptr [rsi+0xf];
0x000e2b2b: ret 0x5ba;
0x000e2b56: push qword ptr [rax+rbx*8+0x48]; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret;
0x000e2bdb: adc [rbx-0x76f3dbb4], cl; ret 0x8b4c;
0x000e2bdf: or al, 0x89; ret 0x8b4c;
0x000e2c81: cdq; nop [rax+rax]; mov eax, 2; ret;
0x000e2c82: nop [rax+rax]; mov eax, 2; ret;
0x000e2cdf: imul edi, 0x3145ffff; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov rdi, r13; mov eax, 0xca; syscall;
0x000e2ce2: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov rdi, r13; mov eax, 0xca; syscall;
0x000e2ce3: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov rdi, r13; mov eax, 0xca; syscall;
0x000e2ce4: xor edx, edx; mov edx, 1; mov esi, 0x81; mov rdi, r13; mov eax, 0xca; syscall;
0x000e2ce5: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov rdi, r13; mov eax, 0xca; syscall;
0x000e2ce6: mov edx, 1; mov esi, 0x81; mov rdi, r13; mov eax, 0xca; syscall;
0x000e2ce7: add [rax], eax; add [rax], al; mov esi, 0x81; mov rdi, r13; mov eax, 0xca; syscall;
0x000e2ce8: add [rax], al; add [rsi+0x81], bh; mov rdi, r13; mov eax, 0xca; syscall;
0x000e2ce9: add [rax], al; mov esi, 0x81; mov rdi, r13; mov eax, 0xca; syscall;
0x000e2cea: add [rsi+0x81], bh; mov rdi, r13; mov eax, 0xca; syscall;
0x000e2ceb: mov esi, 0x81; mov rdi, r13; mov eax, 0xca; syscall;
0x000e2cec: add dword ptr [rax], 0x894c0000; out dx, eax; mov eax, 0xca; syscall;
0x000e2ced: add [rax], al; add [rcx+rcx*4-0x11], cl; mov eax, 0xca; syscall;
0x000e2cee: add [rax], al; mov rdi, r13; mov eax, 0xca; syscall;
0x000e2cef: add [rcx+rcx*4-0x11], cl; mov eax, 0xca; syscall;
0x000e2cf0: mov rdi, r13; mov eax, 0xca; syscall;
0x000e2cf1: mov edi, ebp; mov eax, 0xca; syscall;
0x000e2cf2: out dx, eax; mov eax, 0xca; syscall;
0x000e2cf5: add [rax], al; add [rdi], cl; add eax, 0xffff4de9; call qword ptr [rax+0x8ec8348];
0x000e2cf7: add [rdi], cl; add eax, 0xffff4de9; call qword ptr [rax+0x8ec8348];
0x000e2cf9: add eax, 0xffff4de9; call qword ptr [rax+0x8ec8348];
0x000e2db9: test dword ptr [rcx-0x77], 0x2556e8c4; hlt; call far fword ptr [rax+0x5a];
0x000e2e66: ret 0xc153;
0x000e2ecb: test dword ptr [rcx-0x77], 0x2444e8c4; hlt; call far fword ptr [rax+0x5a];
0x000e2ed1: and al, 0xf4; call far fword ptr [rax+0x5a];
0x000e2ed2: hlt; call far fword ptr [rax+0x5a];
0x000e2f65: mov dh, 0x47; cmp [rbx-0x377c0620], al; add cl, [rax+0x16893847]; mov [rsi+8], rcx; mov [rsi+0x10], r8; ret;
0x000e2f66: cmp [r11-0x377c0620], r8b; add cl, [rax+0x16893847]; mov [rsi+8], rcx; mov [rsi+0x10], r8; ret;
0x000e2f67: cmp [rbx-0x377c0620], al; add cl, [rax+0x16893847]; mov [rsi+8], rcx; mov [rsi+0x10], r8; ret;
0x000e2f6b: or eax, 2; mov [rdi+0x38], al; mov [rsi], edx; mov [rsi+8], rcx; mov [rsi+0x10], r8; ret;
0x000e2f6d: add cl, [rax+0x16893847]; mov [rsi+8], rcx; mov [rsi+0x10], r8; ret;
0x000e2f6e: mov [rdi+0x38], al; mov [rsi], edx; mov [rsi+8], rcx; mov [rsi+0x10], r8; ret;
0x000e2f71: mov [rsi], edx; mov [rsi+8], rcx; mov [rsi+0x10], r8; ret;
0x000e2f73: mov [rsi+8], rcx; mov [rsi+0x10], r8; ret;
0x000e2f74: mov [rsi+8], ecx; mov [rsi+0x10], r8; ret;
0x000e2f77: mov [rsi+0x10], r8; ret;
0x000e2f7c: nop [rax]; and byte ptr [rdi+0x38], 0xf9; mov dword ptr [rsi], 0; mov qword ptr [rsi+0x10], 0; mov qword ptr [rsi+8], 0; ret;
0x000e2f80: and byte ptr [rdi+0x38], 0xf9; mov dword ptr [rsi], 0; mov qword ptr [rsi+0x10], 0; mov qword ptr [rsi+8], 0; ret;
0x000e2f82: cmp cl, bh; mov dword ptr [rsi], 0; mov qword ptr [rsi+0x10], 0; mov qword ptr [rsi+8], 0; ret;
0x000e2f83: stc; mov dword ptr [rsi], 0; mov qword ptr [rsi+0x10], 0; mov qword ptr [rsi+8], 0; ret;
0x000e2f84: mov dword ptr [rsi], 0; mov qword ptr [rsi+0x10], 0; mov qword ptr [rsi+8], 0; ret;
0x000e2f86: add [rax], al; add [rax], al; mov qword ptr [rsi+0x10], 0; mov qword ptr [rsi+8], 0; ret;
0x000e2f88: add [rax], al; mov qword ptr [rsi+0x10], 0; mov qword ptr [rsi+8], 0; ret;
0x000e2f8a: mov qword ptr [rsi+0x10], 0; mov qword ptr [rsi+8], 0; ret;
0x000e2f8b: mov dword ptr [rsi+0x10], 0; mov qword ptr [rsi+8], 0; ret;
0x000e2f8e: add [rax], al; add [rax], al; mov qword ptr [rsi+8], 0; ret;
0x000e2f90: add [rax], al; mov qword ptr [rsi+8], 0; ret;
0x000e2f92: mov qword ptr [rsi+8], 0; ret;
0x000e2f93: mov dword ptr [rsi+8], 0; ret;
0x000e2fb2: test byte ptr [rip-0x4291800], 0xff; inc dword ptr [rbp-0x3f6bf040]; add rsp, 8; movzx eax, al; ret;
0x000e2fb9: inc dword ptr [rbp-0x3f6bf040]; add rsp, 8; movzx eax, al; ret;
0x000e2fba: test eax, eax; sete al; add rsp, 8; movzx eax, al; ret;
0x000e2fbb: ror byte ptr [rdi], 0x94; ror byte ptr [rax-0x7d], 0xc4; or [rdi], cl; mov dh, 0xc0; ret;
0x000e2fbc: sete al; add rsp, 8; movzx eax, al; ret;
0x000e2fbd: xchg esp, eax; ror byte ptr [rax-0x7d], 0xc4; or [rdi], cl; mov dh, 0xc0; ret;
0x000e3027: add [rax-0x77], ecx; ret 0xb60f;
0x000e3044: nop [rax]; movzx eax, byte ptr [rdi]; test al, al; mov eax, 0; cmovne rax, rdi; ret;
0x000e3047: add [rdi], cl; mov dh, 7; test al, al; mov eax, 0; cmovne rax, rdi; ret;
0x000e3048: movzx eax, byte ptr [rdi]; test al, al; mov eax, 0; cmovne rax, rdi; ret;
0x000e3049: mov dh, 7; test al, al; mov eax, 0; cmovne rax, rdi; ret;
0x000e304b: test al, al; mov eax, 0; cmovne rax, rdi; ret;
0x000e304c: sar byte ptr [rax], 0x48; cmovne eax, edi; ret;
0x000e304d: mov eax, 0; cmovne rax, rdi; ret;
0x000e304e: add [rax], al; add [rax], al; cmovne rax, rdi; ret;
0x000e3050: add [rax], al; cmovne rax, rdi; ret;
0x000e3052: cmovne rax, rdi; ret;
0x000e310e: mov eax, [0x5d5b28c48348c031]; pop r12; pop r13; pop r14; pop r15; ret;
0x000e314a: adc eax, 0x74ff8548; sbb [rax-0x7b], cl; div byte ptr [rcx+rbx-0x17]; stosd [rdi]; cli; jmp qword ptr [rsi+0xf];
0x000e314f: sbb [rax-0x7b], cl; div byte ptr [rcx+rbx-0x17]; stosd [rdi]; cli; jmp qword ptr [rsi+0xf];
0x000e3152: div byte ptr [rcx+rbx-0x17]; stosd [rdi]; cli; jmp qword ptr [rsi+0xf];
0x000e3154: sbb ecx, ebp; stosd [rdi]; cli; jmp qword ptr [rsi+0xf];
0x000e3156: stosd [rdi]; cli; jmp qword ptr [rsi+0xf];
0x000e3157: stosd [rdi]; cli; jmp qword ptr [rsi+0xf];
0x000e3158: cli; jmp qword ptr [rsi+0xf];
0x000e3163: nop [rax+rax]; mov eax, 1; ret;
0x000e3165: add [rax], r8b; mov eax, 1; ret;
0x000e316a: add [rax], al; add bl, al; mov eax, 0xffffffff; ret;
0x000e316c: add bl, al; mov eax, 0xffffffff; ret;
0x000e31ca: add [rax], al; add [rbp+0x34], dh; add rsp, 0xa8; ret;
0x000e31cc: add [rbp+0x34], dh; add rsp, 0xa8; ret;
0x000e31ce: xor al, 0x48; add esp, 0xa8; ret;
0x000e31d3: add [rax], al; add bl, al; nop [rax+rax]; mov rsi, rsp; call qword ptr [rdx+0x40];
0x000e31d5: add bl, al; nop [rax+rax]; mov rsi, rsp; call qword ptr [rdx+0x40];
0x000e31d7: nop [rax+rax]; mov rsi, rsp; call qword ptr [rdx+0x40];
0x000e31d8: nop [rax+rax]; mov rsi, rsp; call qword ptr [rdx+0x40];
0x000e31da: test [rax], al; add [rax], al; add [rax], al; mov rsi, rsp; call qword ptr [rdx+0x40];
0x000e31dc: add [rax], al; add [rax], al; mov rsi, rsp; call qword ptr [rdx+0x40];
0x000e31de: add [rax], al; mov rsi, rsp; call qword ptr [rdx+0x40];
0x000e31e0: mov rsi, rsp; call qword ptr [rdx+0x40];
0x000e31e1: mov esi, esp; call qword ptr [rdx+0x40];
0x000e31e3: call qword ptr [rdx+0x40];
0x000e3233: add eax, [rax]; add [rcx-0x2e76b], cl; jmp qword ptr [rax+rcx*2-0x75];
0x000e3235: add [rcx-0x2e76b], cl; jmp qword ptr [rax+rcx*2-0x75];
0x000e325e: add [rax], al; add [rax-0x39], cl; test [rax+0x40fffffd], edi; add [rax], al; add [rax-0x77], cl; ret 0x8d49;
0x000e3260: add [rax-0x39], cl; test [rax+0x40fffffd], edi; add [rax], al; add [rax-0x77], cl; ret 0x8d49;
0x000e3263: test [rax+0x40fffffd], edi; add [rax], al; add [rax-0x77], cl; ret 0x8d49;
0x000e3264: mov eax, 0x40fffffd; add [rax], al; add [rax-0x77], cl; ret 0x8d49;
0x000e3269: add [rax], al; add [rax-0x77], cl; ret 0x8d49;
0x000e326b: add [rax-0x77], cl; ret 0x8d49;
0x000e3320: add cl, [rcx-0x32b4b]; dec dword ptr [rcx]; ret 0x9589;
0x000e3326: dec dword ptr [rcx]; ret 0x9589;
0x000e3328: ret 0x9589;
0x000e332e: call qword ptr [rax-0x2fb7a75];
0x000e33bf: cmovns eax, [rbx+0x394810c1]; ret;
0x000e33c3: adc [rax+0x39], cl; ret;
0x000e3549: dec dword ptr [rbx-0x2e77b]; jmp far fword ptr [rcx+0x810];
0x000e354f: jmp far fword ptr [rcx+0x810];
0x000e3607: add [rbp-0x4d7af040], al; add al, [rax]; add [rbx-0x2e773], al; call qword ptr [rax];
0x000e360d: add al, [rax]; add [rbx-0x2e773], al; call qword ptr [rax];
0x000e360f: add [rbx-0x2e773], al; call qword ptr [rax];
0x000e370d: nop [rax]; call qword ptr [r12+0x28];
0x000e3926: adc al, 0x74; sbb [rbp-0x7b], cl; push qword ptr [rdx+rcx+0x48]; mov edi, ebx; call r15;
0x000e3928: sbb [rbp-0x7b], cl; push qword ptr [rdx+rcx+0x48]; mov edi, ebx; call r15;
0x000e392b: push qword ptr [rdx+rcx+0x48]; mov edi, ebx; call r15;
0x000e392e: mov rdi, rbx; call r15;
0x000e392f: mov edi, ebx; call r15;
0x000e3931: call r15;
0x000e3932: call rdi;
0x000e394f: call qword ptr [r12+0x20];
0x000e3959: call qword ptr [r12+0x30];
0x000e3971: lea rsi, [rbp-0x2e0]; mov rdi, r15; call qword ptr [r12+0x40];
0x000e3972: lea esi, [rbp-0x2e0]; mov rdi, r15; call qword ptr [r12+0x40];
0x000e3977: dec dword ptr [rcx+rcx*4-1]; call qword ptr [r12+0x40];
0x000e3978: mov rdi, r15; call qword ptr [r12+0x40];
0x000e3979: mov edi, edi; call qword ptr [r12+0x40];
0x000e397b: call qword ptr [r12+0x40];
0x000e3a66: add [rcx+0x95ff], al; add [rdi+0x15], dh; lea rdx, [rip+0xa38ea]; movsxd rax, [rdx+rdi*4]; add rax, rdx; jmp rax;
0x000e3a68: call qword ptr [rbp+0x77000000];
0x000e3a6a: add [rax], al; add [rdi+0x15], dh; lea rdx, [rip+0xa38ea]; movsxd rax, [rdx+rdi*4]; add rax, rdx; jmp rax;
0x000e3a6c: add [rdi+0x15], dh; lea rdx, [rip+0xa38ea]; movsxd rax, [rdx+rdi*4]; add rax, rdx; jmp rax;
0x000e3a6e: adc eax, 0xea158d48; cmp [rdx], cl; add [rax+0x63], cl; add al, 0xba; add rax, rdx; jmp rax;
0x000e3a6f: lea rdx, [rip+0xa38ea]; movsxd rax, [rdx+rdi*4]; add rax, rdx; jmp rax;
0x000e3a70: lea edx, [rip+0xa38ea]; movsxd rax, [rdx+rdi*4]; add rax, rdx; jmp rax;
0x000e3a71: adc eax, 0xa38ea; movsxd rax, [rdx+rdi*4]; add rax, rdx; jmp rax;
0x000e3a73: cmp [rdx], cl; add [rax+0x63], cl; add al, 0xba; add rax, rdx; jmp rax;
0x000e3a74: or al, [rax]; movsxd rax, [rdx+rdi*4]; add rax, rdx; jmp rax;
0x000e3a75: add [rax+0x63], cl; add al, 0xba; add rax, rdx; jmp rax;
0x000e3aa5: add [rdi], cl; test [rcx+0x48000005], esp; add esp, 0x68; pop rbx; pop rbp; ret;
0x000e3aa7: test [rcx+0x48000005], esp; add esp, 0x68; pop rbx; pop rbp; ret;
0x000e3aa8: mov eax, [0x5b68c48348000005]; pop rbp; ret;
0x000e3aaa: add [rax], al; add rsp, 0x68; pop rbx; pop rbp; ret;
0x000e3aac: add rsp, 0x68; pop rbx; pop rbp; ret;
0x000e3aad: add esp, 0x68; pop rbx; pop rbp; ret;
0x000e3abf: add [rax], al; lea rdx, [rip+0xa3af0]; mov edi, edi; movsxd rax, [rdx+rdi*4]; add rax, rdx; jmp rax;
0x000e3ac0: add [rax-0x73], cl; adc eax, 0xa3af0; mov edi, edi; movsxd rax, [rdx+rdi*4]; add rax, rdx; jmp rax;
0x000e3ac1: lea rdx, [rip+0xa3af0]; mov edi, edi; movsxd rax, [rdx+rdi*4]; add rax, rdx; jmp rax;
0x000e3ac2: lea edx, [rip+0xa3af0]; mov edi, edi; movsxd rax, [rdx+rdi*4]; add rax, rdx; jmp rax;
0x000e3ac3: adc eax, 0xa3af0; mov edi, edi; movsxd rax, [rdx+rdi*4]; add rax, rdx; jmp rax;
0x000e3ac6: or al, [rax]; mov edi, edi; movsxd rax, [rdx+rdi*4]; add rax, rdx; jmp rax;
0x000e3ac8: mov edi, edi; movsxd rax, [rdx+rdi*4]; add rax, rdx; jmp rax;
0x000e3ac9: dec dword ptr [rax+0x63]; add al, 0xba; add rax, rdx; jmp rax;
0x000e3aca: movsxd rax, [rdx+rdi*4]; add rax, rdx; jmp rax;
0x000e3acb: movsxd eax, [rdx+rdi*4]; add rax, rdx; jmp rax;
0x000e3acc: add al, 0xba; add rax, rdx; jmp rax;
0x000e40ed: mov [r11+0x2c], r12d; pop r12; pop r13; pop r14; pop r15; ret;
0x000e40ee: mov [rbx+0x2c], esp; pop r12; pop r13; pop r14; pop r15; ret;
0x000e40ef: movsxd ebp, [rcx+rax*2]; pop rsp; pop r13; pop r14; pop r15; ret;
0x000e40f0: sub al, 0x41; pop rsp; pop r13; pop r14; pop r15; ret;
0x000e40ff: add [rax+0x63], cl; iretd;
0x000e4222: stosb [rdi]; add [rax], eax; add [rbx+rcx*4+0x63], cl; and [rax-0x7d], cl; ret;
0x000e4223: add [rax], eax; add [rbx+rcx*4+0x63], cl; and [rax-0x7d], cl; ret;
0x000e4225: add [rbx+rcx*4+0x63], cl; and [rax-0x7d], cl; ret;
0x000e433e: ret 0x7880;
0x000e43ce: call qword ptr [rax-0x539276bc];
0x000e445c: mov al, 0x83; ret 0x4802;
0x000e4466: push rbp; or byte ptr [rax-0x75], 4; ret 0x8948;
0x000e4467: or byte ptr [rax-0x75], 4; ret 0x8948;
0x000e473b: add [rax-0x75], cl; cmp bl, ch; iretd;
0x000e473e: cmp bl, ch; iretd;
0x000e47b7: mov es, gs:[rdx]; add bh, al; mov al, [0xfffb29e900000001]; jmp qword ptr [rsi+0xf];
0x000e47b8: mov es, [rdx]; add bh, al; mov al, [0xfffb29e900000001]; jmp qword ptr [rsi+0xf];
0x000e47ba: add bh, al; mov al, [0xfffb29e900000001]; jmp qword ptr [rsi+0xf];
0x000e47bd: mov al, [0xfffb29e900000001]; jmp qword ptr [rsi+0xf];
0x000e4a52: mov ss, cx; add [rax], eax; add [rax+0x63], cl; ret 0x15eb;
0x000e4a54: add [rax], eax; add [rax+0x63], cl; ret 0x15eb;
0x000e4a56: add [rax+0x63], cl; ret 0x15eb;
0x000e4a59: ret 0x15eb;
0x000e4a78: ret 0x3980;
0x000e4c1a: sub al, 0x89; ret 0x2de9;
0x000e4c1c: ret 0x2de9;
0x000e4c2e: call qword ptr [rax+0x2843c7];
0x000e4c72: sub al, 0x89; ret 0x8ee9;
0x000e4c74: ret 0x8ee9;
0x000e4e0d: xchg r9, rax; or eax, 0x310d8b00; fmul st, dword ptr [rip+0x5a0a8900]; pop rcx; pop rbx; ret;
0x000e4e0e: xchg ecx, eax; or eax, 0x310d8b00; fmul st, dword ptr [rip+0x5a0a8900]; pop rcx; pop rbx; ret;
0x000e4e0f: or eax, 0x310d8b00; fmul st, dword ptr [rip+0x5a0a8900]; pop rcx; pop rbx; ret;
0x000e4e10: add [rbx+0xdd8310d], cl; add [rcx+0x5b595a0a], cl; ret;
0x000e4e11: mov ecx, [rip+0xdd831]; mov [rdx], ecx; pop rdx; pop rcx; pop rbx; ret;
0x000e4e12: or eax, 0xdd831; mov [rdx], ecx; pop rdx; pop rcx; pop rbx; ret;
0x000e4e13: xor eax, ebx; or eax, 0x5a0a8900; pop rcx; pop rbx; ret;
0x000e4e14: fmul st, dword ptr [rip+0x5a0a8900]; pop rcx; pop rbx; ret;
0x000e4e15: or eax, 0x5a0a8900; pop rcx; pop rbx; ret;
0x000e4e16: add [rcx+0x5b595a0a], cl; ret;
0x000e4e17: mov [rdx], ecx; pop rdx; pop rcx; pop rbx; ret;
0x000e4e18: or bl, [rdx+0x59]; pop rbx; ret;
0x000e4e19: pop rdx; pop rcx; pop rbx; ret;
0x000e4e1a: pop rcx; pop rbx; ret;
0x000e4ed6: sbb bl, al; nop [rax+rax]; mov eax, 0x8e; syscall;
0x000e4ed8: nop [rax+rax]; mov eax, 0x8e; syscall;
0x000e4eda: test [rax], al; add [rax], al; add [rax], al; mov eax, 0x8e; syscall;
0x000e4edb: add [rax], al; add [rax], al; add [rax+0x8e], bh; syscall;
0x000e4edc: add [rax], al; add [rax], al; mov eax, 0x8e; syscall;
0x000e4edd: add [rax], al; add [rax+0x8e], bh; syscall;
0x000e4ede: add [rax], al; mov eax, 0x8e; syscall;
0x000e4edf: add [rax+0x8e], bh; syscall;
0x000e4ee0: mov eax, 0x8e; syscall;
0x000e4ee1: mov es, [rax]; add [rax], al; syscall;
0x000e4ef2: or eax, 0xd8f79; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000e4efb: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x8f; syscall;
0x000e4efe: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x8f; syscall;
0x000e4eff: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x8f; syscall;
0x000e4f01: nop [rax+rax]; nop [rax+rax]; mov eax, 0x8f; syscall;
0x000e4f02: nop [rax+rax]; nop [rax+rax]; mov eax, 0x8f; syscall;
0x000e4f03: nop [rax+rax]; nop [rax+rax]; mov eax, 0x8f; syscall;
0x000e4f05: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x8f; syscall;
0x000e4f07: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x8f; syscall;
0x000e4f09: add [rax], al; nop [rax+rax]; mov eax, 0x8f; syscall;
0x000e4f0b: nop [rax+rax]; mov eax, 0x8f; syscall;
0x000e4f0d: add [rax], r8b; mov eax, 0x8f; syscall;
0x000e4f0e: add [rax], al; mov eax, 0x8f; syscall;
0x000e4f0f: add [rax+0x8f], bh; syscall;
0x000e4f10: mov eax, 0x8f; syscall;
0x000e4f11: pop qword ptr [rax]; add [rax], al; syscall;
0x000e4f22: or eax, 0xd8f49; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000e4f2b: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x90; syscall;
0x000e4f2e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x90; syscall;
0x000e4f2f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x90; syscall;
0x000e4f31: nop [rax+rax]; nop [rax+rax]; mov eax, 0x90; syscall;
0x000e4f32: nop [rax+rax]; nop [rax+rax]; mov eax, 0x90; syscall;
0x000e4f33: nop [rax+rax]; nop [rax+rax]; mov eax, 0x90; syscall;
0x000e4f35: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x90; syscall;
0x000e4f37: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x90; syscall;
0x000e4f39: add [rax], al; nop [rax+rax]; mov eax, 0x90; syscall;
0x000e4f3b: nop [rax+rax]; mov eax, 0x90; syscall;
0x000e4f3d: add [rax], r8b; mov eax, 0x90; syscall;
0x000e4f3e: add [rax], al; mov eax, 0x90; syscall;
0x000e4f3f: add [rax+0x90], bh; syscall;
0x000e4f40: mov eax, 0x90; syscall;
0x000e4f52: or eax, 0xd8f19; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000e4f53: sbb [rdi-0x2708fff3], ecx; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000e4f5b: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x91; syscall;
0x000e4f5e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x91; syscall;
0x000e4f5f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x91; syscall;
0x000e4f61: nop [rax+rax]; nop [rax+rax]; mov eax, 0x91; syscall;
0x000e4f62: nop [rax+rax]; nop [rax+rax]; mov eax, 0x91; syscall;
0x000e4f63: nop [rax+rax]; nop [rax+rax]; mov eax, 0x91; syscall;
0x000e4f65: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x91; syscall;
0x000e4f67: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x91; syscall;
0x000e4f69: add [rax], al; nop [rax+rax]; mov eax, 0x91; syscall;
0x000e4f6b: nop [rax+rax]; mov eax, 0x91; syscall;
0x000e4f6d: add [rax], r8b; mov eax, 0x91; syscall;
0x000e4f6e: add [rax], al; mov eax, 0x91; syscall;
0x000e4f6f: add [rax+0x91], bh; syscall;
0x000e4f70: mov eax, 0x91; syscall;
0x000e4f82: or eax, 0xd8ee9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000e4f8b: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x18; syscall;
0x000e4f8e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x18; syscall;
0x000e4f8f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x18; syscall;
0x000e4f91: nop [rax+rax]; nop [rax+rax]; mov eax, 0x18; syscall;
0x000e4f92: nop [rax+rax]; nop [rax+rax]; mov eax, 0x18; syscall;
0x000e4f93: nop [rax+rax]; nop [rax+rax]; mov eax, 0x18; syscall;
0x000e4f95: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x18; syscall;
0x000e4f97: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x18; syscall;
0x000e4f99: add [rax], al; nop [rax+rax]; mov eax, 0x18; syscall;
0x000e4f9b: nop [rax+rax]; mov eax, 0x18; syscall;
0x000e4f9d: add [rax], r8b; mov eax, 0x18; syscall;
0x000e4f9e: add [rax], al; mov eax, 0x18; syscall;
0x000e4f9f: add [rax+0x18], bh; syscall;
0x000e4fa0: mov eax, 0x18; syscall;
0x000e4fa1: sbb [rax], al; add [rax], al; syscall;
0x000e4fb2: or eax, 0xd8eb9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000e4fb3: mov ecx, 0xf7000d8e; fsub st, dword ptr [rcx+rcx*4+1]; or rax, 0xffffffffffffffff; ret;
0x000e4fbb: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x92; syscall;
0x000e4fbe: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x92; syscall;
0x000e4fbf: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x92; syscall;
0x000e4fc1: nop [rax+rax]; nop [rax+rax]; mov eax, 0x92; syscall;
0x000e4fc2: nop [rax+rax]; nop [rax+rax]; mov eax, 0x92; syscall;
0x000e4fc3: nop [rax+rax]; nop [rax+rax]; mov eax, 0x92; syscall;
0x000e4fc5: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x92; syscall;
0x000e4fc7: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x92; syscall;
0x000e4fc9: add [rax], al; nop [rax+rax]; mov eax, 0x92; syscall;
0x000e4fcb: nop [rax+rax]; mov eax, 0x92; syscall;
0x000e4fcd: add [rax], r8b; mov eax, 0x92; syscall;
0x000e4fce: add [rax], al; mov eax, 0x92; syscall;
0x000e4fcf: add [rax+0x92], bh; syscall;
0x000e4fd0: mov eax, 0x92; syscall;
0x000e4fe2: or eax, 0xd8e89; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000e4fe3: mov [rsi-0x2708fff3], ecx; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000e4feb: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x93; syscall;
0x000e4fee: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x93; syscall;
0x000e4fef: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x93; syscall;
0x000e4ff1: nop [rax+rax]; nop [rax+rax]; mov eax, 0x93; syscall;
0x000e4ff2: nop [rax+rax]; nop [rax+rax]; mov eax, 0x93; syscall;
0x000e4ff3: nop [rax+rax]; nop [rax+rax]; mov eax, 0x93; syscall;
0x000e4ff5: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x93; syscall;
0x000e4ff7: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x93; syscall;
0x000e4ff9: add [rax], al; nop [rax+rax]; mov eax, 0x93; syscall;
0x000e4ffb: nop [rax+rax]; mov eax, 0x93; syscall;
0x000e4ffd: add [rax], r8b; mov eax, 0x93; syscall;
0x000e4ffe: add [rax], al; mov eax, 0x93; syscall;
0x000e4fff: add [rax+0x93], bh; syscall;
0x000e5000: mov eax, 0x93; syscall;
0x000e5012: or eax, 0xd8e59; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000e501b: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x94; syscall;
0x000e501e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x94; syscall;
0x000e501f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x94; syscall;
0x000e5021: nop [rax+rax]; nop [rax+rax]; mov eax, 0x94; syscall;
0x000e5022: nop [rax+rax]; nop [rax+rax]; mov eax, 0x94; syscall;
0x000e5023: nop [rax+rax]; nop [rax+rax]; mov eax, 0x94; syscall;
0x000e5025: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x94; syscall;
0x000e5027: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x94; syscall;
0x000e5029: add [rax], al; nop [rax+rax]; mov eax, 0x94; syscall;
0x000e502b: nop [rax+rax]; mov eax, 0x94; syscall;
0x000e502d: add [rax], r8b; mov eax, 0x94; syscall;
0x000e502e: add [rax], al; mov eax, 0x94; syscall;
0x000e502f: add [rax+0x94], bh; syscall;
0x000e5030: mov eax, 0x94; syscall;
0x000e5042: or eax, 0xd8e29; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000e5043: sub [rsi-0x2708fff3], ecx; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000e5045: or eax, 0x64d8f700; mov [rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000e5060: mov r8, rsi; cmp rsi, 0x7fffffff; mov esi, 0x7fffffff; mov eax, 0xcc; cmovbe rsi, r8; syscall;
0x000e5061: mov eax, esi; cmp rsi, 0x7fffffff; mov esi, 0x7fffffff; mov eax, 0xcc; cmovbe rsi, r8; syscall;
0x000e5063: cmp rsi, 0x7fffffff; mov esi, 0x7fffffff; mov eax, 0xcc; cmovbe rsi, r8; syscall;
0x000e5064: cmp esi, 0x7fffffff; mov esi, 0x7fffffff; mov eax, 0xcc; cmovbe rsi, r8; syscall;
0x000e506a: mov esi, 0x7fffffff; mov eax, 0xcc; cmovbe rsi, r8; syscall;
0x000e506f: mov eax, 0xcc; cmovbe rsi, r8; syscall;
0x000e5072: add [rax], al; cmovbe rsi, r8; syscall;
0x000e5074: cmovbe rsi, r8; syscall;
0x000e5075: cmovbe esi, eax; syscall;
0x000e509b: ret 0x8fe8;
0x000e509e: add esp, esi; inc dword ptr [rbp+0x31]; leave; add rsp, 8; mov eax, r9d; ret;
0x000e509f: hlt; inc dword ptr [rbp+0x31]; leave; add rsp, 8; mov eax, r9d; ret;
0x000e50a0: inc dword ptr [rbp+0x31]; leave; add rsp, 8; mov eax, r9d; ret;
0x000e50a1: xor r9d, r9d; add rsp, 8; mov eax, r9d; ret;
0x000e50a2: xor ecx, ecx; add rsp, 8; mov eax, r9d; ret;
0x000e50a3: leave; add rsp, 8; mov eax, r9d; ret;
0x000e50a4: add rsp, 8; mov eax, r9d; ret;
0x000e50a5: add esp, 8; mov eax, r9d; ret;
0x000e50b0: mov rdx, [rip+0xd8db9]; neg eax; mov r9d, 0xffffffff; mov fs:[rdx], eax; mov eax, r9d; ret;
0x000e50b1: mov edx, [rip+0xd8db9]; neg eax; mov r9d, 0xffffffff; mov fs:[rdx], eax; mov eax, r9d; ret;
0x000e50b2: adc eax, 0xd8db9; neg eax; mov r9d, 0xffffffff; mov fs:[rdx], eax; mov eax, r9d; ret;
0x000e50b4: lea ecx, [rip+0x41d8f700]; mov ecx, 0xffffffff; mov fs:[rdx], eax; mov eax, r9d; ret;
0x000e50b5: or eax, 0x41d8f700; mov ecx, 0xffffffff; mov fs:[rdx], eax; mov eax, r9d; ret;
0x000e50b7: neg eax; mov r9d, 0xffffffff; mov fs:[rdx], eax; mov eax, r9d; ret;
0x000e50b9: mov r9d, 0xffffffff; mov fs:[rdx], eax; mov eax, r9d; ret;
0x000e50ba: mov ecx, 0xffffffff; mov fs:[rdx], eax; mov eax, r9d; ret;
0x000e50bf: mov fs:[rdx], eax; mov eax, r9d; ret;
0x000e50c0: mov [rdx], eax; mov eax, r9d; ret;
0x000e50c1: add al, [rcx+rcx*4-0x38]; ret;
0x000e50c4: enter 0x66c3, 0x2e; nop [rax+rax]; mov eax, 0xcb; syscall;
0x000e50c6: nop [rax+rax]; mov eax, 0xcb; syscall;
0x000e50c7: nop [rax+rax]; mov eax, 0xcb; syscall;
0x000e50c8: nop [rax+rax]; mov eax, 0xcb; syscall;
0x000e50ca: test [rax], al; add [rax], al; add [rax], al; mov eax, 0xcb; syscall;
0x000e50cb: add [rax], al; add [rax], al; add [rax+0xcb], bh; syscall;
0x000e50cc: add [rax], al; add [rax], al; mov eax, 0xcb; syscall;
0x000e50cd: add [rax], al; add [rax+0xcb], bh; syscall;
0x000e50ce: add [rax], al; mov eax, 0xcb; syscall;
0x000e50cf: add [rax+0xcb], bh; syscall;
0x000e50d0: mov eax, 0xcb; syscall;
0x000e510a: adc eax, 0xd8d61; neg eax; mov r8d, 0xffffffff; mov fs:[rdx], eax; mov eax, r8d; ret;
0x000e510c: lea ecx, [rip+0x41d8f700]; mov eax, 0xffffffff; mov fs:[rdx], eax; mov eax, r8d; ret;
0x000e510d: or eax, 0x41d8f700; mov eax, 0xffffffff; mov fs:[rdx], eax; mov eax, r8d; ret;
0x000e5129: push rdi; adc [rdx+8], dh; setne al; movzx eax, al; neg eax; ret;
0x000e512a: adc [rdx+8], dh; setne al; movzx eax, al; neg eax; ret;
0x000e512c: or [rdi], cl; xchg ebp, eax; ror byte ptr [rdi], 0xb6; shl bh, 0xd8; ret;
0x000e512d: setne al; movzx eax, al; neg eax; ret;
0x000e512e: xchg ebp, eax; ror byte ptr [rdi], 0xb6; shl bh, 0xd8; ret;
0x000e516a: add [rax], al; add cl, ch; out dx, al; add ah, dh; jmp qword ptr [rsi+0x66];
0x000e516c: add cl, ch; out dx, al; add ah, dh; jmp qword ptr [rsi+0x66];
0x000e516e: out dx, al; add ah, dh; jmp qword ptr [rsi+0x66];
0x000e516f: add ah, dh; jmp qword ptr [rsi+0x66];
0x000e51db: add [rax], al; add [rax], al; add [rbx-0x7cb7f717], al; ret 0x4801;
0x000e51dd: add [rax], al; add [rbx-0x7cb7f717], al; ret 0x4801;
0x000e51df: add [rbx-0x7cb7f717], al; ret 0x4801;
0x000e51e2: or [rax-0x7d], cl; ret 0x4801;
0x000e522e: add [rax], al; add [rbp+0x53], dh; add rsp, 0x38; ret;
0x000e5230: add [rbp+0x53], dh; add rsp, 0x38; ret;
0x000e5232: push rbx; add rsp, 0x38; ret;
0x000e538b: or [rax-0x77], cl; push rdx; fmul st, dword ptr [rax-0x7d]; ret 0x4928;
0x000e538e: push rdx; fmul st, dword ptr [rax-0x7d]; ret 0x4928;
0x000e538f: fmul st, dword ptr [rax-0x7d]; ret 0x4928;
0x000e5392: ret 0x4928;
0x000e595a: add [rcx-0x73], al; jmp qword ptr [r14+0xf];
0x000e5e1b: ret 0xd289;
0x000e611e: call qword ptr [rax+0x6617b70f];
0x000e6160: out dx, eax; mov eax, [rdx+8]; ret;
0x000e6161: mov eax, [rdx+8]; ret;
0x000e619a: shl byte ptr [rbp-0x69], cl; cmp dword ptr [rdi+0x14], 0x1000000; mov edx, 2; cmove eax, edx; ret;
0x000e619c: xchg edi, eax; cmp dword ptr [rdi+0x14], 0x1000000; mov edx, 2; cmove eax, edx; ret;
0x000e619d: cmp dword ptr [rdi+0x14], 0x1000000; mov edx, 2; cmove eax, edx; ret;
0x000e619f: adc al, 0; add [rax], al; add [rdx+2], edi; cmove eax, edx; ret;
0x000e61a0: add [rax], al; add [rcx], al; mov edx, 2; cmove eax, edx; ret;
0x000e61a1: add [rax], al; add [rdx+2], edi; cmove eax, edx; ret;
0x000e61a2: add [rcx], al; mov edx, 2; cmove eax, edx; ret;
0x000e61a3: add [rdx+2], edi; cmove eax, edx; ret;
0x000e61a4: mov edx, 2; cmove eax, edx; ret;
0x000e61a5: add al, [rax]; add [rax], al; cmove eax, edx; ret;
0x000e61a7: add [rax], al; cmove eax, edx; ret;
0x000e61ad: nop [rax]; movzx eax, byte ptr [rdi+9]; and eax, 0xf; ret;
0x000e61b0: movzx eax, byte ptr [rdi+9]; and eax, 0xf; ret;
0x000e61b4: and eax, 0xf; ret;
0x000e61b8: nop [rax+rax]; xor eax, eax; cmp ecx, 0xc0fe; setne al; lea eax, [rax+rax*8+5]; ret;
0x000e61bd: add [rax], al; add [rcx], dh; rol byte ptr [rcx+0xc0fef9], 0; setne al; lea eax, [rax+rax*8+5]; ret;
0x000e61be: add [rax], al; xor eax, eax; cmp ecx, 0xc0fe; setne al; lea eax, [rax+rax*8+5]; ret;
0x000e61bf: add [rcx], dh; rol byte ptr [rcx+0xc0fef9], 0; setne al; lea eax, [rax+rax*8+5]; ret;
0x000e61c0: xor eax, eax; cmp ecx, 0xc0fe; setne al; lea eax, [rax+rax*8+5]; ret;
0x000e61c1: rol byte ptr [rcx+0xc0fef9], 0; setne al; lea eax, [rax+rax*8+5]; ret;
0x000e61c2: cmp ecx, 0xc0fe; setne al; lea eax, [rax+rax*8+5]; ret;
0x000e61c3: stc; inc al; add [rax], al; setne al; lea eax, [rax+rax*8+5]; ret;
0x000e61c4: inc al; add [rax], al; setne al; lea eax, [rax+rax*8+5]; ret;
0x000e61c5: rol byte ptr [rax], 0; setne al; lea eax, [rax+rax*8+5]; ret;
0x000e61c6: add [rax], al; setne al; lea eax, [rax+rax*8+5]; ret;
0x000e61c8: setne al; lea eax, [rax+rax*8+5]; ret;
0x000e61cb: lea eax, [rax+rax*8+5]; ret;
0x000e6290: add esi, esi; ret 0xf01;
0x000e62b9: rep ret;
0x000e654c: ret 0x3944;
0x000e663e: inc dword ptr [rcx-0x77]; ret 0xce0f;
0x000e6641: ret 0xce0f;
0x000e6701: ret 0xd101;
0x000e67e1: cmp ebx, [rbp+0x36e8000a]; fdivrp st(4), st; jmp qword ptr [rsi+0xf];
0x000e67e4: add al, ch; fdivrp st(4), st; jmp qword ptr [rsi+0xf];
0x000e67e6: fdivrp st(4), st; jmp qword ptr [rsi+0xf];
0x000e67e7: fdivrp st(4), st; jmp qword ptr [rsi+0xf];
0x000e6a75: xor [rcx-0x77], al; fmul st, qword ptr [rax-0x77]; ret;
0x000e6a78: fmul st, qword ptr [rax-0x77]; ret;
0x000e6ba5: ret 0x49e9;
0x000e6d12: jmp far fword ptr [rax+0x48397580];
0x000e6dc0: inc dword ptr [rbx+rcx*4+0x43]; adc [rbp-0x7b], al; ror byte ptr [rdi], 0x85; ret;
0x000e6dc3: adc [r13-0x7b], al; ror byte ptr [rdi], 0x85; ret;
0x000e6dc4: adc [rbp-0x7b], al; ror byte ptr [rdi], 0x85; ret;
0x000e6e06: ret 0x4e8;
0x000e700e: add [rdi], ecx; xchg esp, eax; rol byte ptr [rcx-0x7d], 0xf8; add [rdi], ecx; xchg esp, eax; ret 0xd009;
0x000e7010: xchg esp, eax; rol byte ptr [rcx-0x7d], 0xf8; add [rdi], ecx; xchg esp, eax; ret 0xd009;
0x000e7011: rol byte ptr [rcx-0x7d], 0xf8; add [rdi], ecx; xchg esp, eax; ret 0xd009;
0x000e7014: clc; add [rdi], ecx; xchg esp, eax; ret 0xd009;
0x000e7015: add [rdi], ecx; xchg esp, eax; ret 0xd009;
0x000e7017: xchg esp, eax; ret 0xd009;
0x000e7018: ret 0xd009;
0x000e70fc: cmovs eax, [rbx-0x76b70f20]; ret;
0x000e7124: adc [rbp-0x307bf037], al; add al, [rax]; add [rbx-0x76b7fd07], al; ret 0x940f;
0x000e7128: test bh, cl; add al, [rax]; add [rbx-0x76b7fd07], al; ret 0x940f;
0x000e712a: add al, [rax]; add [rbx-0x76b7fd07], al; ret 0x940f;
0x000e712c: add [rbx-0x76b7fd07], al; ret 0x940f;
0x000e712e: stc; add cl, [rax-0x77]; ret 0x940f;
0x000e712f: add cl, [rax-0x77]; ret 0x940f;
0x000e7132: ret 0x940f;
0x000e731f: imul edi, esp, 0xffffffff; jmp qword ptr [rax+rcx*2-0x75];
0x000e738c: push 0; lea r8, [rdx+r15]; mov rsi, [rbp-0x1e0]; mov rdx, [r12]; mov rax, [rbp-0x1f0]; call rax;
0x000e738d: add [rsi-0x73], cl; add al, 0x3a; mov rsi, [rbp-0x1e0]; mov rdx, [r12]; mov rax, [rbp-0x1f0]; call rax;
0x000e738e: lea r8, [rdx+r15]; mov rsi, [rbp-0x1e0]; mov rdx, [r12]; mov rax, [rbp-0x1f0]; call rax;
0x000e738f: lea eax, [rdx+rdi]; mov rsi, [rbp-0x1e0]; mov rdx, [r12]; mov rax, [rbp-0x1f0]; call rax;
0x000e7390: add al, 0x3a; mov rsi, [rbp-0x1e0]; mov rdx, [r12]; mov rax, [rbp-0x1f0]; call rax;
0x000e7392: mov rsi, [rbp-0x1e0]; mov rdx, [r12]; mov rax, [rbp-0x1f0]; call rax;
0x000e7393: mov esi, [rbp-0x1e0]; mov rdx, [r12]; mov rax, [rbp-0x1f0]; call rax;
0x000e7398: dec dword ptr [rcx-0x75]; adc al, 0x24; mov rax, [rbp-0x1f0]; call rax;
0x000e7399: mov rdx, [r12]; mov rax, [rbp-0x1f0]; call rax;
0x000e739a: mov edx, [rsp]; mov rax, [rbp-0x1f0]; call rax;
0x000e739b: adc al, 0x24; mov rax, [rbp-0x1f0]; call rax;
0x000e739c: and al, 0x48; mov eax, [rbp-0x1f0]; call rax;
0x000e739d: mov rax, [rbp-0x1f0]; call rax;
0x000e739e: mov eax, [rbp-0x1f0]; call rax;
0x000e75bb: jmp far fword ptr [rdx];
0x000e75d0: mov rdi, [rbp-0x1c0]; push rax; mov rax, [rbp-0x190]; mov r8, [rax+8]; mov rcx, [rax]; call r12;
0x000e75d1: mov edi, [rbp-0x1c0]; push rax; mov rax, [rbp-0x190]; mov r8, [rax+8]; mov rcx, [rax]; call r12;
0x000e75d2: mov ebp, 0xfffffe40; push rax; mov rax, [rbp-0x190]; mov r8, [rax+8]; mov rcx, [rax]; call r12;
0x000e75d7: push rax; mov rax, [rbp-0x190]; mov r8, [rax+8]; mov rcx, [rax]; call r12;
0x000e75d8: mov rax, [rbp-0x190]; mov r8, [rax+8]; mov rcx, [rax]; call r12;
0x000e75d9: mov eax, [rbp-0x190]; mov r8, [rax+8]; mov rcx, [rax]; call r12;
0x000e75df: mov r8, [rax+8]; mov rcx, [rax]; call r12;
0x000e75e0: mov eax, [rax+8]; mov rcx, [rax]; call r12;
0x000e75e3: mov rcx, [rax]; call r12;
0x000e75e4: mov ecx, [rax]; call r12;
0x000e7a3d: rol dword ptr [rcx], cl; ret 0xe283;
0x000e7bef: or ecx, [rax-0x77]; rol dword ptr [rbp+0x31], 1; ror byte ptr [rax-0x7b], cl; shl byte ptr [rbx+rbp-0x75], 0x70; adc [rax-0x77], cl; ret 0x8b48;
0x000e7bf2: rol dword ptr [rbp+0x31], 1; ror byte ptr [rax-0x7b], cl; shl byte ptr [rbx+rbp-0x75], 0x70; adc [rax-0x77], cl; ret 0x8b48;
0x000e7bf5: ror byte ptr [rax-0x7b], cl; shl byte ptr [rbx+rbp-0x75], 0x70; adc [rax-0x77], cl; ret 0x8b48;
0x000e7bf8: shl byte ptr [rbx+rbp-0x75], 0x70; adc [rax-0x77], cl; ret 0x8b48;
0x000e7bfa: sub ecx, [rbx-0x76b7ef90]; ret 0x8b48;
0x000e7bfd: adc [rax-0x77], cl; ret 0x8b48;
0x000e7c9b: or al, [rbp+0x31]; rol byte ptr [rbx+0xf4104f8], cl; xchg esp, eax; ret 0x8341;
0x000e7c9e: rol byte ptr [rbx+0xf4104f8], cl; xchg esp, eax; ret 0x8341;
0x000e7ca4: xchg esp, eax; ret 0x8341;
0x000e7e0e: call qword ptr [rax+0x28bd8b48];
0x000e7e67: jmp qword ptr [rsp+rcx*2-0x75];
0x000e7e85: mov edx, 0x100; cmove rdi, r14; add r8, r15; add rbx, fs:[0]; mov r9, rbx; call r12;
0x000e7e88: add [rax], al; cmove rdi, r14; add r8, r15; add rbx, fs:[0]; mov r9, rbx; call r12;
0x000e7e89: add [rcx+0xf], cl; dec byte ptr [rbp+1]; clc; add rbx, fs:[0]; mov r9, rbx; call r12;
0x000e7e8a: cmove rdi, r14; add r8, r15; add rbx, fs:[0]; mov r9, rbx; call r12;
0x000e7e8b: cmove edi, esi; add r8, r15; add rbx, fs:[0]; mov r9, rbx; call r12;
0x000e7e8d: dec byte ptr [rbp+1]; clc; add rbx, fs:[0]; mov r9, rbx; call r12;
0x000e7e8e: add r8, r15; add rbx, fs:[0]; mov r9, rbx; call r12;
0x000e7e8f: add eax, edi; add rbx, fs:[0]; mov r9, rbx; call r12;
0x000e7e90: clc; add rbx, fs:[0]; mov r9, rbx; call r12;
0x000e7e91: add rbx, fs:[0]; mov r9, rbx; call r12;
0x000e7e92: add rbx, [0]; mov r9, rbx; call r12;
0x000e7e93: add ebx, [0]; mov r9, rbx; call r12;
0x000e7e94: sbb al, 0x25; add [rax], al; add [rax], al; mov r9, rbx; call r12;
0x000e7e95: and eax, 0; mov r9, rbx; call r12;
0x000e7e96: add [rax], al; add [rax], al; mov r9, rbx; call r12;
0x000e7e98: add [rax], al; mov r9, rbx; call r12;
0x000e7e9a: mov r9, rbx; call r12;
0x000e7e9b: mov ecx, ebx; call r12;
0x000e7ee0: inc dword ptr [rbp+0x31]; jmp qword ptr [rcx+rax*2-0x7d];
0x000e7ee3: jmp qword ptr [rcx+rax*2-0x7d];
0x000e7ff1: jmp qword ptr [rsi-0x3f];
0x000e7ff4: ret 0xf08;
0x000e8011: or al, [rbp+0x31]; rol byte ptr [rbx+0xf4104f8], cl; xchg esp, eax; ret 0x8944;
0x000e8014: rol byte ptr [rbx+0xf4104f8], cl; xchg esp, eax; ret 0x8944;
0x000e801a: xchg esp, eax; ret 0x8944;
0x000e80b0: dec dword ptr [rdi]; ret;
0x000e8180: test [rcx], al; or al, [rax]; add [rcx-0x75], al; push rbp; add al, 0xf7; ret 0xfffd;
0x000e8182: or al, [rax]; add [rcx-0x75], al; push rbp; add al, 0xf7; ret 0xfffd;
0x000e8184: add [rcx-0x75], al; push rbp; add al, 0xf7; ret 0xfffd;
0x000e8187: push rbp; add al, 0xf7; ret 0xfffd;
0x000e8188: add al, 0xf7; ret 0xfffd;
0x000e818e: dec dword ptr [rdi]; xchg ebp, eax; ret;
0x000e8193: cli; or cl, [rdi]; xchg ebp, eax; ret 0xd320;
0x000e8194: or cl, [rdi]; xchg ebp, eax; ret 0xd320;
0x000e8196: xchg ebp, eax; ret 0xd320;
0x000e8197: ret 0xd320;
0x000e82a4: mov rax, [rip+0xd94f5]; lea rsi, [rip-0x2d02]; lea rdi, [rip+0xda3cb]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000e82a5: mov eax, [rip+0xd94f5]; lea rsi, [rip-0x2d02]; lea rdi, [rip+0xda3cb]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000e82a6: add eax, 0xd94f5; lea rsi, [rip-0x2d02]; lea rdi, [rip+0xda3cb]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000e82aa: add [rax-0x73], cl; xor eax, 0xffffd2fe; lea rdi, [rip+0xda3cb]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000e82ab: lea rsi, [rip-0x2d02]; lea rdi, [rip+0xda3cb]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000e82ac: lea esi, [rip-0x2d02]; lea rdi, [rip+0xda3cb]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000e82ad: xor eax, 0xffffd2fe; lea rdi, [rip+0xda3cb]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000e82af: sar bh, cl; dec dword ptr [rax-0x73]; cmp eax, 0xda3cb; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000e82b1: dec dword ptr [rax-0x73]; cmp eax, 0xda3cb; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000e82b2: lea rdi, [rip+0xda3cb]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000e82b3: lea edi, [rip+0xda3cb]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000e82b4: cmp eax, 0xda3cb; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000e82b6: mov [0x486411c8c148000d], eax; xor eax, [0x30]; call rax;
0x000e82b7: or eax, 0xc8c14800; adc [rax+rcx*2+0x33], esp; add al, 0x25; xor [rax], al; add [rax], al; call rax;
0x000e84db: call far fword ptr [rax+rax];
0x000e85cd: ror byte ptr [rax-0x77], 1; ret 0xf883;
0x000e8bef: add [rax], al; add al, ch; cmc; jmp qword ptr [rbx+rcx*4+4];
0x000e8bf1: add al, ch; cmc; jmp qword ptr [rbx+rcx*4+4];
0x000e8bf5: cmc; jmp qword ptr [rbx+rcx*4+4];
0x000e8d00: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xd9966]; syscall;
0x000e8d01: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xd9966]; syscall;
0x000e8d02: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xd9966]; syscall;
0x000e8d03: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xd9966]; syscall;
0x000e8d04: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xd9966]; syscall;
0x000e8d05: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xd9966]; syscall;
0x000e8d06: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xd9966]; syscall;
0x000e8d07: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xd9966]; syscall;
0x000e8d08: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xd9966]; syscall;
0x000e8d09: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xd9966]; syscall;
0x000e8d0a: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xd9966; syscall;
0x000e8d0b: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xd9966]; syscall;
0x000e8d0c: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xd9966]; syscall;
0x000e8d0d: add [rax+0xca], bh; lea rdi, [rip+0xd9966]; syscall;
0x000e8d0e: mov eax, 0xca; lea rdi, [rip+0xd9966]; syscall;
0x000e8d10: add [rax], al; add [rax-0x73], cl; cmp eax, 0xd9966; syscall;
0x000e8d11: add [rax], al; lea rdi, [rip+0xd9966]; syscall;
0x000e8d12: add [rax-0x73], cl; cmp eax, 0xd9966; syscall;
0x000e8d13: lea rdi, [rip+0xd9966]; syscall;
0x000e8d14: lea edi, [rip+0xd9966]; syscall;
0x000e8d15: cmp eax, 0xd9966; syscall;
0x000e8dd7: sub [rax-0x7d], cl; ret 0x4801;
0x000e8df2: adc [rdx], ecx; add cl, ch; ret 0xfff4;
0x000e8df4: add cl, ch; ret 0xfff4;
0x000e8df6: ret 0xfff4;
0x000e8ec7: mov rax, rbp; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret;
0x000e8ec8: mov eax, ebp; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret;
0x000e8ff6: adc [rbp+0x31], al; rcr byte ptr [rbx+0x44], 0x89; rcr byte ptr [rbp+0x41], 0x5c; pop r13; pop r14; ret;
0x000e8ff9: rcr byte ptr [rbx+0x44], 0x89; rcr byte ptr [rbp+0x41], 0x5c; pop r13; pop r14; ret;
0x000e8ffb: mov eax, r8d; pop rbp; pop r12; pop r13; pop r14; ret;
0x000e902d: add [rbx+0x5d], bl; mov eax, r8d; pop r12; pop r13; pop r14; ret;
0x000e902f: pop rbp; mov eax, r8d; pop r12; pop r13; pop r14; ret;
0x000e9030: mov eax, r8d; pop r12; pop r13; pop r14; ret;
0x000e9031: mov eax, eax; pop r12; pop r13; pop r14; ret;
0x000e9032: rol byte ptr [rcx+0x5c], 0x41; pop rbp; pop r14; ret;
0x000e90b1: mov rax, r14; pop rbp; pop r12; pop r13; pop r14; ret;
0x000e90ca: out 0xeb, al; iretd;
0x000e90f1: ret 0xfff3;
0x000e9148: mov qword ptr [rax+rdx*8], 0; xor eax, eax; pop rbx; pop rbp; pop r12; ret;
0x000e9149: mov dword ptr [rax+rdx*8], 0; xor eax, eax; pop rbx; pop rbp; pop r12; ret;
0x000e914b: rol byte ptr [rax], 1; add [rax], al; add [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret;
0x000e914d: add [rax], al; add [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret;
0x000e923e: add eax, 0x5d5b0000; pop r12; pop r13; pop r14; pop r15; ret;
0x000e92e9: add [rax], al; add [rbx-0x7bf0fe02], al; iretd;
0x000e92eb: add [rbx-0x7bf0fe02], al; iretd;
0x000e93dd: ror byte ptr [rax-0x75], cl; test [rax], ah; add [rax], al; add [rax+0x39], cl; ret 0x840f;
0x000e93e0: test [rax], ah; add [rax], al; add [rax+0x39], cl; ret 0x840f;
0x000e93e1: and al, 0xe0; add [rax], al; add [rax+0x39], cl; ret 0x840f;
0x000e93fa: add [rax-0x75], cl; xchg esp, eax; and al, 0xf0; add [rax], al; add [rcx+rcx*4+4], cl; ret 0x8b48;
0x000e93fd: xchg esp, eax; and al, 0xf0; add [rax], al; add [rcx+rcx*4+4], cl; ret 0x8b48;
0x000e93fe: and al, 0xf0; add [rax], al; add [rcx+rcx*4+4], cl; ret 0x8b48;
0x000e9400: add [rax], al; add [rcx+rcx*4+4], cl; ret 0x8b48;
0x000e9402: add [rcx+rcx*4+4], cl; ret 0x8b48;
0x000e9616: add [rax], al; add [rcx-0x39], cl; add [r8], r8b; add [rax], al; add [rax-0x7d], cl; ret;
0x000e9618: add [rcx-0x39], cl; add [r8], r8b; add [rax], al; add [rax-0x7d], cl; ret;
0x000e961b: add [r8], r8b; add [rax], al; add [rax-0x7d], cl; ret;
0x000e98f3: jmp qword ptr [rbx+rax*4+0x38];
0x000e9971: add [rax-0x7d], cl; clc; push qword ptr [rax+rbx*8-0x77]; ret 0xc085;
0x000e9974: clc; push qword ptr [rax+rbx*8-0x77]; ret 0xc085;
0x000e9975: push qword ptr [rax+rbx*8-0x77]; ret 0xc085;
0x000e9bf9: pop rbp; add [rcx+rbx*2+0x5b], dh; xor eax, eax; pop rbp; pop r12; ret;
0x000e9bfa: add [rcx+rbx*2+0x5b], dh; xor eax, eax; pop rbp; pop r12; ret;
0x000e9bfc: pop rcx; pop rbx; xor eax, eax; pop rbp; pop r12; ret;
0x000e9c51: inc dword ptr [rbp+0x5ba774c0]; mov eax, 5; pop rbp; pop r12; ret;
0x000e9c53: shl byte ptr [rdi+0x5b], 0xb8; add eax, 0x5d000000; pop r12; ret;
0x000e9c55: cmpsd [rsi], [rdi]; pop rbx; mov eax, 5; pop rbp; pop r12; ret;
0x000e9c56: pop rbx; mov eax, 5; pop rbp; pop r12; ret;
0x000e9c57: mov eax, 5; pop rbp; pop r12; ret;
0x000e9c58: add eax, 0x5d000000; pop r12; ret;
0x000e9ef2: mov ah, 0xf3; call far fword ptr [rax+0x5a];
0x000ea074: ret 0xe973;
0x000ea280: mov edi, 0xfffeb3e9; jmp qword ptr [rsi+0x2e];
0x000ea762: add [rcx+0xf], eax; xchg ebp, eax; mov dword ptr [rbp+0xf], 0x145ffb6; jmp qword ptr [rsi-0x70];
0x000ea765: xchg ebp, eax; mov dword ptr [rbp+0xf], 0x145ffb6; jmp qword ptr [rsi-0x70];
0x000ea766: mov dword ptr [rbp+0xf], 0x145ffb6; jmp qword ptr [rsi-0x70];
0x000ea76a: inc dword ptr [rbp+1]; jmp qword ptr [rsi-0x70];
0x000ea876: sbb [rcx-0x17efdbbc], cl; cwde; stosb [rdi]; call far fword ptr [rax+0x5a];
0x000ea87a: adc al, ch; cwde; stosb [rdi]; call far fword ptr [rax+0x5a];
0x000ea87c: cwde; stosb [rdi]; call far fword ptr [rax+0x5a];
0x000ea87d: stosb [rdi]; call far fword ptr [rax+0x5a];
0x000ea87e: call far fword ptr [rax+0x5a];
0x000ea8a5: push rsp; and al, 0x38; add cl, ch; ret 0xfffe;
0x000ea8a6: and al, 0x38; add cl, ch; ret 0xfffe;
0x000eab04: xchg [rdx+1], edi; add [rax], al; lea rdx, [rip+0x9cfb8]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000eab06: add [rax], eax; add [rax-0x73], cl; adc eax, 0x9cfb8; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000eab07: add [rax], al; lea rdx, [rip+0x9cfb8]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000eab08: add [rax-0x73], cl; adc eax, 0x9cfb8; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000eab09: lea rdx, [rip+0x9cfb8]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000eab0a: lea edx, [rip+0x9cfb8]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000eab0b: adc eax, 0x9cfb8; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000eab0c: mov eax, 0x480009cf; movsxd eax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000eab0e: or [rax], eax; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000eab91: dec dword ptr [rdi]; test [rbx], ebx; adc al, [rax]; add [rbp-0x7b], cl; test byte ptr [rdi], 0x84; iretd;
0x000eab93: test [rbx], ebx; adc al, [rax]; add [rbp-0x7b], cl; test byte ptr [rdi], 0x84; iretd;
0x000eab95: adc al, [rax]; add [rbp-0x7b], cl; test byte ptr [rdi], 0x84; iretd;
0x000eab97: add [rbp-0x7b], cl; test byte ptr [rdi], 0x84; iretd;
0x000eab9a: test byte ptr [rdi], 0x84; iretd;
0x000eac9f: cdq; hlt; jmp qword ptr [rsi+0xf];
0x000ead1c: fidivr st, word ptr [rbx*1-0x49f0f089]; ror byte ptr [rcx+0x63], 4; test [rcx+rax-0x20], cl; jmp rax;
0x000ead1e: sbb eax, 0xb60f0f77; ror byte ptr [rcx+0x63], 4; test [rcx+rax-0x20], cl; jmp rax;
0x000ead21: movzx eax, al; movsxd rax, [r12+rax*4]; add rax, r12; jmp rax;
0x000ead22: mov dh, 0xc0; movsxd rax, [r12+rax*4]; add rax, r12; jmp rax;
0x000ead23: ror byte ptr [rcx+0x63], 4; test [rcx+rax-0x20], cl; jmp rax;
0x000eae9a: cmp [rbx-0x57cd216], al; adc dh, [rdi+0x10]; lea rcx, [rip+0x9cd56]; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx;
0x000eae9d: sub eax, 0x7712fa83; adc [rax-0x73], cl; or eax, 0x9cd56; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx;
0x000eae9f: cli; adc dh, [rdi+0x10]; lea rcx, [rip+0x9cd56]; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx;
0x000eaea0: adc dh, [rdi+0x10]; lea rcx, [rip+0x9cd56]; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx;
0x000eaea2: adc [rax-0x73], cl; or eax, 0x9cd56; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx;
0x000eaea3: lea rcx, [rip+0x9cd56]; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx;
0x000eaea4: lea ecx, [rip+0x9cd56]; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx;
0x000eaea5: or eax, 0x9cd56; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx;
0x000eaea6: push rsi; int 9; add [rax+0x63], cl; adc al, 0x91; add rdx, rcx; jmp rdx;
0x000eaea7: int 9; add [rax+0x63], cl; adc al, 0x91; add rdx, rcx; jmp rdx;
0x000eaea8: or [rax], eax; movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx;
0x000eaea9: add [rax+0x63], cl; adc al, 0x91; add rdx, rcx; jmp rdx;
0x000eaeaa: movsxd rdx, [rcx+rdx*4]; add rdx, rcx; jmp rdx;
0x000eaeab: movsxd edx, [rcx+rdx*4]; add rdx, rcx; jmp rdx;
0x000eaeac: adc al, 0x91; add rdx, rcx; jmp rdx;
0x000eaead: xchg ecx, eax; add rdx, rcx; jmp rdx;
0x000eaeae: add rdx, rcx; jmp rdx;
0x000eaeaf: add edx, ecx; jmp rdx;
0x000eaeca: or cl, [rdx]; add al, ch; xchg rdi, rax; hlt; jmp qword ptr [rsi+0xf];
0x000eaecc: add al, ch; xchg rdi, rax; hlt; jmp qword ptr [rsi+0xf];
0x000eaece: xchg rdi, rax; hlt; jmp qword ptr [rsi+0xf];
0x000eaecf: xchg edi, eax; hlt; jmp qword ptr [rsi+0xf];
0x000eb225: call qword ptr [rbx+0xd];
0x000eb23a: push rbx; or eax, 0x2c8b4800; ret 0x9be9;
0x000eb23b: or eax, 0x2c8b4800; ret 0x9be9;
0x000eb240: ret 0x9be9;
0x000eb26f: and [rax-0x73], cl; adc eax, 0x9c9d5; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000eb270: lea rdx, [rip+0x9c9d5]; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000eb271: lea edx, [rip+0x9c9d5]; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000eb272: adc eax, 0x9c9d5; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000eb274: leave; or [rax], eax; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000eb275: or [rax], eax; movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000eb276: add [rdi], cl; mov dh, 0xc0; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000eb277: movzx eax, al; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000eb278: mov dh, 0xc0; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000eb4de: call qword ptr [rax+0x24b48d48];
0x000eb528: sub edx, edi; dec dword ptr [rcx-0x77]; ret;
0x000eb529: cli; dec dword ptr [rcx-0x77]; ret;
0x000eb52a: dec dword ptr [rcx-0x77]; ret;
0x000eb69e: call qword ptr [rax+0x7d80];
0x000eb79e: add [rax-0x75], ecx; xor ecx, [rax-0x7d]; ret;
0x000eb7a1: xor ecx, [rax-0x7d]; ret;
0x000eb7e7: dec dword ptr [rax-0x73]; adc eax, 0x9c4d1; mov r11, [rsp]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000eb7e8: lea rdx, [rip+0x9c4d1]; mov r11, [rsp]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000eb7e9: lea edx, [rip+0x9c4d1]; mov r11, [rsp]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000eb7ea: adc eax, 0x9c4d1; mov r11, [rsp]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000eb7eb: rol esp, 1; or [rax], eax; mov r11, [rsp]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000eb7ed: or [rax], eax; mov r11, [rsp]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000eb7ee: add [rbx+rcx*4+0x1c], cl; and al, 0x48; movsxd eax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000eb7ef: mov r11, [rsp]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000eb7f0: mov ebx, [rsp]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000eb7f1: sbb al, 0x24; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000eb7f2: and al, 0x48; movsxd eax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x000eb859: adc ebp, ecx; xchg esp, eax; idiv edi; call qword ptr [rax+0x1ec8349];
0x000eb85b: xchg esp, eax; idiv edi; call qword ptr [rax+0x1ec8349];
0x000eb85c: idiv edi; call qword ptr [rax+0x1ec8349];
0x000eb85e: call qword ptr [rax+0x1ec8349];
0x000ebe12: ret 0x9e1;
0x000ec134: and [rdi+0x19], esi; movzx eax, al; movsxd rax, [rbx+rax*4]; add rax, rbx; jmp rax;
0x000ec136: sbb [rdi], ecx; mov dh, 0xc0; movsxd rax, [rbx+rax*4]; add rax, rbx; jmp rax;
0x000ec137: movzx eax, al; movsxd rax, [rbx+rax*4]; add rax, rbx; jmp rax;
0x000ec138: mov dh, 0xc0; movsxd rax, [rbx+rax*4]; add rax, rbx; jmp rax;
0x000ec139: ror byte ptr [rax+0x63], 4; or dword ptr [rax+1], 0xffffffd8; jmp rax;
0x000ec13a: movsxd rax, [rbx+rax*4]; add rax, rbx; jmp rax;
0x000ec13b: movsxd eax, [rbx+rax*4]; add rax, rbx; jmp rax;
0x000ec13c: add al, 0x83; add rax, rbx; jmp rax;
0x000ec13d: or dword ptr [rax+1], 0xffffffd8; jmp rax;
0x000ec13e: add rax, rbx; jmp rax;
0x000ec13f: add eax, ebx; jmp rax;
0x000ec20f: dec dword ptr [rax-0x7d]; ret 0x4801;
0x000ec46e: mov qword ptr [rbp+8], 0; add rsp, 8; pop rbx; pop rbp; ret;
0x000ec46f: mov dword ptr [rbp+8], 0; add rsp, 8; pop rbx; pop rbp; ret;
0x000ec616: fiadd st, word ptr [rax+0x14773efa]; lea rsi, [rip+0x9b7e5]; movzx edx, dl; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; jmp rdx;
0x000ec61b: adc al, 0x48; lea esi, [rip+0x9b7e5]; movzx edx, dl; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; jmp rdx;
0x000ec61c: lea rsi, [rip+0x9b7e5]; movzx edx, dl; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; jmp rdx;
0x000ec61d: lea esi, [rip+0x9b7e5]; movzx edx, dl; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; jmp rdx;
0x000ec61e: xor eax, 0x9b7e5; movzx edx, dl; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; jmp rdx;
0x000ec61f: in eax, 0xb7; or [rax], eax; movzx edx, dl; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; jmp rdx;
0x000ec620: mov bh, 9; add [rdi], cl; mov dh, 0xd2; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; jmp rdx;
0x000ec621: or [rax], eax; movzx edx, dl; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; jmp rdx;
0x000ec622: add [rdi], cl; mov dh, 0xd2; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; jmp rdx;
0x000ec623: movzx edx, dl; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; jmp rdx;
0x000ec624: mov dh, 0xd2; movsxd rdx, [rsi+rdx*4]; add rdx, rsi; jmp rdx;
0x000ec625: ror byte ptr [rax+0x63], cl; adc al, 0x96; add rdx, rsi; jmp rdx;
0x000ec626: movsxd rdx, [rsi+rdx*4]; add rdx, rsi; jmp rdx;
0x000ec627: movsxd edx, [rsi+rdx*4]; add rdx, rsi; jmp rdx;
0x000ec628: adc al, 0x96; add rdx, rsi; jmp rdx;
0x000ec629: xchg esi, eax; add rdx, rsi; jmp rdx;
0x000ec62a: add rdx, rsi; jmp rdx;
0x000ec62b: add edx, esi; jmp rdx;
0x000ec62c: bnd jmp rdx;
0x000eca5b: test eax, ebp; add [rax], al; add [rax-0x7d], cl; ret 0x4801;
0x000ecc5e: call qword ptr [rax+0x24748b4c];
0x000ecf6f: add [rbp-0x76b7febd], cl; ret;
0x000ecf71: add [r8-0x77], ecx; ret;
0x000ecf8b: ret 0x9fe8;
0x000ecfb7: add [rax], al; add cl, ch; cld; idiv edi; call qword ptr [rax+0x49ff894c];
0x000ecfb9: add cl, ch; cld; idiv edi; call qword ptr [rax+0x49ff894c];
0x000ecfbb: cld; idiv edi; call qword ptr [rax+0x49ff894c];
0x000ecfbc: idiv edi; call qword ptr [rax+0x49ff894c];
0x000ecfbe: call qword ptr [rax+0x49ff894c];
0x000ecfee: sahf; idiv bh; jmp qword ptr [rsi+0xf];
0x000ed0f3: add [rax], al; add al, ch; sbb eax, 0xe9fff382; ret;
0x000ed0f5: add al, ch; sbb eax, 0xe9fff382; ret;
0x000ed0f7: sbb eax, 0xe9fff382; ret;
0x000ed158: add [rax], al; add [rbp-0x47ee8a40], al; adc [rax], eax; add [rax], al; syscall;
0x000ed15a: add [rbp-0x47ee8a40], al; adc [rax], eax; add [rax], al; syscall;
0x000ed15c: shl byte ptr [rbp+0x11], 0xb8; adc [rax], eax; add [rax], al; syscall;
0x000ed15e: adc [rax+0x11], edi; syscall;
0x000ed190: mov rdx, [rsp+0x10]; mov r8d, eax; mov rsi, [rsp+8]; mov edi, [rsp]; mov eax, 0x11; syscall;
0x000ed191: mov edx, [rsp+0x10]; mov r8d, eax; mov rsi, [rsp+8]; mov edi, [rsp]; mov eax, 0x11; syscall;
0x000ed193: and al, 0x10; mov r8d, eax; mov rsi, [rsp+8]; mov edi, [rsp]; mov eax, 0x11; syscall;
0x000ed194: adc [rcx-0x77], al; ror byte ptr [rax-0x75], 0x74; and al, 8; mov edi, [rsp]; mov eax, 0x11; syscall;
0x000ed195: mov r8d, eax; mov rsi, [rsp+8]; mov edi, [rsp]; mov eax, 0x11; syscall;
0x000ed196: mov eax, eax; mov rsi, [rsp+8]; mov edi, [rsp]; mov eax, 0x11; syscall;
0x000ed197: ror byte ptr [rax-0x75], 0x74; and al, 8; mov edi, [rsp]; mov eax, 0x11; syscall;
0x000ed198: mov rsi, [rsp+8]; mov edi, [rsp]; mov eax, 0x11; syscall;
0x000ed199: mov esi, [rsp+8]; mov edi, [rsp]; mov eax, 0x11; syscall;
0x000ed19b: and al, 8; mov edi, [rsp]; mov eax, 0x11; syscall;
0x000ed19d: mov edi, [rsp]; mov eax, 0x11; syscall;
0x000ed19e: cmp al, 0x24; mov eax, 0x11; syscall;
0x000ed19f: and al, 0xb8; adc [rax], eax; add [rax], al; syscall;
0x000ed1b5: and al, 0xe8; and eax, 0x48fff97c; mov eax, [rsp]; add rsp, 0x28; ret;
0x000ed1b7: and eax, 0x48fff97c; mov eax, [rsp]; add rsp, 0x28; ret;
0x000ed1c7: add [rax-0x75], cl; adc eax, 0xd0ca1; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000ed1ca: adc eax, 0xd0ca1; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000ed1cb: mov eax, [0x28964d8f7000d0c]; mov rax, 0xffffffffffffffff; ret;
0x000ed1cc: or al, 0xd; add bh, dh; fsub st, dword ptr [rcx+rcx*4+2]; mov rax, 0xffffffffffffffff; ret;
0x000ed208: add [rax], al; add [rbp-0x47ee8a40], al; adc al, [rax]; add [rax], al; syscall;
0x000ed20a: add [rbp-0x47ee8a40], al; adc al, [rax]; add [rax], al; syscall;
0x000ed20c: shl byte ptr [rbp+0x11], 0xb8; adc al, [rax]; add [rax], al; syscall;
0x000ed20e: adc [rax+0x12], edi; syscall;
0x000ed240: mov rdx, [rsp+0x10]; mov r8d, eax; mov rsi, [rsp+8]; mov edi, [rsp]; mov eax, 0x12; syscall;
0x000ed241: mov edx, [rsp+0x10]; mov r8d, eax; mov rsi, [rsp+8]; mov edi, [rsp]; mov eax, 0x12; syscall;
0x000ed243: and al, 0x10; mov r8d, eax; mov rsi, [rsp+8]; mov edi, [rsp]; mov eax, 0x12; syscall;
0x000ed244: adc [rcx-0x77], al; ror byte ptr [rax-0x75], 0x74; and al, 8; mov edi, [rsp]; mov eax, 0x12; syscall;
0x000ed245: mov r8d, eax; mov rsi, [rsp+8]; mov edi, [rsp]; mov eax, 0x12; syscall;
0x000ed246: mov eax, eax; mov rsi, [rsp+8]; mov edi, [rsp]; mov eax, 0x12; syscall;
0x000ed247: ror byte ptr [rax-0x75], 0x74; and al, 8; mov edi, [rsp]; mov eax, 0x12; syscall;
0x000ed248: mov rsi, [rsp+8]; mov edi, [rsp]; mov eax, 0x12; syscall;
0x000ed249: mov esi, [rsp+8]; mov edi, [rsp]; mov eax, 0x12; syscall;
0x000ed24b: and al, 8; mov edi, [rsp]; mov eax, 0x12; syscall;
0x000ed24d: mov edi, [rsp]; mov eax, 0x12; syscall;
0x000ed24e: cmp al, 0x24; mov eax, 0x12; syscall;
0x000ed24f: and al, 0xb8; adc al, [rax]; add [rax], al; syscall;
0x000ed250: mov eax, 0x12; syscall;
0x000ed251: adc al, [rax]; add [rax], al; syscall;
0x000ed269: stc; dec dword ptr [rax-0x75]; add al, 0x24; add rsp, 0x28; ret;
0x000ed277: add [rax-0x75], cl; adc eax, 0xd0bf1; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000ed27a: adc eax, 0xd0bf1; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000ed27b: int1; or ecx, [rip+0x64d8f700]; mov [rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000ed27c: or ecx, [rip+0x64d8f700]; mov [rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000ed27d: or eax, 0x64d8f700; mov [rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000ed2d4: sub ecx, [rax-0x77]; or [r9], sil; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret;
0x000ed2d5: mov [rbx+8], rax; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret;
0x000ed2d6: mov [rbx+8], eax; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret;
0x000ed2d7: or [r9], sil; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret;
0x000ed2d8: or [rcx], dh; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret;
0x000ed2f6: movups [rdi], xmm0; movups [rdi+0x10], xmm0; movups [rdi+0x20], xmm0; movups [rdi+0x30], xmm0; movups [rdi+0x40], xmm0; ret;
0x000ed2f7: adc [rdi], eax; movups [rdi+0x10], xmm0; movups [rdi+0x20], xmm0; movups [rdi+0x30], xmm0; movups [rdi+0x40], xmm0; ret;
0x000ed2f9: movups [rdi+0x10], xmm0; movups [rdi+0x20], xmm0; movups [rdi+0x30], xmm0; movups [rdi+0x40], xmm0; ret;
0x000ed2fa: adc [rdi+0x10], eax; movups [rdi+0x20], xmm0; movups [rdi+0x30], xmm0; movups [rdi+0x40], xmm0; ret;
0x000ed2fb: adc [r15], r9b; adc [rdi+0x20], eax; movups [rdi+0x30], xmm0; movups [rdi+0x40], xmm0; ret;
0x000ed2fc: adc [rdi], cl; adc [rdi+0x20], eax; movups [rdi+0x30], xmm0; movups [rdi+0x40], xmm0; ret;
0x000ed2fd: movups [rdi+0x20], xmm0; movups [rdi+0x30], xmm0; movups [rdi+0x40], xmm0; ret;
0x000ed2fe: adc [rdi+0x20], eax; movups [rdi+0x30], xmm0; movups [rdi+0x40], xmm0; ret;
0x000ed2ff: and [r15], r9b; adc [rdi+0x30], eax; movups [rdi+0x40], xmm0; ret;
0x000ed300: and [rdi], cl; adc [rdi+0x30], eax; movups [rdi+0x40], xmm0; ret;
0x000ed301: movups [rdi+0x30], xmm0; movups [rdi+0x40], xmm0; ret;
0x000ed302: adc [rdi+0x30], eax; movups [rdi+0x40], xmm0; ret;
0x000ed303: xor [r15], r9b; adc [rdi+0x40], eax; ret;
0x000ed304: xor [rdi], cl; adc [rdi+0x40], eax; ret;
0x000ed305: movups [rdi+0x40], xmm0; ret;
0x000ed306: adc [rdi+0x40], eax; ret;
0x000ed3a5: sub cl, [rax+0x63]; ret 0xc283;
0x000ed45b: add al, 0x5b; pop rbp; pop r12; pop r13; pop r14; ret;
0x000ed4df: push 0x60894408; or al, 0x31; ror byte ptr [rcx+0x5d5b0453], 0x41; pop rsp; ret;
0x000ed4e0: or [rcx+rcx*4+0x60], al; or al, 0x31; ror byte ptr [rcx+0x5d5b0453], 0x41; pop rsp; ret;
0x000ed4e4: or al, 0x31; ror byte ptr [rcx+0x5d5b0453], 0x41; pop rsp; ret;
0x000ed4e5: xor eax, eax; mov [rbx+4], edx; pop rbx; pop rbp; pop r12; ret;
0x000ed4e6: ror byte ptr [rcx+0x5d5b0453], 0x41; pop rsp; ret;
0x000ed4e7: mov [rbx+4], edx; pop rbx; pop rbp; pop r12; ret;
0x000ed4e8: push rbx; add al, 0x5b; pop rbp; pop r12; ret;
0x000ed4e9: add al, 0x5b; pop rbp; pop r12; ret;
0x000ed4ef: nop; pop rbx; mov eax, 9; pop rbp; pop r12; ret;
0x000ed4f0: pop rbx; mov eax, 9; pop rbp; pop r12; ret;
0x000ed4f1: mov eax, 9; pop rbp; pop r12; ret;
0x000ed4f2: or [rax], eax; add [rax], al; pop rbp; pop r12; ret;
0x000ed534: sar byte ptr [rax+0x11], 0x48; cmp ebx, eax; pop rbx; setl al; ret;
0x000ed536: adc [rax+0x39], ecx; ret;
0x000ed537: cmp rbx, rax; pop rbx; setl al; ret;
0x000ed538: cmp ebx, eax; pop rbx; setl al; ret;
0x000ed53a: pop rbx; setl al; ret;
0x000ed53b: setl al; ret;
0x000ed53c: pushfq; rol bl, 0x90; xor eax, eax; pop rbx; ret;
0x000ed53d: rol bl, 0x90; xor eax, eax; pop rbx; ret;
0x000ed53f: nop; xor eax, eax; pop rbx; ret;
0x000ed544: nop [rax]; mov eax, 1; pop rbx; ret;
0x000ed546: add [rax+1], dil; pop rbx; ret;
0x000ed56f: sub [rax+0x63], cl; ret 0xc283;
0x000ed5e4: ret 0xc283;
0x000ed5f5: add [rcx-0x3fcef798], cl; mov [rbx+4], edx; add rsp, 8; pop rbx; pop rbp; ret;
0x000ed5f8: or [rcx], dh; ror byte ptr [rcx-0x7cb7fbad], 0xc4; or [rbx+0x5d], bl; ret;
0x000ed5f9: xor eax, eax; mov [rbx+4], edx; add rsp, 8; pop rbx; pop rbp; ret;
0x000ed5fa: ror byte ptr [rcx-0x7cb7fbad], 0xc4; or [rbx+0x5d], bl; ret;
0x000ed5fb: mov [rbx+4], edx; add rsp, 8; pop rbx; pop rbp; ret;
0x000ed5fc: push rbx; add al, 0x48; add esp, 8; pop rbx; pop rbp; ret;
0x000ed5fd: add al, 0x48; add esp, 8; pop rbx; pop rbp; ret;
0x000ed612: add [rax], al; add [rbp-0x7b], al; shl byte ptr [rbp-0x1c], 0x8b; push rbx; add al, 0xeb; ret;
0x000ed614: add [rbp-0x7b], al; shl byte ptr [rbp-0x1c], 0x8b; push rbx; add al, 0xeb; ret;
0x000ed617: shl byte ptr [rbp-0x1c], 0x8b; push rbx; add al, 0xeb; ret;
0x000ed619: in al, 0x8b; push rbx; add al, 0xeb; ret;
0x000ed61b: push rbx; add al, 0xeb; ret;
0x000ed61c: add al, 0xeb; ret;
0x000ed64a: add esi, ebx; stosq [rdi]; ret;
0x000ed64c: stosq [rdi]; ret;
0x000ed64d: stosd [rdi]; ret;
0x000ed693: movups [rsi+0x50], xmm5; movdqu xmm6, [rdi+0x68]; movups [rsi+0x60], xmm6; movdqu xmm7, [rdi+0x78]; movups [rsi+0x70], xmm7; ret;
0x000ed694: adc [rsi+0x50], ebp; movdqu xmm6, [rdi+0x68]; movups [rsi+0x60], xmm6; movdqu xmm7, [rdi+0x78]; movups [rsi+0x70], xmm7; ret;
0x000ed696: push rax; movdqu xmm6, [rdi+0x68]; movups [rsi+0x60], xmm6; movdqu xmm7, [rdi+0x78]; movups [rsi+0x70], xmm7; ret;
0x000ed697: movdqu xmm6, [rdi+0x68]; movups [rsi+0x60], xmm6; movdqu xmm7, [rdi+0x78]; movups [rsi+0x70], xmm7; ret;
0x000ed698: movq mm6, [rdi+0x68]; movups [rsi+0x60], xmm6; movdqu xmm7, [rdi+0x78]; movups [rsi+0x70], xmm7; ret;
0x000ed69b: push 0x6076110f; movdqu xmm7, [rdi+0x78]; movups [rsi+0x70], xmm7; ret;
0x000ed69c: movups [rsi+0x60], xmm6; movdqu xmm7, [rdi+0x78]; movups [rsi+0x70], xmm7; ret;
0x000ed69d: adc [rsi+0x60], esi; movdqu xmm7, [rdi+0x78]; movups [rsi+0x70], xmm7; ret;
0x000ed6a0: movdqu xmm7, [rdi+0x78]; movups [rsi+0x70], xmm7; ret;
0x000ed6a1: movq mm7, [rdi+0x78]; movups [rsi+0x70], xmm7; ret;
0x000ed6e3: movups [rdi+0x58], xmm5; movdqu xmm6, [rsi+0x60]; movups [rdi+0x68], xmm6; movdqu xmm7, [rsi+0x70]; movups [rdi+0x78], xmm7; ret;
0x000ed6e4: adc [rdi+0x58], ebp; movdqu xmm6, [rsi+0x60]; movups [rdi+0x68], xmm6; movdqu xmm7, [rsi+0x70]; movups [rdi+0x78], xmm7; ret;
0x000ed6e6: pop rax; movdqu xmm6, [rsi+0x60]; movups [rdi+0x68], xmm6; movdqu xmm7, [rsi+0x70]; movups [rdi+0x78], xmm7; ret;
0x000ed6e7: movdqu xmm6, [rsi+0x60]; movups [rdi+0x68], xmm6; movdqu xmm7, [rsi+0x70]; movups [rdi+0x78], xmm7; ret;
0x000ed6e8: movq mm6, [rsi+0x60]; movups [rdi+0x68], xmm6; movdqu xmm7, [rsi+0x70]; movups [rdi+0x78], xmm7; ret;
0x000ed6ec: movups [rdi+0x68], xmm6; movdqu xmm7, [rsi+0x70]; movups [rdi+0x78], xmm7; ret;
0x000ed6ed: adc [rdi+0x68], esi; movdqu xmm7, [rsi+0x70]; movups [rdi+0x78], xmm7; ret;
0x000ed6f0: movdqu xmm7, [rsi+0x70]; movups [rdi+0x78], xmm7; ret;
0x000ed6f1: movq mm7, [rsi+0x70]; movups [rdi+0x78], xmm7; ret;
0x000ed6f5: movups [rdi+0x78], xmm7; ret;
0x000ed6f6: adc [rdi+0x78], edi; ret;
0x000ed6fa: nop [rax+rax]; movzx eax, word ptr [rdi]; mov [rsi], ax; xor eax, eax; ret;
0x000ed6fb: nop [rax+rax]; movzx eax, word ptr [rdi]; mov [rsi], ax; xor eax, eax; ret;
0x000ed6fd: add [rax], r8b; movzx eax, word ptr [rdi]; mov [rsi], ax; xor eax, eax; ret;
0x000ed6fe: add [rax], al; movzx eax, word ptr [rdi]; mov [rsi], ax; xor eax, eax; ret;
0x000ed6ff: add [rdi], cl; mov bh, 7; mov [rsi], ax; xor eax, eax; ret;
0x000ed700: movzx eax, word ptr [rdi]; mov [rsi], ax; xor eax, eax; ret;
0x000ed701: mov bh, 7; mov [rsi], ax; xor eax, eax; ret;
0x000ed703: mov [rsi], ax; xor eax, eax; ret;
0x000ed716: test esi, 0x575ff00; mov [rdi], si; xor eax, eax; ret;
0x000ed719: push qword ptr [rbp+5]; mov [rdi], si; xor eax, eax; ret;
0x000ed71c: mov [rdi], si; xor eax, eax; ret;
0x000ed71d: mov [rdi], esi; xor eax, eax; ret;
0x000ed722: nop [rax+rax]; nop [rax]; mov eax, [rdi+4]; mov [rsi], eax; xor eax, eax; ret;
0x000ed723: nop [rax+rax]; nop [rax]; mov eax, [rdi+4]; mov [rsi], eax; xor eax, eax; ret;
0x000ed724: nop [rax+rax]; nop [rax]; mov eax, [rdi+4]; mov [rsi], eax; xor eax, eax; ret;
0x000ed72a: add [rax], al; nop [rax]; mov eax, [rdi+4]; mov [rsi], eax; xor eax, eax; ret;
0x000ed72c: nop [rax]; mov eax, [rdi+4]; mov [rsi], eax; xor eax, eax; ret;
0x000ed72f: add [rbx+0x6890447], cl; xor eax, eax; ret;
0x000ed730: mov eax, [rdi+4]; mov [rsi], eax; xor eax, eax; ret;
0x000ed738: nop [rax+rax]; mov [rdi+4], esi; xor eax, eax; ret;
0x000ed73a: test [rax], al; add [rax], al; add [rax], al; mov [rdi+4], esi; xor eax, eax; ret;
0x000ed73b: add [rax], al; add [rax], al; add [rcx-0x3fcefb89], cl; ret;
0x000ed73c: add [rax], al; add [rax], al; mov [rdi+4], esi; xor eax, eax; ret;
0x000ed73d: add [rax], al; add [rcx-0x3fcefb89], cl; ret;
0x000ed73e: add [rax], al; mov [rdi+4], esi; xor eax, eax; ret;
0x000ed73f: add [rcx-0x3fcefb89], cl; ret;
0x000ed740: mov [rdi+4], esi; xor eax, eax; ret;
0x000ed765: add eax, ebp; test [rdi], eax; add [rax], al; add rsp, 0x18; ret;
0x000ed767: test [rdi], eax; add [rax], al; add rsp, 0x18; ret;
0x000ed7c8: test [rsi], ch; add al, [rax]; add [rax-0x77], cl; fmul st, dword ptr [rax-0x7d]; ret;
0x000ed7c9: add al, [rax]; add [rax-0x77], cl; fmul st, dword ptr [rax-0x7d]; ret;
0x000ed7ca: add al, [rax]; add [rax-0x77], cl; fmul st, dword ptr [rax-0x7d]; ret;
0x000ed7cc: add [rax-0x77], cl; fmul st, dword ptr [rax-0x7d]; ret;
0x000ed7cf: fmul st, dword ptr [rax-0x7d]; ret;
0x000ed7f1: or eax, 0x528b4800; sbb [rax-0x73], cl; lodsb [rsi]; ret 0x8207;
0x000ed7f2: add [rax-0x75], cl; push rdx; sbb [rax-0x73], cl; lodsb [rsi]; ret 0x8207;
0x000ed7f5: push rdx; sbb [rax-0x73], cl; lodsb [rsi]; ret 0x8207;
0x000ed7f6: sbb [rax-0x73], cl; lodsb [rsi]; ret 0x8207;
0x000ed7f9: lodsb [rsi]; ret 0x8207;
0x000ed7fa: ret 0x8207;
0x000ed8a4: mov eax, [rsp+0x290]; mov rdx, r14; mov [rsp+0xd8], rbx; mov [rsp+0xe8], eax; mov eax, 0xe; syscall;
0x000ed8a8: add al, [rax]; add [rcx+rcx*4-0xe], cl; mov [rsp+0xd8], rbx; mov [rsp+0xe8], eax; mov eax, 0xe; syscall;
0x000ed8a9: add [rax], al; mov rdx, r14; mov [rsp+0xd8], rbx; mov [rsp+0xe8], eax; mov eax, 0xe; syscall;
0x000ed8aa: add [rcx+rcx*4-0xe], cl; mov [rsp+0xd8], rbx; mov [rsp+0xe8], eax; mov eax, 0xe; syscall;
0x000ed8ab: mov rdx, r14; mov [rsp+0xd8], rbx; mov [rsp+0xe8], eax; mov eax, 0xe; syscall;
0x000ed8ac: mov edx, esi; mov [rsp+0xd8], rbx; mov [rsp+0xe8], eax; mov eax, 0xe; syscall;
0x000ed8ae: mov [rsp+0xd8], rbx; mov [rsp+0xe8], eax; mov eax, 0xe; syscall;
0x000ed8af: mov [rsp+0xd8], ebx; mov [rsp+0xe8], eax; mov eax, 0xe; syscall;
0x000ed8b1: and al, 0xd8; add [rax], al; add [rcx+0xe82484], cl; add [rax], al; mov eax, 0xe; syscall;
0x000ed8b2: fadd st, dword ptr [rax]; add [rax], al; mov [rsp+0xe8], eax; mov eax, 0xe; syscall;
0x000ed8b3: add [rax], al; add [rcx+0xe82484], cl; add [rax], al; mov eax, 0xe; syscall;
0x000ed8b4: add [rax], al; mov [rsp+0xe8], eax; mov eax, 0xe; syscall;
0x000ed8b5: add [rcx+0xe82484], cl; add [rax], al; mov eax, 0xe; syscall;
0x000ed8b6: mov [rsp+0xe8], eax; mov eax, 0xe; syscall;
0x000ed8b7: test [rax+rbp*8], ah; add [rax], al; add [rax+0xe], bh; syscall;
0x000ed8b8: and al, 0xe8; add [rax], al; add [rax+0xe], bh; syscall;
0x000ed917: mov r10d, 8; xor edx, edx; mov rsi, r14; mov edi, 2; mov eax, 0xe; syscall;
0x000ed918: mov edx, 8; xor edx, edx; mov rsi, r14; mov edi, 2; mov eax, 0xe; syscall;
0x000ed91a: add [rax], al; add [rcx], dh; ror byte ptr [rcx+rcx*4-0xa], cl; mov edi, 2; mov eax, 0xe; syscall;
0x000ed91b: add [rax], al; xor edx, edx; mov rsi, r14; mov edi, 2; mov eax, 0xe; syscall;
0x000ed91c: add [rcx], dh; ror byte ptr [rcx+rcx*4-0xa], cl; mov edi, 2; mov eax, 0xe; syscall;
0x000ed91d: xor edx, edx; mov rsi, r14; mov edi, 2; mov eax, 0xe; syscall;
0x000ed91e: ror byte ptr [rcx+rcx*4-0xa], cl; mov edi, 2; mov eax, 0xe; syscall;
0x000ed91f: mov rsi, r14; mov edi, 2; mov eax, 0xe; syscall;
0x000ed920: mov esi, esi; mov edi, 2; mov eax, 0xe; syscall;
0x000ed921: idiv byte ptr [rdi+2]; mov eax, 0xe; syscall;
0x000ed922: mov edi, 2; mov eax, 0xe; syscall;
0x000ed923: add al, [rax]; add [rax], al; mov eax, 0xe; syscall;
0x000ed924: add [rax], al; add [rax+0xe], bh; syscall;
0x000ed925: add [rax], al; mov eax, 0xe; syscall;
0x000ed926: add [rax+0xe], bh; syscall;
0x000ed927: mov eax, 0xe; syscall;
0x000ed938: mov rax, [rip+0xd3e49]; mov edi, [rsp+0x2c]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000ed939: mov eax, [rip+0xd3e49]; mov edi, [rsp+0x2c]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000ed93a: add eax, 0xd3e49; mov edi, [rsp+0x2c]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000ed93f: mov edi, [rsp+0x2c]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000ed941: and al, 0x2c; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000ed980: mov rax, [rip+0xd3e01]; lea rsi, [rsp+0x2c]; mov edi, 1; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000ed981: mov eax, [rip+0xd3e01]; lea rsi, [rsp+0x2c]; mov edi, 1; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000ed982: add eax, 0xd3e01; lea rsi, [rsp+0x2c]; mov edi, 1; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000ed984: or eax, 0x748d4800; and al, 0x2c; mov edi, 1; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000ed985: or eax, 0x748d4800; and al, 0x2c; mov edi, 1; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000ed987: lea rsi, [rsp+0x2c]; mov edi, 1; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000ed988: lea esi, [rsp+0x2c]; mov edi, 1; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000ed98a: and al, 0x2c; mov edi, 1; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000ed98b: sub al, 0xbf; add [rax], eax; add [rax], al; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000edb1c: add eax, [rax]; add dh, dh; ret 0xf20;
0x000edb1e: add dh, dh; ret 0xf20;
0x000edb21: and [rdi], cl; test [rip-0x9fffffd], esi; ret 0xf80;
0x000edb23: test [rip-0x9fffffd], esi; ret 0xf80;
0x000edb24: xor eax, 0xf6000003; ret 0xf80;
0x000edb25: add eax, [rax]; add dh, dh; ret 0xf80;
0x000edb27: add dh, dh; ret 0xf80;
0x000edb29: ret 0xf80;
0x000edb2a: or byte ptr [rdi], 0x85; std; add al, [rax]; add dh, dh; ret 0xf02;
0x000edb2c: test ebp, edi; add al, [rax]; add dh, dh; ret 0xf02;
0x000edb2d: std; add al, [rax]; add dh, dh; ret 0xf02;
0x000edb2e: add al, [rax]; add dh, dh; ret 0xf02;
0x000edb30: add dh, dh; ret 0xf02;
0x000edb32: ret 0xf02;
0x000edb56: add [rbp+rcx*4+0x25], cl; ret 0x9a3;
0x000edb5a: ret 0x9a3;
0x000edb69: or [rbx-0x76b6fbc7], r8b; iretd;
0x000edb6a: or [rbx-0x76b6fbc7], al; iretd;
0x000edb73: mov eax, [rcx]; movsxd rax, [r12+rax*4]; add rax, r12; jmp rax;
0x000edb74: add [rcx+0x63], ecx; add al, 0x84; add rax, r12; jmp rax;
0x000edb75: movsxd rax, [r12+rax*4]; add rax, r12; jmp rax;
0x000edb76: movsxd eax, [rsp+rax*4]; add rax, r12; jmp rax;
0x000edb77: add al, 0x84; add rax, r12; jmp rax;
0x000edb78: test [rcx+rax-0x20], cl; jmp rax;
0x000edb79: add rax, r12; jmp rax;
0x000edb7a: add eax, esp; jmp rax;
0x000edbba: mov rbx, [rbp-0x168]; mov rax, rbx; mov rdx, [rbx+0xb0]; mov rsi, [rbx+0xa0]; mov rdi, [rbx+0x80]; call qword ptr [rax+0x88];
0x000edbbb: mov ebx, [rbp-0x168]; mov rax, rbx; mov rdx, [rbx+0xb0]; mov rsi, [rbx+0xa0]; mov rdi, [rbx+0x80]; call qword ptr [rax+0x88];
0x000edbc1: mov rax, rbx; mov rdx, [rbx+0xb0]; mov rsi, [rbx+0xa0]; mov rdi, [rbx+0x80]; call qword ptr [rax+0x88];
0x000edbc2: mov eax, ebx; mov rdx, [rbx+0xb0]; mov rsi, [rbx+0xa0]; mov rdi, [rbx+0x80]; call qword ptr [rax+0x88];
0x000edbc4: mov rdx, [rbx+0xb0]; mov rsi, [rbx+0xa0]; mov rdi, [rbx+0x80]; call qword ptr [rax+0x88];
0x000edbc5: mov edx, [rbx+0xb0]; mov rsi, [rbx+0xa0]; mov rdi, [rbx+0x80]; call qword ptr [rax+0x88];
0x000edbc6: xchg ebx, eax; mov al, 0; add [rax], al; mov rsi, [rbx+0xa0]; mov rdi, [rbx+0x80]; call qword ptr [rax+0x88];
0x000edbc7: mov al, 0; add [rax], al; mov rsi, [rbx+0xa0]; mov rdi, [rbx+0x80]; call qword ptr [rax+0x88];
0x000edbc9: add [rax], al; mov rsi, [rbx+0xa0]; mov rdi, [rbx+0x80]; call qword ptr [rax+0x88];
0x000edbca: add [rax-0x75], cl; mov bl, 0xa0; add [rax], al; add [rax-0x75], cl; mov ebx, 0x80; call qword ptr [rax+0x88];
0x000edbcb: mov rsi, [rbx+0xa0]; mov rdi, [rbx+0x80]; call qword ptr [rax+0x88];
0x000edbcc: mov esi, [rbx+0xa0]; mov rdi, [rbx+0x80]; call qword ptr [rax+0x88];
0x000edbcd: mov bl, 0xa0; add [rax], al; add [rax-0x75], cl; mov ebx, 0x80; call qword ptr [rax+0x88];
0x000edbce: mov al, [0x80bb8b48000000]; add [rax], al; call qword ptr [rax+0x88];
0x000edbcf: add [rax], al; add [rax-0x75], cl; mov ebx, 0x80; call qword ptr [rax+0x88];
0x000edbd0: add [rax], al; mov rdi, [rbx+0x80]; call qword ptr [rax+0x88];
0x000edbd1: add [rax-0x75], cl; mov ebx, 0x80; call qword ptr [rax+0x88];
0x000edbd2: mov rdi, [rbx+0x80]; call qword ptr [rax+0x88];
0x000edbd3: mov edi, [rbx+0x80]; call qword ptr [rax+0x88];
0x000edbd4: mov ebx, 0x80; call qword ptr [rax+0x88];
0x000edc60: mov qword ptr [rdx*8+0x10], 0; mov rax, [rbp-0x168]; mov rsi, r12; lea rdi, [rip+0x9c4d5]; mov rdx, [rax+0xb0]; call qword ptr [rax+0x88];
0x000edc61: mov dword ptr [rdx*8+0x10], 0; mov rax, [rbp-0x168]; mov rsi, r12; lea rdi, [rip+0x9c4d5]; mov rdx, [rax+0xb0]; call qword ptr [rax+0x88];
0x000edc6a: add [rax], al; mov rax, [rbp-0x168]; mov rsi, r12; lea rdi, [rip+0x9c4d5]; mov rdx, [rax+0xb0]; call qword ptr [rax+0x88];
0x000edc6b: add [rax-0x75], cl; test [rax+0x4cfffffe], ebx; mov esi, esp; lea rdi, [rip+0x9c4d5]; mov rdx, [rax+0xb0]; call qword ptr [rax+0x88];
0x000edc6c: mov rax, [rbp-0x168]; mov rsi, r12; lea rdi, [rip+0x9c4d5]; mov rdx, [rax+0xb0]; call qword ptr [rax+0x88];
0x000edc6d: mov eax, [rbp-0x168]; mov rsi, r12; lea rdi, [rip+0x9c4d5]; mov rdx, [rax+0xb0]; call qword ptr [rax+0x88];
0x000edc6e: test [rax+0x4cfffffe], ebx; mov esi, esp; lea rdi, [rip+0x9c4d5]; mov rdx, [rax+0xb0]; call qword ptr [rax+0x88];
0x000edc72: dec dword ptr [rcx+rcx*4-0x1a]; lea rdi, [rip+0x9c4d5]; mov rdx, [rax+0xb0]; call qword ptr [rax+0x88];
0x000edc73: mov rsi, r12; lea rdi, [rip+0x9c4d5]; mov rdx, [rax+0xb0]; call qword ptr [rax+0x88];
0x000edc74: mov esi, esp; lea rdi, [rip+0x9c4d5]; mov rdx, [rax+0xb0]; call qword ptr [rax+0x88];
0x000edc75: out 0x48, al; lea edi, [rip+0x9c4d5]; mov rdx, [rax+0xb0]; call qword ptr [rax+0x88];
0x000edc76: lea rdi, [rip+0x9c4d5]; mov rdx, [rax+0xb0]; call qword ptr [rax+0x88];
0x000edc77: lea edi, [rip+0x9c4d5]; mov rdx, [rax+0xb0]; call qword ptr [rax+0x88];
0x000edc78: cmp eax, 0x9c4d5; mov rdx, [rax+0xb0]; call qword ptr [rax+0x88];
0x000edc7b: or [rax], eax; mov rdx, [rax+0xb0]; call qword ptr [rax+0x88];
0x000edc7c: add [rax-0x75], cl; nop; mov al, 0; add [rax], al; call qword ptr [rax+0x88];
0x000edc7d: mov rdx, [rax+0xb0]; call qword ptr [rax+0x88];
0x000edc7e: mov edx, [rax+0xb0]; call qword ptr [rax+0x88];
0x000edc7f: nop; mov al, 0; add [rax], al; call qword ptr [rax+0x88];
0x000edc80: mov al, 0; add [rax], al; call qword ptr [rax+0x88];
0x000edc82: add [rax], al; call qword ptr [rax+0x88];
0x000edc84: call qword ptr [rax+0x88];
0x000edc99: ror byte ptr [rdi], 0x44; ret 0x8b48;
0x000edd98: std; inc dword ptr [rbx-0x307c0036]; dec dword ptr [rcx+0x75b8c6]; add [rax], al; syscall;
0x000edd99: inc dword ptr [rbx-0x307c0036]; dec dword ptr [rcx+0x75b8c6]; add [rax], al; syscall;
0x000edd9a: or edx, 0xffffffff; or edi, 0xffffffff; mov esi, eax; mov eax, 0x75; syscall;
0x000edd9c: inc dword ptr [rbx-0x39760031]; mov eax, 0x75; syscall;
0x000edd9d: or edi, 0xffffffff; mov esi, eax; mov eax, 0x75; syscall;
0x000edd9f: dec dword ptr [rcx+0x75b8c6]; add [rax], al; syscall;
0x000edda0: mov esi, eax; mov eax, 0x75; syscall;
0x000eddc1: std; inc dword ptr [rbx-0x307c0036]; dec dword ptr [rcx+0x77b8c6]; add [rax], al; syscall;
0x000eddc2: inc dword ptr [rbx-0x307c0036]; dec dword ptr [rcx+0x77b8c6]; add [rax], al; syscall;
0x000eddc3: or edx, 0xffffffff; or edi, 0xffffffff; mov esi, eax; mov eax, 0x77; syscall;
0x000eddc5: inc dword ptr [rbx-0x39760031]; mov eax, 0x77; syscall;
0x000eddc6: or edi, 0xffffffff; mov esi, eax; mov eax, 0x77; syscall;
0x000eddc8: dec dword ptr [rcx+0x77b8c6]; add [rax], al; syscall;
0x000eddc9: mov esi, eax; mov eax, 0x77; syscall;
0x000ede69: add [rax], eax; add al, ch; iretd;
0x000edea7: rol byte ptr [rcx], 0x75; iretd;
0x000eded5: add ebp, ecx; ret 0xfffd;
0x000edf06: adc [rcx-0xa], al; ret 0x4901;
0x000edf0a: add [rcx+0xf], ecx; ret;
0x000edf65: movups [rsi+0x50], xmm5; movdqu xmm6, [rdi+0xe8]; movups [rsi+0x60], xmm6; movdqu xmm7, [rdi+0xf8]; movups [rsi+0x70], xmm7; ret;
0x000edf66: adc [rsi+0x50], ebp; movdqu xmm6, [rdi+0xe8]; movups [rsi+0x60], xmm6; movdqu xmm7, [rdi+0xf8]; movups [rsi+0x70], xmm7; ret;
0x000edf68: push rax; movdqu xmm6, [rdi+0xe8]; movups [rsi+0x60], xmm6; movdqu xmm7, [rdi+0xf8]; movups [rsi+0x70], xmm7; ret;
0x000edf69: movdqu xmm6, [rdi+0xe8]; movups [rsi+0x60], xmm6; movdqu xmm7, [rdi+0xf8]; movups [rsi+0x70], xmm7; ret;
0x000edf6a: movq mm6, [rdi+0xe8]; movups [rsi+0x60], xmm6; movdqu xmm7, [rdi+0xf8]; movups [rsi+0x70], xmm7; ret;
0x000edf6e: add [rax], al; add [rdi], cl; adc [rsi+0x60], esi; movdqu xmm7, [rdi+0xf8]; movups [rsi+0x70], xmm7; ret;
0x000edf6f: add [rax], al; movups [rsi+0x60], xmm6; movdqu xmm7, [rdi+0xf8]; movups [rsi+0x70], xmm7; ret;
0x000edf70: add [rdi], cl; adc [rsi+0x60], esi; movdqu xmm7, [rdi+0xf8]; movups [rsi+0x70], xmm7; ret;
0x000edf71: movups [rsi+0x60], xmm6; movdqu xmm7, [rdi+0xf8]; movups [rsi+0x70], xmm7; ret;
0x000edf72: adc [rsi+0x60], esi; movdqu xmm7, [rdi+0xf8]; movups [rsi+0x70], xmm7; ret;
0x000edf75: movdqu xmm7, [rdi+0xf8]; movups [rsi+0x70], xmm7; ret;
0x000edf76: movq mm7, [rdi+0xf8]; movups [rsi+0x70], xmm7; ret;
0x000edf77: outsd dx, [rsi]; mov edi, 0xf8; movups [rsi+0x70], xmm7; ret;
0x000edf78: mov edi, 0xf8; movups [rsi+0x70], xmm7; ret;
0x000edf79: clc; add [rax], al; add [rdi], cl; adc [rsi+0x70], edi; ret;
0x000edf7a: add [rax], al; add [rdi], cl; adc [rsi+0x70], edi; ret;
0x000edf7b: add [rax], al; movups [rsi+0x70], xmm7; ret;
0x000edf7c: add [rdi], cl; adc [rsi+0x70], edi; ret;
0x000edf7d: movups [rsi+0x70], xmm7; ret;
0x000edf7e: adc [rsi+0x70], edi; ret;
0x000edf82: nop [rax+rax]; nop [rax]; mov eax, [rdi+0x10c]; mov [rsi], eax; xor eax, eax; ret;
0x000edf83: nop [rax+rax]; nop [rax]; mov eax, [rdi+0x10c]; mov [rsi], eax; xor eax, eax; ret;
0x000edf84: nop [rax+rax]; nop [rax]; mov eax, [rdi+0x10c]; mov [rsi], eax; xor eax, eax; ret;
0x000edf8a: add [rax], al; nop [rax]; mov eax, [rdi+0x10c]; mov [rsi], eax; xor eax, eax; ret;
0x000edf8c: nop [rax]; mov eax, [rdi+0x10c]; mov [rsi], eax; xor eax, eax; ret;
0x000edf90: mov eax, [rdi+0x10c]; mov [rsi], eax; xor eax, eax; ret;
0x000edf91: xchg [rcx+rax], ecx; add [rax], al; mov [rsi], eax; xor eax, eax; ret;
0x000edf92: or al, 1; add [rax], al; mov [rsi], eax; xor eax, eax; ret;
0x000edf95: add [rcx-0x3c3fcefa], cl; nop [rax+rax]; mov eax, [rdi+0x108]; mov [rsi], eax; xor eax, eax; ret;
0x000edf9b: nop [rax+rax]; mov eax, [rdi+0x108]; mov [rsi], eax; xor eax, eax; ret;
0x000edf9d: add [rax], r8b; mov eax, [rdi+0x108]; mov [rsi], eax; xor eax, eax; ret;
0x000edf9e: add [rax], al; mov eax, [rdi+0x108]; mov [rsi], eax; xor eax, eax; ret;
0x000edfa0: mov eax, [rdi+0x108]; mov [rsi], eax; xor eax, eax; ret;
0x000edfa2: or [rcx], al; add [rax], al; mov [rsi], eax; xor eax, eax; ret;
0x000edfa4: add [rax], al; mov [rsi], eax; xor eax, eax; ret;
0x000edfa6: mov [rsi], eax; xor eax, eax; ret;
0x000edff2: movups [rdi+0xd8], xmm5; movdqu xmm6, [rsi+0x60]; movups [rdi+0xe8], xmm6; movdqu xmm7, [rsi+0x70]; movups [rdi+0xf8], xmm7; ret;
0x000edff3: adc [rdi+0xd8], ebp; movdqu xmm6, [rsi+0x60]; movups [rdi+0xe8], xmm6; movdqu xmm7, [rsi+0x70]; movups [rdi+0xf8], xmm7; ret;
0x000edff7: add [rax], al; movdqu xmm6, [rsi+0x60]; movups [rdi+0xe8], xmm6; movdqu xmm7, [rsi+0x70]; movups [rdi+0xf8], xmm7; ret;
0x000edff8: add bl, dh; movq mm6, [rsi+0x60]; movups [rdi+0xe8], xmm6; movdqu xmm7, [rsi+0x70]; movups [rdi+0xf8], xmm7; ret;
0x000edff9: movdqu xmm6, [rsi+0x60]; movups [rdi+0xe8], xmm6; movdqu xmm7, [rsi+0x70]; movups [rdi+0xf8], xmm7; ret;
0x000edffa: movq mm6, [rsi+0x60]; movups [rdi+0xe8], xmm6; movdqu xmm7, [rsi+0x70]; movups [rdi+0xf8], xmm7; ret;
0x000edffe: movups [rdi+0xe8], xmm6; movdqu xmm7, [rsi+0x70]; movups [rdi+0xf8], xmm7; ret;
0x000edfff: adc [rdi+0xe8], esi; movdqu xmm7, [rsi+0x70]; movups [rdi+0xf8], xmm7; ret;
0x000ee000: mov bh, 0xe8; add [rax], al; add bl, dh; movq mm7, [rsi+0x70]; movups [rdi+0xf8], xmm7; ret;
0x000ee002: add [rax], al; add bl, dh; movq mm7, [rsi+0x70]; movups [rdi+0xf8], xmm7; ret;
0x000ee003: add [rax], al; movdqu xmm7, [rsi+0x70]; movups [rdi+0xf8], xmm7; ret;
0x000ee004: add bl, dh; movq mm7, [rsi+0x70]; movups [rdi+0xf8], xmm7; ret;
0x000ee005: movdqu xmm7, [rsi+0x70]; movups [rdi+0xf8], xmm7; ret;
0x000ee006: movq mm7, [rsi+0x70]; movups [rdi+0xf8], xmm7; ret;
0x000ee00a: movups [rdi+0xf8], xmm7; ret;
0x000ee00b: adc [rdi+0xf8], edi; ret;
0x000ee00c: mov edi, 0xf8; ret;
0x000ee022: add [rax], al; add [rbx+0x87702fe], al; mov [rdi+0x10c], esi; xor eax, eax; ret;
0x000ee024: add [rbx+0x87702fe], al; mov [rdi+0x10c], esi; xor eax, eax; ret;
0x000ee027: add dh, [rdi+8]; mov [rdi+0x10c], esi; xor eax, eax; ret;
0x000ee02a: mov [rdi+0x10c], esi; xor eax, eax; ret;
0x000ee02c: or al, 1; add [rax], al; xor eax, eax; ret;
0x000ee033: nop [rax+rax]; nop [rax]; mov eax, [rsi]; mov [rdi+0x108], eax; xor eax, eax; ret;
0x000ee034: nop [rax+rax]; nop [rax]; mov eax, [rsi]; mov [rdi+0x108], eax; xor eax, eax; ret;
0x000ee035: nop [rax+rax]; nop [rax]; mov eax, [rsi]; mov [rdi+0x108], eax; xor eax, eax; ret;
0x000ee03b: add [rax], al; nop [rax]; mov eax, [rsi]; mov [rdi+0x108], eax; xor eax, eax; ret;
0x000ee03d: nop [rax]; mov eax, [rsi]; mov [rdi+0x108], eax; xor eax, eax; ret;
0x000ee040: mov eax, [rsi]; mov [rdi+0x108], eax; xor eax, eax; ret;
0x000ee042: mov [rdi+0x108], eax; xor eax, eax; ret;
0x000ee044: or [rcx], al; add [rax], al; xor eax, eax; ret;
0x000ee04f: add [rcx], dh; rol byte ptr [rbx+0x97404fa], 0xb8; sbb al, 0; add [rax], al; syscall;
0x000ee051: rol byte ptr [rbx+0x97404fa], 0xb8; sbb al, 0; add [rax], al; syscall;
0x000ee051: rol byte ptr [rbx+0x97404fa], 0xb8; sbb al, 0; add [rax], al; syscall; neg eax; ret;
0x000ee053: cli; add al, 0x74; or [rax+0x1c], edi; syscall; neg eax; ret;
0x000ee053: cli; add al, 0x74; or [rax+0x1c], edi; syscall;
0x000ee054: add al, 0x74; or [rax+0x1c], edi; syscall;
0x000ee054: add al, 0x74; or [rax+0x1c], edi; syscall; neg eax; ret;
0x000ee056: or [rax+0x1c], edi; syscall; neg eax; ret;
0x000ee056: or [rax+0x1c], edi; syscall;
0x000ee057: mov eax, 0x1c; syscall; neg eax; ret;
0x000ee058: sbb al, 0; add [rax], al; syscall; neg eax; ret;
0x000ee05a: add [rax], al; syscall; neg eax; ret;
0x000ee05c: syscall; neg eax; ret;
0x000ee0a4: add [rax], al; add [rbp+0x10], dh; add rsp, 0x28; ret;
0x000ee0a6: add [rbp+0x10], dh; add rsp, 0x28; ret;
0x000ee0e2: div dword ptr [rdi-0x15]; mov eax, r8d; ret;
0x000ee10b: add [rax], al; add [rax], al; add [rax-0x75], cl; cmp ecx, [rax-0x7d]; ret;
0x000ee10d: add [rax], al; add [rax-0x75], cl; cmp ecx, [rax-0x7d]; ret;
0x000ee126: fnsave [rdi-0x19]; mov eax, r12d; pop rbx; pop rbp; pop r12; ret;
0x000ee128: out 0x44, eax; mov eax, esp; pop rbx; pop rbp; pop r12; ret;
0x000ee137: add [rbp+0x31], al; in al, 0x5b; pop rbp; mov eax, r12d; pop r12; ret;
0x000ee138: xor r12d, r12d; pop rbx; pop rbp; mov eax, r12d; pop r12; ret;
0x000ee139: xor esp, esp; pop rbx; pop rbp; mov eax, r12d; pop r12; ret;
0x000ee13a: in al, 0x5b; pop rbp; mov eax, r12d; pop r12; ret;
0x000ee13b: pop rbx; pop rbp; mov eax, r12d; pop r12; ret;
0x000ee13c: pop rbp; mov eax, r12d; pop r12; ret;
0x000ee150: mov rax, [rip+0xcfd09]; lea rdx, [rip-0x6e]; test byte ptr [rax+0x72], 0x80; lea rax, [rip-0xa9]; cmove rax, rdx; ret;
0x000ee151: mov eax, [rip+0xcfd09]; lea rdx, [rip-0x6e]; test byte ptr [rax+0x72], 0x80; lea rax, [rip-0xa9]; cmove rax, rdx; ret;
0x000ee152: add eax, 0xcfd09; lea rdx, [rip-0x6e]; test byte ptr [rax+0x72], 0x80; lea rax, [rip-0xa9]; cmove rax, rdx; ret;
0x000ee155: or al, 0; lea rdx, [rip-0x6e]; test byte ptr [rax+0x72], 0x80; lea rax, [rip-0xa9]; cmove rax, rdx; ret;
0x000ee156: add [rax-0x73], cl; adc eax, 0xffffff92; test byte ptr [rax+0x72], 0x80; lea rax, [rip-0xa9]; cmove rax, rdx; ret;
0x000ee157: lea rdx, [rip-0x6e]; test byte ptr [rax+0x72], 0x80; lea rax, [rip-0xa9]; cmove rax, rdx; ret;
0x000ee158: lea edx, [rip-0x6e]; test byte ptr [rax+0x72], 0x80; lea rax, [rip-0xa9]; cmove rax, rdx; ret;
0x000ee159: adc eax, 0xffffff92; test byte ptr [rax+0x72], 0x80; lea rax, [rip-0xa9]; cmove rax, rdx; ret;
0x000ee15e: test byte ptr [rax+0x72], 0x80; lea rax, [rip-0xa9]; cmove rax, rdx; ret;
0x000ee162: lea rax, [rip-0xa9]; cmove rax, rdx; ret;
0x000ee163: lea eax, [rip-0xa9]; cmove rax, rdx; ret;
0x000ee164: add eax, 0xffffff57; cmove rax, rdx; ret;
0x000ee17b: add ebp, ecx; xchg [rcx-0xd], esi; jmp qword ptr [rsi+0x2e];
0x000ee17d: xchg [rcx-0xd], esi; jmp qword ptr [rsi+0x2e];
0x000ee1c2: rol byte ptr [rcx], 0; add [rax-0x7b], cl; shl byte ptr [rbp+rsi+0x31], 0xd2; xor esi, esi; mov rdi, rbp; call rax;
0x000ee1c3: add [rax], eax; add [rax-0x7b], cl; shl byte ptr [rbp+rsi+0x31], 0xd2; xor esi, esi; mov rdi, rbp; call rax;
0x000ee1c5: add [rax-0x7b], cl; shl byte ptr [rbp+rsi+0x31], 0xd2; xor esi, esi; mov rdi, rbp; call rax;
0x000ee1c8: shl byte ptr [rbp+rsi+0x31], 0xd2; xor esi, esi; mov rdi, rbp; call rax;
0x000ee1ca: xor eax, 0xf631d231; mov rdi, rbp; call rax;
0x000ee1cb: xor edx, edx; xor esi, esi; mov rdi, rbp; call rax;
0x000ee1cc: shl byte ptr [rcx], cl; test byte ptr [rax-0x77], 0xef; call rax;
0x000ee1cd: xor esi, esi; mov rdi, rbp; call rax;
0x000ee1ce: test byte ptr [rax-0x77], 0xef; call rax;
0x000ee1f9: nop [rax]; xor edx, edx; xor esi, esi; mov rdi, rbp; mov eax, 0x135; syscall;
0x000ee1fd: add [rax], al; add [rcx], dh; shl byte ptr [rcx], cl; test byte ptr [rax-0x77], 0xef; mov eax, 0x135; syscall;
0x000ee1fe: add [rax], al; xor edx, edx; xor esi, esi; mov rdi, rbp; mov eax, 0x135; syscall;
0x000ee1ff: add [rcx], dh; shl byte ptr [rcx], cl; test byte ptr [rax-0x77], 0xef; mov eax, 0x135; syscall;
0x000ee200: xor edx, edx; xor esi, esi; mov rdi, rbp; mov eax, 0x135; syscall;
0x000ee201: shl byte ptr [rcx], cl; test byte ptr [rax-0x77], 0xef; mov eax, 0x135; syscall;
0x000ee202: xor esi, esi; mov rdi, rbp; mov eax, 0x135; syscall;
0x000ee203: test byte ptr [rax-0x77], 0xef; mov eax, 0x135; syscall;
0x000ee22d: add [rax], al; add [rbp+6], dh; add rsp, 0x10; pop rbp; ret;
0x000ee22f: add [rbp+6], dh; add rsp, 0x10; pop rbp; ret;
0x000ee257: rol byte ptr [rcx], 0; add [rax-0x7b], cl; shl byte ptr [rax+rsi+0x31], 0xd2; call rax;
0x000ee258: add [rax], eax; add [rax-0x7b], cl; shl byte ptr [rax+rsi+0x31], 0xd2; call rax;
0x000ee25a: add [rax-0x7b], cl; shl byte ptr [rax+rsi+0x31], 0xd2; call rax;
0x000ee25d: shl byte ptr [rax+rsi+0x31], 0xd2; call rax;
0x000ee260: xor edx, edx; call rax;
0x000ee27e: fisub st, dword ptr [rcx+rcx*4+0x10]; mov eax, 0xffffffff; add rsp, 8; pop rbp; pop r12; ret;
0x000ee27f: mov fs:[rax], edx; mov eax, 0xffffffff; add rsp, 8; pop rbp; pop r12; ret;
0x000ee280: mov [rax], edx; mov eax, 0xffffffff; add rsp, 8; pop rbp; pop r12; ret;
0x000ee281: adc [rax-1], bh; add rsp, 8; pop rbp; pop r12; ret;
0x000ee282: mov eax, 0xffffffff; add rsp, 8; pop rbp; pop r12; ret;
0x000ee28f: nop; xor edx, edx; mov rsi, r12; mov rdi, rbp; mov eax, 0x135; syscall;
0x000ee290: xor edx, edx; mov rsi, r12; mov rdi, rbp; mov eax, 0x135; syscall;
0x000ee291: ror byte ptr [rcx+rcx*4-0x1a], cl; mov rdi, rbp; mov eax, 0x135; syscall;
0x000ee292: mov rsi, r12; mov rdi, rbp; mov eax, 0x135; syscall;
0x000ee293: mov esi, esp; mov rdi, rbp; mov eax, 0x135; syscall;
0x000ee294: out 0x48, al; mov edi, ebp; mov eax, 0x135; syscall;
0x000ee295: mov rdi, rbp; mov eax, 0x135; syscall;
0x000ee296: mov edi, ebp; mov eax, 0x135; syscall;
0x000ee297: out dx, eax; mov eax, 0x135; syscall;
0x000ee298: mov eax, 0x135; syscall;
0x000ee2a1: ret 0x3d48;
0x000ee2a7: push qword ptr [rdi-0x34]; add rsp, 8; pop rbp; pop r12; ret;
0x000ee2a9: int3; add rsp, 8; pop rbp; pop r12; ret;
0x000ee2b2: nop [rax+rax]; nop [rax]; mov eax, 0x84; syscall;
0x000ee2b3: nop [rax+rax]; nop [rax]; mov eax, 0x84; syscall;
0x000ee2b4: nop [rax+rax]; nop [rax]; mov eax, 0x84; syscall;
0x000ee2b6: test [rax], al; add [rax], al; add [rax], al; nop [rax]; mov eax, 0x84; syscall;
0x000ee2b8: add [rax], al; add [rax], al; nop [rax]; mov eax, 0x84; syscall;
0x000ee2ba: add [rax], al; nop [rax]; mov eax, 0x84; syscall;
0x000ee2bc: nop [rax]; mov eax, 0x84; syscall;
0x000ee2be: add [rax+0x84], dil; syscall;
0x000ee2bf: add [rax+0x84], bh; syscall;
0x000ee2c0: mov eax, 0x84; syscall;
0x000ee2c1: test [rax], al; add [rax], al; syscall;
0x000ee2d2: or eax, 0xcfb99; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000ee2d4: sti; or al, 0; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000ee395: test dword ptr [rax-0x77], 0xf88341d6; add [rdi+0x29], esi; mov eax, 4; syscall;
0x000ee39b: clc; add [rdi+0x29], esi; mov eax, 4; syscall;
0x000ee39c: add [rdi+0x29], esi; mov eax, 4; syscall;
0x000ee39e: sub [rax+4], edi; syscall;
0x000ee39f: mov eax, 4; syscall;
0x000ee3a0: add al, 0; add [rax], al; syscall;
0x000ee3b2: adc eax, 0xcfab9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ee3b3: mov ecx, 0xf7000cfa; fsub st, dword ptr [rcx+rcx*4+2]; mov eax, 0xffffffff; ret;
0x000ee3c7: add [rax-0x75], cl; add eax, 0xcfaa1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000ee3ca: add eax, 0xcfaa1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000ee3cb: mov eax, [0x1600c764000cfa]; add [rax], al; mov eax, 0xffffffff; ret;
0x000ee3e4: test dword ptr [rax-0x77], 0xf88341d6; add [rdi+0x2a], esi; mov eax, 5; syscall;
0x000ee3ea: clc; add [rdi+0x2a], esi; mov eax, 5; syscall;
0x000ee3eb: add [rdi+0x2a], esi; mov eax, 5; syscall;
0x000ee3ed: sub bh, [rax+5]; syscall;
0x000ee3ee: mov eax, 5; syscall;
0x000ee3fa: push qword ptr [rdi+3]; ret;
0x000ee402: adc eax, 0xcfa69; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ee403: imul edi, edx, 0xd8f7000c; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ee417: add [rax-0x75], cl; add eax, 0xcfa51; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000ee41a: add eax, 0xcfa51; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000ee41b: push rcx; cli; or al, 0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000ee435: test dword ptr [rax-0x77], 0xf88341d6; add [rdi+0x29], esi; mov eax, 6; syscall;
0x000ee43b: clc; add [rdi+0x29], esi; mov eax, 6; syscall;
0x000ee43c: add [rdi+0x29], esi; mov eax, 6; syscall;
0x000ee43e: sub [rax+6], edi; syscall;
0x000ee43f: mov eax, 6; syscall;
0x000ee44b: push qword ptr [rdi+2]; ret;
0x000ee452: adc eax, 0xcfa19; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ee453: sbb edx, edi; or al, 0; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ee454: cli; or al, 0; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ee467: add [rax-0x75], cl; add eax, 0xcfa01; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000ee46a: add eax, 0xcfa01; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000ee46b: add edx, edi; or al, 0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000ee46c: cli; or al, 0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000ee490: add [rax-0x77], cl; test [rax+rbx*4], ah; add [rax], eax; add [rcx], dh; shl bh, 0xc2; jmp rsi;
0x000ee493: test [rax+rbx*4], ah; add [rax], eax; add [rcx], dh; shl bh, 0xc2; jmp rsi;
0x000ee494: and al, 0x98; add [rax], eax; add [rcx], dh; shl bh, 0xc2; jmp rsi;
0x000ee495: cwde; add [rax], eax; add [rcx], dh; shl bh, 0xc2; jmp rsi;
0x000ee496: add [rax], eax; add [rcx], dh; shl bh, 0xc2; jmp rsi;
0x000ee498: add [rcx], dh; shl bh, 0xc2; jmp rsi;
0x000ee49a: shl bh, 0xc2; jmp rsi;
0x000ee49c: ret 0xe6ff;
0x000ee49d: jmp rsi;
0x000ee4db: add [rax], al; add rsp, 0x1a0; mov eax, r8d; pop rbx; ret;
0x000ee4dd: add rsp, 0x1a0; mov eax, r8d; pop rbx; ret;
0x000ee4de: add esp, 0x1a0; mov eax, r8d; pop rbx; ret;
0x000ee4e1: add [rax], eax; add [rcx+rcx*4-0x40], al; pop rbx; ret;
0x000ee4e2: add [rax], al; mov eax, r8d; pop rbx; ret;
0x000ee4e3: add [rcx+rcx*4-0x40], al; pop rbx; ret;
0x000ee5b4: sub [rax-0x77], cl; ret 0xc148;
0x000ee733: out dx, al; add [rax], eax; nop [rax+rax]; mov r10d, ecx; mov eax, 0x14c; syscall;
0x000ee734: add [rax], eax; nop [rax+rax]; mov r10d, ecx; mov eax, 0x14c; syscall;
0x000ee735: add [rsi+0x2e], ah; nop [rax+rax]; mov r10d, ecx; mov eax, 0x14c; syscall;
0x000ee736: nop [rax+rax]; mov r10d, ecx; mov eax, 0x14c; syscall;
0x000ee737: nop [rax+rax]; mov r10d, ecx; mov eax, 0x14c; syscall;
0x000ee738: nop [rax+rax]; mov r10d, ecx; mov eax, 0x14c; syscall;
0x000ee73a: test [rax], al; add [rax], al; add [rax], al; mov r10d, ecx; mov eax, 0x14c; syscall;
0x000ee73c: add [rax], al; add [rax], al; mov r10d, ecx; mov eax, 0x14c; syscall;
0x000ee73e: add [rax], al; mov r10d, ecx; mov eax, 0x14c; syscall;
0x000ee740: mov r10d, ecx; mov eax, 0x14c; syscall;
0x000ee741: mov edx, ecx; mov eax, 0x14c; syscall;
0x000ee743: mov eax, 0x14c; syscall;
0x000ee762: add [rbx+0x87426f8], al; mov eax, r9d; ret;
0x000ee767: or [rcx+rcx*4-0x38], al; ret;
0x000ee78e: jmp qword ptr [rcx+rcx*4+1];
0x000ee791: add ebx, ebp; iretd;
0x000ee7b1: ror byte ptr [rax+0x39], 1; ret 0x3175;
0x000ee7b4: ret 0x3175;
0x000ee7b6: xor [rax+0x85], edi; syscall;
0x000ee7b7: mov eax, 0x85; syscall;
0x000ee7b8: test [rax], eax; add [rax], al; syscall;
0x000ee7cf: add [rax-0x75], cl; adc eax, 0xcf699; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ee7d2: adc eax, 0xcf699; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ee7d3: cdq; test byte ptr [rax+rax], 0xf7; fsub st, dword ptr [rcx+rcx*4+2]; mov eax, 0xffffffff; ret;
0x000ee7e7: add [rax-0x75], cl; add eax, 0xcf681; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000ee7ea: add eax, 0xcf681; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000ee7eb: xor esi, 0xc764000c; add [rsi], dl; add [rax], al; add [rax-1], bh; ret;
0x000ee814: ror byte ptr [rcx+0x39], 1; ret 0x2e75;
0x000ee817: ret 0x2e75;
0x000ee819: mov eax, 0x103; syscall;
0x000ee81a: mov eax, 0x103; syscall;
0x000ee81b: add eax, [rcx]; add [rax], al; syscall;
0x000ee82f: add [rax-0x75], cl; adc eax, 0xcf639; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ee832: adc eax, 0xcf639; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ee833: cmp esi, esi; or al, 0; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ee834: test byte ptr [rax+rax], 0xf7; fsub st, dword ptr [rcx+rcx*4+2]; mov eax, 0xffffffff; ret;
0x000ee847: add [rax-0x75], cl; add eax, 0xcf621; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000ee84a: add eax, 0xcf621; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000ee84b: and esi, esi; or al, 0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000ee84c: test byte ptr [rax+rax], 0x64; mov dword ptr [rax], 0x16; mov eax, 0xffffffff; ret;
0x000ee865: ret 0xf789;
0x000ee870: stc; add [rdi+0x2c], esi; mov eax, 0x106; syscall;
0x000ee871: add [rdi+0x2c], esi; mov eax, 0x106; syscall;
0x000ee874: mov eax, 0x106; syscall;
0x000ee887: add [rax-0x75], cl; adc eax, 0xcf5e1; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ee88a: adc eax, 0xcf5e1; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ee88c: cmc; or al, 0; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ee89f: add [rax-0x75], cl; add eax, 0xcf5c9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000ee8a2: add eax, 0xcf5c9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000ee8a3: leave; cmc; or al, 0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000ee8a4: cmc; or al, 0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000ee8b2: inc ebx; nop [rax+rax]; xchg ax, ax; mov eax, 0x89; syscall;
0x000ee8b4: nop [rax+rax]; xchg ax, ax; mov eax, 0x89; syscall;
0x000ee8b5: nop [rax+rax]; xchg ax, ax; mov eax, 0x89; syscall;
0x000ee8b6: nop [rax+rax]; xchg ax, ax; mov eax, 0x89; syscall;
0x000ee8b8: test [rax], al; add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0x89; syscall;
0x000ee8b9: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, 0x89; syscall;
0x000ee8ba: add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0x89; syscall;
0x000ee8bb: add [rax], al; add [rsi-0x70], ah; mov eax, 0x89; syscall;
0x000ee8bc: add [rax], al; xchg ax, ax; mov eax, 0x89; syscall;
0x000ee8bd: add [rsi-0x70], ah; mov eax, 0x89; syscall;
0x000ee8be: xchg ax, ax; mov eax, 0x89; syscall;
0x000ee8bf: nop; mov eax, 0x89; syscall;
0x000ee8c0: mov eax, 0x89; syscall;
0x000ee8c1: mov [rax], eax; add [rax], al; syscall;
0x000ee8d2: or eax, 0xcf599; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000ee8db: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x8a; syscall;
0x000ee8de: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x8a; syscall;
0x000ee8df: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x8a; syscall;
0x000ee8e1: nop [rax+rax]; nop [rax+rax]; mov eax, 0x8a; syscall;
0x000ee8e2: nop [rax+rax]; nop [rax+rax]; mov eax, 0x8a; syscall;
0x000ee8e3: nop [rax+rax]; nop [rax+rax]; mov eax, 0x8a; syscall;
0x000ee8e5: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x8a; syscall;
0x000ee8e7: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x8a; syscall;
0x000ee8e9: add [rax], al; nop [rax+rax]; mov eax, 0x8a; syscall;
0x000ee8eb: nop [rax+rax]; mov eax, 0x8a; syscall;
0x000ee8ed: add [rax], r8b; mov eax, 0x8a; syscall;
0x000ee8ee: add [rax], al; mov eax, 0x8a; syscall;
0x000ee8ef: add [rax+0x8a], bh; syscall;
0x000ee8f0: mov eax, 0x8a; syscall;
0x000ee8f1: mov al, [rax]; add [rax], al; syscall;
0x000ee902: or eax, 0xcf569; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000ee903: imul esi, ebp, 0xd8f7000c; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000ee904: cmc; or al, 0; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000ee970: add [rbp+0x14], dh; sub rsp, 0xffffffffffffff80; pop rbp; pop r12; pop r13; ret;
0x000ee972: adc al, 0x48; sub esp, 0xffffff80; pop rbp; pop r12; pop r13; ret;
0x000ee9dd: add [rbp+0x17], dh; sub rsp, 0xffffffffffffff80; pop rbp; pop r12; pop r13; ret;
0x000ee9e0: sub rsp, 0xffffffffffffff80; pop rbp; pop r12; pop r13; ret;
0x000ee9e1: sub esp, 0xffffff80; pop rbp; pop r12; pop r13; ret;
0x000ee9e2: in al, dx; sbb byte ptr [rbp+0x41], 0x5c; pop r13; ret;
0x000ee9e3: sbb byte ptr [rbp+0x41], 0x5c; pop r13; ret;
0x000ee9f6: fld1; and al, 0xec; add [rax], eax; nop [rax]; mov eax, 0x5f; syscall;
0x000ee9f8: and al, 0xec; add [rax], eax; nop [rax]; mov eax, 0x5f; syscall;
0x000ee9f8: and al, 0xec; add [rax], eax; nop [rax]; mov eax, 0x5f; syscall; ret;
0x000ee9f9: in al, dx; add [rax], eax; nop [rax]; mov eax, 0x5f; syscall; ret;
0x000ee9f9: in al, dx; add [rax], eax; nop [rax]; mov eax, 0x5f; syscall;
0x000ee9fa: add [rax], eax; nop [rax]; mov eax, 0x5f; syscall;
0x000ee9fa: add [rax], eax; nop [rax]; mov eax, 0x5f; syscall; ret;
0x000ee9fc: nop [rax]; mov eax, 0x5f; syscall; ret;
0x000ee9fc: nop [rax]; mov eax, 0x5f; syscall;
0x000ee9fe: add [rax+0x5f], dil; syscall;
0x000ee9fe: add [rax+0x5f], dil; syscall; ret;
0x000ee9ff: add [rax+0x5f], bh; syscall;
0x000ee9ff: add [rax+0x5f], bh; syscall; ret;
0x000eea00: mov eax, 0x5f; syscall; ret;
0x000eea00: mov eax, 0x5f; syscall;
0x000eea04: add [rdi], cl; add eax, 0x841f0fc3; add [rax], al; add [rax], al; add [rax+0x5a], bh; syscall;
0x000eea06: add eax, 0x841f0fc3; add [rax], al; add [rax], al; add [rax+0x5a], bh; syscall;
0x000eea08: nop [rax+rax]; mov eax, 0x5a; syscall;
0x000eea0a: test [rax], al; add [rax], al; add [rax], al; mov eax, 0x5a; syscall;
0x000eea0b: add [rax], al; add [rax], al; add [rax+0x5a], bh; syscall;
0x000eea0c: add [rax], al; add [rax], al; mov eax, 0x5a; syscall;
0x000eea0d: add [rax], al; add [rax+0x5a], bh; syscall;
0x000eea0e: add [rax], al; mov eax, 0x5a; syscall;
0x000eea0f: add [rax+0x5a], bh; syscall;
0x000eea10: mov eax, 0x5a; syscall;
0x000eea22: or eax, 0xcf449; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000eea2b: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x5b; syscall;
0x000eea2e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x5b; syscall;
0x000eea2f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x5b; syscall;
0x000eea31: nop [rax+rax]; nop [rax+rax]; mov eax, 0x5b; syscall;
0x000eea32: nop [rax+rax]; nop [rax+rax]; mov eax, 0x5b; syscall;
0x000eea33: nop [rax+rax]; nop [rax+rax]; mov eax, 0x5b; syscall;
0x000eea35: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x5b; syscall;
0x000eea37: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x5b; syscall;
0x000eea39: add [rax], al; nop [rax+rax]; mov eax, 0x5b; syscall;
0x000eea3b: nop [rax+rax]; mov eax, 0x5b; syscall;
0x000eea3d: add [rax], r8b; mov eax, 0x5b; syscall;
0x000eea3e: add [rax], al; mov eax, 0x5b; syscall;
0x000eea3f: add [rax+0x5b], bh; syscall;
0x000eea40: mov eax, 0x5b; syscall;
0x000eea52: or eax, 0xcf419; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000eea53: sbb esp, esi; or al, 0; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000eea54: hlt; or al, 0; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000eea61: nop [rax+rax]; nop [rax+rax]; mov rax, [rip+0xcf3f9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x000eea62: nop [rax+rax]; nop [rax+rax]; mov rax, [rip+0xcf3f9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x000eea63: nop [rax+rax]; nop [rax+rax]; mov rax, [rip+0xcf3f9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x000eea69: add [rax], al; nop [rax+rax]; mov rax, [rip+0xcf3f9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x000eea6f: add [rax-0x75], cl; add eax, 0xcf3f9; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x000eea72: add eax, 0xcf3f9; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x000eea97: xor [rax+0x437501e5], al; mov eax, 0x10c; syscall;
0x000eea9a: add [rbp+0x43], esi; mov eax, 0x10c; syscall;
0x000eea9c: mov r8d, 0x10c; syscall;
0x000eea9d: mov eax, 0x10c; syscall;
0x000eea9e: or al, 1; add [rax], al; syscall;
0x000eeaaf: add [rax-0x75], cl; adc eax, 0xcf3b9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000eeab2: adc eax, 0xcf3b9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000eeab3: mov ecx, 0xf7000cf3; fsub st, dword ptr [rcx+rcx*4+2]; mov eax, 0xffffffff; ret;
0x000eeac7: add [rax-0x75], cl; add eax, 0xcf3a1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000eeaca: add eax, 0xcf3a1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000eeacb: mov eax, [0x1600c764000cf3]; add [rax], al; mov eax, 0xffffffff; ret;
0x000eeada: inc ebx; nop [rax]; mov rax, [rip+0xcf389]; mov dword ptr fs:[rax], 0x5f; mov eax, 0xffffffff; ret;
0x000eeadc: nop [rax]; mov rax, [rip+0xcf389]; mov dword ptr fs:[rax], 0x5f; mov eax, 0xffffffff; ret;
0x000eeadf: add [rax-0x75], cl; add eax, 0xcf389; mov dword ptr fs:[rax], 0x5f; mov eax, 0xffffffff; ret;
0x000eeae0: mov rax, [rip+0xcf389]; mov dword ptr fs:[rax], 0x5f; mov eax, 0xffffffff; ret;
0x000eeae1: mov eax, [rip+0xcf389]; mov dword ptr fs:[rax], 0x5f; mov eax, 0xffffffff; ret;
0x000eeae2: add eax, 0xcf389; mov dword ptr fs:[rax], 0x5f; mov eax, 0xffffffff; ret;
0x000eeae3: mov ebx, esi; or al, 0; mov dword ptr fs:[rax], 0x5f; mov eax, 0xffffffff; ret;
0x000eeae5: or al, 0; mov dword ptr fs:[rax], 0x5f; mov eax, 0xffffffff; ret;
0x000eeae6: add [rdi+rax*8], ah; pop rdi; add [rax], al; add [rax-1], bh; ret;
0x000eeae7: mov dword ptr fs:[rax], 0x5f; mov eax, 0xffffffff; ret;
0x000eeae8: mov dword ptr [rax], 0x5f; mov eax, 0xffffffff; ret;
0x000eeae9: add [rdi], bl; add [rax], al; mov eax, 0xffffffff; ret;
0x000eeaea: pop rdi; add [rax], al; add [rax-1], bh; ret;
0x000eeaf2: inc ebx; nop [rax+rax]; xchg ax, ax; mov eax, 0x53; syscall;
0x000eeaf4: nop [rax+rax]; xchg ax, ax; mov eax, 0x53; syscall;
0x000eeaf5: nop [rax+rax]; xchg ax, ax; mov eax, 0x53; syscall;
0x000eeaf6: nop [rax+rax]; xchg ax, ax; mov eax, 0x53; syscall;
0x000eeaf8: test [rax], al; add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0x53; syscall;
0x000eeaf9: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, 0x53; syscall;
0x000eeafa: add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0x53; syscall;
0x000eeafb: add [rax], al; add [rsi-0x70], ah; mov eax, 0x53; syscall;
0x000eeafc: add [rax], al; xchg ax, ax; mov eax, 0x53; syscall;
0x000eeafd: add [rsi-0x70], ah; mov eax, 0x53; syscall;
0x000eeafe: xchg ax, ax; mov eax, 0x53; syscall;
0x000eeaff: nop; mov eax, 0x53; syscall;
0x000eeb00: mov eax, 0x53; syscall;
0x000eeb12: or eax, 0xcf359; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000eeb1b: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x102; syscall;
0x000eeb1e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x102; syscall;
0x000eeb1f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x102; syscall;
0x000eeb21: nop [rax+rax]; nop [rax+rax]; mov eax, 0x102; syscall;
0x000eeb22: nop [rax+rax]; nop [rax+rax]; mov eax, 0x102; syscall;
0x000eeb23: nop [rax+rax]; nop [rax+rax]; mov eax, 0x102; syscall;
0x000eeb25: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x102; syscall;
0x000eeb27: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x102; syscall;
0x000eeb29: add [rax], al; nop [rax+rax]; mov eax, 0x102; syscall;
0x000eeb2b: nop [rax+rax]; mov eax, 0x102; syscall;
0x000eeb2d: add [rax], r8b; mov eax, 0x102; syscall;
0x000eeb2e: add [rax], al; mov eax, 0x102; syscall;
0x000eeb2f: add [rax+0x102], bh; syscall;
0x000eeb30: mov eax, 0x102; syscall;
0x000eeb31: add al, [rcx]; add [rax], al; syscall;
0x000eeb42: or eax, 0xcf329; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000eeb43: sub ebx, esi; or al, 0; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000eebd0: add [rbp+0x446b75c0], al; mov edx, esp; mov rsi, rbp; mov edi, 0xffffff9c; mov eax, 0x101; syscall;
0x000eebd2: shl byte ptr [rbp+0x6b], 0x44; mov edx, esp; mov rsi, rbp; mov edi, 0xffffff9c; mov eax, 0x101; syscall;
0x000eebd4: imul eax, [rcx+rcx*4-0x1e], 0x48; mov esi, ebp; mov edi, 0xffffff9c; mov eax, 0x101; syscall;
0x000eebd5: mov edx, r12d; mov rsi, rbp; mov edi, 0xffffff9c; mov eax, 0x101; syscall;
0x000eebd6: mov edx, esp; mov rsi, rbp; mov edi, 0xffffff9c; mov eax, 0x101; syscall;
0x000eebd8: mov rsi, rbp; mov edi, 0xffffff9c; mov eax, 0x101; syscall;
0x000eebd9: mov esi, ebp; mov edi, 0xffffff9c; mov eax, 0x101; syscall;
0x000eebda: out dx, al; mov edi, 0xffffff9c; mov eax, 0x101; syscall;
0x000eec05: add [rax], al; add rsp, 0x68; pop rbp; pop r12; ret;
0x000eec07: add rsp, 0x68; pop rbp; pop r12; ret;
0x000eec08: add esp, 0x68; pop rbp; pop r12; ret;
0x000eec4f: mov edx, r12d; mov rsi, rbp; mov r8d, eax; mov edi, 0xffffff9c; mov eax, 0x101; syscall;
0x000eec50: mov edx, esp; mov rsi, rbp; mov r8d, eax; mov edi, 0xffffff9c; mov eax, 0x101; syscall;
0x000eec52: mov rsi, rbp; mov r8d, eax; mov edi, 0xffffff9c; mov eax, 0x101; syscall;
0x000eec53: mov esi, ebp; mov r8d, eax; mov edi, 0xffffff9c; mov eax, 0x101; syscall;
0x000eec54: out dx, al; mov r8d, eax; mov edi, 0xffffff9c; mov eax, 0x101; syscall;
0x000eec55: mov r8d, eax; mov edi, 0xffffff9c; mov eax, 0x101; syscall;
0x000eec56: mov eax, eax; mov edi, 0xffffff9c; mov eax, 0x101; syscall;
0x000eec57: sar byte ptr [rdi-0x64], 0xb8; add [rcx], eax; add [rax], al; syscall;
0x000eed54: add [rax], al; add [rbp-0x479a8a40], al; add [rcx], eax; add [rax], al; syscall;
0x000eed56: add [rbp-0x479a8a40], al; add [rcx], eax; add [rax], al; syscall;
0x000eed58: shl byte ptr [rbp+0x65], 0xb8; add [rcx], eax; add [rax], al; syscall;
0x000eed5a: mov eax, 0x101; syscall;
0x000eed80: add [rax], al; add rsp, 0x78; ret;
0x000eeddc: mov edx, [rsp+0x1c]; mov r8d, eax; mov rsi, [rsp+0x10]; mov edi, [rsp+0x18]; mov eax, 0x101; syscall;
0x000eedde: and al, 0x1c; mov r8d, eax; mov rsi, [rsp+0x10]; mov edi, [rsp+0x18]; mov eax, 0x101; syscall;
0x000eeddf: sbb al, 0x41; mov eax, eax; mov rsi, [rsp+0x10]; mov edi, [rsp+0x18]; mov eax, 0x101; syscall;
0x000eede0: mov r8d, eax; mov rsi, [rsp+0x10]; mov edi, [rsp+0x18]; mov eax, 0x101; syscall;
0x000eede1: mov eax, eax; mov rsi, [rsp+0x10]; mov edi, [rsp+0x18]; mov eax, 0x101; syscall;
0x000eede2: ror byte ptr [rax-0x75], 0x74; and al, 0x10; mov edi, [rsp+0x18]; mov eax, 0x101; syscall;
0x000eede3: mov rsi, [rsp+0x10]; mov edi, [rsp+0x18]; mov eax, 0x101; syscall;
0x000eede4: mov esi, [rsp+0x10]; mov edi, [rsp+0x18]; mov eax, 0x101; syscall;
0x000eede6: and al, 0x10; mov edi, [rsp+0x18]; mov eax, 0x101; syscall;
0x000eede7: adc [rbx-0x47e7db84], cl; add [rcx], eax; add [rax], al; syscall;
0x000eede8: mov edi, [rsp+0x18]; mov eax, 0x101; syscall;
0x000eedea: and al, 0x18; mov eax, 0x101; syscall;
0x000eedeb: sbb [rax+0x101], bh; syscall;
0x000eee4b: add [rax], al; add [rax], al; add dh, dh; ret 0x7540;
0x000eee4d: add [rax], al; add dh, dh; ret 0x7540;
0x000eeeb7: mov rdx, [rsp+0x18]; mov rsi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+8]; xor eax, eax; syscall;
0x000eeeb8: mov edx, [rsp+0x18]; mov rsi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+8]; xor eax, eax; syscall;
0x000eeeba: and al, 0x18; mov rsi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+8]; xor eax, eax; syscall;
0x000eeebc: mov rsi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+8]; xor eax, eax; syscall;
0x000eeebd: mov esi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+8]; xor eax, eax; syscall;
0x000eeebf: and al, 0x10; mov r8d, eax; mov edi, [rsp+8]; xor eax, eax; syscall;
0x000eeec0: adc [rcx-0x77], al; ror byte ptr [rbx+0x3108247c], 0xc0; syscall;
0x000eeec1: mov r8d, eax; mov edi, [rsp+8]; xor eax, eax; syscall;
0x000eeec2: mov eax, eax; mov edi, [rsp+8]; xor eax, eax; syscall;
0x000eeec3: ror byte ptr [rbx+0x3108247c], 0xc0; syscall;
0x000eeec4: mov edi, [rsp+8]; xor eax, eax; syscall;
0x000eeec6: and al, 8; xor eax, eax; syscall;
0x000eeedb: or al, ch; call far fword ptr [rsi-7];
0x000eeedd: call far fword ptr [rsi-7];
0x000eeeef: add [rax-0x75], cl; adc eax, 0xcef79; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000eeef2: adc eax, 0xcef79; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000eeef4: out dx, eax; or al, 0; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000eef25: add [rax], al; add [rbp-0x47eb8a40], al; add [rax], eax; add [rax], al; syscall;
0x000eef27: add [rbp-0x47eb8a40], al; add [rax], eax; add [rax], al; syscall;
0x000eef29: shl byte ptr [rbp+0x14], 0xb8; add [rax], eax; add [rax], al; syscall;
0x000eef2b: adc al, 0xb8; add [rax], eax; add [rax], al; syscall;
0x000eef57: mov rdx, [rsp+0x18]; mov rsi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+8]; mov eax, 1; syscall;
0x000eef58: mov edx, [rsp+0x18]; mov rsi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+8]; mov eax, 1; syscall;
0x000eef5a: and al, 0x18; mov rsi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+8]; mov eax, 1; syscall;
0x000eef5c: mov rsi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+8]; mov eax, 1; syscall;
0x000eef5d: mov esi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+8]; mov eax, 1; syscall;
0x000eef5f: and al, 0x10; mov r8d, eax; mov edi, [rsp+8]; mov eax, 1; syscall;
0x000eef61: mov r8d, eax; mov edi, [rsp+8]; mov eax, 1; syscall;
0x000eef62: mov eax, eax; mov edi, [rsp+8]; mov eax, 1; syscall;
0x000eef64: mov edi, [rsp+8]; mov eax, 1; syscall;
0x000eef66: and al, 8; mov eax, 1; syscall;
0x000eef67: or [rax+1], bh; syscall;
0x000eef81: pop rsi; stc; dec dword ptr [rax-0x75]; and al, 8; add rsp, 0x28; ret;
0x000eef8e: xchg ax, ax; mov rdx, [rip+0x17e1a9]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000eef8f: nop; mov rdx, [rip+0x17e1a9]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000eef92: adc eax, 0xceed9; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000eef93: fldz; or al, 0; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000eefbc: mov edx, 0xb8001f0f; or [rax], al; add [rax], al; syscall;
0x000eefbd: nop [rax]; mov eax, 8; syscall;
0x000eefbf: add [rax+8], bh; syscall;
0x000eefc0: mov eax, 8; syscall;
0x000eefd2: adc eax, 0xcee99; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000eefd4: out dx, al; or al, 0; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000eefe2: inc ebx; nop [rax+rax]; xchg ax, ax; mov eax, 0x15; syscall;
0x000eefe4: nop [rax+rax]; xchg ax, ax; mov eax, 0x15; syscall;
0x000eefe5: nop [rax+rax]; xchg ax, ax; mov eax, 0x15; syscall;
0x000eefe6: nop [rax+rax]; xchg ax, ax; mov eax, 0x15; syscall;
0x000eefe8: test [rax], al; add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0x15; syscall;
0x000eefe9: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, 0x15; syscall;
0x000eefea: add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0x15; syscall;
0x000eefeb: add [rax], al; add [rsi-0x70], ah; mov eax, 0x15; syscall;
0x000eefec: add [rax], al; xchg ax, ax; mov eax, 0x15; syscall;
0x000eefed: add [rsi-0x70], ah; mov eax, 0x15; syscall;
0x000eefee: xchg ax, ax; mov eax, 0x15; syscall;
0x000eefef: nop; mov eax, 0x15; syscall;
0x000eeff0: mov eax, 0x15; syscall;
0x000ef002: adc eax, 0xcee69; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ef003: imul ebp, esi, 0xd8f7000c; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ef004: out dx, al; or al, 0; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ef26c: nop [rax]; mov edx, r13d; mov eax, 0x10d; syscall;
0x000ef26f: add [rcx+rcx*4-0x16], al; mov eax, 0x10d; syscall;
0x000ef270: mov edx, r13d; mov eax, 0x10d; syscall;
0x000ef271: mov edx, ebp; mov eax, 0x10d; syscall;
0x000ef273: mov eax, 0x10d; syscall;
0x000ef2a2: add [rcx+rcx*4-0x20], al; pop rbx; pop rbp; pop r12; pop r13; ret;
0x000ef30e: call qword ptr [rax+0x59058b48];
0x000ef37f: add [rax], al; add [rdi], cl; test [rbp+0x48000000], ecx; add esp, 0x68; ret;
0x000ef381: add [rdi], cl; test [rbp+0x48000000], ecx; add esp, 0x68; ret;
0x000ef383: test [rbp+0x48000000], ecx; add esp, 0x68; ret;
0x000ef384: lea eax, [rax]; add [rax], al; add rsp, 0x68; ret;
0x000ef386: add [rax], al; add rsp, 0x68; ret;
0x000ef3d1: mov rdx, [rsp]; mov esi, [rsp+0xc]; mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x48; syscall;
0x000ef3d2: mov edx, [rsp]; mov esi, [rsp+0xc]; mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x48; syscall;
0x000ef3d3: adc al, 0x24; mov esi, [rsp+0xc]; mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x48; syscall;
0x000ef3d5: mov esi, [rsp+0xc]; mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x48; syscall;
0x000ef3d7: and al, 0xc; mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x48; syscall;
0x000ef3d8: or al, 0x41; mov eax, eax; mov edi, [rsp+8]; mov eax, 0x48; syscall;
0x000ef3d9: mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x48; syscall;
0x000ef3da: mov eax, eax; mov edi, [rsp+8]; mov eax, 0x48; syscall;
0x000ef3dc: mov edi, [rsp+8]; mov eax, 0x48; syscall;
0x000ef3de: and al, 8; mov eax, 0x48; syscall;
0x000ef3df: or [rax+0x48], bh; syscall;
0x000ef418: add [rax], eax; nop [rax+rax]; mov eax, 0x49; syscall;
0x000ef41a: nop [rax+rax]; mov eax, 0x49; syscall;
0x000ef41b: nop [rax+rax]; mov eax, 0x49; syscall;
0x000ef41d: add [rax], r8b; mov eax, 0x49; syscall;
0x000ef41e: add [rax], al; mov eax, 0x49; syscall;
0x000ef41f: add [rax+0x49], bh; syscall;
0x000ef420: mov eax, 0x49; syscall;
0x000ef432: or eax, 0xcea39; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000ef433: cmp edx, ebp; or al, 0; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000ef5e0: add [rax], al; add [rdi], cl; test [rbp+0x48000000], esi; add esp, 0x30; pop rbx; ret;
0x000ef5e2: add [rdi], cl; test [rbp+0x48000000], esi; add esp, 0x30; pop rbx; ret;
0x000ef5e4: test [rbp+0x48000000], esi; add esp, 0x30; pop rbx; ret;
0x000ef5e5: mov ch, 0; add [rax], al; add rsp, 0x30; pop rbx; ret;
0x000ef5e7: add [rax], al; add rsp, 0x30; pop rbx; ret;
0x000ef6b5: add [rax], al; add [rbp-0x47eb8a40], al; add eax, [rax]; add [rax], al; syscall;
0x000ef6b7: add [rbp-0x47eb8a40], al; add eax, [rax]; add [rax], al; syscall;
0x000ef6b9: shl byte ptr [rbp+0x14], 0xb8; add eax, [rax]; add [rax], al; syscall;
0x000ef6bb: adc al, 0xb8; add eax, [rax]; add [rax], al; syscall;
0x000ef6d2: in al, dx; sbb [rcx-0x17f3db84], cl; mov [0x410c247c8bfff956], eax; mov eax, eax; mov eax, 3; syscall;
0x000ef6d3: sbb [rcx-0x17f3db84], cl; mov [0x410c247c8bfff956], eax; mov eax, eax; mov eax, 3; syscall;
0x000ef6d7: or al, 0xe8; mov [0x410c247c8bfff956], eax; mov eax, eax; mov eax, 3; syscall;
0x000ef6d9: mov [0x410c247c8bfff956], eax; mov eax, eax; mov eax, 3; syscall;
0x000ef6da: push rsi; stc; dec dword ptr [rbx+0x410c247c]; mov eax, eax; mov eax, 3; syscall;
0x000ef6db: stc; dec dword ptr [rbx+0x410c247c]; mov eax, eax; mov eax, 3; syscall;
0x000ef6dc: dec dword ptr [rbx+0x410c247c]; mov eax, eax; mov eax, 3; syscall;
0x000ef6dd: mov edi, [rsp+0xc]; mov r8d, eax; mov eax, 3; syscall;
0x000ef6df: and al, 0xc; mov r8d, eax; mov eax, 3; syscall;
0x000ef6e0: or al, 0x41; mov eax, eax; mov eax, 3; syscall;
0x000ef6e1: mov r8d, eax; mov eax, 3; syscall;
0x000ef6e2: mov eax, eax; mov eax, 3; syscall;
0x000ef6fc: push rsi; stc; dec dword ptr [rbx+0x480c2444]; add esp, 0x18; ret;
0x000ef70f: add [rax-0x75], cl; adc eax, 0xce759; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ef712: adc eax, 0xce759; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ef713: pop rcx; out 0xc, eax; add bh, dh; fsub st, dword ptr [rcx+rcx*4+2]; mov eax, 0xffffffff; ret;
0x000ef714: out 0xc, eax; add bh, dh; fsub st, dword ptr [rcx+rcx*4+2]; mov eax, 0xffffffff; ret;
0x000ef73a: mov eax, 0x441f0f; add [rax+0x20], bh; syscall;
0x000ef73b: nop [rax+rax]; mov eax, 0x20; syscall;
0x000ef73d: add [rax], r8b; mov eax, 0x20; syscall;
0x000ef73e: add [rax], al; mov eax, 0x20; syscall;
0x000ef73f: add [rax+0x20], bh; syscall;
0x000ef740: mov eax, 0x20; syscall;
0x000ef741: and [rax], al; add [rax], al; syscall;
0x000ef752: or eax, 0xce719; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000ef753: sbb edi, esp; or al, 0; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000ef754: out 0xc, eax; add bh, dh; fsub st, dword ptr [rcx+rcx*4+1]; or rax, 0xffffffffffffffff; ret;
0x000ef75b: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x21; syscall;
0x000ef75e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x21; syscall;
0x000ef75f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x21; syscall;
0x000ef761: nop [rax+rax]; nop [rax+rax]; mov eax, 0x21; syscall;
0x000ef762: nop [rax+rax]; nop [rax+rax]; mov eax, 0x21; syscall;
0x000ef763: nop [rax+rax]; nop [rax+rax]; mov eax, 0x21; syscall;
0x000ef765: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x21; syscall;
0x000ef767: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x21; syscall;
0x000ef769: add [rax], al; nop [rax+rax]; mov eax, 0x21; syscall;
0x000ef76b: nop [rax+rax]; mov eax, 0x21; syscall;
0x000ef76d: add [rax], r8b; mov eax, 0x21; syscall;
0x000ef76e: add [rax], al; mov eax, 0x21; syscall;
0x000ef76f: add [rax+0x21], bh; syscall;
0x000ef770: mov eax, 0x21; syscall;
0x000ef771: and [rax], eax; add [rax], al; syscall;
0x000ef782: or eax, 0xce6e9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000ef78b: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x124; syscall;
0x000ef78e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x124; syscall;
0x000ef78f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x124; syscall;
0x000ef791: nop [rax+rax]; nop [rax+rax]; mov eax, 0x124; syscall;
0x000ef792: nop [rax+rax]; nop [rax+rax]; mov eax, 0x124; syscall;
0x000ef793: nop [rax+rax]; nop [rax+rax]; mov eax, 0x124; syscall;
0x000ef795: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x124; syscall;
0x000ef797: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x124; syscall;
0x000ef799: add [rax], al; nop [rax+rax]; mov eax, 0x124; syscall;
0x000ef79b: nop [rax+rax]; mov eax, 0x124; syscall;
0x000ef79d: add [rax], r8b; mov eax, 0x124; syscall;
0x000ef79e: add [rax], al; mov eax, 0x124; syscall;
0x000ef79f: add [rax+0x124], bh; syscall;
0x000ef7a0: mov eax, 0x124; syscall;
0x000ef7a1: and al, 1; add [rax], al; syscall;
0x000ef7b2: or eax, 0xce6b9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000ef7b3: mov ecx, 0xf7000ce6; fsub st, dword ptr [rcx+rcx*4+1]; or rax, 0xffffffffffffffff; ret;
0x000ef7bb: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x16; syscall;
0x000ef7be: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x16; syscall;
0x000ef7bf: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x16; syscall;
0x000ef7c1: nop [rax+rax]; nop [rax+rax]; mov eax, 0x16; syscall;
0x000ef7c2: nop [rax+rax]; nop [rax+rax]; mov eax, 0x16; syscall;
0x000ef7c3: nop [rax+rax]; nop [rax+rax]; mov eax, 0x16; syscall;
0x000ef7c5: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x16; syscall;
0x000ef7c7: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x16; syscall;
0x000ef7c9: add [rax], al; nop [rax+rax]; mov eax, 0x16; syscall;
0x000ef7cb: nop [rax+rax]; mov eax, 0x16; syscall;
0x000ef7cd: add [rax], r8b; mov eax, 0x16; syscall;
0x000ef7ce: add [rax], al; mov eax, 0x16; syscall;
0x000ef7cf: add [rax+0x16], bh; syscall;
0x000ef7d0: mov eax, 0x16; syscall;
0x000ef7e2: or eax, 0xce689; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000ef7e3: mov esi, esp; or al, 0; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000ef7eb: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x125; syscall;
0x000ef7ee: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x125; syscall;
0x000ef7ef: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x125; syscall;
0x000ef7f1: nop [rax+rax]; nop [rax+rax]; mov eax, 0x125; syscall;
0x000ef7f2: nop [rax+rax]; nop [rax+rax]; mov eax, 0x125; syscall;
0x000ef7f3: nop [rax+rax]; nop [rax+rax]; mov eax, 0x125; syscall;
0x000ef7f5: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x125; syscall;
0x000ef7f7: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x125; syscall;
0x000ef7f9: add [rax], al; nop [rax+rax]; mov eax, 0x125; syscall;
0x000ef7fb: nop [rax+rax]; mov eax, 0x125; syscall;
0x000ef7fd: add [rax], r8b; mov eax, 0x125; syscall;
0x000ef7fe: add [rax], al; mov eax, 0x125; syscall;
0x000ef7ff: add [rax+0x125], bh; syscall;
0x000ef800: mov eax, 0x125; syscall;
0x000ef812: or eax, 0xce659; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000ef813: pop rcx; out 0xc, al; add bh, dh; fsub st, dword ptr [rcx+rcx*4+1]; or rax, 0xffffffffffffffff; ret;
0x000ef814: out 0xc, al; add bh, dh; fsub st, dword ptr [rcx+rcx*4+1]; or rax, 0xffffffffffffffff; ret;
0x000ef85f: stc; dec dword ptr [rbx+0x480c2474]; mov edi, [rsp]; mov r8d, eax; mov eax, 0x55; syscall;
0x000ef860: dec dword ptr [rbx+0x480c2474]; mov edi, [rsp]; mov r8d, eax; mov eax, 0x55; syscall;
0x000ef861: mov esi, [rsp+0xc]; mov rdi, [rsp]; mov r8d, eax; mov eax, 0x55; syscall;
0x000ef863: and al, 0xc; mov rdi, [rsp]; mov r8d, eax; mov eax, 0x55; syscall;
0x000ef864: or al, 0x48; mov edi, [rsp]; mov r8d, eax; mov eax, 0x55; syscall;
0x000ef865: mov rdi, [rsp]; mov r8d, eax; mov eax, 0x55; syscall;
0x000ef866: mov edi, [rsp]; mov r8d, eax; mov eax, 0x55; syscall;
0x000ef867: cmp al, 0x24; mov r8d, eax; mov eax, 0x55; syscall;
0x000ef868: and al, 0x41; mov eax, eax; mov eax, 0x55; syscall;
0x000ef869: mov r8d, eax; mov eax, 0x55; syscall;
0x000ef86a: mov eax, eax; mov eax, 0x55; syscall;
0x000ef86c: mov eax, 0x55; syscall;
0x000ef886: mov eax, [rsp]; add rsp, 0x18; ret;
0x000ef887: add al, 0x24; add rsp, 0x18; ret;
0x000ef888: and al, 0x48; add esp, 0x18; ret;
0x000ef88e: xchg ax, ax; mov rdx, [rip+0xf2b89]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ef88f: nop; mov rdx, [rip+0xf2b89]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ef892: adc eax, 0xce5d9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ef893: fxam; or al, 0; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ef894: in eax, 0xc; add bh, dh; fsub st, dword ptr [rcx+rcx*4+2]; mov eax, 0xffffffff; ret;
0x000ef8ba: ror byte ptr [rdi], 0x1f; add [rax], r8b; mov eax, 0x50; syscall;
0x000ef8bb: nop [rax+rax]; mov eax, 0x50; syscall;
0x000ef8bd: add [rax], r8b; mov eax, 0x50; syscall;
0x000ef8be: add [rax], al; mov eax, 0x50; syscall;
0x000ef8bf: add [rax+0x50], bh; syscall;
0x000ef8c0: mov eax, 0x50; syscall;
0x000ef8d2: or eax, 0xce599; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000ef8d3: cdq; in eax, 0xc; add bh, dh; fsub st, dword ptr [rcx+rcx*4+1]; or rax, 0xffffffffffffffff; ret;
0x000ef8db: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x51; syscall;
0x000ef8de: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x51; syscall;
0x000ef8df: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x51; syscall;
0x000ef8e1: nop [rax+rax]; nop [rax+rax]; mov eax, 0x51; syscall;
0x000ef8e2: nop [rax+rax]; nop [rax+rax]; mov eax, 0x51; syscall;
0x000ef8e3: nop [rax+rax]; nop [rax+rax]; mov eax, 0x51; syscall;
0x000ef8e5: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x51; syscall;
0x000ef8e7: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x51; syscall;
0x000ef8e9: add [rax], al; nop [rax+rax]; mov eax, 0x51; syscall;
0x000ef8eb: nop [rax+rax]; mov eax, 0x51; syscall;
0x000ef8ed: add [rax], r8b; mov eax, 0x51; syscall;
0x000ef8ee: add [rax], al; mov eax, 0x51; syscall;
0x000ef8ef: add [rax+0x51], bh; syscall;
0x000ef8f0: mov eax, 0x51; syscall;
0x000ef902: or eax, 0xce569; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000ef903: imul esp, ebp, 0xd8f7000c; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000ef904: in eax, 0xc; add bh, dh; fsub st, dword ptr [rcx+rcx*4+1]; or rax, 0xffffffffffffffff; ret;
0x000ef98f: add [rax-0x7b], cl; push qword ptr [rax+rbx*8+0x48]; mov ebp, edi; mov rdi, rbp; mov eax, 0x4f; syscall;
0x000ef992: push qword ptr [rax+rbx*8+0x48]; mov ebp, edi; mov rdi, rbp; mov eax, 0x4f; syscall;
0x000ef994: fmul st, dword ptr [rax-0x77]; std; mov rdi, rbp; mov eax, 0x4f; syscall;
0x000ef995: mov rbp, rdi; mov rdi, rbp; mov eax, 0x4f; syscall;
0x000ef996: mov ebp, edi; mov rdi, rbp; mov eax, 0x4f; syscall;
0x000ef997: std; mov rdi, rbp; mov eax, 0x4f; syscall;
0x000ef998: mov rdi, rbp; mov eax, 0x4f; syscall;
0x000ef999: mov edi, ebp; mov eax, 0x4f; syscall;
0x000ef99a: out dx, eax; mov eax, 0x4f; syscall;
0x000ef99b: mov eax, 0x4f; syscall;
0x000efa08: ret 0x9bf;
0x000efa69: or [rdi], cl; xchg ebp, eax; ret 0x8948;
0x000efa6b: xchg ebp, eax; ret 0x8948;
0x000efb60: adc [rdi], cl; xchg esp, eax; ret 0x2044;
0x000efd44: dec dword ptr [rax-0x77]; ror dword ptr [rax-0x73], 0x40; inc esi; jmp far fword ptr [r15];
0x000efd47: ror dword ptr [rax-0x73], 0x40; inc esi; jmp far fword ptr [r15];
0x000efd4b: inc esi; jmp far fword ptr [r15];
0x000efd4d: jmp far fword ptr [r15];
0x000efe14: add [rbp-0xd], dl; jmp qword ptr [rbx+rcx*4+3];
0x000efe15: push rbp; jmp qword ptr [rbx+rcx*4+3];
0x000efe16: jmp qword ptr [rbx+rcx*4+3];
0x000efe17: jmp qword ptr [rbx+rcx*4+3];
0x000f00c0: add rsp, 0x1010; mov rax, r12; pop rbp; pop r12; pop r13; ret;
0x000f00c1: add esp, 0x1010; mov rax, r12; pop rbp; pop r12; pop r13; ret;
0x000f00c4: adc [rax], al; add [rcx+rcx*4-0x20], cl; pop rbp; pop r12; pop r13; ret;
0x000f00c5: add [rax], al; mov rax, r12; pop rbp; pop r12; pop r13; ret;
0x000f00c6: add [rcx+rcx*4-0x20], cl; pop rbp; pop r12; pop r13; ret;
0x000f00c7: mov rax, r12; pop rbp; pop r12; pop r13; ret;
0x000f016e: add [rax], al; add [rbp+0x4d], dh; add rsp, 0x130; pop rbp; ret;
0x000f0170: add [rbp+0x4d], dh; add rsp, 0x130; pop rbp; ret;
0x000f0173: add rsp, 0x130; pop rbp; ret;
0x000f0174: add esp, 0x130; pop rbp; ret;
0x000f0176: xor [rcx], al; add [rax], al; pop rbp; ret;
0x000f01c3: add [rax], eax; nop [rax+rax]; nop; mov eax, 0x5c; syscall;
0x000f01c4: add [rsi+0x2e], ah; nop [rax+rax]; nop; mov eax, 0x5c; syscall;
0x000f01c5: nop [rax+rax]; nop; mov eax, 0x5c; syscall;
0x000f01c6: nop [rax+rax]; nop; mov eax, 0x5c; syscall;
0x000f01c7: nop [rax+rax]; nop; mov eax, 0x5c; syscall;
0x000f01c9: test [rax], al; add [rax], al; add [rax], al; nop; mov eax, 0x5c; syscall;
0x000f01cb: add [rax], al; add [rax], al; nop; mov eax, 0x5c; syscall;
0x000f01cd: add [rax], al; nop; mov eax, 0x5c; syscall;
0x000f01cf: nop; mov eax, 0x5c; syscall;
0x000f01d0: mov eax, 0x5c; syscall;
0x000f01e2: or eax, 0xcdc89; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f01e3: mov esp, ebx; or al, 0; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f01eb: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x5d; syscall;
0x000f01ee: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x5d; syscall;
0x000f01ef: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x5d; syscall;
0x000f01f1: nop [rax+rax]; nop [rax+rax]; mov eax, 0x5d; syscall;
0x000f01f2: nop [rax+rax]; nop [rax+rax]; mov eax, 0x5d; syscall;
0x000f01f3: nop [rax+rax]; nop [rax+rax]; mov eax, 0x5d; syscall;
0x000f01f5: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x5d; syscall;
0x000f01f7: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x5d; syscall;
0x000f01f9: add [rax], al; nop [rax+rax]; mov eax, 0x5d; syscall;
0x000f01fb: nop [rax+rax]; mov eax, 0x5d; syscall;
0x000f01fd: add [rax], r8b; mov eax, 0x5d; syscall;
0x000f01fe: add [rax], al; mov eax, 0x5d; syscall;
0x000f01ff: add [rax+0x5d], bh; syscall;
0x000f0200: mov eax, 0x5d; syscall;
0x000f0212: or eax, 0xcdc59; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f0213: pop rcx; fmul st, qword ptr [rax+rax]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f021b: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x5e; syscall;
0x000f021e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x5e; syscall;
0x000f021f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x5e; syscall;
0x000f0221: nop [rax+rax]; nop [rax+rax]; mov eax, 0x5e; syscall;
0x000f0222: nop [rax+rax]; nop [rax+rax]; mov eax, 0x5e; syscall;
0x000f0223: nop [rax+rax]; nop [rax+rax]; mov eax, 0x5e; syscall;
0x000f0225: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x5e; syscall;
0x000f0227: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x5e; syscall;
0x000f0229: add [rax], al; nop [rax+rax]; mov eax, 0x5e; syscall;
0x000f022b: nop [rax+rax]; mov eax, 0x5e; syscall;
0x000f022d: add [rax], r8b; mov eax, 0x5e; syscall;
0x000f022e: add [rax], al; mov eax, 0x5e; syscall;
0x000f022f: add [rax+0x5e], bh; syscall;
0x000f0230: mov eax, 0x5e; syscall;
0x000f0242: or eax, 0xcdc29; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f0243: sub esp, ebx; or al, 0; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f0244: fmul st, qword ptr [rax+rax]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f024e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x104; syscall;
0x000f024f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x104; syscall;
0x000f0251: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x104; syscall;
0x000f0252: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x104; syscall;
0x000f0253: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x104; syscall;
0x000f0257: add [rax], al; add [rax], al; nop [rax+rax]; mov r10, rcx; mov eax, 0x104; syscall;
0x000f0259: add [rax], al; nop [rax+rax]; mov r10, rcx; mov eax, 0x104; syscall;
0x000f025b: nop [rax+rax]; mov r10, rcx; mov eax, 0x104; syscall;
0x000f025d: add [rax], r8b; mov r10, rcx; mov eax, 0x104; syscall;
0x000f025e: add [rax], al; mov r10, rcx; mov eax, 0x104; syscall;
0x000f0260: mov r10, rcx; mov eax, 0x104; syscall;
0x000f0261: mov edx, ecx; mov eax, 0x104; syscall;
0x000f0263: mov eax, 0x104; syscall;
0x000f0264: add al, 1; add [rax], al; syscall;
0x000f0275: or eax, 0xcdbf6; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f0276: neg bl; or al, 0; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f0277: fisttp dword ptr [rax+rax], st; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f0409: xor [rax-0x75], cl; test [rax+rcx*4], ah; add [rax], al; add [rax-0x77], cl; ret 0xc148;
0x000f040c: test [rax+rcx*4], ah; add [rax], al; add [rax-0x77], cl; ret 0xc148;
0x000f040d: and al, 0x88; add [rax], al; add [rax-0x77], cl; ret 0xc148;
0x000f0455: add [rax], eax; add [rbx+0x5d], bl; pop r12; pop r13; pop r14; ret;
0x000f04ea: add [rax-0x7b], cl; ror byte ptr [rdi], 0x94; ret 0xce9;
0x000f04ed: ror byte ptr [rdi], 0x94; ret 0xce9;
0x000f04ef: xchg esp, eax; ret 0xce9;
0x000f04f0: ret 0xce9;
0x000f05ce: call qword ptr [rax+0x24748d4c];
0x000f0725: cmpsd [rsi], [rdi]; add al, [rax]; add [rax-0x77], cl; ret;
0x000f0726: add al, [rax]; add [rax-0x77], cl; ret;
0x000f08e8: ror byte ptr [rdi], 0x95; ret 0xbae9;
0x000f08ea: xchg ebp, eax; ret 0xbae9;
0x000f08eb: ret 0xbae9;
0x000f0a1c: add [rax], al; add [rbp+8], dh; movzx eax, al; add rsp, 0x58; ret;
0x000f0a1e: add [rbp+8], dh; movzx eax, al; add rsp, 0x58; ret;
0x000f0a20: or [rdi], cl; mov dh, 0xc0; add rsp, 0x58; ret;
0x000f0a21: movzx eax, al; add rsp, 0x58; ret;
0x000f0a22: mov dh, 0xc0; add rsp, 0x58; ret;
0x000f0a23: ror byte ptr [rax-0x7d], 0xc4; pop rax; ret;
0x000f0a2c: add [rax], eax; xchg ax, ax; mov eax, 0x56; syscall;
0x000f0a2d: add [rsi-0x70], ah; mov eax, 0x56; syscall;
0x000f0a2e: xchg ax, ax; mov eax, 0x56; syscall;
0x000f0a2f: nop; mov eax, 0x56; syscall;
0x000f0a30: mov eax, 0x56; syscall;
0x000f0a42: or eax, 0xcd429; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f0a43: sub esp, edx; or al, 0; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f0a4e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x109; syscall;
0x000f0a4f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x109; syscall;
0x000f0a51: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x109; syscall;
0x000f0a52: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x109; syscall;
0x000f0a53: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x109; syscall;
0x000f0a57: add [rax], al; add [rax], al; nop [rax+rax]; mov r10, rcx; mov eax, 0x109; syscall;
0x000f0a59: add [rax], al; nop [rax+rax]; mov r10, rcx; mov eax, 0x109; syscall;
0x000f0a5b: nop [rax+rax]; mov r10, rcx; mov eax, 0x109; syscall;
0x000f0a5d: add [rax], r8b; mov r10, rcx; mov eax, 0x109; syscall;
0x000f0a5e: add [rax], al; mov r10, rcx; mov eax, 0x109; syscall;
0x000f0a60: mov r10, rcx; mov eax, 0x109; syscall;
0x000f0a61: mov edx, ecx; mov eax, 0x109; syscall;
0x000f0a63: mov eax, 0x109; syscall;
0x000f0a64: or [rcx], eax; add [rax], al; syscall;
0x000f0a75: or eax, 0xcd3f6; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f0a76: not bl; or al, 0; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f0a7e: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; xchg ax, ax; mov eax, 0x58; syscall;
0x000f0a81: enter 0xc3ff, 0x66; nop [rax+rax]; xchg ax, ax; mov eax, 0x58; syscall;
0x000f0a82: inc ebx; nop [rax+rax]; xchg ax, ax; mov eax, 0x58; syscall;
0x000f0a84: nop [rax+rax]; xchg ax, ax; mov eax, 0x58; syscall;
0x000f0a85: nop [rax+rax]; xchg ax, ax; mov eax, 0x58; syscall;
0x000f0a86: nop [rax+rax]; xchg ax, ax; mov eax, 0x58; syscall;
0x000f0a88: test [rax], al; add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0x58; syscall;
0x000f0a89: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, 0x58; syscall;
0x000f0a8a: add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0x58; syscall;
0x000f0a8b: add [rax], al; add [rsi-0x70], ah; mov eax, 0x58; syscall;
0x000f0a8c: add [rax], al; xchg ax, ax; mov eax, 0x58; syscall;
0x000f0a8d: add [rsi-0x70], ah; mov eax, 0x58; syscall;
0x000f0a8e: xchg ax, ax; mov eax, 0x58; syscall;
0x000f0a8f: nop; mov eax, 0x58; syscall;
0x000f0a90: mov eax, 0x58; syscall;
0x000f0aa2: or eax, 0xcd3c9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f0aa3: leave; ror dword ptr [rax+rax], cl; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f0aab: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x10a; syscall;
0x000f0aae: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x10a; syscall;
0x000f0aaf: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x10a; syscall;
0x000f0ab1: nop [rax+rax]; nop [rax+rax]; mov eax, 0x10a; syscall;
0x000f0ab2: nop [rax+rax]; nop [rax+rax]; mov eax, 0x10a; syscall;
0x000f0ab3: nop [rax+rax]; nop [rax+rax]; mov eax, 0x10a; syscall;
0x000f0ab5: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x10a; syscall;
0x000f0ab7: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x10a; syscall;
0x000f0ab9: add [rax], al; nop [rax+rax]; mov eax, 0x10a; syscall;
0x000f0abb: nop [rax+rax]; mov eax, 0x10a; syscall;
0x000f0abd: add [rax], r8b; mov eax, 0x10a; syscall;
0x000f0abe: add [rax], al; mov eax, 0x10a; syscall;
0x000f0abf: add [rax+0x10a], bh; syscall;
0x000f0ac0: mov eax, 0x10a; syscall;
0x000f0ac1: or al, [rcx]; add [rax], al; syscall;
0x000f0ad2: or eax, 0xcd399; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f0ad3: cdq; ror dword ptr [rax+rax], cl; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f0adb: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x59; syscall;
0x000f0ade: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x59; syscall;
0x000f0adf: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x59; syscall;
0x000f0ae1: nop [rax+rax]; nop [rax+rax]; mov eax, 0x59; syscall;
0x000f0ae2: nop [rax+rax]; nop [rax+rax]; mov eax, 0x59; syscall;
0x000f0ae3: nop [rax+rax]; nop [rax+rax]; mov eax, 0x59; syscall;
0x000f0ae5: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x59; syscall;
0x000f0ae7: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x59; syscall;
0x000f0ae9: add [rax], al; nop [rax+rax]; mov eax, 0x59; syscall;
0x000f0aeb: nop [rax+rax]; mov eax, 0x59; syscall;
0x000f0aed: add [rax], r8b; mov eax, 0x59; syscall;
0x000f0aee: add [rax], al; mov eax, 0x59; syscall;
0x000f0aef: add [rax+0x59], bh; syscall;
0x000f0af0: mov eax, 0x59; syscall;
0x000f0b02: or eax, 0xcd369; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f0b03: imul edx, ebx, 0xd8f7000c; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f0b0e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x10b; syscall;
0x000f0b0f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x10b; syscall;
0x000f0b11: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x10b; syscall;
0x000f0b12: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x10b; syscall;
0x000f0b13: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x10b; syscall;
0x000f0b17: add [rax], al; add [rax], al; nop [rax+rax]; mov r10, rcx; mov eax, 0x10b; syscall;
0x000f0b19: add [rax], al; nop [rax+rax]; mov r10, rcx; mov eax, 0x10b; syscall;
0x000f0b1b: nop [rax+rax]; mov r10, rcx; mov eax, 0x10b; syscall;
0x000f0b1d: add [rax], r8b; mov r10, rcx; mov eax, 0x10b; syscall;
0x000f0b1e: add [rax], al; mov r10, rcx; mov eax, 0x10b; syscall;
0x000f0b20: mov r10, rcx; mov eax, 0x10b; syscall;
0x000f0b21: mov edx, ecx; mov eax, 0x10b; syscall;
0x000f0b23: mov eax, 0x10b; syscall;
0x000f0b24: or eax, [rcx]; add [rax], al; syscall;
0x000f0b35: or eax, 0xcd336; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f0b36: ror dword ptr [rax+rax], cl; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f0b3e: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; xchg ax, ax; mov eax, 0x57; syscall;
0x000f0b41: enter 0xc3ff, 0x66; nop [rax+rax]; xchg ax, ax; mov eax, 0x57; syscall;
0x000f0b42: inc ebx; nop [rax+rax]; xchg ax, ax; mov eax, 0x57; syscall;
0x000f0b44: nop [rax+rax]; xchg ax, ax; mov eax, 0x57; syscall;
0x000f0b45: nop [rax+rax]; xchg ax, ax; mov eax, 0x57; syscall;
0x000f0b46: nop [rax+rax]; xchg ax, ax; mov eax, 0x57; syscall;
0x000f0b48: test [rax], al; add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0x57; syscall;
0x000f0b49: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, 0x57; syscall;
0x000f0b4a: add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0x57; syscall;
0x000f0b4b: add [rax], al; add [rsi-0x70], ah; mov eax, 0x57; syscall;
0x000f0b4c: add [rax], al; xchg ax, ax; mov eax, 0x57; syscall;
0x000f0b4d: add [rsi-0x70], ah; mov eax, 0x57; syscall;
0x000f0b4e: xchg ax, ax; mov eax, 0x57; syscall;
0x000f0b4f: nop; mov eax, 0x57; syscall;
0x000f0b50: mov eax, 0x57; syscall;
0x000f0b62: or eax, 0xcd309; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f0b63: or ebx, edx; or al, 0; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f0b64: ror dword ptr [rax+rax], cl; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f0b6b: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x107; syscall;
0x000f0b6e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x107; syscall;
0x000f0b6f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x107; syscall;
0x000f0b71: nop [rax+rax]; nop [rax+rax]; mov eax, 0x107; syscall;
0x000f0b72: nop [rax+rax]; nop [rax+rax]; mov eax, 0x107; syscall;
0x000f0b73: nop [rax+rax]; nop [rax+rax]; mov eax, 0x107; syscall;
0x000f0b75: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x107; syscall;
0x000f0b77: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x107; syscall;
0x000f0b79: add [rax], al; nop [rax+rax]; mov eax, 0x107; syscall;
0x000f0b7b: nop [rax+rax]; mov eax, 0x107; syscall;
0x000f0b7d: add [rax], r8b; mov eax, 0x107; syscall;
0x000f0b7e: add [rax], al; mov eax, 0x107; syscall;
0x000f0b7f: add [rax+0x107], bh; syscall;
0x000f0b80: mov eax, 0x107; syscall;
0x000f0b92: or eax, 0xcd2d9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f0b9b: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x54; syscall;
0x000f0b9e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x54; syscall;
0x000f0b9f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x54; syscall;
0x000f0ba1: nop [rax+rax]; nop [rax+rax]; mov eax, 0x54; syscall;
0x000f0ba2: nop [rax+rax]; nop [rax+rax]; mov eax, 0x54; syscall;
0x000f0ba3: nop [rax+rax]; nop [rax+rax]; mov eax, 0x54; syscall;
0x000f0ba5: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x54; syscall;
0x000f0ba7: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x54; syscall;
0x000f0ba9: add [rax], al; nop [rax+rax]; mov eax, 0x54; syscall;
0x000f0bab: nop [rax+rax]; mov eax, 0x54; syscall;
0x000f0bad: add [rax], r8b; mov eax, 0x54; syscall;
0x000f0bae: add [rax], al; mov eax, 0x54; syscall;
0x000f0baf: add [rax+0x54], bh; syscall;
0x000f0bb0: mov eax, 0x54; syscall;
0x000f0bc2: or eax, 0xcd2a9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f0bc3: test eax, 0xf7000cd2; fsub st, dword ptr [rcx+rcx*4+1]; or rax, 0xffffffffffffffff; ret;
0x000f0bc4: ror byte ptr [rax+rax], cl; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f0bed: rol byte ptr [rbx-0x3f7aff28], 0x75; cmovs ecx, [rbx+0x7394806]; seta al; movzx eax, al; sbb eax, 0; ret;
0x000f0bf4: cmovs ecx, [rbx+0x7394806]; seta al; movzx eax, al; sbb eax, 0; ret;
0x000f0bf5: mov rax, [rsi]; cmp [rdi], rax; seta al; movzx eax, al; sbb eax, 0; ret;
0x000f0bf6: mov eax, [rsi]; cmp [rdi], rax; seta al; movzx eax, al; sbb eax, 0; ret;
0x000f0bf8: cmp [rdi], rax; seta al; movzx eax, al; sbb eax, 0; ret;
0x000f0bf9: cmp [rdi], eax; seta al; movzx eax, al; sbb eax, 0; ret;
0x000f0bfb: seta al; movzx eax, al; sbb eax, 0; ret;
0x000f0bfe: movzx eax, al; sbb eax, 0; ret;
0x000f0bff: mov dh, 0xc0; sbb eax, 0; ret;
0x000f0c01: sbb eax, 0; ret;
0x000f0c02: fadd st, dword ptr [rax]; ret;
0x000f0d06: mov rdx, [rbx+0x38]; mov rdi, [rbx+0x18]; lea rcx, [rbx+0x28]; mov rsi, r14; mov edx, [rdx+rax]; call qword ptr [rbx+0x40];
0x000f0d07: mov edx, [rbx+0x38]; mov rdi, [rbx+0x18]; lea rcx, [rbx+0x28]; mov rsi, r14; mov edx, [rdx+rax]; call qword ptr [rbx+0x40];
0x000f0d0a: mov rdi, [rbx+0x18]; lea rcx, [rbx+0x28]; mov rsi, r14; mov edx, [rdx+rax]; call qword ptr [rbx+0x40];
0x000f0d0b: mov edi, [rbx+0x18]; lea rcx, [rbx+0x28]; mov rsi, r14; mov edx, [rdx+rax]; call qword ptr [rbx+0x40];
0x000f0d0d: sbb [rax-0x73], cl; sub [r9+r9*4-0xa], cl; mov edx, [rdx+rax]; call qword ptr [rbx+0x40];
0x000f0d0e: lea rcx, [rbx+0x28]; mov rsi, r14; mov edx, [rdx+rax]; call qword ptr [rbx+0x40];
0x000f0d0f: lea ecx, [rbx+0x28]; mov rsi, r14; mov edx, [rdx+rax]; call qword ptr [rbx+0x40];
0x000f0d10: sub [r9+r9*4-0xa], cl; mov edx, [rdx+rax]; call qword ptr [rbx+0x40];
0x000f0d11: sub [rcx+rcx*4-0xa], cl; mov edx, [rdx+rax]; call qword ptr [rbx+0x40];
0x000f0d12: mov rsi, r14; mov edx, [rdx+rax]; call qword ptr [rbx+0x40];
0x000f0d13: mov esi, esi; mov edx, [rdx+rax]; call qword ptr [rbx+0x40];
0x000f0d15: mov edx, [rdx+rax]; call qword ptr [rbx+0x40];
0x000f0d16: adc al, 2; call qword ptr [rbx+0x40];
0x000f0d3f: add rsp, 0xb8; pop rbx; pop r12; pop r13; pop r14; ret;
0x000f0d40: add esp, 0xb8; pop rbx; pop r12; pop r13; pop r14; ret;
0x000f0d42: mov eax, 0x5b000000; pop r12; pop r13; pop r14; ret;
0x000f0d43: add [rax], al; add [rbx+0x41], bl; pop rsp; pop r13; pop r14; ret;
0x000f0d44: add [rax], al; pop rbx; pop r12; pop r13; pop r14; ret;
0x000f0d45: add [rbx+0x41], bl; pop rsp; pop r13; pop r14; ret;
0x000f0d46: pop rbx; pop r12; pop r13; pop r14; ret;
0x000f0f9b: dec dword ptr [rbp+rcx*4+0x24]; sbb [rax-0x77], cl; ret 0x8d49;
0x000f0f9f: sbb [rax-0x77], cl; ret 0x8d49;
0x000f0fa2: ret 0x8d49;
0x000f0ffb: and al, 0xe8; call far fword ptr [rcx-3];
0x000f0ffd: call far fword ptr [rcx-3];
0x000f11b4: add [rsp+rax*2-0x75], ah; xor ebp, eax; pop rdx; jmp qword ptr [rsp+rax*2-0x77];
0x000f11b8: xor ebp, eax; pop rdx; jmp qword ptr [rsp+rax*2-0x77];
0x000f11ba: pop rdx; jmp qword ptr [rsp+rax*2-0x77];
0x000f11bc: jmp qword ptr [rsp+rax*2-0x77];
0x000f11c7: nop [rax+rax]; mov rdi, [rbp+0x18]; mov rsi, [rsp+0x28]; lea rcx, [rbp+0x28]; mov edx, 1; call qword ptr [rbp+0x40];
0x000f11c8: nop [rax+rax]; mov rdi, [rbp+0x18]; mov rsi, [rsp+0x28]; lea rcx, [rbp+0x28]; mov edx, 1; call qword ptr [rbp+0x40];
0x000f11ce: add [rax], al; mov rdi, [rbp+0x18]; mov rsi, [rsp+0x28]; lea rcx, [rbp+0x28]; mov edx, 1; call qword ptr [rbp+0x40];
0x000f11d0: mov rdi, [rbp+0x18]; mov rsi, [rsp+0x28]; lea rcx, [rbp+0x28]; mov edx, 1; call qword ptr [rbp+0x40];
0x000f11d1: mov edi, [rbp+0x18]; mov rsi, [rsp+0x28]; lea rcx, [rbp+0x28]; mov edx, 1; call qword ptr [rbp+0x40];
0x000f11d4: mov rsi, [rsp+0x28]; lea rcx, [rbp+0x28]; mov edx, 1; call qword ptr [rbp+0x40];
0x000f11d5: mov esi, [rsp+0x28]; lea rcx, [rbp+0x28]; mov edx, 1; call qword ptr [rbp+0x40];
0x000f11d7: and al, 0x28; lea rcx, [rbp+0x28]; mov edx, 1; call qword ptr [rbp+0x40];
0x000f11d8: sub [rax-0x73], cl; sub [r10+1], r15b; call qword ptr [rbp+0x40];
0x000f11d9: lea rcx, [rbp+0x28]; mov edx, 1; call qword ptr [rbp+0x40];
0x000f11da: lea ecx, [rbp+0x28]; mov edx, 1; call qword ptr [rbp+0x40];
0x000f11db: sub [r10+1], r15b; call qword ptr [rbp+0x40];
0x000f11dc: sub [rdx+1], bh; call qword ptr [rbp+0x40];
0x000f11dd: mov edx, 1; call qword ptr [rbp+0x40];
0x000f11de: add [rax], eax; add [rax], al; call qword ptr [rbp+0x40];
0x000f1221: xor [rsp+rax*2-0x75], ah; sub ebp, eax; in eax, 0x55; std; jmp qword ptr [rsp+rax*2-0x77];
0x000f1225: sub ebp, eax; in eax, 0x55; std; jmp qword ptr [rsp+rax*2-0x77];
0x000f1227: in eax, 0x55; std; jmp qword ptr [rsp+rax*2-0x77];
0x000f1228: push rbp; std; jmp qword ptr [rsp+rax*2-0x77];
0x000f1229: std; jmp qword ptr [rsp+rax*2-0x77];
0x000f14a7: nop [rax+rax]; mov rdi, [rbp+0x18]; mov rsi, [rsp+0x28]; lea rcx, [rbp+0x28]; mov edx, 5; call qword ptr [rbp+0x40];
0x000f14a8: nop [rax+rax]; mov rdi, [rbp+0x18]; mov rsi, [rsp+0x28]; lea rcx, [rbp+0x28]; mov edx, 5; call qword ptr [rbp+0x40];
0x000f14ae: add [rax], al; mov rdi, [rbp+0x18]; mov rsi, [rsp+0x28]; lea rcx, [rbp+0x28]; mov edx, 5; call qword ptr [rbp+0x40];
0x000f14b0: mov rdi, [rbp+0x18]; mov rsi, [rsp+0x28]; lea rcx, [rbp+0x28]; mov edx, 5; call qword ptr [rbp+0x40];
0x000f14b1: mov edi, [rbp+0x18]; mov rsi, [rsp+0x28]; lea rcx, [rbp+0x28]; mov edx, 5; call qword ptr [rbp+0x40];
0x000f14b4: mov rsi, [rsp+0x28]; lea rcx, [rbp+0x28]; mov edx, 5; call qword ptr [rbp+0x40];
0x000f14b5: mov esi, [rsp+0x28]; lea rcx, [rbp+0x28]; mov edx, 5; call qword ptr [rbp+0x40];
0x000f14b7: and al, 0x28; lea rcx, [rbp+0x28]; mov edx, 5; call qword ptr [rbp+0x40];
0x000f14b8: sub [rax-0x73], cl; sub [r10+5], r15b; call qword ptr [rbp+0x40];
0x000f14b9: lea rcx, [rbp+0x28]; mov edx, 5; call qword ptr [rbp+0x40];
0x000f14ba: lea ecx, [rbp+0x28]; mov edx, 5; call qword ptr [rbp+0x40];
0x000f14bb: sub [r10+5], r15b; call qword ptr [rbp+0x40];
0x000f14bc: sub [rdx+5], bh; call qword ptr [rbp+0x40];
0x000f14bd: mov edx, 5; call qword ptr [rbp+0x40];
0x000f152a: nop [rax+rax]; mov rdi, [rbp+0x18]; mov rsi, [rsp+0x28]; lea rcx, [rbp+0x28]; mov edx, 2; call qword ptr [rbp+0x40];
0x000f152b: nop [rax+rax]; mov rdi, [rbp+0x18]; mov rsi, [rsp+0x28]; lea rcx, [rbp+0x28]; mov edx, 2; call qword ptr [rbp+0x40];
0x000f152d: add [rax], r8b; mov rdi, [rbp+0x18]; mov rsi, [rsp+0x28]; lea rcx, [rbp+0x28]; mov edx, 2; call qword ptr [rbp+0x40];
0x000f152e: add [rax], al; mov rdi, [rbp+0x18]; mov rsi, [rsp+0x28]; lea rcx, [rbp+0x28]; mov edx, 2; call qword ptr [rbp+0x40];
0x000f1530: mov rdi, [rbp+0x18]; mov rsi, [rsp+0x28]; lea rcx, [rbp+0x28]; mov edx, 2; call qword ptr [rbp+0x40];
0x000f1531: mov edi, [rbp+0x18]; mov rsi, [rsp+0x28]; lea rcx, [rbp+0x28]; mov edx, 2; call qword ptr [rbp+0x40];
0x000f1534: mov rsi, [rsp+0x28]; lea rcx, [rbp+0x28]; mov edx, 2; call qword ptr [rbp+0x40];
0x000f1535: mov esi, [rsp+0x28]; lea rcx, [rbp+0x28]; mov edx, 2; call qword ptr [rbp+0x40];
0x000f1537: and al, 0x28; lea rcx, [rbp+0x28]; mov edx, 2; call qword ptr [rbp+0x40];
0x000f1538: sub [rax-0x73], cl; sub [r10+2], r15b; call qword ptr [rbp+0x40];
0x000f1539: lea rcx, [rbp+0x28]; mov edx, 2; call qword ptr [rbp+0x40];
0x000f153a: lea ecx, [rbp+0x28]; mov edx, 2; call qword ptr [rbp+0x40];
0x000f153b: sub [r10+2], r15b; call qword ptr [rbp+0x40];
0x000f153c: sub [rdx+2], bh; call qword ptr [rbp+0x40];
0x000f153d: mov edx, 2; call qword ptr [rbp+0x40];
0x000f153e: add al, [rax]; add [rax], al; call qword ptr [rbp+0x40];
0x000f1540: add [rax], al; call qword ptr [rbp+0x40];
0x000f154f: imul eax; ret;
0x000f1660: cmp dh, bl; dec dword ptr [rcx-0x73]; push rsi; add [rax+0x39], ecx; ret 0xd72;
0x000f1662: dec dword ptr [rcx-0x73]; push rsi; add [rax+0x39], ecx; ret 0xd72;
0x000f1665: push rsi; add [rax+0x39], ecx; ret 0xd72;
0x000f1666: add [rax+0x39], ecx; ret 0xd72;
0x000f1669: ret 0xd72;
0x000f1673: add [rax+0x39], ecx; ret 0x674;
0x000f1676: ret 0x674;
0x000f16c3: sbb [rcx+9], ebp; add [rax+0xf], cl; ret 0x894c;
0x000f16c4: imul ecx, [rcx], 0x440f4800; ret 0x894c;
0x000f16c6: add [rax+0xf], cl; ret 0x894c;
0x000f17fe: movzx eax, al; shl rax, 4; mov edx, [rdx+rax]; mov rdi, [rbp-0x118]; mov rsi, r9; call qword ptr [rbp-0xf0];
0x000f17ff: mov dh, 0xc0; shl rax, 4; mov edx, [rdx+rax]; mov rdi, [rbp-0x118]; mov rsi, r9; call qword ptr [rbp-0xf0];
0x000f1800: ror byte ptr [rax-0x3f], 0xe0; add al, 0x8b; adc al, 2; mov rdi, [rbp-0x118]; mov rsi, r9; call qword ptr [rbp-0xf0];
0x000f1801: shl rax, 4; mov edx, [rdx+rax]; mov rdi, [rbp-0x118]; mov rsi, r9; call qword ptr [rbp-0xf0];
0x000f1802: shl eax, 4; mov edx, [rdx+rax]; mov rdi, [rbp-0x118]; mov rsi, r9; call qword ptr [rbp-0xf0];
0x000f1804: add al, 0x8b; adc al, 2; mov rdi, [rbp-0x118]; mov rsi, r9; call qword ptr [rbp-0xf0];
0x000f1805: mov edx, [rdx+rax]; mov rdi, [rbp-0x118]; mov rsi, r9; call qword ptr [rbp-0xf0];
0x000f1806: adc al, 2; mov rdi, [rbp-0x118]; mov rsi, r9; call qword ptr [rbp-0xf0];
0x000f1807: add cl, [rax-0x75]; mov ebp, 0xfffffee8; mov rsi, r9; call qword ptr [rbp-0xf0];
0x000f1808: mov rdi, [rbp-0x118]; mov rsi, r9; call qword ptr [rbp-0xf0];
0x000f1809: mov edi, [rbp-0x118]; mov rsi, r9; call qword ptr [rbp-0xf0];
0x000f180a: mov ebp, 0xfffffee8; mov rsi, r9; call qword ptr [rbp-0xf0];
0x000f180e: dec dword ptr [rcx+rcx*4-0x32]; call qword ptr [rbp-0xf0];
0x000f180f: mov rsi, r9; call qword ptr [rbp-0xf0];
0x000f1810: mov esi, ecx; call qword ptr [rbp-0xf0];
0x000f1812: call qword ptr [rbp-0xf0];
0x000f1874: cmp dh, bl; jmp qword ptr [rbp+rax*2-0x77];
0x000f1970: movsb [rdi], [rsi]; cmp ebx, esi; jmp qword ptr [rbp+rax*2-0x77];
0x000f1971: cmp ebx, esi; jmp qword ptr [rbp+rax*2-0x77];
0x000f1972: jmp qword ptr [rbp+rax*2-0x77];
0x000f1a9e: call qword ptr [rax-0x174a74b4];
0x000f1ad7: add [rbx+rcx*4+0x2d], cl; xchg ecx, eax; ret;
0x000f1adb: xchg ecx, eax; ret;
0x000f1b05: jmp qword ptr [rbp+rax*2-0x75];
0x000f1b6e: call qword ptr [rax-0x83776bf];
0x000f1b8f: add [rax-0x75], cl; add eax, 0xcc2d9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000f1b92: add eax, 0xcc2d9; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000f1b93: fld st, st(2); or al, 0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000f1c39: mov qword ptr [rax+0x10], 0; pop rbx; mov rax, r8; pop rbp; pop r12; ret;
0x000f1c3a: mov dword ptr [rax+0x10], 0; pop rbx; mov rax, r8; pop rbp; pop r12; ret;
0x000f1c3e: add [rax], al; add [rbx+0x4c], bl; mov eax, eax; pop rbp; pop r12; ret;
0x000f1c3f: add [rax], al; pop rbx; mov rax, r8; pop rbp; pop r12; ret;
0x000f1c40: add [rbx+0x4c], bl; mov eax, eax; pop rbp; pop r12; ret;
0x000f1c41: pop rbx; mov rax, r8; pop rbp; pop r12; ret;
0x000f1c42: mov rax, r8; pop rbp; pop r12; ret;
0x000f1cda: mov [rbx+0x20], rax; xor eax, eax; pop rbx; ret;
0x000f1cdb: mov [rbx+0x20], eax; xor eax, eax; pop rbx; ret;
0x000f1ced: mov rax, [rip+0xcc17c]; mov qword ptr [rbx+0x20], 0; mov dword ptr fs:[rax], 0x24; mov eax, 1; pop rbx; ret;
0x000f1cee: mov eax, [rip+0xcc17c]; mov qword ptr [rbx+0x20], 0; mov dword ptr fs:[rax], 0x24; mov eax, 1; pop rbx; ret;
0x000f1cef: add eax, 0xcc17c; mov qword ptr [rbx+0x20], 0; mov dword ptr fs:[rax], 0x24; mov eax, 1; pop rbx; ret;
0x000f1cf1: ror dword ptr [rax+rax], 0x48; mov dword ptr [rbx+0x20], 0; mov dword ptr fs:[rax], 0x24; mov eax, 1; pop rbx; ret;
0x000f1cf2: or al, 0; mov qword ptr [rbx+0x20], 0; mov dword ptr fs:[rax], 0x24; mov eax, 1; pop rbx; ret;
0x000f1cf4: mov qword ptr [rbx+0x20], 0; mov dword ptr fs:[rax], 0x24; mov eax, 1; pop rbx; ret;
0x000f1cf5: mov dword ptr [rbx+0x20], 0; mov dword ptr fs:[rax], 0x24; mov eax, 1; pop rbx; ret;
0x000f1cf8: add [rax], al; add [rax], al; mov dword ptr fs:[rax], 0x24; mov eax, 1; pop rbx; ret;
0x000f1cfa: add [rax], al; mov dword ptr fs:[rax], 0x24; mov eax, 1; pop rbx; ret;
0x000f1cfb: add [rdi+rax*8], ah; and al, 0; add [rax], al; mov eax, 1; pop rbx; ret;
0x000f1cfc: mov dword ptr fs:[rax], 0x24; mov eax, 1; pop rbx; ret;
0x000f1cfd: mov dword ptr [rax], 0x24; mov eax, 1; pop rbx; ret;
0x000f1cfe: add [rax+rax], ah; add [rax], al; mov eax, 1; pop rbx; ret;
0x000f1cff: and al, 0; add [rax], al; mov eax, 1; pop rbx; ret;
0x000f1d0d: and al, ch; add eax, 0x48fff336; mov dword ptr [rbx+0x20], 0; mov eax, 1; pop rbx; ret;
0x000f1d0f: add eax, 0x48fff336; mov dword ptr [rbx+0x20], 0; mov eax, 1; pop rbx; ret;
0x000f1d12: dec dword ptr [rax-0x39]; and [r8], al; add [rax], al; add [rax+1], bh; pop rbx; ret;
0x000f1d13: mov qword ptr [rbx+0x20], 0; mov eax, 1; pop rbx; ret;
0x000f1d14: mov dword ptr [rbx+0x20], 0; mov eax, 1; pop rbx; ret;
0x000f1d15: and [r8], al; add [rax], al; add [rax+1], bh; pop rbx; ret;
0x000f1d16: and [rax], al; add [rax], al; add [rax+1], bh; pop rbx; ret;
0x000f1d17: add [rax], al; add [rax], al; mov eax, 1; pop rbx; ret;
0x000f1d18: add [rax], al; add [rax+1], bh; pop rbx; ret;
0x000f1d19: add [rax], al; mov eax, 1; pop rbx; ret;
0x000f1d1a: add [rax+1], bh; pop rbx; ret;
0x000f1d1b: mov eax, 1; pop rbx; ret;
0x000f1d1c: add [rax], eax; add [rax], al; pop rbx; ret;
0x000f1d93: jmp qword ptr [rdi+rax*8+0x45];
0x000f1dbf: mov al, [0x5d5be88944000000]; pop r12; pop r13; pop r14; ret;
0x000f20be: call qword ptr [rax-0x56da74b4];
0x000f20d7: and al, 0xe8; push rbx; ret;
0x000f219a: test cl, dl; add [rax], al; add [rbx-0x77cbfab], cl; add ecx, [rdi]; xchg esp, eax; ret;
0x000f219c: add [rax], al; add [rbx-0x77cbfab], cl; add ecx, [rdi]; xchg esp, eax; ret;
0x000f219e: add [rbx-0x77cbfab], cl; add ecx, [rdi]; xchg esp, eax; ret;
0x000f21a3: clc; add ecx, [rdi]; xchg esp, eax; ret;
0x000f21a4: add ecx, [rdi]; xchg esp, eax; ret;
0x000f222c: cmp dh, dh; ret 0xc720;
0x000f222e: ret 0xc720;
0x000f237b: push rax; jmp qword ptr [rsi-0x7d];
0x000f23ba: imul eax; std; dec dword ptr [rax-0x77]; ret;
0x000f23be: std; dec dword ptr [rax-0x77]; ret;
0x000f240f: sub eax, 0x8948fff3; ret 0x3b48;
0x000f2411: dec dword ptr [rax-0x77]; ret 0x3b48;
0x000f24f0: sub al, 0xf3; dec dword ptr [rax-0x77]; ret 0x348;
0x000f24f2: dec dword ptr [rax-0x77]; ret 0x348;
0x000f24f5: ret 0x348;
0x000f25b9: insb [rdi], dx; and al, 0x14; add ecx, ebp; iretd;
0x000f25ba: and al, 0x14; add ecx, ebp; iretd;
0x000f26fe: call qword ptr [rax+0x5c2444c7];
0x000f2750: sbb eax, 0xffff03e9; jmp qword ptr [rsi+0x2e];
0x000f27fe: in al, 0x74; iretd;
0x000f28a5: xor [rax], al; add [rax], al; add [rbp+0x31], al; in al, 0xe9; sar ch, 0xff; jmp qword ptr [rsi+0x66];
0x000f28a7: add [rax], al; add [rbp+0x31], al; in al, 0xe9; sar ch, 0xff; jmp qword ptr [rsi+0x66];
0x000f28a9: add [rbp+0x31], al; in al, 0xe9; sar ch, 0xff; jmp qword ptr [rsi+0x66];
0x000f28ac: in al, 0xe9; sar ch, 0xff; jmp qword ptr [rsi+0x66];
0x000f28ae: sar ch, 0xff; jmp qword ptr [rsi+0x66];
0x000f2c0f: add al, ch; add esp, [rdi]; jmp qword ptr [rsi-0x7d];
0x000f2c11: add esp, [rdi]; jmp qword ptr [rsi-0x7d];
0x000f2c2a: outsd dx, [rsi]; or al, ch; out 0x26, eax; jmp qword ptr [rsi-0x7d];
0x000f2c2b: or al, ch; out 0x26, eax; jmp qword ptr [rsi-0x7d];
0x000f2c2d: out 0x26, eax; jmp qword ptr [rsi-0x7d];
0x000f2c2e: jmp qword ptr [rsi-0x7d];
0x000f2caa: push qword ptr [rcx]; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret;
0x000f2cd2: out 0xe8, eax; jmp qword ptr [rcx+rcx*4+0x2b];
0x000f2cd5: jmp qword ptr [rcx+rcx*4+0x2b];
0x000f2cd6: jmp qword ptr [rcx+rcx*4+0x2b];
0x000f2d56: jmp qword ptr [rsi+0x41];
0x000f2d8c: jmp qword ptr [rsi-0x7d];
0x000f2fac: shr al, cl; and esi, ebx; jmp qword ptr [rsi+0x45];
0x000f2fae: and esi, ebx; jmp qword ptr [rsi+0x45];
0x000f2faf: and esi, ebx; jmp qword ptr [rsi+0x45];
0x000f2fb0: jmp qword ptr [rsi+0x45];
0x000f3026: and dh, bl; call far fword ptr [rbx+0x4c];
0x000f3027: call far fword ptr [rbx+0x4c];
0x000f308a: jmp far fword ptr [rax+0x27850f01];
0x000f323f: add [rbx+0xb7704fa], al; mov [rsi+0x66], dx; xor eax, eax; ret;
0x000f3241: cli; add al, 0x77; or esp, [rsi-0x77]; push rsi; xor ax, ax; ret;
0x000f3242: add al, 0x77; or esp, [rsi-0x77]; push rsi; xor ax, ax; ret;
0x000f3244: or esp, [rsi-0x77]; push rsi; xor ax, ax; ret;
0x000f3245: mov [rsi+0x66], dx; xor eax, eax; ret;
0x000f3246: mov [rsi+0x66], edx; xor eax, eax; ret;
0x000f3247: push rsi; xor ax, ax; ret;
0x000f3248: xor ax, ax; ret;
0x000f324c: nop [rax]; mov rax, [rip+0xcac19]; mov dword ptr fs:[rax], 0x16; mov eax, 1; ret;
0x000f324f: add [rax-0x75], cl; add eax, 0xcac19; mov dword ptr fs:[rax], 0x16; mov eax, 1; ret;
0x000f3250: mov rax, [rip+0xcac19]; mov dword ptr fs:[rax], 0x16; mov eax, 1; ret;
0x000f3251: mov eax, [rip+0xcac19]; mov dword ptr fs:[rax], 0x16; mov eax, 1; ret;
0x000f3252: add eax, 0xcac19; mov dword ptr fs:[rax], 0x16; mov eax, 1; ret;
0x000f3254: lodsb [rsi]; or al, 0; mov dword ptr fs:[rax], 0x16; mov eax, 1; ret;
0x000f3255: or al, 0; mov dword ptr fs:[rax], 0x16; mov eax, 1; ret;
0x000f3257: mov dword ptr fs:[rax], 0x16; mov eax, 1; ret;
0x000f3258: mov dword ptr [rax], 0x16; mov eax, 1; ret;
0x000f3259: add [rsi], dl; add [rax], al; add [rax+1], bh; ret;
0x000f3316: dec dword ptr [rax-0x77]; or [r11+0x5d], r11b; pop r12; pop r13; pop r14; ret;
0x000f3319: or [r11+0x5d], r11b; pop r12; pop r13; pop r14; ret;
0x000f331a: or [rbx+0x5d], bl; pop r12; pop r13; pop r14; ret;
0x000f3326: add [rcx], sil; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; pop r13; pop r14; ret;
0x000f3327: add [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; pop r13; pop r14; ret;
0x000f3379: mov al, 0x66; nop [rax+rax]; mov rax, [rip+0xcaae9]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret;
0x000f337f: add [rax-0x75], cl; add eax, 0xcaae9; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret;
0x000f3382: add eax, 0xcaae9; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret;
0x000f3384: stosb [rdi]; or al, 0; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret;
0x000f3399: mov rax, [r13+0x10]; pop rbp; pop r12; pop r13; pop r14; ret;
0x000f339a: mov eax, [rbp+0x10]; pop rbp; pop r12; pop r13; pop r14; ret;
0x000f339b: adc [r13+0x41], r11b; pop rsp; pop r13; pop r14; ret;
0x000f339c: adc [rbp+0x41], bl; pop rsp; pop r13; pop r14; ret;
0x000f33e6: dec dword ptr [rbx+0x481c2454]; mov esi, [rsp+0x10]; mov r8d, eax; mov rdi, [rsp+8]; mov eax, 7; syscall;
0x000f33e7: mov edx, [rsp+0x1c]; mov rsi, [rsp+0x10]; mov r8d, eax; mov rdi, [rsp+8]; mov eax, 7; syscall;
0x000f33e9: and al, 0x1c; mov rsi, [rsp+0x10]; mov r8d, eax; mov rdi, [rsp+8]; mov eax, 7; syscall;
0x000f33ea: sbb al, 0x48; mov esi, [rsp+0x10]; mov r8d, eax; mov rdi, [rsp+8]; mov eax, 7; syscall;
0x000f33eb: mov rsi, [rsp+0x10]; mov r8d, eax; mov rdi, [rsp+8]; mov eax, 7; syscall;
0x000f33ec: mov esi, [rsp+0x10]; mov r8d, eax; mov rdi, [rsp+8]; mov eax, 7; syscall;
0x000f33ee: and al, 0x10; mov r8d, eax; mov rdi, [rsp+8]; mov eax, 7; syscall;
0x000f33ef: adc [rcx-0x77], al; ror byte ptr [rax-0x75], 0x7c; and al, 8; mov eax, 7; syscall;
0x000f33f0: mov r8d, eax; mov rdi, [rsp+8]; mov eax, 7; syscall;
0x000f33f1: mov eax, eax; mov rdi, [rsp+8]; mov eax, 7; syscall;
0x000f33f2: ror byte ptr [rax-0x75], 0x7c; and al, 8; mov eax, 7; syscall;
0x000f33f3: mov rdi, [rsp+8]; mov eax, 7; syscall;
0x000f33f4: mov edi, [rsp+8]; mov eax, 7; syscall;
0x000f33f6: and al, 8; mov eax, 7; syscall;
0x000f33f7: or [rax+7], bh; syscall;
0x000f33f8: mov eax, 7; syscall;
0x000f340d: or al, ch; int 0x19; stc; dec dword ptr [rbx+0x48082444]; add esp, 0x28; ret;
0x000f340f: int 0x19; stc; dec dword ptr [rbx+0x48082444]; add esp, 0x28; ret;
0x000f3410: sbb ecx, edi; dec dword ptr [rbx+0x48082444]; add esp, 0x28; ret;
0x000f341f: add [rax-0x75], cl; adc eax, 0xcaa49; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f3422: adc eax, 0xcaa49; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f3424: stosb [rdi]; or al, 0; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f3484: add [rax], al; add [rbp+0x413575c0], al; mov eax, 8; mov rdx, r12; mov eax, 0x10f; syscall;
0x000f3486: add [rbp+0x413575c0], al; mov eax, 8; mov rdx, r12; mov eax, 0x10f; syscall;
0x000f3488: shl byte ptr [rbp+0x35], 0x41; mov eax, 8; mov rdx, r12; mov eax, 0x10f; syscall;
0x000f348a: xor eax, 0x8b841; add [rax], al; mov rdx, r12; mov eax, 0x10f; syscall;
0x000f348b: mov r8d, 8; mov rdx, r12; mov eax, 0x10f; syscall;
0x000f348c: mov eax, 8; mov rdx, r12; mov eax, 0x10f; syscall;
0x000f348d: or [rax], al; add [rax], al; mov rdx, r12; mov eax, 0x10f; syscall;
0x000f348e: add [rax], al; add [rcx+rcx*4-0x1e], cl; mov eax, 0x10f; syscall;
0x000f348f: add [rax], al; mov rdx, r12; mov eax, 0x10f; syscall;
0x000f3490: add [rcx+rcx*4-0x1e], cl; mov eax, 0x10f; syscall;
0x000f34b3: test [rax], al; add [rax], al; add rsp, 0x40; pop r12; ret;
0x000f34b5: add [rax], al; add rsp, 0x40; pop r12; ret;
0x000f34b7: add rsp, 0x40; pop r12; ret;
0x000f34b8: add esp, 0x40; pop r12; ret;
0x000f34de: mov r8d, 8; mov r9d, eax; mov rdi, [rsp+8]; mov rdx, r12; mov eax, 0x10f; syscall;
0x000f34df: mov eax, 8; mov r9d, eax; mov rdi, [rsp+8]; mov rdx, r12; mov eax, 0x10f; syscall;
0x000f34e2: add [rax], al; mov r9d, eax; mov rdi, [rsp+8]; mov rdx, r12; mov eax, 0x10f; syscall;
0x000f34e3: add [rcx-0x77], al; ror dword ptr [rax-0x75], 0x7c; and al, 8; mov rdx, r12; mov eax, 0x10f; syscall;
0x000f34e4: mov r9d, eax; mov rdi, [rsp+8]; mov rdx, r12; mov eax, 0x10f; syscall;
0x000f34e5: mov ecx, eax; mov rdi, [rsp+8]; mov rdx, r12; mov eax, 0x10f; syscall;
0x000f34e6: ror dword ptr [rax-0x75], 0x7c; and al, 8; mov rdx, r12; mov eax, 0x10f; syscall;
0x000f34e7: mov rdi, [rsp+8]; mov rdx, r12; mov eax, 0x10f; syscall;
0x000f34e8: mov edi, [rsp+8]; mov rdx, r12; mov eax, 0x10f; syscall;
0x000f34ea: and al, 8; mov rdx, r12; mov eax, 0x10f; syscall;
0x000f34eb: or [rcx+rcx*4-0x1e], cl; mov eax, 0x10f; syscall;
0x000f34ec: mov rdx, r12; mov eax, 0x10f; syscall;
0x000f34ed: mov edx, esp; mov eax, 0x10f; syscall;
0x000f34ef: mov eax, 0x10f; syscall;
0x000f353d: mov al, [0xddb8ca89410001]; add [rax], al; syscall;
0x000f353e: add [rax], eax; mov r10d, ecx; mov eax, 0xdd; syscall;
0x000f3540: mov r10d, ecx; mov eax, 0xdd; syscall;
0x000f3541: mov edx, ecx; mov eax, 0xdd; syscall;
0x000f3543: mov eax, 0xdd; syscall;
0x000f3544: fld st, qword ptr [rax]; add [rax], al; syscall;
0x000f3547: add [rdi], cl; add eax, 0xdaf7c289; cmp eax, 0xfffff000; mov eax, 0; cmova eax, edx; ret;
0x000f3549: add eax, 0xdaf7c289; cmp eax, 0xfffff000; mov eax, 0; cmova eax, edx; ret;
0x000f354a: mov edx, eax; neg edx; cmp eax, 0xfffff000; mov eax, 0; cmova eax, edx; ret;
0x000f354b: ret 0xdaf7;
0x000f354c: neg edx; cmp eax, 0xfffff000; mov eax, 0; cmova eax, edx; ret;
0x000f354d: fidivr st, dword ptr [rip-0x1000]; mov eax, 0; cmova eax, edx; ret;
0x000f354e: cmp eax, 0xfffff000; mov eax, 0; cmova eax, edx; ret;
0x000f3553: mov eax, 0; cmova eax, edx; ret;
0x000f3554: add [rax], al; add [rax], al; cmova eax, edx; ret;
0x000f3556: add [rax], al; cmova eax, edx; ret;
0x000f3558: cmova eax, edx; ret;
0x000f35d9: add [rax], al; add al, ch; jmp far fword ptr [rbp-0x76be0001];
0x000f35db: add al, ch; jmp far fword ptr [rbp-0x76be0001];
0x000f35dd: jmp far fword ptr [rbp-0x76be0001];
0x000f39c0: mov r8, rsi; mov r10, rdx; mov eax, 0x11d; mov rdx, rsi; xor esi, esi; syscall;
0x000f39c1: mov eax, esi; mov r10, rdx; mov eax, 0x11d; mov rdx, rsi; xor esi, esi; syscall;
0x000f39c3: mov r10, rdx; mov eax, 0x11d; mov rdx, rsi; xor esi, esi; syscall;
0x000f39c4: mov edx, edx; mov eax, 0x11d; mov rdx, rsi; xor esi, esi; syscall;
0x000f39c5: sar byte ptr [rax+0x11d], cl; mov rdx, rsi; xor esi, esi; syscall;
0x000f39c6: mov eax, 0x11d; mov rdx, rsi; xor esi, esi; syscall;
0x000f39c7: sbb eax, 0x48000001; mov edx, esi; xor esi, esi; syscall;
0x000f39c9: add [rax], al; mov rdx, rsi; xor esi, esi; syscall;
0x000f39cb: mov rdx, rsi; xor esi, esi; syscall;
0x000f39cc: mov edx, esi; xor esi, esi; syscall;
0x000f39ce: xor esi, esi; syscall;
0x000f39fb: nop [rax+rax]; mov r10, rcx; mov eax, 0x28; syscall;
0x000f39fd: add [rax], r8b; mov r10, rcx; mov eax, 0x28; syscall;
0x000f39fe: add [rax], al; mov r10, rcx; mov eax, 0x28; syscall;
0x000f3a00: mov r10, rcx; mov eax, 0x28; syscall;
0x000f3a01: mov edx, ecx; mov eax, 0x28; syscall;
0x000f3a03: mov eax, 0x28; syscall;
0x000f3a04: sub [rax], al; add [rax], al; syscall;
0x000f3a15: or eax, 0xca456; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f3a17: movsb [rdi], [rsi]; or al, 0; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f3a3e: adc [rax+0x146], edi; syscall;
0x000f3a3f: mov eax, 0x146; syscall;
0x000f3a82: mov r10, [rsp+0x18]; mov edx, [rsp+0x28]; mov eax, 0x146; mov rsi, [rsp+0x10]; mov edi, [rsp+8]; syscall;
0x000f3a83: mov edx, [rsp+0x18]; mov edx, [rsp+0x28]; mov eax, 0x146; mov rsi, [rsp+0x10]; mov edi, [rsp+8]; syscall;
0x000f3a85: and al, 0x18; mov edx, [rsp+0x28]; mov eax, 0x146; mov rsi, [rsp+0x10]; mov edi, [rsp+8]; syscall;
0x000f3a87: mov edx, [rsp+0x28]; mov eax, 0x146; mov rsi, [rsp+0x10]; mov edi, [rsp+8]; syscall;
0x000f3a88: push rsp; and al, 0x28; mov eax, 0x146; mov rsi, [rsp+0x10]; mov edi, [rsp+8]; syscall;
0x000f3a89: and al, 0x28; mov eax, 0x146; mov rsi, [rsp+0x10]; mov edi, [rsp+8]; syscall;
0x000f3a8a: sub [rax+0x146], bh; mov rsi, [rsp+0x10]; mov edi, [rsp+8]; syscall;
0x000f3a8b: mov eax, 0x146; mov rsi, [rsp+0x10]; mov edi, [rsp+8]; syscall;
0x000f3aac: adc edi, ecx; dec dword ptr [rax-0x75]; and al, 8; add rsp, 0x30; pop rbp; ret;
0x000f3aad: stc; dec dword ptr [rax-0x75]; and al, 8; add rsp, 0x30; pop rbp; ret;
0x000f3abf: add [rax-0x75], cl; adc eax, 0xca3a9; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000f3ac2: adc eax, 0xca3a9; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000f3ac3: test eax, 0xf7000ca3; fsub st, dword ptr [rcx+rcx*4+2]; mov rax, 0xffffffffffffffff; ret;
0x000f3ac4: mov [0x48028964d8f7000c], eax; mov eax, 0xffffffff; ret;
0x000f3aed: nop [rax]; mov r10d, ecx; mov eax, 0x118; syscall;
0x000f3af0: mov r10d, ecx; mov eax, 0x118; syscall;
0x000f3af1: mov edx, ecx; mov eax, 0x118; syscall;
0x000f3b07: add [rax-0x75], cl; adc eax, 0xca361; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f3b0a: adc eax, 0xca361; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f3b25: div byte ptr [rdx+rbp-0x48]; sbb [rcx], al; add [rax], al; syscall;
0x000f3b27: sub bh, [rax+0x118]; syscall;
0x000f3b3f: add [rax-0x75], cl; adc eax, 0xca329; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f3b42: adc eax, 0xca329; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f3b43: sub [rbx-0x2708fff4], esp; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f3b50: inc ebx; mov rax, [rip+0xca317]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000f3b54: add eax, 0xca317; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000f3b56: mov [0x1600c764000c], eax; add [rax-1], bh; ret;
0x000f3b7f: dec dword ptr [rax-0x75]; add eax, 0xca2e9; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret;
0x000f3b80: mov rax, [rip+0x196be9]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret;
0x000f3b81: mov eax, [rip+0x196be9]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret;
0x000f3b82: add eax, 0xca2e9; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret;
0x000f3b84: mov [0x900c764000c], al; add [rax-1], bh; ret;
0x000f3b85: or al, 0; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret;
0x000f3b86: add [rdi+rax*8], ah; or [rax], eax; add [rax], al; mov eax, 0xffffffff; ret;
0x000f3b87: mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret;
0x000f3b88: mov dword ptr [rax], 9; mov eax, 0xffffffff; ret;
0x000f3b89: add [rcx], cl; add [rax], al; add [rax-1], bh; ret;
0x000f3b8a: or [rax], eax; add [rax], al; mov eax, 0xffffffff; ret;
0x000f3bfa: movups [rsi+0x58], xmm0; mov rax, [rdx+0x50]; mov [rsi+0x50], rcx; xor rax, 0x20; mov [rsi+0x48], rax; ret;
0x000f3bfb: adc [rsi+0x58], eax; mov rax, [rdx+0x50]; mov [rsi+0x50], rcx; xor rax, 0x20; mov [rsi+0x48], rax; ret;
0x000f3bfd: pop rax; mov rax, [rdx+0x50]; mov [rsi+0x50], rcx; xor rax, 0x20; mov [rsi+0x48], rax; ret;
0x000f3bfe: mov rax, [rdx+0x50]; mov [rsi+0x50], rcx; xor rax, 0x20; mov [rsi+0x48], rax; ret;
0x000f3bff: mov eax, [rdx+0x50]; mov [rsi+0x50], rcx; xor rax, 0x20; mov [rsi+0x48], rax; ret;
0x000f3c01: push rax; mov [rsi+0x50], rcx; xor rax, 0x20; mov [rsi+0x48], rax; ret;
0x000f3c02: mov [rsi+0x50], rcx; xor rax, 0x20; mov [rsi+0x48], rax; ret;
0x000f3c03: mov [rsi+0x50], ecx; xor rax, 0x20; mov [rsi+0x48], rax; ret;
0x000f3c05: push rax; xor rax, 0x20; mov [rsi+0x48], rax; ret;
0x000f3c06: xor rax, 0x20; mov [rsi+0x48], rax; ret;
0x000f3c07: xor eax, 0x20; mov [rsi+0x48], rax; ret;
0x000f3c09: and [rax-0x77], cl; ret;
0x000f3c0a: mov [rsi+0x48], rax; ret;
0x000f3c0b: mov [rsi+0x48], eax; ret;
0x000f3c1e: adc [rax+0x115], edi; syscall;
0x000f3c50: mov rdx, [rsp+0x10]; mov r8d, eax; mov rsi, [rsp+8]; mov edi, [rsp+0x18]; mov eax, 0x115; syscall;
0x000f3c51: mov edx, [rsp+0x10]; mov r8d, eax; mov rsi, [rsp+8]; mov edi, [rsp+0x18]; mov eax, 0x115; syscall;
0x000f3c53: and al, 0x10; mov r8d, eax; mov rsi, [rsp+8]; mov edi, [rsp+0x18]; mov eax, 0x115; syscall;
0x000f3c54: adc [rcx-0x77], al; ror byte ptr [rax-0x75], 0x74; and al, 8; mov edi, [rsp+0x18]; mov eax, 0x115; syscall;
0x000f3c55: mov r8d, eax; mov rsi, [rsp+8]; mov edi, [rsp+0x18]; mov eax, 0x115; syscall;
0x000f3c56: mov eax, eax; mov rsi, [rsp+8]; mov edi, [rsp+0x18]; mov eax, 0x115; syscall;
0x000f3c57: ror byte ptr [rax-0x75], 0x74; and al, 8; mov edi, [rsp+0x18]; mov eax, 0x115; syscall;
0x000f3c58: mov rsi, [rsp+8]; mov edi, [rsp+0x18]; mov eax, 0x115; syscall;
0x000f3c59: mov esi, [rsp+8]; mov edi, [rsp+0x18]; mov eax, 0x115; syscall;
0x000f3c5b: and al, 8; mov edi, [rsp+0x18]; mov eax, 0x115; syscall;
0x000f3c5d: mov edi, [rsp+0x18]; mov eax, 0x115; syscall;
0x000f3c5f: and al, 0x18; mov eax, 0x115; syscall;
0x000f3c60: sbb [rax+0x115], bh; syscall;
0x000f3c61: mov eax, 0x115; syscall;
0x000f3c76: sbb al, ch; adc ecx, edi; dec dword ptr [rbx+0x48182444]; add esp, 0x28; ret;
0x000f3c78: adc ecx, edi; dec dword ptr [rbx+0x48182444]; add esp, 0x28; ret;
0x000f3c79: adc ecx, edi; dec dword ptr [rbx+0x48182444]; add esp, 0x28; ret;
0x000f3c7a: stc; dec dword ptr [rbx+0x48182444]; add esp, 0x28; ret;
0x000f3c87: add [rax-0x75], cl; adc eax, 0xca1e1; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f3c8a: adc eax, 0xca1e1; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f3cce: adc [rax+0x11d], edi; syscall;
0x000f3d00: mov rdx, [rsp+0x10]; mov r8d, eax; mov esi, [rsp+0xc]; mov edi, [rsp+8]; mov eax, 0x11d; syscall;
0x000f3d01: mov edx, [rsp+0x10]; mov r8d, eax; mov esi, [rsp+0xc]; mov edi, [rsp+8]; mov eax, 0x11d; syscall;
0x000f3d03: and al, 0x10; mov r8d, eax; mov esi, [rsp+0xc]; mov edi, [rsp+8]; mov eax, 0x11d; syscall;
0x000f3d04: adc [rcx-0x77], al; ror byte ptr [rbx-0x74f3db8c], 0x7c; and al, 8; mov eax, 0x11d; syscall;
0x000f3d05: mov r8d, eax; mov esi, [rsp+0xc]; mov edi, [rsp+8]; mov eax, 0x11d; syscall;
0x000f3d06: mov eax, eax; mov esi, [rsp+0xc]; mov edi, [rsp+8]; mov eax, 0x11d; syscall;
0x000f3d07: ror byte ptr [rbx-0x74f3db8c], 0x7c; and al, 8; mov eax, 0x11d; syscall;
0x000f3d08: mov esi, [rsp+0xc]; mov edi, [rsp+8]; mov eax, 0x11d; syscall;
0x000f3d0a: and al, 0xc; mov edi, [rsp+8]; mov eax, 0x11d; syscall;
0x000f3d0c: mov edi, [rsp+8]; mov eax, 0x11d; syscall;
0x000f3d0e: and al, 8; mov eax, 0x11d; syscall;
0x000f3d0f: or [rax+0x11d], bh; syscall;
0x000f3d10: mov eax, 0x11d; syscall;
0x000f3d25: or al, ch; mov ch, 0x10; stc; dec dword ptr [rbx+0x48082444]; add esp, 0x28; ret;
0x000f3d27: mov ch, 0x10; stc; dec dword ptr [rbx+0x48082444]; add esp, 0x28; ret;
0x000f3d28: adc cl, bh; dec dword ptr [rbx+0x48082444]; add esp, 0x28; ret;
0x000f3d29: stc; dec dword ptr [rbx+0x48082444]; add esp, 0x28; ret;
0x000f3d37: add [rax-0x75], cl; adc eax, 0xca131; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f3d3a: adc eax, 0xca131; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f3d3b: xor [rcx-0x2708fff4], esp; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f3d63: nop [rax+rax]; nop [rax]; mov eax, 3; syscall;
0x000f3d64: nop [rax+rax]; nop [rax]; mov eax, 3; syscall;
0x000f3d65: nop [rax+rax]; nop [rax]; mov eax, 3; syscall;
0x000f3d67: test [rax], al; add [rax], al; add [rax], al; nop [rax]; mov eax, 3; syscall;
0x000f3d69: add [rax], al; add [rax], al; nop [rax]; mov eax, 3; syscall;
0x000f3d6b: add [rax], al; nop [rax]; mov eax, 3; syscall;
0x000f3d6d: nop [rax]; mov eax, 3; syscall;
0x000f3d6f: add [rax+3], bh; syscall;
0x000f3d82: adc eax, 0xca0e9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f3dd4: and [rbx+0x267409fe], al; mov eax, 0x48; syscall;
0x000f3dd9: mov eax, 0x48; syscall;
0x000f3df4: add [rax], al; add [rbp+0x4a], dh; add rsp, 0x68; ret;
0x000f3df6: add [rbp+0x4a], dh; add rsp, 0x68; ret;
0x000f3dfc: push 0x489066c3; lea edx, [rsp+8]; mov esi, 0x10; mov eax, 0x48; syscall;
0x000f3dfe: xchg ax, ax; lea rdx, [rsp+8]; mov esi, 0x10; mov eax, 0x48; syscall;
0x000f3dff: nop; lea rdx, [rsp+8]; mov esi, 0x10; mov eax, 0x48; syscall;
0x000f3e00: lea rdx, [rsp+8]; mov esi, 0x10; mov eax, 0x48; syscall;
0x000f3e01: lea edx, [rsp+8]; mov esi, 0x10; mov eax, 0x48; syscall;
0x000f3e02: push rsp; and al, 8; mov esi, 0x10; mov eax, 0x48; syscall;
0x000f3e03: and al, 8; mov esi, 0x10; mov eax, 0x48; syscall;
0x000f3e04: or [rsi+0x10], bh; mov eax, 0x48; syscall;
0x000f3e24: fsubr st, st(3); ret 0xf66;
0x000f3e83: add [rax], al; add [rbp+0x43], dh; add rsp, 0x18; ret;
0x000f3e85: add [rbp+0x43], dh; add rsp, 0x18; ret;
0x000f3e8b: sbb bl, al; nop [rax]; mov rdx, rsp; mov esi, 0x10; mov eax, 0x48; syscall;
0x000f3e8d: nop [rax]; mov rdx, rsp; mov esi, 0x10; mov eax, 0x48; syscall;
0x000f3e90: mov rdx, rsp; mov esi, 0x10; mov eax, 0x48; syscall;
0x000f3e91: mov edx, esp; mov esi, 0x10; mov eax, 0x48; syscall;
0x000f3e93: mov esi, 0x10; mov eax, 0x48; syscall;
0x000f3e94: adc [rax], al; add [rax], al; mov eax, 0x48; syscall;
0x000f3e95: add [rax], al; add [rax+0x48], bh; syscall;
0x000f3e96: add [rax], al; mov eax, 0x48; syscall;
0x000f3e97: add [rax+0x48], bh; syscall;
0x000f3e98: mov eax, 0x48; syscall;
0x000f3f02: add [r10+rsi+0x44], sil; mov edx, eax; mov rsi, r9; mov edi, 0xffffff9c; mov eax, 0x101; syscall;
0x000f3f03: add [rdx+rsi+0x44], dh; mov edx, eax; mov rsi, r9; mov edi, 0xffffff9c; mov eax, 0x101; syscall;
0x000f3f05: xor al, [rcx+rcx*4-0x3e]; mov rsi, r9; mov edi, 0xffffff9c; mov eax, 0x101; syscall;
0x000f3f06: mov edx, r8d; mov rsi, r9; mov edi, 0xffffff9c; mov eax, 0x101; syscall;
0x000f3f07: mov edx, eax; mov rsi, r9; mov edi, 0xffffff9c; mov eax, 0x101; syscall;
0x000f3f09: mov rsi, r9; mov edi, 0xffffff9c; mov eax, 0x101; syscall;
0x000f3f0a: mov esi, ecx; mov edi, 0xffffff9c; mov eax, 0x101; syscall;
0x000f3f0c: mov edi, 0xffffff9c; mov eax, 0x101; syscall;
0x000f3f2b: add [rax], al; add [rbp+0x43], dh; add rsp, 0x58; ret;
0x000f3f2d: add [rbp+0x43], dh; add rsp, 0x58; ret;
0x000f3fa9: add [rax], al; add [r9+rbp-0x48], sil; add [rcx], eax; add [rax], al; syscall;
0x000f3fab: add [r9+rbp-0x48], sil; add [rcx], eax; add [rax], al; syscall;
0x000f3fac: add [rcx+rbp-0x48], dh; add [rcx], eax; add [rax], al; syscall;
0x000f3fae: sub [rax+0x101], edi; syscall;
0x000f3faf: mov eax, 0x101; syscall;
0x000f3fb0: add [rcx], eax; add [rax], al; syscall;
0x000f3fc9: add [rax], al; add [rbp+0x45], dh; add rsp, 0x58; ret;
0x000f3fcb: add [rbp+0x45], dh; add rsp, 0x58; ret;
0x000f4014: or [rsi+0x1f0f0001], dl; test [rax], al; add [rax], al; add [rax], al; xor eax, eax; syscall;
0x000f4015: xchg esi, eax; add [rax], eax; nop [rax+rax]; xor eax, eax; syscall;
0x000f4016: add [rax], eax; nop [rax+rax]; xor eax, eax; syscall;
0x000f4018: nop [rax+rax]; xor eax, eax; syscall;
0x000f401a: test [rax], al; add [rax], al; add [rax], al; xor eax, eax; syscall;
0x000f401c: add [rax], al; add [rax], al; xor eax, eax; syscall;
0x000f401e: add [rax], al; xor eax, eax; syscall;
0x000f402f: add [rax-0x75], cl; adc eax, 0xc9e39; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000f4032: adc eax, 0xc9e39; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000f4033: cmp [rsi-0x2708fff4], ebx; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000f4042: inc ebx; nop [rax+rax]; xchg ax, ax; mov r10, rcx; mov eax, 0x11; syscall;
0x000f4044: nop [rax+rax]; xchg ax, ax; mov r10, rcx; mov eax, 0x11; syscall;
0x000f4045: nop [rax+rax]; xchg ax, ax; mov r10, rcx; mov eax, 0x11; syscall;
0x000f4046: nop [rax+rax]; xchg ax, ax; mov r10, rcx; mov eax, 0x11; syscall;
0x000f4049: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov r10, rcx; mov eax, 0x11; syscall;
0x000f404a: add [rax], al; add [rax], al; xchg ax, ax; mov r10, rcx; mov eax, 0x11; syscall;
0x000f404b: add [rax], al; add [rsi-0x70], ah; mov r10, rcx; mov eax, 0x11; syscall;
0x000f404c: add [rax], al; xchg ax, ax; mov r10, rcx; mov eax, 0x11; syscall;
0x000f404d: add [rsi-0x70], ah; mov r10, rcx; mov eax, 0x11; syscall;
0x000f404e: xchg ax, ax; mov r10, rcx; mov eax, 0x11; syscall;
0x000f404f: nop; mov r10, rcx; mov eax, 0x11; syscall;
0x000f4050: mov r10, rcx; mov eax, 0x11; syscall;
0x000f4051: mov edx, ecx; mov eax, 0x11; syscall;
0x000f4053: mov eax, 0x11; syscall;
0x000f4054: adc [rax], eax; add [rax], al; syscall;
0x000f4067: add [rax-0x75], cl; adc eax, 0xc9e01; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000f406a: adc eax, 0xc9e01; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000f406b: add [rsi-0x2708fff4], ebx; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000f406c: sahf; or al, 0; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000f407a: inc ebx; nop [rax]; mov eax, 1; syscall;
0x000f407c: nop [rax]; mov eax, 1; syscall;
0x000f407e: add [rax+1], dil; syscall;
0x000f407f: add [rax+1], bh; syscall;
0x000f4080: mov eax, 1; syscall;
0x000f4081: add [rax], eax; add [rax], al; syscall;
0x000f4092: adc eax, 0xc9dd9; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000f4093: fstp dword ptr [rbp-0x2708fff4], st; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000f4094: popfq; or al, 0; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000f40a2: inc ebx; nop [rax+rax]; xchg ax, ax; mov eax, [rdi+8]; and eax, 0x100f; ret;
0x000f40a4: nop [rax+rax]; xchg ax, ax; mov eax, [rdi+8]; and eax, 0x100f; ret;
0x000f40a5: nop [rax+rax]; xchg ax, ax; mov eax, [rdi+8]; and eax, 0x100f; ret;
0x000f40a6: nop [rax+rax]; xchg ax, ax; mov eax, [rdi+8]; and eax, 0x100f; ret;
0x000f40a9: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, [rdi+8]; and eax, 0x100f; ret;
0x000f40aa: add [rax], al; add [rax], al; xchg ax, ax; mov eax, [rdi+8]; and eax, 0x100f; ret;
0x000f40ab: add [rax], al; add [rsi-0x70], ah; mov eax, [rdi+8]; and eax, 0x100f; ret;
0x000f40ac: add [rax], al; xchg ax, ax; mov eax, [rdi+8]; and eax, 0x100f; ret;
0x000f40ad: add [rsi-0x70], ah; mov eax, [rdi+8]; and eax, 0x100f; ret;
0x000f40ae: xchg ax, ax; mov eax, [rdi+8]; and eax, 0x100f; ret;
0x000f40af: nop; mov eax, [rdi+8]; and eax, 0x100f; ret;
0x000f40b1: or [rip+0x100f], r12b; ret;
0x000f40b2: or [rip+0x100f], ah; ret;
0x000f40bd: add [rax], al; add [rbx-0x7a3fcee9], cl; sar byte ptr [rax+8], cl; mov eax, [rdi+8]; and eax, 0x100f; ret;
0x000f40bf: add [rbx-0x7a3fcee9], cl; sar byte ptr [rax+8], cl; mov eax, [rdi+8]; and eax, 0x100f; ret;
0x000f40c3: rol byte ptr [rbp-0x74f7872e], 0x47; or [rip+0x100f], ah; ret;
0x000f40c5: sar byte ptr [rax+8], cl; mov eax, [rdi+8]; and eax, 0x100f; ret;
0x000f40c8: mov eax, [rdi+8]; and eax, 0x100f; ret;
0x000f40c9: or [rip+0x100f], r12b; ret;
0x000f40ca: or [rip+0x100f], ah; ret;
0x000f40cb: and eax, 0x100f; ret;
0x000f40f2: adc ecx, [rbx+0x77890847]; cmp [rip-0x1010], ah; or esi, eax; xor eax, eax; mov [rdi+8], esi; ret;
0x000f40f6: mov [rdi+0x38], esi; and eax, 0xffffeff0; or esi, eax; xor eax, eax; mov [rdi+8], esi; ret;
0x000f40f8: cmp [rip-0x1010], ah; or esi, eax; xor eax, eax; mov [rdi+8], esi; ret;
0x000f4101: ror byte ptr [rcx+0x48c30877], 0x8b; add eax, 0xc9d63; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000f4104: or bl, al; mov rax, [rip+0xc9d63]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000f4108: add eax, 0xc9d63; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000f4109: movsxd ebx, [rbp-0x389bfff4]; add [rsi], dl; add [rax], al; add [rax-1], bh; ret;
0x000f413f: mov eax, [rdi+8]; and eax, 0xffffeff0; or esi, eax; xor eax, eax; mov [rdi+8], esi; ret;
0x000f4140: or [rip-0x1010], r12b; or esi, eax; xor eax, eax; mov [rdi+8], esi; ret;
0x000f4141: or [rip-0x1010], ah; or esi, eax; xor eax, eax; mov [rdi+8], esi; ret;
0x000f4142: and eax, 0xffffeff0; or esi, eax; xor eax, eax; mov [rdi+8], esi; ret;
0x000f4147: or esi, eax; xor eax, eax; mov [rdi+8], esi; ret;
0x000f4149: xor eax, eax; mov [rdi+8], esi; ret;
0x000f4156: div byte ptr [rbp-0x21]; or eax, 0x80000000; mov [rdi], eax; xor eax, eax; ret;
0x000f4158: fisttp word ptr [rip-0x80000000], st; mov [rdi], eax; xor eax, eax; ret;
0x000f4159: or eax, 0x80000000; mov [rdi], eax; xor eax, eax; ret;
0x000f415a: add [rax], al; add [rax-0x3fcef877], al; ret;
0x000f415b: add [rax], al; or byte ptr [rcx-0x3c3fcef9], 0x48; mov eax, [rip+0xc9d06]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000f415c: add [rax-0x3fcef877], al; ret;
0x000f415d: or byte ptr [rcx-0x3c3fcef9], 0x48; mov eax, [rip+0xc9d06]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000f415e: mov [rdi], eax; xor eax, eax; ret;
0x000f4161: rol bl, 0x48; mov eax, [rip+0x181430]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000f4165: add eax, 0xc9d06; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000f4167: popfq; or al, 0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000f41df: mov dword ptr fs:[rax], 0x16; add rsp, 8; mov eax, 0xffffffff; pop rbp; pop r12; ret;
0x000f41e0: mov dword ptr [rax], 0x16; add rsp, 8; mov eax, 0xffffffff; pop rbp; pop r12; ret;
0x000f41e4: add [rax], al; add rsp, 8; mov eax, 0xffffffff; pop rbp; pop r12; ret;
0x000f41e6: add rsp, 8; mov eax, 0xffffffff; pop rbp; pop r12; ret;
0x000f41e7: add esp, 8; mov eax, 0xffffffff; pop rbp; pop r12; ret;
0x000f41e9: or [rax-1], bh; pop rbp; pop r12; ret;
0x000f4210: mov rax, fs:[0x28]; mov [rsp+0x58], rax; xor eax, eax; lea rdx, [rsp+0x30]; mov eax, 0x10; syscall;
0x000f4211: mov rax, [0x28]; mov [rsp+0x58], rax; xor eax, eax; lea rdx, [rsp+0x30]; mov eax, 0x10; syscall;
0x000f4212: mov eax, [0x28]; mov [rsp+0x58], rax; xor eax, eax; lea rdx, [rsp+0x30]; mov eax, 0x10; syscall;
0x000f4214: and eax, 0x28; mov [rsp+0x58], rax; xor eax, eax; lea rdx, [rsp+0x30]; mov eax, 0x10; syscall;
0x000f4217: add [rax], al; mov [rsp+0x58], rax; xor eax, eax; lea rdx, [rsp+0x30]; mov eax, 0x10; syscall;
0x000f4218: add [rax-0x77], cl; and al, 0x58; xor eax, eax; lea rdx, [rsp+0x30]; mov eax, 0x10; syscall;
0x000f4219: mov [rsp+0x58], rax; xor eax, eax; lea rdx, [rsp+0x30]; mov eax, 0x10; syscall;
0x000f421a: mov [rsp+0x58], eax; xor eax, eax; lea rdx, [rsp+0x30]; mov eax, 0x10; syscall;
0x000f421c: and al, 0x58; xor eax, eax; lea rdx, [rsp+0x30]; mov eax, 0x10; syscall;
0x000f421d: pop rax; xor eax, eax; lea rdx, [rsp+0x30]; mov eax, 0x10; syscall;
0x000f421e: xor eax, eax; lea rdx, [rsp+0x30]; mov eax, 0x10; syscall;
0x000f421f: ror byte ptr [rax-0x73], 0x54; and al, 0x30; mov eax, 0x10; syscall;
0x000f4220: lea rdx, [rsp+0x30]; mov eax, 0x10; syscall;
0x000f4221: lea edx, [rsp+0x30]; mov eax, 0x10; syscall;
0x000f4222: push rsp; and al, 0x30; mov eax, 0x10; syscall;
0x000f4223: and al, 0x30; mov eax, 0x10; syscall;
0x000f4224: xor [rax+0x10], bh; syscall;
0x000f4235: add [rax], eax; add [rcx-0x77], al; ret 0x8341;
0x000f4237: add [rcx-0x77], al; ret 0x8341;
0x000f4288: movzx eax, byte ptr [r9+0x23]; mov [rsp+0x21], cx; mov [rsp+0x23], al; mov eax, r8d; movups [rsp+0x11], xmm0; syscall;
0x000f4289: movzx eax, byte ptr [rcx+0x23]; mov [rsp+0x21], cx; mov [rsp+0x23], al; mov eax, r8d; movups [rsp+0x11], xmm0; syscall;
0x000f428b: and esp, [r14-0x77]; and al, 0x21; mov [rsp+0x23], al; mov eax, r8d; movups [rsp+0x11], xmm0; syscall;
0x000f428c: and esp, [rsi-0x77]; and al, 0x21; mov [rsp+0x23], al; mov eax, r8d; movups [rsp+0x11], xmm0; syscall;
0x000f428d: mov [rsp+0x21], cx; mov [rsp+0x23], al; mov eax, r8d; movups [rsp+0x11], xmm0; syscall;
0x000f428e: mov [rsp+0x21], ecx; mov [rsp+0x23], al; mov eax, r8d; movups [rsp+0x11], xmm0; syscall;
0x000f4290: and al, 0x21; mov [rsp+0x23], al; mov eax, r8d; movups [rsp+0x11], xmm0; syscall;
0x000f4291: and [rax+0x44232444], ecx; mov eax, eax; movups [rsp+0x11], xmm0; syscall;
0x000f4292: mov [rsp+0x23], al; mov eax, r8d; movups [rsp+0x11], xmm0; syscall;
0x000f4294: and al, 0x23; mov eax, r8d; movups [rsp+0x11], xmm0; syscall;
0x000f4295: and eax, [rcx+rcx*4-0x40]; movups [rsp+0x11], xmm0; syscall;
0x000f4296: mov eax, r8d; movups [rsp+0x11], xmm0; syscall;
0x000f4297: mov eax, eax; movups [rsp+0x11], xmm0; syscall;
0x000f4298: ror byte ptr [rdi], 0x11; and al, 0x11; syscall;
0x000f4299: movups [rsp+0x11], xmm0; syscall;
0x000f429a: adc [rsp+0x11], eax; syscall;
0x000f429c: and al, 0x11; syscall;
0x000f42a5: dec dword ptr [rdi]; xchg esp, esp; add [rax], al; add [rcx+9], al; ret 0x8941;
0x000f42a7: xchg esp, esp; add [rax], al; add [rcx+9], al; ret 0x8941;
0x000f42a9: add [rax], al; add [rcx+9], al; ret 0x8941;
0x000f42ab: add [rcx+9], al; ret 0x8941;
0x000f42b4: mov r10, [rip+0xc9bb5]; mov esi, 0x5401; mov eax, r8d; mov ebx, fs:[r10]; syscall;
0x000f42b5: mov edx, [rip+0xc9bb5]; mov esi, 0x5401; mov eax, r8d; mov ebx, fs:[r10]; syscall;
0x000f42b6: adc eax, 0xc9bb5; mov esi, 0x5401; mov eax, r8d; mov ebx, fs:[r10]; syscall;
0x000f42b7: mov ch, 0x9b; or al, 0; mov esi, 0x5401; mov eax, r8d; mov ebx, fs:[r10]; syscall;
0x000f42b8: fwait; or al, 0; mov esi, 0x5401; mov eax, r8d; mov ebx, fs:[r10]; syscall;
0x000f42b9: or al, 0; mov esi, 0x5401; mov eax, r8d; mov ebx, fs:[r10]; syscall;
0x000f42ba: add [rsi+0x5401], bh; mov eax, r8d; mov ebx, fs:[r10]; syscall;
0x000f42bb: mov esi, 0x5401; mov eax, r8d; mov ebx, fs:[r10]; syscall;
0x000f42bc: add [rax+rax], edx; mov eax, r8d; mov ebx, fs:[r10]; syscall;
0x000f42bd: push rsp; add [rax], al; mov eax, r8d; mov ebx, fs:[r10]; syscall;
0x000f42be: add [rax], al; mov eax, r8d; mov ebx, fs:[r10]; syscall;
0x000f42bf: add [rcx+rcx*4-0x40], al; mov ebx, fs:[r10]; syscall;
0x000f42c0: mov eax, r8d; mov ebx, fs:[r10]; syscall;
0x000f42c1: mov eax, eax; mov ebx, fs:[r10]; syscall;
0x000f42c2: shl byte ptr [rcx+rax*2-0x75], 0x1a; syscall;
0x000f42c3: mov ebx, fs:[r10]; syscall;
0x000f42c4: mov ebx, [r10]; syscall;
0x000f42c5: mov ebx, [rdx]; syscall;
0x000f42f8: add [rax], al; add rsp, 0x60; mov eax, r11d; pop rbx; ret;
0x000f42fa: add rsp, 0x60; mov eax, r11d; pop rbx; ret;
0x000f42fb: add esp, 0x60; mov eax, r11d; pop rbx; ret;
0x000f42fe: mov eax, r11d; pop rbx; ret;
0x000f4337: add [rax], al; or byte ptr [rip-0x80000000], 0x39; ret 0x9f75;
0x000f4339: or byte ptr [rip-0x80000000], 0x39; ret 0x9f75;
0x000f4340: ret 0x9f75;
0x000f438e: call qword ptr [rax-0x26ea74b8];
0x000f43dc: mov rax, fs:[0x28]; mov [rsp+0x28], rax; xor eax, eax; mov rdx, rsp; mov eax, 0x10; syscall;
0x000f43dd: mov rax, [0x28]; mov [rsp+0x28], rax; xor eax, eax; mov rdx, rsp; mov eax, 0x10; syscall;
0x000f43de: mov eax, [0x28]; mov [rsp+0x28], rax; xor eax, eax; mov rdx, rsp; mov eax, 0x10; syscall;
0x000f43e0: and eax, 0x28; mov [rsp+0x28], rax; xor eax, eax; mov rdx, rsp; mov eax, 0x10; syscall;
0x000f43e3: add [rax], al; mov [rsp+0x28], rax; xor eax, eax; mov rdx, rsp; mov eax, 0x10; syscall;
0x000f43e4: add [rax-0x77], cl; and al, 0x28; xor eax, eax; mov rdx, rsp; mov eax, 0x10; syscall;
0x000f43e5: mov [rsp+0x28], rax; xor eax, eax; mov rdx, rsp; mov eax, 0x10; syscall;
0x000f43e6: mov [rsp+0x28], eax; xor eax, eax; mov rdx, rsp; mov eax, 0x10; syscall;
0x000f43e8: and al, 0x28; xor eax, eax; mov rdx, rsp; mov eax, 0x10; syscall;
0x000f43e9: sub [rcx], dh; ror byte ptr [rax-0x77], 0xe2; mov eax, 0x10; syscall;
0x000f43ea: xor eax, eax; mov rdx, rsp; mov eax, 0x10; syscall;
0x000f43eb: ror byte ptr [rax-0x77], 0xe2; mov eax, 0x10; syscall;
0x000f43ec: mov rdx, rsp; mov eax, 0x10; syscall;
0x000f43ed: mov edx, esp; mov eax, 0x10; syscall;
0x000f4471: add [rax], al; add [rbp+0x1e], dh; mov eax, r9d; add rsp, 0x38; ret;
0x000f4473: add [rbp+0x1e], dh; mov eax, r9d; add rsp, 0x38; ret;
0x000f4476: mov eax, r9d; add rsp, 0x38; ret;
0x000f4477: mov eax, ecx; add rsp, 0x38; ret;
0x000f44d6: add [rax], al; add [rbp+0xc], dh; add rsp, 0x18; ret;
0x000f44d8: add [rbp+0xc], dh; add rsp, 0x18; ret;
0x000f4503: add al, ch; mov bh, 7; add [rax], al; add rsp, 0x18; ret;
0x000f4505: mov bh, 7; add [rax], al; add rsp, 0x18; ret;
0x000f4507: add [rax], al; add rsp, 0x18; ret;
0x000f4517: add [rbp-0x45db8a40], al; add [rax], eax; add [rax], al; mov esi, 0x5409; mov eax, 0x10; syscall;
0x000f4519: shl byte ptr [rbp+0x24], 0xba; add [rax], eax; add [rax], al; mov esi, 0x5409; mov eax, 0x10; syscall;
0x000f451b: and al, 0xba; add [rax], eax; add [rax], al; mov esi, 0x5409; mov eax, 0x10; syscall;
0x000f451c: mov edx, 1; mov esi, 0x5409; mov eax, 0x10; syscall;
0x000f451d: add [rax], eax; add [rax], al; mov esi, 0x5409; mov eax, 0x10; syscall;
0x000f451e: add [rax], al; add [rsi+0x5409], bh; mov eax, 0x10; syscall;
0x000f451f: add [rax], al; mov esi, 0x5409; mov eax, 0x10; syscall;
0x000f4520: add [rsi+0x5409], bh; mov eax, 0x10; syscall;
0x000f4521: mov esi, 0x5409; mov eax, 0x10; syscall;
0x000f4522: or [rax+rax], edx; mov eax, 0x10; syscall;
0x000f4523: push rsp; add [rax], al; mov eax, 0x10; syscall;
0x000f4532: push qword ptr [rdi+0x53]; ret;
0x000f4534: push rbx; ret;
0x000f454d: mov edi, [rsp+0xc]; mov edx, 1; mov esi, 0x5409; mov r8d, eax; mov eax, 0x10; syscall;
0x000f454f: and al, 0xc; mov edx, 1; mov esi, 0x5409; mov r8d, eax; mov eax, 0x10; syscall;
0x000f4551: mov edx, 1; mov esi, 0x5409; mov r8d, eax; mov eax, 0x10; syscall;
0x000f4552: add [rax], eax; add [rax], al; mov esi, 0x5409; mov r8d, eax; mov eax, 0x10; syscall;
0x000f4553: add [rax], al; add [rsi+0x5409], bh; mov r8d, eax; mov eax, 0x10; syscall;
0x000f4554: add [rax], al; mov esi, 0x5409; mov r8d, eax; mov eax, 0x10; syscall;
0x000f4555: add [rsi+0x5409], bh; mov r8d, eax; mov eax, 0x10; syscall;
0x000f4556: mov esi, 0x5409; mov r8d, eax; mov eax, 0x10; syscall;
0x000f4557: or [rax+rax], edx; mov r8d, eax; mov eax, 0x10; syscall;
0x000f4558: push rsp; add [rax], al; mov r8d, eax; mov eax, 0x10; syscall;
0x000f4559: add [rax], al; mov r8d, eax; mov eax, 0x10; syscall;
0x000f455b: mov r8d, eax; mov eax, 0x10; syscall;
0x000f455c: mov eax, eax; mov eax, 0x10; syscall;
0x000f4573: or al, 0xe8; or cl, bh; dec dword ptr [rbx+0x480c2444]; add esp, 0x18; ret;
0x000f4576: or cl, bh; dec dword ptr [rbx+0x480c2444]; add esp, 0x18; ret;
0x000f4577: stc; dec dword ptr [rbx+0x480c2444]; add esp, 0x18; ret;
0x000f4587: add [rax-0x75], cl; adc eax, 0xc98e1; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f458a: adc eax, 0xc98e1; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f458c: cwde; or al, 0; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f4627: and eax, 0xfffffecf; or eax, 0x30; mov [rdi+8], eax; mov eax, 0x100; mov [rdi+0x16], ax; ret;
0x000f462b: inc dword ptr [rbx+0x478930c8]; or [rax+0x100], bh; mov [rdi+0x16], ax; ret;
0x000f462c: or eax, 0x30; mov [rdi+8], eax; mov eax, 0x100; mov [rdi+0x16], ax; ret;
0x000f462d: enter 0x8930, 0x47; or [rax+0x100], bh; mov [rdi+0x16], ax; ret;
0x000f462f: mov [rdi+8], eax; mov eax, 0x100; mov [rdi+0x16], ax; ret;
0x000f4630: or [r8+0x100], r15b; mov [rdi+0x16], ax; ret;
0x000f4631: or [rax+0x100], bh; mov [rdi+0x16], ax; ret;
0x000f4632: mov eax, 0x100; mov [rdi+0x16], ax; ret;
0x000f4633: add [rcx], al; add [rax], al; mov [rdi+0x16], ax; ret;
0x000f4635: add [rax], al; mov [rdi+0x16], ax; ret;
0x000f4637: mov [rdi+0x16], ax; ret;
0x000f4638: mov [rdi+0x16], eax; ret;
0x000f469d: add [rbp+0x69], dh; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret;
0x000f469f: imul ecx, [rax-0x7d], 0x5d5b10c4; pop r12; ret;
0x000f4710: mov r10, rsi; xor edx, edx; mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall;
0x000f4711: mov edx, esi; xor edx, edx; mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall;
0x000f4725: push qword ptr [rdi+8]; ret;
0x000f4729: nop [rax]; mov rdx, [rip+0xc9739]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f472f: add [rax-0x75], cl; adc eax, 0xc9739; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f4732: adc eax, 0xc9739; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f4733: cmp [rdi-0x2708fff4], edx; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f4734: xchg edi, eax; or al, 0; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f4750: mov rdx, rsi; xor r10d, r10d; mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall;
0x000f4751: mov edx, esi; xor r10d, r10d; mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall;
0x000f4753: xor r10d, r10d; mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall;
0x000f4754: xor edx, edx; mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall;
0x000f4755: ror byte ptr [rcx+0x12eb8fe], cl; add [rax], al; xor edi, edi; syscall;
0x000f4756: mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall;
0x000f4758: mov eax, 0x12e; xor edi, edi; syscall;
0x000f475b: add [rax], al; xor edi, edi; syscall;
0x000f475d: xor edi, edi; syscall;
0x000f476a: nop [rax+rax]; mov rdx, [rip+0xf82b9]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f476f: add [rax-0x75], cl; adc eax, 0xc96f9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f4772: adc eax, 0xc96f9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f4774: xchg esi, eax; or al, 0; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f4780: inc ebx; nop [rax+rax]; nop [rax]; mov eax, 0x62; syscall;
0x000f4782: nop [rax+rax]; nop [rax]; mov eax, 0x62; syscall;
0x000f4783: nop [rax+rax]; nop [rax]; mov eax, 0x62; syscall;
0x000f4784: nop [rax+rax]; nop [rax]; mov eax, 0x62; syscall;
0x000f4786: test [rax], al; add [rax], al; add [rax], al; nop [rax]; mov eax, 0x62; syscall;
0x000f4788: add [rax], al; add [rax], al; nop [rax]; mov eax, 0x62; syscall;
0x000f478a: add [rax], al; nop [rax]; mov eax, 0x62; syscall;
0x000f478c: nop [rax]; mov eax, 0x62; syscall;
0x000f478e: add [rax+0x62], dil; syscall;
0x000f478f: add [rax+0x62], bh; syscall;
0x000f4790: mov eax, 0x62; syscall;
0x000f47a2: or eax, 0xc96c9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f47a4: xchg esi, eax; or al, 0; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f482c: add [rdi], cl; test [rdx+0x48000000], edi; add esp, 0x60; mov rax, r12; pop r12; ret;
0x000f482e: test [rdx+0x48000000], edi; add esp, 0x60; mov rax, r12; pop r12; ret;
0x000f482f: mov edx, 0x48000000; add esp, 0x60; mov rax, r12; pop r12; ret;
0x000f4831: add [rax], al; add rsp, 0x60; mov rax, r12; pop r12; ret;
0x000f4833: add rsp, 0x60; mov rax, r12; pop r12; ret;
0x000f4834: add esp, 0x60; mov rax, r12; pop r12; ret;
0x000f4904: outsd dx, [rsi]; call qword ptr [rbx+0x48];
0x000f495a: add [rbp+0x28], dh; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret;
0x000f4ab8: sar eax, 0x1f; pop rbp; ret;
0x000f4abd: mov eax, 0xffffffff; pop rbp; ret;
0x000f4ac1: call far fword ptr [rbp-0x3d];
0x000f4ac4: nop [rax+rax]; xchg ax, ax; mov eax, 0x8c; syscall;
0x000f4ac5: nop [rax+rax]; xchg ax, ax; mov eax, 0x8c; syscall;
0x000f4ac6: nop [rax+rax]; xchg ax, ax; mov eax, 0x8c; syscall;
0x000f4ac8: test [rax], al; add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0x8c; syscall;
0x000f4ac9: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, 0x8c; syscall;
0x000f4aca: add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0x8c; syscall;
0x000f4acb: add [rax], al; add [rsi-0x70], ah; mov eax, 0x8c; syscall;
0x000f4acc: add [rax], al; xchg ax, ax; mov eax, 0x8c; syscall;
0x000f4acd: add [rsi-0x70], ah; mov eax, 0x8c; syscall;
0x000f4ace: xchg ax, ax; mov eax, 0x8c; syscall;
0x000f4acf: nop; mov eax, 0x8c; syscall;
0x000f4ad0: mov eax, 0x8c; syscall;
0x000f4ad1: mov [rax], es; add [rax], al; syscall;
0x000f4adc: push qword ptr [rdi+0x11]; mov edx, 0x14; sub edx, eax; test eax, eax; cmovns eax, edx; ret;
0x000f4ade: adc [rdx+0x14], edi; sub edx, eax; test eax, eax; cmovns eax, edx; ret;
0x000f4adf: mov edx, 0x14; sub edx, eax; test eax, eax; cmovns eax, edx; ret;
0x000f4ae0: adc al, 0; add [rax], al; sub edx, eax; test eax, eax; cmovns eax, edx; ret;
0x000f4ae1: add [rax], al; add [rcx], ch; ret 0xc085;
0x000f4ae2: add [rax], al; sub edx, eax; test eax, eax; cmovns eax, edx; ret;
0x000f4ae3: add [rcx], ch; ret 0xc085;
0x000f4ae4: sub edx, eax; test eax, eax; cmovns eax, edx; ret;
0x000f4ae6: test eax, eax; cmovns eax, edx; ret;
0x000f4ae7: ror byte ptr [rdi], 0x49; ret 0xfc3;
0x000f4ae8: cmovns eax, edx; ret;
0x000f4aef: add [rax-0x75], cl; adc eax, 0xc9379; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f4af2: adc eax, 0xc9379; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f4af4: xchg ebx, eax; or al, 0; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f4b00: inc ebx; nop [rax+rax]; nop [rax]; mov eax, 0x8d; syscall;
0x000f4b02: nop [rax+rax]; nop [rax]; mov eax, 0x8d; syscall;
0x000f4b03: nop [rax+rax]; nop [rax]; mov eax, 0x8d; syscall;
0x000f4b04: nop [rax+rax]; nop [rax]; mov eax, 0x8d; syscall;
0x000f4b06: test [rax], al; add [rax], al; add [rax], al; nop [rax]; mov eax, 0x8d; syscall;
0x000f4b08: add [rax], al; add [rax], al; nop [rax]; mov eax, 0x8d; syscall;
0x000f4b0a: add [rax], al; nop [rax]; mov eax, 0x8d; syscall;
0x000f4b0c: nop [rax]; mov eax, 0x8d; syscall;
0x000f4b0e: add [rax+0x8d], dil; syscall;
0x000f4b0f: add [rax+0x8d], bh; syscall;
0x000f4b10: mov eax, 0x8d; syscall;
0x000f4b11: lea eax, [rax]; add [rax], al; syscall;
0x000f4b22: or eax, 0xc9349; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f4b23: xchg r11, rax; or al, 0; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f4b24: xchg ebx, eax; or al, 0; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f4b7d: adc ah, [rsp+rax*2-0x77]; and esi, [rcx]; neg byte ptr [rbx+0x31]; call far fword ptr [rbp+0x41];
0x000f4b81: and esi, [rcx]; neg byte ptr [rbx+0x31]; call far fword ptr [rbp+0x41];
0x000f4b83: neg byte ptr [rbx+0x31]; call far fword ptr [rbp+0x41];
0x000f4b8e: call qword ptr [rax+0xd3b8364];
0x000f4b96: mov dword ptr fs:[rbx], 1; pop rbx; mov eax, 0xffffffff; pop rbp; pop r12; ret;
0x000f4b97: mov dword ptr [rbx], 1; pop rbx; mov eax, 0xffffffff; pop rbp; pop r12; ret;
0x000f4b9b: add [rax], al; pop rbx; mov eax, 0xffffffff; pop rbp; pop r12; ret;
0x000f4b9d: pop rbx; mov eax, 0xffffffff; pop rbp; pop r12; ret;
0x000f4b9e: mov eax, 0xffffffff; pop rbp; pop r12; ret;
0x000f4ba7: nop [rax+rax]; mov eax, 0xc; syscall;
0x000f4ba8: nop [rax+rax]; mov eax, 0xc; syscall;
0x000f4baa: test [rax], al; add [rax], al; add [rax], al; mov eax, 0xc; syscall;
0x000f4bab: add [rax], al; add [rax], al; add [rax+0xc], bh; syscall;
0x000f4bac: add [rax], al; add [rax], al; mov eax, 0xc; syscall;
0x000f4bad: add [rax], al; add [rax+0xc], bh; syscall;
0x000f4bae: add [rax], al; mov eax, 0xc; syscall;
0x000f4baf: add [rax+0xc], bh; syscall;
0x000f4bb0: mov eax, 0xc; syscall;
0x000f4bb1: or al, 0; add [rax], al; syscall;
0x000f4bde: add bh, dh; fsub st, dword ptr [rcx+rcx*4+2]; mov rax, [rip+0xc92dd]; mov qword ptr [rax], 0xffffffffffffffff; xor eax, eax; ret;
0x000f4bdf: neg eax; mov fs:[rdx], eax; mov rax, [rip+0xc92dd]; mov qword ptr [rax], 0xffffffffffffffff; xor eax, eax; ret;
0x000f4be0: fsub st, dword ptr [rcx+rcx*4+2]; mov rax, [rip+0xc92dd]; mov qword ptr [rax], 0xffffffffffffffff; xor eax, eax; ret;
0x000f4be1: mov fs:[rdx], eax; mov rax, [rip+0xc92dd]; mov qword ptr [rax], 0xffffffffffffffff; xor eax, eax; ret;
0x000f4be2: mov [rdx], eax; mov rax, [rip+0xc92dd]; mov qword ptr [rax], 0xffffffffffffffff; xor eax, eax; ret;
0x000f4be3: add cl, [rax-0x75]; add eax, 0xc92dd; mov qword ptr [rax], 0xffffffffffffffff; xor eax, eax; ret;
0x000f4be4: mov rax, [rip+0xc92dd]; mov qword ptr [rax], 0xffffffffffffffff; xor eax, eax; ret;
0x000f4be5: mov eax, [rip+0xc92dd]; mov qword ptr [rax], 0xffffffffffffffff; xor eax, eax; ret;
0x000f4be6: add eax, 0xc92dd; mov qword ptr [rax], 0xffffffffffffffff; xor eax, eax; ret;
0x000f4be8: xchg edx, eax; or al, 0; mov qword ptr [rax], 0xffffffffffffffff; xor eax, eax; ret;
0x000f4be9: or al, 0; mov qword ptr [rax], 0xffffffffffffffff; xor eax, eax; ret;
0x000f4beb: mov qword ptr [rax], 0xffffffffffffffff; xor eax, eax; ret;
0x000f4bec: mov dword ptr [rax], 0xffffffff; xor eax, eax; ret;
0x000f4bf5: nop [rax]; mov rax, [rip+0xc9271]; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret;
0x000f4bf7: add [rax-0x75], cl; add eax, 0xc9271; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret;
0x000f4bf8: mov rax, [rip+0xc9271]; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret;
0x000f4bf9: mov eax, [rip+0xc9271]; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret;
0x000f4bfa: add eax, 0xc9271; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret;
0x000f4bfc: xchg edx, eax; or al, 0; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret;
0x000f4bfd: or al, 0; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret;
0x000f4bfe: add [rdi+rax*8], ah; or al, 0; add [rax], al; mov eax, 0xffffffff; ret;
0x000f4bff: mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret;
0x000f4c00: mov dword ptr [rax], 0xc; mov eax, 0xffffffff; ret;
0x000f4c01: add [rax+rax], cl; add [rax], al; mov eax, 0xffffffff; ret;
0x000f4c02: or al, 0; add [rax], al; mov eax, 0xffffffff; ret;
0x000f4c4e: mov r12, 0xffffffffffffffff; mov rax, r12; pop rbx; pop rbp; pop r12; ret;
0x000f4c4f: mov esp, 0xffffffff; mov rax, r12; pop rbx; pop rbp; pop r12; ret;
0x000f4c8b: inc dword ptr [rbp+0x4cbe78c0]; mov eax, esp; pop rbx; pop rbp; pop r12; ret;
0x000f4c8d: sar byte ptr [rax-0x42], 0x4c; mov eax, esp; pop rbx; pop rbp; pop r12; ret;
0x000f4c8f: mov esi, 0x5be0894c; pop rbp; pop r12; ret;
0x000f4c98: nop [rax+rax]; mov rax, [rip+0xc91c9]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret;
0x000f4c9c: add [rax], al; add [rax], al; mov rax, [rip+0xc91c9]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret;
0x000f4c9d: add [rax], al; add [rax-0x75], cl; add eax, 0xc91c9; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret;
0x000f4c9f: add [rax-0x75], cl; add eax, 0xc91c9; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret;
0x000f4ca2: add eax, 0xc91c9; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret;
0x000f4ca3: leave; xchg ecx, eax; or al, 0; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret;
0x000f4ca4: xchg ecx, eax; or al, 0; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret;
0x000f4ca5: or al, 0; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret;
0x000f4cb4: inc ebx; nop [rax+rax]; mov eax, 0x10; syscall;
0x000f4cb6: nop [rax+rax]; mov eax, 0x10; syscall;
0x000f4cb7: nop [rax+rax]; mov eax, 0x10; syscall;
0x000f4cb8: nop [rax+rax]; mov eax, 0x10; syscall;
0x000f4cba: test [rax], al; add [rax], al; add [rax], al; mov eax, 0x10; syscall;
0x000f4cbb: add [rax], al; add [rax], al; add [rax+0x10], bh; syscall;
0x000f4cbc: add [rax], al; add [rax], al; mov eax, 0x10; syscall;
0x000f4cbd: add [rax], al; add [rax+0x10], bh; syscall;
0x000f4cbe: add [rax], al; mov eax, 0x10; syscall;
0x000f4cbf: add [rax+0x10], bh; syscall;
0x000f4cc0: mov eax, 0x10; syscall;
0x000f4cc1: adc [rax], al; add [rax], al; syscall;
0x000f4cd2: or eax, 0xc9199; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f4cd4: xchg ecx, eax; or al, 0; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f4cf5: add [rax], al; add [rbp-0x47eb8a40], al; adc eax, [rax]; add [rax], al; syscall;
0x000f4cf7: add [rbp-0x47eb8a40], al; adc eax, [rax]; add [rax], al; syscall;
0x000f4cf9: shl byte ptr [rbp+0x14], 0xb8; adc eax, [rax]; add [rax], al; syscall;
0x000f4cfb: adc al, 0xb8; adc eax, [rax]; add [rax], al; syscall;
0x000f4d25: dec dword ptr [rbx+0x481c2454]; mov esi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x13; syscall;
0x000f4d26: mov edx, [rsp+0x1c]; mov rsi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x13; syscall;
0x000f4d28: and al, 0x1c; mov rsi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x13; syscall;
0x000f4d29: sbb al, 0x48; mov esi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x13; syscall;
0x000f4d2a: mov rsi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x13; syscall;
0x000f4d2b: mov esi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x13; syscall;
0x000f4d2d: and al, 0x10; mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x13; syscall;
0x000f4d2f: mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x13; syscall;
0x000f4d30: mov eax, eax; mov edi, [rsp+8]; mov eax, 0x13; syscall;
0x000f4d32: mov edi, [rsp+8]; mov eax, 0x13; syscall;
0x000f4d34: and al, 8; mov eax, 0x13; syscall;
0x000f4d35: or [rax+0x13], bh; syscall;
0x000f4d36: mov eax, 0x13; syscall;
0x000f4d37: adc eax, [rax]; add [rax], al; syscall;
0x000f4d4e: mov es, [rax]; stc; dec dword ptr [rax-0x75]; and al, 8; add rsp, 0x28; ret;
0x000f4d4f: add cl, bh; dec dword ptr [rax-0x75]; and al, 8; add rsp, 0x28; ret;
0x000f4d50: stc; dec dword ptr [rax-0x75]; and al, 8; add rsp, 0x28; ret;
0x000f4d5f: add [rax-0x75], cl; adc eax, 0xc9109; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000f4d62: adc eax, 0xc9109; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000f4d63: or [rcx-0x2708fff4], edx; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000f4d64: xchg ecx, eax; or al, 0; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000f4d95: add [rax], al; add [rbp-0x47eb8a40], al; adc al, 0; add [rax], al; syscall;
0x000f4d97: add [rbp-0x47eb8a40], al; adc al, 0; add [rax], al; syscall;
0x000f4d99: shl byte ptr [rbp+0x14], 0xb8; adc al, 0; add [rax], al; syscall;
0x000f4d9b: adc al, 0xb8; adc al, 0; add [rax], al; syscall;
0x000f4dc5: dec dword ptr [rbx+0x481c2454]; mov esi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x14; syscall;
0x000f4dc6: mov edx, [rsp+0x1c]; mov rsi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x14; syscall;
0x000f4dc8: and al, 0x1c; mov rsi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x14; syscall;
0x000f4dc9: sbb al, 0x48; mov esi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x14; syscall;
0x000f4dca: mov rsi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x14; syscall;
0x000f4dcb: mov esi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x14; syscall;
0x000f4dcd: and al, 0x10; mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x14; syscall;
0x000f4dcf: mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x14; syscall;
0x000f4dd0: mov eax, eax; mov edi, [rsp+8]; mov eax, 0x14; syscall;
0x000f4dd2: mov edi, [rsp+8]; mov eax, 0x14; syscall;
0x000f4dd4: and al, 8; mov eax, 0x14; syscall;
0x000f4dd5: or [rax+0x14], bh; syscall;
0x000f4dff: add [rax-0x75], cl; adc eax, 0xc9069; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000f4e02: adc eax, 0xc9069; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000f4e03: imul edx, [rax-0x2708fff4], 0x48028964; mov eax, 0xffffffff; ret;
0x000f4e04: nop; or al, 0; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000f4e38: add [rax], al; add [rbp+0x451975c0], al; xor eax, eax; mov eax, 0x127; syscall;
0x000f4e3a: add [rbp+0x451975c0], al; xor eax, eax; mov eax, 0x127; syscall;
0x000f4e3c: shl byte ptr [rbp+0x19], 0x45; xor eax, eax; mov eax, 0x127; syscall;
0x000f4e3f: xor r8d, r8d; mov eax, 0x127; syscall;
0x000f4e40: xor eax, eax; mov eax, 0x127; syscall;
0x000f4e76: sbb [rbx+0x3145243c], cl; rol byte ptr [rcx-0x77], 0xc1; mov edx, [rsp+0x14]; mov rsi, [rsp+8]; mov eax, 0x127; syscall;
0x000f4e7a: xor r8d, r8d; mov r9d, eax; mov edx, [rsp+0x14]; mov rsi, [rsp+8]; mov eax, 0x127; syscall;
0x000f4e7b: xor eax, eax; mov r9d, eax; mov edx, [rsp+0x14]; mov rsi, [rsp+8]; mov eax, 0x127; syscall;
0x000f4e7c: rol byte ptr [rcx-0x77], 0xc1; mov edx, [rsp+0x14]; mov rsi, [rsp+8]; mov eax, 0x127; syscall;
0x000f4e7d: mov r9d, eax; mov edx, [rsp+0x14]; mov rsi, [rsp+8]; mov eax, 0x127; syscall;
0x000f4e7e: mov ecx, eax; mov edx, [rsp+0x14]; mov rsi, [rsp+8]; mov eax, 0x127; syscall;
0x000f4e80: mov edx, [rsp+0x14]; mov rsi, [rsp+8]; mov eax, 0x127; syscall;
0x000f4e81: push rsp; and al, 0x14; mov rsi, [rsp+8]; mov eax, 0x127; syscall;
0x000f4e82: and al, 0x14; mov rsi, [rsp+8]; mov eax, 0x127; syscall;
0x000f4e83: adc al, 0x48; mov esi, [rsp+8]; mov eax, 0x127; syscall;
0x000f4e84: mov rsi, [rsp+8]; mov eax, 0x127; syscall;
0x000f4e85: mov esi, [rsp+8]; mov eax, 0x127; syscall;
0x000f4e87: and al, 8; mov eax, 0x127; syscall;
0x000f4e88: or [rax+0x127], bh; syscall;
0x000f4e89: mov eax, 0x127; syscall;
0x000f4ea0: cmp al, 0xff; clc; dec dword ptr [rax-0x75]; add al, 0x24; add rsp, 0x28; ret;
0x000f4eaf: add [rax-0x75], cl; adc eax, 0xc8fb9; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000f4eb2: adc eax, 0xc8fb9; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000f4eb3: mov ecx, 0xf7000c8f; fsub st, dword ptr [rcx+rcx*4+2]; mov rax, 0xffffffffffffffff; ret;
0x000f4ee8: add [rax], al; add [rbp+0x451975c0], al; xor eax, eax; mov eax, 0x128; syscall;
0x000f4eea: add [rbp+0x451975c0], al; xor eax, eax; mov eax, 0x128; syscall;
0x000f4eec: shl byte ptr [rbp+0x19], 0x45; xor eax, eax; mov eax, 0x128; syscall;
0x000f4eef: xor r8d, r8d; mov eax, 0x128; syscall;
0x000f4ef0: xor eax, eax; mov eax, 0x128; syscall;
0x000f4efe: push qword ptr [rdi+0x5f]; ret;
0x000f4f26: sbb [rbx+0x3145243c], cl; rol byte ptr [rcx-0x77], 0xc1; mov edx, [rsp+0x14]; mov rsi, [rsp+8]; mov eax, 0x128; syscall;
0x000f4f2a: xor r8d, r8d; mov r9d, eax; mov edx, [rsp+0x14]; mov rsi, [rsp+8]; mov eax, 0x128; syscall;
0x000f4f2b: xor eax, eax; mov r9d, eax; mov edx, [rsp+0x14]; mov rsi, [rsp+8]; mov eax, 0x128; syscall;
0x000f4f2c: rol byte ptr [rcx-0x77], 0xc1; mov edx, [rsp+0x14]; mov rsi, [rsp+8]; mov eax, 0x128; syscall;
0x000f4f2d: mov r9d, eax; mov edx, [rsp+0x14]; mov rsi, [rsp+8]; mov eax, 0x128; syscall;
0x000f4f2e: mov ecx, eax; mov edx, [rsp+0x14]; mov rsi, [rsp+8]; mov eax, 0x128; syscall;
0x000f4f30: mov edx, [rsp+0x14]; mov rsi, [rsp+8]; mov eax, 0x128; syscall;
0x000f4f31: push rsp; and al, 0x14; mov rsi, [rsp+8]; mov eax, 0x128; syscall;
0x000f4f32: and al, 0x14; mov rsi, [rsp+8]; mov eax, 0x128; syscall;
0x000f4f33: adc al, 0x48; mov esi, [rsp+8]; mov eax, 0x128; syscall;
0x000f4f34: mov rsi, [rsp+8]; mov eax, 0x128; syscall;
0x000f4f35: mov esi, [rsp+8]; mov eax, 0x128; syscall;
0x000f4f37: and al, 8; mov eax, 0x128; syscall;
0x000f4f38: or [rax+0x128], bh; syscall;
0x000f4f39: mov eax, 0x128; syscall;
0x000f4f3a: sub [rcx], al; add [rax], al; syscall;
0x000f4f5f: add [rax-0x75], cl; adc eax, 0xc8f09; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000f4f62: adc eax, 0xc8f09; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000f4f63: or [rdi-0x2708fff4], ecx; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000f4fb4: test [rdi+0x45000000], edx; mov ecx, eax; mov r10, rcx; xor r8d, r8d; mov eax, 0x147; syscall;
0x000f4fb6: add [rax], al; add [rbp-0x77], al; ror dword ptr [rcx-0x77], 0xca; xor r8d, r8d; mov eax, 0x147; syscall;
0x000f4fb7: add [rax], al; mov r9d, r8d; mov r10, rcx; xor r8d, r8d; mov eax, 0x147; syscall;
0x000f4fb8: add [rbp-0x77], al; ror dword ptr [rcx-0x77], 0xca; xor r8d, r8d; mov eax, 0x147; syscall;
0x000f4fb9: mov r9d, r8d; mov r10, rcx; xor r8d, r8d; mov eax, 0x147; syscall;
0x000f4fba: mov ecx, eax; mov r10, rcx; xor r8d, r8d; mov eax, 0x147; syscall;
0x000f4fbb: ror dword ptr [rcx-0x77], 0xca; xor r8d, r8d; mov eax, 0x147; syscall;
0x000f4fbc: mov r10, rcx; xor r8d, r8d; mov eax, 0x147; syscall;
0x000f4fbd: mov edx, ecx; xor r8d, r8d; mov eax, 0x147; syscall;
0x000f4fbf: xor r8d, r8d; mov eax, 0x147; syscall;
0x000f4fc0: xor eax, eax; mov eax, 0x147; syscall;
0x000f5062: rol byte ptr [rcx-0x77], 0xc7; mov r10, r12; mov edx, r14d; mov edi, ebp; mov eax, 0x147; syscall;
0x000f5063: mov r15d, eax; mov r10, r12; mov edx, r14d; mov edi, ebp; mov eax, 0x147; syscall;
0x000f5064: mov edi, eax; mov r10, r12; mov edx, r14d; mov edi, ebp; mov eax, 0x147; syscall;
0x000f5066: mov r10, r12; mov edx, r14d; mov edi, ebp; mov eax, 0x147; syscall;
0x000f5067: mov edx, esp; mov edx, r14d; mov edi, ebp; mov eax, 0x147; syscall;
0x000f5069: mov edx, r14d; mov edi, ebp; mov eax, 0x147; syscall;
0x000f506a: mov edx, esi; mov edi, ebp; mov eax, 0x147; syscall;
0x000f506c: mov edi, ebp; mov eax, 0x147; syscall;
0x000f506d: out dx, eax; mov eax, 0x147; syscall;
0x000f506e: mov eax, 0x147; syscall;
0x000f5114: test [rdi+0x45000000], edx; mov ecx, eax; mov r10, rcx; xor r8d, r8d; mov eax, 0x148; syscall;
0x000f5116: add [rax], al; add [rbp-0x77], al; ror dword ptr [rcx-0x77], 0xca; xor r8d, r8d; mov eax, 0x148; syscall;
0x000f5117: add [rax], al; mov r9d, r8d; mov r10, rcx; xor r8d, r8d; mov eax, 0x148; syscall;
0x000f5118: add [rbp-0x77], al; ror dword ptr [rcx-0x77], 0xca; xor r8d, r8d; mov eax, 0x148; syscall;
0x000f5119: mov r9d, r8d; mov r10, rcx; xor r8d, r8d; mov eax, 0x148; syscall;
0x000f511a: mov ecx, eax; mov r10, rcx; xor r8d, r8d; mov eax, 0x148; syscall;
0x000f511b: ror dword ptr [rcx-0x77], 0xca; xor r8d, r8d; mov eax, 0x148; syscall;
0x000f511c: mov r10, rcx; xor r8d, r8d; mov eax, 0x148; syscall;
0x000f511d: mov edx, ecx; xor r8d, r8d; mov eax, 0x148; syscall;
0x000f511f: xor r8d, r8d; mov eax, 0x148; syscall;
0x000f5120: xor eax, eax; mov eax, 0x148; syscall;
0x000f51c2: rol byte ptr [rcx-0x77], 0xc7; mov r10, r12; mov edx, r14d; mov edi, ebp; mov eax, 0x148; syscall;
0x000f51c3: mov r15d, eax; mov r10, r12; mov edx, r14d; mov edi, ebp; mov eax, 0x148; syscall;
0x000f51c4: mov edi, eax; mov r10, r12; mov edx, r14d; mov edi, ebp; mov eax, 0x148; syscall;
0x000f51c6: mov r10, r12; mov edx, r14d; mov edi, ebp; mov eax, 0x148; syscall;
0x000f51c7: mov edx, esp; mov edx, r14d; mov edi, ebp; mov eax, 0x148; syscall;
0x000f51c9: mov edx, r14d; mov edi, ebp; mov eax, 0x148; syscall;
0x000f51ca: mov edx, esi; mov edi, ebp; mov eax, 0x148; syscall;
0x000f51cc: mov edi, ebp; mov eax, 0x148; syscall;
0x000f51cd: out dx, eax; mov eax, 0x148; syscall;
0x000f51ce: mov eax, 0x148; syscall;
0x000f522f: jmp qword ptr [rcx+rax*2-0x77];
0x000f526d: sub bh, [rax+0x71]; syscall;
0x000f526e: mov eax, 0x71; syscall;
0x000f52af: adc [rax-0x75], cl; add eax, 0xcc549; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000f52b2: add eax, 0xcc549; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000f530d: sub bh, [rax+0x72]; syscall;
0x000f530e: mov eax, 0x72; syscall;
0x000f5328: add [rax], al; add [rbp+0x56], dh; add rsp, 0x38; ret;
0x000f532a: add [rbp+0x56], dh; add rsp, 0x38; ret;
0x000f532c: push rsi; add rsp, 0x38; ret;
0x000f5348: or [rcx+0x448948f0], cl; and al, 0x10; mov rax, [rip+0xcc549]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000f5349: mov eax, esi; mov [rsp+0x10], rax; mov rax, [rip+0xcc549]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000f534b: mov [rsp+0x10], rax; mov rax, [rip+0xcc549]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000f534c: mov [rsp+0x10], eax; mov rax, [rip+0xcc549]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000f534e: and al, 0x10; mov rax, [rip+0xcc549]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000f534f: adc [rax-0x75], cl; add eax, 0xcc4a9; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000f5350: mov rax, [rip+0xf5640]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000f5351: mov eax, [rip+0xf5640]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000f5352: add eax, 0xcc4a9; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000f5353: test eax, 0x48000cc4; ror eax, 0x11; xor rax, fs:[0x30]; call rax;
0x000f5355: or al, 0; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000f53af: in eax, dx; ret 0xc;
0x000f53b9: mov edx, 0xffffffff; mov edi, 0xffffffff; mov eax, 0x75; syscall;
0x000f53be: mov edi, 0xffffffff; mov eax, 0x75; syscall;
0x000f53c3: mov eax, 0x75; syscall;
0x000f5403: add eax, 0xcc3f8; mov qword ptr [rsp+8], 0xffffffffffffffff; mov qword ptr [rsp+0x18], 0xffffffffffffffff; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000f5489: mov edx, 0xffffffff; mov edi, 0xffffffff; mov eax, 0x77; syscall;
0x000f548e: mov edi, 0xffffffff; mov eax, 0x77; syscall;
0x000f5493: mov eax, 0x77; syscall;
0x000f54ad: add [rax], al; add [rbp+0x79], dh; add rsp, 0x38; ret;
0x000f54af: add [rbp+0x79], dh; add rsp, 0x38; ret;
0x000f54d1: mov rax, [rip+0xcc3f8]; mov qword ptr [rsp+8], 0xffffffffffffffff; mov qword ptr [rsp+0x18], 0xffffffffffffffff; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000f54d2: mov eax, [rip+0xcc3f8]; mov qword ptr [rsp+8], 0xffffffffffffffff; mov qword ptr [rsp+0x18], 0xffffffffffffffff; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000f54d3: add eax, 0xcc328; mov qword ptr [rsp+8], 0xffffffffffffffff; mov qword ptr [rsp+0x18], 0xffffffffffffffff; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000f54d6: or al, 0; mov qword ptr [rsp+8], 0xffffffffffffffff; mov qword ptr [rsp+0x18], 0xffffffffffffffff; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000f54d8: mov qword ptr [rsp+8], 0xffffffffffffffff; mov qword ptr [rsp+0x18], 0xffffffffffffffff; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000f54d9: mov dword ptr [rsp+8], 0xffffffff; mov qword ptr [rsp+0x18], 0xffffffffffffffff; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000f54e1: mov qword ptr [rsp+0x18], 0xffffffffffffffff; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000f54e2: mov dword ptr [rsp+0x18], 0xffffffff; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000f54e9: dec dword ptr [rax-0x3f]; enter 0x6411, 0x48; xor eax, [0x30]; call rax;
0x000f555f: jmp qword ptr [rsi+0x2e];
0x000f5665: add [rcx+rcx*4-0x18], al; pop rbx; pop rbp; pop r12; pop r13; ret;
0x000f5666: mov eax, r13d; pop rbx; pop rbp; pop r12; pop r13; ret;
0x000f56dc: add [rax], eax; xchg ax, ax; mov eax, 0xaa; syscall;
0x000f56dd: add [rsi-0x70], ah; mov eax, 0xaa; syscall;
0x000f56de: xchg ax, ax; mov eax, 0xaa; syscall;
0x000f56df: nop; mov eax, 0xaa; syscall;
0x000f56e0: mov eax, 0xaa; syscall;
0x000f56f2: or eax, 0xc8779; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f56f4: xchg [rax+rax], ecx; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f5778: ret 0x8b49;
0x000f579b: ret 0x4908;
0x000f57a6: ret 0xef72;
0x000f57bb: add [rbp+0x59], dh; add rsp, 0x190; pop rbx; pop rbp; pop r12; ret;
0x000f57bd: pop rcx; add rsp, 0x190; pop rbx; pop rbp; pop r12; ret;
0x000f57be: add rsp, 0x190; pop rbx; pop rbp; pop r12; ret;
0x000f57bf: add esp, 0x190; pop rbx; pop rbp; pop r12; ret;
0x000f57c1: nop; add [rax], eax; add [rbx+0x5d], bl; pop r12; ret;
0x000f57cf: add [rax-0x7adb8afc], ch; shl byte ptr [rcx+rdx*8+0x41], 0xf; mov dh, 0x14; and al, 0x88; adc ebp, [rax-0x76398bfe]; ret 0xf41;
0x000f57d3: and al, 0x85; shl byte ptr [rcx+rdx*8+0x41], 0xf; mov dh, 0x14; and al, 0x88; adc ebp, [rax-0x76398bfe]; ret 0xf41;
0x000f57d5: shl byte ptr [rcx+rdx*8+0x41], 0xf; mov dh, 0x14; and al, 0x88; adc ebp, [rax-0x76398bfe]; ret 0xf41;
0x000f57d7: rol dword ptr [rcx+0xf], 1; mov dh, 0x14; and al, 0x88; adc ebp, [rax-0x76398bfe]; ret 0xf41;
0x000f57da: mov dh, 0x14; and al, 0x88; adc ebp, [rax-0x76398bfe]; ret 0xf41;
0x000f57dc: and al, 0x88; adc ebp, [rax-0x76398bfe]; ret 0xf41;
0x000f57de: adc ebp, [rax-0x76398bfe]; ret 0xf41;
0x000f57e0: add dh, [rsi+rax*8-0x77]; ret 0xf41;
0x000f5818: add al, 0x7e; add [rax], eax; nop [rax]; mov eax, 0xab; syscall;
0x000f581a: add [rax], eax; nop [rax]; mov eax, 0xab; syscall;
0x000f581c: nop [rax]; mov eax, 0xab; syscall;
0x000f581e: add [rax+0xab], dil; syscall;
0x000f581f: add [rax+0xab], bh; syscall;
0x000f5820: mov eax, 0xab; syscall;
0x000f5832: or eax, 0xc8639; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f5833: cmp [rsi-0x2708fff4], eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f5834: xchg [rax+rax], cl; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f585e: adc [rax+0x17], edi; syscall;
0x000f585f: mov eax, 0x17; syscall;
0x000f589b: mov r9d, eax; mov rdx, [rsp+0x18]; mov rsi, [rsp+0x10]; mov eax, 0x17; mov edi, [rsp+0xc]; syscall;
0x000f589c: mov ecx, eax; mov rdx, [rsp+0x18]; mov rsi, [rsp+0x10]; mov eax, 0x17; mov edi, [rsp+0xc]; syscall;
0x000f589d: ror dword ptr [rax-0x75], 0x54; and al, 0x18; mov rsi, [rsp+0x10]; mov eax, 0x17; mov edi, [rsp+0xc]; syscall;
0x000f589e: mov rdx, [rsp+0x18]; mov rsi, [rsp+0x10]; mov eax, 0x17; mov edi, [rsp+0xc]; syscall;
0x000f589f: mov edx, [rsp+0x18]; mov rsi, [rsp+0x10]; mov eax, 0x17; mov edi, [rsp+0xc]; syscall;
0x000f58a0: push rsp; and al, 0x18; mov rsi, [rsp+0x10]; mov eax, 0x17; mov edi, [rsp+0xc]; syscall;
0x000f58a1: and al, 0x18; mov rsi, [rsp+0x10]; mov eax, 0x17; mov edi, [rsp+0xc]; syscall;
0x000f58a3: mov rsi, [rsp+0x10]; mov eax, 0x17; mov edi, [rsp+0xc]; syscall;
0x000f58a4: mov esi, [rsp+0x10]; mov eax, 0x17; mov edi, [rsp+0xc]; syscall;
0x000f58a6: and al, 0x10; mov eax, 0x17; mov edi, [rsp+0xc]; syscall;
0x000f58a7: adc [rax+0x17], bh; mov edi, [rsp+0xc]; syscall;
0x000f58a8: mov eax, 0x17; mov edi, [rsp+0xc]; syscall;
0x000f58ab: add [rax], al; mov edi, [rsp+0xc]; syscall;
0x000f58ad: mov edi, [rsp+0xc]; syscall;
0x000f58af: and al, 0xc; syscall;
0x000f58c1: or al, 0xe8; sbb ebp, esi; clc; dec dword ptr [rbx+0x480c2444]; add esp, 0x38; ret;
0x000f58c3: sbb ebp, esi; clc; dec dword ptr [rbx+0x480c2444]; add esp, 0x38; ret;
0x000f58c4: cmc; clc; dec dword ptr [rbx+0x480c2444]; add esp, 0x38; ret;
0x000f58c5: clc; dec dword ptr [rbx+0x480c2444]; add esp, 0x38; ret;
0x000f58c6: dec dword ptr [rbx+0x480c2444]; add esp, 0x38; ret;
0x000f58c7: mov eax, [rsp+0xc]; add rsp, 0x38; ret;
0x000f58c9: and al, 0xc; add rsp, 0x38; ret;
0x000f58ca: or al, 0x48; add esp, 0x38; ret;
0x000f58ce: cmp bl, al; mov rdx, [rip+0xc8599]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f58d2: adc eax, 0xc8599; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f58d3: cdq; test [rax+rax], ecx; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f58d4: test [rax+rax], ecx; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f594f: xor [rax+0x10e], bh; syscall;
0x000f5950: mov eax, 0x10e; syscall;
0x000f5975: add [rax], al; add rsp, 0x60; pop rbp; ret;
0x000f5977: add rsp, 0x60; pop rbp; ret;
0x000f5978: add esp, 0x60; pop rbp; ret;
0x000f59ac: mov r10, [rsp+0x28]; mov rdx, [rsp+0x20]; mov eax, 0x10e; mov rsi, [rsp+0x18]; mov edi, [rsp+0x14]; syscall;
0x000f59ad: mov edx, [rsp+0x28]; mov rdx, [rsp+0x20]; mov eax, 0x10e; mov rsi, [rsp+0x18]; mov edi, [rsp+0x14]; syscall;
0x000f59af: and al, 0x28; mov rdx, [rsp+0x20]; mov eax, 0x10e; mov rsi, [rsp+0x18]; mov edi, [rsp+0x14]; syscall;
0x000f59b1: mov rdx, [rsp+0x20]; mov eax, 0x10e; mov rsi, [rsp+0x18]; mov edi, [rsp+0x14]; syscall;
0x000f59b2: mov edx, [rsp+0x20]; mov eax, 0x10e; mov rsi, [rsp+0x18]; mov edi, [rsp+0x14]; syscall;
0x000f59b3: push rsp; and al, 0x20; mov eax, 0x10e; mov rsi, [rsp+0x18]; mov edi, [rsp+0x14]; syscall;
0x000f59b4: and al, 0x20; mov eax, 0x10e; mov rsi, [rsp+0x18]; mov edi, [rsp+0x14]; syscall;
0x000f59b5: and [rax+0x10e], bh; mov rsi, [rsp+0x18]; mov edi, [rsp+0x14]; syscall;
0x000f59b6: mov eax, 0x10e; mov rsi, [rsp+0x18]; mov edi, [rsp+0x14]; syscall;
0x000f59b9: add [rax], al; mov rsi, [rsp+0x18]; mov edi, [rsp+0x14]; syscall;
0x000f59bb: mov rsi, [rsp+0x18]; mov edi, [rsp+0x14]; syscall;
0x000f59bc: mov esi, [rsp+0x18]; mov edi, [rsp+0x14]; syscall;
0x000f59be: and al, 0x18; mov edi, [rsp+0x14]; syscall;
0x000f59c0: mov edi, [rsp+0x14]; syscall;
0x000f59c2: and al, 0x14; syscall;
0x000f5a14: or [rcx+rax], bh; nop [rax+rax]; mov eax, 0xa3; syscall;
0x000f5a16: add [rax], eax; nop [rax+rax]; mov eax, 0xa3; syscall;
0x000f5a18: nop [rax+rax]; mov eax, 0xa3; syscall;
0x000f5a1a: test [rax], al; add [rax], al; add [rax], al; mov eax, 0xa3; syscall;
0x000f5a1b: add [rax], al; add [rax], al; add [rax+0xa3], bh; syscall;
0x000f5a1c: add [rax], al; add [rax], al; mov eax, 0xa3; syscall;
0x000f5a1d: add [rax], al; add [rax+0xa3], bh; syscall;
0x000f5a1e: add [rax], al; mov eax, 0xa3; syscall;
0x000f5a1f: add [rax+0xa3], bh; syscall;
0x000f5a20: mov eax, 0xa3; syscall;
0x000f5a32: or eax, 0xc8439; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f5a33: cmp [rsp+rcx+0x64d8f700], eax; mov [rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f5a3b: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0xa1; syscall;
0x000f5a3e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0xa1; syscall;
0x000f5a3f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0xa1; syscall;
0x000f5a41: nop [rax+rax]; nop [rax+rax]; mov eax, 0xa1; syscall;
0x000f5a42: nop [rax+rax]; nop [rax+rax]; mov eax, 0xa1; syscall;
0x000f5a43: nop [rax+rax]; nop [rax+rax]; mov eax, 0xa1; syscall;
0x000f5a45: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0xa1; syscall;
0x000f5a47: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0xa1; syscall;
0x000f5a49: add [rax], al; nop [rax+rax]; mov eax, 0xa1; syscall;
0x000f5a4b: nop [rax+rax]; mov eax, 0xa1; syscall;
0x000f5a4d: add [rax], r8b; mov eax, 0xa1; syscall;
0x000f5a4e: add [rax], al; mov eax, 0xa1; syscall;
0x000f5a4f: add [rax+0xa1], bh; syscall;
0x000f5a50: mov eax, 0xa1; syscall;
0x000f5a62: or eax, 0xc8409; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f5a63: or [rsp+rcx+0x64d8f700], eax; mov [rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f5a64: test [rax+rax], cl; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f5aa9: shl edx, cl; clc; dec dword ptr [rbx+0x410c247c]; mov eax, eax; mov eax, 0x4a; syscall;
0x000f5aab: clc; dec dword ptr [rbx+0x410c247c]; mov eax, eax; mov eax, 0x4a; syscall;
0x000f5aac: dec dword ptr [rbx+0x410c247c]; mov eax, eax; mov eax, 0x4a; syscall;
0x000f5aad: mov edi, [rsp+0xc]; mov r8d, eax; mov eax, 0x4a; syscall;
0x000f5aaf: and al, 0xc; mov r8d, eax; mov eax, 0x4a; syscall;
0x000f5ab0: or al, 0x41; mov eax, eax; mov eax, 0x4a; syscall;
0x000f5ab1: mov r8d, eax; mov eax, 0x4a; syscall;
0x000f5ab2: mov eax, eax; mov eax, 0x4a; syscall;
0x000f5ab4: mov eax, 0x4a; syscall;
0x000f5ac9: or al, 0xe8; adc ebx, esi; clc; dec dword ptr [rbx+0x480c2444]; add esp, 0x18; ret;
0x000f5acb: adc ebx, esi; clc; dec dword ptr [rbx+0x480c2444]; add esp, 0x18; ret;
0x000f5adf: add [rax-0x75], cl; adc eax, 0xc8389; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f5ae2: adc eax, 0xc8389; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f5ae3: mov [rbx-0x2708fff4], eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f5ae4: or dword ptr [rax+rax], 0xfffffff7; fsub st, dword ptr [rcx+rcx*4+2]; mov eax, 0xffffffff; ret;
0x000f5b0a: mov eax, 0x441f0f; add [rax+0xa2], bh; syscall;
0x000f5b0b: nop [rax+rax]; mov eax, 0xa2; syscall;
0x000f5b0d: add [rax], r8b; mov eax, 0xa2; syscall;
0x000f5b0e: add [rax], al; mov eax, 0xa2; syscall;
0x000f5b0f: add [rax+0xa2], bh; syscall;
0x000f5b10: mov eax, 0xa2; syscall;
0x000f5b22: or eax, 0xc8349; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f5b23: or qword ptr [r8+rax], 0xfffffffffffffff7; fsub st, dword ptr [rcx+rcx*4+1]; or rax, 0xffffffffffffffff; ret;
0x000f5b24: or dword ptr [rax+rax], 0xfffffff7; fsub st, dword ptr [rcx+rcx*4+1]; or rax, 0xffffffffffffffff; ret;
0x000f5b58: push qword ptr [rdi+0x45]; ret;
0x000f5b69: adc esi, edx; clc; dec dword ptr [rbx+0x410c247c]; mov eax, eax; mov eax, 0x4b; syscall;
0x000f5b6b: clc; dec dword ptr [rbx+0x410c247c]; mov eax, eax; mov eax, 0x4b; syscall;
0x000f5b6c: dec dword ptr [rbx+0x410c247c]; mov eax, eax; mov eax, 0x4b; syscall;
0x000f5b6d: mov edi, [rsp+0xc]; mov r8d, eax; mov eax, 0x4b; syscall;
0x000f5b6f: and al, 0xc; mov r8d, eax; mov eax, 0x4b; syscall;
0x000f5b70: or al, 0x41; mov eax, eax; mov eax, 0x4b; syscall;
0x000f5b71: mov r8d, eax; mov eax, 0x4b; syscall;
0x000f5b72: mov eax, eax; mov eax, 0x4b; syscall;
0x000f5b74: mov eax, 0x4b; syscall;
0x000f5b8d: clc; dec dword ptr [rbx+0x480c2444]; add esp, 0x18; ret;
0x000f5b8e: dec dword ptr [rbx+0x480c2444]; add esp, 0x18; ret;
0x000f5b8f: mov eax, [rsp+0xc]; add rsp, 0x18; ret;
0x000f5b91: and al, 0xc; add rsp, 0x18; ret;
0x000f5b92: or al, 0x48; add esp, 0x18; ret;
0x000f5b9f: add [rax-0x75], cl; adc eax, 0xc82c9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f5ba2: adc eax, 0xc82c9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f5bca: mov eax, 0x441f0f; add [rax+0x132], bh; syscall;
0x000f5bcb: nop [rax+rax]; mov eax, 0x132; syscall;
0x000f5bcd: add [rax], r8b; mov eax, 0x132; syscall;
0x000f5bce: add [rax], al; mov eax, 0x132; syscall;
0x000f5bcf: add [rax+0x132], bh; syscall;
0x000f5bd0: mov eax, 0x132; syscall;
0x000f5bd1: xor al, [rcx]; add [rax], al; syscall;
0x000f5be2: or eax, 0xc8289; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f5be3: mov [rdx-0x2708fff4], eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f5bfb: nop [rax+rax]; mov edx, edi; mov esi, 0x28121969; mov edi, 0xfee1dead; mov eax, 0xa9; syscall;
0x000f5bfd: add [rax], r8b; mov edx, edi; mov esi, 0x28121969; mov edi, 0xfee1dead; mov eax, 0xa9; syscall;
0x000f5bfe: add [rax], al; mov edx, edi; mov esi, 0x28121969; mov edi, 0xfee1dead; mov eax, 0xa9; syscall;
0x000f5bff: add [rcx+0x1969befa], cl; adc ch, [rax]; mov edi, 0xfee1dead; mov eax, 0xa9; syscall;
0x000f5c00: mov edx, edi; mov esi, 0x28121969; mov edi, 0xfee1dead; mov eax, 0xa9; syscall;
0x000f5c01: cli; mov esi, 0x28121969; mov edi, 0xfee1dead; mov eax, 0xa9; syscall;
0x000f5c02: mov esi, 0x28121969; mov edi, 0xfee1dead; mov eax, 0xa9; syscall;
0x000f5c04: sbb [rdx], edx; sub [rdi-0x11e2153], bh; mov eax, 0xa9; syscall;
0x000f5c05: adc ch, [rax]; mov edi, 0xfee1dead; mov eax, 0xa9; syscall;
0x000f5c06: sub [rdi-0x11e2153], bh; mov eax, 0xa9; syscall;
0x000f5c07: mov edi, 0xfee1dead; mov eax, 0xa9; syscall;
0x000f5c0c: mov eax, 0xa9; syscall;
0x000f5c18: push qword ptr [rdi+5]; ret;
0x000f5c1f: add [rax-0x75], cl; adc eax, 0xc8249; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f5c22: adc eax, 0xc8249; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f5d22: push qword ptr [rbx+rcx-0x18]; out dx, al; cmc; bnd jmp qword ptr [rsi+0xf];
0x000f5d24: or ebp, eax; out dx, al; cmc; bnd jmp qword ptr [rsi+0xf];
0x000f5d26: out dx, al; cmc; bnd jmp qword ptr [rsi+0xf];
0x000f5d27: cmc; bnd jmp qword ptr [rsi+0xf];
0x000f5d8e: call qword ptr [rax+0x24446348];
0x000f5e92: add [rax], al; add [rbp+0x3e], dh; add rsp, 0x18; pop rbx; pop rbp; ret;
0x000f5e94: add [rbp+0x3e], dh; add rsp, 0x18; pop rbx; pop rbp; ret;
0x000f5e96: add rsp, 0x18; pop rbx; pop rbp; ret;
0x000f5ed8: add [rax], eax; nop [rax+rax]; mov rax, [rip+0xc7f89]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x000f5edf: add [rax-0x75], cl; add eax, 0xc7f89; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x000f5ee2: add eax, 0xc7f89; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x000f5ee3: mov [rdi+0xc], edi; add [rdi+rax*8], ah; add [rax], al; add [rax-1], bh; ret;
0x000f5ee5: or al, 0; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x000f5ef2: inc ebx; nop [rax+rax]; xchg ax, ax; mov eax, 0x99; syscall;
0x000f5ef4: nop [rax+rax]; xchg ax, ax; mov eax, 0x99; syscall;
0x000f5ef5: nop [rax+rax]; xchg ax, ax; mov eax, 0x99; syscall;
0x000f5ef6: nop [rax+rax]; xchg ax, ax; mov eax, 0x99; syscall;
0x000f5ef8: test [rax], al; add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0x99; syscall;
0x000f5ef9: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, 0x99; syscall;
0x000f5efa: add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0x99; syscall;
0x000f5efb: add [rax], al; add [rsi-0x70], ah; mov eax, 0x99; syscall;
0x000f5efc: add [rax], al; xchg ax, ax; mov eax, 0x99; syscall;
0x000f5efd: add [rsi-0x70], ah; mov eax, 0x99; syscall;
0x000f5efe: xchg ax, ax; mov eax, 0x99; syscall;
0x000f5eff: nop; mov eax, 0x99; syscall;
0x000f5f00: mov eax, 0x99; syscall;
0x000f5f12: or eax, 0xc7f59; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f5f1b: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0xa7; syscall;
0x000f5f1e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0xa7; syscall;
0x000f5f1f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0xa7; syscall;
0x000f5f21: nop [rax+rax]; nop [rax+rax]; mov eax, 0xa7; syscall;
0x000f5f22: nop [rax+rax]; nop [rax+rax]; mov eax, 0xa7; syscall;
0x000f5f23: nop [rax+rax]; nop [rax+rax]; mov eax, 0xa7; syscall;
0x000f5f25: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0xa7; syscall;
0x000f5f27: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0xa7; syscall;
0x000f5f29: add [rax], al; nop [rax+rax]; mov eax, 0xa7; syscall;
0x000f5f2b: nop [rax+rax]; mov eax, 0xa7; syscall;
0x000f5f2d: add [rax], r8b; mov eax, 0xa7; syscall;
0x000f5f2e: add [rax], al; mov eax, 0xa7; syscall;
0x000f5f2f: add [rax+0xa7], bh; syscall;
0x000f5f30: mov eax, 0xa7; syscall;
0x000f5f42: or eax, 0xc7f29; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f5f43: sub [rdi+0xc], edi; add bh, dh; fsub st, dword ptr [rcx+rcx*4+1]; or rax, 0xffffffffffffffff; ret;
0x000f5f4b: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0xa8; syscall;
0x000f5f4e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0xa8; syscall;
0x000f5f4f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0xa8; syscall;
0x000f5f51: nop [rax+rax]; nop [rax+rax]; mov eax, 0xa8; syscall;
0x000f5f52: nop [rax+rax]; nop [rax+rax]; mov eax, 0xa8; syscall;
0x000f5f53: nop [rax+rax]; nop [rax+rax]; mov eax, 0xa8; syscall;
0x000f5f55: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0xa8; syscall;
0x000f5f57: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0xa8; syscall;
0x000f5f59: add [rax], al; nop [rax+rax]; mov eax, 0xa8; syscall;
0x000f5f5b: nop [rax+rax]; mov eax, 0xa8; syscall;
0x000f5f5d: add [rax], r8b; mov eax, 0xa8; syscall;
0x000f5f5e: add [rax], al; mov eax, 0xa8; syscall;
0x000f5f5f: add [rax+0xa8], bh; syscall;
0x000f5f60: mov eax, 0xa8; syscall;
0x000f5f61: test al, 0; add [rax], al; syscall;
0x000f5f72: or eax, 0xc7ef9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f5f9f: cmp eax, 0x85fff61b; sar byte ptr [rcx+5], 0x41; mov byte ptr [rsp], 0; mov rax, r12; pop r12; ret;
0x000f5fa0: sbb esi, esi; inc dword ptr [rbp+0x410579c0]; mov byte ptr [rsp], 0; mov rax, r12; pop r12; ret;
0x000f5fa2: inc dword ptr [rbp+0x410579c0]; mov byte ptr [rsp], 0; mov rax, r12; pop r12; ret;
0x000f5fa4: sar byte ptr [rcx+5], 0x41; mov byte ptr [rsp], 0; mov rax, r12; pop r12; ret;
0x000f5fa6: add eax, 0x2404c641; add [rcx+rcx*4-0x20], cl; pop r12; ret;
0x000f5fa7: mov byte ptr [r12], 0; mov rax, r12; pop r12; ret;
0x000f5fa8: mov byte ptr [rsp], 0; mov rax, r12; pop r12; ret;
0x000f5fa9: add al, 0x24; add [rcx+rcx*4-0x20], cl; pop r12; ret;
0x000f5faa: and al, 0; mov rax, r12; pop r12; ret;
0x000f5fdf: sbb dh, dh; inc dword ptr [rbp+0xb8c0]; add [rax], al; cmove rax, rbx; pop rbx; ret;
0x000f5fe0: idiv bh; test eax, eax; mov eax, 0; cmove rax, rbx; pop rbx; ret;
0x000f5fe1: inc dword ptr [rbp+0xb8c0]; add [rax], al; cmove rax, rbx; pop rbx; ret;
0x000f5fe2: test eax, eax; mov eax, 0; cmove rax, rbx; pop rbx; ret;
0x000f5fe3: sar byte ptr [rax], 0x48; cmove eax, ebx; pop rbx; ret;
0x000f5fe4: mov eax, 0; cmove rax, rbx; pop rbx; ret;
0x000f5fe5: add [rax], al; add [rax], al; cmove rax, rbx; pop rbx; ret;
0x000f5fe6: add [rax], al; add [rax+0xf], cl; ret;
0x000f5fe7: add [rax], al; cmove rax, rbx; pop rbx; ret;
0x000f5fe8: add [rax+0xf], cl; ret;
0x000f5fe9: cmove rax, rbx; pop rbx; ret;
0x000f5fea: cmove eax, ebx; pop rbx; ret;
0x000f600b: idiv bh; nop [rax]; mov rax, [rip+0xc7e59]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000f600f: add [rax-0x75], cl; add eax, 0xc7e59; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000f6012: add eax, 0xc7e59; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000f6039: idiv bh; nop [rax+rax]; mov rax, [rip+0xc7e29]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000f603f: add [rax-0x75], cl; add eax, 0xc7e29; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000f6042: add eax, 0xc7e29; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000f60bd: add [rax], al; add [rbp+0x15], dh; add rsp, 0x58; ret;
0x000f60bf: add [rbp+0x15], dh; add rsp, 0x58; ret;
0x000f60c1: adc eax, 0x58c48348; ret;
0x000f6147: and eax, 0x19000c7d; rol byte ptr [rbx-0x3f7c0f20], 0x26; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f6167: add eax, 0x19000c7d; rol byte ptr [rbx-0x3f7c0f20], 0x26; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f61c2: lea rax, [rsp+0x30]; mov esi, [rax+8]; cmovae r10, rcx; mov [rsp+0x20], rax; mov eax, 0x65; syscall;
0x000f61c3: lea eax, [rsp+0x30]; mov esi, [rax+8]; cmovae r10, rcx; mov [rsp+0x20], rax; mov eax, 0x65; syscall;
0x000f61c5: and al, 0x30; mov esi, [rax+8]; cmovae r10, rcx; mov [rsp+0x20], rax; mov eax, 0x65; syscall;
0x000f61c6: xor [rbx+0xf4c0870], cl; ror dword ptr [r8-0x77], 1; and al, 0x20; mov eax, 0x65; syscall;
0x000f61c7: mov esi, [rax+8]; cmovae r10, rcx; mov [rsp+0x20], rax; mov eax, 0x65; syscall;
0x000f61c9: or [rdi+rcx+0x43], cl; ror dword ptr [rax-0x77], 1; and al, 0x20; mov eax, 0x65; syscall;
0x000f61ca: cmovae r10, rcx; mov [rsp+0x20], rax; mov eax, 0x65; syscall;
0x000f61cb: cmovae edx, ecx; mov [rsp+0x20], rax; mov eax, 0x65; syscall;
0x000f61cc: ror dword ptr [r8-0x77], 1; and al, 0x20; mov eax, 0x65; syscall;
0x000f61cd: ror dword ptr [rax-0x77], 1; and al, 0x20; mov eax, 0x65; syscall;
0x000f61ce: mov [rsp+0x20], rax; mov eax, 0x65; syscall;
0x000f61cf: mov [rsp+0x20], eax; mov eax, 0x65; syscall;
0x000f61d1: and al, 0x20; mov eax, 0x65; syscall;
0x000f61d2: and [rax+0x65], bh; syscall;
0x000f61d3: mov eax, 0x65; syscall;
0x000f61f8: add [rax], al; add [rbp+0x38], dh; add rsp, 0x68; ret;
0x000f61fa: add [rbp+0x38], dh; add rsp, 0x68; ret;
0x000f6295: mov [rbx+0x60], rax; mov rax, r12; pop rbx; pop rbp; pop r12; ret;
0x000f6296: mov [rbx+0x60], eax; mov rax, r12; pop rbx; pop rbp; pop r12; ret;
0x000f6317: add [rax-0x7b], cl; ror byte ptr [rax-0x73], 5; xor [rdi+9], dl; add [rax+0xf], cl; ret 0x62e9;
0x000f631a: ror byte ptr [rax-0x73], 5; xor [rdi+9], dl; add [rax+0xf], cl; ret 0x62e9;
0x000f631e: xor [rdi+9], dl; add [rax+0xf], cl; ret 0x62e9;
0x000f6321: add [rax+0xf], cl; ret 0x62e9;
0x000f6325: ret 0x62e9;
0x000f634e: xor [rbp+rcx*4+0x25], ecx; stosb [rdi]; ret;
0x000f6352: stosb [rdi]; ret;
0x000f6355: add [rbp+0x480e75db], al; add esp, 8; mov rax, r12; pop rbx; pop r12; ret;
0x000f639e: add [rbp+rcx*4+0x25], cl; pop rdx; ret;
0x000f639f: lea r12, [rip+0xcc35a]; add rsp, 8; mov rax, r12; pop rbx; pop r12; ret;
0x000f63a0: lea esp, [rip+0xcc35a]; add rsp, 8; mov rax, r12; pop rbx; pop r12; ret;
0x000f63a1: and eax, 0xcc35a; add rsp, 8; mov rax, r12; pop rbx; pop r12; ret;
0x000f63a4: or al, 0; add rsp, 8; mov rax, r12; pop rbx; pop r12; ret;
0x000f6448: add eax, 0x85480000; shl byte ptr [rax+rbx+0x48], 0x89; add eax, 0xcc2a9; mov eax, 1; add rsp, 8; ret;
0x000f644a: add [rax-0x7b], cl; shl byte ptr [rax+rbx+0x48], 0x89; add eax, 0xcc2a9; mov eax, 1; add rsp, 8; ret;
0x000f644d: shl byte ptr [rax+rbx+0x48], 0x89; add eax, 0xcc2a9; mov eax, 1; add rsp, 8; ret;
0x000f644f: sbb [rax-0x77], cl; add eax, 0xcc2a9; mov eax, 1; add rsp, 8; ret;
0x000f6450: mov [rip+0xcc2a9], rax; mov eax, 1; add rsp, 8; ret;
0x000f6451: mov [rip+0xcc2a9], eax; mov eax, 1; add rsp, 8; ret;
0x000f6452: add eax, 0xcc2a9; mov eax, 1; add rsp, 8; ret;
0x000f6453: test eax, 0xb8000cc2; add [rax], eax; add [rax], al; add rsp, 8; ret;
0x000f6455: or al, 0; mov eax, 1; add rsp, 8; ret;
0x000f6456: add [rax+1], bh; add rsp, 8; ret;
0x000f64a3: nop [rax+rax]; xor eax, eax; pop rbp; ret;
0x000f64a5: add [rax], r8b; xor eax, eax; pop rbp; ret;
0x000f64a6: add [rax], al; xor eax, eax; pop rbp; ret;
0x000f64f3: add [rax-0x7b], cl; shl byte ptr [rbp-0x29], 0x5b; xor eax, eax; pop rbp; pop r12; ret;
0x000f64f6: shl byte ptr [rbp-0x29], 0x5b; xor eax, eax; pop rbp; pop r12; ret;
0x000f64f8: xlat [rbx]; pop rbx; xor eax, eax; pop rbp; pop r12; ret;
0x000f6554: add [rax-0x7b], cl; shl byte ptr [rbp-0x2a], 0x5b; xor eax, eax; pop rbp; pop r12; ret;
0x000f6557: shl byte ptr [rbp-0x2a], 0x5b; xor eax, eax; pop rbp; pop r12; ret;
0x000f6593: add [rax], al; mov qword ptr [rip+0xcc160], 0; add rsp, 8; ret;
0x000f6594: add [rax-0x39], cl; add eax, 0xcc160; add [rax], al; add [rax], al; add rsp, 8; ret;
0x000f6595: mov qword ptr [rip+0xcc160], 0; add rsp, 8; ret;
0x000f6596: mov dword ptr [rip+0xcc160], 0; add rsp, 8; ret;
0x000f6597: add eax, 0xcc160; add [rax], al; add [rax], al; add rsp, 8; ret;
0x000f65a3: or bl, al; nop [rax]; ret;
0x000f65c2: adc [rax], al; add cl, ch; in eax, dx; bnd jmp qword ptr [rsi+0xf];
0x000f65c4: add cl, ch; in eax, dx; bnd jmp qword ptr [rsi+0xf];
0x000f65c6: in eax, dx; bnd jmp qword ptr [rsi+0xf];
0x000f65c7: in eax, dx; bnd jmp qword ptr [rsi+0xf];
0x000f65c8: bnd jmp qword ptr [rsi+0xf];
0x000f661c: xor eax, eax; pop rbp; ret;
0x000f6641: or [rax-0x7d], cl; ret 0x8001;
0x000f6644: ret 0x8001;
0x000f665d: add rsi, rax; call far fword ptr [rax+r8*4+0x39];
0x000f665e: add esi, eax; call far fword ptr [rax+r8*4+0x39];
0x000f6660: call far fword ptr [rax+r8*4+0x39];
0x000f6661: call far fword ptr [rax+rax*4+0x39];
0x000f6665: add [rax-0x73], cl; add [r13-0x2d], esi; mov rax, r8; ret;
0x000f6668: add [r13-0x2d], esi; mov rax, r8; ret;
0x000f6669: add [rbp-0x2d], esi; mov rax, r8; ret;
0x000f666b: ror dword ptr [rcx+rcx*4-0x40], cl; ret;
0x000f66b5: inc esi; call far fword ptr [rax+r9*2-0x73];
0x000f66b7: call far fword ptr [rax+r9*2-0x73];
0x000f66b8: call far fword ptr [rax+rcx*2-0x73];
0x000f66d1: inc esi; jmp qword ptr [rax];
0x000f66de: call qword ptr [rax+0x9ff42c6];
0x000f686f: dec dword ptr [rax+1]; ret;
0x000f69c0: add [rbp+0xa], dh; lea rsp, [rbp-0x10]; pop r12; pop r13; pop rbp; ret;
0x000f69c3: lea rsp, [rbp-0x10]; pop r12; pop r13; pop rbp; ret;
0x000f69c4: lea esp, [rbp-0x10]; pop r12; pop r13; pop rbp; ret;
0x000f69e8: or al, ch; and bl, al; idiv edi; mov eax, 1; add rsp, 8; ret;
0x000f69ea: and bl, al; idiv edi; mov eax, 1; add rsp, 8; ret;
0x000f69ec: idiv edi; mov eax, 1; add rsp, 8; ret;
0x000f69ee: mov eax, 1; add rsp, 8; ret;
0x000f69ef: add [rax], eax; add [rax], al; add rsp, 8; ret;
0x000f69f6: or bl, al; nop [rax+rax]; mov eax, 1; ret;
0x000f69f8: nop [rax+rax]; mov eax, 1; ret;
0x000f69fa: test [rax], al; add [rax], al; add [rax], al; mov eax, 1; ret;
0x000f69fb: add [rax], al; add [rax], al; add [rax+1], bh; ret;
0x000f6a90: and [rcx+0xf], al; xchg esp, eax; ret 0x5c3c;
0x000f6a93: xchg esp, eax; ret 0x5c3c;
0x000f6a94: ret 0x5c3c;
0x000f6b3e: and [rdi], cl; mov dh, 0x42; add [rax-0x7d], ecx; ret 0x8401;
0x000f6cbe: and [rdi], ecx; mov dh, 0x42; add [rax-0x7d], ecx; ret 0x8401;
0x000f6d70: mov r12d, 0xe8c03150; mov dh, 0xfe; cmc; call far fword ptr [rdx+0x59];
0x000f6d71: mov esp, 0xe8c03150; mov dh, 0xfe; cmc; call far fword ptr [rdx+0x59];
0x000f6d76: mov dh, 0xfe; cmc; call far fword ptr [rdx+0x59];
0x000f6d78: cmc; call far fword ptr [rdx+0x59];
0x000f6e2e: call qword ptr [rax+0x305c00c7];
0x000f6e3e: call qword ptr [rax+0x5c5cbe];
0x000f6f12: jmp far fword ptr [rsp+rsi*2];
0x000f6f56: mov rax, rdi; pop rbx; pop rbp; pop r12; pop r13; ret;
0x000f6f57: mov eax, edi; pop rbx; pop rbp; pop r12; pop r13; ret;
0x000f6f58: clc; pop rbx; pop rbp; pop r12; pop r13; ret;
0x000f6fe7: nop [rax+rax]; mov eax, 0xeb; syscall;
0x000f6fe8: nop [rax+rax]; mov eax, 0xeb; syscall;
0x000f6fea: test [rax], al; add [rax], al; add [rax], al; mov eax, 0xeb; syscall;
0x000f6feb: add [rax], al; add [rax], al; add [rax+0xeb], bh; syscall;
0x000f6fec: add [rax], al; add [rax], al; mov eax, 0xeb; syscall;
0x000f6fed: add [rax], al; add [rax+0xeb], bh; syscall;
0x000f6fee: add [rax], al; mov eax, 0xeb; syscall;
0x000f6fef: add [rax+0xeb], bh; syscall;
0x000f6ff0: mov eax, 0xeb; syscall;
0x000f7002: adc eax, 0xc6e69; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f7003: imul ebp, [rsi+0xc], 0x64d8f700; mov [rdx], eax; mov eax, 0xffffffff; ret;
0x000f7004: outsb dx, [rsi]; or al, 0; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f7084: mov [rsp+0x10], rax; mov rsi, rdi; mov r10d, 0x100; mov edi, 0xffffff9c; mov eax, 0x118; syscall;
0x000f7085: mov [rsp+0x10], eax; mov rsi, rdi; mov r10d, 0x100; mov edi, 0xffffff9c; mov eax, 0x118; syscall;
0x000f7087: and al, 0x10; mov rsi, rdi; mov r10d, 0x100; mov edi, 0xffffff9c; mov eax, 0x118; syscall;
0x000f7089: mov rsi, rdi; mov r10d, 0x100; mov edi, 0xffffff9c; mov eax, 0x118; syscall;
0x000f708a: mov esi, edi; mov r10d, 0x100; mov edi, 0xffffff9c; mov eax, 0x118; syscall;
0x000f708b: inc byte ptr [rcx-0x46]; add [rcx], al; add [rax], al; mov edi, 0xffffff9c; mov eax, 0x118; syscall;
0x000f708c: mov r10d, 0x100; mov edi, 0xffffff9c; mov eax, 0x118; syscall;
0x000f708d: mov edx, 0x100; mov edi, 0xffffff9c; mov eax, 0x118; syscall;
0x000f708e: add [rcx], al; add [rax], al; mov edi, 0xffffff9c; mov eax, 0x118; syscall;
0x000f708f: add [rax], eax; add [rdi-0x64], bh; mov eax, 0x118; syscall;
0x000f7090: add [rax], al; mov edi, 0xffffff9c; mov eax, 0x118; syscall;
0x000f7091: add [rdi-0x64], bh; mov eax, 0x118; syscall;
0x000f7092: mov edi, 0xffffff9c; mov eax, 0x118; syscall;
0x000f70b1: add [rax], al; add [rbp+0x3f], dh; add rsp, 0x38; ret;
0x000f70b3: add [rbp+0x3f], dh; add rsp, 0x38; ret;
0x000f7159: mov rdx, rsp; mov [rsp+0x10], rax; xor r10d, r10d; xor esi, esi; mov eax, 0x118; syscall;
0x000f715a: mov edx, esp; mov [rsp+0x10], rax; xor r10d, r10d; xor esi, esi; mov eax, 0x118; syscall;
0x000f715c: mov [rsp+0x10], rax; xor r10d, r10d; xor esi, esi; mov eax, 0x118; syscall;
0x000f715d: mov [rsp+0x10], eax; xor r10d, r10d; xor esi, esi; mov eax, 0x118; syscall;
0x000f715f: and al, 0x10; xor r10d, r10d; xor esi, esi; mov eax, 0x118; syscall;
0x000f7160: adc [rbp+0x31], al; shl byte ptr [rcx], cl; idiv byte ptr [rax+0x118]; syscall;
0x000f7161: xor r10d, r10d; xor esi, esi; mov eax, 0x118; syscall;
0x000f7162: xor edx, edx; xor esi, esi; mov eax, 0x118; syscall;
0x000f7163: shl byte ptr [rcx], cl; idiv byte ptr [rax+0x118]; syscall;
0x000f7164: xor esi, esi; mov eax, 0x118; syscall;
0x000f7165: idiv byte ptr [rax+0x118]; syscall;
0x000f7166: mov eax, 0x118; syscall;
0x000f7167: sbb [rcx], al; add [rax], al; syscall;
0x000f7180: add [rax], al; add [rbp+0x40], dh; add rsp, 0x38; ret;
0x000f7182: add [rbp+0x40], dh; add rsp, 0x38; ret;
0x000f71d4: sub edi, [rax+0x105]; syscall;
0x000f71d5: mov eax, 0x105; syscall;
0x000f71e1: push qword ptr [rdi+4]; ret;
0x000f71e7: add [rax-0x75], cl; adc eax, 0xc6c81; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f71ea: adc eax, 0xc6c81; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f71eb: sub dword ptr [rsp+rcx], 0x8964d8f7; add bh, [rax-1]; ret;
0x000f7208: nop [rax+rax]; mov eax, 0x4c; syscall;
0x000f720a: test [rax], al; add [rax], al; add [rax], al; mov eax, 0x4c; syscall;
0x000f720b: add [rax], al; add [rax], al; add [rax+0x4c], bh; syscall;
0x000f720c: add [rax], al; add [rax], al; mov eax, 0x4c; syscall;
0x000f720d: add [rax], al; add [rax+0x4c], bh; syscall;
0x000f720e: add [rax], al; mov eax, 0x4c; syscall;
0x000f720f: add [rax+0x4c], bh; syscall;
0x000f7210: mov eax, 0x4c; syscall;
0x000f7222: adc eax, 0xc6c49; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f7230: inc ebx; nop [rax+rax]; nop [rax]; mov eax, 0x4d; syscall;
0x000f7232: nop [rax+rax]; nop [rax]; mov eax, 0x4d; syscall;
0x000f7233: nop [rax+rax]; nop [rax]; mov eax, 0x4d; syscall;
0x000f7234: nop [rax+rax]; nop [rax]; mov eax, 0x4d; syscall;
0x000f7236: test [rax], al; add [rax], al; add [rax], al; nop [rax]; mov eax, 0x4d; syscall;
0x000f7238: add [rax], al; add [rax], al; nop [rax]; mov eax, 0x4d; syscall;
0x000f723a: add [rax], al; nop [rax]; mov eax, 0x4d; syscall;
0x000f723c: nop [rax]; mov eax, 0x4d; syscall;
0x000f723e: add [rax+0x4d], dil; syscall;
0x000f723f: add [rax+0x4d], bh; syscall;
0x000f7240: mov eax, 0x4d; syscall;
0x000f7252: adc eax, 0xc6c19; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f7253: sbb [rsp+rcx], ebp; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f7254: insb [rdi], dx; or al, 0; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f7277: cmc; imul ecx, [rax+rax], 0x19; rol byte ptr [rbx-0x3f7c0f20], 0x26; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f7278: imul ecx, [rax+rax], 0x19; rol byte ptr [rbx-0x3f7c0f20], 0x26; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f727a: add [rcx], bl; rol byte ptr [rbx-0x3f7c0f20], 0x26; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f727b: sbb eax, eax; and eax, 0xfffffff0; add eax, 0x26; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f727c: rol byte ptr [rbx-0x3f7c0f20], 0x26; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f727d: and eax, 0xfffffff0; add eax, 0x26; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f7280: add eax, 0x26; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f7281: shl byte ptr [rsi], 0x64; mov [rdx], eax; mov eax, 0xffffffff; ret;
0x000f728f: add cl, al; call far fword ptr [rdi];
0x000f7293: mov rax, [rip+0xc6bd6]; and edi, 0xfffffff0; add edi, 0x26; mov fs:[rax], edi; mov eax, 0xffffffff; ret;
0x000f7294: mov eax, [rip+0xc6bd6]; and edi, 0xfffffff0; add edi, 0x26; mov fs:[rax], edi; mov eax, 0xffffffff; ret;
0x000f7295: add eax, 0xc6bd6; and edi, 0xfffffff0; add edi, 0x26; mov fs:[rax], edi; mov eax, 0xffffffff; ret;
0x000f7297: imul ecx, [rax+rax], 0xffffff83; out 0xf0, eax; add edi, 0x26; mov fs:[rax], edi; mov eax, 0xffffffff; ret;
0x000f7298: or al, 0; and edi, 0xfffffff0; add edi, 0x26; mov fs:[rax], edi; mov eax, 0xffffffff; ret;
0x000f7299: add [rbx-0x387c0f19], al; mov fs:[rax], edi; mov eax, 0xffffffff; ret;
0x000f729a: and edi, 0xfffffff0; add edi, 0x26; mov fs:[rax], edi; mov eax, 0xffffffff; ret;
0x000f729b: out 0xf0, eax; add edi, 0x26; mov fs:[rax], edi; mov eax, 0xffffffff; ret;
0x000f729d: add edi, 0x26; mov fs:[rax], edi; mov eax, 0xffffffff; ret;
0x000f72a0: mov fs:[rax], edi; mov eax, 0xffffffff; ret;
0x000f72a1: mov [rax], edi; mov eax, 0xffffffff; ret;
0x000f72a2: cmp [rax-1], bh; ret;
0x000f72bf: add al, 0x48; mov [rax+8], edi; mov [rdi], rax; mov [rdi+8], rsi; ret;
0x000f72c0: mov [rax+8], rdi; mov [rdi], rax; mov [rdi+8], rsi; ret;
0x000f72c1: mov [rax+8], edi; mov [rdi], rax; mov [rdi+8], rsi; ret;
0x000f72c4: mov [rdi], rax; mov [rdi+8], rsi; ret;
0x000f72c5: mov [rdi], eax; mov [rdi+8], rsi; ret;
0x000f72c7: mov [rdi+8], rsi; ret;
0x000f72c8: mov [rdi+8], esi; ret;
0x000f72ca: or bl, al; nop [rax]; mov qword ptr [rdi], 0; mov qword ptr [rdi+8], 0; ret;
0x000f72cc: nop [rax]; mov qword ptr [rdi], 0; mov qword ptr [rdi+8], 0; ret;
0x000f72d0: mov qword ptr [rdi], 0; mov qword ptr [rdi+8], 0; ret;
0x000f72d1: mov dword ptr [rdi], 0; mov qword ptr [rdi+8], 0; ret;
0x000f72d3: add [rax], al; add [rax], al; mov qword ptr [rdi+8], 0; ret;
0x000f72d5: add [rax], al; mov qword ptr [rdi+8], 0; ret;
0x000f72d7: mov qword ptr [rdi+8], 0; ret;
0x000f72d8: mov dword ptr [rdi+8], 0; ret;
0x000f738a: nop [rax+rax]; mov rsi, rdx; mov r8, rdi; mov byte ptr [rsi-1], 0; mov rax, r8; ret;
0x000f738b: nop [rax+rax]; mov rsi, rdx; mov r8, rdi; mov byte ptr [rsi-1], 0; mov rax, r8; ret;
0x000f738d: add [rax], r8b; mov rsi, rdx; mov r8, rdi; mov byte ptr [rsi-1], 0; mov rax, r8; ret;
0x000f738e: add [rax], al; mov rsi, rdx; mov r8, rdi; mov byte ptr [rsi-1], 0; mov rax, r8; ret;
0x000f7390: mov rsi, rdx; mov r8, rdi; mov byte ptr [rsi-1], 0; mov rax, r8; ret;
0x000f7391: mov esi, edx; mov r8, rdi; mov byte ptr [rsi-1], 0; mov rax, r8; ret;
0x000f7393: mov r8, rdi; mov byte ptr [rsi-1], 0; mov rax, r8; ret;
0x000f7394: mov eax, edi; mov byte ptr [rsi-1], 0; mov rax, r8; ret;
0x000f7395: clc; mov byte ptr [rsi-1], 0; mov rax, r8; ret;
0x000f73e9: push rax; test dword ptr [rax-0xf89fe06], 0xec74203c; mov byte ptr [rsi-1], 0; mov rax, r8; ret;
0x000f73ea: test dword ptr [rax-0xf89fe06], 0xec74203c; mov byte ptr [rsi-1], 0; mov rax, r8; ret;
0x000f73f1: and [rsp+rbp*8-0x3a], dh; inc dword ptr [rax]; mov rax, r8; ret;
0x000f73f3: in al, dx; mov byte ptr [rsi-1], 0; mov rax, r8; ret;
0x000f73f4: mov byte ptr [rsi-1], 0; mov rax, r8; ret;
0x000f73f6: inc dword ptr [rax]; mov rax, r8; ret;
0x000f7400: mov r8, rdi; mov byte ptr [rdi], 0; mov byte ptr [rip+0xcb423], 0x23; mov rax, r8; mov byte ptr [rsi-1], 0; ret;
0x000f7401: mov eax, edi; mov byte ptr [rdi], 0; mov byte ptr [rip+0xcb423], 0x23; mov rax, r8; mov byte ptr [rsi-1], 0; ret;
0x000f7402: clc; mov byte ptr [rdi], 0; mov byte ptr [rip+0xcb423], 0x23; mov rax, r8; mov byte ptr [rsi-1], 0; ret;
0x000f7403: mov byte ptr [rdi], 0; mov byte ptr [rip+0xcb423], 0x23; mov rax, r8; mov byte ptr [rsi-1], 0; ret;
0x000f7405: add dh, al; add eax, 0xcb423; and ecx, [rcx+rcx*4-0x40]; mov byte ptr [rsi-1], 0; ret;
0x000f7406: mov byte ptr [rip+0xcb423], 0x23; mov rax, r8; mov byte ptr [rsi-1], 0; ret;
0x000f7407: add eax, 0xcb423; and ecx, [rcx+rcx*4-0x40]; mov byte ptr [rsi-1], 0; ret;
0x000f7408: and esi, [rsp+rcx-0x76b3dd00]; rol dh, 0x46; inc dword ptr [rax]; ret;
0x000f7409: mov ah, 0xc; add [rbx], ah; mov rax, r8; mov byte ptr [rsi-1], 0; ret;
0x000f740a: or al, 0; and ecx, [rcx+rcx*4-0x40]; mov byte ptr [rsi-1], 0; ret;
0x000f740b: add [rbx], ah; mov rax, r8; mov byte ptr [rsi-1], 0; ret;
0x000f740c: and ecx, [rcx+rcx*4-0x40]; mov byte ptr [rsi-1], 0; ret;
0x000f740d: mov rax, r8; mov byte ptr [rsi-1], 0; ret;
0x000f740e: mov eax, eax; mov byte ptr [rsi-1], 0; ret;
0x000f740f: rol dh, 0x46; inc dword ptr [rax]; ret;
0x000f7410: mov byte ptr [rsi-1], 0; ret;
0x000f7442: ret 0x64be;
0x000f7554: fcomi st, st(2); dec dword ptr [rax-0x77]; ret 0x8d48;
0x000f770e: call qword ptr [rax+0x103d8348];
0x000f771e: call qword ptr [rax+0x8ec8348];
0x000f7752: nop [rax+rax]; xor eax, eax; add rsp, 8; ret;
0x000f7753: nop [rax+rax]; xor eax, eax; add rsp, 8; ret;
0x000f7755: add [rax], r8b; xor eax, eax; add rsp, 8; ret;
0x000f7756: add [rax], al; xor eax, eax; add rsp, 8; ret;
0x000f7758: xor eax, eax; add rsp, 8; ret;
0x000f7774: inc dword ptr [rcx-0x48]; add [rax], eax; add [rax], al; mov eax, r8d; add rsp, 8; ret;
0x000f7775: mov r8d, 1; mov eax, r8d; add rsp, 8; ret;
0x000f7776: mov eax, 1; mov eax, r8d; add rsp, 8; ret;
0x000f7777: add [rax], eax; add [rax], al; mov eax, r8d; add rsp, 8; ret;
0x000f7778: add [rax], al; add [rcx+rcx*4-0x40], al; add rsp, 8; ret;
0x000f7779: add [rax], al; mov eax, r8d; add rsp, 8; ret;
0x000f777a: add [rcx+rcx*4-0x40], al; add rsp, 8; ret;
0x000f77aa: mov r8d, 1; or dword ptr [rax], 0x8000; add rsp, 8; mov eax, r8d; ret;
0x000f77ab: mov eax, 1; or dword ptr [rax], 0x8000; add rsp, 8; mov eax, r8d; ret;
0x000f77ac: add [rax], eax; add [rax], al; or dword ptr [rax], 0x8000; add rsp, 8; mov eax, r8d; ret;
0x000f77ae: add [rax], al; or dword ptr [rax], 0x8000; add rsp, 8; mov eax, r8d; ret;
0x000f77b0: or dword ptr [rax], 0x8000; add rsp, 8; mov eax, r8d; ret;
0x000f77b1: or [rax], al; add byte ptr [rax], 0; add rsp, 8; mov eax, r8d; ret;
0x000f77b3: add byte ptr [rax], 0; add rsp, 8; mov eax, r8d; ret;
0x000f77b4: add [rax], al; add rsp, 8; mov eax, r8d; ret;
0x000f7836: add [rax-0x7b], cl; push qword ptr [rax+rdx-0x18]; iretd;
0x000f7839: push qword ptr [rax+rdx-0x18]; iretd;
0x000f783b: adc al, ch; iretd;
0x000f7841: mov qword ptr [rip+0xcafdc], 0; mov rax, r12; pop rbx; pop rbp; pop r12; ret;
0x000f7842: mov dword ptr [rip+0xcafdc], 0; mov rax, r12; pop rbx; pop rbp; pop r12; ret;
0x000f7866: add [rax-0x7b], cl; push qword ptr [rbp+0xc]; mov eax, 1; ret;
0x000f7869: push qword ptr [rbp+0xc]; mov eax, 1; ret;
0x000f7881: mov qword ptr [rip+0xcaf9c], 0; cmp eax, 0xffffffff; setne al; add rsp, 8; movzx eax, al; ret;
0x000f7882: mov dword ptr [rip+0xcaf9c], 0; cmp eax, 0xffffffff; setne al; add rsp, 8; movzx eax, al; ret;
0x000f7889: add [rax], al; add [rbx-0x6af00008], al; ror byte ptr [rax-0x7d], 0xc4; or [rdi], cl; mov dh, 0xc0; ret;
0x000f788a: add [rax], al; cmp eax, 0xffffffff; setne al; add rsp, 8; movzx eax, al; ret;
0x000f788b: add [rbx-0x6af00008], al; ror byte ptr [rax-0x7d], 0xc4; or [rdi], cl; mov dh, 0xc0; ret;
0x000f788c: cmp eax, 0xffffffff; setne al; add rsp, 8; movzx eax, al; ret;
0x000f788e: dec dword ptr [rdi]; xchg ebp, eax; ror byte ptr [rax-0x7d], 0xc4; or [rdi], cl; mov dh, 0xc0; ret;
0x000f7921: push 0xffffffffffffffff; inc dword ptr [rbx-0x7bf00008]; ret;
0x000f7923: inc dword ptr [rbx-0x7bf00008]; ret;
0x000f7935: call far fword ptr [rdi+0x4c];
0x000f79aa: ret 0xd629;
0x000f7a32: add rsp, 0xa8; pop rbx; pop rbp; pop r12; pop r13; ret;
0x000f7a33: add esp, 0xa8; pop rbx; pop rbp; pop r12; pop r13; ret;
0x000f7a7a: cli; and ecx, [rdi]; xchg ebp, eax; ret 0x8440;
0x000f7a7b: and ecx, [rdi]; xchg ebp, eax; ret 0x8440;
0x000f7a7d: xchg ebp, eax; ret 0x8440;
0x000f7a91: and ecx, [rdi]; xchg ebp, eax; ret 0xc084;
0x000f7a93: xchg ebp, eax; ret 0xc084;
0x000f7a9b: ret 0x1374;
0x000f7b0e: add [rbp-0x7b], cl; shl byte ptr [rbx+rcx+0x48], 0x83; ror byte ptr [rax], 0x48; mov [rip+0xcad31], eax; mov rax, r8; ret;
0x000f7b11: shl byte ptr [rbx+rcx+0x48], 0x83; ror byte ptr [rax], 0x48; mov [rip+0xcad31], eax; mov rax, r8; ret;
0x000f7b13: or ecx, [rax-0x7d]; ror byte ptr [rax], 0x48; mov [rip+0xcad31], eax; mov rax, r8; ret;
0x000f7b14: add rax, 8; mov [rip+0xcad31], rax; mov rax, r8; ret;
0x000f7b15: add eax, 8; mov [rip+0xcad31], rax; mov rax, r8; ret;
0x000f7b16: ror byte ptr [rax], 0x48; mov [rip+0xcad31], eax; mov rax, r8; ret;
0x000f7b17: or [rax-0x77], cl; add eax, 0xcad31; mov rax, r8; ret;
0x000f7b18: mov [rip+0xcad31], rax; mov rax, r8; ret;
0x000f7b19: mov [rip+0xcad31], eax; mov rax, r8; ret;
0x000f7b1a: add eax, 0xcad31; mov rax, r8; ret;
0x000f7b1c: lodsd [rsi]; or al, 0; mov rax, r8; ret;
0x000f7b1d: or al, 0; mov rax, r8; ret;
0x000f7b3d: shl byte ptr [rbx+rcx+0x48], 0x83; ror byte ptr [rax], 0x48; mov [rip+0xcad05], eax; mov rax, r8; add rsp, 8; ret;
0x000f7b3f: or ecx, [rax-0x7d]; ror byte ptr [rax], 0x48; mov [rip+0xcad05], eax; mov rax, r8; add rsp, 8; ret;
0x000f7b40: add rax, 8; mov [rip+0xcad05], rax; mov rax, r8; add rsp, 8; ret;
0x000f7b41: add eax, 8; mov [rip+0xcad05], rax; mov rax, r8; add rsp, 8; ret;
0x000f7b42: ror byte ptr [rax], 0x48; mov [rip+0xcad05], eax; mov rax, r8; add rsp, 8; ret;
0x000f7b43: or [rax-0x77], cl; add eax, 0xcad05; mov rax, r8; add rsp, 8; ret;
0x000f7b44: mov [rip+0xcad05], rax; mov rax, r8; add rsp, 8; ret;
0x000f7b45: mov [rip+0xcad05], eax; mov rax, r8; add rsp, 8; ret;
0x000f7b46: add eax, 0xcad05; mov rax, r8; add rsp, 8; ret;
0x000f7b47: add eax, 0x4c000cad; mov eax, eax; add rsp, 8; ret;
0x000f7b48: lodsd [rsi]; or al, 0; mov rax, r8; add rsp, 8; ret;
0x000f7b49: or al, 0; mov rax, r8; add rsp, 8; ret;
0x000f7b4a: add [rcx+rcx*4-0x40], cl; add rsp, 8; ret;
0x000f7b4b: mov rax, r8; add rsp, 8; ret;
0x000f7b87: mov qword ptr [rip+0xcacae], 0; mov qword ptr [rip+0xcacb3], 0; add rsp, 8; ret;
0x000f7b88: mov dword ptr [rip+0xcacae], 0; mov qword ptr [rip+0xcacb3], 0; add rsp, 8; ret;
0x000f7b89: add eax, 0xcacae; add [rax], al; add [rax], al; mov qword ptr [rip+0xcacb3], 0; add rsp, 8; ret;
0x000f7b8c: or al, 0; add [rax], al; add [rax], al; mov qword ptr [rip+0xcacb3], 0; add rsp, 8; ret;
0x000f7b8e: add [rax], al; add [rax], al; mov qword ptr [rip+0xcacb3], 0; add rsp, 8; ret;
0x000f7b90: add [rax], al; mov qword ptr [rip+0xcacb3], 0; add rsp, 8; ret;
0x000f7b91: add [rax-0x39], cl; add eax, 0xcacb3; add [rax], al; add [rax], al; add rsp, 8; ret;
0x000f7b92: mov qword ptr [rip+0xcacb3], 0; add rsp, 8; ret;
0x000f7b93: mov dword ptr [rip+0xcacb3], 0; add rsp, 8; ret;
0x000f7b94: add eax, 0xcacb3; add [rax], al; add [rax], al; add rsp, 8; ret;
0x000f7b95: mov bl, 0xac; or al, 0; add [rax], al; add [rax], al; add rsp, 8; ret;
0x000f7b96: lodsb [rsi]; or al, 0; add [rax], al; add [rax], al; add rsp, 8; ret;
0x000f7b97: or al, 0; add [rax], al; add [rax], al; add rsp, 8; ret;
0x000f7bb8: dec dword ptr [rax-0x77]; add eax, 0xcac90; add rsp, 8; ret;
0x000f7bb9: mov [rip+0xcac90], rax; add rsp, 8; ret;
0x000f7bba: mov [rip+0xcac90], eax; add rsp, 8; ret;
0x000f7bbb: add eax, 0xcac90; add rsp, 8; ret;
0x000f7bbc: nop; lodsb [rsi]; or al, 0; add rsp, 8; ret;
0x000f7bbd: lodsb [rsi]; or al, 0; add rsp, 8; ret;
0x000f7dba: fwait; out 0xf2, al; jmp qword ptr [rsi-0x70];
0x000f7dbb: out 0xf2, al; jmp qword ptr [rsi-0x70];
0x000f7dbc: bnd jmp qword ptr [rsi-0x70];
0x000f7e1c: mov bh, bh; inc dword ptr [rbp-0x7cd28b40]; ret;
0x000f7e1e: inc dword ptr [rbp-0x7cd28b40]; ret;
0x000f7e46: mov eax, r12d; pop rbx; pop r12; pop r13; pop rbp; ret;
0x000f7e47: mov eax, esp; pop rbx; pop r12; pop r13; pop rbp; ret;
0x000f7e49: pop rbx; pop r12; pop r13; pop rbp; ret;
0x000f7e4a: pop r12; pop r13; pop rbp; ret;
0x000f7e4b: pop rsp; pop r13; pop rbp; ret;
0x000f7e4c: pop r13; pop rbp; ret;
0x000f7e4d: pop rbp; pop rbp; ret;
0x000f7ec9: add [rcx+0xcaa5035], cl; add [rbp-0x8f38b2e], al; ret 0xfc07;
0x000f7ecf: add [rbp-0x8f38b2e], al; ret 0xfc07;
0x000f7ed1: shl byte ptr [rsp+rcx-9], cl; ret 0xfc07;
0x000f7ed3: or al, 0xf7; ret 0xfc07;
0x000f7ed5: ret 0xfc07;
0x000f7f48: xor eax, [rcx-0x7d]; call far fword ptr [rbx+0xf];
0x000f7f4b: call far fword ptr [rbx+0xf];
0x000f804e: call qword ptr [rax+0x25048b64];
0x000f805c: sub dword ptr [rip+0xca8ad], 1; ret;
0x000f805e: lodsd [rsi]; test al, 0xc; add [rcx], al; ret;
0x000f805f: test al, 0xc; add [rcx], al; ret;
0x000f806c: mov al, [0xb7f01f883000ca8]; ret;
0x000f806d: test al, 0xc; add [rbx+0xb7f01f8], al; ret;
0x000f806f: add [rbx+0xb7f01f8], al; ret;
0x000f8071: clc; add [rdi+0xb], edi; ret;
0x000f8072: add [rdi+0xb], edi; ret;
0x000f807f: add [rbp+0x31], al; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xca877]; syscall;
0x000f8082: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xca877]; syscall; ret;
0x000f8083: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xca877]; syscall; ret;
0x000f8085: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xca877]; syscall; ret;
0x000f8086: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xca877]; syscall; ret;
0x000f8087: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xca877]; syscall; ret;
0x000f8088: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xca877]; syscall; ret;
0x000f8089: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xca877; syscall; ret;
0x000f8089: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xca877; syscall;
0x000f808a: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xca877]; syscall; ret;
0x000f808b: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xca877]; syscall; ret;
0x000f808c: add [rax+0xca], bh; lea rdi, [rip+0xca877]; syscall; ret;
0x000f808d: mov eax, 0xca; lea rdi, [rip+0xca877]; syscall; ret;
0x000f808f: add [rax], al; add [rax-0x73], cl; cmp eax, 0xca877; syscall; ret;
0x000f808f: add [rax], al; add [rax-0x73], cl; cmp eax, 0xca877; syscall;
0x000f8090: add [rax], al; lea rdi, [rip+0xca877]; syscall; ret;
0x000f8091: add [rax-0x73], cl; cmp eax, 0xca877; syscall;
0x000f8091: add [rax-0x73], cl; cmp eax, 0xca877; syscall; ret;
0x000f8092: lea rdi, [rip+0xca877]; syscall; ret;
0x000f8093: lea edi, [rip+0xca877]; syscall; ret;
0x000f8094: cmp eax, 0xca877; syscall;
0x000f8094: cmp eax, 0xca877; syscall; ret;
0x000f8097: or al, 0; syscall; ret;
0x000f810d: add [rdi], ecx; test [rcx], bl; add al, [rax]; add bh, dh; ret;
0x000f810f: test [rcx], bl; add al, [rax]; add bh, dh; ret;
0x000f8111: add al, [rax]; add bh, dh; ret;
0x000f8113: add bh, dh; ret;
0x000f812b: and al, ch; call qword ptr [rax-8];
0x000f812d: call qword ptr [rax-8];
0x000f8253: sub [rax-0x77], cl; ret 0x2948;
0x000f853f: add [rax+0x63], cl; ret 0xd189;
0x000f8542: ret 0xd189;
0x000f8561: ret 0x8830;
0x000f85b0: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xca346]; syscall;
0x000f85ba: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xca346; syscall;
0x000f85c0: add [rax], al; add [rax-0x73], cl; cmp eax, 0xca346; syscall;
0x000f85c2: add [rax-0x73], cl; cmp eax, 0xca346; syscall;
0x000f85c5: cmp eax, 0xca346; syscall;
0x000f863b: cmp al, 0xde; bnd call qword ptr [rax-0x27137eb8];
0x000f863c: fdivrp st(2), st; call qword ptr [rax-0x27137eb8];
0x000f863d: bnd call qword ptr [rax-0x27137eb8];
0x000f863e: call qword ptr [rax-0x27137eb8];
0x000f8821: idiv bh; jmp qword ptr [rbx+rcx*4+4];
0x000f882b: add [rbp-0x7ccf8a40], al; sub eax, 0xca0d9; add [rbp+0x41], ebx; pop rsp; pop r13; ret;
0x000f882d: shl byte ptr [rbp+0x30], 0x83; sub eax, 0xca0d9; add [rbp+0x41], ebx; pop rsp; pop r13; ret;
0x000f882f: xor [rbx+0xca0d92d], al; add [rcx], al; pop rbp; pop r12; pop r13; ret;
0x000f8830: sub dword ptr [rip+0xca0d9], 1; pop rbp; pop r12; pop r13; ret;
0x000f8831: sub eax, 0xca0d9; add [rbp+0x41], ebx; pop rsp; pop r13; ret;
0x000f8832: fldenv [rax+0x5d01000c]; pop r12; pop r13; ret;
0x000f8833: mov al, [0x5d415c415d01000c]; ret;
0x000f8834: or al, 0; add [rbp+0x41], ebx; pop rsp; pop r13; ret;
0x000f8835: add [rcx], al; pop rbp; pop r12; pop r13; ret;
0x000f8836: add [rbp+0x41], ebx; pop rsp; pop r13; ret;
0x000f8876: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xca08a; syscall;
0x000f887c: add [rax], al; add [rax-0x73], cl; cmp eax, 0xca08a; syscall;
0x000f887e: add [rax-0x73], cl; cmp eax, 0xca08a; syscall;
0x000f8881: cmp eax, 0xca08a; syscall;
0x000f8883: mov al, [0x8949adeb050f000c]; shr cl, 0xf9; fcomi st, st(2); jmp qword ptr [rsi+0x66];
0x000f8885: add [rdi], cl; add eax, 0x8949adeb; shr cl, 0xf9; fcomi st, st(2); jmp qword ptr [rsi+0x66];
0x000f8887: add eax, 0x8949adeb; shr cl, 0xf9; fcomi st, st(2); jmp qword ptr [rsi+0x66];
0x000f888c: shr cl, 0xf9; fcomi st, st(2); jmp qword ptr [rsi+0x66];
0x000f888e: stc; fcomi st, st(2); jmp qword ptr [rsi+0x66];
0x000f888f: fcomi st, st(2); jmp qword ptr [rsi+0x66];
0x000f8890: bnd jmp qword ptr [rsi+0x66];
0x000f88e7: sub dword ptr [rip+0xca022], 1; add rsp, 8; ret;
0x000f88e9: and ah, [rax+0x4801000c]; add esp, 8; ret;
0x000f8955: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xca877]; syscall;
0x000f8956: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xca877]; syscall;
0x000f8957: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xca877]; syscall;
0x000f8958: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xca877]; syscall;
0x000f8959: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xca877]; syscall;
0x000f895a: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xca877]; syscall;
0x000f895b: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xca877]; syscall;
0x000f895c: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xca877]; syscall;
0x000f895d: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xca877]; syscall;
0x000f895e: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xc9fa2; syscall;
0x000f895f: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xca877]; syscall;
0x000f8960: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xca877]; syscall;
0x000f8961: add [rax+0xca], bh; lea rdi, [rip+0xca877]; syscall;
0x000f8962: mov eax, 0xca; lea rdi, [rip+0xca877]; syscall;
0x000f8964: add [rax], al; add [rax-0x73], cl; cmp eax, 0xc9fa2; syscall;
0x000f8965: add [rax], al; lea rdi, [rip+0xca877]; syscall;
0x000f8966: add [rax-0x73], cl; cmp eax, 0xc9fa2; syscall;
0x000f8967: lea rdi, [rip+0xca877]; syscall;
0x000f8968: lea edi, [rip+0xca877]; syscall;
0x000f8969: cmp eax, 0xc9fa2; syscall;
0x000f896b: lahf; or al, 0; syscall;
0x000f897f: add [rbx+0xc59c205], cl; add [rbp-0x76f98b01], al; cmp eax, 0xc59b8; ret;
0x000f8982: ret 0xc59;
0x000f8985: add [rbp-0x76f98b01], al; cmp eax, 0xc59b8; ret;
0x000f8987: push qword ptr [rsi+rax-0x77]; cmp eax, 0xc59b8; ret;
0x000f898a: mov [rip+0xc59b8], edi; ret;
0x000f898b: cmp eax, 0xc59b8; ret;
0x000f898d: pop rcx; or al, 0; ret;
0x000f898e: or al, 0; ret;
0x000f89a5: test dword ptr [rax-0x77], 0xca8948d6; mov r10, r8; mov r8, r9; mov r9, [rsp+8]; syscall;
0x000f89a6: mov rsi, rdx; mov rdx, rcx; mov r10, r8; mov r8, r9; mov r9, [rsp+8]; syscall;
0x000f89a7: mov esi, edx; mov rdx, rcx; mov r10, r8; mov r8, r9; mov r9, [rsp+8]; syscall;
0x000f89a9: mov rdx, rcx; mov r10, r8; mov r8, r9; mov r9, [rsp+8]; syscall;
0x000f89aa: mov edx, ecx; mov r10, r8; mov r8, r9; mov r9, [rsp+8]; syscall;
0x000f89ac: mov r10, r8; mov r8, r9; mov r9, [rsp+8]; syscall;
0x000f89ad: mov edx, eax; mov r8, r9; mov r9, [rsp+8]; syscall;
0x000f89af: mov r8, r9; mov r9, [rsp+8]; syscall;
0x000f89b0: mov eax, ecx; mov r9, [rsp+8]; syscall;
0x000f89b1: enter 0x8b4c, 0x4c; and al, 8; syscall;
0x000f89b2: mov r9, [rsp+8]; syscall;
0x000f89b3: mov ecx, [rsp+8]; syscall;
0x000f89c4: or eax, 0xc54a7; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f89c6: push rsp; or al, 0; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f8a12: or eax, 0x56e8ff31; sub al, 0xfd; jmp qword ptr [rsi+0xf];
0x000f8a16: push rsi; sub al, 0xfd; jmp qword ptr [rsi+0xf];
0x000f8a17: sub al, 0xfd; jmp qword ptr [rsi+0xf];
0x000f8a51: add rsp, 0xa0; mov eax, r12d; pop rbx; pop rbp; pop r12; ret;
0x000f8a52: add esp, 0xa0; mov eax, r12d; pop rbx; pop rbp; pop r12; ret;
0x000f8a54: mov al, [0x5d5be08944000000]; pop r12; ret;
0x000f8b52: push qword ptr [rbx+rdi+0x41]; mov edx, ebx; mov rdi, rbp; mov eax, 9; syscall;
0x000f8b54: cmp eax, [rcx-0x77]; fimul st, dword ptr [rax-0x77]; out dx, eax; mov eax, 9; syscall;
0x000f8b55: mov r10d, ebx; mov rdi, rbp; mov eax, 9; syscall;
0x000f8b56: mov edx, ebx; mov rdi, rbp; mov eax, 9; syscall;
0x000f8b57: fimul st, dword ptr [rax-0x77]; out dx, eax; mov eax, 9; syscall;
0x000f8b58: mov rdi, rbp; mov eax, 9; syscall;
0x000f8b59: mov edi, ebp; mov eax, 9; syscall;
0x000f8b5a: out dx, eax; mov eax, 9; syscall;
0x000f8b5b: mov eax, 9; syscall;
0x000f8b5c: or [rax], eax; add [rax], al; syscall;
0x000f8b67: push qword ptr [rdi+0x66]; pop rbx; pop rbp; ret;
0x000f8b69: pop bx; pop rbp; ret;
0x000f8b6d: nop [rax]; mov rax, [rip+0x147581]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret;
0x000f8b6f: add [rax-0x75], cl; add eax, 0xc52f9; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret;
0x000f8b70: mov rax, [rip+0x1822e9]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret;
0x000f8b71: mov eax, [rip+0x1822e9]; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret;
0x000f8b72: add eax, 0xc52f9; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret;
0x000f8b73: stc; push rdx; or al, 0; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret;
0x000f8b74: push rdx; or al, 0; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret;
0x000f8b75: or al, 0; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret;
0x000f8b77: mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret;
0x000f8b78: mov dword ptr [rax], 0x16; mov rax, 0xffffffffffffffff; ret;
0x000f8b8b: add [rax], al; add [rax], al; add dh, dh; ret 0x7404;
0x000f8b8d: add [rax], al; add dh, dh; ret 0x7404;
0x000f8b8f: add dh, dh; ret 0x7404;
0x000f8b91: ret 0x7404;
0x000f8ba5: mov r10d, ecx; mov ecx, 9; xor edi, edi; or r10d, 0x40; mov eax, ecx; syscall;
0x000f8ba6: mov edx, ecx; mov ecx, 9; xor edi, edi; or r10d, 0x40; mov eax, ecx; syscall;
0x000f8ba8: mov ecx, 9; xor edi, edi; or r10d, 0x40; mov eax, ecx; syscall;
0x000f8ba9: or [rax], eax; add [rax], al; xor edi, edi; or r10d, 0x40; mov eax, ecx; syscall;
0x000f8bab: add [rax], al; xor edi, edi; or r10d, 0x40; mov eax, ecx; syscall;
0x000f8bad: xor edi, edi; or r10d, 0x40; mov eax, ecx; syscall;
0x000f8baf: or r10d, 0x40; mov eax, ecx; syscall;
0x000f8bb0: or edx, 0x40; mov eax, ecx; syscall;
0x000f8bb3: mov eax, ecx; syscall;
0x000f8be4: test [rsi+0x2e], esp; nop [rax+rax]; nop; mov eax, 0xb; syscall;
0x000f8be5: nop [rax+rax]; nop; mov eax, 0xb; syscall;
0x000f8be6: nop [rax+rax]; nop; mov eax, 0xb; syscall;
0x000f8be7: nop [rax+rax]; nop; mov eax, 0xb; syscall;
0x000f8be9: test [rax], al; add [rax], al; add [rax], al; nop; mov eax, 0xb; syscall;
0x000f8beb: add [rax], al; add [rax], al; nop; mov eax, 0xb; syscall;
0x000f8bed: add [rax], al; nop; mov eax, 0xb; syscall;
0x000f8bef: nop; mov eax, 0xb; syscall;
0x000f8bf0: mov eax, 0xb; syscall;
0x000f8bf1: or eax, [rax]; add [rax], al; syscall;
0x000f8c02: or eax, 0xc5269; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f8c03: imul edx, [rdx+0xc], 0x64d8f700; mov [rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f8c0b: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0xa; syscall;
0x000f8c0e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0xa; syscall;
0x000f8c0f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0xa; syscall;
0x000f8c11: nop [rax+rax]; nop [rax+rax]; mov eax, 0xa; syscall;
0x000f8c12: nop [rax+rax]; nop [rax+rax]; mov eax, 0xa; syscall;
0x000f8c13: nop [rax+rax]; nop [rax+rax]; mov eax, 0xa; syscall;
0x000f8c15: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0xa; syscall;
0x000f8c17: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0xa; syscall;
0x000f8c19: add [rax], al; nop [rax+rax]; mov eax, 0xa; syscall;
0x000f8c1b: nop [rax+rax]; mov eax, 0xa; syscall;
0x000f8c1d: add [rax], r8b; mov eax, 0xa; syscall;
0x000f8c1e: add [rax], al; mov eax, 0xa; syscall;
0x000f8c1f: add [rax+0xa], bh; syscall;
0x000f8c20: mov eax, 0xa; syscall;
0x000f8c21: or al, [rax]; add [rax], al; syscall;
0x000f8c32: or eax, 0xc5239; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f8c33: cmp [rdx+0xc], edx; add bh, dh; fsub st, dword ptr [rcx+rcx*4+1]; or rax, 0xffffffffffffffff; ret;
0x000f8c34: push rdx; or al, 0; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f8c55: add [rax], al; add [rbp-0x47eb8a40], al; sbb al, [rax]; add [rax], al; syscall;
0x000f8c57: add [rbp-0x47eb8a40], al; sbb al, [rax]; add [rax], al; syscall;
0x000f8c59: shl byte ptr [rbp+0x14], 0xb8; sbb al, [rax]; add [rax], al; syscall;
0x000f8c5b: adc al, 0xb8; sbb al, [rax]; add [rax], al; syscall;
0x000f8c86: dec dword ptr [rbx+0x481c2454]; mov esi, [rsp+0x10]; mov r8d, eax; mov rdi, [rsp+8]; mov eax, 0x1a; syscall;
0x000f8c87: mov edx, [rsp+0x1c]; mov rsi, [rsp+0x10]; mov r8d, eax; mov rdi, [rsp+8]; mov eax, 0x1a; syscall;
0x000f8c89: and al, 0x1c; mov rsi, [rsp+0x10]; mov r8d, eax; mov rdi, [rsp+8]; mov eax, 0x1a; syscall;
0x000f8c8a: sbb al, 0x48; mov esi, [rsp+0x10]; mov r8d, eax; mov rdi, [rsp+8]; mov eax, 0x1a; syscall;
0x000f8c8b: mov rsi, [rsp+0x10]; mov r8d, eax; mov rdi, [rsp+8]; mov eax, 0x1a; syscall;
0x000f8c8c: mov esi, [rsp+0x10]; mov r8d, eax; mov rdi, [rsp+8]; mov eax, 0x1a; syscall;
0x000f8c8e: and al, 0x10; mov r8d, eax; mov rdi, [rsp+8]; mov eax, 0x1a; syscall;
0x000f8c8f: adc [rcx-0x77], al; ror byte ptr [rax-0x75], 0x7c; and al, 8; mov eax, 0x1a; syscall;
0x000f8c90: mov r8d, eax; mov rdi, [rsp+8]; mov eax, 0x1a; syscall;
0x000f8c91: mov eax, eax; mov rdi, [rsp+8]; mov eax, 0x1a; syscall;
0x000f8c92: ror byte ptr [rax-0x75], 0x7c; and al, 8; mov eax, 0x1a; syscall;
0x000f8c93: mov rdi, [rsp+8]; mov eax, 0x1a; syscall;
0x000f8c94: mov edi, [rsp+8]; mov eax, 0x1a; syscall;
0x000f8c96: and al, 8; mov eax, 0x1a; syscall;
0x000f8c97: or [rax+0x1a], bh; syscall;
0x000f8c98: mov eax, 0x1a; syscall;
0x000f8c99: sbb al, [rax]; add [rax], al; syscall;
0x000f8cad: or al, ch; sub eax, 0x8bfff8c1; and al, 8; add rsp, 0x28; ret;
0x000f8caf: sub eax, 0x8bfff8c1; and al, 8; add rsp, 0x28; ret;
0x000f8cb0: sar eax, 0xff; mov eax, [rsp+8]; add rsp, 0x28; ret;
0x000f8cb1: clc; dec dword ptr [rbx+0x48082444]; add esp, 0x28; ret;
0x000f8cb2: dec dword ptr [rbx+0x48082444]; add esp, 0x28; ret;
0x000f8cbf: add [rax-0x75], cl; adc eax, 0xc51a9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f8cc2: adc eax, 0xc51a9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f8cc3: test eax, 0xf7000c51; fsub st, dword ptr [rcx+rcx*4+2]; mov eax, 0xffffffff; ret;
0x000f8cc4: push rcx; or al, 0; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000f8cea: mov esp, 0x441f0f; add [rax+0x1c], bh; syscall;
0x000f8ceb: nop [rax+rax]; mov eax, 0x1c; syscall;
0x000f8ced: add [rax], r8b; mov eax, 0x1c; syscall;
0x000f8cee: add [rax], al; mov eax, 0x1c; syscall;
0x000f8cef: add [rax+0x1c], bh; syscall;
0x000f8cf0: mov eax, 0x1c; syscall;
0x000f8cf1: sbb al, 0; add [rax], al; syscall;
0x000f8d02: or eax, 0xc5169; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f8d03: imul edx, [rcx+0xc], 0x64d8f700; mov [rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f8d0b: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x1b; syscall;
0x000f8d0e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x1b; syscall;
0x000f8d0f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x1b; syscall;
0x000f8d11: nop [rax+rax]; nop [rax+rax]; mov eax, 0x1b; syscall;
0x000f8d12: nop [rax+rax]; nop [rax+rax]; mov eax, 0x1b; syscall;
0x000f8d13: nop [rax+rax]; nop [rax+rax]; mov eax, 0x1b; syscall;
0x000f8d15: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x1b; syscall;
0x000f8d17: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x1b; syscall;
0x000f8d19: add [rax], al; nop [rax+rax]; mov eax, 0x1b; syscall;
0x000f8d1b: nop [rax+rax]; mov eax, 0x1b; syscall;
0x000f8d1d: add [rax], r8b; mov eax, 0x1b; syscall;
0x000f8d1e: add [rax], al; mov eax, 0x1b; syscall;
0x000f8d1f: add [rax+0x1b], bh; syscall;
0x000f8d20: mov eax, 0x1b; syscall;
0x000f8d21: sbb eax, [rax]; add [rax], al; syscall;
0x000f8d32: or eax, 0xc5139; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f8d33: cmp [rcx+0xc], edx; add bh, dh; fsub st, dword ptr [rcx+rcx*4+1]; or rax, 0xffffffffffffffff; ret;
0x000f8d3e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xd8; syscall;
0x000f8d3f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xd8; syscall;
0x000f8d41: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xd8; syscall;
0x000f8d42: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xd8; syscall;
0x000f8d43: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xd8; syscall;
0x000f8d47: add [rax], al; add [rax], al; nop [rax+rax]; mov r10, rcx; mov eax, 0xd8; syscall;
0x000f8d49: add [rax], al; nop [rax+rax]; mov r10, rcx; mov eax, 0xd8; syscall;
0x000f8d4b: nop [rax+rax]; mov r10, rcx; mov eax, 0xd8; syscall;
0x000f8d4d: add [rax], r8b; mov r10, rcx; mov eax, 0xd8; syscall;
0x000f8d4e: add [rax], al; mov r10, rcx; mov eax, 0xd8; syscall;
0x000f8d50: mov r10, rcx; mov eax, 0xd8; syscall;
0x000f8d51: mov edx, ecx; mov eax, 0xd8; syscall;
0x000f8d53: mov eax, 0xd8; syscall;
0x000f8d54: fadd st, dword ptr [rax]; add [rax], al; syscall;
0x000f8d65: or eax, 0xc5106; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f8d67: push rcx; or al, 0; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f8d6e: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; xchg ax, ax; mov eax, 0x95; syscall;
0x000f8d71: enter 0xc3ff, 0x66; nop [rax+rax]; xchg ax, ax; mov eax, 0x95; syscall;
0x000f8d72: inc ebx; nop [rax+rax]; xchg ax, ax; mov eax, 0x95; syscall;
0x000f8d74: nop [rax+rax]; xchg ax, ax; mov eax, 0x95; syscall;
0x000f8d75: nop [rax+rax]; xchg ax, ax; mov eax, 0x95; syscall;
0x000f8d76: nop [rax+rax]; xchg ax, ax; mov eax, 0x95; syscall;
0x000f8d78: test [rax], al; add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0x95; syscall;
0x000f8d79: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, 0x95; syscall;
0x000f8d7a: add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0x95; syscall;
0x000f8d7b: add [rax], al; add [rsi-0x70], ah; mov eax, 0x95; syscall;
0x000f8d7c: add [rax], al; xchg ax, ax; mov eax, 0x95; syscall;
0x000f8d7d: add [rsi-0x70], ah; mov eax, 0x95; syscall;
0x000f8d7e: xchg ax, ax; mov eax, 0x95; syscall;
0x000f8d7f: nop; mov eax, 0x95; syscall;
0x000f8d92: or eax, 0xc50d9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f8d93: fst dword ptr [rax+0xc], st; add bh, dh; fsub st, dword ptr [rcx+rcx*4+1]; or rax, 0xffffffffffffffff; ret;
0x000f8d9b: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x96; syscall;
0x000f8d9e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x96; syscall;
0x000f8d9f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x96; syscall;
0x000f8da1: nop [rax+rax]; nop [rax+rax]; mov eax, 0x96; syscall;
0x000f8da2: nop [rax+rax]; nop [rax+rax]; mov eax, 0x96; syscall;
0x000f8da3: nop [rax+rax]; nop [rax+rax]; mov eax, 0x96; syscall;
0x000f8da5: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x96; syscall;
0x000f8da7: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x96; syscall;
0x000f8da9: add [rax], al; nop [rax+rax]; mov eax, 0x96; syscall;
0x000f8dab: nop [rax+rax]; mov eax, 0x96; syscall;
0x000f8dad: add [rax], r8b; mov eax, 0x96; syscall;
0x000f8dae: add [rax], al; mov eax, 0x96; syscall;
0x000f8daf: add [rax+0x96], bh; syscall;
0x000f8db0: mov eax, 0x96; syscall;
0x000f8dc2: or eax, 0xc50a9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f8dc3: test eax, 0xf7000c50; fsub st, dword ptr [rcx+rcx*4+1]; or rax, 0xffffffffffffffff; ret;
0x000f8dcb: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x97; syscall;
0x000f8dce: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x97; syscall;
0x000f8dcf: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x97; syscall;
0x000f8dd1: nop [rax+rax]; nop [rax+rax]; mov eax, 0x97; syscall;
0x000f8dd2: nop [rax+rax]; nop [rax+rax]; mov eax, 0x97; syscall;
0x000f8dd3: nop [rax+rax]; nop [rax+rax]; mov eax, 0x97; syscall;
0x000f8dd5: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x97; syscall;
0x000f8dd7: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x97; syscall;
0x000f8dd9: add [rax], al; nop [rax+rax]; mov eax, 0x97; syscall;
0x000f8ddb: nop [rax+rax]; mov eax, 0x97; syscall;
0x000f8ddd: add [rax], r8b; mov eax, 0x97; syscall;
0x000f8dde: add [rax], al; mov eax, 0x97; syscall;
0x000f8ddf: add [rax+0x97], bh; syscall;
0x000f8de0: mov eax, 0x97; syscall;
0x000f8df2: or eax, 0xc5079; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f8dfb: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x98; syscall;
0x000f8dfe: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x98; syscall;
0x000f8dff: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x98; syscall;
0x000f8e01: nop [rax+rax]; nop [rax+rax]; mov eax, 0x98; syscall;
0x000f8e02: nop [rax+rax]; nop [rax+rax]; mov eax, 0x98; syscall;
0x000f8e03: nop [rax+rax]; nop [rax+rax]; mov eax, 0x98; syscall;
0x000f8e05: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x98; syscall;
0x000f8e07: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x98; syscall;
0x000f8e09: add [rax], al; nop [rax+rax]; mov eax, 0x98; syscall;
0x000f8e0b: nop [rax+rax]; mov eax, 0x98; syscall;
0x000f8e0d: add [rax], r8b; mov eax, 0x98; syscall;
0x000f8e0e: add [rax], al; mov eax, 0x98; syscall;
0x000f8e0f: add [rax+0x98], bh; syscall;
0x000f8e10: mov eax, 0x98; syscall;
0x000f8e22: or eax, 0xc5049; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f8e23: push r8; or al, 0; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f8e24: push rax; or al, 0; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000f8e70: mov rax, [rip+0xcb581]; add rsp, 0x10; pop rbp; pop r12; pop r13; ret;
0x000f8e71: mov eax, [rip+0xcb581]; add rsp, 0x10; pop rbp; pop r12; pop r13; ret;
0x000f8e72: add eax, 0xcb581; add rsp, 0x10; pop rbp; pop r12; pop r13; ret;
0x000f8e73: xor dword ptr [rbp-0x7cb7fff4], 0x415d10c4; pop rsp; pop r13; ret;
0x000f8e75: or al, 0; add rsp, 0x10; pop rbp; pop r12; pop r13; ret;
0x000f8e77: add rsp, 0x10; pop rbp; pop r12; pop r13; ret;
0x000f8e78: add esp, 0x10; pop rbp; pop r12; pop r13; ret;
0x000f8e7a: adc [rbp+0x41], bl; pop rsp; pop r13; ret;
0x000f8eaa: adc eax, 0x10c48348; lea rax, [rip+0xc9a9a]; pop rbp; pop r12; pop r13; ret;
0x000f8eab: add rsp, 0x10; lea rax, [rip+0xc9a9a]; pop rbp; pop r12; pop r13; ret;
0x000f8eac: add esp, 0x10; lea rax, [rip+0xc9a9a]; pop rbp; pop r12; pop r13; ret;
0x000f8eae: adc [rax-0x73], cl; add eax, 0xc9a9a; pop rbp; pop r12; pop r13; ret;
0x000f8eaf: lea rax, [rip+0xc9a9a]; pop rbp; pop r12; pop r13; ret;
0x000f8eb0: lea eax, [rip+0xc9a9a]; pop rbp; pop r12; pop r13; ret;
0x000f8eb1: add eax, 0xc9a9a; pop rbp; pop r12; pop r13; ret;
0x000f8eb4: or al, 0; pop rbp; pop r12; pop r13; ret;
0x000f8f03: add al, [rax]; add [rax-0x73], cl; add eax, 0xc9a23; add rsp, 8; ret;
0x000f8f04: add [rax], al; lea rax, [rip+0xc9a23]; add rsp, 8; ret;
0x000f8f05: add [rax-0x73], cl; add eax, 0xc9a23; add rsp, 8; ret;
0x000f8f06: lea rax, [rip+0xc9a23]; add rsp, 8; ret;
0x000f8f07: lea eax, [rip+0xc9a23]; add rsp, 8; ret;
0x000f8f08: add eax, 0xc9a23; add rsp, 8; ret;
0x000f8f0b: or al, 0; add rsp, 8; ret;
0x000f8f3e: add al, ch; sub al, 0xdf; cmc; dec dword ptr [rcx+rcx*4-0x20]; pop r12; ret;
0x000f8f40: sub al, 0xdf; cmc; dec dword ptr [rcx+rcx*4-0x20]; pop r12; ret;
0x000f8f41: fcomip st, st(5); dec dword ptr [rcx+rcx*4-0x20]; pop r12; ret;
0x000f8f42: cmc; dec dword ptr [rcx+rcx*4-0x20]; pop r12; ret;
0x000f8f43: dec dword ptr [rcx+rcx*4-0x20]; pop r12; ret;
0x000f8fc7: pop rcx; ret 0xf66;
0x000f8fde: adc eax, 0x2c790; add [rax], al; add [rbx+0x11b911ff], al; add [rax], al; add [rdi], cl; iretq;
0x000f8fe1: add al, [rax]; add [rax], al; add [rbx+0x11b911ff], al; add [rax], al; add [rdi], cl; iretq;
0x000f8fe3: add [rax], al; add [rbx+0x11b911ff], al; add [rax], al; add [rdi], cl; iretq;
0x000f8fe5: add [rbx+0x11b911ff], al; add [rax], al; add [rdi], cl; iretq;
0x000f905a: ror byte ptr [rdi], 0x84; scasd [rdi]; add [rax], al; add [rax+0x39], cl; ret;
0x000f905d: scasd [rdi]; add [rax], al; add [rax+0x39], cl; ret;
0x000f9166: outsb dx, [rsi]; ret 0xc931;
0x000f91cc: dec dword ptr [rax-0x75]; add eax, 0xc4c9c; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000f91cf: add eax, 0xc4c9c; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000f91d0: pushfq; or al, 0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000f9217: ror byte ptr [rdi], 0x95; ret 0xf66;
0x000f9219: xchg ebp, eax; ret 0xf66;
0x000f9255: ret 0x1e1;
0x000f9312: add [rcx-0x77], al; add [rcx], eax; sub esi, [rcx]; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret;
0x000f9315: add [rcx], eax; sub esi, [rcx]; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret;
0x000f93c5: mov rax, [rip+0xcb034]; pop rcx; pop rbp; pop r12; pop r13; ret;
0x000f93c6: mov eax, [rip+0xcb034]; pop rcx; pop rbp; pop r12; pop r13; ret;
0x000f93c7: add eax, 0xcb034; pop rcx; pop rbp; pop r12; pop r13; ret;
0x000f93c9: mov al, 0xc; add [rcx+0x5d], bl; pop r12; pop r13; ret;
0x000f93ca: or al, 0; pop rcx; pop rbp; pop r12; pop r13; ret;
0x000f93cb: add [rcx+0x5d], bl; pop r12; pop r13; ret;
0x000f93cc: pop rcx; pop rbp; pop r12; pop r13; ret;
0x000f93f5: clc; push qword ptr [rdi+rdx+0x5d]; lea rax, [rip+0xc95bf]; pop r12; pop r13; ret;
0x000f93f6: push qword ptr [rdi+rdx+0x5d]; lea rax, [rip+0xc95bf]; pop r12; pop r13; ret;
0x000f93f9: pop rbp; lea rax, [rip+0xc95bf]; pop r12; pop r13; ret;
0x000f93fa: lea rax, [rip+0xc95bf]; pop r12; pop r13; ret;
0x000f93fb: lea eax, [rip+0xc95bf]; pop r12; pop r13; ret;
0x000f93fc: add eax, 0xc95bf; pop r12; pop r13; ret;
0x000f93fd: mov edi, 0x41000c95; pop rsp; pop r13; ret;
0x000f93fe: xchg ebp, eax; or al, 0; pop r12; pop r13; ret;
0x000f93ff: or al, 0; pop r12; pop r13; ret;
0x000f9448: sbb al, ch; add al, [rbx]; add [rax], al; lea rax, [rip+0xc952b]; add rsp, 0x18; ret;
0x000f944a: add al, [rbx]; add [rax], al; lea rax, [rip+0xc952b]; add rsp, 0x18; ret;
0x000f944b: add eax, [rax]; add [rax-0x73], cl; add eax, 0xc952b; add rsp, 0x18; ret;
0x000f944c: add [rax], al; lea rax, [rip+0xc952b]; add rsp, 0x18; ret;
0x000f944d: add [rax-0x73], cl; add eax, 0xc952b; add rsp, 0x18; ret;
0x000f944e: lea rax, [rip+0xc952b]; add rsp, 0x18; ret;
0x000f944f: lea eax, [rip+0xc952b]; add rsp, 0x18; ret;
0x000f9450: add eax, 0xc952b; add rsp, 0x18; ret;
0x000f9452: xchg ebp, eax; or al, 0; add rsp, 0x18; ret;
0x000f9453: or al, 0; add rsp, 0x18; ret;
0x000f9483: out 0xe8, eax; out 0xd9, eax; cmc; call far fword ptr [rax+0x4c];
0x000f9485: out 0xd9, eax; cmc; call far fword ptr [rax+0x4c];
0x000f9486: fprem1; call far fword ptr [rax+0x4c];
0x000f9487: cmc; call far fword ptr [rax+0x4c];
0x000f9507: ret 0xcad8;
0x000f9531: add al, [rax]; add [rax], al; add [rbx+0x15b915ff], al; add [rax], al; add [rdi], cl; iretq;
0x000f9533: add [rax], al; add [rbx+0x15b915ff], al; add [rax], al; add [rdi], cl; iretq;
0x000f9535: add [rbx+0x15b915ff], al; add [rax], al; add [rdi], cl; iretq;
0x000f9538: adc eax, 0x15b9; add [rdi], cl; iretq;
0x000f953a: adc eax, 0xf000000; iretq;
0x000f953b: add [rax], al; add [rdi], cl; iretq;
0x000f953d: add [rdi], cl; iretq;
0x000f9561: pop rbx; fdiv st, st(5); call far fword ptr [rdx+0x5e];
0x000f9562: fdiv st, st(5); call far fword ptr [rdx+0x5e];
0x000f9563: cmc; call far fword ptr [rdx+0x5e];
0x000f9564: call far fword ptr [rdx+0x5e];
0x000f95b6: add [rax], al; add [rax+0x39], cl; ret;
0x000f9654: adc [rax-0x7d], ecx; ret;
0x000f96a3: ror byte ptr [rdi], 0x45; ret 0xc084;
0x000f96a6: ret 0xc084;
0x000f984c: ror byte ptr [rdi], 0xb6; ror byte ptr [rcx+0x312b0102], 0xc0; add rsp, 8; pop rbx; pop rbp; ret;
0x000f984f: ror byte ptr [rcx+0x312b0102], 0xc0; add rsp, 8; pop rbx; pop rbp; ret;
0x000f9851: add al, [rcx]; sub esi, [rcx]; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret;
0x000f9852: add [rbx], ebp; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret;
0x000f9853: sub esi, [rcx]; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret;
0x000f98bb: in eax, dx; add ecx, ebx; ret;
0x000f98bc: add ecx, ebx; ret;
0x000f98de: call qword ptr [rax+0x93d8d48];
0x000f99d2: add al, ch; mov rax, 0x38948c08548fff2; pop rbx; setne al; movzx eax, al; ret;
0x000f99d4: mov rax, 0x38948c08548fff2; pop rbx; setne al; movzx eax, al; ret;
0x000f99d5: mov eax, 0x8548fff2; ror byte ptr [rax-0x77], 3; pop rbx; setne al; movzx eax, al; ret;
0x000f99d7: dec dword ptr [rax-0x7b]; ror byte ptr [rax-0x77], 3; pop rbx; setne al; movzx eax, al; ret;
0x000f99d8: test rax, rax; mov [rbx], rax; pop rbx; setne al; movzx eax, al; ret;
0x000f99d9: test eax, eax; mov [rbx], rax; pop rbx; setne al; movzx eax, al; ret;
0x000f99da: ror byte ptr [rax-0x77], 3; pop rbx; setne al; movzx eax, al; ret;
0x000f99db: mov [rbx], rax; pop rbx; setne al; movzx eax, al; ret;
0x000f99dc: mov [rbx], eax; pop rbx; setne al; movzx eax, al; ret;
0x000f99de: pop rbx; setne al; movzx eax, al; ret;
0x000f99f8: xchg edi, eax; mov rax, [rip+0xc4470]; mov dword ptr fs:[rax], 0xc; xor eax, eax; pop rbx; ret;
0x000f99f9: mov rax, [rip+0x133032]; mov dword ptr fs:[rax], 0xc; xor eax, eax; pop rbx; ret;
0x000f99fa: mov eax, [rip+0x133032]; mov dword ptr fs:[rax], 0xc; xor eax, eax; pop rbx; ret;
0x000f99fb: add eax, 0xc4470; mov dword ptr fs:[rax], 0xc; xor eax, eax; pop rbx; ret;
0x000f99fe: or al, 0; mov dword ptr fs:[rax], 0xc; xor eax, eax; pop rbx; ret;
0x000f99ff: add [rdi+rax*8], ah; or al, 0; add [rax], al; xor eax, eax; pop rbx; ret;
0x000f9a00: mov dword ptr fs:[rax], 0xc; xor eax, eax; pop rbx; ret;
0x000f9a01: mov dword ptr [rax], 0xc; xor eax, eax; pop rbx; ret;
0x000f9a02: add [rax+rax], cl; add [rax], al; xor eax, eax; pop rbx; ret;
0x000f9a03: or al, 0; add [rax], al; xor eax, eax; pop rbx; ret;
0x000f9a05: add [rax], al; xor eax, eax; pop rbx; ret;
0x000f9a06: add [rcx], dh; rcr byte ptr [rbx-0x3d], 0x48; mov eax, [rip+0xc445e]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret;
0x000f9a08: rcr byte ptr [rbx-0x3d], 0x48; mov eax, [rip+0xc445e]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret;
0x000f9a0d: add eax, 0xc445e; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret;
0x000f9a0e: pop rsi; or al, 0; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret;
0x000f9a10: or al, 0; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret;
0x000f9a31: mov qword ptr [rbx], 0; pop rbx; ret;
0x000f9a32: mov dword ptr [rbx], 0; pop rbx; ret;
0x000f9a35: add [rax], al; add [rbx-0x3d], bl; nop [rax+rax]; mov rax, [rip+0xc4429]; mov dword ptr fs:[rax], 0x16; ret;
0x000f9a37: add [rbx-0x3d], bl; nop [rax+rax]; mov rax, [rip+0xc4429]; mov dword ptr fs:[rax], 0x16; ret;
0x000f9a3a: nop [rax+rax]; mov rax, [rip+0xc4429]; mov dword ptr fs:[rax], 0x16; ret;
0x000f9a3b: nop [rax+rax]; mov rax, [rip+0xc4429]; mov dword ptr fs:[rax], 0x16; ret;
0x000f9a3d: add [rax], r8b; mov rax, [rip+0xc4429]; mov dword ptr fs:[rax], 0x16; ret;
0x000f9a3e: add [rax], al; mov rax, [rip+0xc4429]; mov dword ptr fs:[rax], 0x16; ret;
0x000f9a3f: add [rax-0x75], cl; add eax, 0xc4429; mov dword ptr fs:[rax], 0x16; ret;
0x000f9a40: mov rax, [rip+0xc4429]; mov dword ptr fs:[rax], 0x16; ret;
0x000f9a41: mov eax, [rip+0xc4429]; mov dword ptr fs:[rax], 0x16; ret;
0x000f9a42: add eax, 0xc4429; mov dword ptr fs:[rax], 0x16; ret;
0x000f9a43: sub [rsp+rcx], eax; mov dword ptr fs:[rax], 0x16; ret;
0x000f9a45: or al, 0; mov dword ptr fs:[rax], 0x16; ret;
0x000f9a47: mov dword ptr fs:[rax], 0x16; ret;
0x000f9a48: mov dword ptr [rax], 0x16; ret;
0x000f9a95: add al, 1; ror dword ptr [rax-0x77], cl; ret 0x8348;
0x000f9a97: ror dword ptr [rax-0x77], cl; ret 0x8348;
0x000f9af0: ret 0x2901;
0x000f9bc2: ret 0x4b01;
0x000f9ca5: xor cl, [rax-0x77]; out dx, eax; mov edx, r13d; mov esi, 1; call r12;
0x000f9ca6: mov rdi, rbp; mov edx, r13d; mov esi, 1; call r12;
0x000f9ca7: mov edi, ebp; mov edx, r13d; mov esi, 1; call r12;
0x000f9ca8: out dx, eax; mov edx, r13d; mov esi, 1; call r12;
0x000f9ca9: mov edx, r13d; mov esi, 1; call r12;
0x000f9d1f: add [rax], al; add [rcx+rsi+0x48], dh; mov edi, ebp; xor esi, esi; call r12;
0x000f9d21: add [rcx+rsi+0x48], dh; mov edi, ebp; xor esi, esi; call r12;
0x000f9d23: xor [rax-0x77], ecx; out dx, eax; xor esi, esi; call r12;
0x000f9d24: mov rdi, rbp; xor esi, esi; call r12;
0x000f9d25: mov edi, ebp; xor esi, esi; call r12;
0x000f9d26: out dx, eax; xor esi, esi; call r12;
0x000f9d27: xor esi, esi; call r12;
0x000f9d35: xor cl, [rax-0x77]; out dx, eax; mov rdx, r13; mov esi, 1; call r12;
0x000f9d36: mov rdi, rbp; mov rdx, r13; mov esi, 1; call r12;
0x000f9d37: mov edi, ebp; mov rdx, r13; mov esi, 1; call r12;
0x000f9d38: out dx, eax; mov rdx, r13; mov esi, 1; call r12;
0x000f9d39: mov rdx, r13; mov esi, 1; call r12;
0x000f9d3a: mov edx, ebp; mov esi, 1; call r12;
0x000f9d3c: mov esi, 1; call r12;
0x000f9d3d: add [rax], eax; add [rax], al; call r12;
0x000f9d55: mov rdi, rbp; mov rax, r12; pop rbp; pop r12; pop r13; jmp rax;
0x000f9d56: mov edi, ebp; mov rax, r12; pop rbp; pop r12; pop r13; jmp rax;
0x000f9d57: out dx, eax; mov rax, r12; pop rbp; pop r12; pop r13; jmp rax;
0x000f9d58: mov rax, r12; pop rbp; pop r12; pop r13; jmp rax;
0x000f9d59: mov eax, esp; pop rbp; pop r12; pop r13; jmp rax;
0x000f9d5b: pop rbp; pop r12; pop r13; jmp rax;
0x000f9d5c: pop r12; pop r13; jmp rax;
0x000f9d5d: pop rsp; pop r13; jmp rax;
0x000f9d5e: pop r13; jmp rax;
0x000f9da9: adc [rax-0x7b], cl; push qword ptr [rbp+0x27]; mov rdi, [rbp]; call rbx;
0x000f9dac: push qword ptr [rbp+0x27]; mov rdi, [rbp]; call rbx;
0x000f9daf: mov rdi, [rbp]; call rbx;
0x000f9db0: mov edi, [rbp]; call rbx;
0x000f9de9: or [r8-0x75], r9b; adc [r9-0x77], r9b; ret 0x8349;
0x000f9dea: or [rax-0x75], cl; adc [r9-0x77], r9b; ret 0x8349;
0x000f9ded: adc [r9-0x77], r9b; ret 0x8349;
0x000f9dee: adc [rcx-0x77], cl; ret 0x8349;
0x000f9e10: add [rbp+0x3d], esi; ret;
0x000f9e42: add [rbp+0x1b], esi; ret;
0x000f9ec0: and eax, 1; or rdi, rax; mov [rdx], rdi; pop rbx; pop rbp; ret;
0x000f9ec3: or rdi, rax; mov [rdx], rdi; pop rbx; pop rbp; ret;
0x000f9ec4: or edi, eax; mov [rdx], rdi; pop rbx; pop rbp; ret;
0x000f9ec6: mov [rdx], rdi; pop rbx; pop rbp; ret;
0x000f9ec7: mov [rdx], edi; pop rbx; pop rbp; ret;
0x000f9ec8: cmp bl, [rbx+0x5d]; ret;
0x000f9ed6: dec byte ptr [rax+9]; ret;
0x000f9ef8: dec byte ptr [rcx-0x77]; adc [r9+9], cl; ror dword ptr [rcx+rcx*4+0x48], 1; or bl, ch; ret;
0x000f9efb: adc [r9+9], cl; ror dword ptr [rcx+rcx*4+0x48], 1; or bl, ch; ret;
0x000f9efc: adc [rcx+9], cl; ror dword ptr [rcx+rcx*4+0x48], 1; or bl, ch; ret;
0x000f9eff: ror dword ptr [rcx+rcx*4+0x48], 1; or bl, ch; ret;
0x000f9f02: or bl, bpl; ret;
0x000f9f03: or bl, ch; ret;
0x000f9fbf: mov rax, [rsp+0x18]; mov [rsp+0xc], r8d; mov rdi, r15; mov [rsp], rdx; mov [rsp+0x10], rbx; call rax;
0x000f9fc0: mov eax, [rsp+0x18]; mov [rsp+0xc], r8d; mov rdi, r15; mov [rsp], rdx; mov [rsp+0x10], rbx; call rax;
0x000f9fc2: and al, 0x18; mov [rsp+0xc], r8d; mov rdi, r15; mov [rsp], rdx; mov [rsp+0x10], rbx; call rax;
0x000f9fc3: sbb [rcx+rcx*4+0x44], al; and al, 0xc; mov rdi, r15; mov [rsp], rdx; mov [rsp+0x10], rbx; call rax;
0x000f9fc4: mov [rsp+0xc], r8d; mov rdi, r15; mov [rsp], rdx; mov [rsp+0x10], rbx; call rax;
0x000f9fc5: mov [rsp+0xc], eax; mov rdi, r15; mov [rsp], rdx; mov [rsp+0x10], rbx; call rax;
0x000f9fc7: and al, 0xc; mov rdi, r15; mov [rsp], rdx; mov [rsp+0x10], rbx; call rax;
0x000f9fc8: or al, 0x4c; mov edi, edi; mov [rsp], rdx; mov [rsp+0x10], rbx; call rax;
0x000f9fc9: mov rdi, r15; mov [rsp], rdx; mov [rsp+0x10], rbx; call rax;
0x000f9fca: mov edi, edi; mov [rsp], rdx; mov [rsp+0x10], rbx; call rax;
0x000f9fcb: dec dword ptr [rax-0x77]; adc al, 0x24; mov [rsp+0x10], rbx; call rax;
0x000f9fcc: mov [rsp], rdx; mov [rsp+0x10], rbx; call rax;
0x000f9fcd: mov [rsp], edx; mov [rsp+0x10], rbx; call rax;
0x000f9fce: adc al, 0x24; mov [rsp+0x10], rbx; call rax;
0x000f9fcf: and al, 0x48; mov [rsp+0x10], ebx; call rax;
0x000f9fd0: mov [rsp+0x10], rbx; call rax;
0x000f9fd1: mov [rsp+0x10], ebx; call rax;
0x000f9fd2: pop rsp; and al, 0x10; call rax;
0x000fa10d: sbb ebx, ebp; cmp [rax-0x73], cl; push rbx; or [rax-0x7d], cl; ret;
0x000fa10f: cmp [rax-0x73], cl; push rbx; or [rax-0x7d], cl; ret;
0x000fa112: push rbx; or [rax-0x7d], cl; ret;
0x000fa126: and [rax-0x75], ecx; xor ecx, [rcx-0x77]; fisttp qword ptr [rax-0x77], st; out dx, eax; call r12;
0x000fa127: mov rsi, [rbx]; mov r13, rbx; mov rdi, rbp; call r12;
0x000fa128: mov esi, [rbx]; mov r13, rbx; mov rdi, rbp; call r12;
0x000fa129: xor ecx, [rcx-0x77]; fisttp qword ptr [rax-0x77], st; out dx, eax; call r12;
0x000fa12a: mov r13, rbx; mov rdi, rbp; call r12;
0x000fa12b: mov ebp, ebx; mov rdi, rbp; call r12;
0x000fa12c: fisttp qword ptr [rax-0x77], st; out dx, eax; call r12;
0x000fa13a: or [rcx+rcx*4-0x18], cl; pop rbx; pop rbp; pop r12; pop r13; ret;
0x000fa13b: mov rax, r13; pop rbx; pop rbp; pop r12; pop r13; ret;
0x000fa13c: mov eax, ebp; pop rbx; pop rbp; pop r12; pop r13; ret;
0x000fa14f: pop rbx; mov rax, r13; pop rbp; pop r12; pop r13; ret;
0x000fa150: mov rax, r13; pop rbp; pop r12; pop r13; ret;
0x000fa151: mov eax, ebp; pop rbp; pop r12; pop r13; ret;
0x000fa1d3: mov rsi, [rax]; mov rdi, [rbp-0x58]; mov [rbp-0x50], r9; mov r15d, r14d; mov rax, [rbp-0x60]; call rax;
0x000fa1d4: mov esi, [rax]; mov rdi, [rbp-0x58]; mov [rbp-0x50], r9; mov r15d, r14d; mov rax, [rbp-0x60]; call rax;
0x000fa1d6: mov rdi, [rbp-0x58]; mov [rbp-0x50], r9; mov r15d, r14d; mov rax, [rbp-0x60]; call rax;
0x000fa1d7: mov edi, [rbp-0x58]; mov [rbp-0x50], r9; mov r15d, r14d; mov rax, [rbp-0x60]; call rax;
0x000fa1d9: test al, 0x4c; mov [rbp-0x50], ecx; mov r15d, r14d; mov rax, [rbp-0x60]; call rax;
0x000fa1da: mov [rbp-0x50], r9; mov r15d, r14d; mov rax, [rbp-0x60]; call rax;
0x000fa1db: mov [rbp-0x50], ecx; mov r15d, r14d; mov rax, [rbp-0x60]; call rax;
0x000fa1dc: mov r8b, 0x45; mov edi, esi; mov rax, [rbp-0x60]; call rax;
0x000fa1dd: mov al, 0x45; mov edi, esi; mov rax, [rbp-0x60]; call rax;
0x000fa1de: mov r15d, r14d; mov rax, [rbp-0x60]; call rax;
0x000fa1df: mov edi, esi; mov rax, [rbp-0x60]; call rax;
0x000fa1e1: mov rax, [rbp-0x60]; call rax;
0x000fa1e2: mov eax, [rbp-0x60]; call rax;
0x000fa2da: add [rax-0x7d], ecx; ret 0x4808;
0x000fa387: push rsi; or dh, dh; ret 0xf01;
0x000fa388: or dh, dh; ret 0xf01;
0x000fa413: push rsi; or dh, dh; ret 0x7401;
0x000fa414: or dh, dh; ret 0x7401;
0x000fa5b0: or [rax-0x77], cl; push rsi; adc [rax-0x75], cl; push rsi; or [rbx+0x94801e2], al; ret 0x8948;
0x000fa5b3: push rsi; adc [rax-0x75], cl; push rsi; or [rbx+0x94801e2], al; ret 0x8948;
0x000fa5b4: adc [rax-0x75], cl; push rsi; or [rbx+0x94801e2], al; ret 0x8948;
0x000fa5b7: push rsi; or [rbx+0x94801e2], al; ret 0x8948;
0x000fa5b8: or [rbx+0x94801e2], al; ret 0x8948;
0x000fa5cb: add [rax], al; add [rax], al; add [rbx+rcx*4+0x42], cl; adc [rbp-0x7b], cl; shl byte ptr [rdi+rdx*2+0x4d], 0x89; ret;
0x000fa5cd: add [rax], al; add [rbx+rcx*4+0x42], cl; adc [rbp-0x7b], cl; shl byte ptr [rdi+rdx*2+0x4d], 0x89; ret;
0x000fa5cf: add [rbx+rcx*4+0x42], cl; adc [rbp-0x7b], cl; shl byte ptr [rdi+rdx*2+0x4d], 0x89; ret;
0x000fa5d3: adc [rbp-0x7b], cl; shl byte ptr [rdi+rdx*2+0x4d], 0x89; ret;
0x000fa5d6: shl byte ptr [rdi+rdx*2+0x4d], 0x89; ret;
0x000fa615: adc [rax+9], cl; enter 0x8948, 0x42; or [rax-0x75], cl; add eax, [rbx+0x94801e0]; ret 0x8948;
0x000fa618: enter 0x8948, 0x42; or [rax-0x75], cl; add eax, [rbx+0x94801e0]; ret 0x8948;
0x000fa61c: or [rax-0x75], cl; add eax, [rbx+0x94801e0]; ret 0x8948;
0x000fa61f: add eax, [rbx+0x94801e0]; ret 0x8948;
0x000fa622: add [rax+9], ecx; ret 0x8948;
0x000fa717: div byte ptr [rbp+6]; ret;
0x000fa72d: add [rax], al; add [rax-0x7b], cl; push qword ptr [rbx+rcx-0x17]; push rsi; idiv bh; jmp qword ptr [rsi+0xf];
0x000fa72f: add [rax-0x7b], cl; push qword ptr [rbx+rcx-0x17]; push rsi; idiv bh; jmp qword ptr [rsi+0xf];
0x000fa732: push qword ptr [rbx+rcx-0x17]; push rsi; idiv bh; jmp qword ptr [rsi+0xf];
0x000fa734: or ebp, ecx; push rsi; idiv bh; jmp qword ptr [rsi+0xf];
0x000fa736: push rsi; idiv bh; jmp qword ptr [rsi+0xf];
0x000fa78f: xor [rcx+rcx*4-0x1a], cl; mov rdi, r15; call r13;
0x000fa790: mov rsi, r12; mov rdi, r15; call r13;
0x000fa791: mov esi, esp; mov rdi, r15; call r13;
0x000fa792: out 0x4c, al; mov edi, edi; call r13;
0x000fa793: mov rdi, r15; call r13;
0x000fa794: mov edi, edi; call r13;
0x000fa816: add [rax+0x39], ecx; pop rbp; add [rsi+0x2b], dh; mov rsi, r12; mov rdi, r14; call r13;
0x000fa819: pop rbp; add [rsi+0x2b], dh; mov rsi, r12; mov rdi, r14; call r13;
0x000fa81a: add [rsi+0x2b], dh; mov rsi, r12; mov rdi, r14; call r13;
0x000fa81c: sub ecx, [rcx+rcx*4-0x1a]; mov rdi, r14; call r13;
0x000fa81d: mov rsi, r12; mov rdi, r14; call r13;
0x000fa81e: mov esi, esp; mov rdi, r14; call r13;
0x000fa81f: out 0x4c, al; mov edi, esi; call r13;
0x000fa820: mov rdi, r14; call r13;
0x000fa821: mov edi, esi; call r13;
0x000fab0f: dec dword ptr [rcx+0x3b49e8ef]; hlt; jmp qword ptr [rsi+0xf];
0x000fab13: cmp rsi, r12; jmp qword ptr [rsi+0xf];
0x000fab2f: dec dword ptr [rcx+0x3b29e8ef]; hlt; jmp qword ptr [rsi+0xf];
0x000fab33: sub [rbx], edi; hlt; jmp qword ptr [rsi+0xf];
0x000fab34: cmp esi, esp; jmp qword ptr [rsi+0xf];
0x000fab35: hlt; jmp qword ptr [rsi+0xf];
0x000facad: sbb eax, 0x89480009; ret 0xc031;
0x000facc8: add [rax], al; add [rbp+8], dh; add rsp, 0x418; ret;
0x000facca: add [rbp+8], dh; add rsp, 0x418; ret;
0x000faccd: add rsp, 0x418; ret;
0x000facce: add esp, 0x418; ret;
0x000fad2a: inc dword ptr [rbp-0x7b]; in al, 0x75; cmp [rbx+0x5d], ebx; pop r12; ret;
0x000fad2d: in al, 0x75; cmp [rbx+0x5d], ebx; pop r12; ret;
0x000fad2f: cmp [rbx+0x5d], ebx; pop r12; ret;
0x000fad6b: out 0xe8, eax; out dx, eax; cmp ah, dh; jmp qword ptr [rsi+0x66];
0x000fad6d: out dx, eax; cmp ah, dh; jmp qword ptr [rsi+0x66];
0x000fad6e: cmp ah, dh; jmp qword ptr [rsi+0x66];
0x000fad6f: hlt; jmp qword ptr [rsi+0x66];
0x000fadbe: add eax, 0xc69c5; lea rsi, [rsp+4]; mov edi, 1; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000fadf9: pop rsi; call rax;
0x000fae1b: add eax, 0xc6968; mov edi, [rsp+4]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000fae1d: imul ecx, [rax+rax], 0x4247c8b; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000fb028: mov rax, [rip+0x178a31]; mov edi, [rsp+4]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000fb029: mov eax, [rip+0x178a31]; mov edi, [rsp+4]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000fb02a: add eax, 0xc6759; mov edi, [rsp+4]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000fb02d: or al, 0; mov edi, [rsp+4]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000fb02f: mov edi, [rsp+4]; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000fb031: and al, 4; xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000fb033: xor esi, esi; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000fb034: test byte ptr [rax-0x3f], 0xc8; adc [rax+rcx*2+0x33], esp; add al, 0x25; xor [rax], al; add [rax], al; call rax;
0x000fb050: mov rax, [rip+0x178a80]; lea rsi, [rsp+4]; mov edi, 1; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000fb051: mov eax, [rip+0x178a80]; lea rsi, [rsp+4]; mov edi, 1; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000fb052: add eax, 0xc6731; lea rsi, [rsp+4]; mov edi, 1; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000fb055: or al, 0; lea rsi, [rsp+4]; mov edi, 1; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000fb057: lea rsi, [rsp+4]; mov edi, 1; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000fb058: lea esi, [rsp+4]; mov edi, 1; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000fb05a: and al, 4; mov edi, 1; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000fb05b: add al, 0xbf; add [rax], eax; add [rax], al; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000fb05c: mov edi, 1; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000fb05d: add [rax], eax; add [rax], al; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x000fb0ae: call qword ptr [rax-0x16fa74b8];
0x000fb167: adc al, ch; ret;
0x000fb16c: call far fword ptr [rax+0x5a];
0x000fb196: xor [rax+0x88], edi; syscall;
0x000fb197: mov eax, 0x88; syscall;
0x000fb198: mov [rax], al; add [rax], al; syscall;
0x000fb1a3: push qword ptr [rdi+0xa]; ret;
0x000fb1a7: nop [rax+rax]; mov rdx, [rip+0x181d19]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000fb1af: add [rax-0x75], cl; adc eax, 0xc2cb9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000fb1b2: adc eax, 0xc2cb9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000fb1b3: mov ecx, 0xf7000c2c; fsub st, dword ptr [rcx+rcx*4+2]; mov eax, 0xffffffff; ret;
0x000fb1b4: sub al, 0xc; add bh, dh; fsub st, dword ptr [rcx+rcx*4+2]; mov eax, 0xffffffff; ret;
0x000fb1b5: or al, 0; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000fb1c0: inc ebx; nop [rax+rax]; mov rax, [rip+0xf82a1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000fb1c7: add [rax-0x75], cl; add eax, 0xc2ca1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000fb1ca: add eax, 0xc2ca1; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000fb1cb: mov eax, [0x1600c764000c2c]; add [rax], al; mov eax, 0xffffffff; ret;
0x000fb1cd: or al, 0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000fb252: out 0x74, eax; iretd;
0x000fb2d3: ror byte ptr [rax-0x73], cl; add ecx, [rax+0xf]; ret 0xc148;
0x000fb2d7: add ecx, [rax+0xf]; ret 0xc148;
0x000fb30e: add [rax-0x77], cl; ret 0xabe;
0x000fb311: ret 0xabe;
0x000fb33e: call qword ptr [rax-0x1600cebb];
0x000fb347: dec dword ptr [rbx+rcx*4+0x7d]; add cl, ch; iretd;
0x000fb36a: add al, ch; mov al, 0x92; call qword ptr [rbp-0x41];
0x000fb36c: mov al, 0x92; call qword ptr [rbp-0x41];
0x000fb36d: xchg edx, eax; call qword ptr [rbp-0x41];
0x000fb36e: call qword ptr [rbp-0x41];
0x000fb36f: call qword ptr [rbp-0x41];
0x000fb3e3: and [rax], al; add [rax-0x7f], cl; ret;
0x000fb3e5: add [rax-0x7f], cl; ret;
0x000fb487: ret 0x3676;
0x000fb612: mov bh, bh; inc dword ptr [rcx-0x77]; ret 0xf883;
0x000fb614: inc dword ptr [rcx-0x77]; ret 0xf883;
0x000fb74b: sbb [rcx+rcx*4-0x20], al; pop rbx; pop rbp; pop r12; pop r13; ret;
0x000fb899: add [rbp+0xd], dh; add rsp, 0x88; mov rax, r8; pop rbx; pop rbp; ret;
0x000fb89b: or eax, 0x88c48148; add [rax], al; add [rcx+rcx*4-0x40], cl; pop rbx; pop rbp; ret;
0x000fb89c: add rsp, 0x88; mov rax, r8; pop rbx; pop rbp; ret;
0x000fb89d: add esp, 0x88; mov rax, r8; pop rbx; pop rbp; ret;
0x000fb89f: mov [rax], al; add [rax], al; mov rax, r8; pop rbx; pop rbp; ret;
0x000fb8a0: add [rax], al; add [rcx+rcx*4-0x40], cl; pop rbx; pop rbp; ret;
0x000fb8a1: add [rax], al; mov rax, r8; pop rbx; pop rbp; ret;
0x000fb8a2: add [rcx+rcx*4-0x40], cl; pop rbx; pop rbp; ret;
0x000fb8a3: mov rax, r8; pop rbx; pop rbp; ret;
0x000fb8d3: shl byte ptr [rsp+rdi+0x48], 0x39; ret;
0x000fb8e3: ret 0x13eb;
0x000fb933: add [rax+0x39], ecx; ret;
0x000fb93e: int1; mov byte ptr [rax], 0; mov rax, rbx; pop rbx; ret;
0x000fb93f: mov byte ptr [rax], 0; mov rax, rbx; pop rbx; ret;
0x000fb940: add [rax], al; mov rax, rbx; pop rbx; ret;
0x000fb941: add [rax-0x77], cl; fcomp st, dword ptr [rbx-0x3d]; nop [rax+rax]; ret;
0x000fb942: mov rax, rbx; pop rbx; ret;
0x000fb943: mov eax, ebx; pop rbx; ret;
0x000fb944: fcomp st, dword ptr [rbx-0x3d]; nop [rax+rax]; ret;
0x000fb957: add [rax-0x73], cl; add [r8-0x73], ecx; push rbx; add cl, [rax+0x39]; enter 0xf48, 0x44; ret 0xc6;
0x000fb95a: add [r8-0x73], ecx; push rbx; add cl, [rax+0x39]; enter 0xf48, 0x44; ret 0xc6;
0x000fb95b: add [rax-0x73], ecx; push rbx; add cl, [rax+0x39]; enter 0xf48, 0x44; ret 0xc6;
0x000fb95e: push rbx; add cl, [rax+0x39]; enter 0xf48, 0x44; ret 0xc6;
0x000fb95f: add cl, [rax+0x39]; enter 0xf48, 0x44; ret 0xc6;
0x000fb962: enter 0xf48, 0x44; ret 0xc6;
0x000fb966: ret 0xc6;
0x000fb9ff: add [rbp-0x7cb7febd], cl; ret;
0x000fba60: mov rax, [rip+0xc23f9]; mov edx, 0x64; mov eax, [rax+0x38]; test eax, eax; cmove eax, edx; ret;
0x000fba61: mov eax, [rip+0xc23f9]; mov edx, 0x64; mov eax, [rax+0x38]; test eax, eax; cmove eax, edx; ret;
0x000fba62: add eax, 0xc23f9; mov edx, 0x64; mov eax, [rax+0x38]; test eax, eax; cmove eax, edx; ret;
0x000fba64: and ecx, [rax+rax]; mov edx, 0x64; mov eax, [rax+0x38]; test eax, eax; cmove eax, edx; ret;
0x000fba65: or al, 0; mov edx, 0x64; mov eax, [rax+0x38]; test eax, eax; cmove eax, edx; ret;
0x000fba66: add [rdx+0x64], bh; mov eax, [rax+0x38]; test eax, eax; cmove eax, edx; ret;
0x000fba67: mov edx, 0x64; mov eax, [rax+0x38]; test eax, eax; cmove eax, edx; ret;
0x000fba68: add fs:[rax], al; add [rbx-0x3f7ac7c0], cl; cmove eax, edx; ret;
0x000fba69: add [rax], al; add [rbx-0x3f7ac7c0], cl; cmove eax, edx; ret;
0x000fba6a: add [rax], al; mov eax, [rax+0x38]; test eax, eax; cmove eax, edx; ret;
0x000fba6b: add [rbx-0x3f7ac7c0], cl; cmove eax, edx; ret;
0x000fba6c: mov eax, [rax+0x38]; test eax, eax; cmove eax, edx; ret;
0x000fba6e: cmp [rbp-0x3dbbf040], al; ret;
0x000fba6f: test eax, eax; cmove eax, edx; ret;
0x000fba70: ror byte ptr [rdi], 0x44; ret 0x66c3;
0x000fba75: nop [rax+rax]; nop; mov r10, rcx; mov eax, 0xc1; syscall;
0x000fba76: nop [rax+rax]; nop; mov r10, rcx; mov eax, 0xc1; syscall;
0x000fba77: nop [rax+rax]; nop; mov r10, rcx; mov eax, 0xc1; syscall;
0x000fba7b: add [rax], al; add [rax], al; nop; mov r10, rcx; mov eax, 0xc1; syscall;
0x000fba7d: add [rax], al; nop; mov r10, rcx; mov eax, 0xc1; syscall;
0x000fba7f: nop; mov r10, rcx; mov eax, 0xc1; syscall;
0x000fba80: mov r10, rcx; mov eax, 0xc1; syscall;
0x000fba81: mov edx, ecx; mov eax, 0xc1; syscall;
0x000fba83: mov eax, 0xc1; syscall;
0x000fba95: or eax, 0xc23d6; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fba9e: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; xchg ax, ax; mov eax, 0xc4; syscall;
0x000fbaa1: enter 0xc3ff, 0x66; nop [rax+rax]; xchg ax, ax; mov eax, 0xc4; syscall;
0x000fbaa2: inc ebx; nop [rax+rax]; xchg ax, ax; mov eax, 0xc4; syscall;
0x000fbaa4: nop [rax+rax]; xchg ax, ax; mov eax, 0xc4; syscall;
0x000fbaa5: nop [rax+rax]; xchg ax, ax; mov eax, 0xc4; syscall;
0x000fbaa6: nop [rax+rax]; xchg ax, ax; mov eax, 0xc4; syscall;
0x000fbaa8: test [rax], al; add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0xc4; syscall;
0x000fbaa9: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, 0xc4; syscall;
0x000fbaaa: add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0xc4; syscall;
0x000fbaab: add [rax], al; add [rsi-0x70], ah; mov eax, 0xc4; syscall;
0x000fbaac: add [rax], al; xchg ax, ax; mov eax, 0xc4; syscall;
0x000fbaad: add [rsi-0x70], ah; mov eax, 0xc4; syscall;
0x000fbaae: xchg ax, ax; mov eax, 0xc4; syscall;
0x000fbaaf: nop; mov eax, 0xc4; syscall;
0x000fbab0: mov eax, 0xc4; syscall;
0x000fbac2: or eax, 0xc23a9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fbac3: test eax, 0xf7000c23; fsub st, dword ptr [rcx+rcx*4+1]; or rax, 0xffffffffffffffff; ret;
0x000fbacb: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0xc7; syscall;
0x000fbace: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0xc7; syscall;
0x000fbacf: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0xc7; syscall;
0x000fbad1: nop [rax+rax]; nop [rax+rax]; mov eax, 0xc7; syscall;
0x000fbad2: nop [rax+rax]; nop [rax+rax]; mov eax, 0xc7; syscall;
0x000fbad3: nop [rax+rax]; nop [rax+rax]; mov eax, 0xc7; syscall;
0x000fbad5: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0xc7; syscall;
0x000fbad7: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0xc7; syscall;
0x000fbad9: add [rax], al; nop [rax+rax]; mov eax, 0xc7; syscall;
0x000fbadb: nop [rax+rax]; mov eax, 0xc7; syscall;
0x000fbadd: add [rax], r8b; mov eax, 0xc7; syscall;
0x000fbade: add [rax], al; mov eax, 0xc7; syscall;
0x000fbadf: add [rax+0xc7], bh; syscall;
0x000fbae0: mov eax, 0xc7; syscall;
0x000fbaf2: or eax, 0xc2379; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fbafe: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xbe; syscall;
0x000fbaff: inc ebx; nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xbe; syscall;
0x000fbb01: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xbe; syscall;
0x000fbb02: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xbe; syscall;
0x000fbb03: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xbe; syscall;
0x000fbb07: add [rax], al; add [rax], al; nop [rax+rax]; mov r10, rcx; mov eax, 0xbe; syscall;
0x000fbb09: add [rax], al; nop [rax+rax]; mov r10, rcx; mov eax, 0xbe; syscall;
0x000fbb0b: nop [rax+rax]; mov r10, rcx; mov eax, 0xbe; syscall;
0x000fbb0d: add [rax], r8b; mov r10, rcx; mov eax, 0xbe; syscall;
0x000fbb0e: add [rax], al; mov r10, rcx; mov eax, 0xbe; syscall;
0x000fbb10: mov r10, rcx; mov eax, 0xbe; syscall;
0x000fbb11: mov edx, ecx; mov eax, 0xbe; syscall;
0x000fbb13: mov eax, 0xbe; syscall;
0x000fbb25: or eax, 0xc2346; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fbb26: and r9d, [rax+r8]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fbb31: enter 0xc3ff, 0x66; nop [rax+rax]; xchg ax, ax; mov r10, rcx; mov eax, 0xbf; syscall;
0x000fbb32: inc ebx; nop [rax+rax]; xchg ax, ax; mov r10, rcx; mov eax, 0xbf; syscall;
0x000fbb34: nop [rax+rax]; xchg ax, ax; mov r10, rcx; mov eax, 0xbf; syscall;
0x000fbb35: nop [rax+rax]; xchg ax, ax; mov r10, rcx; mov eax, 0xbf; syscall;
0x000fbb36: nop [rax+rax]; xchg ax, ax; mov r10, rcx; mov eax, 0xbf; syscall;
0x000fbb39: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov r10, rcx; mov eax, 0xbf; syscall;
0x000fbb3a: add [rax], al; add [rax], al; xchg ax, ax; mov r10, rcx; mov eax, 0xbf; syscall;
0x000fbb3b: add [rax], al; add [rsi-0x70], ah; mov r10, rcx; mov eax, 0xbf; syscall;
0x000fbb3c: add [rax], al; xchg ax, ax; mov r10, rcx; mov eax, 0xbf; syscall;
0x000fbb3d: add [rsi-0x70], ah; mov r10, rcx; mov eax, 0xbf; syscall;
0x000fbb3e: xchg ax, ax; mov r10, rcx; mov eax, 0xbf; syscall;
0x000fbb3f: nop; mov r10, rcx; mov eax, 0xbf; syscall;
0x000fbb40: mov r10, rcx; mov eax, 0xbf; syscall;
0x000fbb41: mov edx, ecx; mov eax, 0xbf; syscall;
0x000fbb43: mov eax, 0xbf; syscall;
0x000fbb55: or eax, 0xc2316; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fbb57: and ecx, [rax+rax]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fbb5e: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; xchg ax, ax; mov eax, 0xc2; syscall;
0x000fbb61: enter 0xc3ff, 0x66; nop [rax+rax]; xchg ax, ax; mov eax, 0xc2; syscall;
0x000fbb62: inc ebx; nop [rax+rax]; xchg ax, ax; mov eax, 0xc2; syscall;
0x000fbb64: nop [rax+rax]; xchg ax, ax; mov eax, 0xc2; syscall;
0x000fbb65: nop [rax+rax]; xchg ax, ax; mov eax, 0xc2; syscall;
0x000fbb66: nop [rax+rax]; xchg ax, ax; mov eax, 0xc2; syscall;
0x000fbb68: test [rax], al; add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0xc2; syscall;
0x000fbb69: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, 0xc2; syscall;
0x000fbb6a: add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0xc2; syscall;
0x000fbb6b: add [rax], al; add [rsi-0x70], ah; mov eax, 0xc2; syscall;
0x000fbb6c: add [rax], al; xchg ax, ax; mov eax, 0xc2; syscall;
0x000fbb6d: add [rsi-0x70], ah; mov eax, 0xc2; syscall;
0x000fbb6e: xchg ax, ax; mov eax, 0xc2; syscall;
0x000fbb6f: nop; mov eax, 0xc2; syscall;
0x000fbb70: mov eax, 0xc2; syscall;
0x000fbb82: or eax, 0xc22e9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fbb8e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xc0; syscall;
0x000fbb8f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xc0; syscall;
0x000fbb91: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xc0; syscall;
0x000fbb92: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xc0; syscall;
0x000fbb93: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xc0; syscall;
0x000fbb97: add [rax], al; add [rax], al; nop [rax+rax]; mov r10, rcx; mov eax, 0xc0; syscall;
0x000fbb99: add [rax], al; nop [rax+rax]; mov r10, rcx; mov eax, 0xc0; syscall;
0x000fbb9b: nop [rax+rax]; mov r10, rcx; mov eax, 0xc0; syscall;
0x000fbb9d: add [rax], r8b; mov r10, rcx; mov eax, 0xc0; syscall;
0x000fbb9e: add [rax], al; mov r10, rcx; mov eax, 0xc0; syscall;
0x000fbba0: mov r10, rcx; mov eax, 0xc0; syscall;
0x000fbba1: mov edx, ecx; mov eax, 0xc0; syscall;
0x000fbba3: mov eax, 0xc0; syscall;
0x000fbbb5: or eax, 0xc22b6; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fbbb6: mov dh, 0x22; or al, 0; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fbbbe: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; xchg ax, ax; mov eax, 0xc3; syscall;
0x000fbbc1: enter 0xc3ff, 0x66; nop [rax+rax]; xchg ax, ax; mov eax, 0xc3; syscall;
0x000fbbc2: inc ebx; nop [rax+rax]; xchg ax, ax; mov eax, 0xc3; syscall;
0x000fbbc4: nop [rax+rax]; xchg ax, ax; mov eax, 0xc3; syscall;
0x000fbbc5: nop [rax+rax]; xchg ax, ax; mov eax, 0xc3; syscall;
0x000fbbc6: nop [rax+rax]; xchg ax, ax; mov eax, 0xc3; syscall;
0x000fbbc8: test [rax], al; add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0xc3; syscall;
0x000fbbc9: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, 0xc3; syscall;
0x000fbbca: add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0xc3; syscall;
0x000fbbcb: add [rax], al; add [rsi-0x70], ah; mov eax, 0xc3; syscall;
0x000fbbcc: add [rax], al; xchg ax, ax; mov eax, 0xc3; syscall;
0x000fbbcd: add [rsi-0x70], ah; mov eax, 0xc3; syscall;
0x000fbbce: xchg ax, ax; mov eax, 0xc3; syscall;
0x000fbbcf: nop; mov eax, 0xc3; syscall;
0x000fbbd0: mov eax, 0xc3; syscall;
0x000fbbe2: or eax, 0xc2289; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fbbe3: mov [rdx], esp; or al, 0; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fbbeb: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0xc6; syscall;
0x000fbbee: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0xc6; syscall;
0x000fbbef: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0xc6; syscall;
0x000fbbf1: nop [rax+rax]; nop [rax+rax]; mov eax, 0xc6; syscall;
0x000fbbf2: nop [rax+rax]; nop [rax+rax]; mov eax, 0xc6; syscall;
0x000fbbf3: nop [rax+rax]; nop [rax+rax]; mov eax, 0xc6; syscall;
0x000fbbf5: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0xc6; syscall;
0x000fbbf7: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0xc6; syscall;
0x000fbbf9: add [rax], al; nop [rax+rax]; mov eax, 0xc6; syscall;
0x000fbbfb: nop [rax+rax]; mov eax, 0xc6; syscall;
0x000fbbfd: add [rax], r8b; mov eax, 0xc6; syscall;
0x000fbbfe: add [rax], al; mov eax, 0xc6; syscall;
0x000fbbff: add [rax+0xc6], bh; syscall;
0x000fbc00: mov eax, 0xc6; syscall;
0x000fbc12: or eax, 0xc2259; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fbc13: pop rcx; and cl, [rax+rax]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fbc1e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xbd; syscall;
0x000fbc1f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xbd; syscall;
0x000fbc21: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xbd; syscall;
0x000fbc22: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xbd; syscall;
0x000fbc23: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xbd; syscall;
0x000fbc27: add [rax], al; add [rax], al; nop [rax+rax]; mov r10, rcx; mov eax, 0xbd; syscall;
0x000fbc29: add [rax], al; nop [rax+rax]; mov r10, rcx; mov eax, 0xbd; syscall;
0x000fbc2b: nop [rax+rax]; mov r10, rcx; mov eax, 0xbd; syscall;
0x000fbc2d: add [rax], r8b; mov r10, rcx; mov eax, 0xbd; syscall;
0x000fbc2e: add [rax], al; mov r10, rcx; mov eax, 0xbd; syscall;
0x000fbc30: mov r10, rcx; mov eax, 0xbd; syscall;
0x000fbc31: mov edx, ecx; mov eax, 0xbd; syscall;
0x000fbc33: mov eax, 0xbd; syscall;
0x000fbc45: or eax, 0xc2226; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fbc46: and cl, [rax+rax]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fbc47: and cl, [rax+rax]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fbc4e: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; xchg ax, ax; mov eax, 0xc5; syscall;
0x000fbc51: enter 0xc3ff, 0x66; nop [rax+rax]; xchg ax, ax; mov eax, 0xc5; syscall;
0x000fbc52: inc ebx; nop [rax+rax]; xchg ax, ax; mov eax, 0xc5; syscall;
0x000fbc54: nop [rax+rax]; xchg ax, ax; mov eax, 0xc5; syscall;
0x000fbc55: nop [rax+rax]; xchg ax, ax; mov eax, 0xc5; syscall;
0x000fbc56: nop [rax+rax]; xchg ax, ax; mov eax, 0xc5; syscall;
0x000fbc58: test [rax], al; add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0xc5; syscall;
0x000fbc59: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, 0xc5; syscall;
0x000fbc5a: add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0xc5; syscall;
0x000fbc5b: add [rax], al; add [rsi-0x70], ah; mov eax, 0xc5; syscall;
0x000fbc5c: add [rax], al; xchg ax, ax; mov eax, 0xc5; syscall;
0x000fbc5d: add [rsi-0x70], ah; mov eax, 0xc5; syscall;
0x000fbc5e: xchg ax, ax; mov eax, 0xc5; syscall;
0x000fbc5f: nop; mov eax, 0xc5; syscall;
0x000fbc60: mov eax, 0xc5; syscall;
0x000fbc72: or eax, 0xc21f9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fbc73: stc; and [rax+rax], ecx; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fbc7e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xbc; syscall;
0x000fbc7f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xbc; syscall;
0x000fbc81: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xbc; syscall;
0x000fbc82: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xbc; syscall;
0x000fbc83: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xbc; syscall;
0x000fbc87: add [rax], al; add [rax], al; nop [rax+rax]; mov r10, rcx; mov eax, 0xbc; syscall;
0x000fbc89: add [rax], al; nop [rax+rax]; mov r10, rcx; mov eax, 0xbc; syscall;
0x000fbc8b: nop [rax+rax]; mov r10, rcx; mov eax, 0xbc; syscall;
0x000fbc8d: add [rax], r8b; mov r10, rcx; mov eax, 0xbc; syscall;
0x000fbc8e: add [rax], al; mov r10, rcx; mov eax, 0xbc; syscall;
0x000fbc90: mov r10, rcx; mov eax, 0xbc; syscall;
0x000fbc91: mov edx, ecx; mov eax, 0xbc; syscall;
0x000fbc93: mov eax, 0xbc; syscall;
0x000fbca5: or eax, 0xc21c6; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fbca7: and [rax+rax], ecx; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fbcc6: add [rax-0x7d], cl; call qword ptr [rax];
0x000fbccf: call far fword ptr [rdx];
0x000fbcf9: out dx, al; mov rax, [rax+8]; ret;
0x000fbcfa: mov rax, [rax+8]; ret;
0x000fbcfb: mov eax, [rax+8]; ret;
0x000fbcfd: or bl, al; nop; mov rax, [rip+0xc2169]; mov dword ptr fs:[rax], 2; xor eax, eax; ret;
0x000fbcff: nop; mov rax, [rip+0xc2169]; mov dword ptr fs:[rax], 2; xor eax, eax; ret;
0x000fbd00: mov rax, [rip+0xf76b9]; mov dword ptr fs:[rax], 2; xor eax, eax; ret;
0x000fbd01: mov eax, [rip+0xf76b9]; mov dword ptr fs:[rax], 2; xor eax, eax; ret;
0x000fbd02: add eax, 0xc2169; mov dword ptr fs:[rax], 2; xor eax, eax; ret;
0x000fbd04: and [rax+rax], ecx; mov dword ptr fs:[rax], 2; xor eax, eax; ret;
0x000fbd05: or al, 0; mov dword ptr fs:[rax], 2; xor eax, eax; ret;
0x000fbd06: add [rdi+rax*8], ah; add al, [rax]; add [rax], al; xor eax, eax; ret;
0x000fbd07: mov dword ptr fs:[rax], 2; xor eax, eax; ret;
0x000fbd08: mov dword ptr [rax], 2; xor eax, eax; ret;
0x000fbd0a: add al, [rax]; add [rax], al; xor eax, eax; ret;
0x000fbd11: nop [rax]; mov rax, [rax+0x58]; ret;
0x000fbd13: add byte ptr [rax], 0; add [rax], al; mov rax, [rax+0x58]; ret;
0x000fbd14: add [rax], al; add [rax], al; mov rax, [rax+0x58]; ret;
0x000fbd15: add [rax], al; add [rax-0x75], cl; pop rax; ret;
0x000fbd16: add [rax], al; mov rax, [rax+0x58]; ret;
0x000fbd17: add [rax-0x75], cl; pop rax; ret;
0x000fbd18: mov rax, [rax+0x58]; ret;
0x000fbd19: mov eax, [rax+0x58]; ret;
0x000fbd1d: nop [rax]; mov rax, [rax+0x1d0]; ret;
0x000fbd1f: add [rax-0x75], cl; adc al, 1; add [rax], al; ret;
0x000fbd20: mov rax, [rax+0x1d0]; ret;
0x000fbd21: mov eax, [rax+0x1d0]; ret;
0x000fbd22: adc al, 1; add [rax], al; ret;
0x000fbd23: rol byte ptr [rcx], 1; add [rax], al; ret;
0x000fbefc: xchg edi, eax; rcr byte ptr [rax+rax], 0x84; ror byte ptr [rdi], 0x84; ret 0xc;
0x000fbefd: rcr byte ptr [rax+rax], 0x84; ror byte ptr [rdi], 0x84; ret 0xc;
0x000fbf01: ror byte ptr [rdi], 0x84; ret 0xc;
0x000fbf04: ret 0xc;
0x000fc2bd: mov eax, 0x8948fff9; and [r8+2], dil; add rsp, 8; pop rbx; pop rbp; ret;
0x000fc2bf: dec dword ptr [rax-0x77]; and [r8+2], dil; add rsp, 8; pop rbx; pop rbp; ret;
0x000fc2c0: mov [rbx+0x20], rax; mov eax, 2; add rsp, 8; pop rbx; pop rbp; ret;
0x000fc2c1: mov [rbx+0x20], eax; mov eax, 2; add rsp, 8; pop rbx; pop rbp; ret;
0x000fc2c2: and [r8+2], dil; add rsp, 8; pop rbx; pop rbp; ret;
0x000fc2c3: and [rax+2], bh; add rsp, 8; pop rbx; pop rbp; ret;
0x000fc2c4: mov eax, 2; add rsp, 8; pop rbx; pop rbp; ret;
0x000fc2c5: add al, [rax]; add [rax], al; add rsp, 8; pop rbx; pop rbp; ret;
0x000fc40e: mov byte ptr [rbx+0xd0], 1; mov byte ptr [rbx+0xe8], 1; add rsp, 8; pop rbx; pop rbp; ret;
0x000fc413: add [rcx], al; mov byte ptr [rbx+0xe8], 1; add rsp, 8; pop rbx; pop rbp; ret;
0x000fc4b7: mov eax, 4; mov [rbx+0x38], rdx; add rsp, 8; pop rbx; pop rbp; ret;
0x000fc4ba: add [rax], al; mov [rbx+0x38], rdx; add rsp, 8; pop rbx; pop rbp; ret;
0x000fc4bc: mov [rbx+0x38], rdx; add rsp, 8; pop rbx; pop rbp; ret;
0x000fc4bd: mov [rbx+0x38], edx; add rsp, 8; pop rbx; pop rbp; ret;
0x000fc60e: mov [rbx+0x98], rdx; mov byte ptr [rbx+0xe8], 1; add rsp, 8; pop rbx; pop rbp; ret;
0x000fc60f: mov [rbx+0x98], edx; mov byte ptr [rbx+0xe8], 1; add rsp, 8; pop rbx; pop rbp; ret;
0x000fc613: add [rax], al; mov byte ptr [rbx+0xe8], 1; add rsp, 8; pop rbx; pop rbp; ret;
0x000fc615: mov byte ptr [rbx+0xe8], 1; add rsp, 8; pop rbx; pop rbp; ret;
0x000fc618: add [rax], al; add [rcx], al; add rsp, 8; pop rbx; pop rbp; ret;
0x000fcadd: call qword ptr [rcx+6];
0x000fd182: ret 0x8f1;
0x000fd30a: ret 0xfbc1;
0x000fd903: ret 0xe083;
0x000fda5c: ret 0xead1;
0x000fda7b: add [rbx-0x7e098fbf], cl; enter 0, 0; add dh, [rax+rcx-0x77]; ret 0xeac1;
0x000fda81: enter 0, 0; add dh, [rax+rcx-0x77]; ret 0xeac1;
0x000fda83: add [rax], al; add dh, [rax+rcx-0x77]; ret 0xeac1;
0x000fda85: add dh, [rax+rcx-0x77]; ret 0xeac1;
0x000fdaa6: ret 0xe8c1;
0x000fdaea: ret 0xfba3;
0x000fdb4d: mov [0x2b820438948fffb], eax; add [rax], al; add cl, ch; imul esp, edi, 0xffffffff; jmp qword ptr [rsi-0x70];
0x000fdb56: add [rax], al; add cl, ch; imul esp, edi, 0xffffffff; jmp qword ptr [rsi-0x70];
0x000fdb58: add cl, ch; imul esp, edi, 0xffffffff; jmp qword ptr [rsi-0x70];
0x000fdb5a: imul esp, edi, 0xffffffff; jmp qword ptr [rsi-0x70];
0x000fdb5b: out 0xff, eax; jmp qword ptr [rsi-0x70];
0x000fdb66: or [rcx-0x776b73e], cl; shr rax, 0x20; and edx, 0xfff; and eax, 0xfffff000; or eax, edx; ret;
0x000fdb69: mov rax, rdi; shr rax, 0x20; and edx, 0xfff; and eax, 0xfffff000; or eax, edx; ret;
0x000fdb6a: mov eax, edi; shr rax, 0x20; and edx, 0xfff; and eax, 0xfffff000; or eax, edx; ret;
0x000fdb6b: clc; shr rax, 0x20; and edx, 0xfff; and eax, 0xfffff000; or eax, edx; ret;
0x000fdb6c: shr rax, 0x20; and edx, 0xfff; and eax, 0xfffff000; or eax, edx; ret;
0x000fdb6d: shr eax, 0x20; and edx, 0xfff; and eax, 0xfffff000; or eax, edx; ret;
0x000fdb6f: and [rcx+0xfffe2], al; add [rip-0x1000], ah; or eax, edx; ret;
0x000fdb70: and edx, 0xfff; and eax, 0xfffff000; or eax, edx; ret;
0x000fdb72: dec dword ptr [rdi]; add [rax], al; and eax, 0xfffff000; or eax, edx; ret;
0x000fdb73: sldt [rax]; and eax, 0xfffff000; or eax, edx; ret;
0x000fdb74: add [rax], al; and eax, 0xfffff000; or eax, edx; ret;
0x000fdb75: add [rip-0x1000], ah; or eax, edx; ret;
0x000fdb76: and eax, 0xfffff000; or eax, edx; ret;
0x000fdb80: mov rax, rdi; movzx edx, dil; shr rax, 0xc; xor al, al; or eax, edx; ret;
0x000fdb81: mov eax, edi; movzx edx, dil; shr rax, 0xc; xor al, al; or eax, edx; ret;
0x000fdb82: clc; movzx edx, dil; shr rax, 0xc; xor al, al; or eax, edx; ret;
0x000fdb83: movzx edx, dil; shr rax, 0xc; xor al, al; or eax, edx; ret;
0x000fdb84: movzx edx, bh; shr rax, 0xc; xor al, al; or eax, edx; ret;
0x000fdb85: mov dh, 0xd7; shr rax, 0xc; xor al, al; or eax, edx; ret;
0x000fdb86: xlat [rbx]; shr rax, 0xc; xor al, al; or eax, edx; ret;
0x000fdb87: shr rax, 0xc; xor al, al; or eax, edx; ret;
0x000fdb88: shr eax, 0xc; xor al, al; or eax, edx; ret;
0x000fdb8a: or al, 0x30; ror byte ptr [rcx], 0xd0; ret;
0x000fdb8b: xor al, al; or eax, edx; ret;
0x000fdb8c: ror byte ptr [rcx], 0xd0; ret;
0x000fdb8d: or eax, edx; ret;
0x000fdbbd: mov rax, rdi; mov rdi, 0xfffff00000000000; shl rax, 0x20; and rax, rdi; or rax, rsi; ret;
0x000fdbbe: mov eax, edi; mov rdi, 0xfffff00000000000; shl rax, 0x20; and rax, rdi; or rax, rsi; ret;
0x000fdbbf: clc; mov rdi, 0xfffff00000000000; shl rax, 0x20; and rax, rdi; or rax, rsi; ret;
0x000fdbc0: mov rdi, 0xfffff00000000000; shl rax, 0x20; and rax, rdi; or rax, rsi; ret;
0x000fdbca: shl rax, 0x20; and rax, rdi; or rax, rsi; ret;
0x000fdbcb: shl eax, 0x20; and rax, rdi; or rax, rsi; ret;
0x000fdbcd: and [rax+0x21], cl; clc; or rax, rsi; ret;
0x000fdbce: and rax, rdi; or rax, rsi; ret;
0x000fdbcf: and eax, edi; or rax, rsi; ret;
0x000fdbd0: clc; or rax, rsi; ret;
0x000fdbd1: or rax, rsi; ret;
0x000fdbd2: or eax, esi; ret;
0x000fdbe8: mov rbp, rcx; push rbx; mov rbx, rdi; mov rdi, rcx; sub rsp, 8; call rsi;
0x000fdbe9: mov ebp, ecx; push rbx; mov rbx, rdi; mov rdi, rcx; sub rsp, 8; call rsi;
0x000fdbea: int 0x53; mov rbx, rdi; mov rdi, rcx; sub rsp, 8; call rsi;
0x000fdbeb: push rbx; mov rbx, rdi; mov rdi, rcx; sub rsp, 8; call rsi;
0x000fdbec: mov rbx, rdi; mov rdi, rcx; sub rsp, 8; call rsi;
0x000fdbed: mov ebx, edi; mov rdi, rcx; sub rsp, 8; call rsi;
0x000fdbee: sti; mov rdi, rcx; sub rsp, 8; call rsi;
0x000fdbef: mov rdi, rcx; sub rsp, 8; call rsi;
0x000fdbf0: mov edi, ecx; sub rsp, 8; call rsi;
0x000fdbf2: sub rsp, 8; call rsi;
0x000fdbf3: sub esp, 8; call rsi;
0x000fdbf6: call rsi;
0x000fdc27: mov rsi, r8; mov rdi, rbp; call r12;
0x000fdc28: mov esi, eax; mov rdi, rbp; call r12;
0x000fdc2a: mov rdi, rbp; call r12;
0x000fdc8f: mov rdx, [rbx]; mov [rax], rdx; add rsp, 8; pop rbx; pop rbp; ret;
0x000fdc90: mov edx, [rbx]; mov [rax], rdx; add rsp, 8; pop rbx; pop rbp; ret;
0x000fdc92: mov [rax], rdx; add rsp, 8; pop rbx; pop rbp; ret;
0x000fdc93: mov [rax], edx; add rsp, 8; pop rbx; pop rbp; ret;
0x000fdc9f: add bl, al; nop [rax+rax]; nop [rax+rax]; mov eax, 0xad; syscall;
0x000fdca1: nop [rax+rax]; nop [rax+rax]; mov eax, 0xad; syscall;
0x000fdca2: nop [rax+rax]; nop [rax+rax]; mov eax, 0xad; syscall;
0x000fdca3: nop [rax+rax]; nop [rax+rax]; mov eax, 0xad; syscall;
0x000fdca5: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0xad; syscall;
0x000fdca7: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0xad; syscall;
0x000fdca9: add [rax], al; nop [rax+rax]; mov eax, 0xad; syscall;
0x000fdcab: nop [rax+rax]; mov eax, 0xad; syscall;
0x000fdcad: add [rax], r8b; mov eax, 0xad; syscall;
0x000fdcae: add [rax], al; mov eax, 0xad; syscall;
0x000fdcaf: add [rax+0xad], bh; syscall;
0x000fdcb0: mov eax, 0xad; syscall;
0x000fdcc2: or eax, 0xc01a9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fdcc3: test eax, 0xf7000c01; fsub st, dword ptr [rcx+rcx*4+1]; or rax, 0xffffffffffffffff; ret;
0x000fdccb: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0xac; syscall;
0x000fdcce: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0xac; syscall;
0x000fdccf: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0xac; syscall;
0x000fdcd1: nop [rax+rax]; nop [rax+rax]; mov eax, 0xac; syscall;
0x000fdcd2: nop [rax+rax]; nop [rax+rax]; mov eax, 0xac; syscall;
0x000fdcd3: nop [rax+rax]; nop [rax+rax]; mov eax, 0xac; syscall;
0x000fdcd5: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0xac; syscall;
0x000fdcd7: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0xac; syscall;
0x000fdcd9: add [rax], al; nop [rax+rax]; mov eax, 0xac; syscall;
0x000fdcdb: nop [rax+rax]; mov eax, 0xac; syscall;
0x000fdcdd: add [rax], r8b; mov eax, 0xac; syscall;
0x000fdcde: add [rax], al; mov eax, 0xac; syscall;
0x000fdcdf: add [rax+0xac], bh; syscall;
0x000fdce0: mov eax, 0xac; syscall;
0x000fdcf2: or eax, 0xc0179; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fdcf4: add [rax+rax], ecx; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fdd4b: mov [rsp+0x10], rdx; mov [rsp+0x18], rcx; mov [rsp+0x20], r8; mov [rsp+0x28], r9; movups [rsp+0x38], xmm0; syscall;
0x000fdd4c: mov [rsp+0x10], edx; mov [rsp+0x18], rcx; mov [rsp+0x20], r8; mov [rsp+0x28], r9; movups [rsp+0x38], xmm0; syscall;
0x000fdd4e: and al, 0x10; mov [rsp+0x18], rcx; mov [rsp+0x20], r8; mov [rsp+0x28], r9; movups [rsp+0x38], xmm0; syscall;
0x000fdd4f: adc [rax-0x77], cl; and al, 0x18; mov [rsp+0x20], r8; mov [rsp+0x28], r9; movups [rsp+0x38], xmm0; syscall;
0x000fdd50: mov [rsp+0x18], rcx; mov [rsp+0x20], r8; mov [rsp+0x28], r9; movups [rsp+0x38], xmm0; syscall;
0x000fdd51: mov [rsp+0x18], ecx; mov [rsp+0x20], r8; mov [rsp+0x28], r9; movups [rsp+0x38], xmm0; syscall;
0x000fdd53: and al, 0x18; mov [rsp+0x20], r8; mov [rsp+0x28], r9; movups [rsp+0x38], xmm0; syscall;
0x000fdd54: sbb [rcx+rcx*4+0x44], cl; and al, 0x20; mov [rsp+0x28], r9; movups [rsp+0x38], xmm0; syscall;
0x000fdd55: mov [rsp+0x20], r8; mov [rsp+0x28], r9; movups [rsp+0x38], xmm0; syscall;
0x000fdd56: mov [rsp+0x20], eax; mov [rsp+0x28], r9; movups [rsp+0x38], xmm0; syscall;
0x000fdd58: and al, 0x20; mov [rsp+0x28], r9; movups [rsp+0x38], xmm0; syscall;
0x000fdd59: and [rcx+rcx*4+0x4c], cl; and al, 0x28; movups [rsp+0x38], xmm0; syscall;
0x000fdd5a: mov [rsp+0x28], r9; movups [rsp+0x38], xmm0; syscall;
0x000fdd5b: mov [rsp+0x28], ecx; movups [rsp+0x38], xmm0; syscall;
0x000fdd5d: and al, 0x28; movups [rsp+0x38], xmm0; syscall;
0x000fdd5e: sub [rdi], cl; adc [rsp+0x38], eax; syscall;
0x000fdd5f: movups [rsp+0x38], xmm0; syscall;
0x000fdd60: adc [rsp+0x38], eax; syscall;
0x000fdd62: and al, 0x38; syscall;
0x000fdd79: add [rax], al; add [rbp+0x1d], dh; add rsp, 0x68; ret;
0x000fdd7b: add [rbp+0x1d], dh; add rsp, 0x68; ret;
0x000fdd7d: sbb eax, 0x68c48348; ret;
0x000fdd7e: add rsp, 0x68; ret;
0x000fdd7f: add esp, 0x68; ret;
0x000fddcb: mov rdi, rdx; mov rdx, r8; mov r8, r9; mov r10, [rsp+8]; mov eax, 0x38; syscall;
0x000fddcc: mov rdi, rdx; mov rdx, r8; mov r8, r9; mov r10, [rsp+8]; mov eax, 0x38; syscall;
0x000fddcd: mov edi, edx; mov rdx, r8; mov r8, r9; mov r10, [rsp+8]; mov eax, 0x38; syscall;
0x000fddce: xlat [rbx]; mov rdx, r8; mov r8, r9; mov r10, [rsp+8]; mov eax, 0x38; syscall;
0x000fddcf: mov rdx, r8; mov r8, r9; mov r10, [rsp+8]; mov eax, 0x38; syscall;
0x000fddd0: mov edx, eax; mov r8, r9; mov r10, [rsp+8]; mov eax, 0x38; syscall;
0x000fddd2: mov r8, r9; mov r10, [rsp+8]; mov eax, 0x38; syscall;
0x000fddd3: mov eax, ecx; mov r10, [rsp+8]; mov eax, 0x38; syscall;
0x000fddd4: enter 0x8b4c, 0x54; and al, 8; mov eax, 0x38; syscall;
0x000fddd5: mov r10, [rsp+8]; mov eax, 0x38; syscall;
0x000fddd6: mov edx, [rsp+8]; mov eax, 0x38; syscall;
0x000fddd7: push rsp; and al, 8; mov eax, 0x38; syscall;
0x000fddd8: and al, 8; mov eax, 0x38; syscall;
0x000fddd9: or [rax+0x38], bh; syscall;
0x000fddda: mov eax, 0x38; syscall;
0x000fdddb: cmp [rax], al; add [rax], al; syscall;
0x000fdde0: add eax, 0x7cc08548; adc esi, [rcx+rax-0x3d]; xor ebp, ebp; pop rax; pop rdi; call rax;
0x000fdde3: sar byte ptr [rbx+rdx+0x74], 1; ret;
0x000fdde5: adc esi, [rcx+rax-0x3d]; xor ebp, ebp; pop rax; pop rdi; call rax;
0x000fdde7: add ebx, eax; xor ebp, ebp; pop rax; pop rdi; call rax;
0x000fdde9: xor ebp, ebp; pop rax; pop rdi; call rax;
0x000fddea: in eax, dx; pop rax; pop rdi; call rax;
0x000fddeb: pop rax; pop rdi; call rax;
0x000fddec: pop rdi; call rax;
0x000fddef: mov rdi, rax; mov eax, 0x3c; syscall;
0x000fddf0: mov edi, eax; mov eax, 0x3c; syscall;
0x000fddf2: mov eax, 0x3c; syscall;
0x000fddf3: cmp al, 0; add [rax], al; syscall;
0x000fddf7: syscall; mov rcx, [rip+0xc0070]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fddf8: add eax, 0x700d8b48; add [rax+rax], cl; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fddfb: or eax, 0xc0070; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fde11: imul cl; or [rax], eax; add [rax], al; nop [rax+rax]; mov eax, 0xa6; syscall;
0x000fde13: or [rax], eax; add [rax], al; nop [rax+rax]; mov eax, 0xa6; syscall;
0x000fde15: add [rax], al; nop [rax+rax]; mov eax, 0xa6; syscall;
0x000fde17: nop [rax+rax]; mov eax, 0xa6; syscall;
0x000fde18: nop [rax+rax]; mov eax, 0xa6; syscall;
0x000fde1a: test [rax], al; add [rax], al; add [rax], al; mov eax, 0xa6; syscall;
0x000fde1b: add [rax], al; add [rax], al; add [rax+0xa6], bh; syscall;
0x000fde1c: add [rax], al; add [rax], al; mov eax, 0xa6; syscall;
0x000fde1d: add [rax], al; add [rax+0xa6], bh; syscall;
0x000fde1e: add [rax], al; mov eax, 0xa6; syscall;
0x000fde1f: add [rax+0xa6], bh; syscall;
0x000fde20: mov eax, 0xa6; syscall;
0x000fde32: or eax, 0xc0039; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fde33: cmp [rax], eax; or al, 0; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fde34: add [rax+rax], cl; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fde35: or al, 0; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fde3b: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0xbb; syscall;
0x000fde3e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0xbb; syscall;
0x000fde3f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0xbb; syscall;
0x000fde41: nop [rax+rax]; nop [rax+rax]; mov eax, 0xbb; syscall;
0x000fde42: nop [rax+rax]; nop [rax+rax]; mov eax, 0xbb; syscall;
0x000fde43: nop [rax+rax]; nop [rax+rax]; mov eax, 0xbb; syscall;
0x000fde45: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0xbb; syscall;
0x000fde47: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0xbb; syscall;
0x000fde49: add [rax], al; nop [rax+rax]; mov eax, 0xbb; syscall;
0x000fde4b: nop [rax+rax]; mov eax, 0xbb; syscall;
0x000fde4d: add [rax], r8b; mov eax, 0xbb; syscall;
0x000fde4e: add [rax], al; mov eax, 0xbb; syscall;
0x000fde4f: add [rax+0xbb], bh; syscall;
0x000fde50: mov eax, 0xbb; syscall;
0x000fde62: adc eax, 0xc0009; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000fde63: or [rax], eax; or al, 0; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000fde64: add [rax+rax], cl; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000fde65: or al, 0; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000fde72: inc ebx; nop [rax+rax]; xchg ax, ax; mov eax, 0x7a; syscall;
0x000fde74: nop [rax+rax]; xchg ax, ax; mov eax, 0x7a; syscall;
0x000fde75: nop [rax+rax]; xchg ax, ax; mov eax, 0x7a; syscall;
0x000fde76: nop [rax+rax]; xchg ax, ax; mov eax, 0x7a; syscall;
0x000fde78: test [rax], al; add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0x7a; syscall;
0x000fde79: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, 0x7a; syscall;
0x000fde7a: add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0x7a; syscall;
0x000fde7b: add [rax], al; add [rsi-0x70], ah; mov eax, 0x7a; syscall;
0x000fde7c: add [rax], al; xchg ax, ax; mov eax, 0x7a; syscall;
0x000fde7d: add [rsi-0x70], ah; mov eax, 0x7a; syscall;
0x000fde7e: xchg ax, ax; mov eax, 0x7a; syscall;
0x000fde7f: nop; mov eax, 0x7a; syscall;
0x000fde80: mov eax, 0x7a; syscall;
0x000fde92: or eax, 0xbffd9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fde93: fcos; or eax, [rax]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fde9b: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x7b; syscall;
0x000fde9e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x7b; syscall;
0x000fde9f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x7b; syscall;
0x000fdea1: nop [rax+rax]; nop [rax+rax]; mov eax, 0x7b; syscall;
0x000fdea2: nop [rax+rax]; nop [rax+rax]; mov eax, 0x7b; syscall;
0x000fdea3: nop [rax+rax]; nop [rax+rax]; mov eax, 0x7b; syscall;
0x000fdea5: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x7b; syscall;
0x000fdea7: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x7b; syscall;
0x000fdea9: add [rax], al; nop [rax+rax]; mov eax, 0x7b; syscall;
0x000fdeab: nop [rax+rax]; mov eax, 0x7b; syscall;
0x000fdead: add [rax], r8b; mov eax, 0x7b; syscall;
0x000fdeae: add [rax], al; mov eax, 0x7b; syscall;
0x000fdeaf: add [rax+0x7b], bh; syscall;
0x000fdeb0: mov eax, 0x7b; syscall;
0x000fdec2: or eax, 0xbffa9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fdec3: test eax, 0xf7000bff; fsub st, dword ptr [rcx+rcx*4+1]; or rax, 0xffffffffffffffff; ret;
0x000fdec4: dec dword ptr [rbx]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+1]; or rax, 0xffffffffffffffff; ret;
0x000fdee8: add [rax], al; add [rbp+0x411975c0], al; mov ecx, 8; mov eax, 0x119; syscall;
0x000fdeea: add [rbp+0x411975c0], al; mov ecx, 8; mov eax, 0x119; syscall;
0x000fdeec: shl byte ptr [rbp+0x19], 0x41; mov ecx, 8; mov eax, 0x119; syscall;
0x000fdeee: sbb [rcx-0x47], eax; or [rax], al; add [rax], al; mov eax, 0x119; syscall;
0x000fdeef: mov r9d, 8; mov eax, 0x119; syscall;
0x000fdef0: mov ecx, 8; mov eax, 0x119; syscall;
0x000fdef1: or [rax], al; add [rax], al; mov eax, 0x119; syscall;
0x000fdef2: add [rax], al; add [rax+0x119], bh; syscall;
0x000fdef3: add [rax], al; mov eax, 0x119; syscall;
0x000fdef4: add [rax+0x119], bh; syscall;
0x000fdef5: mov eax, 0x119; syscall;
0x000fdef6: sbb [rcx], eax; add [rax], al; syscall;
0x000fdf01: push qword ptr [rdi+0x6c]; ret;
0x000fdf38: mov ebp, eax; mov edx, [rsp+0x10]; mov rsi, [rsp+8]; mov eax, 0x119; mov edi, [rsp+4]; syscall;
0x000fdf3a: mov edx, [rsp+0x10]; mov rsi, [rsp+8]; mov eax, 0x119; mov edi, [rsp+4]; syscall;
0x000fdf3b: push rsp; and al, 0x10; mov rsi, [rsp+8]; mov eax, 0x119; mov edi, [rsp+4]; syscall;
0x000fdf3c: and al, 0x10; mov rsi, [rsp+8]; mov eax, 0x119; mov edi, [rsp+4]; syscall;
0x000fdf3e: mov rsi, [rsp+8]; mov eax, 0x119; mov edi, [rsp+4]; syscall;
0x000fdf3f: mov esi, [rsp+8]; mov eax, 0x119; mov edi, [rsp+4]; syscall;
0x000fdf41: and al, 8; mov eax, 0x119; mov edi, [rsp+4]; syscall;
0x000fdf42: or [rax+0x119], bh; mov edi, [rsp+4]; syscall;
0x000fdf43: mov eax, 0x119; mov edi, [rsp+4]; syscall;
0x000fdf44: sbb [rcx], eax; add [rax], al; mov edi, [rsp+4]; syscall;
0x000fdf5e: outsb dx, [rsi]; clc; dec dword ptr [rbx+0x48042444]; add esp, 0x20; pop rbp; ret;
0x000fdf5f: clc; dec dword ptr [rbx+0x48042444]; add esp, 0x20; pop rbp; ret;
0x000fdf60: dec dword ptr [rbx+0x48042444]; add esp, 0x20; pop rbp; ret;
0x000fdf61: mov eax, [rsp+4]; add rsp, 0x20; pop rbp; ret;
0x000fdf63: and al, 4; add rsp, 0x20; pop rbp; ret;
0x000fdf64: add al, 0x48; add esp, 0x20; pop rbp; ret;
0x000fdf6f: add [rax-0x75], cl; adc eax, 0xbfef9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000fdf72: adc eax, 0xbfef9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000fdf73: stc; dec byte ptr [rbx]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+2]; mov eax, 0xffffffff; ret;
0x000fdf9a: mov ebx, 0x441f0f; add [rcx-0x77], al; sar byte ptr [rax+0x121], cl; mov edx, 8; syscall;
0x000fdf9b: nop [rax+rax]; mov r10d, edx; mov eax, 0x121; mov edx, 8; syscall;
0x000fdf9d: add [rax], r8b; mov r10d, edx; mov eax, 0x121; mov edx, 8; syscall;
0x000fdf9e: add [rax], al; mov r10d, edx; mov eax, 0x121; mov edx, 8; syscall;
0x000fdf9f: add [rcx-0x77], al; sar byte ptr [rax+0x121], cl; mov edx, 8; syscall;
0x000fdfa0: mov r10d, edx; mov eax, 0x121; mov edx, 8; syscall;
0x000fdfa1: mov edx, edx; mov eax, 0x121; mov edx, 8; syscall;
0x000fdfa2: sar byte ptr [rax+0x121], cl; mov edx, 8; syscall;
0x000fdfa3: mov eax, 0x121; mov edx, 8; syscall;
0x000fdfa4: and [rcx], eax; add [rax], al; mov edx, 8; syscall;
0x000fdfa5: add [rax], eax; add [rdx+8], bh; syscall;
0x000fdfa6: add [rax], al; mov edx, 8; syscall;
0x000fdfa7: add [rdx+8], bh; syscall;
0x000fdfa8: mov edx, 8; syscall;
0x000fdfa9: or [rax], al; add [rax], al; syscall;
0x000fdfbf: add [rax-0x75], cl; adc eax, 0xbfea9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000fdfc2: adc eax, 0xbfea9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000fdfc3: test eax, 0xf7000bfe; fsub st, dword ptr [rcx+rcx*4+2]; mov eax, 0xffffffff; ret;
0x000fdfc4: dec byte ptr [rbx]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+2]; mov eax, 0xffffffff; ret;
0x000fdfd0: inc ebx; nop [rax+rax]; nop [rax]; mov eax, 0x122; syscall;
0x000fdfd2: nop [rax+rax]; nop [rax]; mov eax, 0x122; syscall;
0x000fdfd3: nop [rax+rax]; nop [rax]; mov eax, 0x122; syscall;
0x000fdfd4: nop [rax+rax]; nop [rax]; mov eax, 0x122; syscall;
0x000fdfd6: test [rax], al; add [rax], al; add [rax], al; nop [rax]; mov eax, 0x122; syscall;
0x000fdfd8: add [rax], al; add [rax], al; nop [rax]; mov eax, 0x122; syscall;
0x000fdfda: add [rax], al; nop [rax]; mov eax, 0x122; syscall;
0x000fdfdc: nop [rax]; mov eax, 0x122; syscall;
0x000fdfde: add [rax+0x122], dil; syscall;
0x000fdfdf: add [rax+0x122], bh; syscall;
0x000fdfe0: mov eax, 0x122; syscall;
0x000fdfe1: and al, [rcx]; add [rax], al; syscall;
0x000fdff2: or eax, 0xbfe79; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fdff4: dec byte ptr [rbx]; add bh, dh; fsub st, dword ptr [rcx+rcx*4+1]; or rax, 0xffffffffffffffff; ret;
0x000fe01e: cmp rax, 8; setne al; add rsp, 8; movzx eax, al; neg eax; ret;
0x000fe01f: cmp eax, 8; setne al; add rsp, 8; movzx eax, al; neg eax; ret;
0x000fe022: setne al; add rsp, 8; movzx eax, al; neg eax; ret;
0x000fe023: xchg ebp, eax; ror byte ptr [rax-0x7d], 0xc4; or [rdi], cl; mov dh, 0xc0; neg eax; ret;
0x000fe024: ror byte ptr [rax-0x7d], 0xc4; or [rdi], cl; mov dh, 0xc0; neg eax; ret;
0x000fe025: add rsp, 8; movzx eax, al; neg eax; ret;
0x000fe026: add esp, 8; movzx eax, al; neg eax; ret;
0x000fe028: or [rdi], cl; mov dh, 0xc0; neg eax; ret;
0x000fe048: cmp rax, 8; setne al; add rsp, 0x18; movzx eax, al; neg eax; ret;
0x000fe049: cmp eax, 8; setne al; add rsp, 0x18; movzx eax, al; neg eax; ret;
0x000fe04c: setne al; add rsp, 0x18; movzx eax, al; neg eax; ret;
0x000fe04d: xchg ebp, eax; ror byte ptr [rax-0x7d], 0xc4; sbb [rdi], cl; mov dh, 0xc0; neg eax; ret;
0x000fe04e: ror byte ptr [rax-0x7d], 0xc4; sbb [rdi], cl; mov dh, 0xc0; neg eax; ret;
0x000fe04f: add rsp, 0x18; movzx eax, al; neg eax; ret;
0x000fe050: add esp, 0x18; movzx eax, al; neg eax; ret;
0x000fe052: sbb [rdi], cl; mov dh, 0xc0; neg eax; ret;
0x000fe057: fadd st, st(3); nop [rax]; mov r10, rcx; mov eax, 0x12e; syscall;
0x000fe059: nop [rax]; mov r10, rcx; mov eax, 0x12e; syscall;
0x000fe05b: add byte ptr [rax], 0; add [rax], al; mov r10, rcx; mov eax, 0x12e; syscall;
0x000fe05c: add [rax], al; add [rax], al; mov r10, rcx; mov eax, 0x12e; syscall;
0x000fe05e: add [rax], al; mov r10, rcx; mov eax, 0x12e; syscall;
0x000fe060: mov r10, rcx; mov eax, 0x12e; syscall;
0x000fe061: mov edx, ecx; mov eax, 0x12e; syscall;
0x000fe063: mov eax, 0x12e; syscall;
0x000fe075: or eax, 0xbfdf6; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fe076: idiv ch; or eax, [rax]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fe07e: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; xchg ax, ax; mov eax, 0x87; syscall;
0x000fe081: enter 0xc3ff, 0x66; nop [rax+rax]; xchg ax, ax; mov eax, 0x87; syscall;
0x000fe082: inc ebx; nop [rax+rax]; xchg ax, ax; mov eax, 0x87; syscall;
0x000fe084: nop [rax+rax]; xchg ax, ax; mov eax, 0x87; syscall;
0x000fe085: nop [rax+rax]; xchg ax, ax; mov eax, 0x87; syscall;
0x000fe086: nop [rax+rax]; xchg ax, ax; mov eax, 0x87; syscall;
0x000fe088: test [rax], al; add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0x87; syscall;
0x000fe089: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, 0x87; syscall;
0x000fe08a: add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0x87; syscall;
0x000fe08b: add [rax], al; add [rsi-0x70], ah; mov eax, 0x87; syscall;
0x000fe08c: add [rax], al; xchg ax, ax; mov eax, 0x87; syscall;
0x000fe08d: add [rsi-0x70], ah; mov eax, 0x87; syscall;
0x000fe08e: xchg ax, ax; mov eax, 0x87; syscall;
0x000fe08f: nop; mov eax, 0x87; syscall;
0x000fe090: mov eax, 0x87; syscall;
0x000fe091: xchg [rax], eax; add [rax], al; syscall;
0x000fe0a2: or eax, 0xbfdc9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fe0a4: std; or eax, [rax]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fe0ce: adc [rax+0xe8], edi; syscall;
0x000fe0ff: mov edx, [rsp+0x18]; mov r8d, eax; mov rsi, [rsp+0x10]; mov edi, [rsp+0xc]; mov eax, 0xe8; syscall;
0x000fe101: and al, 0x18; mov r8d, eax; mov rsi, [rsp+0x10]; mov edi, [rsp+0xc]; mov eax, 0xe8; syscall;
0x000fe102: sbb [rcx-0x77], al; ror byte ptr [rax-0x75], 0x74; and al, 0x10; mov edi, [rsp+0xc]; mov eax, 0xe8; syscall;
0x000fe103: mov r8d, eax; mov rsi, [rsp+0x10]; mov edi, [rsp+0xc]; mov eax, 0xe8; syscall;
0x000fe104: mov eax, eax; mov rsi, [rsp+0x10]; mov edi, [rsp+0xc]; mov eax, 0xe8; syscall;
0x000fe105: ror byte ptr [rax-0x75], 0x74; and al, 0x10; mov edi, [rsp+0xc]; mov eax, 0xe8; syscall;
0x000fe106: mov rsi, [rsp+0x10]; mov edi, [rsp+0xc]; mov eax, 0xe8; syscall;
0x000fe107: mov esi, [rsp+0x10]; mov edi, [rsp+0xc]; mov eax, 0xe8; syscall;
0x000fe109: and al, 0x10; mov edi, [rsp+0xc]; mov eax, 0xe8; syscall;
0x000fe10b: mov edi, [rsp+0xc]; mov eax, 0xe8; syscall;
0x000fe10d: and al, 0xc; mov eax, 0xe8; syscall;
0x000fe10f: mov eax, 0xe8; syscall;
0x000fe124: or al, 0xe8; mov dh, 0x6c; clc; dec dword ptr [rbx+0x480c2444]; add esp, 0x28; ret;
0x000fe126: mov dh, 0x6c; clc; dec dword ptr [rbx+0x480c2444]; add esp, 0x28; ret;
0x000fe127: insb [rdi], dx; clc; dec dword ptr [rbx+0x480c2444]; add esp, 0x28; ret;
0x000fe137: add [rax-0x75], cl; adc eax, 0xbfd31; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000fe13a: adc eax, 0xbfd31; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000fe13b: xor ebp, edi; or eax, [rax]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000fe13c: std; or eax, [rax]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000fe178: add [rax], al; add [rbp-0x47ee8a40], al; adc al, 1; add [rax], al; syscall;
0x000fe17a: add [rbp-0x47ee8a40], al; adc al, 1; add [rax], al; syscall;
0x000fe17c: shl byte ptr [rbp+0x11], 0xb8; adc al, 1; add [rax], al; syscall;
0x000fe17e: adc [rax+0x114], edi; syscall;
0x000fe1af: mov rdx, [rsp+0x10]; mov r8d, eax; mov esi, [rsp+0x18]; mov edi, [rsp+8]; mov eax, 0x114; syscall;
0x000fe1b0: mov edx, [rsp+0x10]; mov r8d, eax; mov esi, [rsp+0x18]; mov edi, [rsp+8]; mov eax, 0x114; syscall;
0x000fe1b2: and al, 0x10; mov r8d, eax; mov esi, [rsp+0x18]; mov edi, [rsp+8]; mov eax, 0x114; syscall;
0x000fe1b3: adc [rcx-0x77], al; ror byte ptr [rbx-0x74e7db8c], 0x7c; and al, 8; mov eax, 0x114; syscall;
0x000fe1b4: mov r8d, eax; mov esi, [rsp+0x18]; mov edi, [rsp+8]; mov eax, 0x114; syscall;
0x000fe1b5: mov eax, eax; mov esi, [rsp+0x18]; mov edi, [rsp+8]; mov eax, 0x114; syscall;
0x000fe1b6: ror byte ptr [rbx-0x74e7db8c], 0x7c; and al, 8; mov eax, 0x114; syscall;
0x000fe1b7: mov esi, [rsp+0x18]; mov edi, [rsp+8]; mov eax, 0x114; syscall;
0x000fe1b9: and al, 0x18; mov edi, [rsp+8]; mov eax, 0x114; syscall;
0x000fe1ba: sbb [rbx-0x47f7db84], cl; adc al, 1; add [rax], al; syscall;
0x000fe1bb: mov edi, [rsp+8]; mov eax, 0x114; syscall;
0x000fe1bd: and al, 8; mov eax, 0x114; syscall;
0x000fe1be: or [rax+0x114], bh; syscall;
0x000fe1bf: mov eax, 0x114; syscall;
0x000fe1c0: adc al, 1; add [rax], al; syscall;
0x000fe1d5: or al, ch; add eax, 0x48fff86c; mov eax, [rsp+8]; add rsp, 0x28; ret;
0x000fe1d7: add eax, 0x48fff86c; mov eax, [rsp+8]; add rsp, 0x28; ret;
0x000fe1d8: insb [rdi], dx; clc; dec dword ptr [rax-0x75]; and al, 8; add rsp, 0x28; ret;
0x000fe1e5: nop [rax]; mov rdx, [rip+0xc9e39]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000fe1e7: add [rax-0x75], cl; adc eax, 0xbfc81; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000fe1ea: adc eax, 0xbfc81; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000fe1eb: cmp esp, 0xd8f7000b; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000fe1ec: cld; or eax, [rax]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000fe22e: adc [rax+0x116], edi; syscall;
0x000fe25f: mov rdx, [rsp+0x10]; mov r8d, eax; mov rsi, [rsp+8]; mov edi, [rsp]; mov eax, 0x116; syscall;
0x000fe260: mov edx, [rsp+0x10]; mov r8d, eax; mov rsi, [rsp+8]; mov edi, [rsp]; mov eax, 0x116; syscall;
0x000fe262: and al, 0x10; mov r8d, eax; mov rsi, [rsp+8]; mov edi, [rsp]; mov eax, 0x116; syscall;
0x000fe263: adc [rcx-0x77], al; ror byte ptr [rax-0x75], 0x74; and al, 8; mov edi, [rsp]; mov eax, 0x116; syscall;
0x000fe264: mov r8d, eax; mov rsi, [rsp+8]; mov edi, [rsp]; mov eax, 0x116; syscall;
0x000fe265: mov eax, eax; mov rsi, [rsp+8]; mov edi, [rsp]; mov eax, 0x116; syscall;
0x000fe266: ror byte ptr [rax-0x75], 0x74; and al, 8; mov edi, [rsp]; mov eax, 0x116; syscall;
0x000fe267: mov rsi, [rsp+8]; mov edi, [rsp]; mov eax, 0x116; syscall;
0x000fe268: mov esi, [rsp+8]; mov edi, [rsp]; mov eax, 0x116; syscall;
0x000fe26a: and al, 8; mov edi, [rsp]; mov eax, 0x116; syscall;
0x000fe26c: mov edi, [rsp]; mov eax, 0x116; syscall;
0x000fe26d: cmp al, 0x24; mov eax, 0x116; syscall;
0x000fe26f: mov eax, 0x116; syscall;
0x000fe284: and al, 0xe8; push rsi; imul edi, eax, 0xffffffff; mov rax, [rsp]; add rsp, 0x28; ret;
0x000fe286: push rsi; imul edi, eax, 0xffffffff; mov rax, [rsp]; add rsp, 0x28; ret;
0x000fe287: imul edi, eax, 0xffffffff; mov rax, [rsp]; add rsp, 0x28; ret;
0x000fe288: clc; dec dword ptr [rax-0x75]; add al, 0x24; add rsp, 0x28; ret;
0x000fe289: dec dword ptr [rax-0x75]; add al, 0x24; add rsp, 0x28; ret;
0x000fe28a: mov rax, [rsp]; add rsp, 0x28; ret;
0x000fe28b: mov eax, [rsp]; add rsp, 0x28; ret;
0x000fe28c: add al, 0x24; add rsp, 0x28; ret;
0x000fe28d: and al, 0x48; add esp, 0x28; ret;
0x000fe297: add [rax-0x75], cl; adc eax, 0xbfbd1; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000fe29a: adc eax, 0xbfbd1; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000fe29b: sar ebx, 1; or eax, [rax]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000fe2d8: add [rax], al; add [rbp-0x47ee8a40], al; adc eax, [rcx]; add [rax], al; syscall;
0x000fe2da: add [rbp-0x47ee8a40], al; adc eax, [rcx]; add [rax], al; syscall;
0x000fe2dc: shl byte ptr [rbp+0x11], 0xb8; adc eax, [rcx]; add [rax], al; syscall;
0x000fe2de: adc [rax+0x113], edi; syscall;
0x000fe2df: mov eax, 0x113; syscall;
0x000fe2e0: adc eax, [rcx]; add [rax], al; syscall;
0x000fe322: mov r10, [rsp+0x18]; mov edx, [rsp+0x28]; mov eax, 0x113; mov rsi, [rsp+0x10]; mov edi, [rsp+8]; syscall;
0x000fe323: mov edx, [rsp+0x18]; mov edx, [rsp+0x28]; mov eax, 0x113; mov rsi, [rsp+0x10]; mov edi, [rsp+8]; syscall;
0x000fe325: and al, 0x18; mov edx, [rsp+0x28]; mov eax, 0x113; mov rsi, [rsp+0x10]; mov edi, [rsp+8]; syscall;
0x000fe326: sbb [rbx-0x47d7dbac], cl; adc eax, [rcx]; add [rax], al; mov rsi, [rsp+0x10]; mov edi, [rsp+8]; syscall;
0x000fe327: mov edx, [rsp+0x28]; mov eax, 0x113; mov rsi, [rsp+0x10]; mov edi, [rsp+8]; syscall;
0x000fe328: push rsp; and al, 0x28; mov eax, 0x113; mov rsi, [rsp+0x10]; mov edi, [rsp+8]; syscall;
0x000fe329: and al, 0x28; mov eax, 0x113; mov rsi, [rsp+0x10]; mov edi, [rsp+8]; syscall;
0x000fe32a: sub [rax+0x113], bh; mov rsi, [rsp+0x10]; mov edi, [rsp+8]; syscall;
0x000fe32b: mov eax, 0x113; mov rsi, [rsp+0x10]; mov edi, [rsp+8]; syscall;
0x000fe32c: adc eax, [rcx]; add [rax], al; mov rsi, [rsp+0x10]; mov edi, [rsp+8]; syscall;
0x000fe34c: push 0xfffffffffffffff8; dec dword ptr [rax-0x75]; and al, 8; add rsp, 0x30; pop rbp; ret;
0x000fe35f: add [rax-0x75], cl; adc eax, 0xbfb09; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000fe362: adc eax, 0xbfb09; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000fe363: or ebx, edi; or eax, [rax]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000fe364: sti; or eax, [rax]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000fe395: add [rax], al; add [rbp-0x47eb8a40], al; xor [rcx], al; add [rax], al; syscall;
0x000fe397: add [rbp-0x47eb8a40], al; xor [rcx], al; add [rax], al; syscall;
0x000fe399: shl byte ptr [rbp+0x14], 0xb8; xor [rcx], al; add [rax], al; syscall;
0x000fe39b: adc al, 0xb8; xor [rcx], al; add [rax], al; syscall;
0x000fe3c4: dec dword ptr [rbx+0x480c2454]; mov esi, [rsp]; mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x130; syscall;
0x000fe3c5: mov edx, [rsp+0xc]; mov rsi, [rsp]; mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x130; syscall;
0x000fe3c7: and al, 0xc; mov rsi, [rsp]; mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x130; syscall;
0x000fe3c8: or al, 0x48; mov esi, [rsp]; mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x130; syscall;
0x000fe3c9: mov rsi, [rsp]; mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x130; syscall;
0x000fe3ca: mov esi, [rsp]; mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x130; syscall;
0x000fe3cb: xor al, 0x24; mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x130; syscall;
0x000fe3cc: and al, 0x41; mov eax, eax; mov edi, [rsp+8]; mov eax, 0x130; syscall;
0x000fe3cd: mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x130; syscall;
0x000fe3ce: mov eax, eax; mov edi, [rsp+8]; mov eax, 0x130; syscall;
0x000fe3d0: mov edi, [rsp+8]; mov eax, 0x130; syscall;
0x000fe3d2: and al, 8; mov eax, 0x130; syscall;
0x000fe3d3: or [rax+0x130], bh; syscall;
0x000fe3d4: mov eax, 0x130; syscall;
0x000fe3d5: xor [rcx], al; add [rax], al; syscall;
0x000fe3ff: add [rax-0x75], cl; adc eax, 0xbfa69; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000fe402: adc eax, 0xbfa69; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000fe403: imul edi, edx, 0xd8f7000b; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000fe404: cli; or eax, [rax]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000fe434: mov eax, 0x145; syscall;
0x000fe453: add al, [rbx+0x3b7426f8]; mov eax, r8d; ret;
0x000fe458: cmp eax, [rcx+rcx*4-0x40]; ret;
0x000fe45d: nop [rax]; mov eax, 0x95; syscall;
0x000fe45f: add [rax+0x95], bh; syscall;
0x000fe460: mov eax, 0x95; syscall;
0x000fe46c: push qword ptr [rdi+0x39]; mov r8d, eax; mov eax, r8d; ret;
0x000fe46f: mov r8d, eax; mov eax, r8d; ret;
0x000fe470: mov eax, eax; mov eax, r8d; ret;
0x000fe4c7: xor [rax+0x149], bh; syscall;
0x000fe4c8: mov eax, 0x149; syscall;
0x000fe4d4: push qword ptr [rdi+9]; ret;
0x000fe4df: add [rax-0x75], cl; adc eax, 0xbf989; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000fe4e2: adc eax, 0xbf989; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000fe4e3: mov ecx, edi; or eax, [rax]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000fe4e4: stc; or eax, [rax]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000fe524: shl byte ptr [rcx], cl; rol byte ptr [rcx+rcx*4-0x3e], 1; or eax, esi; wrpkru; xor eax, eax; ret;
0x000fe525: and eax, edx; mov edx, r8d; or eax, esi; wrpkru; xor eax, eax; ret;
0x000fe526: rol byte ptr [rcx+rcx*4-0x3e], 1; or eax, esi; wrpkru; xor eax, eax; ret;
0x000fe527: mov edx, r8d; or eax, esi; wrpkru; xor eax, eax; ret;
0x000fe528: mov edx, eax; or eax, esi; wrpkru; xor eax, eax; ret;
0x000fe529: ret 0xf009;
0x000fe52a: or eax, esi; wrpkru; xor eax, eax; ret;
0x000fe52c: wrpkru; xor eax, eax; ret;
0x000fe52d: add edi, ebp; xor eax, eax; ret;
0x000fe52e: out dx, eax; xor eax, eax; ret;
0x000fe530: rol bl, 0x66; nop [rax+rax]; mov rax, [rip+0xbf931]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000fe532: nop [rax+rax]; mov rax, [rip+0xf82a1]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000fe537: add [rax-0x75], cl; add eax, 0xbf931; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000fe53a: add eax, 0xbf931; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000fe53b: xor ecx, edi; or eax, [rax]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000fe555: xor ecx, ecx; rdpkru; lea ecx, [rdi+rdi]; shr eax, cl; and eax, 3; ret;
0x000fe556: leave; rdpkru; lea ecx, [rdi+rdi]; shr eax, cl; and eax, 3; ret;
0x000fe557: rdpkru; lea ecx, [rdi+rdi]; shr eax, cl; and eax, 3; ret;
0x000fe558: add esi, ebp; lea ecx, [rdi+rdi]; shr eax, cl; and eax, 3; ret;
0x000fe559: out dx, al; lea ecx, [rdi+rdi]; shr eax, cl; and eax, 3; ret;
0x000fe55a: lea ecx, [rdi+rdi]; shr eax, cl; and eax, 3; ret;
0x000fe55b: or al, 0x3f; shr eax, cl; and eax, 3; ret;
0x000fe55d: shr eax, cl; and eax, 3; ret;
0x000fe55f: and eax, 3; ret;
0x000fe561: add eax, ebx; nop [rax+rax]; mov rax, [rip+0xbf901]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000fe563: nop [rax+rax]; mov rax, [rip+0x182139]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000fe565: add [rax], r8b; mov rax, [rip+0x182139]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000fe566: add [rax], al; mov rax, [rip+0x182139]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000fe567: add [rax-0x75], cl; add eax, 0xbf901; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000fe56a: add eax, 0xbf901; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000fe56b: add ecx, edi; or eax, [rax]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000fe56c: stc; or eax, [rax]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x000fe5b0: mov dword ptr [rsp], 8; mov [rsp+8], rax; lea rax, [rsp+0x20]; mov [rsp+0x10], rax; mov eax, 0x9d; syscall;
0x000fe5b5: add [rax], al; mov [rsp+8], rax; lea rax, [rsp+0x20]; mov [rsp+0x10], rax; mov eax, 0x9d; syscall;
0x000fe5b6: add [rax-0x77], cl; and al, 8; lea rax, [rsp+0x20]; mov [rsp+0x10], rax; mov eax, 0x9d; syscall;
0x000fe5b7: mov [rsp+8], rax; lea rax, [rsp+0x20]; mov [rsp+0x10], rax; mov eax, 0x9d; syscall;
0x000fe5b8: mov [rsp+8], eax; lea rax, [rsp+0x20]; mov [rsp+0x10], rax; mov eax, 0x9d; syscall;
0x000fe5ba: and al, 8; lea rax, [rsp+0x20]; mov [rsp+0x10], rax; mov eax, 0x9d; syscall;
0x000fe5bb: or [rax-0x73], cl; and al, 0x20; mov [rsp+0x10], rax; mov eax, 0x9d; syscall;
0x000fe5bc: lea rax, [rsp+0x20]; mov [rsp+0x10], rax; mov eax, 0x9d; syscall;
0x000fe5bd: lea eax, [rsp+0x20]; mov [rsp+0x10], rax; mov eax, 0x9d; syscall;
0x000fe5bf: and al, 0x20; mov [rsp+0x10], rax; mov eax, 0x9d; syscall;
0x000fe5c0: and [rax-0x77], cl; and al, 0x10; mov eax, 0x9d; syscall;
0x000fe5c1: mov [rsp+0x10], rax; mov eax, 0x9d; syscall;
0x000fe5c2: mov [rsp+0x10], eax; mov eax, 0x9d; syscall;
0x000fe5c4: and al, 0x10; mov eax, 0x9d; syscall;
0x000fe5c5: adc [rax+0x9d], bh; syscall;
0x000fe5c6: mov eax, 0x9d; syscall;
0x000fe5e0: add [rax], al; add [rbp+0x1e], dh; add rsp, 0x58; ret;
0x000fe5e2: add [rbp+0x1e], dh; add rsp, 0x58; ret;
0x000fe604: sbb al, dh; add [rax], al; nop [rax+rax]; mov r10, rcx; mov eax, 0x136; syscall;
0x000fe606: add [rax], al; nop [rax+rax]; mov r10, rcx; mov eax, 0x136; syscall;
0x000fe608: nop [rax+rax]; mov r10, rcx; mov eax, 0x136; syscall;
0x000fe60a: test [rax], al; add [rax], al; add [rax], al; mov r10, rcx; mov eax, 0x136; syscall;
0x000fe60c: add [rax], al; add [rax], al; mov r10, rcx; mov eax, 0x136; syscall;
0x000fe60e: add [rax], al; mov r10, rcx; mov eax, 0x136; syscall;
0x000fe610: mov r10, rcx; mov eax, 0x136; syscall;
0x000fe611: mov edx, ecx; mov eax, 0x136; syscall;
0x000fe613: mov eax, 0x136; syscall;
0x000fe627: add [rax-0x75], cl; adc eax, 0xbf841; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000fe62a: adc eax, 0xbf841; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000fe63a: inc ebx; nop [rax]; mov r10, rcx; mov eax, 0x137; syscall;
0x000fe63c: nop [rax]; mov r10, rcx; mov eax, 0x137; syscall;
0x000fe640: mov r10, rcx; mov eax, 0x137; syscall;
0x000fe641: mov edx, ecx; mov eax, 0x137; syscall;
0x000fe643: mov eax, 0x137; syscall;
0x000fe657: add [rax-0x75], cl; adc eax, 0xbf811; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000fe65a: adc eax, 0xbf811; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000fe65b: adc eax, edi; or eax, [rax]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000fe65c: clc; or eax, [rax]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000fe66a: inc ebx; nop [rax]; mov eax, 0x9e; syscall;
0x000fe66c: nop [rax]; mov eax, 0x9e; syscall;
0x000fe66e: add [rax+0x9e], dil; syscall;
0x000fe66f: add [rax+0x9e], bh; syscall;
0x000fe670: mov eax, 0x9e; syscall;
0x000fe682: or eax, 0xbf7e9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fe68b: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x9a; syscall;
0x000fe68e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x9a; syscall;
0x000fe68f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x9a; syscall;
0x000fe691: nop [rax+rax]; nop [rax+rax]; mov eax, 0x9a; syscall;
0x000fe692: nop [rax+rax]; nop [rax+rax]; mov eax, 0x9a; syscall;
0x000fe693: nop [rax+rax]; nop [rax+rax]; mov eax, 0x9a; syscall;
0x000fe695: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x9a; syscall;
0x000fe697: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x9a; syscall;
0x000fe699: add [rax], al; nop [rax+rax]; mov eax, 0x9a; syscall;
0x000fe69b: nop [rax+rax]; mov eax, 0x9a; syscall;
0x000fe69d: add [rax], r8b; mov eax, 0x9a; syscall;
0x000fe69e: add [rax], al; mov eax, 0x9a; syscall;
0x000fe69f: add [rax+0x9a], bh; syscall;
0x000fe6a0: mov eax, 0x9a; syscall;
0x000fe6b2: or eax, 0xbf7b9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fe6b3: mov ecx, 0xf7000bf7; fsub st, dword ptr [rcx+rcx*4+1]; or rax, 0xffffffffffffffff; ret;
0x000fe6bb: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0xe4; syscall;
0x000fe6be: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0xe4; syscall; ret;
0x000fe6be: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0xe4; syscall;
0x000fe6bf: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0xe4; syscall;
0x000fe6bf: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0xe4; syscall; ret;
0x000fe6c1: nop [rax+rax]; nop [rax+rax]; mov eax, 0xe4; syscall;
0x000fe6c1: nop [rax+rax]; nop [rax+rax]; mov eax, 0xe4; syscall; ret;
0x000fe6c2: nop [rax+rax]; nop [rax+rax]; mov eax, 0xe4; syscall; ret;
0x000fe6c2: nop [rax+rax]; nop [rax+rax]; mov eax, 0xe4; syscall;
0x000fe6c3: nop [rax+rax]; nop [rax+rax]; mov eax, 0xe4; syscall; ret;
0x000fe6c3: nop [rax+rax]; nop [rax+rax]; mov eax, 0xe4; syscall;
0x000fe6c5: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0xe4; syscall;
0x000fe6c7: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0xe4; syscall;
0x000fe6c7: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0xe4; syscall; ret;
0x000fe6c9: add [rax], al; nop [rax+rax]; mov eax, 0xe4; syscall; ret;
0x000fe6c9: add [rax], al; nop [rax+rax]; mov eax, 0xe4; syscall;
0x000fe6cb: nop [rax+rax]; mov eax, 0xe4; syscall; ret;
0x000fe6cb: nop [rax+rax]; mov eax, 0xe4; syscall;
0x000fe6cd: add [rax], r8b; mov eax, 0xe4; syscall; ret;
0x000fe6cd: add [rax], r8b; mov eax, 0xe4; syscall;
0x000fe6ce: add [rax], al; mov eax, 0xe4; syscall; ret;
0x000fe6ce: add [rax], al; mov eax, 0xe4; syscall;
0x000fe6cf: add [rax+0xe4], bh; syscall;
0x000fe6cf: add [rax+0xe4], bh; syscall; ret;
0x000fe6d0: mov eax, 0xe4; syscall;
0x000fe6d0: mov eax, 0xe4; syscall; ret;
0x000fe6d1: in al, 0; add [rax], al; syscall;
0x000fe6d1: in al, 0; add [rax], al; syscall; ret;
0x000fe6d8: nop [rax+rax]; mov r10, rcx; mov eax, 0x12d; syscall;
0x000fe6da: test [rax], al; add [rax], al; add [rax], al; mov r10, rcx; mov eax, 0x12d; syscall;
0x000fe6dc: add [rax], al; add [rax], al; mov r10, rcx; mov eax, 0x12d; syscall;
0x000fe6de: add [rax], al; mov r10, rcx; mov eax, 0x12d; syscall;
0x000fe6e0: mov r10, rcx; mov eax, 0x12d; syscall;
0x000fe6e1: mov edx, ecx; mov eax, 0x12d; syscall;
0x000fe6e3: mov eax, 0x12d; syscall;
0x000fe6f5: or eax, 0xbf776; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fe6fe: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; xchg ax, ax; mov eax, 0x7d; syscall;
0x000fe701: enter 0xc3ff, 0x66; nop [rax+rax]; xchg ax, ax; mov eax, 0x7d; syscall;
0x000fe702: inc ebx; nop [rax+rax]; xchg ax, ax; mov eax, 0x7d; syscall;
0x000fe704: nop [rax+rax]; xchg ax, ax; mov eax, 0x7d; syscall;
0x000fe705: nop [rax+rax]; xchg ax, ax; mov eax, 0x7d; syscall;
0x000fe706: nop [rax+rax]; xchg ax, ax; mov eax, 0x7d; syscall;
0x000fe708: test [rax], al; add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0x7d; syscall;
0x000fe709: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, 0x7d; syscall;
0x000fe70a: add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0x7d; syscall;
0x000fe70b: add [rax], al; add [rsi-0x70], ah; mov eax, 0x7d; syscall;
0x000fe70c: add [rax], al; xchg ax, ax; mov eax, 0x7d; syscall;
0x000fe70d: add [rsi-0x70], ah; mov eax, 0x7d; syscall;
0x000fe70e: xchg ax, ax; mov eax, 0x7d; syscall;
0x000fe70f: nop; mov eax, 0x7d; syscall;
0x000fe710: mov eax, 0x7d; syscall;
0x000fe722: or eax, 0xbf749; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fe723: test qword ptr [r11], 0x64d8f700; mov [rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fe72b: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x7e; syscall;
0x000fe72e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x7e; syscall;
0x000fe72f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x7e; syscall;
0x000fe731: nop [rax+rax]; nop [rax+rax]; mov eax, 0x7e; syscall;
0x000fe732: nop [rax+rax]; nop [rax+rax]; mov eax, 0x7e; syscall;
0x000fe733: nop [rax+rax]; nop [rax+rax]; mov eax, 0x7e; syscall;
0x000fe735: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x7e; syscall;
0x000fe737: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x7e; syscall;
0x000fe739: add [rax], al; nop [rax+rax]; mov eax, 0x7e; syscall;
0x000fe73b: nop [rax+rax]; mov eax, 0x7e; syscall;
0x000fe73d: add [rax], r8b; mov eax, 0x7e; syscall;
0x000fe73e: add [rax], al; mov eax, 0x7e; syscall;
0x000fe73f: add [rax+0x7e], bh; syscall;
0x000fe740: mov eax, 0x7e; syscall;
0x000fe752: or eax, 0xbf719; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fe753: sbb edi, esi; or eax, [rax]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fe754: test dword ptr [rbx], 0x64d8f700; mov [rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fe75b: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x131; syscall;
0x000fe75e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x131; syscall;
0x000fe75f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x131; syscall;
0x000fe761: nop [rax+rax]; nop [rax+rax]; mov eax, 0x131; syscall;
0x000fe762: nop [rax+rax]; nop [rax+rax]; mov eax, 0x131; syscall;
0x000fe763: nop [rax+rax]; nop [rax+rax]; mov eax, 0x131; syscall;
0x000fe765: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x131; syscall;
0x000fe767: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x131; syscall;
0x000fe769: add [rax], al; nop [rax+rax]; mov eax, 0x131; syscall;
0x000fe76b: nop [rax+rax]; mov eax, 0x131; syscall;
0x000fe76d: add [rax], r8b; mov eax, 0x131; syscall;
0x000fe76e: add [rax], al; mov eax, 0x131; syscall;
0x000fe76f: add [rax+0x131], bh; syscall;
0x000fe770: mov eax, 0x131; syscall;
0x000fe771: xor [rcx], eax; add [rax], al; syscall;
0x000fe782: or eax, 0xbf6e9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fe78b: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0xae; syscall;
0x000fe78e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0xae; syscall;
0x000fe78f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0xae; syscall;
0x000fe791: nop [rax+rax]; nop [rax+rax]; mov eax, 0xae; syscall;
0x000fe792: nop [rax+rax]; nop [rax+rax]; mov eax, 0xae; syscall;
0x000fe793: nop [rax+rax]; nop [rax+rax]; mov eax, 0xae; syscall;
0x000fe795: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0xae; syscall;
0x000fe797: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0xae; syscall;
0x000fe799: add [rax], al; nop [rax+rax]; mov eax, 0xae; syscall;
0x000fe79b: nop [rax+rax]; mov eax, 0xae; syscall;
0x000fe79d: add [rax], r8b; mov eax, 0xae; syscall;
0x000fe79e: add [rax], al; mov eax, 0xae; syscall;
0x000fe79f: add [rax+0xae], bh; syscall;
0x000fe7a0: mov eax, 0xae; syscall;
0x000fe7b2: or eax, 0xbf6b9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fe7b3: mov ecx, 0xf7000bf6; fsub st, dword ptr [rcx+rcx*4+1]; or rax, 0xffffffffffffffff; ret;
0x000fe7bb: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0xb0; syscall;
0x000fe7be: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0xb0; syscall;
0x000fe7bf: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0xb0; syscall;
0x000fe7c1: nop [rax+rax]; nop [rax+rax]; mov eax, 0xb0; syscall;
0x000fe7c2: nop [rax+rax]; nop [rax+rax]; mov eax, 0xb0; syscall;
0x000fe7c3: nop [rax+rax]; nop [rax+rax]; mov eax, 0xb0; syscall;
0x000fe7c5: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0xb0; syscall;
0x000fe7c7: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0xb0; syscall;
0x000fe7c9: add [rax], al; nop [rax+rax]; mov eax, 0xb0; syscall;
0x000fe7cb: nop [rax+rax]; mov eax, 0xb0; syscall;
0x000fe7cd: add [rax], r8b; mov eax, 0xb0; syscall;
0x000fe7ce: add [rax], al; mov eax, 0xb0; syscall;
0x000fe7cf: add [rax+0xb0], bh; syscall;
0x000fe7d0: mov eax, 0xb0; syscall;
0x000fe7d1: mov al, 0; add [rax], al; syscall;
0x000fe7e2: or eax, 0xbf689; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fe7e3: mov esi, esi; or eax, [rax]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fe7eb: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0xd5; syscall;
0x000fe7ee: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0xd5; syscall;
0x000fe7ef: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0xd5; syscall;
0x000fe7f1: nop [rax+rax]; nop [rax+rax]; mov eax, 0xd5; syscall;
0x000fe7f2: nop [rax+rax]; nop [rax+rax]; mov eax, 0xd5; syscall;
0x000fe7f3: nop [rax+rax]; nop [rax+rax]; mov eax, 0xd5; syscall;
0x000fe7f5: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0xd5; syscall;
0x000fe7f7: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0xd5; syscall;
0x000fe7f9: add [rax], al; nop [rax+rax]; mov eax, 0xd5; syscall;
0x000fe7fb: nop [rax+rax]; mov eax, 0xd5; syscall;
0x000fe7fd: add [rax], r8b; mov eax, 0xd5; syscall;
0x000fe7fe: add [rax], al; mov eax, 0xd5; syscall;
0x000fe7ff: add [rax+0xd5], bh; syscall;
0x000fe800: mov eax, 0xd5; syscall;
0x000fe812: or eax, 0xbf659; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fe813: pop rcx; test byte ptr [rbx], 0; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fe81b: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x123; syscall;
0x000fe81e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x123; syscall;
0x000fe81f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x123; syscall;
0x000fe821: nop [rax+rax]; nop [rax+rax]; mov eax, 0x123; syscall;
0x000fe822: nop [rax+rax]; nop [rax+rax]; mov eax, 0x123; syscall;
0x000fe823: nop [rax+rax]; nop [rax+rax]; mov eax, 0x123; syscall;
0x000fe825: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x123; syscall;
0x000fe827: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x123; syscall;
0x000fe829: add [rax], al; nop [rax+rax]; mov eax, 0x123; syscall;
0x000fe82b: nop [rax+rax]; mov eax, 0x123; syscall;
0x000fe82d: add [rax], r8b; mov eax, 0x123; syscall;
0x000fe82e: add [rax], al; mov eax, 0x123; syscall;
0x000fe82f: add [rax+0x123], bh; syscall;
0x000fe830: mov eax, 0x123; syscall;
0x000fe831: and eax, [rcx]; add [rax], al; syscall;
0x000fe842: or eax, 0xbf629; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fe843: sub esi, esi; or eax, [rax]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fe844: test byte ptr [rbx], 0; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fe84e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xe9; syscall;
0x000fe84f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xe9; syscall;
0x000fe851: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xe9; syscall;
0x000fe852: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xe9; syscall;
0x000fe853: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xe9; syscall;
0x000fe857: add [rax], al; add [rax], al; nop [rax+rax]; mov r10, rcx; mov eax, 0xe9; syscall;
0x000fe859: add [rax], al; nop [rax+rax]; mov r10, rcx; mov eax, 0xe9; syscall;
0x000fe85b: nop [rax+rax]; mov r10, rcx; mov eax, 0xe9; syscall;
0x000fe85d: add [rax], r8b; mov r10, rcx; mov eax, 0xe9; syscall;
0x000fe85e: add [rax], al; mov r10, rcx; mov eax, 0xe9; syscall;
0x000fe860: mov r10, rcx; mov eax, 0xe9; syscall;
0x000fe861: mov edx, ecx; mov eax, 0xe9; syscall;
0x000fe863: mov eax, 0xe9; syscall;
0x000fe875: or eax, 0xbf5f6; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fe876: div ch; or eax, [rax]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fe87e: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; xchg ax, ax; mov eax, 0xb1; syscall;
0x000fe881: enter 0xc3ff, 0x66; nop [rax+rax]; xchg ax, ax; mov eax, 0xb1; syscall;
0x000fe882: inc ebx; nop [rax+rax]; xchg ax, ax; mov eax, 0xb1; syscall;
0x000fe884: nop [rax+rax]; xchg ax, ax; mov eax, 0xb1; syscall;
0x000fe885: nop [rax+rax]; xchg ax, ax; mov eax, 0xb1; syscall;
0x000fe886: nop [rax+rax]; xchg ax, ax; mov eax, 0xb1; syscall;
0x000fe888: test [rax], al; add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0xb1; syscall;
0x000fe889: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, 0xb1; syscall;
0x000fe88a: add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0xb1; syscall;
0x000fe88b: add [rax], al; add [rsi-0x70], ah; mov eax, 0xb1; syscall;
0x000fe88c: add [rax], al; xchg ax, ax; mov eax, 0xb1; syscall;
0x000fe88d: add [rsi-0x70], ah; mov eax, 0xb1; syscall;
0x000fe88e: xchg ax, ax; mov eax, 0xb1; syscall;
0x000fe88f: nop; mov eax, 0xb1; syscall;
0x000fe890: mov eax, 0xb1; syscall;
0x000fe891: mov cl, 0; add [rax], al; syscall;
0x000fe8a2: or eax, 0xbf5c9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fe8ae: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xaf; syscall;
0x000fe8af: inc ebx; nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xaf; syscall;
0x000fe8b1: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xaf; syscall;
0x000fe8b2: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xaf; syscall;
0x000fe8b3: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xaf; syscall;
0x000fe8b7: add [rax], al; add [rax], al; nop [rax+rax]; mov r10, rcx; mov eax, 0xaf; syscall;
0x000fe8b9: add [rax], al; nop [rax+rax]; mov r10, rcx; mov eax, 0xaf; syscall;
0x000fe8bb: nop [rax+rax]; mov r10, rcx; mov eax, 0xaf; syscall;
0x000fe8bd: add [rax], r8b; mov r10, rcx; mov eax, 0xaf; syscall;
0x000fe8be: add [rax], al; mov r10, rcx; mov eax, 0xaf; syscall;
0x000fe8c0: mov r10, rcx; mov eax, 0xaf; syscall;
0x000fe8c1: mov edx, ecx; mov eax, 0xaf; syscall;
0x000fe8c3: mov eax, 0xaf; syscall;
0x000fe8d5: or eax, 0xbf596; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fe8de: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; xchg ax, ax; mov eax, 0xfe; syscall;
0x000fe8e1: enter 0xc3ff, 0x66; nop [rax+rax]; xchg ax, ax; mov eax, 0xfe; syscall;
0x000fe8e2: inc ebx; nop [rax+rax]; xchg ax, ax; mov eax, 0xfe; syscall;
0x000fe8e4: nop [rax+rax]; xchg ax, ax; mov eax, 0xfe; syscall;
0x000fe8e5: nop [rax+rax]; xchg ax, ax; mov eax, 0xfe; syscall;
0x000fe8e6: nop [rax+rax]; xchg ax, ax; mov eax, 0xfe; syscall;
0x000fe8e8: test [rax], al; add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0xfe; syscall;
0x000fe8e9: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, 0xfe; syscall;
0x000fe8ea: add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0xfe; syscall;
0x000fe8eb: add [rax], al; add [rsi-0x70], ah; mov eax, 0xfe; syscall;
0x000fe8ec: add [rax], al; xchg ax, ax; mov eax, 0xfe; syscall;
0x000fe8ed: add [rsi-0x70], ah; mov eax, 0xfe; syscall;
0x000fe8ee: xchg ax, ax; mov eax, 0xfe; syscall;
0x000fe8ef: nop; mov eax, 0xfe; syscall;
0x000fe8f0: mov eax, 0xfe; syscall;
0x000fe8f1: inc byte ptr [rax]; add [rax], al; syscall;
0x000fe902: or eax, 0xbf569; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fe903: imul esi, ebp, 0xd8f7000b; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fe90b: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0xfd; syscall;
0x000fe90e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0xfd; syscall;
0x000fe90f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0xfd; syscall;
0x000fe911: nop [rax+rax]; nop [rax+rax]; mov eax, 0xfd; syscall;
0x000fe912: nop [rax+rax]; nop [rax+rax]; mov eax, 0xfd; syscall;
0x000fe913: nop [rax+rax]; nop [rax+rax]; mov eax, 0xfd; syscall;
0x000fe915: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0xfd; syscall;
0x000fe917: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0xfd; syscall;
0x000fe919: add [rax], al; nop [rax+rax]; mov eax, 0xfd; syscall;
0x000fe91b: nop [rax+rax]; mov eax, 0xfd; syscall;
0x000fe91d: add [rax], r8b; mov eax, 0xfd; syscall;
0x000fe91e: add [rax], al; mov eax, 0xfd; syscall;
0x000fe91f: add [rax+0xfd], bh; syscall;
0x000fe920: mov eax, 0xfd; syscall;
0x000fe932: or eax, 0xbf539; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fe933: cmp ebp, esi; or eax, [rax]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fe93b: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x126; syscall;
0x000fe93e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x126; syscall;
0x000fe93f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x126; syscall;
0x000fe941: nop [rax+rax]; nop [rax+rax]; mov eax, 0x126; syscall;
0x000fe942: nop [rax+rax]; nop [rax+rax]; mov eax, 0x126; syscall;
0x000fe943: nop [rax+rax]; nop [rax+rax]; mov eax, 0x126; syscall;
0x000fe945: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x126; syscall;
0x000fe947: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x126; syscall;
0x000fe949: add [rax], al; nop [rax+rax]; mov eax, 0x126; syscall;
0x000fe94b: nop [rax+rax]; mov eax, 0x126; syscall;
0x000fe94d: add [rax], r8b; mov eax, 0x126; syscall;
0x000fe94e: add [rax], al; mov eax, 0x126; syscall;
0x000fe94f: add [rax+0x126], bh; syscall;
0x000fe950: mov eax, 0x126; syscall;
0x000fe962: or eax, 0xbf509; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fe963: or ebp, esi; or eax, [rax]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fe964: cmc; or eax, [rax]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fe96b: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0xff; syscall;
0x000fe96e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0xff; syscall;
0x000fe96f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0xff; syscall;
0x000fe971: nop [rax+rax]; nop [rax+rax]; mov eax, 0xff; syscall;
0x000fe972: nop [rax+rax]; nop [rax+rax]; mov eax, 0xff; syscall;
0x000fe973: nop [rax+rax]; nop [rax+rax]; mov eax, 0xff; syscall;
0x000fe975: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0xff; syscall;
0x000fe977: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0xff; syscall;
0x000fe979: add [rax], al; nop [rax+rax]; mov eax, 0xff; syscall;
0x000fe97b: nop [rax+rax]; mov eax, 0xff; syscall;
0x000fe97d: add [rax], r8b; mov eax, 0xff; syscall;
0x000fe97e: add [rax], al; mov eax, 0xff; syscall;
0x000fe97f: add [rax+0xff], bh; syscall;
0x000fe980: mov eax, 0xff; syscall;
0x000fe981: inc dword ptr [rax]; add [rax], al; syscall;
0x000fe992: or eax, 0xbf4d9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fe993: fxtract; or eax, [rax]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fe99b: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x67; syscall;
0x000fe99e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x67; syscall;
0x000fe99f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x67; syscall;
0x000fe9a1: nop [rax+rax]; nop [rax+rax]; mov eax, 0x67; syscall;
0x000fe9a2: nop [rax+rax]; nop [rax+rax]; mov eax, 0x67; syscall;
0x000fe9a3: nop [rax+rax]; nop [rax+rax]; mov eax, 0x67; syscall;
0x000fe9a5: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x67; syscall;
0x000fe9a7: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x67; syscall;
0x000fe9a9: add [rax], al; nop [rax+rax]; mov eax, 0x67; syscall;
0x000fe9ab: nop [rax+rax]; mov eax, 0x67; syscall;
0x000fe9ad: add [rax], r8b; mov eax, 0x67; syscall;
0x000fe9ae: add [rax], al; mov eax, 0x67; syscall;
0x000fe9af: add [rax+0x67], bh; syscall;
0x000fe9b0: mov eax, 0x67; syscall;
0x000fe9c2: or eax, 0xbf4a9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fe9c3: test eax, 0xf7000bf4; fsub st, dword ptr [rcx+rcx*4+1]; or rax, 0xffffffffffffffff; ret;
0x000fe9ce: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xa5; syscall;
0x000fe9cf: inc ebx; nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xa5; syscall;
0x000fe9d1: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xa5; syscall;
0x000fe9d2: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xa5; syscall;
0x000fe9d3: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xa5; syscall;
0x000fe9d7: add [rax], al; add [rax], al; nop [rax+rax]; mov r10, rcx; mov eax, 0xa5; syscall;
0x000fe9d9: add [rax], al; nop [rax+rax]; mov r10, rcx; mov eax, 0xa5; syscall;
0x000fe9db: nop [rax+rax]; mov r10, rcx; mov eax, 0xa5; syscall;
0x000fe9dd: add [rax], r8b; mov r10, rcx; mov eax, 0xa5; syscall;
0x000fe9de: add [rax], al; mov r10, rcx; mov eax, 0xa5; syscall;
0x000fe9e0: mov r10, rcx; mov eax, 0xa5; syscall;
0x000fe9e1: mov edx, ecx; mov eax, 0xa5; syscall;
0x000fe9e3: mov eax, 0xa5; syscall;
0x000fe9f5: or eax, 0xbf476; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fea01: enter 0xc3ff, 0x66; nop [rax+rax]; xchg ax, ax; mov r10, rcx; mov eax, 0x19; syscall;
0x000fea02: inc ebx; nop [rax+rax]; xchg ax, ax; mov r10, rcx; mov eax, 0x19; syscall;
0x000fea04: nop [rax+rax]; xchg ax, ax; mov r10, rcx; mov eax, 0x19; syscall;
0x000fea05: nop [rax+rax]; xchg ax, ax; mov r10, rcx; mov eax, 0x19; syscall;
0x000fea06: nop [rax+rax]; xchg ax, ax; mov r10, rcx; mov eax, 0x19; syscall;
0x000fea09: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov r10, rcx; mov eax, 0x19; syscall;
0x000fea0a: add [rax], al; add [rax], al; xchg ax, ax; mov r10, rcx; mov eax, 0x19; syscall;
0x000fea0b: add [rax], al; add [rsi-0x70], ah; mov r10, rcx; mov eax, 0x19; syscall;
0x000fea0c: add [rax], al; xchg ax, ax; mov r10, rcx; mov eax, 0x19; syscall;
0x000fea0d: add [rsi-0x70], ah; mov r10, rcx; mov eax, 0x19; syscall;
0x000fea0e: xchg ax, ax; mov r10, rcx; mov eax, 0x19; syscall;
0x000fea0f: nop; mov r10, rcx; mov eax, 0x19; syscall;
0x000fea10: mov r10, rcx; mov eax, 0x19; syscall;
0x000fea11: mov edx, ecx; mov eax, 0x19; syscall;
0x000fea13: mov eax, 0x19; syscall;
0x000fea14: sbb [rax], eax; add [rax], al; syscall;
0x000fea25: or eax, 0xbf446; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fea2e: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; xchg ax, ax; mov eax, 0xb4; syscall;
0x000fea31: enter 0xc3ff, 0x66; nop [rax+rax]; xchg ax, ax; mov eax, 0xb4; syscall;
0x000fea32: inc ebx; nop [rax+rax]; xchg ax, ax; mov eax, 0xb4; syscall;
0x000fea34: nop [rax+rax]; xchg ax, ax; mov eax, 0xb4; syscall;
0x000fea35: nop [rax+rax]; xchg ax, ax; mov eax, 0xb4; syscall;
0x000fea36: nop [rax+rax]; xchg ax, ax; mov eax, 0xb4; syscall;
0x000fea38: test [rax], al; add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0xb4; syscall;
0x000fea39: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, 0xb4; syscall;
0x000fea3a: add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0xb4; syscall;
0x000fea3b: add [rax], al; add [rsi-0x70], ah; mov eax, 0xb4; syscall;
0x000fea3c: add [rax], al; xchg ax, ax; mov eax, 0xb4; syscall;
0x000fea3d: add [rsi-0x70], ah; mov eax, 0xb4; syscall;
0x000fea3e: xchg ax, ax; mov eax, 0xb4; syscall;
0x000fea3f: nop; mov eax, 0xb4; syscall;
0x000fea40: mov eax, 0xb4; syscall;
0x000fea41: mov ah, 0; add [rax], al; syscall;
0x000fea52: or eax, 0xbf419; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fea53: sbb esp, esi; or eax, [rax]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fea54: hlt; or eax, [rax]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fea5b: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x9b; syscall;
0x000fea5e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x9b; syscall;
0x000fea5f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x9b; syscall;
0x000fea61: nop [rax+rax]; nop [rax+rax]; mov eax, 0x9b; syscall;
0x000fea62: nop [rax+rax]; nop [rax+rax]; mov eax, 0x9b; syscall;
0x000fea63: nop [rax+rax]; nop [rax+rax]; mov eax, 0x9b; syscall;
0x000fea65: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x9b; syscall;
0x000fea67: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x9b; syscall;
0x000fea69: add [rax], al; nop [rax+rax]; mov eax, 0x9b; syscall;
0x000fea6b: nop [rax+rax]; mov eax, 0x9b; syscall;
0x000fea6d: add [rax], r8b; mov eax, 0x9b; syscall;
0x000fea6e: add [rax], al; mov eax, 0x9b; syscall;
0x000fea6f: add [rax+0x9b], bh; syscall;
0x000fea70: mov eax, 0x9b; syscall;
0x000fea82: or eax, 0xbf3e9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fea8e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xb2; syscall;
0x000fea8f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xb2; syscall;
0x000fea91: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xb2; syscall;
0x000fea92: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xb2; syscall;
0x000fea93: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0xb2; syscall;
0x000fea97: add [rax], al; add [rax], al; nop [rax+rax]; mov r10, rcx; mov eax, 0xb2; syscall;
0x000fea99: add [rax], al; nop [rax+rax]; mov r10, rcx; mov eax, 0xb2; syscall;
0x000fea9b: nop [rax+rax]; mov r10, rcx; mov eax, 0xb2; syscall;
0x000fea9d: add [rax], r8b; mov r10, rcx; mov eax, 0xb2; syscall;
0x000fea9e: add [rax], al; mov r10, rcx; mov eax, 0xb2; syscall;
0x000feaa0: mov r10, rcx; mov eax, 0xb2; syscall;
0x000feaa1: mov edx, ecx; mov eax, 0xb2; syscall;
0x000feaa3: mov eax, 0xb2; syscall;
0x000feaa4: mov dl, 0; add [rax], al; syscall;
0x000feab5: or eax, 0xbf3b6; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000feab6: mov dh, 0xf3; or eax, [rax]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000feac1: enter 0xc3ff, 0x66; nop [rax+rax]; xchg ax, ax; mov r10, rcx; mov eax, 0xb3; syscall;
0x000feac2: inc ebx; nop [rax+rax]; xchg ax, ax; mov r10, rcx; mov eax, 0xb3; syscall;
0x000feac4: nop [rax+rax]; xchg ax, ax; mov r10, rcx; mov eax, 0xb3; syscall;
0x000feac5: nop [rax+rax]; xchg ax, ax; mov r10, rcx; mov eax, 0xb3; syscall;
0x000feac6: nop [rax+rax]; xchg ax, ax; mov r10, rcx; mov eax, 0xb3; syscall;
0x000feac9: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov r10, rcx; mov eax, 0xb3; syscall;
0x000feaca: add [rax], al; add [rax], al; xchg ax, ax; mov r10, rcx; mov eax, 0xb3; syscall;
0x000feacb: add [rax], al; add [rsi-0x70], ah; mov r10, rcx; mov eax, 0xb3; syscall;
0x000feacc: add [rax], al; xchg ax, ax; mov r10, rcx; mov eax, 0xb3; syscall;
0x000feacd: add [rsi-0x70], ah; mov r10, rcx; mov eax, 0xb3; syscall;
0x000feace: xchg ax, ax; mov r10, rcx; mov eax, 0xb3; syscall;
0x000feacf: nop; mov r10, rcx; mov eax, 0xb3; syscall;
0x000fead0: mov r10, rcx; mov eax, 0xb3; syscall;
0x000fead1: mov edx, ecx; mov eax, 0xb3; syscall;
0x000fead3: mov eax, 0xb3; syscall;
0x000fead4: mov bl, 0; add [rax], al; syscall;
0x000feae5: or eax, 0xbf386; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000feae6: xchg bl, dh; or eax, [rax]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000feaee: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; xchg ax, ax; mov eax, 0x63; syscall;
0x000feaf1: enter 0xc3ff, 0x66; nop [rax+rax]; xchg ax, ax; mov eax, 0x63; syscall;
0x000feaf2: inc ebx; nop [rax+rax]; xchg ax, ax; mov eax, 0x63; syscall;
0x000feaf4: nop [rax+rax]; xchg ax, ax; mov eax, 0x63; syscall;
0x000feaf5: nop [rax+rax]; xchg ax, ax; mov eax, 0x63; syscall;
0x000feaf6: nop [rax+rax]; xchg ax, ax; mov eax, 0x63; syscall;
0x000feaf8: test [rax], al; add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0x63; syscall;
0x000feaf9: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, 0x63; syscall;
0x000feafa: add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0x63; syscall;
0x000feafb: add [rax], al; add [rsi-0x70], ah; mov eax, 0x63; syscall;
0x000feafc: add [rax], al; xchg ax, ax; mov eax, 0x63; syscall;
0x000feafd: add [rsi-0x70], ah; mov eax, 0x63; syscall;
0x000feafe: xchg ax, ax; mov eax, 0x63; syscall;
0x000feaff: nop; mov eax, 0x63; syscall;
0x000feb00: mov eax, 0x63; syscall;
0x000feb01: movsxd eax, [rax]; add [rax], al; syscall;
0x000feb12: or eax, 0xbf359; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000feb1b: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x110; syscall;
0x000feb1e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x110; syscall;
0x000feb1f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x110; syscall;
0x000feb21: nop [rax+rax]; nop [rax+rax]; mov eax, 0x110; syscall;
0x000feb22: nop [rax+rax]; nop [rax+rax]; mov eax, 0x110; syscall;
0x000feb23: nop [rax+rax]; nop [rax+rax]; mov eax, 0x110; syscall;
0x000feb25: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x110; syscall;
0x000feb27: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x110; syscall;
0x000feb29: add [rax], al; nop [rax+rax]; mov eax, 0x110; syscall;
0x000feb2b: nop [rax+rax]; mov eax, 0x110; syscall;
0x000feb2d: add [rax], r8b; mov eax, 0x110; syscall;
0x000feb2e: add [rax], al; mov eax, 0x110; syscall;
0x000feb2f: add [rax+0x110], bh; syscall;
0x000feb30: mov eax, 0x110; syscall;
0x000feb31: adc [rcx], al; add [rax], al; syscall;
0x000feb42: or eax, 0xbf329; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000feb43: sub ebx, esi; or eax, [rax]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000feb4b: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x86; syscall;
0x000feb4e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x86; syscall;
0x000feb4f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x86; syscall;
0x000feb51: nop [rax+rax]; nop [rax+rax]; mov eax, 0x86; syscall;
0x000feb52: nop [rax+rax]; nop [rax+rax]; mov eax, 0x86; syscall;
0x000feb53: nop [rax+rax]; nop [rax+rax]; mov eax, 0x86; syscall;
0x000feb55: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x86; syscall;
0x000feb57: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x86; syscall;
0x000feb59: add [rax], al; nop [rax+rax]; mov eax, 0x86; syscall;
0x000feb5b: nop [rax+rax]; mov eax, 0x86; syscall;
0x000feb5d: add [rax], r8b; mov eax, 0x86; syscall;
0x000feb5e: add [rax], al; mov eax, 0x86; syscall;
0x000feb5f: add [rax+0x86], bh; syscall;
0x000feb60: mov eax, 0x86; syscall;
0x000feb61: xchg [rax], al; add [rax], al; syscall;
0x000feb72: or eax, 0xbf2f9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000feb7b: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x11b; syscall;
0x000feb7e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x11b; syscall;
0x000feb7f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x11b; syscall;
0x000feb81: nop [rax+rax]; nop [rax+rax]; mov eax, 0x11b; syscall;
0x000feb82: nop [rax+rax]; nop [rax+rax]; mov eax, 0x11b; syscall;
0x000feb83: nop [rax+rax]; nop [rax+rax]; mov eax, 0x11b; syscall;
0x000feb85: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x11b; syscall;
0x000feb87: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x11b; syscall;
0x000feb89: add [rax], al; nop [rax+rax]; mov eax, 0x11b; syscall;
0x000feb8b: nop [rax+rax]; mov eax, 0x11b; syscall;
0x000feb8d: add [rax], r8b; mov eax, 0x11b; syscall;
0x000feb8e: add [rax], al; mov eax, 0x11b; syscall;
0x000feb8f: add [rax+0x11b], bh; syscall;
0x000feb90: mov eax, 0x11b; syscall;
0x000feb91: sbb eax, [rcx]; add [rax], al; syscall;
0x000feba2: or eax, 0xbf2c9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000febae: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x11e; syscall;
0x000febaf: inc ebx; nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x11e; syscall;
0x000febb1: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x11e; syscall;
0x000febb2: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x11e; syscall;
0x000febb3: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x11e; syscall;
0x000febb7: add [rax], al; add [rax], al; nop [rax+rax]; mov r10, rcx; mov eax, 0x11e; syscall;
0x000febb9: add [rax], al; nop [rax+rax]; mov r10, rcx; mov eax, 0x11e; syscall;
0x000febbb: nop [rax+rax]; mov r10, rcx; mov eax, 0x11e; syscall;
0x000febbd: add [rax], r8b; mov r10, rcx; mov eax, 0x11e; syscall;
0x000febbe: add [rax], al; mov r10, rcx; mov eax, 0x11e; syscall;
0x000febc0: mov r10, rcx; mov eax, 0x11e; syscall;
0x000febc1: mov edx, ecx; mov eax, 0x11e; syscall;
0x000febc3: mov eax, 0x11e; syscall;
0x000febd5: or eax, 0xbf296; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000febde: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; xchg ax, ax; mov eax, 0x11f; syscall;
0x000febe1: enter 0xc3ff, 0x66; nop [rax+rax]; xchg ax, ax; mov eax, 0x11f; syscall;
0x000febe2: inc ebx; nop [rax+rax]; xchg ax, ax; mov eax, 0x11f; syscall;
0x000febe4: nop [rax+rax]; xchg ax, ax; mov eax, 0x11f; syscall;
0x000febe5: nop [rax+rax]; xchg ax, ax; mov eax, 0x11f; syscall;
0x000febe6: nop [rax+rax]; xchg ax, ax; mov eax, 0x11f; syscall;
0x000febe8: test [rax], al; add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0x11f; syscall;
0x000febe9: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, 0x11f; syscall;
0x000febea: add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0x11f; syscall;
0x000febeb: add [rax], al; add [rsi-0x70], ah; mov eax, 0x11f; syscall;
0x000febec: add [rax], al; xchg ax, ax; mov eax, 0x11f; syscall;
0x000febed: add [rsi-0x70], ah; mov eax, 0x11f; syscall;
0x000febee: xchg ax, ax; mov eax, 0x11f; syscall;
0x000febef: nop; mov eax, 0x11f; syscall;
0x000febf0: mov eax, 0x11f; syscall;
0x000fec02: or eax, 0xbf269; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fec03: imul esi, edx, 0xd8f7000b; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fec0b: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x12c; syscall;
0x000fec0e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x12c; syscall;
0x000fec0f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x12c; syscall;
0x000fec11: nop [rax+rax]; nop [rax+rax]; mov eax, 0x12c; syscall;
0x000fec12: nop [rax+rax]; nop [rax+rax]; mov eax, 0x12c; syscall;
0x000fec13: nop [rax+rax]; nop [rax+rax]; mov eax, 0x12c; syscall;
0x000fec15: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x12c; syscall;
0x000fec17: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x12c; syscall;
0x000fec19: add [rax], al; nop [rax+rax]; mov eax, 0x12c; syscall;
0x000fec1b: nop [rax+rax]; mov eax, 0x12c; syscall;
0x000fec1d: add [rax], r8b; mov eax, 0x12c; syscall;
0x000fec1e: add [rax], al; mov eax, 0x12c; syscall;
0x000fec1f: add [rax+0x12c], bh; syscall;
0x000fec20: mov eax, 0x12c; syscall;
0x000fec21: sub al, 1; add [rax], al; syscall;
0x000fec32: or eax, 0xbf239; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fec33: cmp edx, esi; or eax, [rax]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fec3e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x12f; syscall;
0x000fec3f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x12f; syscall;
0x000fec41: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x12f; syscall;
0x000fec42: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x12f; syscall;
0x000fec43: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x12f; syscall;
0x000fec47: add [rax], al; add [rax], al; nop [rax+rax]; mov r10, rcx; mov eax, 0x12f; syscall;
0x000fec49: add [rax], al; nop [rax+rax]; mov r10, rcx; mov eax, 0x12f; syscall;
0x000fec4b: nop [rax+rax]; mov r10, rcx; mov eax, 0x12f; syscall;
0x000fec4d: add [rax], r8b; mov r10, rcx; mov eax, 0x12f; syscall;
0x000fec4e: add [rax], al; mov r10, rcx; mov eax, 0x12f; syscall;
0x000fec50: mov r10, rcx; mov eax, 0x12f; syscall;
0x000fec51: mov edx, ecx; mov eax, 0x12f; syscall;
0x000fec53: mov eax, 0x12f; syscall;
0x000fec65: or eax, 0xbf206; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fec6e: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; xchg ax, ax; mov eax, 0x134; syscall;
0x000fec71: enter 0xc3ff, 0x66; nop [rax+rax]; xchg ax, ax; mov eax, 0x134; syscall;
0x000fec72: inc ebx; nop [rax+rax]; xchg ax, ax; mov eax, 0x134; syscall;
0x000fec74: nop [rax+rax]; xchg ax, ax; mov eax, 0x134; syscall;
0x000fec75: nop [rax+rax]; xchg ax, ax; mov eax, 0x134; syscall;
0x000fec76: nop [rax+rax]; xchg ax, ax; mov eax, 0x134; syscall;
0x000fec78: test [rax], al; add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0x134; syscall;
0x000fec79: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, 0x134; syscall;
0x000fec7a: add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0x134; syscall;
0x000fec7b: add [rax], al; add [rsi-0x70], ah; mov eax, 0x134; syscall;
0x000fec7c: add [rax], al; xchg ax, ax; mov eax, 0x134; syscall;
0x000fec7d: add [rsi-0x70], ah; mov eax, 0x134; syscall;
0x000fec7e: xchg ax, ax; mov eax, 0x134; syscall;
0x000fec7f: nop; mov eax, 0x134; syscall;
0x000fec80: mov eax, 0x134; syscall;
0x000fec81: xor al, 1; add [rax], al; syscall;
0x000fec92: or eax, 0xbf1d9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fec93: fyl2x; or eax, [rax]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fec9b: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x13f; syscall;
0x000fec9e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x13f; syscall;
0x000fec9f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x13f; syscall;
0x000feca1: nop [rax+rax]; nop [rax+rax]; mov eax, 0x13f; syscall;
0x000feca2: nop [rax+rax]; nop [rax+rax]; mov eax, 0x13f; syscall;
0x000feca3: nop [rax+rax]; nop [rax+rax]; mov eax, 0x13f; syscall;
0x000feca5: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x13f; syscall;
0x000feca7: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x13f; syscall;
0x000feca9: add [rax], al; nop [rax+rax]; mov eax, 0x13f; syscall;
0x000fecab: nop [rax+rax]; mov eax, 0x13f; syscall;
0x000fecad: add [rax], r8b; mov eax, 0x13f; syscall;
0x000fecae: add [rax], al; mov eax, 0x13f; syscall;
0x000fecaf: add [rax+0x13f], bh; syscall;
0x000fecb0: mov eax, 0x13f; syscall;
0x000fecc2: or eax, 0xbf1a9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fecc3: test eax, 0xf7000bf1; fsub st, dword ptr [rcx+rcx*4+1]; or rax, 0xffffffffffffffff; ret;
0x000feccb: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x14a; syscall;
0x000fecce: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x14a; syscall;
0x000feccf: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x14a; syscall;
0x000fecd1: nop [rax+rax]; nop [rax+rax]; mov eax, 0x14a; syscall;
0x000fecd2: nop [rax+rax]; nop [rax+rax]; mov eax, 0x14a; syscall;
0x000fecd3: nop [rax+rax]; nop [rax+rax]; mov eax, 0x14a; syscall;
0x000fecd5: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x14a; syscall;
0x000fecd7: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x14a; syscall;
0x000fecd9: add [rax], al; nop [rax+rax]; mov eax, 0x14a; syscall;
0x000fecdb: nop [rax+rax]; mov eax, 0x14a; syscall;
0x000fecdd: add [rax], r8b; mov eax, 0x14a; syscall;
0x000fecde: add [rax], al; mov eax, 0x14a; syscall;
0x000fecdf: add [rax+0x14a], bh; syscall;
0x000fece0: mov eax, 0x14a; syscall;
0x000fecf2: or eax, 0xbf179; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fecfb: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x14b; syscall;
0x000fecfe: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x14b; syscall;
0x000fecff: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x14b; syscall;
0x000fed01: nop [rax+rax]; nop [rax+rax]; mov eax, 0x14b; syscall;
0x000fed02: nop [rax+rax]; nop [rax+rax]; mov eax, 0x14b; syscall;
0x000fed03: nop [rax+rax]; nop [rax+rax]; mov eax, 0x14b; syscall;
0x000fed05: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x14b; syscall;
0x000fed07: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x14b; syscall;
0x000fed09: add [rax], al; nop [rax+rax]; mov eax, 0x14b; syscall;
0x000fed0b: nop [rax+rax]; mov eax, 0x14b; syscall;
0x000fed0d: add [rax], r8b; mov eax, 0x14b; syscall;
0x000fed0e: add [rax], al; mov eax, 0x14b; syscall;
0x000fed0f: add [rax+0x14b], bh; syscall;
0x000fed10: mov eax, 0x14b; syscall;
0x000fed22: or eax, 0xbf149; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fed2b: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0xba; syscall;
0x000fed2e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0xba; syscall; ret;
0x000fed2e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0xba; syscall;
0x000fed2f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0xba; syscall;
0x000fed2f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0xba; syscall; ret;
0x000fed31: nop [rax+rax]; nop [rax+rax]; mov eax, 0xba; syscall;
0x000fed31: nop [rax+rax]; nop [rax+rax]; mov eax, 0xba; syscall; ret;
0x000fed32: nop [rax+rax]; nop [rax+rax]; mov eax, 0xba; syscall;
0x000fed32: nop [rax+rax]; nop [rax+rax]; mov eax, 0xba; syscall; ret;
0x000fed33: nop [rax+rax]; nop [rax+rax]; mov eax, 0xba; syscall; ret;
0x000fed33: nop [rax+rax]; nop [rax+rax]; mov eax, 0xba; syscall;
0x000fed35: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0xba; syscall;
0x000fed37: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0xba; syscall;
0x000fed37: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0xba; syscall; ret;
0x000fed39: add [rax], al; nop [rax+rax]; mov eax, 0xba; syscall; ret;
0x000fed39: add [rax], al; nop [rax+rax]; mov eax, 0xba; syscall;
0x000fed3b: nop [rax+rax]; mov eax, 0xba; syscall; ret;
0x000fed3b: nop [rax+rax]; mov eax, 0xba; syscall;
0x000fed3d: add [rax], r8b; mov eax, 0xba; syscall;
0x000fed3d: add [rax], r8b; mov eax, 0xba; syscall; ret;
0x000fed3e: add [rax], al; mov eax, 0xba; syscall;
0x000fed3e: add [rax], al; mov eax, 0xba; syscall; ret;
0x000fed3f: add [rax+0xba], bh; syscall; ret;
0x000fed3f: add [rax+0xba], bh; syscall;
0x000fed40: mov eax, 0xba; syscall; ret;
0x000fed40: mov eax, 0xba; syscall;
0x000fed41: mov edx, 0xf000000; add eax, 0x841f0fc3; add [rax], al; add [rax], al; add [rax+0xea], bh; syscall;
0x000fed44: add [rdi], cl; add eax, 0x841f0fc3; add [rax], al; add [rax], al; add [rax+0xea], bh; syscall;
0x000fed46: add eax, 0x841f0fc3; add [rax], al; add [rax], al; add [rax+0xea], bh; syscall;
0x000fed48: nop [rax+rax]; mov eax, 0xea; syscall;
0x000fed4a: test [rax], al; add [rax], al; add [rax], al; mov eax, 0xea; syscall;
0x000fed4b: add [rax], al; add [rax], al; add [rax+0xea], bh; syscall;
0x000fed4c: add [rax], al; add [rax], al; mov eax, 0xea; syscall;
0x000fed4d: add [rax], al; add [rax+0xea], bh; syscall;
0x000fed4e: add [rax], al; mov eax, 0xea; syscall;
0x000fed4f: add [rax+0xea], bh; syscall;
0x000fed50: mov eax, 0xea; syscall;
0x000fed62: or eax, 0xbf109; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fed63: or ecx, esi; or eax, [rax]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fed64: int1; or eax, [rax]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fed71: nop [rax+rax]; nop [rax+rax]; mov rax, [rip+0xbf0e9]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret;
0x000fed72: nop [rax+rax]; nop [rax+rax]; mov rax, [rip+0xbf0e9]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret;
0x000fed73: nop [rax+rax]; nop [rax+rax]; mov rax, [rip+0xbf0e9]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret;
0x000fed79: add [rax], al; nop [rax+rax]; mov rax, [rip+0xbf0e9]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret;
0x000fed7b: nop [rax+rax]; mov rax, [rip+0xbf0e9]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret;
0x000fed7d: add [rax], r8b; mov rax, [rip+0xbf0e9]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret;
0x000fed7e: add [rax], al; mov rax, [rip+0xc91c9]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret;
0x000fed7f: add [rax-0x75], cl; add eax, 0xbf0e9; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret;
0x000fed80: mov rax, [rip+0xc91c9]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret;
0x000fed81: mov eax, [rip+0xc91c9]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret;
0x000fed82: add eax, 0xbf0e9; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret;
0x000fed85: or eax, [rax]; mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret;
0x000fed87: mov dword ptr fs:[rax], 0x26; mov rax, 0xffffffffffffffff; ret;
0x000fed88: mov dword ptr [rax], 0x26; mov rax, 0xffffffffffffffff; ret;
0x000fed8c: add [rax], al; mov rax, 0xffffffffffffffff; ret;
0x000feda5: add [rax], al; add [rbp-0x47eb8a40], al; sub eax, [rax]; add [rax], al; syscall;
0x000feda7: add [rbp-0x47eb8a40], al; sub eax, [rax]; add [rax], al; syscall;
0x000feda9: shl byte ptr [rbp+0x14], 0xb8; sub eax, [rax]; add [rax], al; syscall;
0x000fedab: adc al, 0xb8; sub eax, [rax]; add [rax], al; syscall;
0x000fedd7: mov rdx, [rsp+0x18]; mov rsi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+0xc]; mov eax, 0x2b; syscall;
0x000fedd8: mov edx, [rsp+0x18]; mov rsi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+0xc]; mov eax, 0x2b; syscall;
0x000fedda: and al, 0x18; mov rsi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+0xc]; mov eax, 0x2b; syscall;
0x000feddc: mov rsi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+0xc]; mov eax, 0x2b; syscall;
0x000feddd: mov esi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+0xc]; mov eax, 0x2b; syscall;
0x000feddf: and al, 0x10; mov r8d, eax; mov edi, [rsp+0xc]; mov eax, 0x2b; syscall;
0x000fede1: mov r8d, eax; mov edi, [rsp+0xc]; mov eax, 0x2b; syscall;
0x000fede2: mov eax, eax; mov edi, [rsp+0xc]; mov eax, 0x2b; syscall;
0x000fede4: mov edi, [rsp+0xc]; mov eax, 0x2b; syscall;
0x000fede6: and al, 0xc; mov eax, 0x2b; syscall;
0x000fede7: or al, 0xb8; sub eax, [rax]; add [rax], al; syscall;
0x000fede8: mov eax, 0x2b; syscall;
0x000fede9: sub eax, [rax]; add [rax], al; syscall;
0x000fedfd: or al, 0xe8; fstp qword ptr [rdi-8], st; dec dword ptr [rbx+0x480c2444]; add esp, 0x28; ret;
0x000fedff: fstp qword ptr [rdi-8], st; dec dword ptr [rbx+0x480c2444]; add esp, 0x28; ret;
0x000fee00: pop rdi; clc; dec dword ptr [rbx+0x480c2444]; add esp, 0x28; ret;
0x000fee0c: nop [rax]; mov rdx, [rip+0xf2c41]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000fee0f: add [rax-0x75], cl; adc eax, 0xbf059; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000fee12: adc eax, 0xbf059; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000fee3a: mov esp, 0x441f0f; add [rax+0x31], bh; syscall;
0x000fee3b: nop [rax+rax]; mov eax, 0x31; syscall;
0x000fee3d: add [rax], r8b; mov eax, 0x31; syscall;
0x000fee3e: add [rax], al; mov eax, 0x31; syscall;
0x000fee3f: add [rax+0x31], bh; syscall;
0x000fee40: mov eax, 0x31; syscall;
0x000fee41: xor [rax], eax; add [rax], al; syscall;
0x000fee52: or eax, 0xbf019; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fee53: sbb eax, esi; or eax, [rax]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fee75: add [rax], al; add [rbp-0x47eb8a40], al; sub al, [rax]; add [rax], al; syscall;
0x000fee77: add [rbp-0x47eb8a40], al; sub al, [rax]; add [rax], al; syscall;
0x000fee79: shl byte ptr [rbp+0x14], 0xb8; sub al, [rax]; add [rax], al; syscall;
0x000fee7b: adc al, 0xb8; sub al, [rax]; add [rax], al; syscall;
0x000feea4: dec dword ptr [rbx+0x480c2454]; mov esi, [rsp]; mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x2a; syscall;
0x000feea5: mov edx, [rsp+0xc]; mov rsi, [rsp]; mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x2a; syscall;
0x000feea7: and al, 0xc; mov rsi, [rsp]; mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x2a; syscall;
0x000feea8: or al, 0x48; mov esi, [rsp]; mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x2a; syscall;
0x000feea9: mov rsi, [rsp]; mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x2a; syscall;
0x000feeaa: mov esi, [rsp]; mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x2a; syscall;
0x000feeab: xor al, 0x24; mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x2a; syscall;
0x000feeac: and al, 0x41; mov eax, eax; mov edi, [rsp+8]; mov eax, 0x2a; syscall;
0x000feead: mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x2a; syscall;
0x000feeae: mov eax, eax; mov edi, [rsp+8]; mov eax, 0x2a; syscall;
0x000feeb0: mov edi, [rsp+8]; mov eax, 0x2a; syscall;
0x000feeb2: and al, 8; mov eax, 0x2a; syscall;
0x000feeb3: or [rax+0x2a], bh; syscall;
0x000feeb4: mov eax, 0x2a; syscall;
0x000feeb5: sub al, [rax]; add [rax], al; syscall;
0x000feec9: or al, ch; adc [rdi-8], ebx; dec dword ptr [rbx+0x48082444]; add esp, 0x18; ret;
0x000feecb: adc [rdi-8], ebx; dec dword ptr [rbx+0x48082444]; add esp, 0x18; ret;
0x000feecc: pop rdi; clc; dec dword ptr [rbx+0x48082444]; add esp, 0x18; ret;
0x000feecd: clc; dec dword ptr [rbx+0x48082444]; add esp, 0x18; ret;
0x000feece: dec dword ptr [rbx+0x48082444]; add esp, 0x18; ret;
0x000feecf: mov eax, [rsp+8]; add rsp, 0x18; ret;
0x000feed1: and al, 8; add rsp, 0x18; ret;
0x000feed8: nop [rax+rax]; mov rdx, [rip+0x181d19]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000feedf: add [rax-0x75], cl; adc eax, 0xbef89; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000feee2: adc eax, 0xbef89; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000feee3: mov edi, ebp; or eax, [rax]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000feee4: out dx, eax; or eax, [rax]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000fef0a: mov eax, 0x441f0f; add [rax+0x34], bh; syscall;
0x000fef0b: nop [rax+rax]; mov eax, 0x34; syscall;
0x000fef0d: add [rax], r8b; mov eax, 0x34; syscall;
0x000fef0e: add [rax], al; mov eax, 0x34; syscall;
0x000fef0f: add [rax+0x34], bh; syscall;
0x000fef10: mov eax, 0x34; syscall;
0x000fef11: xor al, 0; add [rax], al; syscall;
0x000fef22: or eax, 0xbef49; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fef2b: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x33; syscall;
0x000fef2e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x33; syscall;
0x000fef2f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x33; syscall;
0x000fef31: nop [rax+rax]; nop [rax+rax]; mov eax, 0x33; syscall;
0x000fef32: nop [rax+rax]; nop [rax+rax]; mov eax, 0x33; syscall;
0x000fef33: nop [rax+rax]; nop [rax+rax]; mov eax, 0x33; syscall;
0x000fef35: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x33; syscall;
0x000fef37: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x33; syscall;
0x000fef39: add [rax], al; nop [rax+rax]; mov eax, 0x33; syscall;
0x000fef3b: nop [rax+rax]; mov eax, 0x33; syscall;
0x000fef3d: add [rax], r8b; mov eax, 0x33; syscall;
0x000fef3e: add [rax], al; mov eax, 0x33; syscall;
0x000fef3f: add [rax+0x33], bh; syscall;
0x000fef40: mov eax, 0x33; syscall;
0x000fef41: xor eax, [rax]; add [rax], al; syscall;
0x000fef52: or eax, 0xbef19; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fef53: sbb edi, ebp; or eax, [rax]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fef54: out dx, eax; or eax, [rax]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fef5e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x37; syscall;
0x000fef5f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x37; syscall;
0x000fef61: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x37; syscall;
0x000fef62: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x37; syscall;
0x000fef63: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x37; syscall;
0x000fef67: add [rax], al; add [rax], al; nop [rax+rax]; mov r10, rcx; mov eax, 0x37; syscall;
0x000fef69: add [rax], al; nop [rax+rax]; mov r10, rcx; mov eax, 0x37; syscall;
0x000fef6b: nop [rax+rax]; mov r10, rcx; mov eax, 0x37; syscall;
0x000fef6d: add [rax], r8b; mov r10, rcx; mov eax, 0x37; syscall;
0x000fef6e: add [rax], al; mov r10, rcx; mov eax, 0x37; syscall;
0x000fef70: mov r10, rcx; mov eax, 0x37; syscall;
0x000fef71: mov edx, ecx; mov eax, 0x37; syscall;
0x000fef73: mov eax, 0x37; syscall;
0x000fef85: or eax, 0xbeee6; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fef86: out 0xee, al; or eax, [rax]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fef8e: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; xchg ax, ax; mov eax, 0x32; syscall;
0x000fef91: enter 0xc3ff, 0x66; nop [rax+rax]; xchg ax, ax; mov eax, 0x32; syscall;
0x000fef92: inc ebx; nop [rax+rax]; xchg ax, ax; mov eax, 0x32; syscall;
0x000fef94: nop [rax+rax]; xchg ax, ax; mov eax, 0x32; syscall;
0x000fef95: nop [rax+rax]; xchg ax, ax; mov eax, 0x32; syscall;
0x000fef96: nop [rax+rax]; xchg ax, ax; mov eax, 0x32; syscall;
0x000fef98: test [rax], al; add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0x32; syscall;
0x000fef99: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, 0x32; syscall;
0x000fef9a: add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0x32; syscall;
0x000fef9b: add [rax], al; add [rsi-0x70], ah; mov eax, 0x32; syscall;
0x000fef9c: add [rax], al; xchg ax, ax; mov eax, 0x32; syscall;
0x000fef9d: add [rsi-0x70], ah; mov eax, 0x32; syscall;
0x000fef9e: xchg ax, ax; mov eax, 0x32; syscall;
0x000fef9f: nop; mov eax, 0x32; syscall;
0x000fefa0: mov eax, 0x32; syscall;
0x000fefa1: xor al, [rax]; add [rax], al; syscall;
0x000fefb2: or eax, 0xbeeb9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fefb3: mov ecx, 0xf7000bee; fsub st, dword ptr [rcx+rcx*4+1]; or rax, 0xffffffffffffffff; ret;
0x000fefb4: out dx, al; or eax, [rax]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000fefd8: add [rax], al; add [rbp+0x451975c0], al; xor ecx, ecx; xor r8d, r8d; mov eax, 0x2d; syscall;
0x000fefda: add [rbp+0x451975c0], al; xor ecx, ecx; xor r8d, r8d; mov eax, 0x2d; syscall;
0x000fefdc: shl byte ptr [rbp+0x19], 0x45; xor ecx, ecx; xor r8d, r8d; mov eax, 0x2d; syscall;
0x000fefde: sbb [rbp+0x31], eax; leave; xor r8d, r8d; mov eax, 0x2d; syscall;
0x000fefdf: xor r9d, r9d; xor r8d, r8d; mov eax, 0x2d; syscall;
0x000fefe0: xor ecx, ecx; xor r8d, r8d; mov eax, 0x2d; syscall;
0x000fefe1: leave; xor r8d, r8d; mov eax, 0x2d; syscall;
0x000ff01e: mov ebp, eax; mov rdx, [rsp+0x10]; mov rsi, [rsp+8]; xor r8d, r8d; mov eax, 0x2d; syscall;
0x000ff020: mov rdx, [rsp+0x10]; mov rsi, [rsp+8]; xor r8d, r8d; mov eax, 0x2d; syscall;
0x000ff021: mov edx, [rsp+0x10]; mov rsi, [rsp+8]; xor r8d, r8d; mov eax, 0x2d; syscall;
0x000ff022: push rsp; and al, 0x10; mov rsi, [rsp+8]; xor r8d, r8d; mov eax, 0x2d; syscall;
0x000ff023: and al, 0x10; mov rsi, [rsp+8]; xor r8d, r8d; mov eax, 0x2d; syscall;
0x000ff025: mov rsi, [rsp+8]; xor r8d, r8d; mov eax, 0x2d; syscall;
0x000ff026: mov esi, [rsp+8]; xor r8d, r8d; mov eax, 0x2d; syscall;
0x000ff028: and al, 8; xor r8d, r8d; mov eax, 0x2d; syscall;
0x000ff02a: xor r8d, r8d; mov eax, 0x2d; syscall;
0x000ff02b: xor eax, eax; mov eax, 0x2d; syscall;
0x000ff057: add [rax-0x75], cl; adc eax, 0xbee11; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000ff05a: adc eax, 0xbee11; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000ff05b: adc esi, ebp; or eax, [rax]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000ff05c: out dx, al; or eax, [rax]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000ff09e: adc [rax+0x2d], edi; syscall;
0x000ff09f: mov eax, 0x2d; syscall;
0x000ff0e1: mov r10d, [rsp+0x1c]; mov edi, [rsp]; mov eax, 0x2d; mov rdx, [rsp+0x10]; mov rsi, [rsp+8]; syscall;
0x000ff0e2: mov edx, [rsp+0x1c]; mov edi, [rsp]; mov eax, 0x2d; mov rdx, [rsp+0x10]; mov rsi, [rsp+8]; syscall;
0x000ff0e4: and al, 0x1c; mov edi, [rsp]; mov eax, 0x2d; mov rdx, [rsp+0x10]; mov rsi, [rsp+8]; syscall;
0x000ff0e5: sbb al, 0x8b; cmp al, 0x24; mov eax, 0x2d; mov rdx, [rsp+0x10]; mov rsi, [rsp+8]; syscall;
0x000ff0e6: mov edi, [rsp]; mov eax, 0x2d; mov rdx, [rsp+0x10]; mov rsi, [rsp+8]; syscall;
0x000ff0e7: cmp al, 0x24; mov eax, 0x2d; mov rdx, [rsp+0x10]; mov rsi, [rsp+8]; syscall;
0x000ff0e8: and al, 0xb8; sub eax, 0x48000000; mov edx, [rsp+0x10]; mov rsi, [rsp+8]; syscall;
0x000ff0e9: mov eax, 0x2d; mov rdx, [rsp+0x10]; mov rsi, [rsp+8]; syscall;
0x000ff0ea: sub eax, 0x48000000; mov edx, [rsp+0x10]; mov rsi, [rsp+8]; syscall;
0x000ff0eb: add [rax], al; add [rax-0x75], cl; push rsp; and al, 0x10; mov rsi, [rsp+8]; syscall;
0x000ff0ec: add [rax], al; mov rdx, [rsp+0x10]; mov rsi, [rsp+8]; syscall;
0x000ff0ed: add [rax-0x75], cl; push rsp; and al, 0x10; mov rsi, [rsp+8]; syscall;
0x000ff0ee: mov rdx, [rsp+0x10]; mov rsi, [rsp+8]; syscall;
0x000ff0ef: mov edx, [rsp+0x10]; mov rsi, [rsp+8]; syscall;
0x000ff0f0: push rsp; and al, 0x10; mov rsi, [rsp+8]; syscall;
0x000ff0f1: and al, 0x10; mov rsi, [rsp+8]; syscall;
0x000ff0f3: mov rsi, [rsp+8]; syscall;
0x000ff0f4: mov esi, [rsp+8]; syscall;
0x000ff107: and al, 0xe8; rcr dword ptr [rax+rdi*8-1], cl; mov rax, [rsp]; add rsp, 0x30; pop rbp; ret;
0x000ff109: rcr dword ptr [rax+rdi*8-1], cl; mov rax, [rsp]; add rsp, 0x30; pop rbp; ret;
0x000ff10b: clc; dec dword ptr [rax-0x75]; add al, 0x24; add rsp, 0x30; pop rbp; ret;
0x000ff10c: dec dword ptr [rax-0x75]; add al, 0x24; add rsp, 0x30; pop rbp; ret;
0x000ff10d: mov rax, [rsp]; add rsp, 0x30; pop rbp; ret;
0x000ff10e: mov eax, [rsp]; add rsp, 0x30; pop rbp; ret;
0x000ff10f: add al, 0x24; add rsp, 0x30; pop rbp; ret;
0x000ff110: and al, 0x48; add esp, 0x30; pop rbp; ret;
0x000ff117: nop [rax+rax]; mov rdx, [rip+0xbed49]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000ff118: nop [rax+rax]; mov rdx, [rip+0xbed49]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000ff11f: add [rax-0x75], cl; adc eax, 0xbed49; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000ff122: adc eax, 0xbed49; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000ff124: in eax, dx; or eax, [rax]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000ff185: dec dword ptr [rbx+0x481c2454]; mov esi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x2f; syscall;
0x000ff186: mov edx, [rsp+0x1c]; mov rsi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x2f; syscall;
0x000ff188: and al, 0x1c; mov rsi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x2f; syscall;
0x000ff189: sbb al, 0x48; mov esi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x2f; syscall;
0x000ff18a: mov rsi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x2f; syscall;
0x000ff18b: mov esi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x2f; syscall;
0x000ff18d: and al, 0x10; mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x2f; syscall;
0x000ff18f: mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x2f; syscall;
0x000ff190: mov eax, eax; mov edi, [rsp+8]; mov eax, 0x2f; syscall;
0x000ff192: mov edi, [rsp+8]; mov eax, 0x2f; syscall;
0x000ff194: and al, 8; mov eax, 0x2f; syscall;
0x000ff195: or [rax+0x2f], bh; syscall;
0x000ff196: mov eax, 0x2f; syscall;
0x000ff1ae: pop rsp; clc; dec dword ptr [rax-0x75]; and al, 8; add rsp, 0x28; ret;
0x000ff1af: pop rsp; clc; dec dword ptr [rax-0x75]; and al, 8; add rsp, 0x28; ret;
0x000ff1bf: add [rax-0x75], cl; adc eax, 0xbeca9; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000ff1c2: adc eax, 0xbeca9; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000ff1c3: test eax, 0xf7000bec; fsub st, dword ptr [rcx+rcx*4+2]; mov rax, 0xffffffffffffffff; ret;
0x000ff1c4: in al, dx; or eax, [rax]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000ff1f8: add [rax], al; add [rbp+0x451975c0], al; xor ecx, ecx; xor r8d, r8d; mov eax, 0x2c; syscall;
0x000ff1fa: add [rbp+0x451975c0], al; xor ecx, ecx; xor r8d, r8d; mov eax, 0x2c; syscall;
0x000ff1fc: shl byte ptr [rbp+0x19], 0x45; xor ecx, ecx; xor r8d, r8d; mov eax, 0x2c; syscall;
0x000ff1fe: sbb [rbp+0x31], eax; leave; xor r8d, r8d; mov eax, 0x2c; syscall;
0x000ff1ff: xor r9d, r9d; xor r8d, r8d; mov eax, 0x2c; syscall;
0x000ff200: xor ecx, ecx; xor r8d, r8d; mov eax, 0x2c; syscall;
0x000ff201: leave; xor r8d, r8d; mov eax, 0x2c; syscall;
0x000ff211: push qword ptr [rdi+0x64]; ret;
0x000ff23e: mov ebp, eax; mov rdx, [rsp+0x10]; mov rsi, [rsp+8]; xor r8d, r8d; mov eax, 0x2c; syscall;
0x000ff240: mov rdx, [rsp+0x10]; mov rsi, [rsp+8]; xor r8d, r8d; mov eax, 0x2c; syscall;
0x000ff241: mov edx, [rsp+0x10]; mov rsi, [rsp+8]; xor r8d, r8d; mov eax, 0x2c; syscall;
0x000ff242: push rsp; and al, 0x10; mov rsi, [rsp+8]; xor r8d, r8d; mov eax, 0x2c; syscall;
0x000ff243: and al, 0x10; mov rsi, [rsp+8]; xor r8d, r8d; mov eax, 0x2c; syscall;
0x000ff245: mov rsi, [rsp+8]; xor r8d, r8d; mov eax, 0x2c; syscall;
0x000ff246: mov esi, [rsp+8]; xor r8d, r8d; mov eax, 0x2c; syscall;
0x000ff248: and al, 8; xor r8d, r8d; mov eax, 0x2c; syscall;
0x000ff24a: xor r8d, r8d; mov eax, 0x2c; syscall;
0x000ff24b: xor eax, eax; mov eax, 0x2c; syscall;
0x000ff265: clc; dec dword ptr [rax-0x75]; add al, 0x24; add rsp, 0x20; pop rbp; ret;
0x000ff266: dec dword ptr [rax-0x75]; add al, 0x24; add rsp, 0x20; pop rbp; ret;
0x000ff267: mov rax, [rsp]; add rsp, 0x20; pop rbp; ret;
0x000ff268: mov eax, [rsp]; add rsp, 0x20; pop rbp; ret;
0x000ff269: add al, 0x24; add rsp, 0x20; pop rbp; ret;
0x000ff26a: and al, 0x48; add esp, 0x20; pop rbp; ret;
0x000ff271: nop [rax]; mov rdx, [rip+0xbee11]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000ff277: add [rax-0x75], cl; adc eax, 0xbebf1; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000ff27a: adc eax, 0xbebf1; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000ff2c8: push qword ptr [rdi+0x55]; ret;
0x000ff2ca: push rbp; ret;
0x000ff2e5: dec dword ptr [rbx+0x481c2454]; mov esi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x2e; syscall;
0x000ff2e6: mov edx, [rsp+0x1c]; mov rsi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x2e; syscall;
0x000ff2e8: and al, 0x1c; mov rsi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x2e; syscall;
0x000ff2e9: sbb al, 0x48; mov esi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x2e; syscall;
0x000ff2ea: mov rsi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x2e; syscall;
0x000ff2eb: mov esi, [rsp+0x10]; mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x2e; syscall;
0x000ff2ed: and al, 0x10; mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x2e; syscall;
0x000ff2ef: mov r8d, eax; mov edi, [rsp+8]; mov eax, 0x2e; syscall;
0x000ff2f0: mov eax, eax; mov edi, [rsp+8]; mov eax, 0x2e; syscall;
0x000ff2f2: mov edi, [rsp+8]; mov eax, 0x2e; syscall;
0x000ff2f4: and al, 8; mov eax, 0x2e; syscall;
0x000ff2f5: or [rax+0x2e], bh; syscall;
0x000ff2f6: mov eax, 0x2e; syscall;
0x000ff30f: pop rdx; clc; dec dword ptr [rax-0x75]; and al, 8; add rsp, 0x28; ret;
0x000ff310: clc; dec dword ptr [rax-0x75]; and al, 8; add rsp, 0x28; ret;
0x000ff311: dec dword ptr [rax-0x75]; and al, 8; add rsp, 0x28; ret;
0x000ff312: mov rax, [rsp+8]; add rsp, 0x28; ret;
0x000ff313: mov eax, [rsp+8]; add rsp, 0x28; ret;
0x000ff315: and al, 8; add rsp, 0x28; ret;
0x000ff31c: nop [rax]; mov rdx, [rip+0xd0ca1]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000ff31f: add [rax-0x75], cl; adc eax, 0xbeb49; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000ff322: adc eax, 0xbeb49; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000ff358: add [rax], al; add [rbp-0x47ee8a40], al; sub al, 0; add [rax], al; syscall;
0x000ff35a: add [rbp-0x47ee8a40], al; sub al, 0; add [rax], al; syscall;
0x000ff35c: shl byte ptr [rbp+0x11], 0xb8; sub al, 0; add [rax], al; syscall;
0x000ff35e: adc [rax+0x2c], edi; syscall;
0x000ff35f: mov eax, 0x2c; syscall;
0x000ff360: sub al, 0; add [rax], al; syscall;
0x000ff36b: push qword ptr [rdi+0x72]; ret;
0x000ff3a2: mov r10d, [rsp+0x28]; mov rdx, [rsp+0x18]; mov eax, 0x2c; mov rsi, [rsp+0x10]; mov edi, [rsp+8]; syscall;
0x000ff3a3: mov edx, [rsp+0x28]; mov rdx, [rsp+0x18]; mov eax, 0x2c; mov rsi, [rsp+0x10]; mov edi, [rsp+8]; syscall;
0x000ff3a5: and al, 0x28; mov rdx, [rsp+0x18]; mov eax, 0x2c; mov rsi, [rsp+0x10]; mov edi, [rsp+8]; syscall;
0x000ff3a7: mov rdx, [rsp+0x18]; mov eax, 0x2c; mov rsi, [rsp+0x10]; mov edi, [rsp+8]; syscall;
0x000ff3a8: mov edx, [rsp+0x18]; mov eax, 0x2c; mov rsi, [rsp+0x10]; mov edi, [rsp+8]; syscall;
0x000ff3a9: push rsp; and al, 0x18; mov eax, 0x2c; mov rsi, [rsp+0x10]; mov edi, [rsp+8]; syscall;
0x000ff3aa: and al, 0x18; mov eax, 0x2c; mov rsi, [rsp+0x10]; mov edi, [rsp+8]; syscall;
0x000ff3ab: sbb [rax+0x2c], bh; mov rsi, [rsp+0x10]; mov edi, [rsp+8]; syscall;
0x000ff3ac: mov eax, 0x2c; mov rsi, [rsp+0x10]; mov edi, [rsp+8]; syscall;
0x000ff3ad: sub al, 0; add [rax], al; mov rsi, [rsp+0x10]; mov edi, [rsp+8]; syscall;
0x000ff3af: add [rax], al; mov rsi, [rsp+0x10]; mov edi, [rsp+8]; syscall;
0x000ff3b1: mov rsi, [rsp+0x10]; mov edi, [rsp+8]; syscall;
0x000ff3b2: mov esi, [rsp+0x10]; mov edi, [rsp+8]; syscall;
0x000ff3b4: and al, 0x10; mov edi, [rsp+8]; syscall;
0x000ff3cc: adc [rdx-8], bl; dec dword ptr [rax-0x75]; and al, 8; add rsp, 0x30; pop rbp; ret;
0x000ff3ce: clc; dec dword ptr [rax-0x75]; and al, 8; add rsp, 0x30; pop rbp; ret;
0x000ff3cf: dec dword ptr [rax-0x75]; and al, 8; add rsp, 0x30; pop rbp; ret;
0x000ff3d0: mov rax, [rsp+8]; add rsp, 0x30; pop rbp; ret;
0x000ff3d1: mov eax, [rsp+8]; add rsp, 0x30; pop rbp; ret;
0x000ff3d3: and al, 8; add rsp, 0x30; pop rbp; ret;
0x000ff3d5: add rsp, 0x30; pop rbp; ret;
0x000ff3d6: add esp, 0x30; pop rbp; ret;
0x000ff3df: add [rax-0x75], cl; adc eax, 0xbea89; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000ff3e2: adc eax, 0xbea89; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000ff3e3: mov edx, ebp; or eax, [rax]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000ff40d: nop [rax]; mov r10, rcx; mov eax, 0x36; syscall;
0x000ff410: mov r10, rcx; mov eax, 0x36; syscall;
0x000ff411: mov edx, ecx; mov eax, 0x36; syscall;
0x000ff413: mov eax, 0x36; syscall;
0x000ff425: or eax, 0xbea46; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000ff42e: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; xchg ax, ax; mov eax, 0x30; syscall;
0x000ff431: enter 0xc3ff, 0x66; nop [rax+rax]; xchg ax, ax; mov eax, 0x30; syscall;
0x000ff432: inc ebx; nop [rax+rax]; xchg ax, ax; mov eax, 0x30; syscall;
0x000ff434: nop [rax+rax]; xchg ax, ax; mov eax, 0x30; syscall;
0x000ff435: nop [rax+rax]; xchg ax, ax; mov eax, 0x30; syscall;
0x000ff436: nop [rax+rax]; xchg ax, ax; mov eax, 0x30; syscall;
0x000ff438: test [rax], al; add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0x30; syscall;
0x000ff439: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, 0x30; syscall;
0x000ff43a: add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0x30; syscall;
0x000ff43b: add [rax], al; add [rsi-0x70], ah; mov eax, 0x30; syscall;
0x000ff43c: add [rax], al; xchg ax, ax; mov eax, 0x30; syscall;
0x000ff43d: add [rsi-0x70], ah; mov eax, 0x30; syscall;
0x000ff43e: xchg ax, ax; mov eax, 0x30; syscall;
0x000ff43f: nop; mov eax, 0x30; syscall;
0x000ff440: mov eax, 0x30; syscall;
0x000ff441: xor [rax], al; add [rax], al; syscall;
0x000ff452: or eax, 0xbea19; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000ff453: sbb edx, ebp; or eax, [rax]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000ff45b: add [rax-0x7d], ecx; enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x29; syscall;
0x000ff45e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov eax, 0x29; syscall;
0x000ff45f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov eax, 0x29; syscall;
0x000ff461: nop [rax+rax]; nop [rax+rax]; mov eax, 0x29; syscall;
0x000ff462: nop [rax+rax]; nop [rax+rax]; mov eax, 0x29; syscall;
0x000ff463: nop [rax+rax]; nop [rax+rax]; mov eax, 0x29; syscall;
0x000ff465: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x29; syscall;
0x000ff467: add [rax], al; add [rax], al; nop [rax+rax]; mov eax, 0x29; syscall;
0x000ff469: add [rax], al; nop [rax+rax]; mov eax, 0x29; syscall;
0x000ff46b: nop [rax+rax]; mov eax, 0x29; syscall;
0x000ff46d: add [rax], r8b; mov eax, 0x29; syscall;
0x000ff46e: add [rax], al; mov eax, 0x29; syscall;
0x000ff46f: add [rax+0x29], bh; syscall;
0x000ff470: mov eax, 0x29; syscall;
0x000ff471: sub [rax], eax; add [rax], al; syscall;
0x000ff482: or eax, 0xbe9e9; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000ff48e: enter 0xc3ff, 0x66; nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x35; syscall;
0x000ff48f: inc ebx; nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x35; syscall;
0x000ff491: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x35; syscall;
0x000ff492: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x35; syscall;
0x000ff493: nop [rax+rax]; nop [rax+rax]; mov r10, rcx; mov eax, 0x35; syscall;
0x000ff497: add [rax], al; add [rax], al; nop [rax+rax]; mov r10, rcx; mov eax, 0x35; syscall;
0x000ff499: add [rax], al; nop [rax+rax]; mov r10, rcx; mov eax, 0x35; syscall;
0x000ff49b: nop [rax+rax]; mov r10, rcx; mov eax, 0x35; syscall;
0x000ff49d: add [rax], r8b; mov r10, rcx; mov eax, 0x35; syscall;
0x000ff49e: add [rax], al; mov r10, rcx; mov eax, 0x35; syscall;
0x000ff4a0: mov r10, rcx; mov eax, 0x35; syscall;
0x000ff4a1: mov edx, ecx; mov eax, 0x35; syscall;
0x000ff4a3: mov eax, 0x35; syscall;
0x000ff4af: push qword ptr [rbx+1]; ret;
0x000ff4b1: add ebx, eax; mov rcx, [rip+0x181dd9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000ff4b3: mov rcx, [rip+0x181dd9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000ff4b4: mov ecx, [rip+0x181dd9]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000ff4b5: or eax, 0xbe9b6; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000ff4b6: mov dh, 0xe9; or eax, [rax]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000ff4b8: or eax, [rax]; neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000ff4b9: add bh, dh; fsub st, dword ptr [rcx+rcx*4+1]; or rax, 0xffffffffffffffff; ret;
0x000ff4ba: neg eax; mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000ff4bb: fsub st, dword ptr [rcx+rcx*4+1]; or rax, 0xffffffffffffffff; ret;
0x000ff4bc: mov fs:[rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000ff4bd: mov [rcx], eax; or rax, 0xffffffffffffffff; ret;
0x000ff4bf: or rax, 0xffffffffffffffff; ret;
0x000ff4c0: or eax, 0xffffffff; ret;
0x000ff535: add [rbp+0xc], dh; add rsp, 0xa0; pop rbx; pop rbp; pop r12; ret;
0x000ff537: or al, 0x48; add esp, 0xa0; pop rbx; pop rbp; pop r12; ret;
0x000ff538: add rsp, 0xa0; pop rbx; pop rbp; pop r12; ret;
0x000ff539: add esp, 0xa0; pop rbx; pop rbp; pop r12; ret;
0x000ff571: sbb [rcx], dh; rol byte ptr [rbp-0x74968b01], 0x35; ret 0xc34;
0x000ff573: rol byte ptr [rbp-0x74968b01], 0x35; ret 0xc34;
0x000ff57a: ret 0xc34;
0x000ff758: add [rax], al; add [rbp-0x47ee8a40], al; and [rcx], al; add [rax], al; syscall;
0x000ff75a: add [rbp-0x47ee8a40], al; and [rcx], al; add [rax], al; syscall;
0x000ff75c: shl byte ptr [rbp+0x11], 0xb8; and [rcx], al; add [rax], al; syscall;
0x000ff75e: adc [rax+0x120], edi; syscall;
0x000ff790: mov rdx, [rsp+0x10]; mov r8d, eax; mov rsi, [rsp+8]; mov edi, [rsp+0x18]; mov eax, 0x120; syscall;
0x000ff791: mov edx, [rsp+0x10]; mov r8d, eax; mov rsi, [rsp+8]; mov edi, [rsp+0x18]; mov eax, 0x120; syscall;
0x000ff793: and al, 0x10; mov r8d, eax; mov rsi, [rsp+8]; mov edi, [rsp+0x18]; mov eax, 0x120; syscall;
0x000ff794: adc [rcx-0x77], al; ror byte ptr [rax-0x75], 0x74; and al, 8; mov edi, [rsp+0x18]; mov eax, 0x120; syscall;
0x000ff795: mov r8d, eax; mov rsi, [rsp+8]; mov edi, [rsp+0x18]; mov eax, 0x120; syscall;
0x000ff796: mov eax, eax; mov rsi, [rsp+8]; mov edi, [rsp+0x18]; mov eax, 0x120; syscall;
0x000ff797: ror byte ptr [rax-0x75], 0x74; and al, 8; mov edi, [rsp+0x18]; mov eax, 0x120; syscall;
0x000ff798: mov rsi, [rsp+8]; mov edi, [rsp+0x18]; mov eax, 0x120; syscall;
0x000ff799: mov esi, [rsp+8]; mov edi, [rsp+0x18]; mov eax, 0x120; syscall;
0x000ff79b: and al, 8; mov edi, [rsp+0x18]; mov eax, 0x120; syscall;
0x000ff79c: or [rbx-0x47e7db84], cl; and [rcx], al; add [rax], al; syscall;
0x000ff79d: mov edi, [rsp+0x18]; mov eax, 0x120; syscall;
0x000ff79f: and al, 0x18; mov eax, 0x120; syscall;
0x000ff7a0: sbb [rax+0x120], bh; syscall;
0x000ff7a1: mov eax, 0x120; syscall;
0x000ff7a2: and [rcx], al; add [rax], al; syscall;
0x000ff7b6: sbb al, ch; and al, 0x56; clc; dec dword ptr [rbx+0x48182444]; add esp, 0x28; ret;
0x000ff7b8: and al, 0x56; clc; dec dword ptr [rbx+0x48182444]; add esp, 0x28; ret;
0x000ff7b9: push rsi; clc; dec dword ptr [rbx+0x48182444]; add esp, 0x28; ret;
0x000ff7c7: add [rax-0x75], cl; adc eax, 0xbe6a1; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ff7ca: adc eax, 0xbe6a1; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ff7cb: mov eax, [0x28964d8f7000be6]; mov eax, 0xffffffff; ret;
0x000ff7cc: out 0xb, al; add bh, dh; fsub st, dword ptr [rcx+rcx*4+2]; mov eax, 0xffffffff; ret;
0x000ff808: add [rax], al; add [rbp-0x47ee8a40], al; sub eax, [rcx]; add [rax], al; syscall;
0x000ff80a: add [rbp-0x47ee8a40], al; sub eax, [rcx]; add [rax], al; syscall;
0x000ff80c: shl byte ptr [rbp+0x11], 0xb8; sub eax, [rcx]; add [rax], al; syscall;
0x000ff80e: adc [rax+0x12b], edi; syscall;
0x000ff80f: mov eax, 0x12b; syscall;
0x000ff810: sub eax, [rcx]; add [rax], al; syscall;
0x000ff81b: push qword ptr [rdi+0x62]; ret;
0x000ff849: mov r9d, eax; mov edx, [rsp+0x10]; mov rsi, [rsp+8]; mov eax, 0x12b; mov edi, [rsp+4]; syscall;
0x000ff84a: mov ecx, eax; mov edx, [rsp+0x10]; mov rsi, [rsp+8]; mov eax, 0x12b; mov edi, [rsp+4]; syscall;
0x000ff84c: mov edx, [rsp+0x10]; mov rsi, [rsp+8]; mov eax, 0x12b; mov edi, [rsp+4]; syscall;
0x000ff84d: push rsp; and al, 0x10; mov rsi, [rsp+8]; mov eax, 0x12b; mov edi, [rsp+4]; syscall;
0x000ff84e: and al, 0x10; mov rsi, [rsp+8]; mov eax, 0x12b; mov edi, [rsp+4]; syscall;
0x000ff850: mov rsi, [rsp+8]; mov eax, 0x12b; mov edi, [rsp+4]; syscall;
0x000ff851: mov esi, [rsp+8]; mov eax, 0x12b; mov edi, [rsp+4]; syscall;
0x000ff853: and al, 8; mov eax, 0x12b; mov edi, [rsp+4]; syscall;
0x000ff854: or [rax+0x12b], bh; mov edi, [rsp+4]; syscall;
0x000ff855: mov eax, 0x12b; mov edi, [rsp+4]; syscall;
0x000ff856: sub eax, [rcx]; add [rax], al; mov edi, [rsp+4]; syscall;
0x000ff858: add [rax], al; mov edi, [rsp+4]; syscall;
0x000ff85a: mov edi, [rsp+4]; syscall;
0x000ff85c: and al, 4; syscall;
0x000ff870: insb [rdi], dx; push rbp; clc; dec dword ptr [rbx+0x48042444]; add esp, 0x28; ret;
0x000ff871: push rbp; clc; dec dword ptr [rbx+0x48042444]; add esp, 0x28; ret;
0x000ff872: clc; dec dword ptr [rbx+0x48042444]; add esp, 0x28; ret;
0x000ff873: dec dword ptr [rbx+0x48042444]; add esp, 0x28; ret;
0x000ff874: mov eax, [rsp+4]; add rsp, 0x28; ret;
0x000ff876: and al, 4; add rsp, 0x28; ret;
0x000ff877: add al, 0x48; add esp, 0x28; ret;
0x000ff87f: add [rax-0x75], cl; adc eax, 0xbe5e9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ff882: adc eax, 0xbe5e9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ff8b8: add [rax], al; add [rbp-0x47ee8a40], al; xor eax, [rcx]; add [rax], al; syscall;
0x000ff8ba: add [rbp-0x47ee8a40], al; xor eax, [rcx]; add [rax], al; syscall;
0x000ff8bc: shl byte ptr [rbp+0x11], 0xb8; xor eax, [rcx]; add [rax], al; syscall;
0x000ff8be: adc [rax+0x133], edi; syscall;
0x000ff8ef: mov edx, [rsp+0x18]; mov r8d, eax; mov rsi, [rsp+0x10]; mov edi, [rsp+0xc]; mov eax, 0x133; syscall;
0x000ff8f1: and al, 0x18; mov r8d, eax; mov rsi, [rsp+0x10]; mov edi, [rsp+0xc]; mov eax, 0x133; syscall;
0x000ff8f2: sbb [rcx-0x77], al; ror byte ptr [rax-0x75], 0x74; and al, 0x10; mov edi, [rsp+0xc]; mov eax, 0x133; syscall;
0x000ff8f3: mov r8d, eax; mov rsi, [rsp+0x10]; mov edi, [rsp+0xc]; mov eax, 0x133; syscall;
0x000ff8f4: mov eax, eax; mov rsi, [rsp+0x10]; mov edi, [rsp+0xc]; mov eax, 0x133; syscall;
0x000ff8f5: ror byte ptr [rax-0x75], 0x74; and al, 0x10; mov edi, [rsp+0xc]; mov eax, 0x133; syscall;
0x000ff8f6: mov rsi, [rsp+0x10]; mov edi, [rsp+0xc]; mov eax, 0x133; syscall;
0x000ff8f7: mov esi, [rsp+0x10]; mov edi, [rsp+0xc]; mov eax, 0x133; syscall;
0x000ff8f9: and al, 0x10; mov edi, [rsp+0xc]; mov eax, 0x133; syscall;
0x000ff8fa: adc [rbx-0x47f3db84], cl; xor eax, [rcx]; add [rax], al; syscall;
0x000ff8fb: mov edi, [rsp+0xc]; mov eax, 0x133; syscall;
0x000ff8fd: and al, 0xc; mov eax, 0x133; syscall;
0x000ff8fe: or al, 0xb8; xor eax, [rcx]; add [rax], al; syscall;
0x000ff8ff: mov eax, 0x133; syscall;
0x000ff900: xor eax, [rcx]; add [rax], al; syscall;
0x000ff917: push rsp; clc; dec dword ptr [rbx+0x480c2444]; add esp, 0x28; ret;
0x000ff918: clc; dec dword ptr [rbx+0x480c2444]; add esp, 0x28; ret;
0x000ff919: dec dword ptr [rbx+0x480c2444]; add esp, 0x28; ret;
0x000ff91a: mov eax, [rsp+0xc]; add rsp, 0x28; ret;
0x000ff91c: and al, 0xc; add rsp, 0x28; ret;
0x000ff91d: or al, 0x48; add esp, 0x28; ret;
0x000ff927: add [rax-0x75], cl; adc eax, 0xbe541; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ff92a: adc eax, 0xbe541; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ff92c: in eax, 0xb; add bh, dh; fsub st, dword ptr [rcx+rcx*4+2]; mov eax, 0xffffffff; ret;
0x000ff964: shl byte ptr [rsi-0x7d], 0xff; adc dh, [rdi+0xd]; movzx edi, di; lea rax, [rip+0x8886b]; mov eax, [rax+rdi*4]; ret;
0x000ff967: call qword ptr [rdx];
0x000ff968: adc dh, [rdi+0xd]; movzx edi, di; lea rax, [rip+0x8886b]; mov eax, [rax+rdi*4]; ret;
0x000ff96a: or eax, 0x48ffb70f; lea eax, [rip+0x8886b]; mov eax, [rax+rdi*4]; ret;
0x000ff96b: movzx edi, di; lea rax, [rip+0x8886b]; mov eax, [rax+rdi*4]; ret;
0x000ff96c: mov bh, 0xff; lea rax, [rip+0x8886b]; mov eax, [rax+rdi*4]; ret;
0x000ff96d: dec dword ptr [rax-0x73]; add eax, 0x8886b; mov eax, [rax+rdi*4]; ret;
0x000ff96e: lea rax, [rip+0x8886b]; mov eax, [rax+rdi*4]; ret;
0x000ff96f: lea eax, [rip+0x8886b]; mov eax, [rax+rdi*4]; ret;
0x000ff970: add eax, 0x8886b; mov eax, [rax+rdi*4]; ret;
0x000ff971: imul ecx, [rax+0x48b0008], 0xffffffb8; ret;
0x000ff973: or [rax], al; mov eax, [rax+rdi*4]; ret;
0x000ff975: mov eax, [rax+rdi*4]; ret;
0x000ff976: add al, 0xb8; ret;
0x000ff9ac: and rdx, 0xfffffffffffffff8; add rdx, rax; cmp rcx, rdx; mov edx, 0; cmovb rax, rdx; ret;
0x000ff9ad: and edx, 0xfffffff8; add rdx, rax; cmp rcx, rdx; mov edx, 0; cmovb rax, rdx; ret;
0x000ff9af: clc; add rdx, rax; cmp rcx, rdx; mov edx, 0; cmovb rax, rdx; ret;
0x000ff9b0: add rdx, rax; cmp rcx, rdx; mov edx, 0; cmovb rax, rdx; ret;
0x000ff9b1: add edx, eax; cmp rcx, rdx; mov edx, 0; cmovb rax, rdx; ret;
0x000ff9b3: cmp rcx, rdx; mov edx, 0; cmovb rax, rdx; ret;
0x000ff9b4: cmp ecx, edx; mov edx, 0; cmovb rax, rdx; ret;
0x000ff9b5: sar dword ptr [rdx], 1; cmovb rax, rdx; ret;
0x000ff9b6: mov edx, 0; cmovb rax, rdx; ret;
0x000ff9b7: add [rax], al; add [rax], al; cmovb rax, rdx; ret;
0x000ff9b8: add [rax], al; add [rax+0xf], cl; ret 0x31c3;
0x000ff9b9: add [rax], al; cmovb rax, rdx; ret;
0x000ff9ba: add [rax+0xf], cl; ret 0x31c3;
0x000ff9bb: cmovb rax, rdx; ret;
0x000ff9be: ret 0x31c3;
0x000ffa26: add [rax], al; add [rbp+0x10], dh; add rsp, 0xa0; pop rbx; ret;
0x000ffa28: add [rbp+0x10], dh; add rsp, 0xa0; pop rbx; ret;
0x000ffa2b: add rsp, 0xa0; pop rbx; ret;
0x000ffa2c: add esp, 0xa0; pop rbx; ret;
0x000ffa4e: adc [rax+0x45], edi; syscall;
0x000ffa5b: push qword ptr [rdi+0x5a]; ret;
0x000ffa5d: pop rdx; ret;
0x000ffa80: mov rdx, [rsp+0x10]; mov r8d, eax; mov rsi, [rsp+8]; mov edi, [rsp+0x18]; mov eax, 0x45; syscall;
0x000ffa81: mov edx, [rsp+0x10]; mov r8d, eax; mov rsi, [rsp+8]; mov edi, [rsp+0x18]; mov eax, 0x45; syscall;
0x000ffa83: and al, 0x10; mov r8d, eax; mov rsi, [rsp+8]; mov edi, [rsp+0x18]; mov eax, 0x45; syscall;
0x000ffa84: adc [rcx-0x77], al; ror byte ptr [rax-0x75], 0x74; and al, 8; mov edi, [rsp+0x18]; mov eax, 0x45; syscall;
0x000ffa85: mov r8d, eax; mov rsi, [rsp+8]; mov edi, [rsp+0x18]; mov eax, 0x45; syscall;
0x000ffa86: mov eax, eax; mov rsi, [rsp+8]; mov edi, [rsp+0x18]; mov eax, 0x45; syscall;
0x000ffa87: ror byte ptr [rax-0x75], 0x74; and al, 8; mov edi, [rsp+0x18]; mov eax, 0x45; syscall;
0x000ffa88: mov rsi, [rsp+8]; mov edi, [rsp+0x18]; mov eax, 0x45; syscall;
0x000ffa89: mov esi, [rsp+8]; mov edi, [rsp+0x18]; mov eax, 0x45; syscall;
0x000ffa8b: and al, 8; mov edi, [rsp+0x18]; mov eax, 0x45; syscall;
0x000ffa8d: mov edi, [rsp+0x18]; mov eax, 0x45; syscall;
0x000ffa8f: and al, 0x18; mov eax, 0x45; syscall;
0x000ffa90: sbb [rax+0x45], bh; syscall;
0x000ffa91: mov eax, 0x45; syscall;
0x000ffaa6: sbb al, ch; xor al, 0x53; clc; dec dword ptr [rbx+0x48182444]; add esp, 0x28; ret;
0x000ffaa8: xor al, 0x53; clc; dec dword ptr [rbx+0x48182444]; add esp, 0x28; ret;
0x000ffaa9: push rbx; clc; dec dword ptr [rbx+0x48182444]; add esp, 0x28; ret;
0x000ffaaa: clc; dec dword ptr [rbx+0x48182444]; add esp, 0x28; ret;
0x000ffaab: dec dword ptr [rbx+0x48182444]; add esp, 0x28; ret;
0x000ffaac: mov eax, [rsp+0x18]; add rsp, 0x28; ret;
0x000ffaae: and al, 0x18; add rsp, 0x28; ret;
0x000ffab5: nop [rax]; mov rdx, [rip+0x181da1]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ffab7: add [rax-0x75], cl; adc eax, 0xbe3b1; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ffaba: adc eax, 0xbe3b1; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ffabb: mov cl, 0xe3; or eax, [rax]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ffafe: adc [rax+0x46], edi; syscall;
0x000ffaff: mov eax, 0x46; syscall;
0x000ffb0b: push qword ptr [rdi+0x6a]; ret;
0x000ffb3b: mov r9d, eax; mov rdx, [rsp+0x18]; mov rsi, [rsp+0x10]; mov eax, 0x46; mov edi, [rsp+8]; syscall;
0x000ffb3c: mov ecx, eax; mov rdx, [rsp+0x18]; mov rsi, [rsp+0x10]; mov eax, 0x46; mov edi, [rsp+8]; syscall;
0x000ffb3d: ror dword ptr [rax-0x75], 0x54; and al, 0x18; mov rsi, [rsp+0x10]; mov eax, 0x46; mov edi, [rsp+8]; syscall;
0x000ffb3e: mov rdx, [rsp+0x18]; mov rsi, [rsp+0x10]; mov eax, 0x46; mov edi, [rsp+8]; syscall;
0x000ffb3f: mov edx, [rsp+0x18]; mov rsi, [rsp+0x10]; mov eax, 0x46; mov edi, [rsp+8]; syscall;
0x000ffb40: push rsp; and al, 0x18; mov rsi, [rsp+0x10]; mov eax, 0x46; mov edi, [rsp+8]; syscall;
0x000ffb41: and al, 0x18; mov rsi, [rsp+0x10]; mov eax, 0x46; mov edi, [rsp+8]; syscall;
0x000ffb43: mov rsi, [rsp+0x10]; mov eax, 0x46; mov edi, [rsp+8]; syscall;
0x000ffb44: mov esi, [rsp+0x10]; mov eax, 0x46; mov edi, [rsp+8]; syscall;
0x000ffb46: and al, 0x10; mov eax, 0x46; mov edi, [rsp+8]; syscall;
0x000ffb47: adc [rax+0x46], bh; mov edi, [rsp+8]; syscall;
0x000ffb48: mov eax, 0x46; mov edi, [rsp+8]; syscall;
0x000ffb4b: add [rax], al; mov edi, [rsp+8]; syscall;
0x000ffb4d: mov edi, [rsp+8]; syscall;
0x000ffb4f: and al, 8; syscall;
0x000ffb65: push rdx; clc; dec dword ptr [rax-0x75]; and al, 8; add rsp, 0x38; ret;
0x000ffb66: clc; dec dword ptr [rax-0x75]; and al, 8; add rsp, 0x38; ret;
0x000ffb67: dec dword ptr [rax-0x75]; and al, 8; add rsp, 0x38; ret;
0x000ffb68: mov rax, [rsp+8]; add rsp, 0x38; ret;
0x000ffb69: mov eax, [rsp+8]; add rsp, 0x38; ret;
0x000ffb6b: and al, 8; add rsp, 0x38; ret;
0x000ffb77: add [rax-0x75], cl; adc eax, 0xbe2f1; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000ffb7a: adc eax, 0xbe2f1; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000ffba4: mov dh, 0x66; nop [rax+rax]; nop; mov eax, 0x44; syscall;
0x000ffba5: nop [rax+rax]; nop; mov eax, 0x44; syscall;
0x000ffba6: nop [rax+rax]; nop; mov eax, 0x44; syscall;
0x000ffba7: nop [rax+rax]; nop; mov eax, 0x44; syscall;
0x000ffba9: test [rax], al; add [rax], al; add [rax], al; nop; mov eax, 0x44; syscall;
0x000ffbab: add [rax], al; add [rax], al; nop; mov eax, 0x44; syscall;
0x000ffbad: add [rax], al; nop; mov eax, 0x44; syscall;
0x000ffbaf: nop; mov eax, 0x44; syscall;
0x000ffbb0: mov eax, 0x44; syscall;
0x000ffbc2: adc eax, 0xbe2a9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ffbc3: test eax, 0xf7000be2; fsub st, dword ptr [rcx+rcx*4+2]; mov eax, 0xffffffff; ret;
0x000ffbd0: inc ebx; nop [rax+rax]; nop [rax]; mov eax, 0x47; syscall;
0x000ffbd2: nop [rax+rax]; nop [rax]; mov eax, 0x47; syscall;
0x000ffbd3: nop [rax+rax]; nop [rax]; mov eax, 0x47; syscall;
0x000ffbd4: nop [rax+rax]; nop [rax]; mov eax, 0x47; syscall;
0x000ffbd6: test [rax], al; add [rax], al; add [rax], al; nop [rax]; mov eax, 0x47; syscall;
0x000ffbd8: add [rax], al; add [rax], al; nop [rax]; mov eax, 0x47; syscall;
0x000ffbda: add [rax], al; nop [rax]; mov eax, 0x47; syscall;
0x000ffbdc: nop [rax]; mov eax, 0x47; syscall;
0x000ffbde: add [rax+0x47], dil; syscall;
0x000ffbdf: add [rax+0x47], bh; syscall;
0x000ffbe0: mov eax, 0x47; syscall;
0x000ffbf2: adc eax, 0xbe279; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ffc15: add [rax], al; nop [rax+rax]; mov eax, 0x40; syscall;
0x000ffc17: nop [rax+rax]; mov eax, 0x40; syscall;
0x000ffc18: nop [rax+rax]; mov eax, 0x40; syscall;
0x000ffc1a: test [rax], al; add [rax], al; add [rax], al; mov eax, 0x40; syscall;
0x000ffc1b: add [rax], al; add [rax], al; add [rax+0x40], bh; syscall;
0x000ffc1c: add [rax], al; add [rax], al; mov eax, 0x40; syscall;
0x000ffc1d: add [rax], al; add [rax+0x40], bh; syscall;
0x000ffc1e: add [rax], al; mov eax, 0x40; syscall;
0x000ffc1f: add [rax+0x40], bh; syscall;
0x000ffc20: mov eax, 0x40; syscall;
0x000ffc32: adc eax, 0xbe239; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ffc33: cmp edx, esp; or eax, [rax]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ffc7d: and [rdi], cl; add [rbp+0x2e], dh; mov eax, 0x42; syscall;
0x000ffc7f: add [rbp+0x2e], dh; mov eax, 0x42; syscall;
0x000ffc81: mov eax, 0x42; syscall;
0x000ffc82: mov eax, 0x42; syscall;
0x000ffc9c: add [rax], al; add [rbp+0x52], dh; add rsp, 0x58; ret;
0x000ffc9e: add [rbp+0x52], dh; add rsp, 0x58; ret;
0x000ffca0: push rdx; add rsp, 0x58; ret;
0x000ffca1: add rsp, 0x58; ret;
0x000ffca2: add esp, 0x58; ret;
0x000ffca4: pop rax; ret;
0x000ffcf4: sub cl, bl; add [rax], al; nop [rax+rax]; mov r10, rcx; mov eax, 0xdc; syscall;
0x000ffcf6: add [rax], al; nop [rax+rax]; mov r10, rcx; mov eax, 0xdc; syscall;
0x000ffcf8: nop [rax+rax]; mov r10, rcx; mov eax, 0xdc; syscall;
0x000ffcfa: test [rax], al; add [rax], al; add [rax], al; mov r10, rcx; mov eax, 0xdc; syscall;
0x000ffcfc: add [rax], al; add [rax], al; mov r10, rcx; mov eax, 0xdc; syscall;
0x000ffcfe: add [rax], al; mov r10, rcx; mov eax, 0xdc; syscall;
0x000ffd00: mov r10, rcx; mov eax, 0xdc; syscall;
0x000ffd01: mov edx, ecx; mov eax, 0xdc; syscall;
0x000ffd03: mov eax, 0xdc; syscall;
0x000ffd04: fadd st, qword ptr [rax]; add [rax], al; syscall;
0x000ffd17: add [rax-0x75], cl; adc eax, 0xbe151; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ffd1a: adc eax, 0xbe151; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ffd28: inc ebx; nop [rax+rax]; mov eax, 0x1e; syscall;
0x000ffd2a: nop [rax+rax]; mov eax, 0x1e; syscall;
0x000ffd2b: nop [rax+rax]; mov eax, 0x1e; syscall;
0x000ffd2d: add [rax], r8b; mov eax, 0x1e; syscall;
0x000ffd2e: add [rax], al; mov eax, 0x1e; syscall;
0x000ffd2f: add [rax+0x1e], bh; syscall;
0x000ffd30: mov eax, 0x1e; syscall;
0x000ffd3e: add ebx, eax; mov rdx, [rip+0x103589]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000ffd42: adc eax, 0xbe129; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000ffd43: sub ecx, esp; or eax, [rax]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x000ffd52: inc ebx; nop [rax+rax]; xchg ax, ax; mov eax, 0x43; syscall;
0x000ffd54: nop [rax+rax]; xchg ax, ax; mov eax, 0x43; syscall;
0x000ffd55: nop [rax+rax]; xchg ax, ax; mov eax, 0x43; syscall;
0x000ffd56: nop [rax+rax]; xchg ax, ax; mov eax, 0x43; syscall;
0x000ffd58: test [rax], al; add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0x43; syscall;
0x000ffd59: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, 0x43; syscall;
0x000ffd5a: add [rax], al; add [rax], al; xchg ax, ax; mov eax, 0x43; syscall;
0x000ffd5b: add [rax], al; add [rsi-0x70], ah; mov eax, 0x43; syscall;
0x000ffd5c: add [rax], al; xchg ax, ax; mov eax, 0x43; syscall;
0x000ffd5d: add [rsi-0x70], ah; mov eax, 0x43; syscall;
0x000ffd5e: xchg ax, ax; mov eax, 0x43; syscall;
0x000ffd5f: nop; mov eax, 0x43; syscall;
0x000ffd60: mov eax, 0x43; syscall;
0x000ffd72: adc eax, 0xbe0f9; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ffd80: inc ebx; nop [rax+rax]; nop [rax]; xor r10d, r10d; mov eax, 0x1d; syscall;
0x000ffd82: nop [rax+rax]; nop [rax]; xor r10d, r10d; mov eax, 0x1d; syscall;
0x000ffd83: nop [rax+rax]; nop [rax]; xor r10d, r10d; mov eax, 0x1d; syscall;
0x000ffd84: nop [rax+rax]; nop [rax]; xor r10d, r10d; mov eax, 0x1d; syscall;
0x000ffd88: add [rax], al; add [rax], al; nop [rax]; xor r10d, r10d; mov eax, 0x1d; syscall;
0x000ffd8a: add [rax], al; nop [rax]; xor r10d, r10d; mov eax, 0x1d; syscall;
0x000ffd8c: nop [rax]; xor r10d, r10d; mov eax, 0x1d; syscall;
0x000ffd8f: add [rbp+0x31], al; sar byte ptr [rax+0x1d], cl; syscall;
0x000ffd90: xor r10d, r10d; mov eax, 0x1d; syscall;
0x000ffd91: xor edx, edx; mov eax, 0x1d; syscall;
0x000ffd92: sar byte ptr [rax+0x1d], cl; syscall;
0x000ffd93: mov eax, 0x1d; syscall;
0x000ffd9f: push qword ptr [rdi+6]; ret;
0x000ffda3: nop [rax+rax]; mov rdx, [rip+0x165f51]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ffda5: add [rax], r8b; mov rdx, [rip+0x165f51]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ffda6: add [rax], al; mov rdx, [rip+0x181d19]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ffda7: add [rax-0x75], cl; adc eax, 0xbe0c1; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ffdaa: adc eax, 0xbe0c1; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ffdab: shl eax, 0xb; add bh, dh; fsub st, dword ptr [rcx+rcx*4+2]; mov eax, 0xffffffff; ret;
0x000ffdb8: inc ebx; nop [rax+rax]; mov eax, 0x1f; syscall;
0x000ffdba: nop [rax+rax]; mov eax, 0x1f; syscall;
0x000ffdbb: nop [rax+rax]; mov eax, 0x1f; syscall;
0x000ffdbd: add [rax], r8b; mov eax, 0x1f; syscall;
0x000ffdbe: add [rax], al; mov eax, 0x1f; syscall;
0x000ffdbf: add [rax+0x1f], bh; syscall;
0x000ffdc0: mov eax, 0x1f; syscall;
0x000ffdcc: push qword ptr [rdi+1]; ret;
0x000ffdce: add ebx, eax; mov rdx, [rip+0x165f89]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ffdd0: mov rdx, [rip+0x181da1]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ffdd1: mov edx, [rip+0x181da1]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ffdd2: adc eax, 0xbe099; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ffdd5: or eax, [rax]; neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ffdd6: add bh, dh; fsub st, dword ptr [rcx+rcx*4+2]; mov eax, 0xffffffff; ret;
0x000ffdd7: neg eax; mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ffdd8: fsub st, dword ptr [rcx+rcx*4+2]; mov eax, 0xffffffff; ret;
0x000ffdd9: mov fs:[rdx], eax; mov eax, 0xffffffff; ret;
0x000ffdda: mov [rdx], eax; mov eax, 0xffffffff; ret;
0x000ffddb: add bh, [rax-1]; ret;
0x000ffdf5: rol byte ptr [rax+0x5740039], 0xc3; nop [rax]; mov rax, [rdi]; mov [rdx], rax; mov eax, 1; ret;
0x000ffdf8: add [rbp+rax-0x3d], dh; nop [rax]; mov rax, [rdi]; mov [rdx], rax; mov eax, 1; ret;
0x000ffdfc: nop [rax]; mov rax, [rdi]; mov [rdx], rax; mov eax, 1; ret;
0x000ffe00: mov rax, [rdi]; mov [rdx], rax; mov eax, 1; ret;
0x000ffe01: mov eax, [rdi]; mov [rdx], rax; mov eax, 1; ret;
0x000ffe89: out 0xc7, eax; test eax, esi; idiv edi; jmp qword ptr [rdi+0x6d];
0x000ffe8b: test eax, esi; idiv edi; jmp qword ptr [rdi+0x6d];
0x000ffe8d: idiv edi; jmp qword ptr [rdi+0x6d];
0x000ffe8f: jmp qword ptr [rdi+0x6d];
0x000fff2f: and [rax-0x7d], cl; ret 0x4c14;
0x000fff32: ret 0x4c14;
0x000fff6e: ret 0x14eb;
0x000ffff2: ret 0x4401;
0x00100007: add [rbx+0x197520fa], eax; mov edx, 0x40; mov eax, 0x14; syscall;
0x00100009: cli; and [rbp+0x19], dh; mov edx, 0x40; mov eax, 0x14; syscall;
0x0010000a: and [rbp+0x19], dh; mov edx, 0x40; mov eax, 0x14; syscall;
0x0010000c: sbb [rdx+0x40], edi; mov eax, 0x14; syscall;
0x0010000d: mov edx, 0x40; mov eax, 0x14; syscall;
0x0010000f: add [rax], al; add [rax+0x14], bh; syscall;
0x00100010: add [rax], al; mov eax, 0x14; syscall;
0x00100011: add [rax+0x14], bh; syscall;
0x0010004d: shl byte ptr [rcx+rcx+1], cl; sar byte ptr [rax+0x14], cl; syscall;
0x0010004f: or [rcx], eax; sar byte ptr [rax+0x14], cl; syscall;
0x00100050: add edx, edx; mov eax, 0x14; syscall;
0x00100051: sar byte ptr [rax+0x14], cl; syscall;
0x00100052: mov eax, 0x14; syscall;
0x00100053: adc al, 0; add [rax], al; syscall;
0x001000fa: sbb [rdx+2], dil; mov rsi, r13; mov edi, r12d; mov [rbp-0x830], rax; mov eax, ebx; syscall;
0x001000fb: sbb [rdx+2], bh; mov rsi, r13; mov edi, r12d; mov [rbp-0x830], rax; mov eax, ebx; syscall;
0x001000fc: mov edx, 2; mov rsi, r13; mov edi, r12d; mov [rbp-0x830], rax; mov eax, ebx; syscall;
0x001000fe: add [rax], al; add [rcx+rcx*4-0x12], cl; mov edi, r12d; mov [rbp-0x830], rax; mov eax, ebx; syscall;
0x001000ff: add [rax], al; mov rsi, r13; mov edi, r12d; mov [rbp-0x830], rax; mov eax, ebx; syscall;
0x00100100: add [rcx+rcx*4-0x12], cl; mov edi, r12d; mov [rbp-0x830], rax; mov eax, ebx; syscall;
0x00100101: mov rsi, r13; mov edi, r12d; mov [rbp-0x830], rax; mov eax, ebx; syscall;
0x00100102: mov esi, ebp; mov edi, r12d; mov [rbp-0x830], rax; mov eax, ebx; syscall;
0x00100103: out dx, al; mov edi, r12d; mov [rbp-0x830], rax; mov eax, ebx; syscall;
0x00100104: mov edi, r12d; mov [rbp-0x830], rax; mov eax, ebx; syscall;
0x00100105: mov edi, esp; mov [rbp-0x830], rax; mov eax, ebx; syscall;
0x00100106: out 0x48, eax; mov [rbp-0x830], eax; mov eax, ebx; syscall;
0x00100107: mov [rbp-0x830], rax; mov eax, ebx; syscall;
0x00100108: mov [rbp-0x830], eax; mov eax, ebx; syscall;
0x00100154: mov esp, 0xfffa9035; dec dword ptr [rax-0x7d]; ret 0x4802;
0x00100159: dec dword ptr [rax-0x7d]; ret 0x4802;
0x00100170: mov edi, 0x44ce894c; mov edi, esp; mov eax, ebx; syscall;
0x0010018d: mov [0xe78944ce894c9066], al; mov eax, ebx; syscall;
0x0010018e: xchg ax, ax; mov rsi, r9; mov edi, r12d; mov eax, ebx; syscall;
0x0010018f: nop; mov rsi, r9; mov edi, r12d; mov eax, ebx; syscall;
0x00100190: mov rsi, r9; mov edi, r12d; mov eax, ebx; syscall;
0x00100191: mov esi, ecx; mov edi, r12d; mov eax, ebx; syscall;
0x00100193: mov edi, r12d; mov eax, ebx; syscall;
0x00100194: mov edi, esp; mov eax, ebx; syscall;
0x00100196: mov eax, ebx; syscall;
0x00100227: jmp far fword ptr [rax];
0x0010026c: mov [rbp-0x7cc], ax; mov eax, 0x14; mov dword ptr [rbp-0x7d0], 0; mov byte ptr [rbp-0x7ca], 0; mov byte ptr [rbp-0x7c9], 0x73; syscall;
0x0010026d: mov [rbp-0x7cc], eax; mov eax, 0x14; mov dword ptr [rbp-0x7d0], 0; mov byte ptr [rbp-0x7ca], 0; mov byte ptr [rbp-0x7c9], 0x73; syscall;
0x00100273: mov eax, 0x14; mov dword ptr [rbp-0x7d0], 0; mov byte ptr [rbp-0x7ca], 0; mov byte ptr [rbp-0x7c9], 0x73; syscall;
0x00100274: adc al, 0; add [rax], al; mov dword ptr [rbp-0x7d0], 0; mov byte ptr [rbp-0x7ca], 0; mov byte ptr [rbp-0x7c9], 0x73; syscall;
0x00100276: add [rax], al; mov dword ptr [rbp-0x7d0], 0; mov byte ptr [rbp-0x7ca], 0; mov byte ptr [rbp-0x7c9], 0x73; syscall;
0x00100278: mov dword ptr [rbp-0x7d0], 0; mov byte ptr [rbp-0x7ca], 0; mov byte ptr [rbp-0x7c9], 0x73; syscall;
0x0010027e: add [rax], al; add [rax], al; mov byte ptr [rbp-0x7ca], 0; mov byte ptr [rbp-0x7c9], 0x73; syscall;
0x00100280: add [rax], al; mov byte ptr [rbp-0x7ca], 0; mov byte ptr [rbp-0x7c9], 0x73; syscall;
0x00100282: mov byte ptr [rbp-0x7ca], 0; mov byte ptr [rbp-0x7c9], 0x73; syscall;
0x00100287: inc dword ptr [rax]; mov byte ptr [rbp-0x7c9], 0x73; syscall;
0x00100289: mov byte ptr [rbp-0x7c9], 0x73; syscall;
0x0010035d: add [rax], al; mov qword ptr [rip+0xbdff6], 3; add rsp, 8; ret;
0x0010035e: add [rax-0x39], cl; add eax, 0xbdff6; add eax, [rax]; add [rax], al; add rsp, 8; ret;
0x0010035f: mov qword ptr [rip+0xbdff6], 3; add rsp, 8; ret;
0x00100360: mov dword ptr [rip+0xbdff6], 3; add rsp, 8; ret;
0x00100361: add eax, 0xbdff6; add eax, [rax]; add [rax], al; add rsp, 8; ret;
0x00100362: neg bh; or eax, [rax]; add eax, [rax]; add [rax], al; add rsp, 8; ret;
0x00100364: or eax, [rax]; add eax, [rax]; add [rax], al; add rsp, 8; ret;
0x00100366: add eax, [rax]; add [rax], al; add rsp, 8; ret;
0x0010038e: add [rax], al; mov qword ptr [rip+0xbdfc5], 0; add rsp, 8; ret;
0x0010038f: add [rax-0x39], cl; add eax, 0xbdfc5; add [rax], al; add [rax], al; add rsp, 8; ret;
0x00100390: mov qword ptr [rip+0xbdfc5], 0; add rsp, 8; ret;
0x00100391: mov dword ptr [rip+0xbdfc5], 0; add rsp, 8; ret;
0x00100392: add eax, 0xbdfc5; add [rax], al; add [rax], al; add rsp, 8; ret;
0x00100395: or eax, [rax]; add [rax], al; add [rax], al; add rsp, 8; ret;
0x0010039e: or bl, al; ret;
0x001003ea: ret 0xbdf;
0x001004eb: add [rax], al; add [rax], al; add [rax-0x42], cl; ret;
0x001004ed: add [rax], al; add [rax-0x42], cl; ret;
0x001004ef: add [rax-0x42], cl; ret;
0x001004f7: ret 0x28f5;
0x00100568: xchg esi, eax; ret;
0x001005b0: add [rax], al; add [rbp+0x481174db], al; movsxd ebx, ebx; mov [rip+0xbdd9f], rbx; pop rbx; ret;
0x001005b2: add [rbp+0x481174db], al; movsxd ebx, ebx; mov [rip+0xbdd9f], rbx; pop rbx; ret;
0x001005b6: adc [rax+0x63], ecx; fisttp dword ptr [rax-0x77], st; sbb eax, 0xbdd9f; pop rbx; ret;
0x001005b9: fisttp dword ptr [rax-0x77], st; sbb eax, 0xbdd9f; pop rbx; ret;
0x001005bc: sbb eax, 0xbdd9f; pop rbx; ret;
0x001005cc: dec dword ptr [rax+0x63]; fisttp dword ptr [rax-0x77], st; sbb eax, 0xbdd89; pop rbx; ret;
0x001005cd: movsxd rbx, ebx; mov [rip+0xbdd9f], rbx; pop rbx; ret;
0x001005ce: movsxd ebx, ebx; mov [rip+0xbdd9f], rbx; pop rbx; ret;
0x001005cf: fisttp dword ptr [rax-0x77], st; sbb eax, 0xbdd89; pop rbx; ret;
0x001005d0: mov [rip+0xbdd9f], rbx; pop rbx; ret;
0x001005d1: mov [rip+0xbdd9f], ebx; pop rbx; ret;
0x001005d2: sbb eax, 0xbdd89; pop rbx; ret;
0x001005d3: mov ebp, ebx; or eax, [rax]; pop rbx; ret;
0x001005d5: or eax, [rax]; pop rbx; ret;
0x001006d5: mov qword ptr [rdx+8], 1; mov rcx, [r8]; mov [rdx+0x10], rcx; mov [r8], rax; mov qword ptr [rip+0xbdc6e], 0; ret;
0x001006d6: mov dword ptr [rdx+8], 1; mov rcx, [r8]; mov [rdx+0x10], rcx; mov [r8], rax; mov qword ptr [rip+0xbdc6e], 0; ret;
0x001006db: add [rax], al; mov rcx, [r8]; mov [rdx+0x10], rcx; mov [r8], rax; mov qword ptr [rip+0xbdc6e], 0; ret;
0x001006e3: adc [rcx-0x77], cl; add [rax-0x39], cl; add eax, 0xbdc6e; add [rax], al; add [rax], al; ret;
0x001006e6: add [rax-0x39], cl; add eax, 0xbdc6e; add [rax], al; add [rax], al; ret;
0x001006e9: add eax, 0xbdc6e; add [rax], al; add [rax], al; ret;
0x00100703: xchg ecx, eax; fmul st, qword ptr [rbx]; add [rax-0x77], cl; adc [r10+0x13], r14b; mov qword ptr [rip+0xbdc48], 2; ret;
0x00100704: fmul st, qword ptr [rbx]; add [rax-0x77], cl; adc [r10+0x13], r14b; mov qword ptr [rip+0xbdc48], 2; ret;
0x00100706: add [rax-0x77], cl; adc [r10+0x13], r14b; mov qword ptr [rip+0xbdc48], 2; ret;
0x00100709: adc [r10+0x13], r14b; mov qword ptr [rip+0xbdc48], 2; ret;
0x0010070a: adc [rdx+0x13], dh; mov qword ptr [rip+0xbdc48], 2; ret;
0x0010070c: adc ecx, [rax-0x39]; add eax, 0xbdc48; add al, [rax]; add [rax], al; ret;
0x0010070d: mov qword ptr [rip+0xbdc48], 2; ret;
0x0010070e: mov dword ptr [rip+0xbdc48], 2; ret;
0x0010070f: add eax, 0xbdc48; add al, [rax]; add [rax], al; ret;
0x00100712: or eax, [rax]; add al, [rax]; add [rax], al; ret;
0x00100727: lea rax, [rdi+rax*8]; mov [rax], rsi; mov qword ptr [rax+8], 1; mov qword ptr [rax+0x10], 0; mov qword ptr [rip+0xbdc17], 0; ret;
0x00100728: lea eax, [rdi+rax*8]; mov [rax], rsi; mov qword ptr [rax+8], 1; mov qword ptr [rax+0x10], 0; mov qword ptr [rip+0xbdc17], 0; ret;
0x00100729: add al, 0xc7; mov [rax], rsi; mov qword ptr [rax+8], 1; mov qword ptr [rax+0x10], 0; mov qword ptr [rip+0xbdc17], 0; ret;
0x0010072b: mov [rax], rsi; mov qword ptr [rax+8], 1; mov qword ptr [rax+0x10], 0; mov qword ptr [rip+0xbdc17], 0; ret;
0x0010072c: mov [rax], esi; mov qword ptr [rax+8], 1; mov qword ptr [rax+0x10], 0; mov qword ptr [rip+0xbdc17], 0; ret;
0x0010072e: mov qword ptr [rax+8], 1; mov qword ptr [rax+0x10], 0; mov qword ptr [rip+0xbdc17], 0; ret;
0x0010072f: mov dword ptr [rax+8], 1; mov qword ptr [rax+0x10], 0; mov qword ptr [rip+0xbdc17], 0; ret;
0x00100732: add [rax], eax; add [rax], al; mov qword ptr [rax+0x10], 0; mov qword ptr [rip+0xbdc17], 0; ret;
0x00100734: add [rax], al; mov qword ptr [rax+0x10], 0; mov qword ptr [rip+0xbdc17], 0; ret;
0x00100736: mov qword ptr [rax+0x10], 0; mov qword ptr [rip+0xbdc17], 0; ret;
0x00100737: mov dword ptr [rax+0x10], 0; mov qword ptr [rip+0xbdc17], 0; ret;
0x0010073a: add [rax], al; add [rax], al; mov qword ptr [rip+0xbdc17], 0; ret;
0x0010073b: add [rax], al; add [rax-0x39], cl; add eax, 0xbdc17; add [rax], al; add [rax], al; ret;
0x0010073c: add [rax], al; mov qword ptr [rip+0xbdc17], 0; ret;
0x0010073d: add [rax-0x39], cl; add eax, 0xbdc17; add [rax], al; add [rax], al; ret;
0x00100740: add eax, 0xbdc17; add [rax], al; add [rax], al; ret;
0x00100759: mov [rcx+0x10], rsi; mov rcx, [r8]; mov [rdx+0x10], rcx; mov [r8], rax; mov qword ptr [rip+0xbdbee], 0; ret;
0x0010075a: mov [rcx+0x10], esi; mov rcx, [r8]; mov [rdx+0x10], rcx; mov [r8], rax; mov qword ptr [rip+0xbdbee], 0; ret;
0x0010075d: mov rcx, [r8]; mov [rdx+0x10], rcx; mov [r8], rax; mov qword ptr [rip+0xbdc6e], 0; ret;
0x0010075e: mov ecx, [rax]; mov [rdx+0x10], rcx; mov [r8], rax; mov qword ptr [rip+0xbdc6e], 0; ret;
0x00100760: mov [rdx+0x10], rcx; mov [r8], rax; mov qword ptr [rip+0xbdc6e], 0; ret;
0x00100761: mov [rdx+0x10], ecx; mov [r8], rax; mov qword ptr [rip+0xbdc6e], 0; ret;
0x00100763: adc [rcx-0x77], cl; add [rax-0x39], cl; add eax, 0xbdbee; add [rax], al; add [rax], al; ret;
0x00100764: mov [r8], rax; mov qword ptr [rip+0xbdc6e], 0; ret;
0x00100765: mov [rax], eax; mov qword ptr [rip+0xbdc6e], 0; ret;
0x00100766: add [rax-0x39], cl; add eax, 0xbdbee; add [rax], al; add [rax], al; ret;
0x00100767: mov qword ptr [rip+0xbdc6e], 0; ret;
0x00100768: mov dword ptr [rip+0xbdc6e], 0; ret;
0x00100769: add eax, 0xbdbee; add [rax], al; add [rax], al; ret;
0x0010076c: or eax, [rax]; add [rax], al; add [rax], al; ret;
0x001007c4: push 0x73000c23; or al, 0x48; mov edx, [rip+0xc2367]; add word ptr [rdx+rax*2], 1; ret;
0x001007c7: add [rbx+0xc], dh; mov rdx, [rip+0xc2367]; add word ptr [rdx+rax*2], 1; ret;
0x001007c9: or al, 0x48; mov edx, [rip+0xc2367]; add word ptr [rdx+rax*2], 1; ret;
0x001007ca: mov rdx, [rip+0xc2367]; add word ptr [rdx+rax*2], 1; ret;
0x001007cb: mov edx, [rip+0xc2367]; add word ptr [rdx+rax*2], 1; ret;
0x001007cc: adc eax, 0xc2367; add word ptr [rdx+rax*2], 1; ret;
0x001007cd: and ecx, [eax+eax]; add word ptr [rdx+rax*2], 1; ret;
0x001007ce: and ecx, [rax+rax]; add word ptr [rdx+rax*2], 1; ret;
0x001007cf: or al, 0; add word ptr [rdx+rax*2], 1; ret;
0x001007d1: add word ptr [rdx+rax*2], 1; ret;
0x001007d2: add dword ptr [rdx+rax*2], 1; ret;
0x0010092d: add rsp, 0xc8; pop rbx; pop rbp; pop r12; pop r13; ret;
0x0010092e: add esp, 0xc8; pop rbx; pop rbp; pop r12; pop r13; ret;
0x00100930: enter 0, 0; pop rbx; pop rbp; pop r12; pop r13; ret;
0x001009f6: xor [rax-0x77], ecx; ret 0x8348;
0x00100a5b: add al, [rbx+0x6f74fff8]; add eax, 1; mov [rdx], eax; ret;
0x00100a60: outsd dx, [rsi]; add eax, 1; mov [rdx], eax; ret;
0x00100a61: add eax, 1; mov [rdx], eax; ret;
0x00100a9b: add ah, [rsi-0x7d]; clc; push qword ptr [rsi+rbp-0x7d]; rol byte ptr [rcx], 0x66; mov [rdx], eax; ret;
0x00100a9e: clc; push qword ptr [rsi+rbp-0x7d]; rol byte ptr [rcx], 0x66; mov [rdx], eax; ret;
0x00100a9f: push qword ptr [rsi+rbp-0x7d]; rol byte ptr [rcx], 0x66; mov [rdx], eax; ret;
0x00100aa1: add eax, 1; mov [rdx], ax; ret;
0x00100aa2: add eax, 1; mov [rdx], ax; ret;
0x00100aa3: rol byte ptr [rcx], 0x66; mov [rdx], eax; ret;
0x00100aa5: mov [rdx], ax; ret;
0x00100aa6: mov [rdx], eax; ret;
0x00100aa7: add al, bl; nop [rax]; mov rax, [rip+0xc20a1]; mov rax, [rax+0x18]; add word ptr [rax], 1; ret;
0x00100aa9: nop [rax]; mov rax, [rip+0xc20a1]; mov rax, [rax+0x18]; add word ptr [rax], 1; ret;
0x00100aab: add byte ptr [rax], 0; add [rax], al; mov rax, [rip+0xc20a1]; mov rax, [rax+0x18]; add word ptr [rax], 1; ret;
0x00100aac: add [rax], al; add [rax], al; mov rax, [rip+0xc20a1]; mov rax, [rax+0x18]; add word ptr [rax], 1; ret;
0x00100aad: add [rax], al; add [rax-0x75], cl; add eax, 0xc20a1; mov rax, [rax+0x18]; add word ptr [rax], 1; ret;
0x00100aae: add [rax], al; mov rax, [rip+0xc20a1]; mov rax, [rax+0x18]; add word ptr [rax], 1; ret;
0x00100aaf: add [rax-0x75], cl; add eax, 0xc20a1; mov rax, [rax+0x18]; add word ptr [rax], 1; ret;
0x00100ab0: mov rax, [rip+0xc20a1]; mov rax, [rax+0x18]; add word ptr [rax], 1; ret;
0x00100ab1: mov eax, [rip+0xc20a1]; mov rax, [rax+0x18]; add word ptr [rax], 1; ret;
0x00100ab2: add eax, 0xc20a1; mov rax, [rax+0x18]; add word ptr [rax], 1; ret;
0x00100ab3: mov eax, [0x6618408b48000c20]; add dword ptr [rax], 1; ret;
0x00100ab4: and [rax+rax], cl; mov rax, [rax+0x18]; add word ptr [rax], 1; ret;
0x00100ab5: or al, 0; mov rax, [rax+0x18]; add word ptr [rax], 1; ret;
0x00100ab6: add [rax-0x75], cl; sbb [rsi-0x7d], spl; add [rcx], al; ret;
0x00100ab7: mov rax, [rax+0x18]; add word ptr [rax], 1; ret;
0x00100ab8: mov eax, [rax+0x18]; add word ptr [rax], 1; ret;
0x00100ab9: sbb [rsi-0x7d], spl; add [rcx], al; ret;
0x00100aba: sbb [rsi-0x7d], ah; add [rcx], al; ret;
0x00100abb: add word ptr [rax], 1; ret;
0x00100abe: add ebx, eax; mov rax, [rip+0xc2091]; mov rax, [rax+0x18]; add dword ptr [rax], 1; ret;
0x00100ac0: mov rax, [rip+0xc2091]; mov rax, [rax+0x18]; add dword ptr [rax], 1; ret;
0x00100ac1: mov eax, [rip+0xc2091]; mov rax, [rax+0x18]; add dword ptr [rax], 1; ret;
0x00100ac2: add eax, 0xc2091; mov rax, [rax+0x18]; add dword ptr [rax], 1; ret;
0x00100ac3: xchg ecx, eax; and [rax+rax], cl; mov rax, [rax+0x18]; add dword ptr [rax], 1; ret;
0x00100ac4: and [rax+rax], cl; mov rax, [rax+0x18]; add dword ptr [rax], 1; ret;
0x00100ac5: or al, 0; mov rax, [rax+0x18]; add dword ptr [rax], 1; ret;
0x00100ac6: add [rax-0x75], cl; sbb [rbx-0x6f3cff00], al; ret;
0x00100ac7: mov rax, [rax+0x18]; add dword ptr [rax], 1; ret;
0x00100ac8: mov eax, [rax+0x18]; add dword ptr [rax], 1; ret;
0x00100aca: sbb [rbx-0x6f3cff00], al; ret;
0x00100acb: add dword ptr [rax], 1; ret;
0x00100acc: add [rcx], al; ret;
0x00100acd: add ebx, eax; nop; ret;
0x00100b31: push rcx; adc [rdx+8], dh; seta al; movzx eax, al; neg eax; ret;
0x00100b32: adc [rdx+8], dh; seta al; movzx eax, al; neg eax; ret;
0x00100b34: or [rdi], cl; xchg edi, eax; ror byte ptr [rdi], 0xb6; shl bh, 0xd8; ret;
0x00100b35: seta al; movzx eax, al; neg eax; ret;
0x00100b36: xchg edi, eax; ror byte ptr [rdi], 0xb6; shl bh, 0xd8; ret;
0x00100b37: ror byte ptr [rdi], 0xb6; shl bh, 0xd8; ret;
0x00100b38: movzx eax, al; neg eax; ret;
0x00100b39: mov dh, 0xc0; neg eax; ret;
0x00100b3a: shl bh, 0xd8; ret;
0x00100c88: in al, dx; clc; add [rax], al; add [rcx-0x11373], cl; jmp qword ptr [rax+rcx*2-0x75];
0x00100c89: clc; add [rax], al; add [rcx-0x11373], cl; jmp qword ptr [rax+rcx*2-0x75];
0x00100c8a: add [rax], al; add [rcx-0x11373], cl; jmp qword ptr [rax+rcx*2-0x75];
0x00100c8c: add [rcx-0x11373], cl; jmp qword ptr [rax+rcx*2-0x75];
0x00100e5c: adc [rcx+1], cl; ret 0x394d;
0x00100e5f: ret 0x394d;
0x00100f1b: ret 0x1fe8;
0x00100f8f: dec dword ptr [rax+0xf]; ret 0x8d48;
0x001010cc: ret 0xfffb;
0x0010111b: add ebp, eax; add [rax], al; nop; mov rax, [rip+0xbcd39]; mov eax, [rax+0x38]; ret;
0x0010111d: add [rax], al; nop; mov rax, [rip+0xbcd39]; mov eax, [rax+0x38]; ret;
0x0010111f: nop; mov rax, [rip+0xbcd39]; mov eax, [rax+0x38]; ret;
0x00101120: mov rax, [rip+0xbcd39]; mov eax, [rax+0x38]; ret;
0x00101121: mov eax, [rip+0xbcd39]; mov eax, [rax+0x38]; ret;
0x00101122: add eax, 0xbcd39; mov eax, [rax+0x38]; ret;
0x00101123: cmp ebp, ecx; or eax, [rax]; mov eax, [rax+0x38]; ret;
0x00101125: or eax, [rax]; mov eax, [rax+0x38]; ret;
0x00101127: mov eax, [rax+0x38]; ret;
0x00101173: mov rsi, [rsp+0x18]; mov rdx, [rsp+0x10]; mov rcx, [rsp+8]; mov rax, [rsp]; add rsp, 0x38; ret;
0x00101174: mov esi, [rsp+0x18]; mov rdx, [rsp+0x10]; mov rcx, [rsp+8]; mov rax, [rsp]; add rsp, 0x38; ret;
0x00101176: and al, 0x18; mov rdx, [rsp+0x10]; mov rcx, [rsp+8]; mov rax, [rsp]; add rsp, 0x38; ret;
0x00101178: mov rdx, [rsp+0x10]; mov rcx, [rsp+8]; mov rax, [rsp]; add rsp, 0x38; ret;
0x00101179: mov edx, [rsp+0x10]; mov rcx, [rsp+8]; mov rax, [rsp]; add rsp, 0x38; ret;
0x0010117a: push rsp; and al, 0x10; mov rcx, [rsp+8]; mov rax, [rsp]; add rsp, 0x38; ret;
0x0010117b: and al, 0x10; mov rcx, [rsp+8]; mov rax, [rsp]; add rsp, 0x38; ret;
0x0010117c: adc [rax-0x75], cl; and al, 8; mov rax, [rsp]; add rsp, 0x38; ret;
0x0010117d: mov rcx, [rsp+8]; mov rax, [rsp]; add rsp, 0x38; ret;
0x0010117e: mov ecx, [rsp+8]; mov rax, [rsp]; add rsp, 0x38; ret;
0x00101180: and al, 8; mov rax, [rsp]; add rsp, 0x38; ret;
0x00101181: or [rax-0x75], cl; add al, 0x24; add rsp, 0x38; ret;
0x001011d4: mov rsi, [rsp+0x18]; mov rdx, [rsp+0x10]; mov rcx, [rsp+8]; mov rax, [rsp]; add rsp, 0x40; ret;
0x001011d5: mov esi, [rsp+0x18]; mov rdx, [rsp+0x10]; mov rcx, [rsp+8]; mov rax, [rsp]; add rsp, 0x40; ret;
0x001011d7: and al, 0x18; mov rdx, [rsp+0x10]; mov rcx, [rsp+8]; mov rax, [rsp]; add rsp, 0x40; ret;
0x001011d9: mov rdx, [rsp+0x10]; mov rcx, [rsp+8]; mov rax, [rsp]; add rsp, 0x40; ret;
0x001011da: mov edx, [rsp+0x10]; mov rcx, [rsp+8]; mov rax, [rsp]; add rsp, 0x40; ret;
0x001011db: push rsp; and al, 0x10; mov rcx, [rsp+8]; mov rax, [rsp]; add rsp, 0x40; ret;
0x001011dc: and al, 0x10; mov rcx, [rsp+8]; mov rax, [rsp]; add rsp, 0x40; ret;
0x001011dd: adc [rax-0x75], cl; and al, 8; mov rax, [rsp]; add rsp, 0x40; ret;
0x001011de: mov rcx, [rsp+8]; mov rax, [rsp]; add rsp, 0x40; ret;
0x001011df: mov ecx, [rsp+8]; mov rax, [rsp]; add rsp, 0x40; ret;
0x001011e1: and al, 8; mov rax, [rsp]; add rsp, 0x40; ret;
0x001011e2: or [rax-0x75], cl; add al, 0x24; add rsp, 0x40; ret;
0x001011e3: mov rax, [rsp]; add rsp, 0x40; ret;
0x001011e4: mov eax, [rsp]; add rsp, 0x40; ret;
0x001011e5: add al, 0x24; add rsp, 0x40; ret;
0x001011e6: and al, 0x48; add esp, 0x40; ret;
0x001011e7: add rsp, 0x40; ret;
0x001011e8: add esp, 0x40; ret;
0x001011fe: add [rax+rcx*2-0x75], ah; add [rax-0x75], cl; adc [rbx+0xc882], cl; add [rbx-0x48f0f440], al; ror byte ptr [rax-0x75], 0x54; ret 0x8940;
0x00101202: add [rax-0x75], cl; adc [rbx+0xc882], cl; add [rbx-0x48f0f440], al; ror byte ptr [rax-0x75], 0x54; ret 0x8940;
0x00101205: adc [rbx+0xc882], cl; add [rbx-0x48f0f440], al; ror byte ptr [rax-0x75], 0x54; ret 0x8940;
0x00101209: add [rax], al; add [rbx-0x48f0f440], al; ror byte ptr [rax-0x75], 0x54; ret 0x8940;
0x0010120b: add [rbx-0x48f0f440], al; ror byte ptr [rax-0x75], 0x54; ret 0x8940;
0x00101268: mov rax, [rip+0xbcb99]; mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 8; ret;
0x00101269: mov eax, [rip+0xbcb99]; mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 8; ret;
0x0010126a: add eax, 0xbcb99; mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 8; ret;
0x0010126d: or eax, [rax]; mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 8; ret;
0x0010126f: mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 8; ret;
0x00101271: mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 8; ret;
0x00101272: mov rax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 8; ret;
0x00101273: mov eax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 8; ret;
0x0010128e: add [rax+rcx*2-0x75], ah; add [rax-0x75], cl; adc [rbx+0xc882], cl; add [rbx-0x48f0fd40], al; ror byte ptr [rax-0x75], 0x54; ret 0x8940;
0x00101292: add [rax-0x75], cl; adc [rbx+0xc882], cl; add [rbx-0x48f0fd40], al; ror byte ptr [rax-0x75], 0x54; ret 0x8940;
0x00101295: adc [rbx+0xc882], cl; add [rbx-0x48f0fd40], al; ror byte ptr [rax-0x75], 0x54; ret 0x8940;
0x00101299: add [rax], al; add [rbx-0x48f0fd40], al; ror byte ptr [rax-0x75], 0x54; ret 0x8940;
0x0010129b: add [rbx-0x48f0fd40], al; ror byte ptr [rax-0x75], 0x54; ret 0x8940;
0x001012f8: mov rax, [rip+0xbcb09]; mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret;
0x001012f9: mov eax, [rip+0xbcb09]; mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret;
0x001012fa: add eax, 0xbcb09; mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret;
0x001012fd: or eax, [rax]; mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret;
0x001012ff: mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret;
0x00101301: mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret;
0x00101302: mov rax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret;
0x00101303: mov eax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret;
0x0010131e: add [rax+rcx*2-0x75], ah; add [rax-0x75], cl; adc [rbx+0xc882], cl; add [rbx-0x48f0f740], al; ror byte ptr [rax-0x75], 0x54; ret 0x8940;
0x00101322: add [rax-0x75], cl; adc [rbx+0xc882], cl; add [rbx-0x48f0f740], al; ror byte ptr [rax-0x75], 0x54; ret 0x8940;
0x00101325: adc [rbx+0xc882], cl; add [rbx-0x48f0f740], al; ror byte ptr [rax-0x75], 0x54; ret 0x8940;
0x00101329: add [rax], al; add [rbx-0x48f0f740], al; ror byte ptr [rax-0x75], 0x54; ret 0x8940;
0x0010132b: add [rbx-0x48f0f740], al; ror byte ptr [rax-0x75], 0x54; ret 0x8940;
0x00101388: mov rax, [rip+0xbca79]; mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 1; ret;
0x00101389: mov eax, [rip+0xbca79]; mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 1; ret;
0x0010138a: add eax, 0xbca79; mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 1; ret;
0x0010138d: or eax, [rax]; mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 1; ret;
0x0010138f: mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 1; ret;
0x00101391: mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 1; ret;
0x00101392: mov rax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 1; ret;
0x00101393: mov eax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 1; ret;
0x001013ae: add [rax+rcx*2-0x75], ah; add [rax-0x75], cl; adc [rbx+0xc882], cl; add [rbx-0x48f0f640], al; ror byte ptr [rax-0x75], 0x54; ret 0x8940;
0x001013b2: add [rax-0x75], cl; adc [rbx+0xc882], cl; add [rbx-0x48f0f640], al; ror byte ptr [rax-0x75], 0x54; ret 0x8940;
0x001013b5: adc [rbx+0xc882], cl; add [rbx-0x48f0f640], al; ror byte ptr [rax-0x75], 0x54; ret 0x8940;
0x001013b9: add [rax], al; add [rbx-0x48f0f640], al; ror byte ptr [rax-0x75], 0x54; ret 0x8940;
0x001013bb: add [rbx-0x48f0f640], al; ror byte ptr [rax-0x75], 0x54; ret 0x8940;
0x00101418: mov rax, [rip+0xbc9e9]; mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 2; ret;
0x00101419: mov eax, [rip+0xbc9e9]; mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 2; ret;
0x0010141a: add eax, 0xbc9e9; mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 2; ret;
0x0010141d: or eax, [rax]; mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 2; ret;
0x0010141f: mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 2; ret;
0x00101421: mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 2; ret;
0x00101422: mov rax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 2; ret;
0x00101423: mov eax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 2; ret;
0x00101445: add [rax-0x75], cl; adc [rbx+0xc882], cl; add [rbx-0x48f0fc40], al; ror byte ptr [rax-0x75], 0x44; ret 0x8940;
0x00101448: adc [rbx+0xc882], cl; add [rbx-0x48f0fc40], al; ror byte ptr [rax-0x75], 0x44; ret 0x8940;
0x0010144c: add [rax], al; add [rbx-0x48f0fc40], al; ror byte ptr [rax-0x75], 0x44; ret 0x8940;
0x0010144e: add [rbx-0x48f0fc40], al; ror byte ptr [rax-0x75], 0x44; ret 0x8940;
0x001014ce: add [rax+rcx*2-0x75], ah; add [rax-0x75], cl; adc [rbx+0xc882], cl; add [rbx-0x48f0fe40], al; ror byte ptr [rax-0x75], 0x54; ret 0x8940;
0x001014d2: add [rax-0x75], cl; adc [rbx+0xc882], cl; add [rbx-0x48f0fe40], al; ror byte ptr [rax-0x75], 0x54; ret 0x8940;
0x001014d5: adc [rbx+0xc882], cl; add [rbx-0x48f0fe40], al; ror byte ptr [rax-0x75], 0x54; ret 0x8940;
0x001014d9: add [rax], al; add [rbx-0x48f0fe40], al; ror byte ptr [rax-0x75], 0x54; ret 0x8940;
0x001014db: add [rbx-0x48f0fe40], al; ror byte ptr [rax-0x75], 0x54; ret 0x8940;
0x00101538: mov rax, [rip+0xbc8c9]; mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x200; ret;
0x00101539: mov eax, [rip+0xbc8c9]; mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x200; ret;
0x0010153a: add eax, 0xbc8c9; mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x200; ret;
0x0010153b: leave; enter 0xb, 0x89; jmp qword ptr [rax+rcx*2-0x75];
0x0010153d: or eax, [rax]; mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x200; ret;
0x0010153f: mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x200; ret;
0x00101541: mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x200; ret;
0x00101542: mov rax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x200; ret;
0x00101543: mov eax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x200; ret;
0x0010155e: add [rax+rcx*2-0x75], ah; add [rax-0x75], cl; adc [rbx+0xc882], cl; add [rbx-0x48f0f840], al; ror byte ptr [rax-0x75], 0x54; ret 0x8940;
0x00101562: add [rax-0x75], cl; adc [rbx+0xc882], cl; add [rbx-0x48f0f840], al; ror byte ptr [rax-0x75], 0x54; ret 0x8940;
0x00101565: adc [rbx+0xc882], cl; add [rbx-0x48f0f840], al; ror byte ptr [rax-0x75], 0x54; ret 0x8940;
0x00101569: add [rax], al; add [rbx-0x48f0f840], al; ror byte ptr [rax-0x75], 0x54; ret 0x8940;
0x0010156b: add [rbx-0x48f0f840], al; ror byte ptr [rax-0x75], 0x54; ret 0x8940;
0x001015c8: mov rax, [rip+0xbc839]; mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8000; ret;
0x001015c9: mov eax, [rip+0xbc839]; mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8000; ret;
0x001015ca: add eax, 0xbc839; mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8000; ret;
0x001015cc: enter 0xb, 0x89; jmp qword ptr [rax+rcx*2-0x75];
0x001015cd: or eax, [rax]; mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8000; ret;
0x001015cf: mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8000; ret;
0x001015d1: mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8000; ret;
0x001015d2: mov rax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8000; ret;
0x001015d3: mov eax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8000; ret;
0x001015ee: add [rax+rcx*2-0x75], ah; add [rax-0x75], cl; adc [rbx+0xc882], cl; add [rbx-0x48f0f940], al; ror byte ptr [rax-0x75], 0x54; ret 0x8940;
0x001015f2: add [rax-0x75], cl; adc [rbx+0xc882], cl; add [rbx-0x48f0f940], al; ror byte ptr [rax-0x75], 0x54; ret 0x8940;
0x001015f5: adc [rbx+0xc882], cl; add [rbx-0x48f0f940], al; ror byte ptr [rax-0x75], 0x54; ret 0x8940;
0x001015f9: add [rax], al; add [rbx-0x48f0f940], al; ror byte ptr [rax-0x75], 0x54; ret 0x8940;
0x001015fb: add [rbx-0x48f0f940], al; ror byte ptr [rax-0x75], 0x54; ret 0x8940;
0x00101658: mov rax, [rip+0xbc7a9]; mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4000; ret;
0x00101659: mov eax, [rip+0xbc7a9]; mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4000; ret;
0x0010165a: add eax, 0xbc7a9; mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4000; ret;
0x0010165b: test eax, 0x89000bc7; jmp qword ptr [rax+rcx*2-0x75];
0x0010165d: or eax, [rax]; mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4000; ret;
0x0010165f: mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4000; ret;
0x00101661: mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4000; ret;
0x00101662: mov rax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4000; ret;
0x00101663: mov eax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4000; ret;
0x0010167e: add [rax+rcx*2-0x75], ah; add [rax-0x75], cl; adc [rbx+0xc882], cl; add [rbx-0x48f0f540], al; ror byte ptr [rax-0x75], 0x54; ret 0x8940;
0x00101682: add [rax-0x75], cl; adc [rbx+0xc882], cl; add [rbx-0x48f0f540], al; ror byte ptr [rax-0x75], 0x54; ret 0x8940;
0x00101685: adc [rbx+0xc882], cl; add [rbx-0x48f0f540], al; ror byte ptr [rax-0x75], 0x54; ret 0x8940;
0x00101689: add [rax], al; add [rbx-0x48f0f540], al; ror byte ptr [rax-0x75], 0x54; ret 0x8940;
0x0010168b: add [rbx-0x48f0f540], al; ror byte ptr [rax-0x75], 0x54; ret 0x8940;
0x001016e8: mov rax, [rip+0xbc719]; mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 4; ret;
0x001016e9: mov eax, [rip+0xbc719]; mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 4; ret;
0x001016ea: add eax, 0xbc719; mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 4; ret;
0x001016ed: or eax, [rax]; mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 4; ret;
0x001016ef: mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 4; ret;
0x001016f1: mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 4; ret;
0x001016f2: mov rax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 4; ret;
0x001016f3: mov eax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 4; ret;
0x0010170e: add [rax+rcx*2-0x75], ah; add [rax-0x75], cl; adc [rbx+0xc882], cl; add [rbx-0x48f0fa40], al; ror byte ptr [rax-0x75], 0x54; ret 0x8940;
0x00101712: add [rax-0x75], cl; adc [rbx+0xc882], cl; add [rbx-0x48f0fa40], al; ror byte ptr [rax-0x75], 0x54; ret 0x8940;
0x00101715: adc [rbx+0xc882], cl; add [rbx-0x48f0fa40], al; ror byte ptr [rax-0x75], 0x54; ret 0x8940;
0x00101719: add [rax], al; add [rbx-0x48f0fa40], al; ror byte ptr [rax-0x75], 0x54; ret 0x8940;
0x0010171b: add [rbx-0x48f0fa40], al; ror byte ptr [rax-0x75], 0x54; ret 0x8940;
0x0010171d: rol byte ptr [rip+0x48c0b70f], 0x8b; push rsp; ret 0x8940;
0x00101778: mov rax, [rip+0xbc689]; mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2000; ret;
0x00101779: mov eax, [rip+0xbc689]; mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2000; ret;
0x0010177a: add eax, 0xbc689; mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2000; ret;
0x0010177d: or eax, [rax]; mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2000; ret;
0x0010177f: mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2000; ret;
0x00101781: mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2000; ret;
0x00101782: mov rax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2000; ret;
0x00101783: mov eax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2000; ret;
0x00101800: mov rax, [rip+0xbc601]; mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x100; ret;
0x00101801: mov eax, [rip+0xbc601]; mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x100; ret;
0x00101802: add eax, 0xbc601; mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x100; ret;
0x00101805: or eax, [rax]; mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x100; ret;
0x00101807: mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x100; ret;
0x00101809: mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x100; ret;
0x0010180a: mov rax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x100; ret;
0x0010180b: mov eax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x100; ret;
0x0010182e: add [rax+rcx*2-0x75], ah; add [rax-0x75], cl; adc [rbx+0xc882], cl; add [rbx-0x48f0fb40], al; ror byte ptr [rax-0x75], 0x54; ret 0x8940;
0x00101832: add [rax-0x75], cl; adc [rbx+0xc882], cl; add [rbx-0x48f0fb40], al; ror byte ptr [rax-0x75], 0x54; ret 0x8940;
0x00101835: adc [rbx+0xc882], cl; add [rbx-0x48f0fb40], al; ror byte ptr [rax-0x75], 0x54; ret 0x8940;
0x00101839: add [rax], al; add [rbx-0x48f0fb40], al; ror byte ptr [rax-0x75], 0x54; ret 0x8940;
0x0010183b: add [rbx-0x48f0fb40], al; ror byte ptr [rax-0x75], 0x54; ret 0x8940;
0x0010183d: rol byte ptr [rdi+rcx], 0xb7; ror byte ptr [rax-0x75], 0x54; ret 0x8940;
0x00101841: ror byte ptr [rax-0x75], 0x54; ret 0x8940;
0x00101844: push rsp; ret 0x8940;
0x00101898: mov rax, [rip+0xbc569]; mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1000; ret;
0x00101899: mov eax, [rip+0xbc569]; mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1000; ret;
0x0010189a: add eax, 0xbc569; mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1000; ret;
0x0010189b: imul eax, ebp, 0xff89000b; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1000; ret;
0x0010189d: or eax, [rax]; mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1000; ret;
0x0010189f: mov edi, edi; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1000; ret;
0x001018a1: mov rax, fs:[rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1000; ret;
0x001018a2: mov rax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1000; ret;
0x001018a3: mov eax, [rax]; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1000; ret;
0x001018bd: add [rax-0x75], cl; adc [rbx+0xd082], cl; add [rbx-0x48f0fe40], al; ror byte ptr [rax-0x75], 0x44; ret 0x8940;
0x001018c0: adc [rbx+0xd082], cl; add [rbx-0x48f0fe40], al; ror byte ptr [rax-0x75], 0x44; ret 0x8940;
0x001018c4: add [rax], al; add [rbx-0x48f0fe40], al; ror byte ptr [rax-0x75], 0x44; ret 0x8940;
0x001018c6: add [rbx-0x48f0fe40], al; ror byte ptr [rax-0x75], 0x44; ret 0x8940;
0x001018cc: ror byte ptr [rax-0x75], 0x44; ret 0x8940;
0x001018d0: ret 0x8940;
0x001018f9: adc [rbp+0x440a75d2], eax; mov eax, eax; ret;
0x001018fb: shl byte ptr [rbp+0xa], cl; mov eax, r8d; ret;
0x001018fd: or al, [rcx+rcx*4-0x40]; ret;
0x00101969: nop [rax]; mov esi, eax; and esi, [rdx+0x10]; lea rdx, [rdx+rsi*4]; add eax, [rdx+rcx]; ret;
0x0010196d: add [rax], al; add [rcx+0x107223c6], cl; lea rdx, [rdx+rsi*4]; add eax, [rdx+rcx]; ret;
0x0010196e: add [rax], al; mov esi, eax; and esi, [rdx+0x10]; lea rdx, [rdx+rsi*4]; add eax, [rdx+rcx]; ret;
0x00101b62: ret 0x480b;
0x00101bb3: nop [rax+rax]; mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 8; ret;
0x00101bb5: add [rax], r8b; mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 8; ret;
0x00101bb6: add [rax], al; mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 8; ret;
0x00101bb7: add [rax-0x75], cl; push 0xffffffffb70fff89; add al, 0x78; and eax, 8; ret;
0x00101bb8: mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 8; ret;
0x00101bb9: mov eax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 8; ret;
0x00101bbb: push 0xffffffffb70fff89; add al, 0x78; and eax, 8; ret;
0x00101bbc: mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 8; ret;
0x00101bbe: movzx eax, word ptr [rax+rdi*2]; and eax, 8; ret;
0x00101bc0: add al, 0x78; and eax, 8; ret;
0x00101bc2: and eax, 8; ret;
0x00101be2: ret 0x4802;
0x00101c33: nop [rax+rax]; mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret;
0x00101c35: add [rax], r8b; mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret;
0x00101c36: add [rax], al; mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret;
0x00101c37: add [rax-0x75], cl; push 0xffffffffb70fff89; add al, 0x78; and eax, 0x400; ret;
0x00101c38: mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret;
0x00101c39: mov eax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret;
0x00101c3b: push 0xffffffffb70fff89; add al, 0x78; and eax, 0x400; ret;
0x00101c3c: mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret;
0x00101c3e: movzx eax, word ptr [rax+rdi*2]; and eax, 0x400; ret;
0x00101c40: add al, 0x78; and eax, 0x400; ret;
0x00101c42: and eax, 0x400; ret;
0x00101cb3: nop [rax+rax]; mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 1; ret;
0x00101cb5: add [rax], r8b; mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 1; ret;
0x00101cb6: add [rax], al; mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 1; ret;
0x00101cb7: add [rax-0x75], cl; push 0xffffffffb70fff89; add al, 0x78; and eax, 1; ret;
0x00101cb8: mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 1; ret;
0x00101cb9: mov eax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 1; ret;
0x00101cbb: push 0xffffffffb70fff89; add al, 0x78; and eax, 1; ret;
0x00101cbc: mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 1; ret;
0x00101cbe: movzx eax, word ptr [rax+rdi*2]; and eax, 1; ret;
0x00101cc0: add al, 0x78; and eax, 1; ret;
0x00101ce2: ret 0x4809;
0x00101d33: nop [rax+rax]; mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 2; ret;
0x00101d35: add [rax], r8b; mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 2; ret;
0x00101d36: add [rax], al; mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 2; ret;
0x00101d37: add [rax-0x75], cl; push 0xffffffffb70fff89; add al, 0x78; and eax, 2; ret;
0x00101d38: mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 2; ret;
0x00101d39: mov eax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 2; ret;
0x00101d3b: push 0xffffffffb70fff89; add al, 0x78; and eax, 2; ret;
0x00101d3c: mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 2; ret;
0x00101d3e: movzx eax, word ptr [rax+rdi*2]; and eax, 2; ret;
0x00101d40: add al, 0x78; and eax, 2; ret;
0x00101d42: and eax, 2; ret;
0x00101d65: ret 0x4803;
0x00101da4: mov ecx, edi; mov r8d, [rax+rdx]; shr r8d, cl; and r8d, 1; mov eax, r8d; ret;
0x00101da5: stc; mov r8d, [rax+rdx]; shr r8d, cl; and r8d, 1; mov eax, r8d; ret;
0x00101da6: mov r8d, [rax+rdx]; shr r8d, cl; and r8d, 1; mov eax, r8d; ret;
0x00101da7: mov eax, [rax+rdx]; shr r8d, cl; and r8d, 1; mov eax, r8d; ret;
0x00101da8: add al, 0x10; shr r8d, cl; and r8d, 1; mov eax, r8d; ret;
0x00101daa: shr r8d, cl; and r8d, 1; mov eax, r8d; ret;
0x00101dab: shr eax, cl; and r8d, 1; mov eax, r8d; ret;
0x00101dad: and r8d, 1; mov eax, r8d; ret;
0x00101dae: and eax, 1; mov eax, r8d; ret;
0x00101db0: add [rcx+rcx*4-0x40], eax; ret;
0x00101db8: sub edi, 0x30; xor r8d, r8d; cmp edi, 9; setbe r8b; mov eax, r8d; ret;
0x00101dbb: xor r8d, r8d; cmp edi, 9; setbe r8b; mov eax, r8d; ret;
0x00101dbc: xor eax, eax; cmp edi, 9; setbe r8b; mov eax, r8d; ret;
0x00101dbe: cmp edi, 9; setbe r8b; mov eax, r8d; ret;
0x00101dbf: dec dword ptr [rcx]; setbe r8b; mov eax, r8d; ret;
0x00101dc1: setbe r8b; mov eax, r8d; ret;
0x00101dc2: setbe al; mov eax, r8d; ret;
0x00101e33: nop [rax+rax]; mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x200; ret;
0x00101e35: add [rax], r8b; mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x200; ret;
0x00101e36: add [rax], al; mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x200; ret;
0x00101e37: add [rax-0x75], cl; push 0xffffffffb70fff89; add al, 0x78; and eax, 0x200; ret;
0x00101e38: mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x200; ret;
0x00101e39: mov eax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x200; ret;
0x00101e3b: push 0xffffffffb70fff89; add al, 0x78; and eax, 0x200; ret;
0x00101e3c: mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x200; ret;
0x00101e3e: movzx eax, word ptr [rax+rdi*2]; and eax, 0x200; ret;
0x00101e40: add al, 0x78; and eax, 0x200; ret;
0x00101e42: and eax, 0x200; ret;
0x00101e43: add [rdx], al; add [rax], al; ret;
0x00101eb3: nop [rax+rax]; mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8000; ret;
0x00101eb5: add [rax], r8b; mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8000; ret;
0x00101eb6: add [rax], al; mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8000; ret;
0x00101eb7: add [rax-0x75], cl; push 0xffffffffb70fff89; add al, 0x78; and eax, 0x8000; ret;
0x00101eb8: mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8000; ret;
0x00101eb9: mov eax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8000; ret;
0x00101ebb: push 0xffffffffb70fff89; add al, 0x78; and eax, 0x8000; ret;
0x00101ebc: mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x8000; ret;
0x00101ebe: movzx eax, word ptr [rax+rdi*2]; and eax, 0x8000; ret;
0x00101ec0: add al, 0x78; and eax, 0x8000; ret;
0x00101ec2: and eax, 0x8000; ret;
0x00101ec4: add byte ptr [rax], 0; ret;
0x00101ee2: ret 0x4806;
0x00101f33: nop [rax+rax]; mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4000; ret;
0x00101f35: add [rax], r8b; mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4000; ret;
0x00101f36: add [rax], al; mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4000; ret;
0x00101f37: add [rax-0x75], cl; push 0xffffffffb70fff89; add al, 0x78; and eax, 0x4000; ret;
0x00101f38: mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4000; ret;
0x00101f39: mov eax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4000; ret;
0x00101f3b: push 0xffffffffb70fff89; add al, 0x78; and eax, 0x4000; ret;
0x00101f3c: mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x4000; ret;
0x00101f3e: movzx eax, word ptr [rax+rdi*2]; and eax, 0x4000; ret;
0x00101f40: add al, 0x78; and eax, 0x4000; ret;
0x00101f42: and eax, 0x4000; ret;
0x00101f62: ret 0x480a;
0x00101fb3: nop [rax+rax]; mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 4; ret;
0x00101fb5: add [rax], r8b; mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 4; ret;
0x00101fb6: add [rax], al; mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 4; ret;
0x00101fb7: add [rax-0x75], cl; push 0xffffffffb70fff89; add al, 0x78; and eax, 4; ret;
0x00101fb8: mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 4; ret;
0x00101fb9: mov eax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 4; ret;
0x00101fbb: push 0xffffffffb70fff89; add al, 0x78; and eax, 4; ret;
0x00101fbc: mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 4; ret;
0x00101fbe: movzx eax, word ptr [rax+rdi*2]; and eax, 4; ret;
0x00101fc0: add al, 0x78; and eax, 4; ret;
0x00101fc2: and eax, 4; ret;
0x00101fe2: ret 0x4805;
0x00102033: nop [rax+rax]; mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2000; ret;
0x00102035: add [rax], r8b; mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2000; ret;
0x00102036: add [rax], al; mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2000; ret;
0x00102037: add [rax-0x75], cl; push 0xffffffffb70fff89; add al, 0x78; and eax, 0x2000; ret;
0x00102038: mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2000; ret;
0x00102039: mov eax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2000; ret;
0x0010203b: push 0xffffffffb70fff89; add al, 0x78; and eax, 0x2000; ret;
0x0010203c: mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x2000; ret;
0x0010203e: movzx eax, word ptr [rax+rdi*2]; and eax, 0x2000; ret;
0x00102040: add al, 0x78; and eax, 0x2000; ret;
0x00102042: and eax, 0x2000; ret;
0x00102043: add [rax], ah; add [rax], al; ret;
0x001020ae: add ebx, eax; mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x100; ret;
0x001020b0: mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x100; ret;
0x001020b1: mov eax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x100; ret;
0x001020b3: push 0xffffffffb70fff89; add al, 0x78; and eax, 0x100; ret;
0x001020b4: mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x100; ret;
0x001020b6: movzx eax, word ptr [rax+rdi*2]; and eax, 0x100; ret;
0x001020b8: add al, 0x78; and eax, 0x100; ret;
0x001020ba: and eax, 0x100; ret;
0x001020bb: add [rcx], al; add [rax], al; ret;
0x00102114: lea rax, [rdx+rax*4]; mov eax, [rax+rcx]; mov ecx, edi; shr eax, cl; and eax, 1; ret;
0x00102115: lea eax, [rdx+rax*4]; mov eax, [rax+rcx]; mov ecx, edi; shr eax, cl; and eax, 1; ret;
0x00102116: add al, 0x82; mov eax, [rax+rcx]; mov ecx, edi; shr eax, cl; and eax, 1; ret;
0x00102118: mov eax, [rax+rcx]; mov ecx, edi; shr eax, cl; and eax, 1; ret;
0x00102119: add al, 8; mov ecx, edi; shr eax, cl; and eax, 1; ret;
0x0010211b: mov ecx, edi; shr eax, cl; and eax, 1; ret;
0x0010211c: stc; shr eax, cl; and eax, 1; ret;
0x00102123: nop [rax+rax]; mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1000; ret;
0x00102125: add [rax], r8b; mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1000; ret;
0x00102126: add [rax], al; mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1000; ret;
0x00102127: add [rax-0x75], cl; push 0xffffffffb70fff89; add al, 0x78; and eax, 0x1000; ret;
0x00102128: mov rax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1000; ret;
0x00102129: mov eax, [rsi+0x68]; mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1000; ret;
0x0010212b: push 0xffffffffb70fff89; add al, 0x78; and eax, 0x1000; ret;
0x0010212c: mov edi, edi; movzx eax, word ptr [rax+rdi*2]; and eax, 0x1000; ret;
0x0010212e: movzx eax, word ptr [rax+rdi*2]; and eax, 0x1000; ret;
0x00102130: add al, 0x78; and eax, 0x1000; ret;
0x00102132: and eax, 0x1000; ret;
0x00102133: add [rax], dl; add [rax], al; ret;
0x0010217a: xor [rbp-0x3cfe8a37], eax; mov esi, eax; and esi, [rdx+0x10]; lea rdx, [rdx+rsi*4]; add eax, [rdx+rcx]; ret;
0x0010217e: add ebx, eax; mov esi, eax; and esi, [rdx+0x10]; lea rdx, [rdx+rsi*4]; add eax, [rdx+rcx]; ret;
0x001021cd: nop [rax]; mov esi, eax; and esi, [rdx+0x10]; lea rdx, [rdx+rsi*4]; add eax, [rdx+rcx]; ret;
0x001021cf: add [rcx+0x107223c6], cl; lea rdx, [rdx+rsi*4]; add eax, [rdx+rcx]; ret;
0x001021d0: mov esi, eax; and esi, [rdx+0x10]; lea rdx, [rdx+rsi*4]; add eax, [rdx+rcx]; ret;
0x001021d2: and esi, [rdx+0x10]; lea rdx, [rdx+rsi*4]; add eax, [rdx+rcx]; ret;
0x001021d4: adc [rax-0x73], cl; adc al, 0xb2; add eax, [rdx+rcx]; ret;
0x001021d5: lea rdx, [rdx+rsi*4]; add eax, [rdx+rcx]; ret;
0x001021d6: lea edx, [rdx+rsi*4]; add eax, [rdx+rcx]; ret;
0x001021d7: adc al, 0xb2; add eax, [rdx+rcx]; ret;
0x001021d8: mov dl, 3; add al, 0xa; ret;
0x001021d9: add eax, [rdx+rcx]; ret;
0x001021da: add al, 0xa; ret;
0x001022bc: add eax, 0x48104623; lea eax, [rsi+rax*4]; mov eax, [rax+rdx]; shr eax, cl; and eax, 1; ret;
0x001022bd: and eax, [rsi+0x10]; lea rax, [rsi+rax*4]; mov eax, [rax+rdx]; shr eax, cl; and eax, 1; ret;
0x001022be: adc [rax-0x73], r9b; add al, 0x86; mov eax, [rax+rdx]; shr eax, cl; and eax, 1; ret;
0x001022bf: adc [rax-0x73], cl; add al, 0x86; mov eax, [rax+rdx]; shr eax, cl; and eax, 1; ret;
0x001022c0: lea rax, [rsi+rax*4]; mov eax, [rax+rdx]; shr eax, cl; and eax, 1; ret;
0x001022c1: lea eax, [rsi+rax*4]; mov eax, [rax+rdx]; shr eax, cl; and eax, 1; ret;
0x001022c2: add al, 0x86; mov eax, [rax+rdx]; shr eax, cl; and eax, 1; ret;
0x001022c3: xchg [rbx-0x172ceffc], cl; and eax, 1; ret;
0x001022c4: mov eax, [rax+rdx]; shr eax, cl; and eax, 1; ret;
0x001022c5: add al, 0x10; shr eax, cl; and eax, 1; ret;
0x001022c7: shr eax, cl; and eax, 1; ret;
0x00102363: ret 0x8b05;
0x0010237e: shl byte ptr [rbp+7], cl; ret;
0x00102382: nop [rax+rax]; mov ecx, eax; and ecx, [rsi+0x10]; lea rcx, [rsi+rcx*4]; add eax, [rcx+rdx]; ret;
0x00102383: nop [rax+rax]; mov ecx, eax; and ecx, [rsi+0x10]; lea rcx, [rsi+rcx*4]; add eax, [rcx+rdx]; ret;
0x00102385: add [rax], r8b; mov ecx, eax; and ecx, [rsi+0x10]; lea rcx, [rsi+rcx*4]; add eax, [rcx+rdx]; ret;
0x00102386: add [rax], al; mov ecx, eax; and ecx, [rsi+0x10]; lea rcx, [rsi+rcx*4]; add eax, [rcx+rdx]; ret;
0x00102387: add [rcx+0x104e23c1], cl; lea rcx, [rsi+rcx*4]; add eax, [rcx+rdx]; ret;
0x00102388: mov ecx, eax; and ecx, [rsi+0x10]; lea rcx, [rsi+rcx*4]; add eax, [rcx+rdx]; ret;
0x00102389: shl dword ptr [rbx], 0x4e; adc [rax-0x73], cl; or al, 0x8e; add eax, [rcx+rdx]; ret;
0x0010238a: and ecx, [rsi+0x10]; lea rcx, [rsi+rcx*4]; add eax, [rcx+rdx]; ret;
0x0010238b: adc [rax-0x73], r9b; or al, 0x8e; add eax, [rcx+rdx]; ret;
0x0010238c: adc [rax-0x73], cl; or al, 0x8e; add eax, [rcx+rdx]; ret;
0x0010238d: lea rcx, [rsi+rcx*4]; add eax, [rcx+rdx]; ret;
0x0010238e: lea ecx, [rsi+rcx*4]; add eax, [rcx+rdx]; ret;
0x0010238f: or al, 0x8e; add eax, [rcx+rdx]; ret;
0x00102390: mov es, [rbx]; add al, 0x11; ret;
0x00102391: add eax, [rcx+rdx]; ret;
0x00102392: add al, 0x11; ret;
0x001023f7: add [rbp-0x7ccb8a40], al; sub eax, 0xc0885; add [rcx+rax*2-0x77], esp; sbb [rcx+rcx*4-0x40], ecx; pop rbx; ret;
0x001023f9: shl byte ptr [rbp+0x34], 0x83; sub eax, 0xc0885; add [rcx+rax*2-0x77], esp; sbb [rcx+rcx*4-0x40], ecx; pop rbx; ret;
0x001023fb: xor al, 0x83; sub eax, 0xc0885; add [rcx+rax*2-0x77], esp; sbb [rcx+rcx*4-0x40], ecx; pop rbx; ret;
0x001023fc: sub dword ptr [rip+0xc0885], 1; mov fs:[r9], ebx; mov rax, r8; pop rbx; ret;
0x001023fd: sub eax, 0xc0885; add [rcx+rax*2-0x77], esp; sbb [rcx+rcx*4-0x40], ecx; pop rbx; ret;
0x001023fe: test [rax], ecx; or al, 0; add [rcx+rax*2-0x77], esp; sbb [rcx+rcx*4-0x40], ecx; pop rbx; ret;
0x001023ff: or [rax+rax], cl; add [rcx+rax*2-0x77], esp; sbb [rcx+rcx*4-0x40], ecx; pop rbx; ret;
0x00102400: or al, 0; add [rcx+rax*2-0x77], esp; sbb [rcx+rcx*4-0x40], ecx; pop rbx; ret;
0x0010243c: mov byte ptr [rbp+0x31], 0xd2; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xc0832]; syscall;
0x0010243d: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xc0832]; syscall;
0x0010243e: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xc0832]; syscall;
0x0010243f: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xc0832]; syscall;
0x00102440: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xc0832]; syscall;
0x00102441: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xc0832]; syscall;
0x00102442: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xc0832]; syscall;
0x00102443: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xc0832]; syscall;
0x00102444: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xc0832]; syscall;
0x00102445: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xc0832]; syscall;
0x00102446: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xc0832; syscall;
0x00102447: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xc0832]; syscall;
0x00102448: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xc0832]; syscall;
0x00102449: add [rax+0xca], bh; lea rdi, [rip+0xc0832]; syscall;
0x0010244a: mov eax, 0xca; lea rdi, [rip+0xc0832]; syscall;
0x0010244c: add [rax], al; add [rax-0x73], cl; cmp eax, 0xc0832; syscall;
0x0010244d: add [rax], al; lea rdi, [rip+0xc0832]; syscall;
0x0010244e: add [rax-0x73], cl; cmp eax, 0xc0832; syscall;
0x0010244f: lea rdi, [rip+0xc0832]; syscall;
0x00102450: lea edi, [rip+0xc0832]; syscall;
0x00102451: cmp eax, 0xc0832; syscall;
0x00102452: xor cl, [rax]; or al, 0; syscall;
0x00102453: or [rax+rax], cl; syscall;
0x001024de: add al, ch; pop rsp; sub esi, edx; dec dword ptr [rax-0x77]; ret 0x8548;
0x001024e0: pop rsp; sub esi, edx; dec dword ptr [rax-0x77]; ret 0x8548;
0x001024e1: sub esi, edx; dec dword ptr [rax-0x77]; ret 0x8548;
0x001025f0: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xc06e6]; syscall;
0x001025f1: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xc06e6]; syscall;
0x001025f2: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xc06e6]; syscall;
0x001025f3: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xc06e6]; syscall;
0x001025f4: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xc06e6]; syscall;
0x001025f5: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xc06e6]; syscall;
0x001025f6: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xc06e6]; syscall;
0x001025f7: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xc06e6]; syscall;
0x001025f8: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xc06e6]; syscall;
0x001025f9: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xc06e6]; syscall;
0x001025fa: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xc06e6; syscall;
0x001025fb: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xc06e6]; syscall;
0x001025fc: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xc06e6]; syscall;
0x001025fd: add [rax+0xca], bh; lea rdi, [rip+0xc06e6]; syscall;
0x001025fe: mov eax, 0xca; lea rdi, [rip+0xc06e6]; syscall;
0x00102600: add [rax], al; add [rax-0x73], cl; cmp eax, 0xc06e6; syscall;
0x00102601: add [rax], al; lea rdi, [rip+0xc06e6]; syscall;
0x00102602: add [rax-0x73], cl; cmp eax, 0xc06e6; syscall;
0x00102603: lea rdi, [rip+0xc06e6]; syscall;
0x00102604: lea edi, [rip+0xc06e6]; syscall;
0x00102605: cmp eax, 0xc06e6; syscall;
0x00102606: out 6, al; or al, 0; syscall;
0x00102683: rol dword ptr [rsi], 0xc; add [rbx+rcx*4+0x35], cl; ret 0xc06;
0x00102686: add [rbx+rcx*4+0x35], cl; ret 0xc06;
0x0010268a: ret 0xc06;
0x001026a1: add al, ch; cdq; sub edx, esi; dec dword ptr [rax-0x77]; ret 0x8548;
0x001026a3: cdq; sub edx, esi; dec dword ptr [rax-0x77]; ret 0x8548;
0x001026a4: sub edx, esi; dec dword ptr [rax-0x77]; ret 0x8548;
0x0010272b: sub ebp, eax; out 0x2b, eax; bnd jmp qword ptr [rcx+rcx*4+0x2b];
0x0010272d: out 0x2b, eax; bnd jmp qword ptr [rcx+rcx*4+0x2b];
0x0010272e: sub esi, edx; jmp qword ptr [rcx+rcx*4+0x2b];
0x0010272f: bnd jmp qword ptr [rcx+rcx*4+0x2b];
0x0010276e: fiadd st, word ptr [rip-0x76b7fff4]; ret 0x8548;
0x0010276f: add eax, 0x8948000c; ret 0x8548;
0x001027d0: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xc056e]; syscall;
0x001027d1: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xc056e]; syscall;
0x001027d2: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xc056e]; syscall;
0x001027d3: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xc056e]; syscall;
0x001027d4: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xc056e]; syscall;
0x001027d5: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xc056e]; syscall;
0x001027d6: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xc056e]; syscall;
0x001027d7: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xc056e]; syscall;
0x001027d8: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xc056e]; syscall;
0x001027d9: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xc056e]; syscall;
0x001027da: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xc056e; syscall;
0x001027db: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xc056e]; syscall;
0x001027dc: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xc056e]; syscall;
0x001027dd: add [rax+0xca], bh; lea rdi, [rip+0xc056e]; syscall;
0x001027de: mov eax, 0xca; lea rdi, [rip+0xc056e]; syscall;
0x001027e0: add [rax], al; add [rax-0x73], cl; cmp eax, 0xc056e; syscall;
0x001027e1: add [rax], al; lea rdi, [rip+0xc056e]; syscall;
0x001027e2: add [rax-0x73], cl; cmp eax, 0xc056e; syscall;
0x001027e3: lea rdi, [rip+0xc056e]; syscall;
0x001027e4: lea edi, [rip+0xc056e]; syscall;
0x001027e5: cmp eax, 0xc056e; syscall;
0x001029c2: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xc03d4]; syscall;
0x001029c3: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xc03d4]; syscall;
0x001029c4: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xc03d4]; syscall;
0x001029c5: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xc03d4]; syscall;
0x001029c6: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xc03d4]; syscall;
0x001029c7: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xc03d4]; syscall;
0x001029c8: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xc03d4]; syscall;
0x001029c9: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xc03d4]; syscall;
0x001029ca: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xc03d4]; syscall;
0x001029cb: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xc03d4]; syscall;
0x001029cc: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xc03d4; syscall;
0x001029cd: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xc03d4]; syscall;
0x001029ce: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xc03d4]; syscall;
0x001029cf: add [rax+0xca], bh; lea rdi, [rip+0xc03d4]; syscall;
0x001029d0: mov eax, 0xca; lea rdi, [rip+0xc03d4]; syscall;
0x001029d2: add [rax], al; add [rax-0x73], cl; cmp eax, 0xc03d4; syscall;
0x001029d3: add [rax], al; lea rdi, [rip+0xc03d4]; syscall;
0x001029d4: add [rax-0x73], cl; cmp eax, 0xc03d4; syscall;
0x001029d5: lea rdi, [rip+0xc03d4]; syscall;
0x001029d6: lea edi, [rip+0xc03d4]; syscall;
0x001029d7: cmp eax, 0xc03d4; syscall;
0x001029d9: add ecx, [rax+rax]; syscall;
0x001029da: or al, 0; syscall;
0x001029ef: imul eax; and ebp, [rcx]; bnd jmp qword ptr [rbp+rax*2-0x77];
0x001029f1: and ebp, [rcx]; bnd jmp qword ptr [rbp+rax*2-0x77];
0x001029f2: sub edx, esi; jmp qword ptr [rbp+rax*2-0x77];
0x00102ef4: add dword ptr [rax], 0xcab80000; add [rax], al; add [rdi], cl; add eax, 0xfffd26e9; jmp qword ptr [rsi+0x2e];
0x00102efa: add [rax], al; add [rdi], cl; add eax, 0xfffd26e9; jmp qword ptr [rsi+0x2e];
0x00102efc: add [rdi], cl; add eax, 0xfffd26e9; jmp qword ptr [rsi+0x2e];
0x00102efe: add eax, 0xfffd26e9; jmp qword ptr [rsi+0x2e];
0x00102f76: cmp eax, 0x1000bfe; mov fs:[r8], r9d; add rsp, 8; ret;
0x00102f77: dec byte ptr [rbx]; add [rcx], al; mov fs:[r8], r9d; add rsp, 8; ret;
0x00102fc6: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xbfde2; syscall;
0x00102fcc: add [rax], al; add [rax-0x73], cl; cmp eax, 0xbfde2; syscall;
0x00102fce: add [rax-0x73], cl; cmp eax, 0xbfde2; syscall;
0x00102fd1: cmp eax, 0xbfde2; syscall;
0x0010304c: sub dword ptr [rip+0xbfe3d], 1; mov fs:[r8], r9d; add rsp, 8; ret;
0x00103074: fiadd st, word ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbfd2a]; syscall;
0x0010307e: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xbfd2a; syscall;
0x00103084: add [rax], al; add [rax-0x73], cl; cmp eax, 0xbfd2a; syscall;
0x00103086: add [rax-0x73], cl; cmp eax, 0xbfd2a; syscall;
0x00103089: cmp eax, 0xbfd2a; syscall;
0x0010308a: sub bh, ch; or eax, [rax]; syscall;
0x0010308b: std; or eax, [rax]; syscall;
0x0010313b: sub dword ptr [rip+0xbfc76], 1; mov fs:[r9], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret;
0x001031a5: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbfde2]; syscall;
0x001031a6: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbfde2]; syscall;
0x001031a7: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbfde2]; syscall;
0x001031a8: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbfde2]; syscall;
0x001031a9: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbfde2]; syscall;
0x001031aa: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xbfde2]; syscall;
0x001031ab: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbfde2]; syscall;
0x001031ac: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xbfde2]; syscall;
0x001031ad: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbfde2]; syscall;
0x001031ae: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xbfbfa; syscall;
0x001031af: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xbfde2]; syscall;
0x001031b0: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xbfde2]; syscall;
0x001031b1: add [rax+0xca], bh; lea rdi, [rip+0xbfde2]; syscall;
0x001031b2: mov eax, 0xca; lea rdi, [rip+0xbfde2]; syscall;
0x001031b4: add [rax], al; add [rax-0x73], cl; cmp eax, 0xbfbfa; syscall;
0x001031b5: add [rax], al; lea rdi, [rip+0xbfde2]; syscall;
0x001031b6: add [rax-0x73], cl; cmp eax, 0xbfbfa; syscall;
0x001031b7: lea rdi, [rip+0xbfde2]; syscall;
0x001031b8: lea edi, [rip+0xbfde2]; syscall;
0x001031b9: cmp eax, 0xbfbfa; syscall;
0x001031ba: cli; sti; or eax, [rax]; syscall;
0x001031bb: sti; or eax, [rax]; syscall;
0x00103623: dec dword ptr [rcx+0x39]; fmul st, qword ptr [rax+0xf]; ret 0x8948;
0x00103626: fmul st, qword ptr [rax+0xf]; ret 0x8948;
0x0010374f: dec dword ptr [rcx+0x39]; fimul st, word ptr [rax+0xf]; ret 0x8948;
0x00103752: fimul st, word ptr [rax+0xf]; ret 0x8948;
0x001037db: out 0xe8, eax; iretd;
0x0010393f: call qword ptr [rbp+0x4c];
0x001039a0: mov qword ptr [rbp], 0; mov eax, fs:[r12]; pop rbx; pop rbp; pop r12; ret;
0x001039a1: mov dword ptr [rbp], 0; mov eax, fs:[r12]; pop rbx; pop rbp; pop r12; ret;
0x001039a6: add [rax], al; mov eax, fs:[r12]; pop rbx; pop rbp; pop r12; ret;
0x001039a7: add [rcx+rax*2-0x75], ah; add al, 0x24; pop rbx; pop rbp; pop r12; ret;
0x001039a8: mov eax, fs:[r12]; pop rbx; pop rbp; pop r12; ret;
0x001039a9: mov eax, [r12]; pop rbx; pop rbp; pop r12; ret;
0x001039aa: mov eax, [rsp]; pop rbx; pop rbp; pop r12; ret;
0x001039ab: add al, 0x24; pop rbx; pop rbp; pop r12; ret;
0x001039ac: and al, 0x5b; pop rbp; pop r12; ret;
0x00103bcf: add dword ptr [rax], 0xcab80000; add [rax], al; add [rdi], cl; add eax, 0xffff4ce9; call qword ptr [rax+0x1ba];
0x00103bd5: add [rax], al; add [rdi], cl; add eax, 0xffff4ce9; call qword ptr [rax+0x1ba];
0x00103bd7: add [rdi], cl; add eax, 0xffff4ce9; call qword ptr [rax+0x1ba];
0x00103bd9: add eax, 0xffff4ce9; call qword ptr [rax+0x1ba];
0x00103bde: call qword ptr [rax+0x1ba];
0x00103c34: add dword ptr [rax], 0xcab80000; add [rax], al; add [rdi], cl; add eax, 0xffff4de9; jmp qword ptr [rsi+0x2e];
0x00103c3a: add [rax], al; add [rdi], cl; add eax, 0xffff4de9; jmp qword ptr [rsi+0x2e];
0x00103c3c: add [rdi], cl; add eax, 0xffff4de9; jmp qword ptr [rsi+0x2e];
0x00103c3e: add eax, 0xffff4de9; jmp qword ptr [rsi+0x2e];
0x00103da2: cld; jmp qword ptr [rsi+0xf];
0x00103e26: add rsp, 0x260; mov eax, r12d; pop rbp; pop r12; pop r13; ret;
0x00103e27: add esp, 0x260; mov eax, r12d; pop rbp; pop r12; pop r13; ret;
0x00103e2a: add al, [rax]; add [rcx+rcx*4-0x20], al; pop rbp; pop r12; pop r13; ret;
0x00103e2b: add [rax], al; mov eax, r12d; pop rbp; pop r12; pop r13; ret;
0x00103e2c: add [rcx+rcx*4-0x20], al; pop rbp; pop r12; pop r13; ret;
0x00103e8d: add dword ptr [rbp+0x31], 0x1bad2; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbef45]; syscall;
0x00103e97: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xbef45; syscall;
0x00103e9d: add [rax], al; add [rax-0x73], cl; cmp eax, 0xbef45; syscall;
0x00103e9f: add [rax-0x73], cl; cmp eax, 0xbef45; syscall;
0x00103ea2: cmp eax, 0xbef45; syscall;
0x00103ea4: out dx, eax; or eax, [rax]; syscall;
0x00103ea6: add [rdi], cl; add eax, 0xffff61e9; jmp qword ptr [rbx+rcx*4+4];
0x00103ea8: add eax, 0xffff61e9; jmp qword ptr [rbx+rcx*4+4];
0x00103f2c: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xbeeb0; syscall;
0x00103f32: add [rax], al; add [rax-0x73], cl; cmp eax, 0xbeeb0; syscall;
0x00103f34: add [rax-0x73], cl; cmp eax, 0xbeeb0; syscall;
0x00103f37: cmp eax, 0xbeeb0; syscall;
0x00103f38: mov al, 0xee; or eax, [rax]; syscall;
0x00103f39: out dx, al; or eax, [rax]; syscall;
0x00103f9a: add [rax], al; add [rbp-0x7cd08a40], al; sub eax, 0xbee44; add [rcx+rcx*4-0x40], eax; add rsp, 8; ret;
0x00103f9c: add [rbp-0x7cd08a40], al; sub eax, 0xbee44; add [rcx+rcx*4-0x40], eax; add rsp, 8; ret;
0x00103f9e: shl byte ptr [rbp+0x2f], 0x83; sub eax, 0xbee44; add [rcx+rcx*4-0x40], eax; add rsp, 8; ret;
0x00103fa1: sub dword ptr [rip+0xbee44], 1; mov eax, r8d; add rsp, 8; ret;
0x00103fa2: sub eax, 0xbee44; add [rcx+rcx*4-0x40], eax; add rsp, 8; ret;
0x00103fa4: out dx, al; or eax, [rax]; add [rcx+rcx*4-0x40], eax; add rsp, 8; ret;
0x00103fa5: or eax, [rax]; add [rcx+rcx*4-0x40], eax; add rsp, 8; ret;
0x00103fa6: add [rcx], al; mov eax, r8d; add rsp, 8; ret;
0x00103fa7: add [rcx+rcx*4-0x40], eax; add rsp, 8; ret;
0x00103fa8: mov eax, r8d; add rsp, 8; ret;
0x00103fa9: mov eax, eax; add rsp, 8; ret;
0x00103fdd: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbef45]; syscall;
0x00103fde: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbef45]; syscall;
0x00103fdf: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbef45]; syscall;
0x00103fe0: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbef45]; syscall;
0x00103fe1: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbef45]; syscall;
0x00103fe2: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xbef45]; syscall;
0x00103fe3: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbef45]; syscall;
0x00103fe4: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xbef45]; syscall;
0x00103fe5: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbef45]; syscall;
0x00103fe6: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xbedf6; syscall;
0x00103fe7: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xbef45]; syscall;
0x00103fe8: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xbef45]; syscall;
0x00103fe9: add [rax+0xca], bh; lea rdi, [rip+0xbef45]; syscall;
0x00103fea: mov eax, 0xca; lea rdi, [rip+0xbef45]; syscall;
0x00103fec: add [rax], al; add [rax-0x73], cl; cmp eax, 0xbedf6; syscall;
0x00103fed: add [rax], al; lea rdi, [rip+0xbef45]; syscall;
0x00103fee: add [rax-0x73], cl; cmp eax, 0xbedf6; syscall;
0x00103fef: lea rdi, [rip+0xbef45]; syscall;
0x00103ff0: lea edi, [rip+0xbef45]; syscall;
0x00103ff1: cmp eax, 0xbedf6; syscall;
0x00103ff2: imul ch; or eax, [rax]; syscall;
0x00103ff9: scasb [rdi]; nop [rax+rax]; mov eax, r8d; ret;
0x00103ffa: nop [rax+rax]; mov eax, r8d; ret;
0x00103ffb: nop [rax+rax]; mov eax, r8d; ret;
0x00103ffd: add [rax], r8b; mov eax, r8d; ret;
0x00104067: add [rbp-0x7ccb8a40], al; sub eax, 0xbedcd; add [rcx+rax*2-0x77], esp; sbb [rcx+rcx*4-0x40], ecx; pop rbx; ret;
0x00104069: shl byte ptr [rbp+0x34], 0x83; sub eax, 0xbedcd; add [rcx+rax*2-0x77], esp; sbb [rcx+rcx*4-0x40], ecx; pop rbx; ret;
0x0010406b: xor al, 0x83; sub eax, 0xbedcd; add [rcx+rax*2-0x77], esp; sbb [rcx+rcx*4-0x40], ecx; pop rbx; ret;
0x0010406c: sub dword ptr [rip+0xbedcd], 1; mov fs:[r9], ebx; mov rax, r8; pop rbx; ret;
0x0010406d: sub eax, 0xbedcd; add [rcx+rax*2-0x77], esp; sbb [rcx+rcx*4-0x40], ecx; pop rbx; ret;
0x0010406e: int 0xed; or eax, [rax]; add [rcx+rax*2-0x77], esp; sbb [rcx+rcx*4-0x40], ecx; pop rbx; ret;
0x0010406f: in eax, dx; or eax, [rax]; add [rcx+rax*2-0x77], esp; sbb [rcx+rcx*4-0x40], ecx; pop rbx; ret;
0x001040ac: mov byte ptr [rbp+0x31], 0xd2; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbed7a]; syscall;
0x001040ad: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbed7a]; syscall;
0x001040ae: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbed7a]; syscall;
0x001040af: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbed7a]; syscall;
0x001040b0: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbed7a]; syscall;
0x001040b1: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbed7a]; syscall;
0x001040b2: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xbed7a]; syscall;
0x001040b3: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbed7a]; syscall;
0x001040b4: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xbed7a]; syscall;
0x001040b5: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbed7a]; syscall;
0x001040b6: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xbed7a; syscall;
0x001040b7: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xbed7a]; syscall;
0x001040b8: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xbed7a]; syscall;
0x001040b9: add [rax+0xca], bh; lea rdi, [rip+0xbed7a]; syscall;
0x001040ba: mov eax, 0xca; lea rdi, [rip+0xbed7a]; syscall;
0x001040bc: add [rax], al; add [rax-0x73], cl; cmp eax, 0xbed7a; syscall;
0x001040bd: add [rax], al; lea rdi, [rip+0xbed7a]; syscall;
0x001040be: add [rax-0x73], cl; cmp eax, 0xbed7a; syscall;
0x001040bf: lea rdi, [rip+0xbed7a]; syscall;
0x001040c0: lea edi, [rip+0xbed7a]; syscall;
0x001040c1: cmp eax, 0xbed7a; syscall;
0x001040c3: in eax, dx; or eax, [rax]; syscall;
0x00104260: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbec0e]; syscall;
0x00104261: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbec0e]; syscall;
0x00104262: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbec0e]; syscall;
0x00104263: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbec0e]; syscall;
0x00104264: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbec0e]; syscall;
0x00104265: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbec0e]; syscall;
0x00104266: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xbec0e]; syscall;
0x00104267: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbec0e]; syscall;
0x00104268: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xbec0e]; syscall;
0x00104269: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbec0e]; syscall;
0x0010426a: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xbec0e; syscall;
0x0010426b: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xbec0e]; syscall;
0x0010426c: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xbec0e]; syscall;
0x0010426d: add [rax+0xca], bh; lea rdi, [rip+0xbec0e]; syscall;
0x0010426e: mov eax, 0xca; lea rdi, [rip+0xbec0e]; syscall;
0x00104270: add [rax], al; add [rax-0x73], cl; cmp eax, 0xbec0e; syscall;
0x00104271: add [rax], al; lea rdi, [rip+0xbec0e]; syscall;
0x00104272: add [rax-0x73], cl; cmp eax, 0xbec0e; syscall;
0x00104273: lea rdi, [rip+0xbec0e]; syscall;
0x00104274: lea edi, [rip+0xbec0e]; syscall;
0x00104275: cmp eax, 0xbec0e; syscall;
0x00104277: in al, dx; or eax, [rax]; syscall;
0x0010432f: or eax, 0x8948fff2; ret 0x8548;
0x001043b5: bnd jmp qword ptr [rsp+rax*2-0x77];
0x00104428: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbea8e]; syscall;
0x00104429: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbea8e]; syscall;
0x0010442a: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbea8e]; syscall;
0x0010442b: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbea8e]; syscall;
0x0010442c: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbea8e]; syscall;
0x0010442d: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbea8e]; syscall;
0x0010442e: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xbea8e]; syscall;
0x0010442f: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbea8e]; syscall;
0x00104430: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xbea8e]; syscall;
0x00104431: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbea8e]; syscall;
0x00104432: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xbea8e; syscall;
0x00104433: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xbea8e]; syscall;
0x00104434: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xbea8e]; syscall;
0x00104435: add [rax+0xca], bh; lea rdi, [rip+0xbea8e]; syscall;
0x00104436: mov eax, 0xca; lea rdi, [rip+0xbea8e]; syscall;
0x00104438: add [rax], al; add [rax-0x73], cl; cmp eax, 0xbea8e; syscall;
0x00104439: add [rax], al; lea rdi, [rip+0xbea8e]; syscall;
0x0010443a: add [rax-0x73], cl; cmp eax, 0xbea8e; syscall;
0x0010443b: lea rdi, [rip+0xbea8e]; syscall;
0x0010443c: lea edi, [rip+0xbea8e]; syscall;
0x0010443d: cmp eax, 0xbea8e; syscall;
0x0010443e: mov gs, dx; or eax, [rax]; syscall;
0x001044b7: ret 0x8b64;
0x00104601: dec byte ptr [rbx]; add [rax-0x77], cl; ret 0xd8e9;
0x00104603: add [rax-0x77], cl; ret 0xd8e9;
0x00104606: ret 0xd8e9;
0x00104642: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbe8ac]; syscall;
0x00104643: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbe8ac]; syscall;
0x00104644: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbe8ac]; syscall;
0x00104645: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbe8ac]; syscall;
0x00104646: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbe8ac]; syscall;
0x00104647: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbe8ac]; syscall;
0x00104648: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xbe8ac]; syscall;
0x00104649: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbe8ac]; syscall;
0x0010464a: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xbe8ac]; syscall;
0x0010464b: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbe8ac]; syscall;
0x0010464c: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xbe8ac; syscall;
0x0010464d: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xbe8ac]; syscall;
0x0010464e: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xbe8ac]; syscall;
0x0010464f: add [rax+0xca], bh; lea rdi, [rip+0xbe8ac]; syscall;
0x00104650: mov eax, 0xca; lea rdi, [rip+0xbe8ac]; syscall;
0x00104652: add [rax], al; add [rax-0x73], cl; cmp eax, 0xbe8ac; syscall;
0x00104653: add [rax], al; lea rdi, [rip+0xbe8ac]; syscall;
0x00104654: add [rax-0x73], cl; cmp eax, 0xbe8ac; syscall;
0x00104655: lea rdi, [rip+0xbe8ac]; syscall;
0x00104656: lea edi, [rip+0xbe8ac]; syscall;
0x00104657: cmp eax, 0xbe8ac; syscall;
0x00104672: or al, 0xf2; jmp qword ptr [rbp+rax*2-0x77];
0x00104673: bnd jmp qword ptr [rbp+rax*2-0x77];
0x0010479e: add [rcx], dh; shr al, 0x8a; and al, 0xf5; inc dword ptr [rcx-0x77]; ret 0xc031;
0x001047a0: shr al, 0x8a; and al, 0xf5; inc dword ptr [rcx-0x77]; ret 0xc031;
0x001047a3: and al, 0xf5; inc dword ptr [rcx-0x77]; ret 0xc031;
0x001047a4: cmc; inc dword ptr [rcx-0x77]; ret 0xc031;
0x001047a5: inc dword ptr [rcx-0x77]; ret 0xc031;
0x001048ce: call qword ptr [rax+0xabe];
0x001049b6: push rbp; in eax, 0xb; add [rcx], al; mov fs:[r8], r9d; add rsp, 8; ret;
0x001049b7: in eax, 0xb; add [rcx], al; mov fs:[r8], r9d; add rsp, 8; ret;
0x00104a06: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xbe4fa; syscall;
0x00104a0c: add [rax], al; add [rax-0x73], cl; cmp eax, 0xbe4fa; syscall;
0x00104a0e: add [rax-0x73], cl; cmp eax, 0xbe4fa; syscall;
0x00104a11: cmp eax, 0xbe4fa; syscall;
0x00104a8c: sub dword ptr [rip+0xbe555], 1; mov fs:[r8], r9d; add rsp, 8; ret;
0x00104a8f: in al, 0xb; add [rcx], al; mov fs:[r8], r9d; add rsp, 8; ret;
0x00104ab4: fiadd st, word ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbe442]; syscall;
0x00104abe: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xbe442; syscall;
0x00104ac4: add [rax], al; add [rax-0x73], cl; cmp eax, 0xbe442; syscall;
0x00104ac6: add [rax-0x73], cl; cmp eax, 0xbe442; syscall;
0x00104ac9: cmp eax, 0xbe442; syscall;
0x00104b7b: sub dword ptr [rip+0xbe38e], 1; mov fs:[r9], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret;
0x00104be5: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbe4fa]; syscall;
0x00104be6: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbe4fa]; syscall;
0x00104be7: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbe4fa]; syscall;
0x00104be8: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbe4fa]; syscall;
0x00104be9: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbe4fa]; syscall;
0x00104bea: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xbe4fa]; syscall;
0x00104beb: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbe4fa]; syscall;
0x00104bec: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xbe4fa]; syscall;
0x00104bed: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xbe4fa]; syscall;
0x00104bee: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xbe312; syscall;
0x00104bef: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xbe4fa]; syscall;
0x00104bf0: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xbe4fa]; syscall;
0x00104bf1: add [rax+0xca], bh; lea rdi, [rip+0xbe4fa]; syscall;
0x00104bf2: mov eax, 0xca; lea rdi, [rip+0xbe4fa]; syscall;
0x00104bf4: add [rax], al; add [rax-0x73], cl; cmp eax, 0xbe312; syscall;
0x00104bf5: add [rax], al; lea rdi, [rip+0xbe4fa]; syscall;
0x00104bf6: add [rax-0x73], cl; cmp eax, 0xbe312; syscall;
0x00104bf7: lea rdi, [rip+0xbe4fa]; syscall;
0x00104bf8: lea edi, [rip+0xbe4fa]; syscall;
0x00104bf9: cmp eax, 0xbe312; syscall;
0x00104bfa: adc ah, bl; or eax, [rax]; syscall;
0x00104fbb: add [rax], al; add [rax], al; add [rdi], cl; mov dh, 0x43; add [rax-0x7d], ecx; ret;
0x00104fbd: add [rax], al; add [rdi], cl; mov dh, 0x43; add [rax-0x7d], ecx; ret;
0x00104fd1: shl byte ptr [rdi+rax-0x3a], 3; add [rax-0x7d], cl; ret;
0x00105015: add al, [rax]; add [rdi], cl; mov dh, 0x43; add [rax-0x7d], ecx; ret;
0x0010507d: add [rax], al; add [rax+0xf], cl; mov esi, 0x83480153; ret;
0x0010509c: mov [0xb60fd189482572c6], eax; add [rax-0x7d], ecx; ret 0x3c01;
0x0010509f: and eax, 0xfd18948; mov dh, 0x42; add [rax-0x7d], ecx; ret 0x3c01;
0x001050a2: ror dword ptr [rdi], 1; mov dh, 0x42; add [rax-0x7d], ecx; ret 0x3c01;
0x001050a4: mov dh, 0x42; add [rax-0x7d], ecx; ret 0x3c01;
0x001050a6: add [rax-0x7d], ecx; ret 0x3c01;
0x001050a9: ret 0x3c01;
0x00105102: shr ebx, cl; iretd;
0x001051a9: sub al, 0x74; cmovs ecx, [rcx+0x42b60fd1]; add [rax-0x7d], ecx; ret 0x8401;
0x001051ab: cmovs ecx, [rcx+0x42b60fd1]; add [rax-0x7d], ecx; ret 0x8401;
0x001051ae: ror dword ptr [rdi], 1; mov dh, 0x42; add [rax-0x7d], ecx; ret 0x8401;
0x0010528b: test [rbp+rdi*8+0x3c6ffff], dl; add [rax-0x7d], cl; ret;
0x001055f4: add dword ptr [rax], 0xcab80000; add [rax], al; add [rdi], cl; add eax, 0xffff4ce9; jmp qword ptr [rsi+0x2e];
0x001055fa: add [rax], al; add [rdi], cl; add eax, 0xffff4ce9; jmp qword ptr [rsi+0x2e];
0x001055fc: add [rdi], cl; add eax, 0xffff4ce9; jmp qword ptr [rsi+0x2e];
0x001055fe: add eax, 0xffff4ce9; jmp qword ptr [rsi+0x2e];
0x001059db: add [r8-9], r9d; rol esi, 1; jmp qword ptr [rax];
0x001059dc: add [rax-9], ecx; rol esi, 1; jmp qword ptr [rax];
0x001059df: rol esi, 1; jmp qword ptr [rax];
0x00105a14: ror byte ptr [rax+0xf], 0x44; ret 0x894c;
0x00105c7e: xchg esi, eax; div cl; jmp qword ptr [rsi+0x66];
0x00105c7f: div cl; jmp qword ptr [rsi+0x66];
0x00105cfb: mov [rbx+0x38], rax; mov eax, r12d; pop rbx; pop rbp; pop r12; ret;
0x00105cfc: mov [rbx+0x38], eax; mov eax, r12d; pop rbx; pop rbp; pop r12; ret;
0x00105cfd: cmp [r9+r9*4-0x20], al; pop rbx; pop rbp; pop r12; ret;
0x00105cfe: cmp [rcx+rcx*4-0x20], al; pop rbx; pop rbp; pop r12; ret;
0x00105d11: mov dword ptr fs:[rax], 0xc; mov eax, r12d; pop rbx; pop rbp; pop r12; ret;
0x00105d12: mov dword ptr [rax], 0xc; mov eax, r12d; pop rbx; pop rbp; pop r12; ret;
0x00105d15: add [rax], al; add [rcx+rcx*4-0x20], al; pop rbx; pop rbp; pop r12; ret;
0x00105d16: add [rax], al; mov eax, r12d; pop rbx; pop rbp; pop r12; ret;
0x00105d17: add [rcx+rcx*4-0x20], al; pop rbx; pop rbp; pop r12; ret;
0x00105d2c: or edi, [rax+1]; ret;
0x00105e38: add rsp, 0xd8; pop rbx; pop rbp; pop r12; pop r13; ret;
0x00105e39: add esp, 0xd8; pop rbx; pop rbp; pop r12; pop r13; ret;
0x00105ecf: add [rbx+0x38], rbp; mov rax, rbp; pop rbx; pop rbp; pop r12; ret;
0x00105ed0: add [rbx+0x38], ebp; mov rax, rbp; pop rbx; pop rbp; pop r12; ret;
0x00105ed1: imul edi, [rax], 0x48; mov eax, ebp; pop rbx; pop rbp; pop r12; ret;
0x00105ed3: mov rax, rbp; pop rbx; pop rbp; pop r12; ret;
0x00105ed4: mov eax, ebp; pop rbx; pop rbp; pop r12; ret;
0x00105ef0: int1; dec dword ptr [rax-0x77]; ret;
0x00105efb: or al, 0x5b; pop rbp; pop r12; ret;
0x00105f3c: dec dword ptr [rax+1]; pop rbp; cmp [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret;
0x00105f3d: add [rbp+0x38], rbx; xor eax, eax; pop rbx; pop rbp; pop r12; ret;
0x00105f3e: add [rbp+0x38], ebx; xor eax, eax; pop rbx; pop rbp; pop r12; ret;
0x00105f3f: pop rbp; cmp [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret;
0x00105f40: cmp [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret;
0x00105f6b: push rbp; cmp [rax-0x3c41f0e8], cl; add rsp, 8; pop rbx; pop rbp; ret;
0x00105f6c: cmp [rax-0x3c41f0e8], cl; add rsp, 8; pop rbx; pop rbp; ret;
0x00105f6d: mov [rax], bl; movsx eax, bl; add rsp, 8; pop rbx; pop rbp; ret;
0x00105f6e: sbb [rdi], cl; mov esi, 0xc48348c3; or [rbx+0x5d], bl; ret;
0x00105f6f: movsx eax, bl; add rsp, 8; pop rbx; pop rbp; ret;
0x00105f70: mov esi, 0xc48348c3; or [rbx+0x5d], bl; ret;
0x00105fd5: mov rax, [rbx+8]; mov [rbx+8], rbp; add rsp, 8; pop rbx; pop rbp; ret;
0x00105fd6: mov eax, [rbx+8]; mov [rbx+8], rbp; add rsp, 8; pop rbx; pop rbp; ret;
0x00105fd7: or [r8-0x77], cl; imul ecx, [rax], 0x48; add esp, 8; pop rbx; pop rbp; ret;
0x00105fd8: or [rax-0x77], cl; imul ecx, [rax], 0x48; add esp, 8; pop rbx; pop rbp; ret;
0x00105fd9: mov [rbx+8], rbp; add rsp, 8; pop rbx; pop rbp; ret;
0x00105fda: mov [rbx+8], ebp; add rsp, 8; pop rbx; pop rbp; ret;
0x00105fdb: imul ecx, [rax], 0x48; add esp, 8; pop rbx; pop rbp; ret;
0x00106025: mov rax, [rbx+0x10]; mov [rbx+0x10], rbp; add rsp, 8; pop rbx; pop rbp; ret;
0x00106026: mov eax, [rbx+0x10]; mov [rbx+0x10], rbp; add rsp, 8; pop rbx; pop rbp; ret;
0x00106027: adc [r8-0x77], cl; imul edx, [rax], 0x48; add esp, 8; pop rbx; pop rbp; ret;
0x00106028: adc [rax-0x77], cl; imul edx, [rax], 0x48; add esp, 8; pop rbx; pop rbp; ret;
0x00106029: mov [rbx+0x10], rbp; add rsp, 8; pop rbx; pop rbp; ret;
0x0010602a: mov [rbx+0x10], ebp; add rsp, 8; pop rbx; pop rbp; ret;
0x0010602b: imul edx, [rax], 0x48; add esp, 8; pop rbx; pop rbp; ret;
0x00106075: mov rax, [rbx+0x18]; mov [rbx+0x18], rbp; add rsp, 8; pop rbx; pop rbp; ret;
0x00106076: mov eax, [rbx+0x18]; mov [rbx+0x18], rbp; add rsp, 8; pop rbx; pop rbp; ret;
0x00106077: sbb [r8-0x77], cl; imul ebx, [rax], 0x48; add esp, 8; pop rbx; pop rbp; ret;
0x00106078: sbb [rax-0x77], cl; imul ebx, [rax], 0x48; add esp, 8; pop rbx; pop rbp; ret;
0x00106079: mov [rbx+0x18], rbp; add rsp, 8; pop rbx; pop rbp; ret;
0x0010607a: mov [rbx+0x18], ebp; add rsp, 8; pop rbx; pop rbp; ret;
0x0010607b: imul ebx, [rax], 0x48; add esp, 8; pop rbx; pop rbp; ret;
0x0010609e: and [r15+0x16], r14b; cmp qword ptr [rbx+0x28], 0; mov eax, 0; cmovns rax, [rbx+0x28]; pop rbx; ret;
0x0010609f: and [rdi+0x16], dh; cmp qword ptr [rbx+0x28], 0; mov eax, 0; cmovns rax, [rbx+0x28]; pop rbx; ret;
0x001060a2: cmp qword ptr [rbx+0x28], 0; mov eax, 0; cmovns rax, [rbx+0x28]; pop rbx; ret;
0x001060a3: cmp dword ptr [rbx+0x28], 0; mov eax, 0; cmovns rax, [rbx+0x28]; pop rbx; ret;
0x001060a5: sub [rax], al; mov eax, 0; cmovns rax, [rbx+0x28]; pop rbx; ret;
0x001060a6: add [rax], bh; cmovns rax, [rbx+0x28]; pop rbx; ret;
0x001060a7: mov eax, 0; cmovns rax, [rbx+0x28]; pop rbx; ret;
0x001060a8: add [rax], al; add [rax], al; cmovns rax, [rbx+0x28]; pop rbx; ret;
0x001060aa: add [rax], al; cmovns rax, [rbx+0x28]; pop rbx; ret;
0x001060ac: cmovns rax, [rbx+0x28]; pop rbx; ret;
0x001060ad: cmovns eax, [rbx+0x28]; pop rbx; ret;
0x0010616f: add dh, [rbp+0x1e]; mov [rsp+8], rsi; mov rdx, r13; mov rcx, r14; mov rdi, rbx; call r12;
0x00106172: mov [rsp+8], rsi; mov rdx, r13; mov rcx, r14; mov rdi, rbx; call r12;
0x00106173: mov [rsp+8], esi; mov rdx, r13; mov rcx, r14; mov rdi, rbx; call r12;
0x00106175: and al, 8; mov rdx, r13; mov rcx, r14; mov rdi, rbx; call r12;
0x00106176: or [rcx+rcx*4-0x16], cl; mov rcx, r14; mov rdi, rbx; call r12;
0x00106177: mov rdx, r13; mov rcx, r14; mov rdi, rbx; call r12;
0x00106178: mov edx, ebp; mov rcx, r14; mov rdi, rbx; call r12;
0x0010617a: mov rcx, r14; mov rdi, rbx; call r12;
0x0010617b: mov ecx, esi; mov rdi, rbx; call r12;
0x0010617c: int1; mov rdi, rbx; call r12;
0x0010617d: mov rdi, rbx; call r12;
0x0010617e: mov edi, ebx; call r12;
0x0010618c: ror byte ptr [rdi], 0x94; ret 0x8349;
0x0010621c: add al, 0x70; or [rdi+0x44], dh; mov eax, ecx; ret;
0x0010621e: or [rdi+0x44], dh; mov eax, ecx; ret;
0x00106220: out 0x44, eax; mov eax, ecx; ret;
0x00106221: mov eax, r9d; ret;
0x00106289: ret 0x5c41;
0x00106295: nop [rax]; pop rbp; pop r12; pop r13; ret;
0x00106297: add [rbp+0x41], bl; pop rsp; pop r13; ret;
0x001062f9: and [rbx-0x2e8cfe13], al; add rsp, 0x18; pop rbx; pop rbp; ret;
0x001062fb: in eax, dx; add [rbx-0x2f], esi; add rsp, 0x18; pop rbx; pop rbp; ret;
0x001062fc: add [rbx-0x2f], esi; add rsp, 0x18; pop rbx; pop rbp; ret;
0x0010632a: in al, dx; or [rax-0x75], cl; cmp [r8-0x77], r9b; ret 0x2b48;
0x0010632b: or [rax-0x75], cl; cmp [r8-0x77], r9b; ret 0x2b48;
0x0010632e: cmp [r8-0x77], r9b; ret 0x2b48;
0x0010632f: cmp [rax-0x77], cl; ret 0x2b48;
0x00106332: ret 0x2b48;
0x00106366: mov [rbx+0x38], rdx; mov byte ptr [rax], 0xa; add rsp, 8; pop rbx; pop rbp; ret;
0x00106367: mov [rbx+0x38], edx; mov byte ptr [rax], 0xa; add rsp, 8; pop rbx; pop rbp; ret;
0x00106369: cmp dh, al; add [rdx], cl; add rsp, 8; pop rbx; pop rbp; ret;
0x0010636a: mov byte ptr [rax], 0xa; add rsp, 8; pop rbx; pop rbp; ret;
0x0010636b: add [rdx], cl; add rsp, 8; pop rbx; pop rbp; ret;
0x001063ae: mov [rbx+0x38], rdx; mov byte ptr [rax], 0x20; add rsp, 8; pop rbx; pop rbp; ret;
0x001063af: mov [rbx+0x38], edx; mov byte ptr [rax], 0x20; add rsp, 8; pop rbx; pop rbp; ret;
0x001063b1: cmp dh, al; add [rax], ah; add rsp, 8; pop rbx; pop rbp; ret;
0x001063b2: mov byte ptr [rax], 0x20; add rsp, 8; pop rbx; pop rbp; ret;
0x001063b3: add [rax], ah; add rsp, 8; pop rbx; pop rbp; ret;
0x00106576: adc [rax-0x77], cl; ret 0x950f;
0x00106579: ret 0x950f;
0x0010657a: setne al; mov edi, 0x2000001; and eax, ecx; mov [rsp+0x20], cl; mov [rsp+0x1f], al; call qword ptr [r12+0x28];
0x0010657b: xchg ebp, eax; sar byte ptr [rdi+0x2000001], 0x21; enter 0x4c88, 0x24; and [rax+0x411f2444], cl; call qword ptr [rsp+0x28];
0x0010657c: sar byte ptr [rdi+0x2000001], 0x21; enter 0x4c88, 0x24; and [rax+0x411f2444], cl; call qword ptr [rsp+0x28];
0x0010657d: mov edi, 0x2000001; and eax, ecx; mov [rsp+0x20], cl; mov [rsp+0x1f], al; call qword ptr [r12+0x28];
0x0010657e: add [rax], eax; add [rdx], al; and eax, ecx; mov [rsp+0x20], cl; mov [rsp+0x1f], al; call qword ptr [r12+0x28];
0x0010657f: add [rax], al; add ah, [rcx]; enter 0x4c88, 0x24; and [rax+0x411f2444], cl; call qword ptr [rsp+0x28];
0x00106580: add [rdx], al; and eax, ecx; mov [rsp+0x20], cl; mov [rsp+0x1f], al; call qword ptr [r12+0x28];
0x00106581: add ah, [rcx]; enter 0x4c88, 0x24; and [rax+0x411f2444], cl; call qword ptr [rsp+0x28];
0x00106582: and eax, ecx; mov [rsp+0x20], cl; mov [rsp+0x1f], al; call qword ptr [r12+0x28];
0x00106583: enter 0x4c88, 0x24; and [rax+0x411f2444], cl; call qword ptr [rsp+0x28];
0x00106584: mov [rsp+0x20], cl; mov [rsp+0x1f], al; call qword ptr [r12+0x28];
0x00106586: and al, 0x20; mov [rsp+0x1f], al; call qword ptr [r12+0x28];
0x00106587: and [rax+0x411f2444], cl; call qword ptr [rsp+0x28];
0x00106588: mov [rsp+0x1f], al; call qword ptr [r12+0x28];
0x0010658a: and al, 0x1f; call qword ptr [r12+0x28];
0x00106683: sub [rax-0x7b], cl; ror byte ptr [rdi], 0x84; ret;
0x0010668b: add [rax], al; mov rdx, [rsp+0x10]; xor esi, esi; mov edi, 0x2000004; call rax;
0x0010668c: add [rax-0x75], cl; push rsp; and al, 0x10; xor esi, esi; mov edi, 0x2000004; call rax;
0x0010668d: mov rdx, [rsp+0x10]; xor esi, esi; mov edi, 0x2000004; call rax;
0x0010668e: mov edx, [rsp+0x10]; xor esi, esi; mov edi, 0x2000004; call rax;
0x0010668f: push rsp; and al, 0x10; xor esi, esi; mov edi, 0x2000004; call rax;
0x00106690: and al, 0x10; xor esi, esi; mov edi, 0x2000004; call rax;
0x00106691: adc [rcx], dh; idiv byte ptr [rdi+0x2000004]; call rax;
0x00106692: xor esi, esi; mov edi, 0x2000004; call rax;
0x00106693: idiv byte ptr [rdi+0x2000004]; call rax;
0x00106694: mov edi, 0x2000004; call rax;
0x00106695: add al, 0; add [rdx], al; call rax;
0x00106697: add [rdx], al; call rax;
0x001067ed: add [rax], r8b; lea edi, [r13+0x2000001]; mov rsi, rbp; mov [rsp+0x10], rax; mov rdx, rax; call qword ptr [r12+0x28];
0x001067ee: add [rax], al; lea edi, [r13+0x2000001]; mov rsi, rbp; mov [rsp+0x10], rax; mov rdx, rax; call qword ptr [r12+0x28];
0x001067ef: add [rcx-0x73], al; mov ebp, 0x2000001; mov rsi, rbp; mov [rsp+0x10], rax; mov rdx, rax; call qword ptr [r12+0x28];
0x001067f0: lea edi, [r13+0x2000001]; mov rsi, rbp; mov [rsp+0x10], rax; mov rdx, rax; call qword ptr [r12+0x28];
0x001067f1: lea edi, [rbp+0x2000001]; mov rsi, rbp; mov [rsp+0x10], rax; mov rdx, rax; call qword ptr [r12+0x28];
0x001067f2: mov ebp, 0x2000001; mov rsi, rbp; mov [rsp+0x10], rax; mov rdx, rax; call qword ptr [r12+0x28];
0x001067f3: add [rax], eax; add [rdx], al; mov rsi, rbp; mov [rsp+0x10], rax; mov rdx, rax; call qword ptr [r12+0x28];
0x001067f4: add [rax], al; add cl, [rax-0x77]; out dx, al; mov [rsp+0x10], rax; mov rdx, rax; call qword ptr [r12+0x28];
0x001067f5: add [rdx], al; mov rsi, rbp; mov [rsp+0x10], rax; mov rdx, rax; call qword ptr [r12+0x28];
0x001067f6: add cl, [rax-0x77]; out dx, al; mov [rsp+0x10], rax; mov rdx, rax; call qword ptr [r12+0x28];
0x001067f7: mov rsi, rbp; mov [rsp+0x10], rax; mov rdx, rax; call qword ptr [r12+0x28];
0x001067f8: mov esi, ebp; mov [rsp+0x10], rax; mov rdx, rax; call qword ptr [r12+0x28];
0x001067f9: out dx, al; mov [rsp+0x10], rax; mov rdx, rax; call qword ptr [r12+0x28];
0x001067fa: mov [rsp+0x10], rax; mov rdx, rax; call qword ptr [r12+0x28];
0x001067fb: mov [rsp+0x10], eax; mov rdx, rax; call qword ptr [r12+0x28];
0x001067fd: and al, 0x10; mov rdx, rax; call qword ptr [r12+0x28];
0x001067fe: adc [rax-0x77], cl; ret 0xff41;
0x00106a56: mov rcx, [rip+0xb73ab]; movsxd rsi, edx; mov rcx, fs:[rcx]; test byte ptr [rcx+rsi*2+1], 0x40; cmovne eax, edx; ret;
0x00106a57: mov ecx, [rip+0xb73ab]; movsxd rsi, edx; mov rcx, fs:[rcx]; test byte ptr [rcx+rsi*2+1], 0x40; cmovne eax, edx; ret;
0x00106a58: or eax, 0xb73ab; movsxd rsi, edx; mov rcx, fs:[rcx]; test byte ptr [rcx+rsi*2+1], 0x40; cmovne eax, edx; ret;
0x00106a5b: or eax, [rax]; movsxd rsi, edx; mov rcx, fs:[rcx]; test byte ptr [rcx+rsi*2+1], 0x40; cmovne eax, edx; ret;
0x00106a5d: movsxd rsi, edx; mov rcx, fs:[rcx]; test byte ptr [rcx+rsi*2+1], 0x40; cmovne eax, edx; ret;
0x00106a5e: movsxd esi, edx; mov rcx, fs:[rcx]; test byte ptr [rcx+rsi*2+1], 0x40; cmovne eax, edx; ret;
0x00106a60: mov rcx, fs:[rcx]; test byte ptr [rcx+rsi*2+1], 0x40; cmovne eax, edx; ret;
0x00106a61: mov rcx, [rcx]; test byte ptr [rcx+rsi*2+1], 0x40; cmovne eax, edx; ret;
0x00106a62: mov ecx, [rcx]; test byte ptr [rcx+rsi*2+1], 0x40; cmovne eax, edx; ret;
0x00106a64: test byte ptr [rcx+rsi*2+1], 0x40; cmovne eax, edx; ret;
0x00106a67: add [rax+0xf], eax; ret 0xfc3;
0x00106a6d: nop [rax]; xor eax, eax; ret;
0x00106acc: shl byte ptr [rbp-0x1c], 0x48; add esp, 8; mov rax, r12; pop rbx; pop r12; ret;
0x00106ace: in al, 0x48; add esp, 8; mov rax, r12; pop rbx; pop r12; ret;
0x00106acf: add rsp, 8; mov rax, r12; pop rbx; pop r12; ret;
0x00106ad0: add esp, 8; mov rax, r12; pop rbx; pop r12; ret;
0x00106ad2: or [rcx+rcx*4-0x20], cl; pop rbx; pop r12; ret;
0x00106ad3: mov rax, r12; pop rbx; pop r12; ret;
0x00106d97: shl byte ptr [rbp+rdx+0x48], 0x83; ret;
0x00106e1b: add [rax], al; mov rsi, r15; mov edi, 0x2000006; mov rdx, rax; call qword ptr [rbx+0x28];
0x00106e1c: add [rax], al; mov rsi, r15; mov edi, 0x2000006; mov rdx, rax; call qword ptr [rbx+0x28];
0x00106e1d: add [rcx+rcx*4-2], cl; mov edi, 0x2000006; mov rdx, rax; call qword ptr [rbx+0x28];
0x00106e1e: mov rsi, r15; mov edi, 0x2000006; mov rdx, rax; call qword ptr [rbx+0x28];
0x00106e1f: mov esi, edi; mov edi, 0x2000006; mov rdx, rax; call qword ptr [rbx+0x28];
0x00106e21: mov edi, 0x2000006; mov rdx, rax; call qword ptr [rbx+0x28];
0x00106e23: add [rax], al; add cl, [rax-0x77]; ret 0x53ff;
0x00106e24: add [rdx], al; mov rdx, rax; call qword ptr [rbx+0x28];
0x00106e25: add cl, [rax-0x77]; ret 0x53ff;
0x00106e26: mov rdx, rax; call qword ptr [rbx+0x28];
0x00106e27: mov edx, eax; call qword ptr [rbx+0x28];
0x00106e28: ret 0x53ff;
0x00106e48: adc al, 0xe2; int1; inc dword ptr [rax-0x76b7ffc8]; ret;
0x00106e4a: int1; inc dword ptr [rax-0x76b7ffc8]; ret;
0x00106e4b: inc dword ptr [rax-0x76b7ffc8]; ret;
0x00106f19: and [rax-0x49f0ffc5], al; adc [rdi], cl; test [rdx-0x7d000000], ch; ret 0x8801;
0x00106f1f: adc [rdi], cl; test [rdx-0x7d000000], ch; ret 0x8801;
0x00106f21: test [rdx-0x7d000000], ch; ret 0x8801;
0x00106f7d: ret 0x3b01;
0x00106f88: add esi, eax; and al, 4; add ecx, ebp; iretd;
0x00106f8b: and al, 4; add ecx, ebp; iretd;
0x0010703e: pop rsi; cmp al, 0; add [rcx+rcx*4-0x12], cl; mov edi, 0x2000003; mov rdx, rax; call qword ptr [r12+0x28];
0x0010703f: cmp al, 0; add [rcx+rcx*4-0x12], cl; mov edi, 0x2000003; mov rdx, rax; call qword ptr [r12+0x28];
0x00107040: add [rax], al; mov rsi, r13; mov edi, 0x2000003; mov rdx, rax; call qword ptr [r12+0x28];
0x00107041: add [rcx+rcx*4-0x12], cl; mov edi, 0x2000003; mov rdx, rax; call qword ptr [r12+0x28];
0x00107042: mov rsi, r13; mov edi, 0x2000003; mov rdx, rax; call qword ptr [r12+0x28];
0x00107043: mov esi, ebp; mov edi, 0x2000003; mov rdx, rax; call qword ptr [r12+0x28];
0x00107044: out dx, al; mov edi, 0x2000003; mov rdx, rax; call qword ptr [r12+0x28];
0x00107045: mov edi, 0x2000003; mov rdx, rax; call qword ptr [r12+0x28];
0x00107046: add eax, [rax]; add [rdx], al; mov rdx, rax; call qword ptr [r12+0x28];
0x00107086: mov fs, dx; int1; jmp qword ptr [rsi+0xf];
0x0010747b: add [rax], al; add [rax], al; add [rax-0x77], cl; ret 0x8b48;
0x0010747d: add [rax], al; add [rax-0x77], cl; ret 0x8b48;
0x001074ef: ret 0x64e9;
0x001074fb: and al, 0x89; iretd;
0x00107517: ret 0x3ce9;
0x0010758b: add cl, [rdi]; test dh, dl; add [rax], al; add [rax-0x7d], cl; ret 0x4830;
0x0010758d: test dh, dl; add [rax], al; add [rax-0x7d], cl; ret 0x4830;
0x0010758f: add [rax], al; add [rax-0x7d], cl; ret 0x4830;
0x00107591: add [rax-0x7d], cl; ret 0x4830;
0x00107594: ret 0x4830;
0x0010764c: inc dword ptr [rbp-0x6af0be40]; ret;
0x0010764e: rol byte ptr [rcx+0xf], 0x95; ret;
0x00107651: xchg ebp, eax; ret;
0x0010769c: inc dword ptr [rbp-0x6af0be40]; ret 0x8545;
0x0010769e: rol byte ptr [rcx+0xf], 0x95; ret 0x8545;
0x001076a1: xchg ebp, eax; ret 0x8545;
0x001076a2: ret 0x8545;
0x00107709: add ch, bl; ret;
0x001078db: add dword ptr [rax+0x4c000000], 0xffffff89; ret 0xceb;
0x001078e2: ret 0xceb;
0x001078fb: add [rax], al; add [rax], al; add [rbx-0x7cb7c7ad], cl; ret;
0x001078fd: add [rax], al; add [rbx-0x7cb7c7ad], cl; ret;
0x001078ff: add [rbx-0x7cb7c7ad], cl; ret;
0x00107901: push rbx; cmp [rax-0x7d], cl; ret;
0x00107902: cmp [rax-0x7d], cl; ret;
0x0010795e: call qword ptr [rax-0x7cb7f878];
0x00107a4f: add [rax-0x77], cl; ret 0x8b48;
0x00107a5e: ret 0x4828;
0x00107c53: xor [rax+0x39], cl; ret 0xbf75;
0x00107c56: ret 0xbf75;
0x00107cfd: add [rcx-0x7d], ecx; ret 0xe901;
0x00107efe: call qword ptr [rax-0x401176b8];
0x00108291: push rbx; sbb dh, dh; ret 0x7508;
0x00108292: sbb dh, dh; ret 0x7508;
0x001082cb: add [rax], al; add [rax], al; add [rax-0x7d], cl; ret;
0x001084f1: add [rax], al; mov rsi, rbx; mov edi, 0x2000005; mov rdx, rax; call qword ptr [r12+0x28];
0x001084f2: add [rax-0x77], cl; fidivr st, word ptr [rdi+0x2000005]; mov rdx, rax; call qword ptr [r12+0x28];
0x001084f3: mov rsi, rbx; mov edi, 0x2000005; mov rdx, rax; call qword ptr [r12+0x28];
0x001084f4: mov esi, ebx; mov edi, 0x2000005; mov rdx, rax; call qword ptr [r12+0x28];
0x001084f5: fidivr st, word ptr [rdi+0x2000005]; mov rdx, rax; call qword ptr [r12+0x28];
0x001084f6: mov edi, 0x2000005; mov rdx, rax; call qword ptr [r12+0x28];
0x001084f7: add eax, 0x48020000; mov edx, eax; call qword ptr [r12+0x28];
0x001084f8: add [rax], al; add cl, [rax-0x77]; ret 0xff41;
0x001084f9: add [rdx], al; mov rdx, rax; call qword ptr [r12+0x28];
0x001084fa: add cl, [rax-0x77]; ret 0xff41;
0x001084fb: mov rdx, rax; call qword ptr [r12+0x28];
0x001084fc: mov edx, eax; call qword ptr [r12+0x28];
0x001084fd: ret 0xff41;
0x001084fe: call qword ptr [r12+0x28];
0x001084ff: call qword ptr [rsp+0x28];
0x001086d4: add [rax], al; add [rcx], dh; shr al, cl; ret 0xffdd;
0x001086d6: add [rcx], dh; shr al, cl; ret 0xffdd;
0x001086d8: shr al, cl; ret 0xffdd;
0x001086da: ret 0xffdd;
0x001089d7: ror byte ptr [rax], 0xf; test [rax], ch; or al, [rax]; add [rax+0x73be0f48], dl; add [rax-0x7d], ecx; ret;
0x001089d8: or [rdi], cl; test [rax], ch; or al, [rax]; add [rax+0x73be0f48], dl; add [rax-0x7d], ecx; ret;
0x001089da: test [rax], ch; or al, [rax]; add [rax+0x73be0f48], dl; add [rax-0x7d], ecx; ret;
0x001089dc: or al, [rax]; add [rax+0x73be0f48], dl; add [rax-0x7d], ecx; ret;
0x001089de: add [rax+0x73be0f48], dl; add [rax-0x7d], ecx; ret;
0x00108a1f: add [rax+0xf], cl; mov esi, 0x83480173; ret;
0x00108a22: mov esi, 0x83480173; ret;
0x00108b4d: dec dword ptr [rcx-0x75]; cmp [r13-0x77], r9b; sbb gs:[rax-0x77], cl; ret 0x2b49;
0x00108b50: cmp [r13-0x77], r9b; sbb gs:[rax-0x77], cl; ret 0x2b49;
0x00108b51: cmp [rbp-0x77], cl; sbb gs:[rax-0x77], cl; ret 0x2b49;
0x00108b54: sbb gs:[rax-0x77], cl; ret 0x2b49;
0x00108b55: sbb [rax-0x77], cl; ret 0x2b49;
0x00108b6e: dec dword ptr [rcx-0x75]; cmp r9b, r13b; ret 0xfffd;
0x00108b71: cmp r9b, r13b; ret 0xfffd;
0x00108b72: cmp cl, ch; ret 0xfffd;
0x00108c9d: fdivr st, st(7); dec dword ptr [rcx]; ret;
0x00108c9f: dec dword ptr [rcx]; ret;
0x00108cd8: pop rbp; cmp eax, 0x3fe80008; ret;
0x00108cd9: cmp eax, 0x3fe80008; ret;
0x00108d40: dec dword ptr [rcx-0x75]; sub [rax-0x77], r9b; ret;
0x00108d43: sub [rax-0x77], r9b; ret;
0x00108d44: sub [rax-0x77], cl; ret;
0x00108d75: mov r9, [rbp-0xb8]; mov rcx, [rbp-0xd0]; mov edi, r12d; mov rdx, rax; mov rsi, r9; call qword ptr [rcx+0x28];
0x00108d76: mov ecx, [rbp-0xb8]; mov rcx, [rbp-0xd0]; mov edi, r12d; mov rdx, rax; mov rsi, r9; call qword ptr [rcx+0x28];
0x00108d7c: mov rcx, [rbp-0xd0]; mov edi, r12d; mov rdx, rax; mov rsi, r9; call qword ptr [rcx+0x28];
0x00108d7d: mov ecx, [rbp-0xd0]; mov edi, r12d; mov rdx, rax; mov rsi, r9; call qword ptr [rcx+0x28];
0x00108d82: inc dword ptr [rcx+rcx*4-0x19]; mov rdx, rax; mov rsi, r9; call qword ptr [rcx+0x28];
0x00108d83: mov edi, r12d; mov rdx, rax; mov rsi, r9; call qword ptr [rcx+0x28];
0x00108d84: mov edi, esp; mov rdx, rax; mov rsi, r9; call qword ptr [rcx+0x28];
0x00108d85: out 0x48, eax; mov edx, eax; mov rsi, r9; call qword ptr [rcx+0x28];
0x00108d86: mov rdx, rax; mov rsi, r9; call qword ptr [rcx+0x28];
0x00108d87: mov edx, eax; mov rsi, r9; call qword ptr [rcx+0x28];
0x00108d89: mov rsi, r9; call qword ptr [rcx+0x28];
0x00108d8a: mov esi, ecx; call qword ptr [rcx+0x28];
0x00108d8c: call qword ptr [rcx+0x28];
0x00108e31: sti; ret 0xfff1;
0x00108e32: ret 0xfff1;
0x00108e7a: int1; dec dword ptr [rcx-0x75]; cmp [r8-0x77], r9b; ret 0x2b49;
0x00108e7b: dec dword ptr [rcx-0x75]; cmp [r8-0x77], r9b; ret 0x2b49;
0x00108e7e: cmp [r8-0x77], r9b; ret 0x2b49;
0x00108e7f: cmp [rax-0x77], cl; ret 0x2b49;
0x00108e82: ret 0x2b49;
0x00108fa0: inc dword ptr [rbx-0x7bf0fd1e]; sti; add [rax], al; add [rcx-0x7d], cl; ret 0xe901;
0x00108fa3: add cl, [rdi]; test bl, bh; add [rax], al; add [rcx-0x7d], cl; ret 0xe901;
0x00108fa5: test bl, bh; add [rax], al; add [rcx-0x7d], cl; ret 0xe901;
0x00108fa6: sti; add [rax], al; add [rcx-0x7d], cl; ret 0xe901;
0x00108fa7: add [rax], al; add [rcx-0x7d], cl; ret 0xe901;
0x00108fa9: add [rcx-0x7d], cl; ret 0xe901;
0x00109273: and [rdi], cl; test ah, dl; idiv edi; jmp qword ptr [rsi+0xf];
0x00109275: test ah, dl; idiv edi; jmp qword ptr [rsi+0xf];
0x0010927f: add [rax+0xf], cl; mov esi, 0x8348014b; ret;
0x00109282: mov esi, 0x8348014b; ret;
0x00109283: add [r8-0x7d], rcx; ret;
0x001092b7: add ecx, [rax-0x77]; ret 0xe883;
0x001092d7: add [rax+0xf], cl; mov esi, 0x83480143; ret;
0x001092da: mov esi, 0x83480143; ret;
0x0010932a: add [rax], al; add al, ch; outsb dx, [rsi]; ret;
0x0010932c: add al, ch; outsb dx, [rsi]; ret;
0x0010932e: outsb dx, [rsi]; ret;
0x001093a3: stc; ret 0xffff;
0x00109469: imul cl; shr ebx, 0xff; call qword ptr [rax+0x53d58955];
0x0010946b: shr ebx, 0xff; call qword ptr [rax+0x53d58955];
0x0010946e: call qword ptr [rax+0x53d58955];
0x001094b9: add al, [rax]; add [rbp+0x32], dh; add rsp, 8; pop rbx; pop rbp; ret;
0x001094bb: add [rbp+0x32], dh; add rsp, 8; pop rbx; pop rbp; ret;
0x001094f3: imul edx, [rcx-0xd], 0x58b48ff; add cl, [rcx+0xb]; add [rbx+0x515be838], cl; jmp qword ptr [rsi+0x66];
0x001094fa: add cl, [rcx+0xb]; add [rbx+0x515be838], cl; jmp qword ptr [rsi+0x66];
0x001094fd: add [rbx+0x515be838], cl; jmp qword ptr [rsi+0x66];
0x001094ff: cmp al, ch; pop rbx; push rcx; jmp qword ptr [rsi+0x66];
0x00109501: pop rbx; push rcx; jmp qword ptr [rsi+0x66];
0x00109502: push rcx; jmp qword ptr [rsi+0x66];
0x00109503: jmp qword ptr [rsi+0x66];
0x001095ca: adc [rbp+0x41], bl; pop rsp; pop r13; pop r14; pop r15; ret;
0x001096f1: ret 0x8b01;
0x00109744: add [rax-0x7b], ecx; push qword ptr [rbp-0x1a]; add rsp, 8; pop rbx; pop rbp; ret;
0x00109747: push qword ptr [rbp-0x1a]; add rsp, 8; pop rbx; pop rbp; ret;
0x00109749: out 0x48, al; add esp, 8; pop rbx; pop rbp; ret;
0x001097a9: push qword ptr [rcx]; ror byte ptr [rax-0x7d], 0xc4; or [rbp+0x41], bl; pop rsp; ret;
0x001097f4: mov edx, 0x8948fff1; ret 0x8d48;
0x001097f5: int1; dec dword ptr [rax-0x77]; ret 0x8d48;
0x0010981b: add eax, [rbx+0x5f7401f8]; xor eax, eax; add rsp, 8; pop rbp; pop r12; ret;
0x0010981d: clc; add [rdi+rbx*2+0x31], esi; ror byte ptr [rax-0x7d], 0xc4; or [rbp+0x41], bl; pop rsp; ret;
0x0010981e: add [rdi+rbx*2+0x31], esi; ror byte ptr [rax-0x7d], 0xc4; or [rbp+0x41], bl; pop rsp; ret;
0x00109820: pop rdi; xor eax, eax; add rsp, 8; pop rbp; pop r12; ret;
0x00109821: xor eax, eax; add rsp, 8; pop rbp; pop r12; ret;
0x00109822: ror byte ptr [rax-0x7d], 0xc4; or [rbp+0x41], bl; pop rsp; ret;
0x00109926: add [rax+0x63], cl; ret 0x4864;
0x00109b31: adc [rax+1], cl; ret 0x8948;
0x00109b87: enter 0x5d5b, 0x41; pop rsp; pop r13; pop r14; pop r15; ret;
0x00109bdf: add [rbx+0xb7456ff], al; mov eax, 7; ret;
0x00109be1: call qword ptr [rsi+0x74];
0x00109be4: or edi, [rax+7]; ret;
0x00109be5: mov eax, 7; ret;
0x00109c02: sub eax, 0x507a8b48; mov rsi, rdx; call rax;
0x00109c03: mov rdi, [rdx+0x50]; mov rsi, rdx; call rax;
0x00109c04: mov edi, [rdx+0x50]; mov rsi, rdx; call rax;
0x00109c06: push rax; mov rsi, rdx; call rax;
0x00109c07: mov rsi, rdx; call rax;
0x00109c08: mov esi, edx; call rax;
0x00109c11: and [rsp+rcx+0x5b], dh; ret;
0x00109c13: or al, 0x5b; ret;
0x00109c23: cmp [rdx-0xd], ecx; jmp qword ptr [rsi+0xf];
0x00109c25: jmp qword ptr [rsi+0xf];
0x00109c47: xor [rax], ecx; add [rcx], dh; shr al, 0xdf; iretd;
0x00109c49: add [rcx], dh; shr al, 0xdf; iretd;
0x00109c4b: shr al, 0xdf; iretd;
0x0010a02f: mov rdx, [rbx-0x10]; mov [rbp-0x70], rdx; mov edx, [rbx-0x30]; mov [rbp-0x80], edx; mov rdx, r13; call rax;
0x0010a030: mov edx, [rbx-0x10]; mov [rbp-0x70], rdx; mov edx, [rbx-0x30]; mov [rbp-0x80], edx; mov rdx, r13; call rax;
0x0010a033: mov [rbp-0x70], rdx; mov edx, [rbx-0x30]; mov [rbp-0x80], edx; mov rdx, r13; call rax;
0x0010a034: mov [rbp-0x70], edx; mov edx, [rbx-0x30]; mov [rbp-0x80], edx; mov rdx, r13; call rax;
0x0010a035: push rbp; nop; mov edx, [rbx-0x30]; mov [rbp-0x80], edx; mov rdx, r13; call rax;
0x0010a036: nop; mov edx, [rbx-0x30]; mov [rbp-0x80], edx; mov rdx, r13; call rax;
0x0010a037: mov edx, [rbx-0x30]; mov [rbp-0x80], edx; mov rdx, r13; call rax;
0x0010a066: add al, 0; add [rax-0x7d], cl; ret;
0x0010a0dc: push rsi; ret;
0x0010a16f: dec dword ptr [rbx+rcx*4+0x2c]; ret 0x894c;
0x0010a214: mov es, [rdi-0x76fffffc]; ret 0x8589;
0x0010a21a: ret 0x8589;
0x0010a31d: mov [rbp-0x78], rax; mov rax, [rbx+0x38]; mov [rbp-0x70], rax; mov eax, [rbx+0x18]; mov [rbp-0x80], eax; call r8;
0x0010a31e: mov [rbp-0x78], eax; mov rax, [rbx+0x38]; mov [rbp-0x70], rax; mov eax, [rbx+0x18]; mov [rbp-0x80], eax; call r8;
0x0010a31f: mov [r8-0x75], r9b; cmp [r8-0x77], cl; xchg r8d, eax; mov eax, [rbx+0x18]; mov [rbp-0x80], eax; call r8;
0x0010a320: mov [rax-0x75], cl; cmp [r8-0x77], cl; xchg r8d, eax; mov eax, [rbx+0x18]; mov [rbp-0x80], eax; call r8;
0x0010a321: mov rax, [rbx+0x38]; mov [rbp-0x70], rax; mov eax, [rbx+0x18]; mov [rbp-0x80], eax; call r8;
0x0010a322: mov eax, [rbx+0x38]; mov [rbp-0x70], rax; mov eax, [rbx+0x18]; mov [rbp-0x80], eax; call r8;
0x0010a323: cmp [r8-0x77], cl; xchg r8d, eax; mov eax, [rbx+0x18]; mov [rbp-0x80], eax; call r8;
0x0010a324: cmp [rax-0x77], cl; xchg r8d, eax; mov eax, [rbx+0x18]; mov [rbp-0x80], eax; call r8;
0x0010a325: mov [rbp-0x70], rax; mov eax, [rbx+0x18]; mov [rbp-0x80], eax; call r8;
0x0010a326: mov [rbp-0x70], eax; mov eax, [rbx+0x18]; mov [rbp-0x80], eax; call r8;
0x0010a327: xchg r8d, eax; mov eax, [rbx+0x18]; mov [rbp-0x80], eax; call r8;
0x0010a328: nop; mov eax, [rbx+0x18]; mov [rbp-0x80], eax; call r8;
0x0010a329: mov eax, [rbx+0x18]; mov [rbp-0x80], eax; call r8;
0x0010a32c: mov [rbp-0x80], eax; call r8;
0x0010a39e: call qword ptr [rax+0x48038b48];
0x0010a3ca: mov rdx, [rbx+0x80]; mov [rbp-0x70], rdx; mov edx, [rbx+0x60]; mov [rbp-0x80], edx; mov rdx, r12; call rax;
0x0010a3cb: mov edx, [rbx+0x80]; mov [rbp-0x70], rdx; mov edx, [rbx+0x60]; mov [rbp-0x80], edx; mov rdx, r12; call rax;
0x0010a3cf: add [rax], al; mov [rbp-0x70], rdx; mov edx, [rbx+0x60]; mov [rbp-0x80], edx; mov rdx, r12; call rax;
0x0010a3d1: mov [rbp-0x70], rdx; mov edx, [rbx+0x60]; mov [rbp-0x80], edx; mov rdx, r12; call rax;
0x0010a3d2: mov [rbp-0x70], edx; mov edx, [rbx+0x60]; mov [rbp-0x80], edx; mov rdx, r12; call rax;
0x0010a3d3: push rbp; nop; mov edx, [rbx+0x60]; mov [rbp-0x80], edx; mov rdx, r12; call rax;
0x0010a3d4: nop; mov edx, [rbx+0x60]; mov [rbp-0x80], edx; mov rdx, r12; call rax;
0x0010a3d5: mov edx, [rbx+0x60]; mov [rbp-0x80], edx; mov rdx, r12; call rax;
0x0010a43f: mov rdx, [rbx+0x38]; mov [rbp-0x70], rdx; mov edx, [rbx+0x18]; mov [rbp-0x80], edx; mov rdx, r12; call rax;
0x0010a440: mov edx, [rbx+0x38]; mov [rbp-0x70], rdx; mov edx, [rbx+0x18]; mov [rbp-0x80], edx; mov rdx, r12; call rax;
0x0010a443: mov [rbp-0x70], rdx; mov edx, [rbx+0x18]; mov [rbp-0x80], edx; mov rdx, r12; call rax;
0x0010a444: mov [rbp-0x70], edx; mov edx, [rbx+0x18]; mov [rbp-0x80], edx; mov rdx, r12; call rax;
0x0010a445: push rbp; nop; mov edx, [rbx+0x18]; mov [rbp-0x80], edx; mov rdx, r12; call rax;
0x0010a446: nop; mov edx, [rbx+0x18]; mov [rbp-0x80], edx; mov rdx, r12; call rax;
0x0010a447: mov edx, [rbx+0x18]; mov [rbp-0x80], edx; mov rdx, r12; call rax;
0x0010a4a7: add [rcx-0x876b], cl; dec dword ptr [rax-0x7d]; ret;
0x0010a585: mov rdx, [r12+0x80]; mov [rbp-0x70], rdx; mov edx, [r12+0x60]; mov [rbp-0x80], edx; mov rdx, rbx; call rax;
0x0010a586: mov edx, [rsp+0x80]; mov [rbp-0x70], rdx; mov edx, [r12+0x60]; mov [rbp-0x80], edx; mov rdx, rbx; call rax;
0x0010a58b: add [rax], al; mov [rbp-0x70], rdx; mov edx, [r12+0x60]; mov [rbp-0x80], edx; mov rdx, rbx; call rax;
0x0010a58d: mov [rbp-0x70], rdx; mov edx, [r12+0x60]; mov [rbp-0x80], edx; mov rdx, rbx; call rax;
0x0010a58e: mov [rbp-0x70], edx; mov edx, [r12+0x60]; mov [rbp-0x80], edx; mov rdx, rbx; call rax;
0x0010a58f: push rbp; nop; mov edx, [r12+0x60]; mov [rbp-0x80], edx; mov rdx, rbx; call rax;
0x0010a590: nop; mov edx, [r12+0x60]; mov [rbp-0x80], edx; mov rdx, rbx; call rax;
0x0010a591: mov edx, [r12+0x60]; mov [rbp-0x80], edx; mov rdx, rbx; call rax;
0x0010a592: mov edx, [rsp+0x60]; mov [rbp-0x80], edx; mov rdx, rbx; call rax;
0x0010a593: push rsp; and al, 0x60; mov [rbp-0x80], edx; mov rdx, rbx; call rax;
0x0010a594: and al, 0x60; mov [rbp-0x80], edx; mov rdx, rbx; call rax;
0x0010a596: mov [rbp-0x80], edx; mov rdx, rbx; call rax;
0x0010a597: push rbp; or byte ptr [rax-0x77], 0xda; call rax;
0x0010a598: or byte ptr [rax-0x77], 0xda; call rax;
0x0010a599: mov rdx, rbx; call rax;
0x0010a59a: mov edx, ebx; call rax;
0x0010a652: mov rdx, [r12+0x38]; mov [rbp-0x70], rdx; mov edx, [r12+0x18]; mov [rbp-0x80], edx; mov rdx, r13; call rax;
0x0010a653: mov edx, [rsp+0x38]; mov [rbp-0x70], rdx; mov edx, [r12+0x18]; mov [rbp-0x80], edx; mov rdx, r13; call rax;
0x0010a655: and al, 0x38; mov [rbp-0x70], rdx; mov edx, [r12+0x18]; mov [rbp-0x80], edx; mov rdx, r13; call rax;
0x0010a657: mov [rbp-0x70], rdx; mov edx, [r12+0x18]; mov [rbp-0x80], edx; mov rdx, r13; call rax;
0x0010a658: mov [rbp-0x70], edx; mov edx, [r12+0x18]; mov [rbp-0x80], edx; mov rdx, r13; call rax;
0x0010a659: push rbp; nop; mov edx, [r12+0x18]; mov [rbp-0x80], edx; mov rdx, r13; call rax;
0x0010a65a: nop; mov edx, [r12+0x18]; mov [rbp-0x80], edx; mov rdx, r13; call rax;
0x0010a65b: mov edx, [r12+0x18]; mov [rbp-0x80], edx; mov rdx, r13; call rax;
0x0010a65c: mov edx, [rsp+0x18]; mov [rbp-0x80], edx; mov rdx, r13; call rax;
0x0010a65d: push rsp; and al, 0x18; mov [rbp-0x80], edx; mov rdx, r13; call rax;
0x0010a65e: and al, 0x18; mov [rbp-0x80], edx; mov rdx, r13; call rax;
0x0010a660: mov [rbp-0x80], edx; mov rdx, r13; call rax;
0x0010a663: mov rdx, r13; call rax;
0x0010a664: mov edx, ebp; call rax;
0x0010a7d5: dec dword ptr [rax-0x75]; ret 0x80f8;
0x0010a7d9: ret 0x80f8;
0x0010a951: shr al, 0xd9; ret 0xfff4;
0x0010a9e8: mov rdx, [rcx+0x38]; mov [rbp-0x70], rdx; mov edx, [rcx+0x18]; mov [rbp-0x80], edx; mov rdx, r12; call rax;
0x0010a9e9: mov edx, [rcx+0x38]; mov [rbp-0x70], rdx; mov edx, [rcx+0x18]; mov [rbp-0x80], edx; mov rdx, r12; call rax;
0x0010a9ec: mov [rbp-0x70], rdx; mov edx, [rcx+0x18]; mov [rbp-0x80], edx; mov rdx, r12; call rax;
0x0010a9ed: mov [rbp-0x70], edx; mov edx, [rcx+0x18]; mov [rbp-0x80], edx; mov rdx, r12; call rax;
0x0010a9ee: push rbp; nop; mov edx, [rcx+0x18]; mov [rbp-0x80], edx; mov rdx, r12; call rax;
0x0010a9ef: nop; mov edx, [rcx+0x18]; mov [rbp-0x80], edx; mov rdx, r12; call rax;
0x0010a9f0: mov edx, [rcx+0x18]; mov [rbp-0x80], edx; mov rdx, r12; call rax;
0x0010a9f3: mov [rbp-0x80], edx; mov rdx, r12; call rax;
0x0010aa88: mov [rbp-0x78], rdx; mov rdx, [r13-0x10]; mov dword ptr [rbp-0x80], 0; mov [rbp-0x70], rdx; mov rdx, r12; call rax;
0x0010aa89: mov [rbp-0x78], edx; mov rdx, [r13-0x10]; mov dword ptr [rbp-0x80], 0; mov [rbp-0x70], rdx; mov rdx, r12; call rax;
0x0010aa8c: mov rdx, [r13-0x10]; mov dword ptr [rbp-0x80], 0; mov [rbp-0x70], rdx; mov rdx, r12; call rax;
0x0010aa8d: mov edx, [rbp-0x10]; mov dword ptr [rbp-0x80], 0; mov [rbp-0x70], rdx; mov rdx, r12; call rax;
0x0010aa90: mov dword ptr [rbp-0x80], 0; mov [rbp-0x70], rdx; mov rdx, r12; call rax;
0x0010aa91: add byte ptr [r8], 0; add [rax], al; mov [rbp-0x70], rdx; mov rdx, r12; call rax;
0x0010aa92: add byte ptr [rax], 0; add [rax], al; mov [rbp-0x70], rdx; mov rdx, r12; call rax;
0x0010aa93: add [rax], al; add [rax], al; mov [rbp-0x70], rdx; mov rdx, r12; call rax;
0x0010aa94: add [rax], al; add [rax-0x77], cl; push rbp; nop; mov rdx, r12; call rax;
0x0010aa95: add [rax], al; mov [rbp-0x70], rdx; mov rdx, r12; call rax;
0x0010aa96: add [rax-0x77], cl; push rbp; nop; mov rdx, r12; call rax;
0x0010aa97: mov [rbp-0x70], rdx; mov rdx, r12; call rax;
0x0010aa98: mov [rbp-0x70], edx; mov rdx, r12; call rax;
0x0010aa99: push rbp; nop; mov rdx, r12; call rax;
0x0010aa9a: nop; mov rdx, r12; call rax;
0x0010aa9b: mov rdx, r12; call rax;
0x0010aa9c: mov edx, esp; call rax;
0x0010ab58: xor al, ch; ret 0xf2a4;
0x0010ab5a: ret 0xf2a4;
0x0010ac1c: idiv edi; call qword ptr [rax-0x77427cb8];
0x0010ac1e: call qword ptr [rax-0x77427cb8];
0x0010accc: or [rbp-0xf], dh; mov rax, [rax+0x30]; ret;
0x0010acce: int1; mov rax, [rax+0x30]; ret;
0x0010accf: mov rax, [rax+0x30]; ret;
0x0010acd0: mov eax, [rax+0x30]; ret;
0x0010acd2: xor bl, al; nop [rax]; xor eax, eax; ret;
0x0010acf1: out 0xff, eax; jmp qword ptr [rsi+0x66];
0x0010ad17: mov rax, [rip+0xb30ea]; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdx*2]; shr ax, 0xe; and eax, 1; ret;
0x0010ad18: mov eax, [rip+0xb30ea]; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdx*2]; shr ax, 0xe; and eax, 1; ret;
0x0010ad19: add eax, 0xb30ea; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdx*2]; shr ax, 0xe; and eax, 1; ret;
0x0010ad1c: or eax, [rax]; mov rax, fs:[rax]; movzx eax, word ptr [rax+rdx*2]; shr ax, 0xe; and eax, 1; ret;
0x0010ad1e: mov rax, fs:[rax]; movzx eax, word ptr [rax+rdx*2]; shr ax, 0xe; and eax, 1; ret;
0x0010ad1f: mov rax, [rax]; movzx eax, word ptr [rax+rdx*2]; shr ax, 0xe; and eax, 1; ret;
0x0010ad20: mov eax, [rax]; movzx eax, word ptr [rax+rdx*2]; shr ax, 0xe; and eax, 1; ret;
0x0010ad21: add [rdi], cl; mov bh, 4; push rax; shr ax, 0xe; and eax, 1; ret;
0x0010ad22: movzx eax, word ptr [rax+rdx*2]; shr ax, 0xe; and eax, 1; ret;
0x0010ad23: mov bh, 4; push rax; shr ax, 0xe; and eax, 1; ret;
0x0010ad24: add al, 0x50; shr ax, 0xe; and eax, 1; ret;
0x0010ad25: push rax; shr ax, 0xe; and eax, 1; ret;
0x0010ad26: shr ax, 0xe; and eax, 1; ret;
0x0010ad27: shr eax, 0xe; and eax, 1; ret;
0x0010ad2a: and eax, 1; ret;
0x0010ad2c: add ebx, eax; xchg ax, ax; xor eax, eax; ret;
0x0010ad4a: add [rbx+rcx-0x3d], dh; xchg ax, ax; xor eax, eax; ret;
0x0010ad4c: or eax, ebx; xchg ax, ax; xor eax, eax; ret;
0x0010ad5c: add [rbp-0x12], dh; mov edx, [rdi+0x28]; xor eax, eax; test edx, edx; sete al; ret;
0x0010ad5e: out dx, al; mov edx, [rdi+0x28]; xor eax, eax; test edx, edx; sete al; ret;
0x0010ad5f: mov edx, [rdi+0x28]; xor eax, eax; test edx, edx; sete al; ret;
0x0010ad60: push rdi; sub [rcx], dh; rol byte ptr [rbp-0x3f6bf02e], 0xc3; nop [rax+rax]; xor eax, eax; ret;
0x0010ad61: sub [rcx], dh; rol byte ptr [rbp-0x3f6bf02e], 0xc3; nop [rax+rax]; xor eax, eax; ret;
0x0010ad62: xor eax, eax; test edx, edx; sete al; ret;
0x0010ad63: rol byte ptr [rbp-0x3f6bf02e], 0xc3; nop [rax+rax]; xor eax, eax; ret;
0x0010ad64: test edx, edx; sete al; ret;
0x0010ad65: ror byte ptr [rdi], cl; xchg esp, eax; rol bl, 0x66; nop [rax+rax]; xor eax, eax; ret;
0x0010ad67: xchg esp, eax; rol bl, 0x66; nop [rax+rax]; xor eax, eax; ret;
0x0010ad68: rol bl, 0x66; nop [rax+rax]; xor eax, eax; ret;
0x0010adae: add [rax-0x77], cl; ret 0x438b;
0x0010adb1: ret 0x438b;
0x0010add0: add [rcx+0x433b1043], ecx; adc al, 0x74; or eax, 0x41c0315b; pop rsp; pop rbp; ret;
0x0010add2: adc [r11], dil; adc al, 0x74; or eax, 0x41c0315b; pop rsp; pop rbp; ret;
0x0010add3: adc [rbx], bh; adc al, 0x74; or eax, 0x41c0315b; pop rsp; pop rbp; ret;
0x0010add6: adc al, 0x74; or eax, 0x41c0315b; pop rsp; pop rbp; ret;
0x0010add8: or eax, 0x41c0315b; pop rsp; pop rbp; ret;
0x0010add9: pop rbx; xor eax, eax; pop r12; pop rbp; ret;
0x0010adda: xor eax, eax; pop r12; pop rbp; ret;
0x0010addb: rol byte ptr [rcx+0x5c], 0x5d; ret;
0x0010ade3: or [rbp-0x1c], dh; pop rbx; mov eax, 5; pop r12; pop rbp; ret;
0x0010ade5: in al, 0x5b; mov eax, 5; pop r12; pop rbp; ret;
0x0010ade6: pop rbx; mov eax, 5; pop r12; pop rbp; ret;
0x0010ade7: mov eax, 5; pop r12; pop rbp; ret;
0x0010ade8: add eax, 0x41000000; pop rsp; pop rbp; ret;
0x0010ade9: add [rax], al; add [rcx+0x5c], al; pop rbp; ret;
0x0010adea: add [rax], al; pop r12; pop rbp; ret;
0x0010adeb: add [rcx+0x5c], al; pop rbp; ret;
0x0010adec: pop r12; pop rbp; ret;
0x0010aded: pop rsp; pop rbp; ret;
0x0010ae59: lea rdx, [rip-0xf0]; test rax, rax; cmove rax, rdx; mov [rip+0xb810a], rax; pop rbp; ret;
0x0010ae5a: lea edx, [rip-0xf0]; test rax, rax; cmove rax, rdx; mov [rip+0xb810a], rax; pop rbp; ret;
0x0010ae5b: adc eax, 0xffffff10; test rax, rax; cmove rax, rdx; mov [rip+0xb810a], rax; pop rbp; ret;
0x0010ae5f: dec dword ptr [rax-0x7b]; ror byte ptr [rax+0xf], 0x44; ret 0x8948;
0x0010ae60: test rax, rax; cmove rax, rdx; mov [rip+0xb810a], rax; pop rbp; ret;
0x0010ae61: test eax, eax; cmove rax, rdx; mov [rip+0xb810a], rax; pop rbp; ret;
0x0010ae62: ror byte ptr [rax+0xf], 0x44; ret 0x8948;
0x0010ae63: cmove rax, rdx; mov [rip+0xb810a], rax; pop rbp; ret;
0x0010ae64: cmove eax, edx; mov [rip+0xb810a], rax; pop rbp; ret;
0x0010ae67: mov [rip+0xb810a], rax; pop rbp; ret;
0x0010ae68: mov [rip+0xb810a], eax; pop rbp; ret;
0x0010ae69: add eax, 0xb810a; pop rbp; ret;
0x0010ae6c: or eax, [rax]; pop rbp; ret;
0x0010aed5: lea rsi, [rbp-0x20]; lea rdi, [rip-0x160]; call rax;
0x0010aed6: lea esi, [rbp-0x20]; lea rdi, [rip-0x160]; call rax;
0x0010aed9: lea rdi, [rip-0x160]; call rax;
0x0010aeda: lea edi, [rip-0x160]; call rax;
0x0010aedb: cmp eax, 0xfffffea0; call rax;
0x0010af11: add [rax], al; add [rbp+0x4b], dh; leave; ret;
0x0010af13: add [rbp+0x4b], dh; leave; ret;
0x0010af16: leave; ret;
0x0010af20: mov rax, [rip+0xb6879]; lea rsi, [rip-0x13e]; lea rdi, [rip+0xb8033]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0010af21: mov eax, [rip+0xb6879]; lea rsi, [rip-0x13e]; lea rdi, [rip+0xb8033]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0010af22: add eax, 0xb6879; lea rsi, [rip-0x13e]; lea rdi, [rip+0xb8033]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0010af24: push 0xffffffff8d48000b; xor eax, 0xfffffec2; lea rdi, [rip+0xb8033]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0010af25: or eax, [rax]; lea rsi, [rip-0x13e]; lea rdi, [rip+0xb8033]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0010af26: add [rax-0x73], cl; xor eax, 0xfffffec2; lea rdi, [rip+0xb8033]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0010af27: lea rsi, [rip-0x13e]; lea rdi, [rip+0xb8033]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0010af28: lea esi, [rip-0x13e]; lea rdi, [rip+0xb8033]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0010af29: xor eax, 0xfffffec2; lea rdi, [rip+0xb8033]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0010af2d: dec dword ptr [rax-0x73]; cmp eax, 0xb8033; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0010af2e: lea rdi, [rip+0xb8033]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0010af2f: lea edi, [rip+0xb8033]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0010af30: cmp eax, 0xb8033; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0010af31: xor eax, [rax-0x3eb7fff5]; enter 0x6411, 0x48; xor eax, [0x30]; call rax;
0x0010af32: or byte ptr [rbx], 0; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0010af33: or eax, [rax]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0010aff2: add [rcx+rbp*2-0x18], dh; mov eax, [0x8948107b8b48fff1]; ret 0xc031;
0x0010aff6: mov eax, [0x8948107b8b48fff1]; ret 0xc031;
0x0010aff7: mov eax, [0x8948107b8b48fff1]; ret 0xc031;
0x0010affd: adc [rax-0x77], cl; ret 0xc031;
0x0010b243: xchg ebx, eax; bnd jmp qword ptr [rsi+0x2e];
0x0010b244: bnd jmp qword ptr [rsi+0x2e];
0x0010b35f: sbb [rax], r9b; add [rax+0x29], cl; iretd;
0x0010b360: sbb [rax], cl; add [rax+0x29], cl; iretd;
0x0010b371: sbb [rax], cl; add [rax-0x77], cl; iretd;
0x0010b372: sbb [rax], cl; add [rax-0x77], cl; iretd;
0x0010b555: add [rax], al; nop [rax+rax]; ret;
0x0010b5a8: add cl, [rax-0x73]; add eax, 0x574f0; lea rdx, [rip+0x57489]; cmove rax, rdx; ret;
0x0010b5ab: add eax, 0x574f0; lea rdx, [rip+0x57489]; cmove rax, rdx; ret;
0x0010b5ae: add eax, 0x158d4800; mov [rbp+rax], esi; cmove rax, rdx; ret;
0x0010b5af: add [rax-0x73], cl; adc eax, 0x57489; cmove rax, rdx; ret;
0x0010b5b2: adc eax, 0x57489; cmove rax, rdx; ret;
0x0010b5b3: mov [rbp+rax], esi; cmove rax, rdx; ret;
0x0010b5d7: shl dword ptr [rax], 0x75; xor eax, 0x4808e183; lea edx, [rip+0x372bb]; lea rax, [rip+0x31d44]; cmovne rax, rdx; ret;
0x0010b5d8: and [rbp+0x35], dh; and ecx, 8; lea rdx, [rip+0x372bb]; lea rax, [rip+0x31d44]; cmovne rax, rdx; ret;
0x0010b5da: xor eax, 0x4808e183; lea edx, [rip+0x372bb]; lea rax, [rip+0x31d44]; cmovne rax, rdx; ret;
0x0010b5db: and ecx, 8; lea rdx, [rip+0x372bb]; lea rax, [rip+0x31d44]; cmovne rax, rdx; ret;
0x0010b5dd: or [rax-0x73], cl; adc eax, 0x372bb; lea rax, [rip+0x31d44]; cmovne rax, rdx; ret;
0x0010b5de: lea rdx, [rip+0x372bb]; lea rax, [rip+0x31d44]; cmovne rax, rdx; ret;
0x0010b5df: lea edx, [rip+0x372bb]; lea rax, [rip+0x31d44]; cmovne rax, rdx; ret;
0x0010b5e0: adc eax, 0x372bb; lea rax, [rip+0x31d44]; cmovne rax, rdx; ret;
0x0010b5e1: mov ebx, 0x48000372; lea eax, [rip+0x31d44]; cmovne rax, rdx; ret;
0x0010b5e3: add eax, [rax]; lea rax, [rip+0x31d44]; cmovne rax, rdx; ret;
0x0010b5e4: add [rax-0x73], cl; add eax, 0x31d44; cmovne rax, rdx; ret;
0x0010b5e5: lea rax, [rip+0x31d44]; cmovne rax, rdx; ret;
0x0010b5e6: lea eax, [rip+0x31d44]; cmovne rax, rdx; ret;
0x0010b5e7: add eax, 0x31d44; cmovne rax, rdx; ret;
0x0010b5e9: sbb eax, 0xf480003; ret 0xfc3;
0x0010b5fb: add cl, [rax-0x73]; add eax, 0x5c1fd; lea rdx, [rip+0x5c186]; cmove rax, rdx; ret;
0x0010b5fe: add eax, 0x5c1fd; lea rdx, [rip+0x5c186]; cmove rax, rdx; ret;
0x0010b5ff: std; rol dword ptr [rip+0x158d4800], 0x86; rol dword ptr [rip+0x440f4800], 0xc2; ret;
0x0010b600: rol dword ptr [rip+0x158d4800], 0x86; rol dword ptr [rip+0x440f4800], 0xc2; ret;
0x0010b601: add eax, 0x158d4800; xchg cl, al; add eax, 0x440f4800; ret 0x90c3;
0x0010b602: add [rax-0x73], cl; adc eax, 0x5c186; cmove rax, rdx; ret;
0x0010b605: adc eax, 0x5c186; cmove rax, rdx; ret;
0x0010b606: xchg cl, al; add eax, 0x440f4800; ret 0x90c3;
0x0010b607: rol dword ptr [rip+0x440f4800], 0xc2; ret;
0x0010b613: add cl, [rax-0x73]; add eax, 0xfff9c0f5; lea rdx, [rip-0x63fd2]; cmove rax, rdx; ret;
0x0010b616: add eax, 0xfff9c0f5; lea rdx, [rip-0x63fd2]; cmove rax, rdx; ret;
0x0010b617: cmc; sar cl, 0xff; lea rdx, [rip-0x63fd2]; cmove rax, rdx; ret;
0x0010b619: stc; dec dword ptr [rax-0x73]; adc eax, 0xfff9c02e; cmove rax, rdx; ret;
0x0010b61a: dec dword ptr [rax-0x73]; adc eax, 0xfff9c02e; cmove rax, rdx; ret;
0x0010b61d: adc eax, 0xfff9c02e; cmove rax, rdx; ret;
0x0010b61e: sar cl, 0xff; cmove rax, rdx; ret;
0x0010b61f: sar cl, 0xff; cmove rax, rdx; ret;
0x0010b661: vpcmpeqb xmm13, xmm15, [rbx]; test byte ptr [rdx+0x7d], 2; lea rax, [rip+0x574f0]; lea rdx, [rip+0x57489]; cmove rax, rdx; ret;
0x0010b665: test byte ptr [rdx+0x7d], 2; lea rax, [rip+0x574f0]; lea rdx, [rip+0x57489]; cmove rax, rdx; ret;
0x0010b668: add cl, [rax-0x73]; add eax, 0x57430; lea rdx, [rip+0x573c9]; cmove rax, rdx; ret;
0x0010b669: lea rax, [rip+0x574f0]; lea rdx, [rip+0x57489]; cmove rax, rdx; ret;
0x0010b66a: lea eax, [rip+0x574f0]; lea rdx, [rip+0x57489]; cmove rax, rdx; ret;
0x0010b66b: add eax, 0x57430; lea rdx, [rip+0x573c9]; cmove rax, rdx; ret;
0x0010b66c: xor [rbp+rax], dh; lea rdx, [rip+0x573c9]; cmove rax, rdx; ret;
0x0010b66f: add [rax-0x73], cl; adc eax, 0x573c9; cmove rax, rdx; ret;
0x0010b670: lea rdx, [rip+0x57489]; cmove rax, rdx; ret;
0x0010b671: lea edx, [rip+0x57489]; cmove rax, rdx; ret;
0x0010b672: adc eax, 0x573c9; cmove rax, rdx; ret;
0x0010b684: mov bh, 5; add [rax+0x2c7408e5], al; ret;
0x0010b697: shl dword ptr [rax], 0x75; xor eax, 0x4808e183; lea edx, [rip+0x39ccb]; lea rax, [rip+0x34654]; cmovne rax, rdx; ret;
0x0010b698: and [rbp+0x35], dh; and ecx, 8; lea rdx, [rip+0x39ccb]; lea rax, [rip+0x34654]; cmovne rax, rdx; ret;
0x0010b69a: xor eax, 0x4808e183; lea edx, [rip+0x39ccb]; lea rax, [rip+0x34654]; cmovne rax, rdx; ret;
0x0010b69b: and ecx, 8; lea rdx, [rip+0x39ccb]; lea rax, [rip+0x34654]; cmovne rax, rdx; ret;
0x0010b69d: or [rax-0x73], cl; adc eax, 0x39ccb; lea rax, [rip+0x34654]; cmovne rax, rdx; ret;
0x0010b69e: lea rdx, [rip+0x39ccb]; lea rax, [rip+0x34654]; cmovne rax, rdx; ret;
0x0010b69f: lea edx, [rip+0x39ccb]; lea rax, [rip+0x34654]; cmovne rax, rdx; ret;
0x0010b6a0: adc eax, 0x39ccb; lea rax, [rip+0x34654]; cmovne rax, rdx; ret;
0x0010b6a2: pushfq; add eax, [rax]; lea rax, [rip+0x34654]; cmovne rax, rdx; ret;
0x0010b6a3: add eax, [rax]; lea rax, [rip+0x34654]; cmovne rax, rdx; ret;
0x0010b6a4: add [rax-0x73], cl; add eax, 0x34654; cmovne rax, rdx; ret;
0x0010b6a5: lea rax, [rip+0x34654]; cmovne rax, rdx; ret;
0x0010b6a6: lea eax, [rip+0x34654]; cmovne rax, rdx; ret;
0x0010b6a7: add eax, 0x34654; cmovne rax, rdx; ret;
0x0010b6a8: push rsp; add r8d, [rax]; cmovne rax, rdx; ret;
0x0010b6a9: add r8d, [rax]; cmovne rax, rdx; ret;
0x0010b6b1: nop [rax]; test byte ptr [rdx+0x7d], 2; lea rax, [rip+0x5c1fd]; lea rdx, [rip+0x5c186]; cmove rax, rdx; ret;
0x0010b6b6: add [rax], al; test byte ptr [rdx+0x7d], 2; lea rax, [rip+0x5c1fd]; lea rdx, [rip+0x5c186]; cmove rax, rdx; ret;
0x0010b6b8: test byte ptr [rdx+0x7d], 2; lea rax, [rip+0x5c1fd]; lea rdx, [rip+0x5c186]; cmove rax, rdx; ret;
0x0010b6bb: add cl, [rax-0x73]; add eax, 0x5c13d; lea rdx, [rip+0x5c0c6]; cmove rax, rdx; ret;
0x0010b6bc: lea rax, [rip+0x5c1fd]; lea rdx, [rip+0x5c186]; cmove rax, rdx; ret;
0x0010b6bd: lea eax, [rip+0x5c1fd]; lea rdx, [rip+0x5c186]; cmove rax, rdx; ret;
0x0010b6be: add eax, 0x5c13d; lea rdx, [rip+0x5c0c6]; cmove rax, rdx; ret;
0x0010b6bf: cmp eax, 0x480005c1; lea edx, [rip+0x5c0c6]; cmove rax, rdx; ret;
0x0010b6c0: rol dword ptr [rip+0x158d4800], 0xc6; rol byte ptr [rip+0x440f4800], 0xc2; ret;
0x0010b6c1: add eax, 0x158d4800; mov al, 5; add [rax+0xf], cl; ret 0x90c3;
0x0010b6c2: add [rax-0x73], cl; adc eax, 0x5c0c6; cmove rax, rdx; ret;
0x0010b6c3: lea rdx, [rip+0x5c186]; cmove rax, rdx; ret;
0x0010b6c4: lea edx, [rip+0x5c186]; cmove rax, rdx; ret;
0x0010b6c5: adc eax, 0x5c0c6; cmove rax, rdx; ret;
0x0010b6c6: mov al, 5; add [rax+0xf], cl; ret 0x90c3;
0x0010b6c7: rol byte ptr [rip+0x440f4800], 0xc2; ret;
0x0010b6cf: nop; test byte ptr [rdx+0x7d], 2; lea rax, [rip-0x63f0b]; lea rdx, [rip-0x63fd2]; cmove rax, rdx; ret;
0x0010b6d0: test byte ptr [rdx+0x7d], 2; lea rax, [rip-0x63f0b]; lea rdx, [rip-0x63fd2]; cmove rax, rdx; ret;
0x0010b6d3: add cl, [rax-0x73]; add eax, 0xfff9c035; lea rdx, [rip-0x64092]; cmove rax, rdx; ret;
0x0010b6d4: lea rax, [rip-0x63f0b]; lea rdx, [rip-0x63fd2]; cmove rax, rdx; ret;
0x0010b6d5: lea eax, [rip-0x63f0b]; lea rdx, [rip-0x63fd2]; cmove rax, rdx; ret;
0x0010b6d6: add eax, 0xfff9c035; lea rdx, [rip-0x64092]; cmove rax, rdx; ret;
0x0010b6d7: xor eax, 0x48fff9c0; lea edx, [rip-0x64092]; cmove rax, rdx; ret;
0x0010b6d8: sar cl, 0xff; lea rdx, [rip-0x63fd2]; cmove rax, rdx; ret;
0x0010b6d9: stc; dec dword ptr [rax-0x73]; adc eax, 0xfff9bf6e; cmove rax, rdx; ret;
0x0010b6da: dec dword ptr [rax-0x73]; adc eax, 0xfff9bf6e; cmove rax, rdx; ret;
0x0010b6db: lea rdx, [rip-0x63fd2]; cmove rax, rdx; ret;
0x0010b6dc: lea edx, [rip-0x63fd2]; cmove rax, rdx; ret;
0x0010b6dd: adc eax, 0xfff9bf6e; cmove rax, rdx; ret;
0x0010b6de: outsb dx, [rsi]; mov edi, 0xf48fff9; ret 0x66c3;
0x0010b6df: mov edi, 0xf48fff9; ret 0x66c3;
0x0010b721: vpcmpeqb xmm13, xmm15, [rbx]; test byte ptr [rdx+0x7d], 2; lea rax, [rip+0x57350]; lea rdx, [rip+0x572e9]; cmove rax, rdx; ret;
0x0010b725: test byte ptr [rdx+0x7d], 2; lea rax, [rip+0x57350]; lea rdx, [rip+0x572e9]; cmove rax, rdx; ret;
0x0010b728: add cl, [rax-0x73]; add eax, 0x57350; lea rdx, [rip+0x572e9]; cmove rax, rdx; ret;
0x0010b729: lea rax, [rip+0x57350]; lea rdx, [rip+0x572e9]; cmove rax, rdx; ret;
0x0010b72a: lea eax, [rip+0x57350]; lea rdx, [rip+0x572e9]; cmove rax, rdx; ret;
0x0010b72b: add eax, 0x57350; lea rdx, [rip+0x572e9]; cmove rax, rdx; ret;
0x0010b72f: add [rax-0x73], cl; adc eax, 0x572e9; cmove rax, rdx; ret;
0x0010b730: lea rdx, [rip+0x572e9]; cmove rax, rdx; ret;
0x0010b731: lea edx, [rip+0x572e9]; cmove rax, rdx; ret;
0x0010b732: adc eax, 0x572e9; cmove rax, rdx; ret;
0x0010b744: mov dh, 5; add [rax+0x2c7408e5], al; ret;
0x0010b746: add [rax+0x2c7408e5], al; ret;
0x0010b757: shl dword ptr [rax], 0x75; xor eax, 0x4808e183; lea edx, [rip+0x3711b]; lea rax, [rip+0x31ba4]; cmovne rax, rdx; ret;
0x0010b758: and [rbp+0x35], dh; and ecx, 8; lea rdx, [rip+0x3711b]; lea rax, [rip+0x31ba4]; cmovne rax, rdx; ret;
0x0010b75a: xor eax, 0x4808e183; lea edx, [rip+0x3711b]; lea rax, [rip+0x31ba4]; cmovne rax, rdx; ret;
0x0010b75b: and ecx, 8; lea rdx, [rip+0x3711b]; lea rax, [rip+0x31ba4]; cmovne rax, rdx; ret;
0x0010b75d: or [rax-0x73], cl; adc eax, 0x3711b; lea rax, [rip+0x31ba4]; cmovne rax, rdx; ret;
0x0010b75e: lea rdx, [rip+0x3711b]; lea rax, [rip+0x31ba4]; cmovne rax, rdx; ret;
0x0010b75f: lea edx, [rip+0x3711b]; lea rax, [rip+0x31ba4]; cmovne rax, rdx; ret;
0x0010b760: adc eax, 0x3711b; lea rax, [rip+0x31ba4]; cmovne rax, rdx; ret;
0x0010b761: sbb esi, [rcx+3]; add [rax-0x73], cl; add eax, 0x31ba4; cmovne rax, rdx; ret;
0x0010b763: add eax, [rax]; lea rax, [rip+0x31ba4]; cmovne rax, rdx; ret;
0x0010b764: add [rax-0x73], cl; add eax, 0x31ba4; cmovne rax, rdx; ret;
0x0010b765: lea rax, [rip+0x31ba4]; cmovne rax, rdx; ret;
0x0010b766: lea eax, [rip+0x31ba4]; cmovne rax, rdx; ret;
0x0010b767: add eax, 0x31ba4; cmovne rax, rdx; ret;
0x0010b768: movsb [rdi], [rsi]; sbb eax, [rbx]; add [rax+0xf], cl; ret 0xfc3;
0x0010b769: sbb eax, [rbx]; add [rax+0xf], cl; ret 0xfc3;
0x0010b76a: add eax, [rax]; cmovne rax, rdx; ret;
0x0010b771: nop [rax]; test byte ptr [rdx+0x7d], 2; lea rax, [rip+0x5c05d]; lea rdx, [rip+0x5bfe6]; cmove rax, rdx; ret;
0x0010b776: add [rax], al; test byte ptr [rdx+0x7d], 2; lea rax, [rip+0x5c05d]; lea rdx, [rip+0x5bfe6]; cmove rax, rdx; ret;
0x0010b778: test byte ptr [rdx+0x7d], 2; lea rax, [rip+0x5c05d]; lea rdx, [rip+0x5bfe6]; cmove rax, rdx; ret;
0x0010b77b: add cl, [rax-0x73]; add eax, 0x5c05d; lea rdx, [rip+0x5bfe6]; cmove rax, rdx; ret;
0x0010b77c: lea rax, [rip+0x5c05d]; lea rdx, [rip+0x5bfe6]; cmove rax, rdx; ret;
0x0010b77d: lea eax, [rip+0x5c05d]; lea rdx, [rip+0x5bfe6]; cmove rax, rdx; ret;
0x0010b77e: add eax, 0x5c05d; lea rdx, [rip+0x5bfe6]; cmove rax, rdx; ret;
0x0010b77f: pop rbp; rol byte ptr [rip+0x158d4800], 0xe6; mov edi, 0xf480005; ret 0x90c3;
0x0010b780: rol byte ptr [rip+0x158d4800], 0xe6; mov edi, 0xf480005; ret 0x90c3;
0x0010b781: add eax, 0x158d4800; out 0xbf, al; add eax, 0x440f4800; ret 0x90c3;
0x0010b782: add [rax-0x73], cl; adc eax, 0x5bfe6; cmove rax, rdx; ret;
0x0010b783: lea rdx, [rip+0x5bfe6]; cmove rax, rdx; ret;
0x0010b784: lea edx, [rip+0x5bfe6]; cmove rax, rdx; ret;
0x0010b785: adc eax, 0x5bfe6; cmove rax, rdx; ret;
0x0010b786: out 0xbf, al; add eax, 0x440f4800; ret 0x90c3;
0x0010b787: mov edi, 0xf480005; ret 0x90c3;
0x0010b788: add eax, 0x440f4800; ret 0x90c3;
0x0010b789: add [rax+0xf], cl; ret 0x90c3;
0x0010b78d: ret 0x90c3;
0x0010b78f: nop; test byte ptr [rdx+0x7d], 2; lea rax, [rip-0x640ab]; lea rdx, [rip-0x64172]; cmove rax, rdx; ret;
0x0010b790: test byte ptr [rdx+0x7d], 2; lea rax, [rip-0x640ab]; lea rdx, [rip-0x64172]; cmove rax, rdx; ret;
0x0010b793: add cl, [rax-0x73]; add eax, 0xfff9bf55; lea rdx, [rip-0x64172]; cmove rax, rdx; ret;
0x0010b794: lea rax, [rip-0x640ab]; lea rdx, [rip-0x64172]; cmove rax, rdx; ret;
0x0010b795: lea eax, [rip-0x640ab]; lea rdx, [rip-0x64172]; cmove rax, rdx; ret;
0x0010b796: add eax, 0xfff9bf55; lea rdx, [rip-0x64172]; cmove rax, rdx; ret;
0x0010b797: push rbp; mov edi, 0x8d48fff9; adc eax, 0xfff9be8e; cmove rax, rdx; ret;
0x0010b798: mov edi, 0x8d48fff9; adc eax, 0xfff9be8e; cmove rax, rdx; ret;
0x0010b799: stc; dec dword ptr [rax-0x73]; adc eax, 0xfff9be8e; cmove rax, rdx; ret;
0x0010b79a: dec dword ptr [rax-0x73]; adc eax, 0xfff9be8e; cmove rax, rdx; ret;
0x0010b79b: lea rdx, [rip-0x64172]; cmove rax, rdx; ret;
0x0010b79c: lea edx, [rip-0x64172]; cmove rax, rdx; ret;
0x0010b79d: adc eax, 0xfff9be8e; cmove rax, rdx; ret;
0x0010b79f: mov esi, 0xf48fff9; ret 0x66c3;
0x0010b7a0: stc; dec dword ptr [rax+0xf]; ret 0x66c3;
0x0010b7a1: dec dword ptr [rax+0xf]; ret 0x66c3;
0x0010b7ba: bnd ret 0xfff9;
0x0010b7f1: test eax, eax; lea rdx, [rip+0x576d6]; lea rax, [rip+0x5772f]; cmove rax, rdx; ret;
0x0010b7f3: lea rdx, [rip+0x576d6]; lea rax, [rip+0x5772f]; cmove rax, rdx; ret;
0x0010b7f4: lea edx, [rip+0x576d6]; lea rax, [rip+0x5772f]; cmove rax, rdx; ret;
0x0010b7f5: adc eax, 0x576d6; lea rax, [rip+0x5772f]; cmove rax, rdx; ret;
0x0010b7f9: add [rax-0x73], cl; add eax, 0x5772f; cmove rax, rdx; ret;
0x0010b7fa: lea rax, [rip+0x5772f]; cmove rax, rdx; ret;
0x0010b7fb: lea eax, [rip+0x5772f]; cmove rax, rdx; ret;
0x0010b7fc: add eax, 0x5772f; cmove rax, rdx; ret;
0x0010b7ff: add eax, 0x440f4800; ret 0x66c3;
0x0010b800: add [rax+0xf], cl; ret 0x66c3;
0x0010b804: ret 0x66c3;
0x0010b806: nop [rax+rax]; test eax, eax; lea rdx, [rip-0x63d39]; lea rax, [rip-0x63dc0]; cmovne rax, rdx; ret;
0x0010b807: nop [rax+rax]; test eax, eax; lea rdx, [rip-0x63d39]; lea rax, [rip-0x63dc0]; cmovne rax, rdx; ret;
0x0010b808: nop [rax+rax]; test eax, eax; lea rdx, [rip-0x63d39]; lea rax, [rip-0x63dc0]; cmovne rax, rdx; ret;
0x0010b80d: add [rax], al; add [rbp+0x158d48c0], al; mov edx, 0x8d48fff9; add eax, 0xfff9c240; cmovne rax, rdx; ret;
0x0010b80e: add [rax], al; test eax, eax; lea rdx, [rip-0x63d39]; lea rax, [rip-0x63dc0]; cmovne rax, rdx; ret;
0x0010b80f: add [rbp+0x158d48c0], al; mov edx, 0x8d48fff9; add eax, 0xfff9c240; cmovne rax, rdx; ret;
0x0010b810: test eax, eax; lea rdx, [rip-0x63d39]; lea rax, [rip-0x63dc0]; cmovne rax, rdx; ret;
0x0010b811: ror byte ptr [rax-0x73], 0x15; mov edx, 0x8d48fff9; add eax, 0xfff9c240; cmovne rax, rdx; ret;
0x0010b812: lea rdx, [rip-0x63d39]; lea rax, [rip-0x63dc0]; cmovne rax, rdx; ret;
0x0010b813: lea edx, [rip-0x63d39]; lea rax, [rip-0x63dc0]; cmovne rax, rdx; ret;
0x0010b814: adc eax, 0xfff9c2c7; lea rax, [rip-0x63dc0]; cmovne rax, rdx; ret;
0x0010b815: mov edx, 0x8d48fff9; add eax, 0xfff9c240; cmovne rax, rdx; ret;
0x0010b817: stc; dec dword ptr [rax-0x73]; add eax, 0xfff9c240; cmovne rax, rdx; ret;
0x0010b818: dec dword ptr [rax-0x73]; add eax, 0xfff9c240; cmovne rax, rdx; ret;
0x0010b819: lea rax, [rip-0x63dc0]; cmovne rax, rdx; ret;
0x0010b81a: lea eax, [rip-0x63dc0]; cmovne rax, rdx; ret;
0x0010b81b: add eax, 0xfff9c240; cmovne rax, rdx; ret;
0x0010b81e: stc; dec dword ptr [rax+0xf]; ret 0xfc3;
0x0010b81f: dec dword ptr [rax+0xf]; ret 0xfc3;
0x0010b820: cmovne rax, rdx; ret;
0x0010b821: cmovne eax, edx; ret;
0x0010b82e: add [rax-0xf8af71b], al; test byte ptr [rdx+0x7d], 2; lea rax, [rip+0x5c571]; lea rdx, [rip+0x5c4fa]; cmove rax, rdx; ret;
0x0010b831: or [rbp-0x10], dh; test byte ptr [rdx+0x7d], 2; lea rax, [rip+0x5c571]; lea rdx, [rip+0x5c4fa]; cmove rax, rdx; ret;
0x0010b834: test byte ptr [rdx+0x7d], 2; lea rax, [rip+0x5c571]; lea rdx, [rip+0x5c4fa]; cmove rax, rdx; ret;
0x0010b837: add cl, [rax-0x73]; add eax, 0x5c571; lea rdx, [rip+0x5c4fa]; cmove rax, rdx; ret;
0x0010b838: lea rax, [rip+0x5c571]; lea rdx, [rip+0x5c4fa]; cmove rax, rdx; ret;
0x0010b839: lea eax, [rip+0x5c571]; lea rdx, [rip+0x5c4fa]; cmove rax, rdx; ret;
0x0010b83a: add eax, 0x5c571; lea rdx, [rip+0x5c4fa]; cmove rax, rdx; ret;
0x0010b83e: add [rax-0x73], cl; adc eax, 0x5c4fa; cmove rax, rdx; ret;
0x0010b83f: lea rdx, [rip+0x5c4fa]; cmove rax, rdx; ret;
0x0010b840: lea edx, [rip+0x5c4fa]; cmove rax, rdx; ret;
0x0010b841: adc eax, 0x5c4fa; cmove rax, rdx; ret;
0x0010b844: add eax, 0x440f4800; ret 0xfc3;
0x0010b845: add [rax+0xf], cl; ret 0xfc3;
0x0010b846: cmove rax, rdx; ret;
0x0010b847: cmove eax, edx; ret;
0x0010b878: push rax; add [rax-0x77], ecx; ret;
0x0010b879: add [rax-0x77], ecx; ret;
0x0010b885: or [rax+1], cl; fcomp st, dword ptr [rbx+0x5d]; pop r12; pop r13; ret;
0x0010b886: add rax, rbx; pop rbx; pop rbp; pop r12; pop r13; ret;
0x0010b887: add eax, ebx; pop rbx; pop rbp; pop r12; pop r13; ret;
0x0010b888: fcomp st, dword ptr [rbx+0x5d]; pop r12; pop r13; ret;
0x0010b909: add [rax], al; nop [rax+rax]; mov rax, r8; ret;
0x0010b90b: nop [rax+rax]; mov rax, r8; ret;
0x0010b90d: add [rax], r8b; mov rax, r8; ret;
0x0010b90e: add [rax], al; mov rax, r8; ret;
0x0010b90f: add [rcx+rcx*4-0x40], cl; ret;
0x0010b968: ror byte ptr [rax+1], cl; iretd;
0x0010ba17: shl byte ptr [rbp-0x59], 0x4c; mov eax, ecx; ret;
0x0010ba19: cmpsd [rsi], [rdi]; mov rax, r9; ret;
0x0010ba1a: mov rax, r9; ret;
0x0010ba42: shl byte ptr [rbp+rdx*8+0x48], 0x39; iretd;
0x0010ba84: or ebp, ecx; push rsi; cwde; int1; jmp qword ptr [rsi+0xf];
0x0010ba86: push rsi; cwde; int1; jmp qword ptr [rsi+0xf];
0x0010ba87: cwde; int1; jmp qword ptr [rsi+0xf];
0x0010baa7: xchg ebp, eax; int1; jmp qword ptr [rsi+0xf];
0x0010bb76: add [rax], al; add [rbp+0xd], dh; add rsp, 0xd8; ret;
0x0010bb78: add [rbp+0xd], dh; add rsp, 0xd8; ret;
0x0010bbb3: mov ah, 0xf6; call qword ptr [rax-0x18];
0x0010bca8: shr cl, 0x72; sbb al, 0xf7; jmp qword ptr [rsi-0x70];
0x0010bcab: sbb al, 0xf7; jmp qword ptr [rsi-0x70];
0x0010bf12: dec dword ptr [rcx-0x75]; add [r8-0x7d], r9b; rol byte ptr [rcx], 0x8b; adc esi, esi; ret 0xf20;
0x0010bf15: add [r8-0x7d], r9b; rol byte ptr [rcx], 0x8b; adc esi, esi; ret 0xf20;
0x0010bf16: add [rax-0x7d], cl; rol byte ptr [rcx], 0x8b; adc esi, esi; ret 0xf20;
0x0010bf19: rol byte ptr [rcx], 0x8b; adc esi, esi; ret 0xf20;
0x0010bf1c: adc esi, esi; ret 0xf20;
0x0010bf1e: ret 0xf20;
0x0010c007: push 0x45ffffff; xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x0010c00a: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; syscall;
0x0010c02b: add [rax], al; add [rcx-0x77], cl; shr cl, 0x6f; movsb [rdi], [rsi]; int1; jmp qword ptr [rsi+0x2e];
0x0010c02d: add [rcx-0x77], cl; shr cl, 0x6f; movsb [rdi], [rsi]; int1; jmp qword ptr [rsi+0x2e];
0x0010c030: shr cl, 0x6f; movsb [rdi], [rsi]; int1; jmp qword ptr [rsi+0x2e];
0x0010c032: outsd dx, [rsi]; movsb [rdi], [rsi]; int1; jmp qword ptr [rsi+0x2e];
0x0010c033: movsb [rdi], [rsi]; int1; jmp qword ptr [rsi+0x2e];
0x0010c098: ret 0xce80;
0x0010c458: nop [rax+rax]; xor r8d, r8d; mov rax, r8; ret;
0x0010c45a: test [rax], al; add [rax], al; add [rax], al; xor r8d, r8d; mov rax, r8; ret;
0x0010c45c: add [rax], al; add [rax], al; xor r8d, r8d; mov rax, r8; ret;
0x0010c495: xor eax, eax; syscall;
0x0010c49e: push qword ptr [rdi+7]; ret;
0x0010c4a2: nop [rax+rax]; mov rdx, [rip+0xca3a9]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x0010c4a3: nop [rax+rax]; mov rdx, [rip+0xcef79]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x0010c4a5: add [rax], r8b; mov rdx, [rip+0xcef79]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x0010c4a6: add [rax], al; mov rdx, [rip+0xcef79]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x0010c4a7: add [rax-0x75], cl; adc eax, 0xb19c1; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x0010c4a8: mov rdx, [rip+0x17e1a9]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x0010c4a9: mov edx, [rip+0x17e1a9]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x0010c4aa: adc eax, 0xb19c1; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x0010c4ab: rcr dword ptr [rcx], 0xb; add bh, dh; fsub st, dword ptr [rcx+rcx*4+2]; mov rax, 0xffffffffffffffff; ret;
0x0010c4ac: sbb [rbx], ecx; add bh, dh; fsub st, dword ptr [rcx+rcx*4+2]; mov rax, 0xffffffffffffffff; ret;
0x0010c4ad: or eax, [rax]; neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x0010c4ae: add bh, dh; fsub st, dword ptr [rcx+rcx*4+2]; mov rax, 0xffffffffffffffff; ret;
0x0010c4af: neg eax; mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x0010c4b0: fsub st, dword ptr [rcx+rcx*4+2]; mov rax, 0xffffffffffffffff; ret;
0x0010c4b1: mov fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x0010c4b2: mov [rdx], eax; mov rax, 0xffffffffffffffff; ret;
0x0010c4b4: mov rax, 0xffffffffffffffff; ret;
0x0010c4b5: mov eax, 0xffffffff; ret;
0x0010c4d4: add eax, 0xfe0c76e9; call qword ptr [rax-0x18];
0x0010c4e2: ret 0x577;
0x0010c4e4: add eax, 0xfe0c66e9; call qword ptr [rax-0x18];
0x0010c4e7: or al, 0xfe; call qword ptr [rax-0x18];
0x0010c4f7: shr ecx, 0xd3; sub bh, bh; call qword ptr [rax-0x18];
0x0010c4fa: sub bh, bh; call qword ptr [rax-0x18];
0x0010c53a: add [rax], al; add [rax], al; add [rax+0x77ca3948], dl; add eax, 0xfe45a6e9; call qword ptr [rax-0x18];
0x0010c53c: add [rax], al; add [rax+0x77ca3948], dl; add eax, 0xfe45a6e9; call qword ptr [rax-0x18];
0x0010c53e: add [rax+0x77ca3948], dl; add eax, 0xfe45a6e9; call qword ptr [rax-0x18];
0x0010c544: add eax, 0xfe45a6e9; call qword ptr [rax-0x18];
0x0010c554: add eax, 0xfe45c6e9; call qword ptr [rax-0x18];
0x0010c594: add eax, 0xfe3386e9; call qword ptr [rax-0x18];
0x0010c597: xor edi, esi; call qword ptr [rax-0x18];
0x0010c5a8: add eax, 0xf3c8d2e9; call qword ptr [rax-0x18];
0x0010c5aa: ror al, cl; call qword ptr [rax-0x18];
0x0010c5ac: call qword ptr [rax-0x18];
0x0010c5e7: in al, dx; or [rax+0x39], cl; ret 0x976;
0x0010c5e8: or [rax+0x39], cl; ret 0x976;
0x0010c5eb: ret 0x976;
0x0010c70c: add [rsi-0x7b], edi; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x0010c70e: test [rbp+0x31], eax; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; syscall;
0x0010c74b: ret 0x576;
0x0010c75a: in al, 0x75; or ecx, [rcx+rcx*4-0x20]; pop rbx; pop rbp; pop r12; ret;
0x0010c75c: or ecx, [rcx+rcx*4-0x20]; pop rbx; pop rbp; pop r12; ret;
0x0010c780: pop rbx; pop rbp; mov r12, rax; mov rax, r12; pop r12; ret;
0x0010c781: pop rbp; mov r12, rax; mov rax, r12; pop r12; ret;
0x0010c782: mov r12, rax; mov rax, r12; pop r12; ret;
0x0010c783: mov esp, eax; mov rax, r12; pop r12; ret;
0x0010c7a8: mov r12, rbp; pop rbx; pop rbp; mov rax, r12; pop r12; ret;
0x0010c7a9: mov esp, ebp; pop rbx; pop rbp; mov rax, r12; pop r12; ret;
0x0010c7aa: in al, dx; pop rbx; pop rbp; mov rax, r12; pop r12; ret;
0x0010c82c: nop [rax]; mov rax, rdi; ret;
0x0010c82f: add [rax-0x77], cl; clc; ret;
0x0010c848: add ch, cl; push rdx; mov ecx, esi; jmp qword ptr [rsi-0x70];
0x0010c84a: push rdx; mov ecx, esi; jmp qword ptr [rsi-0x70];
0x0010c86b: mov dh, cl; jmp qword ptr [rsi-0x70];
0x0010c88b: mov ecx, esi; jmp qword ptr [rsi-0x70];
0x0010c95c: idiv bh; call qword ptr [rax-0x3c3f76b4];
0x0010c95e: call qword ptr [rax-0x3c3f76b4];
0x0010c95f: nop; mov rax, r8; ret;
0x0010c97b: ret 0x11eb;
0x0010c9f8: adc [rax-0x7d], cl; ret 0x8910;
0x0010c9fb: ret 0x8910;
0x0010ca18: scasd [rdi]; mov rax, r8; ret;
0x0010ca3b: ret 0x8904;
0x0010cab2: mov eax, 4; add [rax], al; add [rbp+rcx*4+5], cl; mov dl, 5; add [rax+0x21], cl; ret 0x8d48;
0x0010cab5: add [rax], al; add [rax], al; add [rbp+rcx*4+5], cl; mov dl, 5; add [rax+0x21], cl; ret 0x8d48;
0x0010cab7: add [rax], al; add [rbp+rcx*4+5], cl; mov dl, 5; add [rax+0x21], cl; ret 0x8d48;
0x0010caba: add [rbp+rcx*4+5], cl; mov dl, 5; add [rax+0x21], cl; ret 0x8d48;
0x0010cabf: mov dl, 5; add [rax+0x21], cl; ret 0x8d48;
0x0010cac0: add eax, 0xc2214800; lea rax, [rip+0x563d4]; cmp rdx, 4; cmovne r8, rax; mov rax, r8; ret;
0x0010cac1: add [rax+0x21], cl; ret 0x8d48;
0x0010cac2: and rdx, rax; lea rax, [rip+0x563d4]; cmp rdx, 4; cmovne r8, rax; mov rax, r8; ret;
0x0010cac3: and edx, eax; lea rax, [rip+0x563d4]; cmp rdx, 4; cmovne r8, rax; mov rax, r8; ret;
0x0010cac5: lea rax, [rip+0x563d4]; cmp rdx, 4; cmovne r8, rax; mov rax, r8; ret;
0x0010cac6: lea eax, [rip+0x563d4]; cmp rdx, 4; cmovne r8, rax; mov rax, r8; ret;
0x0010cac7: add eax, 0x563d4; cmp rdx, 4; cmovne r8, rax; mov rax, r8; ret;
0x0010cac9: movsxd eax, [rip-0x57cb800]; add al, 0x4c; cmovne eax, eax; mov rax, r8; ret;
0x0010caca: add eax, 0xfa834800; add al, 0x4c; cmovne eax, eax; mov rax, r8; ret;
0x0010cacb: add [rax-0x7d], cl; cli; add al, 0x4c; cmovne eax, eax; mov rax, r8; ret;
0x0010cacc: cmp rdx, 4; cmovne r8, rax; mov rax, r8; ret;
0x0010cacd: cmp edx, 4; cmovne r8, rax; mov rax, r8; ret;
0x0010cace: cli; add al, 0x4c; cmovne eax, eax; mov rax, r8; ret;
0x0010cacf: add al, 0x4c; cmovne eax, eax; mov rax, r8; ret;
0x0010cad0: cmovne r8, rax; mov rax, r8; ret;
0x0010cad1: cmovne eax, eax; mov rax, r8; ret;
0x0010cbac: add [rax], al; add [rbp+0x14], dh; add rsp, 0xd8; ret;
0x0010cbae: add [rbp+0x14], dh; add rsp, 0xd8; ret;
0x0010cbb0: adc al, 0x48; add esp, 0xd8; ret;
0x0010cead: mov rax, r8; pop rbp; pop r12; pop r13; pop r14; ret;
0x0010ceae: mov eax, eax; pop rbp; pop r12; pop r13; pop r14; ret;
0x0010cebb: add [rax], al; add [rax], al; add dh, dh; ret 0x7420;
0x0010cebd: add [rax], al; add dh, dh; ret 0x7420;
0x0010cebf: add dh, dh; ret 0x7420;
0x0010cec1: ret 0x7420;
0x0010cf04: add [rsi-0x5b], edi; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x0010cf06: movsd [rdi], [rsi]; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x0010cf07: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x0010cf08: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x0010cf09: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; syscall;
0x0010cf3a: dec dword ptr [rcx-0x77]; shr cl, 0x67; xchg esi, eax; int1; jmp qword ptr [rsi+0x2e];
0x0010cf3d: shr cl, 0x67; xchg esi, eax; int1; jmp qword ptr [rsi+0x2e];
0x0010cf40: xchg esi, eax; int1; jmp qword ptr [rsi+0x2e];
0x0010cfa0: sbb dh, dh; ret 0x7520;
0x0010cfbd: ror byte ptr [rcx-0x3b7cb7d5], 8; pop rbx; pop rbp; pop r12; pop r13; ret;
0x0010d004: or ebp, ecx; push 0xfffffffffffffffd; jmp qword ptr [rsi+0xf];
0x0010d006: push 0xfffffffffffffffd; jmp qword ptr [rsi+0xf];
0x0010d007: push 0xfffffffffffffffd; jmp qword ptr [rsi+0xf];
0x0010d035: nop [rax]; mov rax, [rip+0x181f01]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x0010d037: add [rax-0x75], cl; add eax, 0xb0e31; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x0010d038: mov rax, [rip+0x182139]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x0010d039: mov eax, [rip+0x182139]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x0010d03a: add eax, 0xb0e31; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x0010d03b: xor [rsi], ecx; or eax, [rax]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x0010d03d: or eax, [rax]; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x0010d03f: mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret;
0x0010d040: mov dword ptr [rax], 0x16; mov eax, 0xffffffff; ret;
0x0010d041: add [rsi], dl; add [rax], al; add [rax-1], bh; ret;
0x0010d064: add eax, 0xfe35c6e9; call qword ptr [rax-0x18];
0x0010d074: add eax, 0xfe8546e9; call qword ptr [rax-0x18];
0x0010d076: test esi, r15d; call qword ptr [rax-0x18];
0x0010d077: test esi, edi; call qword ptr [rax-0x18];
0x0010d084: add eax, 0xfe8686e9; call qword ptr [rax-0x18];
0x0010d087: xchg dh, bh; call qword ptr [rax-0x18];
0x0010d096: add [rax+rcx*2-0x75], ah; add [rax-0x75], cl; add [rbx+0xa880], cl; add [rax+0x39], cl; enter 0x577, 0xe9; ret 0xf9bd;
0x0010d09a: add [rax-0x75], cl; add [rbx+0xa880], cl; add [rax+0x39], cl; enter 0x577, 0xe9; ret 0xf9bd;
0x0010d09d: add [rbx+0xa880], cl; add [rax+0x39], cl; enter 0x577, 0xe9; ret 0xf9bd;
0x0010d09f: sub byte ptr [rax+0x48000000], 0x39; enter 0x577, 0xe9; ret 0xf9bd;
0x0010d0a1: add [rax], al; add [rax+0x39], cl; enter 0x577, 0xe9; ret 0xf9bd;
0x0010d0a3: add [rax+0x39], cl; enter 0x577, 0xe9; ret 0xf9bd;
0x0010d0a6: enter 0x577, 0xe9; ret 0xf9bd;
0x0010d0a8: add eax, 0xf9bdc2e9; call qword ptr [rax-0x18];
0x0010d0aa: ret 0xf9bd;
0x0010d0ac: stc; call qword ptr [rax-0x18];
0x0010d0c4: or ebp, ecx; xchg esi, eax; ret 0xfff9;
0x0010d0c6: xchg esi, eax; ret 0xfff9;
0x0010d0c7: ret 0xfff9;
0x0010d1e1: add [rax], al; add [rbp+0xf], dh; add rsp, 0x28; ret;
0x0010d1e3: add [rbp+0xf], dh; add rsp, 0x28; ret;
0x0010d46a: add [rax], al; add [rbp+8], dh; add rsp, 0xd8; ret;
0x0010d46c: add [rbp+8], dh; add rsp, 0xd8; ret;
0x0010d46f: add rsp, 0xd8; ret;
0x0010d470: add esp, 0xd8; ret;
0x0010d472: fadd st, dword ptr [rax]; add [rax], al; ret;
0x0010d528: mov r10, rdi; mov ebx, esi; xor edi, edi; lea rsi, [rsp-0x18]; mov eax, 0x83; syscall;
0x0010d529: mov edx, edi; mov ebx, esi; xor edi, edi; lea rsi, [rsp-0x18]; mov eax, 0x83; syscall;
0x0010d52a: cli; mov ebx, esi; xor edi, edi; lea rsi, [rsp-0x18]; mov eax, 0x83; syscall;
0x0010d52b: mov ebx, esi; xor edi, edi; lea rsi, [rsp-0x18]; mov eax, 0x83; syscall;
0x0010d52d: xor edi, edi; lea rsi, [rsp-0x18]; mov eax, 0x83; syscall;
0x0010d52f: lea rsi, [rsp-0x18]; mov eax, 0x83; syscall;
0x0010d530: lea esi, [rsp-0x18]; mov eax, 0x83; syscall;
0x0010d532: and al, 0xe8; mov eax, 0x83; syscall;
0x0010d534: mov eax, 0x83; syscall;
0x0010d578: adc [ebx+ecx*4+0x6f], cl; sbb [rbx+rcx*4+0x77], cl; and [rbx+rcx*4+0x7f], cl; sub [rcx-0x3b76b310], cl; mov rbp, r9; jmp rdx;
0x0010d579: adc [rbx+rcx*4+0x6f], cl; sbb [rbx+rcx*4+0x77], cl; and [rbx+rcx*4+0x7f], cl; sub [rcx-0x3b76b310], cl; mov rbp, r9; jmp rdx;
0x0010d57c: outsd dx, [rsi]; sbb [rbx+rcx*4+0x77], cl; and [rbx+rcx*4+0x7f], cl; sub [rcx-0x3b76b310], cl; mov rbp, r9; jmp rdx;
0x0010d57d: sbb [rbx+rcx*4+0x77], cl; and [rbx+rcx*4+0x7f], cl; sub [rcx-0x3b76b310], cl; mov rbp, r9; jmp rdx;
0x0010d57e: mov r14, [rdi+0x20]; mov r15, [rdi+0x28]; mov eax, esi; mov rsp, r8; mov rbp, r9; jmp rdx;
0x0010d57f: mov esi, [rdi+0x20]; mov r15, [rdi+0x28]; mov eax, esi; mov rsp, r8; mov rbp, r9; jmp rdx;
0x0010d581: and [rbx+rcx*4+0x7f], cl; sub [rcx-0x3b76b310], cl; mov rbp, r9; jmp rdx;
0x0010d582: mov r15, [rdi+0x28]; mov eax, esi; mov rsp, r8; mov rbp, r9; jmp rdx;
0x0010d583: mov edi, [rdi+0x28]; mov eax, esi; mov rsp, r8; mov rbp, r9; jmp rdx;
0x0010d585: sub [rcx-0x3b76b310], cl; mov rbp, r9; jmp rdx;
0x0010d586: mov eax, esi; mov rsp, r8; mov rbp, r9; jmp rdx;
0x0010d588: mov rsp, r8; mov rbp, r9; jmp rdx;
0x0010d589: mov esp, eax; mov rbp, r9; jmp rdx;
0x0010d58b: mov rbp, r9; jmp rdx;
0x0010d58c: mov ebp, ecx; jmp rdx;
0x0010d594: add eax, [rax]; add [rdi+8], dh; mov rax, rdi; sar rax, 6; ret;
0x0010d596: add [rdi+8], dh; mov rax, rdi; sar rax, 6; ret;
0x0010d598: or [rax-0x77], cl; clc; sar rax, 6; ret;
0x0010d599: mov rax, rdi; sar rax, 6; ret;
0x0010d59a: mov eax, edi; sar rax, 6; ret;
0x0010d59b: clc; sar rax, 6; ret;
0x0010d59c: sar rax, 6; ret;
0x0010d59d: sar eax, 6; ret;
0x0010d5b8: add eax, 0xfe5df2e9; call qword ptr [rax-0x18];
0x0010d5d8: add eax, 0xfe5e72e9; call qword ptr [rax-0x18];
0x0010d5fd: imul al; sub eax, 0x48fff17c; add esp, 8; ret;
0x0010d5ff: sub eax, 0x48fff17c; add esp, 8; ret;
0x0010d653: in al, dx; nop [rax+rax]; xchg ax, ax; mov eax, edi; bswap eax; ret;
0x0010d654: nop [rax+rax]; xchg ax, ax; mov eax, edi; bswap eax; ret;
0x0010d655: nop [rax+rax]; xchg ax, ax; mov eax, edi; bswap eax; ret;
0x0010d656: nop [rax+rax]; xchg ax, ax; mov eax, edi; bswap eax; ret;
0x0010d659: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov eax, edi; bswap eax; ret;
0x0010d65a: add [rax], al; add [rax], al; xchg ax, ax; mov eax, edi; bswap eax; ret;
0x0010d65b: add [rax], al; add [rsi-0x70], ah; mov eax, edi; bswap eax; ret;
0x0010d65c: add [rax], al; xchg ax, ax; mov eax, edi; bswap eax; ret;
0x0010d65d: add [rsi-0x70], ah; mov eax, edi; bswap eax; ret;
0x0010d65e: xchg ax, ax; mov eax, edi; bswap eax; ret;
0x0010d65f: nop; mov eax, edi; bswap eax; ret;
0x0010d660: mov eax, edi; bswap eax; ret;
0x0010d661: clc; bswap eax; ret;
0x0010d663: enter 0x66c3, 0x2e; nop [rax+rax]; nop; mov eax, edi; rol ax, 8; ret;
0x0010d665: nop [rax+rax]; nop; mov eax, edi; rol ax, 8; ret;
0x0010d666: nop [rax+rax]; nop; mov eax, edi; rol ax, 8; ret;
0x0010d667: nop [rax+rax]; nop; mov eax, edi; rol ax, 8; ret;
0x0010d66b: add [rax], al; add [rax], al; nop; mov eax, edi; rol ax, 8; ret;
0x0010d66d: add [rax], al; nop; mov eax, edi; rol ax, 8; ret;
0x0010d66f: nop; mov eax, edi; rol ax, 8; ret;
0x0010d670: mov eax, edi; rol ax, 8; ret;
0x0010d671: clc; rol ax, 8; ret;
0x0010d672: rol ax, 8; ret;
0x0010d673: rol eax, 8; ret;
0x0010d67b: add [rax], al; add [rax], al; add [rdi], cl; iretd;
0x0010d67d: add [rax], al; add [rdi], cl; iretd;
0x0010d685: sbb cl, [rcx-0x3848f006]; movzx edi, dil; and edx, 0xc0000000; cmp edx, 0x80000000; cmovne eax, edi; ret;
0x0010d688: movzx eax, di; movzx edi, dil; and edx, 0xc0000000; cmp edx, 0x80000000; cmovne eax, edi; ret;
0x0010d689: mov bh, 0xc7; movzx edi, dil; and edx, 0xc0000000; cmp edx, 0x80000000; cmovne eax, edi; ret;
0x0010d68a: mov dword ptr [rax+0xf], 0xe281ffb6; add [rax], al; add al, al; cmp edx, 0x80000000; cmovne eax, edi; ret;
0x0010d68b: movzx edi, dil; and edx, 0xc0000000; cmp edx, 0x80000000; cmovne eax, edi; ret;
0x0010d68c: movzx edi, bh; and edx, 0xc0000000; cmp edx, 0x80000000; cmovne eax, edi; ret;
0x0010d68d: mov dh, 0xff; and edx, 0xc0000000; cmp edx, 0x80000000; cmovne eax, edi; ret;
0x0010d68e: inc dword ptr [rcx+0xe2]; rol byte ptr [rcx+0xfa], 0x80; cmovne eax, edi; ret;
0x0010d68f: and edx, 0xc0000000; cmp edx, 0x80000000; cmovne eax, edi; ret;
0x0010d691: add [rax], al; add al, al; cmp edx, 0x80000000; cmovne eax, edi; ret;
0x0010d692: add [rax], al; rol byte ptr [rcx+0xfa], 0x80; cmovne eax, edi; ret;
0x0010d693: add al, al; cmp edx, 0x80000000; cmovne eax, edi; ret;
0x0010d694: rol byte ptr [rcx+0xfa], 0x80; cmovne eax, edi; ret;
0x0010d697: add [rax], al; add [rax-0x3c38baf1], al; nop; mov eax, edi; and eax, 0xffffff; ret;
0x0010d699: add [rax-0x3c38baf1], al; nop; mov eax, edi; and eax, 0xffffff; ret;
0x0010d69f: nop; mov eax, edi; and eax, 0xffffff; ret;
0x0010d6a0: mov eax, edi; and eax, 0xffffff; ret;
0x0010d6a1: clc; and eax, 0xffffff; ret;
0x0010d6a2: and eax, 0xffffff; ret;
0x0010d6a5: inc dword ptr [rax]; ret;
0x0010d6b5: shl edi, 0x18; and esi, 0xffffff; mov eax, edi; or eax, esi; bswap eax; ret;
0x0010d6b6: out 0x18, eax; and esi, 0xffffff; mov eax, edi; or eax, esi; bswap eax; ret;
0x0010d6b8: and esi, 0xffffff; mov eax, edi; or eax, esi; bswap eax; ret;
0x0010d6bc: inc dword ptr [rax]; mov eax, edi; or eax, esi; bswap eax; ret;
0x0010d6d0: shl edi, 0x10; movzx esi, si; mov eax, edi; or eax, esi; bswap eax; ret;
0x0010d6d1: out 0x10, eax; movzx esi, si; mov eax, edi; or eax, esi; bswap eax; ret;
0x0010d6d2: adc [rdi], cl; mov bh, 0xf6; mov eax, edi; or eax, esi; bswap eax; ret;
0x0010d6d3: movzx esi, si; mov eax, edi; or eax, esi; bswap eax; ret;
0x0010d6d4: mov bh, 0xf6; mov eax, edi; or eax, esi; bswap eax; ret;
0x0010d6ec: shl edi, 8; movzx esi, sil; mov eax, edi; or eax, esi; bswap eax; ret;
0x0010d6ed: out 8, eax; movzx esi, sil; mov eax, edi; or eax, esi; bswap eax; ret;
0x0010d6ee: or [rax+0xf], al; mov dh, 0xf6; mov eax, edi; or eax, esi; bswap eax; ret;
0x0010d6ef: movzx esi, sil; mov eax, edi; or eax, esi; bswap eax; ret;
0x0010d6f0: movzx esi, dh; mov eax, edi; or eax, esi; bswap eax; ret;
0x0010d6f1: mov dh, 0xf6; mov eax, edi; or eax, esi; bswap eax; ret;
0x0010d6f2: test byte ptr [rcx+0xff009f8], 0xc8; ret;
0x0010d6f3: mov eax, edi; or eax, esi; bswap eax; ret;
0x0010d6f4: clc; or eax, esi; bswap eax; ret;
0x0010d6f5: or eax, esi; bswap eax; ret;
0x0010d6f7: bswap eax; ret;
0x0010d6ff: add [rdi], cl; iretd;
0x0010d70a: shr edi, 8; and edx, 0xc0000000; shr eax, 0x10; cmp edx, 0x80000000; cmovne eax, edi; ret;
0x0010d70d: and edx, 0xc0000000; shr eax, 0x10; cmp edx, 0x80000000; cmovne eax, edi; ret;
0x0010d70f: add [rax], al; add al, al; shr eax, 0x10; cmp edx, 0x80000000; cmovne eax, edi; ret;
0x0010d711: add al, al; shr eax, 0x10; cmp edx, 0x80000000; cmovne eax, edi; ret;
0x0010d713: shr eax, 0x10; cmp edx, 0x80000000; cmovne eax, edi; ret;
0x0010d716: cmp edx, 0x80000000; cmovne eax, edi; ret;
0x0010d717: cli; add [rax], al; add [rax-0x3c38baf1], al; mov eax, edi; shr eax, 0x18; ret;
0x0010d718: add [rax], al; add [rax-0x3c38baf1], al; mov eax, edi; shr eax, 0x18; ret;
0x0010d71a: add [rax-0x3c38baf1], al; mov eax, edi; shr eax, 0x18; ret;
0x0010d71c: cmovne eax, edi; ret;
0x0010d720: mov eax, edi; shr eax, 0x18; ret;
0x0010d721: clc; shr eax, 0x18; ret;
0x0010d722: shr eax, 0x18; ret;
0x0010d771: shr al, 0x49; xchg esi, eax; hlt; call far fword ptr [rax+0x4c];
0x0010d773: xchg r14, rax; hlt; call far fword ptr [rax+0x4c];
0x0010d774: xchg esi, eax; hlt; call far fword ptr [rax+0x4c];
0x0010d833: add [rax], al; add [rax-0x7d], cl; ret 0x8401;
0x0010d835: add [rax-0x7d], cl; ret 0x8401;
0x0010d84c: adc [rcx+0x39], cl; ret;
0x0010d89c: add [rcx+0xfff9], eax; add [rdi], cl; xchg edi, eax; ret 0x840;
0x0010d8a0: add [rax], al; add [rdi], cl; xchg edi, eax; ret 0x840;
0x0010d8a2: add [rdi], cl; xchg edi, eax; ret 0x840;
0x0010d8a4: xchg edi, eax; ret 0x840;
0x0010d8a5: ret 0x840;
0x0010d8b3: xor [rcx-0x7d], cl; ret;
0x0010d8ea: ret 0x44f6;
0x0010d94e: call qword ptr [rax+0x1058b48];
0x0010d94f: nop; mov rax, [rip+0xb0501]; add rax, fs:[0]; ret;
0x0010d950: mov rax, [rip+0xb0501]; add rax, fs:[0]; ret;
0x0010d951: mov eax, [rip+0xb0501]; add rax, fs:[0]; ret;
0x0010d952: add eax, 0xb0501; add rax, fs:[0]; ret;
0x0010d953: add [rip+0x4864000b], eax; add eax, [0]; ret;
0x0010d954: add eax, 0x4864000b; add eax, [0]; ret;
0x0010d955: or eax, [rax]; add rax, fs:[0]; ret;
0x0010d956: add [rax+rcx*2+3], ah; add al, 0x25; add [rax], al; add [rax], al; ret;
0x0010d957: add rax, fs:[0]; ret;
0x0010d958: add rax, [0]; ret;
0x0010d959: add eax, [0]; ret;
0x0010d95a: add al, 0x25; add [rax], al; add [rax], al; ret;
0x0010d95b: and eax, 0; ret;
0x0010d9fa: ret 0xb55;
0x0010db50: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb545e]; syscall;
0x0010db51: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb545e]; syscall;
0x0010db52: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb545e]; syscall;
0x0010db53: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb545e]; syscall;
0x0010db54: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb545e]; syscall;
0x0010db55: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb545e]; syscall;
0x0010db56: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xb545e]; syscall;
0x0010db57: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb545e]; syscall;
0x0010db58: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xb545e]; syscall;
0x0010db59: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb545e]; syscall;
0x0010db5a: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xb545e; syscall;
0x0010db5b: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xb545e]; syscall;
0x0010db5c: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xb545e]; syscall;
0x0010db5d: add [rax+0xca], bh; lea rdi, [rip+0xb545e]; syscall;
0x0010db5e: mov eax, 0xca; lea rdi, [rip+0xb545e]; syscall;
0x0010db60: add [rax], al; add [rax-0x73], cl; cmp eax, 0xb545e; syscall;
0x0010db61: add [rax], al; lea rdi, [rip+0xb545e]; syscall;
0x0010db62: add [rax-0x73], cl; cmp eax, 0xb545e; syscall;
0x0010db63: lea rdi, [rip+0xb545e]; syscall;
0x0010db64: lea edi, [rip+0xb545e]; syscall;
0x0010db65: cmp eax, 0xb545e; syscall;
0x0010db66: pop rsi; push rsp; or eax, [rax]; syscall;
0x0010db67: push rsp; or eax, [rax]; syscall;
0x0010dc09: jmp qword ptr [rbx+rcx];
0x0010dc19: ret 0xb53;
0x0010dd09: push qword ptr [rsp+0x18]; mov r9, r13; mov r8, r15; mov rdi, r12; mov edx, [rsp+0x38]; call qword ptr [rsp+0x60];
0x0010dd0b: and al, 0x18; mov r9, r13; mov r8, r15; mov rdi, r12; mov edx, [rsp+0x38]; call qword ptr [rsp+0x60];
0x0010dd0d: mov r9, r13; mov r8, r15; mov rdi, r12; mov edx, [rsp+0x38]; call qword ptr [rsp+0x60];
0x0010dd0e: mov ecx, ebp; mov r8, r15; mov rdi, r12; mov edx, [rsp+0x38]; call qword ptr [rsp+0x60];
0x0010dd10: mov r8, r15; mov rdi, r12; mov edx, [rsp+0x38]; call qword ptr [rsp+0x60];
0x0010dd11: mov eax, edi; mov rdi, r12; mov edx, [rsp+0x38]; call qword ptr [rsp+0x60];
0x0010dd12: clc; mov rdi, r12; mov edx, [rsp+0x38]; call qword ptr [rsp+0x60];
0x0010dd13: mov rdi, r12; mov edx, [rsp+0x38]; call qword ptr [rsp+0x60];
0x0010dd14: mov edi, esp; mov edx, [rsp+0x38]; call qword ptr [rsp+0x60];
0x0010dd15: out 0x8b, eax; push rsp; and al, 0x38; call qword ptr [rsp+0x60];
0x0010dd16: mov edx, [rsp+0x38]; call qword ptr [rsp+0x60];
0x0010dd17: push rsp; and al, 0x38; call qword ptr [rsp+0x60];
0x0010dd18: and al, 0x38; call qword ptr [rsp+0x60];
0x0010e055: add bl, ch; ret 0x8b48;
0x0010e1bb: outsb dx, [rsi]; int1; dec dword ptr [rax-0x77]; ret 0x8548;
0x0010e2d0: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb4d3e]; syscall;
0x0010e2d1: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb4d3e]; syscall;
0x0010e2d2: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb4d3e]; syscall;
0x0010e2d3: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb4d3e]; syscall;
0x0010e2d4: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb4d3e]; syscall;
0x0010e2d5: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb4d3e]; syscall;
0x0010e2d6: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xb4d3e]; syscall;
0x0010e2d7: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb4d3e]; syscall;
0x0010e2d8: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xb4d3e]; syscall;
0x0010e2d9: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb4d3e]; syscall;
0x0010e2da: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xb4d3e; syscall;
0x0010e2db: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xb4d3e]; syscall;
0x0010e2dc: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xb4d3e]; syscall;
0x0010e2dd: add [rax+0xca], bh; lea rdi, [rip+0xb4d3e]; syscall;
0x0010e2de: mov eax, 0xca; lea rdi, [rip+0xb4d3e]; syscall;
0x0010e2e0: add [rax], al; add [rax-0x73], cl; cmp eax, 0xb4d3e; syscall;
0x0010e2e1: add [rax], al; lea rdi, [rip+0xb4d3e]; syscall;
0x0010e2e2: add [rax-0x73], cl; cmp eax, 0xb4d3e; syscall;
0x0010e2e3: lea rdi, [rip+0xb4d3e]; syscall;
0x0010e2e4: lea edi, [rip+0xb4d3e]; syscall;
0x0010e2e5: cmp eax, 0xb4d3e; syscall;
0x0010e2e6: or r8, [r8]; syscall;
0x0010e2e7: or r8, [r8]; syscall;
0x0010e540: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb4b0e]; syscall;
0x0010e541: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb4b0e]; syscall;
0x0010e542: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb4b0e]; syscall;
0x0010e543: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb4b0e]; syscall;
0x0010e544: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb4b0e]; syscall;
0x0010e545: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb4b0e]; syscall;
0x0010e546: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xb4b0e]; syscall;
0x0010e547: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb4b0e]; syscall;
0x0010e548: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xb4b0e]; syscall;
0x0010e549: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb4b0e]; syscall;
0x0010e54a: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xb4b0e; syscall;
0x0010e54b: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xb4b0e]; syscall;
0x0010e54c: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xb4b0e]; syscall;
0x0010e54d: add [rax+0xca], bh; lea rdi, [rip+0xb4b0e]; syscall;
0x0010e54e: mov eax, 0xca; lea rdi, [rip+0xb4b0e]; syscall;
0x0010e550: add [rax], al; add [rax-0x73], cl; cmp eax, 0xb4b0e; syscall;
0x0010e551: add [rax], al; lea rdi, [rip+0xb4b0e]; syscall;
0x0010e552: add [rax-0x73], cl; cmp eax, 0xb4b0e; syscall;
0x0010e553: lea rdi, [rip+0xb4b0e]; syscall;
0x0010e554: lea edi, [rip+0xb4b0e]; syscall;
0x0010e555: cmp eax, 0xb4b0e; syscall;
0x0010e557: or rax, [r8]; syscall;
0x0010e758: push qword ptr [rsp+8]; mov r9, r15; mov rcx, [rsp+0x38]; mov esi, r14d; mov rdi, r13; call qword ptr [rsp+0x50];
0x0010e75a: and al, 8; mov r9, r15; mov rcx, [rsp+0x38]; mov esi, r14d; mov rdi, r13; call qword ptr [rsp+0x50];
0x0010e75b: or [rbp-0x77], cl; stc; mov rcx, [rsp+0x38]; mov esi, r14d; mov rdi, r13; call qword ptr [rsp+0x50];
0x0010e75c: mov r9, r15; mov rcx, [rsp+0x38]; mov esi, r14d; mov rdi, r13; call qword ptr [rsp+0x50];
0x0010e75d: mov ecx, edi; mov rcx, [rsp+0x38]; mov esi, r14d; mov rdi, r13; call qword ptr [rsp+0x50];
0x0010e75e: stc; mov rcx, [rsp+0x38]; mov esi, r14d; mov rdi, r13; call qword ptr [rsp+0x50];
0x0010e75f: mov rcx, [rsp+0x38]; mov esi, r14d; mov rdi, r13; call qword ptr [rsp+0x50];
0x0010e760: mov ecx, [rsp+0x38]; mov esi, r14d; mov rdi, r13; call qword ptr [rsp+0x50];
0x0010e762: and al, 0x38; mov esi, r14d; mov rdi, r13; call qword ptr [rsp+0x50];
0x0010e763: cmp [rcx+rcx*4-0xa], al; mov rdi, r13; call qword ptr [rsp+0x50];
0x0010e764: mov esi, r14d; mov rdi, r13; call qword ptr [rsp+0x50];
0x0010e765: mov esi, esi; mov rdi, r13; call qword ptr [rsp+0x50];
0x0010e767: mov rdi, r13; call qword ptr [rsp+0x50];
0x0010e768: mov edi, ebp; call qword ptr [rsp+0x50];
0x0010e769: out dx, eax; call qword ptr [rsp+0x50];
0x0010e76a: call qword ptr [rsp+0x50];
0x0010e9be: call qword ptr [rax-0x171876b4];
0x0010e9fe: call qword ptr [rax+0xfe48445];
0x0010ecc1: mov rdx, [rsp+0x28]; mov r9, rbx; mov rcx, r12; mov rsi, rbp; mov rdi, r13; call qword ptr [rsp+0x40];
0x0010ecc2: mov edx, [rsp+0x28]; mov r9, rbx; mov rcx, r12; mov rsi, rbp; mov rdi, r13; call qword ptr [rsp+0x40];
0x0010ecc4: and al, 0x28; mov r9, rbx; mov rcx, r12; mov rsi, rbp; mov rdi, r13; call qword ptr [rsp+0x40];
0x0010ecc6: mov r9, rbx; mov rcx, r12; mov rsi, rbp; mov rdi, r13; call qword ptr [rsp+0x40];
0x0010ecc7: mov ecx, ebx; mov rcx, r12; mov rsi, rbp; mov rdi, r13; call qword ptr [rsp+0x40];
0x0010ecc9: mov rcx, r12; mov rsi, rbp; mov rdi, r13; call qword ptr [rsp+0x40];
0x0010ecca: mov ecx, esp; mov rsi, rbp; mov rdi, r13; call qword ptr [rsp+0x40];
0x0010eccc: mov rsi, rbp; mov rdi, r13; call qword ptr [rsp+0x40];
0x0010eccd: mov esi, ebp; mov rdi, r13; call qword ptr [rsp+0x40];
0x0010ecce: out dx, al; mov rdi, r13; call qword ptr [rsp+0x40];
0x0010eccf: mov rdi, r13; call qword ptr [rsp+0x40];
0x0010ecd0: mov edi, ebp; call qword ptr [rsp+0x40];
0x0010ecd1: out dx, eax; call qword ptr [rsp+0x40];
0x0010ed1e: call qword ptr [rax+0x34247c83];
0x0010ef68: inc edi; add eax, [rbx]; add [rax], al; add cl, ch; iretd;
0x0010ef6a: add eax, [rbx]; add [rax], al; add cl, ch; iretd;
0x0010ef6c: add [rax], al; add cl, ch; iretd;
0x0010ef6e: add cl, ch; iretd;
0x0010f017: add [rax], al; add [rax-0x3f], cl; ret 0x4811;
0x0010f019: add [rax-0x3f], cl; ret 0x4811;
0x0010f01c: ret 0x4811;
0x0010f0f4: add [rbp-0x7cc08a40], al; sub eax, 0xb3fe0; add [rcx+rax*2-0x77], esp; sbb [rcx+rcx*4-0x40], ecx; pop rbx; ret;
0x0010f0f6: shl byte ptr [rbp+0x3f], 0x83; sub eax, 0xb3fe0; add [rcx+rax*2-0x77], esp; sbb [rcx+rcx*4-0x40], ecx; pop rbx; ret;
0x0010f0f9: sub dword ptr [rip+0xb3fe0], 1; mov fs:[r9], ebx; mov rax, r8; pop rbx; ret;
0x0010f0fa: sub eax, 0xb3fe0; add [rcx+rax*2-0x77], esp; sbb [rcx+rcx*4-0x40], ecx; pop rbx; ret;
0x0010f145: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb3f82]; syscall;
0x0010f146: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb3f82]; syscall;
0x0010f147: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb3f82]; syscall;
0x0010f148: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb3f82]; syscall;
0x0010f149: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb3f82]; syscall;
0x0010f14a: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xb3f82]; syscall;
0x0010f14b: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb3f82]; syscall;
0x0010f14c: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xb3f82]; syscall;
0x0010f14d: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb3f82]; syscall;
0x0010f14e: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xb3f82; syscall;
0x0010f14f: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xb3f82]; syscall;
0x0010f150: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xb3f82]; syscall;
0x0010f151: add [rax+0xca], bh; lea rdi, [rip+0xb3f82]; syscall;
0x0010f152: mov eax, 0xca; lea rdi, [rip+0xb3f82]; syscall;
0x0010f154: add [rax], al; add [rax-0x73], cl; cmp eax, 0xb3f82; syscall;
0x0010f155: add [rax], al; lea rdi, [rip+0xb3f82]; syscall;
0x0010f156: add [rax-0x73], cl; cmp eax, 0xb3f82; syscall;
0x0010f157: lea rdi, [rip+0xb3f82]; syscall;
0x0010f158: lea edi, [rip+0xb3f82]; syscall;
0x0010f159: cmp eax, 0xb3f82; syscall;
0x0010f1da: sub dword ptr [rip+0xb3f07], 1; mov fs:[r8], r9d; add rsp, 0x18; ret;
0x0010f236: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xb3ea2; syscall;
0x0010f23c: add [rax], al; add [rax-0x73], cl; cmp eax, 0xb3ea2; syscall;
0x0010f23e: add [rax-0x73], cl; cmp eax, 0xb3ea2; syscall;
0x0010f241: cmp eax, 0xb3ea2; syscall;
0x0010f243: or eax, [rax]; syscall;
0x0010f2be: sbb [rbx+0xb3e222d], eax; add [rcx], al; mov fs:[r8], r9d; add rsp, 8; ret;
0x0010f2bf: sub dword ptr [rip+0xb3e22], 1; mov fs:[r8], r9d; add rsp, 8; ret;
0x0010f2ee: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xb3dea; syscall;
0x0010f2f4: add [rax], al; add [rax-0x73], cl; cmp eax, 0xb3dea; syscall;
0x0010f2f6: add [rax-0x73], cl; cmp eax, 0xb3dea; syscall;
0x0010f2f9: cmp eax, 0xb3dea; syscall;
0x0010f3a3: adc [rcx], eax; add [rbx+rcx*4+0xd], cl; ret;
0x0010f3a5: add [rbx+rcx*4+0xd], cl; ret;
0x0010f3c3: sub dword ptr fs:[rip+0xb3d1d], 1; mov fs:[r9], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret;
0x0010f3c4: sub dword ptr [rip+0xb3d1d], 1; mov fs:[r9], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret;
0x0010f3c6: sbb eax, 0x1000b3d; mov fs:[r9], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret;
0x0010f3c7: cmp eax, 0x6401000b; mov [r9], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret;
0x0010f435: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb3ea2]; syscall;
0x0010f436: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb3ea2]; syscall;
0x0010f437: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb3ea2]; syscall;
0x0010f438: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb3ea2]; syscall;
0x0010f439: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb3ea2]; syscall;
0x0010f43a: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xb3ea2]; syscall;
0x0010f43b: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb3ea2]; syscall;
0x0010f43c: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xb3ea2]; syscall;
0x0010f43d: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb3ea2]; syscall;
0x0010f43e: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xb3c9a; syscall;
0x0010f43f: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xb3ea2]; syscall;
0x0010f440: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xb3ea2]; syscall;
0x0010f441: add [rax+0xca], bh; lea rdi, [rip+0xb3ea2]; syscall;
0x0010f442: mov eax, 0xca; lea rdi, [rip+0xb3ea2]; syscall;
0x0010f444: add [rax], al; add [rax-0x73], cl; cmp eax, 0xb3c9a; syscall;
0x0010f445: add [rax], al; lea rdi, [rip+0xb3ea2]; syscall;
0x0010f446: add [rax-0x73], cl; cmp eax, 0xb3c9a; syscall;
0x0010f447: lea rdi, [rip+0xb3ea2]; syscall;
0x0010f448: lea edi, [rip+0xb3ea2]; syscall;
0x0010f449: cmp eax, 0xb3c9a; syscall;
0x0010f44b: cmp al, 0xb; add [rdi], cl; add eax, 0xffff76e9; jmp qword ptr [rsi+0x2e];
0x0010f630: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb3ae6]; syscall;
0x0010f631: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb3ae6]; syscall;
0x0010f632: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb3ae6]; syscall;
0x0010f633: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb3ae6]; syscall;
0x0010f634: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb3ae6]; syscall;
0x0010f635: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb3ae6]; syscall;
0x0010f636: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xb3ae6]; syscall;
0x0010f637: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb3ae6]; syscall;
0x0010f638: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xb3ae6]; syscall;
0x0010f639: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb3ae6]; syscall;
0x0010f63a: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xb3ae6; syscall;
0x0010f63b: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xb3ae6]; syscall;
0x0010f63c: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xb3ae6]; syscall;
0x0010f63d: add [rax+0xca], bh; lea rdi, [rip+0xb3ae6]; syscall;
0x0010f63e: mov eax, 0xca; lea rdi, [rip+0xb3ae6]; syscall;
0x0010f640: add [rax], al; add [rax-0x73], cl; cmp eax, 0xb3ae6; syscall;
0x0010f641: add [rax], al; lea rdi, [rip+0xb3ae6]; syscall;
0x0010f642: add [rax-0x73], cl; cmp eax, 0xb3ae6; syscall;
0x0010f643: lea rdi, [rip+0xb3ae6]; syscall;
0x0010f644: lea edi, [rip+0xb3ae6]; syscall;
0x0010f645: cmp eax, 0xb3ae6; syscall;
0x0010f646: out 0x3a, al; or eax, [rax]; syscall;
0x0010f7aa: push qword ptr [rsp+0x18]; mov r9, r15; mov edi, [rsp+0x38]; mov r8, rbx; mov rdx, rbp; call qword ptr [rsp+0x60];
0x0010f7ac: and al, 0x18; mov r9, r15; mov edi, [rsp+0x38]; mov r8, rbx; mov rdx, rbp; call qword ptr [rsp+0x60];
0x0010f7ad: sbb [rbp-0x77], cl; stc; mov edi, [rsp+0x38]; mov r8, rbx; mov rdx, rbp; call qword ptr [rsp+0x60];
0x0010f7ae: mov r9, r15; mov edi, [rsp+0x38]; mov r8, rbx; mov rdx, rbp; call qword ptr [rsp+0x60];
0x0010f7af: mov ecx, edi; mov edi, [rsp+0x38]; mov r8, rbx; mov rdx, rbp; call qword ptr [rsp+0x60];
0x0010f7b0: stc; mov edi, [rsp+0x38]; mov r8, rbx; mov rdx, rbp; call qword ptr [rsp+0x60];
0x0010f7b1: mov edi, [rsp+0x38]; mov r8, rbx; mov rdx, rbp; call qword ptr [rsp+0x60];
0x0010f7b3: and al, 0x38; mov r8, rbx; mov rdx, rbp; call qword ptr [rsp+0x60];
0x0010f7b5: mov r8, rbx; mov rdx, rbp; call qword ptr [rsp+0x60];
0x0010f7b6: mov eax, ebx; mov rdx, rbp; call qword ptr [rsp+0x60];
0x0010f7b8: mov rdx, rbp; call qword ptr [rsp+0x60];
0x0010f7b9: mov edx, ebp; call qword ptr [rsp+0x60];
0x0010f7bb: call qword ptr [rsp+0x60];
0x0010fb61: push rsp; int1; dec dword ptr [rax-0x77]; ret 0x8548;
0x0010fc47: ret 0x1f0f;
0x0010fc90: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb34c6]; syscall;
0x0010fc91: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb34c6]; syscall;
0x0010fc92: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb34c6]; syscall;
0x0010fc93: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb34c6]; syscall;
0x0010fc94: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb34c6]; syscall;
0x0010fc95: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb34c6]; syscall;
0x0010fc96: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xb34c6]; syscall;
0x0010fc97: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb34c6]; syscall;
0x0010fc98: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xb34c6]; syscall;
0x0010fc99: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb34c6]; syscall;
0x0010fc9a: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xb34c6; syscall;
0x0010fc9b: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xb34c6]; syscall;
0x0010fc9c: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xb34c6]; syscall;
0x0010fc9d: add [rax+0xca], bh; lea rdi, [rip+0xb34c6]; syscall;
0x0010fc9e: mov eax, 0xca; lea rdi, [rip+0xb34c6]; syscall;
0x0010fca0: add [rax], al; add [rax-0x73], cl; cmp eax, 0xb34c6; syscall;
0x0010fca1: add [rax], al; lea rdi, [rip+0xb34c6]; syscall;
0x0010fca2: add [rax-0x73], cl; cmp eax, 0xb34c6; syscall;
0x0010fca3: lea rdi, [rip+0xb34c6]; syscall;
0x0010fca4: lea edi, [rip+0xb34c6]; syscall;
0x0010fca5: cmp eax, 0xb34c6; syscall;
0x0010fcb3: fcos; jmp qword ptr [rsi+0x2e];
0x0010fccf: add [rax], al; add [rdi], cl; mov cl, 0x15; iretd;
0x0010fcd1: add [rdi], cl; mov cl, 0x15; iretd;
0x0010fcd3: mov cl, 0x15; iretd;
0x0010fd24: add [rbp-0x7cc08a40], al; sub eax, 0xb3478; add [rcx+rax*2-0x77], esp; sbb [rcx+rcx*4-0x40], ecx; pop rbx; ret;
0x0010fd26: shl byte ptr [rbp+0x3f], 0x83; sub eax, 0xb3478; add [rcx+rax*2-0x77], esp; sbb [rcx+rcx*4-0x40], ecx; pop rbx; ret;
0x0010fd29: sub dword ptr [rip+0xb3478], 1; mov fs:[r9], ebx; mov rax, r8; pop rbx; ret;
0x0010fd2a: sub eax, 0xb3478; add [rcx+rax*2-0x77], esp; sbb [rcx+rcx*4-0x40], ecx; pop rbx; ret;
0x0010fd2c: xor al, 0xb; add [rcx], al; mov fs:[r9], ebx; mov rax, r8; pop rbx; ret;
0x0010fd75: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb341a]; syscall;
0x0010fd76: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb341a]; syscall;
0x0010fd77: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb341a]; syscall;
0x0010fd78: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb341a]; syscall;
0x0010fd79: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb341a]; syscall;
0x0010fd7a: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xb341a]; syscall;
0x0010fd7b: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb341a]; syscall;
0x0010fd7c: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xb341a]; syscall;
0x0010fd7d: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb341a]; syscall;
0x0010fd7e: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xb341a; syscall;
0x0010fd7f: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xb341a]; syscall;
0x0010fd80: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xb341a]; syscall;
0x0010fd81: add [rax+0xca], bh; lea rdi, [rip+0xb341a]; syscall;
0x0010fd82: mov eax, 0xca; lea rdi, [rip+0xb341a]; syscall;
0x0010fd84: add [rax], al; add [rax-0x73], cl; cmp eax, 0xb341a; syscall;
0x0010fd85: add [rax], al; lea rdi, [rip+0xb341a]; syscall;
0x0010fd86: add [rax-0x73], cl; cmp eax, 0xb341a; syscall;
0x0010fd87: lea rdi, [rip+0xb341a]; syscall;
0x0010fd88: lea edi, [rip+0xb341a]; syscall;
0x0010fd89: cmp eax, 0xb341a; syscall;
0x0010fe0a: sub dword ptr [rip+0xb339f], 1; mov fs:[r8], r9d; add rsp, 0x18; ret;
0x0010fe0c: lahf; xor ecx, [rbx]; add [rcx], al; mov fs:[r8], r9d; add rsp, 0x18; ret;
0x0010fe0d: xor ecx, [rbx]; add [rcx], al; mov fs:[r8], r9d; add rsp, 0x18; ret;
0x0010fe66: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xb333a; syscall;
0x0010fe6c: add [rax], al; add [rax-0x73], cl; cmp eax, 0xb333a; syscall;
0x0010fe6e: add [rax-0x73], cl; cmp eax, 0xb333a; syscall;
0x0010fe71: cmp eax, 0xb333a; syscall;
0x0010fe72: cmp dh, [rbx]; or eax, [rax]; syscall;
0x0010feee: sbb [rbx+0xb32ba2d], eax; add [rcx], al; mov fs:[r8], r9d; add rsp, 8; ret;
0x0010feef: sub dword ptr [rip+0xb32ba], 1; mov fs:[r8], r9d; add rsp, 8; ret;
0x0010fef1: mov edx, 0x1000b32; mov fs:[r8], r9d; add rsp, 8; ret;
0x0010fef2: xor cl, [rbx]; add [rcx], al; mov fs:[r8], r9d; add rsp, 8; ret;
0x0010fefd: or bl, al; nop; ret;
0x0010ff1e: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xb3282; syscall;
0x0010ff24: add [rax], al; add [rax-0x73], cl; cmp eax, 0xb3282; syscall;
0x0010ff26: add [rax-0x73], cl; cmp eax, 0xb3282; syscall;
0x0010ff29: cmp eax, 0xb3282; syscall;
0x0010fff3: sub dword ptr fs:[rip+0xb31b5], 1; mov fs:[r9], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret;
0x0010fff4: sub dword ptr [rip+0xb31b5], 1; mov fs:[r9], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret;
0x00110065: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb333a]; syscall;
0x00110066: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb333a]; syscall;
0x00110067: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb333a]; syscall;
0x00110068: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb333a]; syscall;
0x00110069: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb333a]; syscall;
0x0011006a: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xb333a]; syscall;
0x0011006b: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb333a]; syscall;
0x0011006c: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xb333a]; syscall;
0x0011006d: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb333a]; syscall;
0x0011006e: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xb3132; syscall;
0x0011006f: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xb333a]; syscall;
0x00110070: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xb333a]; syscall;
0x00110071: add [rax+0xca], bh; lea rdi, [rip+0xb333a]; syscall;
0x00110072: mov eax, 0xca; lea rdi, [rip+0xb333a]; syscall;
0x00110074: add [rax], al; add [rax-0x73], cl; cmp eax, 0xb3132; syscall;
0x00110075: add [rax], al; lea rdi, [rip+0xb333a]; syscall;
0x00110076: add [rax-0x73], cl; cmp eax, 0xb3132; syscall;
0x00110077: lea rdi, [rip+0xb333a]; syscall;
0x00110078: lea edi, [rip+0xb333a]; syscall;
0x00110079: cmp eax, 0xb3132; syscall;
0x0011007a: xor dh, [rcx]; or eax, [rax]; syscall;
0x0011007b: xor [rbx], ecx; add [rdi], cl; add eax, 0xffff76e9; jmp qword ptr [rsi+0x2e];
0x0011007d: add [rdi], cl; add eax, 0xffff76e9; jmp qword ptr [rsi+0x2e];
0x0011007f: add eax, 0xffff76e9; jmp qword ptr [rsi+0x2e];
0x001101c4: mov r9, rbx; mov r8, r15; mov rcx, rbp; mov rdx, r14; mov rsi, r12; call qword ptr [rsp+0x40];
0x001101c5: mov ecx, ebx; mov r8, r15; mov rcx, rbp; mov rdx, r14; mov rsi, r12; call qword ptr [rsp+0x40];
0x001101c7: mov r8, r15; mov rcx, rbp; mov rdx, r14; mov rsi, r12; call qword ptr [rsp+0x40];
0x001101c8: mov eax, edi; mov rcx, rbp; mov rdx, r14; mov rsi, r12; call qword ptr [rsp+0x40];
0x001101c9: clc; mov rcx, rbp; mov rdx, r14; mov rsi, r12; call qword ptr [rsp+0x40];
0x001101ca: mov rcx, rbp; mov rdx, r14; mov rsi, r12; call qword ptr [rsp+0x40];
0x001101cb: mov ecx, ebp; mov rdx, r14; mov rsi, r12; call qword ptr [rsp+0x40];
0x001101cd: mov rdx, r14; mov rsi, r12; call qword ptr [rsp+0x40];
0x001101ce: mov edx, esi; mov rsi, r12; call qword ptr [rsp+0x40];
0x001101d0: mov rsi, r12; call qword ptr [rsp+0x40];
0x001101d1: mov esi, esp; call qword ptr [rsp+0x40];
0x001104d0: sar rdi, 1; jmp qword ptr [rsi+0x2e];
0x001104d1: sar edi, 1; jmp qword ptr [rsi+0x2e];
0x00110554: test dword ptr [rcx+rcx*4-0x1a], 0xa925894c; sub al, 0xb; add al, ch; fmul st, qword ptr [rdx-0xf]; dec dword ptr [rax-0x77]; ret 0x8548;
0x0011055b: test eax, 0xe8000b2c; fmul st, qword ptr [rdx-0xf]; dec dword ptr [rax-0x77]; ret 0x8548;
0x0011055c: sub al, 0xb; add al, ch; fmul st, qword ptr [rdx-0xf]; dec dword ptr [rax-0x77]; ret 0x8548;
0x0011055e: add al, ch; fmul st, qword ptr [rdx-0xf]; dec dword ptr [rax-0x77]; ret 0x8548;
0x00110560: fmul st, qword ptr [rdx-0xf]; dec dword ptr [rax-0x77]; ret 0x8548;
0x00110670: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb2b86]; syscall;
0x00110671: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb2b86]; syscall;
0x00110672: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb2b86]; syscall;
0x00110673: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb2b86]; syscall;
0x00110674: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb2b86]; syscall;
0x00110675: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb2b86]; syscall;
0x00110676: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xb2b86]; syscall;
0x00110677: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb2b86]; syscall;
0x00110678: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xb2b86]; syscall;
0x00110679: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb2b86]; syscall;
0x0011067a: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xb2b86; syscall;
0x0011067b: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xb2b86]; syscall;
0x0011067c: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xb2b86]; syscall;
0x0011067d: add [rax+0xca], bh; lea rdi, [rip+0xb2b86]; syscall;
0x0011067e: mov eax, 0xca; lea rdi, [rip+0xb2b86]; syscall;
0x00110680: add [rax], al; add [rax-0x73], cl; cmp eax, 0xb2b86; syscall;
0x00110681: add [rax], al; lea rdi, [rip+0xb2b86]; syscall;
0x00110682: add [rax-0x73], cl; cmp eax, 0xb2b86; syscall;
0x00110683: lea rdi, [rip+0xb2b86]; syscall;
0x00110684: lea edi, [rip+0xb2b86]; syscall;
0x00110685: cmp eax, 0xb2b86; syscall;
0x00110686: xchg [rbx], ch; or eax, [rax]; syscall;
0x00110917: scasb [rdi]; ret;
0x00110a47: add [rbp-0x7ccb8a40], al; sub eax, 0xb2805; add [rcx+rax*2-0x77], esp; sbb [rcx+rcx*4-0x40], ecx; pop rbx; ret;
0x00110a49: shl byte ptr [rbp+0x34], 0x83; sub eax, 0xb2805; add [rcx+rax*2-0x77], esp; sbb [rcx+rcx*4-0x40], ecx; pop rbx; ret;
0x00110a4b: xor al, 0x83; sub eax, 0xb2805; add [rcx+rax*2-0x77], esp; sbb [rcx+rcx*4-0x40], ecx; pop rbx; ret;
0x00110a4c: sub dword ptr [rip+0xb2805], 1; mov fs:[r9], ebx; mov rax, r8; pop rbx; ret;
0x00110a4d: sub eax, 0xb2805; add [rcx+rax*2-0x77], esp; sbb [rcx+rcx*4-0x40], ecx; pop rbx; ret;
0x00110a4e: add eax, 0x1000b28; mov fs:[r9], ebx; mov rax, r8; pop rbx; ret;
0x00110a4f: sub [rbx], cl; add [rcx], al; mov fs:[r9], ebx; mov rax, r8; pop rbx; ret;
0x00110a8c: mov byte ptr [rbp+0x31], 0xd2; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb27b2]; syscall;
0x00110a8d: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb27b2]; syscall;
0x00110a8e: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb27b2]; syscall;
0x00110a8f: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb27b2]; syscall;
0x00110a90: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb27b2]; syscall;
0x00110a91: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb27b2]; syscall;
0x00110a92: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xb27b2]; syscall;
0x00110a93: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb27b2]; syscall;
0x00110a94: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xb27b2]; syscall;
0x00110a95: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb27b2]; syscall;
0x00110a96: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xb27b2; syscall;
0x00110a97: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xb27b2]; syscall;
0x00110a98: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xb27b2]; syscall;
0x00110a99: add [rax+0xca], bh; lea rdi, [rip+0xb27b2]; syscall;
0x00110a9a: mov eax, 0xca; lea rdi, [rip+0xb27b2]; syscall;
0x00110a9c: add [rax], al; add [rax-0x73], cl; cmp eax, 0xb27b2; syscall;
0x00110a9d: add [rax], al; lea rdi, [rip+0xb27b2]; syscall;
0x00110a9e: add [rax-0x73], cl; cmp eax, 0xb27b2; syscall;
0x00110a9f: lea rdi, [rip+0xb27b2]; syscall;
0x00110aa0: lea edi, [rip+0xb27b2]; syscall;
0x00110aa1: cmp eax, 0xb27b2; syscall;
0x00110aa2: mov dl, 0x27; or eax, [rax]; syscall;
0x00110b1a: sub dword ptr [rip+0xb273f], 1; mov fs:[r8], r9d; add rsp, 0x18; ret;
0x00110b76: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xb26da; syscall;
0x00110b7c: add [rax], al; add [rax-0x73], cl; cmp eax, 0xb26da; syscall;
0x00110b7e: add [rax-0x73], cl; cmp eax, 0xb26da; syscall;
0x00110b81: cmp eax, 0xb26da; syscall;
0x00110b82: fisub st, dword ptr [rsi]; or eax, [rax]; syscall;
0x00110bfc: sub dword ptr [rip+0xb265d], 1; mov fs:[r8], r9d; add rsp, 8; ret;
0x00110c24: fiadd st, word ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb2622]; syscall;
0x00110c2e: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xb2622; syscall;
0x00110c34: add [rax], al; add [rax-0x73], cl; cmp eax, 0xb2622; syscall;
0x00110c36: add [rax-0x73], cl; cmp eax, 0xb2622; syscall;
0x00110c39: cmp eax, 0xb2622; syscall;
0x00110c3a: and ah, [rsi]; or eax, [rax]; syscall;
0x00110c3b: or eax, [rax]; syscall;
0x00110cf5: sub dword ptr [rip+0xb2564], 1; mov fs:[r9], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret;
0x00110cf7: and eax, 0x6401000b; mov [r9], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret;
0x00110cf8: and eax, 0x6401000b; mov [r9], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret;
0x00110d65: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb26da]; syscall;
0x00110d66: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb26da]; syscall;
0x00110d67: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb26da]; syscall;
0x00110d68: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb26da]; syscall;
0x00110d69: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb26da]; syscall;
0x00110d6a: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xb26da]; syscall;
0x00110d6b: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb26da]; syscall;
0x00110d6c: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xb26da]; syscall;
0x00110d6d: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb26da]; syscall;
0x00110d6e: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xb24e2; syscall;
0x00110d6f: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xb26da]; syscall;
0x00110d70: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xb26da]; syscall;
0x00110d71: add [rax+0xca], bh; lea rdi, [rip+0xb26da]; syscall;
0x00110d72: mov eax, 0xca; lea rdi, [rip+0xb26da]; syscall;
0x00110d74: add [rax], al; add [rax-0x73], cl; cmp eax, 0xb24e2; syscall;
0x00110d75: add [rax], al; lea rdi, [rip+0xb26da]; syscall;
0x00110d76: add [rax-0x73], cl; cmp eax, 0xb24e2; syscall;
0x00110d77: lea rdi, [rip+0xb26da]; syscall;
0x00110d78: lea edi, [rip+0xb26da]; syscall;
0x00110d79: cmp eax, 0xb24e2; syscall;
0x00110d7b: and al, 0xb; add [rdi], cl; add eax, 0xffff77e9; jmp qword ptr [rsi+0x2e];
0x00110e0b: mov [rbx+rcx], esp; add al, ch; sub al, 0x42; int1; dec dword ptr [rax-0x77]; ret 0x8548;
0x00110e0c: and al, 0xb; add al, ch; sub al, 0x42; int1; dec dword ptr [rax-0x77]; ret 0x8548;
0x00110e0e: add al, ch; sub al, 0x42; int1; dec dword ptr [rax-0x77]; ret 0x8548;
0x00110e10: sub al, 0x42; int1; dec dword ptr [rax-0x77]; ret 0x8548;
0x00110e12: int1; dec dword ptr [rax-0x77]; ret 0x8548;
0x00110ece: scasb [rdi]; xor eax, 0x8948000b; ret 0x8548;
0x00110ecf: xor eax, 0x8948000b; ret 0x8548;
0x00110f20: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb2366]; syscall;
0x00110f21: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb2366]; syscall;
0x00110f22: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb2366]; syscall;
0x00110f23: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb2366]; syscall;
0x00110f24: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb2366]; syscall;
0x00110f25: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb2366]; syscall;
0x00110f26: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xb2366]; syscall;
0x00110f27: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb2366]; syscall;
0x00110f28: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xb2366]; syscall;
0x00110f29: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb2366]; syscall;
0x00110f2a: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xb2366; syscall;
0x00110f2b: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xb2366]; syscall;
0x00110f2c: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xb2366]; syscall;
0x00110f2d: add [rax+0xca], bh; lea rdi, [rip+0xb2366]; syscall;
0x00110f2e: mov eax, 0xca; lea rdi, [rip+0xb2366]; syscall;
0x00110f30: add [rax], al; add [rax-0x73], cl; cmp eax, 0xb2366; syscall;
0x00110f31: add [rax], al; lea rdi, [rip+0xb2366]; syscall;
0x00110f32: add [rax-0x73], cl; cmp eax, 0xb2366; syscall;
0x00110f33: lea rdi, [rip+0xb2366]; syscall;
0x00110f34: lea edi, [rip+0xb2366]; syscall;
0x00110f35: cmp eax, 0xb2366; syscall;
0x00111367: ror byte ptr [rdi], 0x85; ret 0;
0x00111440: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb1e8e]; syscall;
0x00111441: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb1e8e]; syscall;
0x00111442: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb1e8e]; syscall;
0x00111443: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb1e8e]; syscall;
0x00111444: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb1e8e]; syscall;
0x00111445: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb1e8e]; syscall;
0x00111446: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xb1e8e]; syscall;
0x00111447: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb1e8e]; syscall;
0x00111448: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xb1e8e]; syscall;
0x00111449: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb1e8e]; syscall;
0x0011144a: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xb1e8e; syscall;
0x0011144b: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xb1e8e]; syscall;
0x0011144c: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xb1e8e]; syscall;
0x0011144d: add [rax+0xca], bh; lea rdi, [rip+0xb1e8e]; syscall;
0x0011144e: mov eax, 0xca; lea rdi, [rip+0xb1e8e]; syscall;
0x00111450: add [rax], al; add [rax-0x73], cl; cmp eax, 0xb1e8e; syscall;
0x00111451: add [rax], al; lea rdi, [rip+0xb1e8e]; syscall;
0x00111452: add [rax-0x73], cl; cmp eax, 0xb1e8e; syscall;
0x00111453: lea rdi, [rip+0xb1e8e]; syscall;
0x00111454: lea edi, [rip+0xb1e8e]; syscall;
0x00111455: cmp eax, 0xb1e8e; syscall;
0x00111456: mov ds, [rsi]; or eax, [rax]; syscall;
0x001115b5: mov r9, r15; mov rcx, r14; mov rdx, rbp; mov rsi, r13; mov rdi, r12; call qword ptr [rsp+0x40];
0x001115b6: mov ecx, edi; mov rcx, r14; mov rdx, rbp; mov rsi, r13; mov rdi, r12; call qword ptr [rsp+0x40];
0x001115b7: stc; mov rcx, r14; mov rdx, rbp; mov rsi, r13; mov rdi, r12; call qword ptr [rsp+0x40];
0x001115b8: mov rcx, r14; mov rdx, rbp; mov rsi, r13; mov rdi, r12; call qword ptr [rsp+0x40];
0x001115b9: mov ecx, esi; mov rdx, rbp; mov rsi, r13; mov rdi, r12; call qword ptr [rsp+0x40];
0x001115ba: int1; mov rdx, rbp; mov rsi, r13; mov rdi, r12; call qword ptr [rsp+0x40];
0x001115bb: mov rdx, rbp; mov rsi, r13; mov rdi, r12; call qword ptr [rsp+0x40];
0x001115bc: mov edx, ebp; mov rsi, r13; mov rdi, r12; call qword ptr [rsp+0x40];
0x001115be: mov rsi, r13; mov rdi, r12; call qword ptr [rsp+0x40];
0x001115bf: mov esi, ebp; mov rdi, r12; call qword ptr [rsp+0x40];
0x001115c0: out dx, al; mov rdi, r12; call qword ptr [rsp+0x40];
0x001115c1: mov rdi, r12; call qword ptr [rsp+0x40];
0x00111a30: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb18fe]; syscall;
0x00111a31: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb18fe]; syscall;
0x00111a32: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb18fe]; syscall;
0x00111a33: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb18fe]; syscall;
0x00111a34: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb18fe]; syscall;
0x00111a35: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb18fe]; syscall;
0x00111a36: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xb18fe]; syscall;
0x00111a37: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb18fe]; syscall;
0x00111a38: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xb18fe]; syscall;
0x00111a39: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb18fe]; syscall;
0x00111a3a: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xb18fe; syscall;
0x00111a3b: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xb18fe]; syscall;
0x00111a3c: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xb18fe]; syscall;
0x00111a3d: add [rax+0xca], bh; lea rdi, [rip+0xb18fe]; syscall;
0x00111a3e: mov eax, 0xca; lea rdi, [rip+0xb18fe]; syscall;
0x00111a40: add [rax], al; add [rax-0x73], cl; cmp eax, 0xb18fe; syscall;
0x00111a41: add [rax], al; lea rdi, [rip+0xb18fe]; syscall;
0x00111a42: add [rax-0x73], cl; cmp eax, 0xb18fe; syscall;
0x00111a43: lea rdi, [rip+0xb18fe]; syscall;
0x00111a44: lea edi, [rip+0xb18fe]; syscall;
0x00111a45: cmp eax, 0xb18fe; syscall;
0x00111ba5: mov r9, r15; mov rcx, r14; mov rdx, rbp; mov rsi, r13; mov edi, r12d; call qword ptr [rsp+0x40];
0x00111ba6: mov ecx, edi; mov rcx, r14; mov rdx, rbp; mov rsi, r13; mov edi, r12d; call qword ptr [rsp+0x40];
0x00111ba7: stc; mov rcx, r14; mov rdx, rbp; mov rsi, r13; mov edi, r12d; call qword ptr [rsp+0x40];
0x00111ba8: mov rcx, r14; mov rdx, rbp; mov rsi, r13; mov edi, r12d; call qword ptr [rsp+0x40];
0x00111ba9: mov ecx, esi; mov rdx, rbp; mov rsi, r13; mov edi, r12d; call qword ptr [rsp+0x40];
0x00111baa: int1; mov rdx, rbp; mov rsi, r13; mov edi, r12d; call qword ptr [rsp+0x40];
0x00111bab: mov rdx, rbp; mov rsi, r13; mov edi, r12d; call qword ptr [rsp+0x40];
0x00111bac: mov edx, ebp; mov rsi, r13; mov edi, r12d; call qword ptr [rsp+0x40];
0x00111bae: mov rsi, r13; mov edi, r12d; call qword ptr [rsp+0x40];
0x00111baf: mov esi, ebp; mov edi, r12d; call qword ptr [rsp+0x40];
0x00111bb0: out dx, al; mov edi, r12d; call qword ptr [rsp+0x40];
0x00111bb1: mov edi, r12d; call qword ptr [rsp+0x40];
0x00111bb2: mov edi, esp; call qword ptr [rsp+0x40];
0x00111bb4: call qword ptr [rsp+0x40];
0x00111c9e: call qword ptr [rax+0x247c8348];
0x00111d2e: call qword ptr [rax-0x172076b8];
0x00111e6e: scasb [rdi]; mov bh, 0xff; jmp qword ptr [rsi+0x2e];
0x00111e6f: mov bh, 0xff; jmp qword ptr [rsi+0x2e];
0x00111ed7: add [rbp-0x7ccb8a40], al; sub eax, 0xb14dd; add [rcx+rax*2-0x77], esp; sbb [rcx+rcx*4-0x40], ecx; pop rbx; ret;
0x00111ed9: shl byte ptr [rbp+0x34], 0x83; sub eax, 0xb14dd; add [rcx+rax*2-0x77], esp; sbb [rcx+rcx*4-0x40], ecx; pop rbx; ret;
0x00111edb: xor al, 0x83; sub eax, 0xb14dd; add [rcx+rax*2-0x77], esp; sbb [rcx+rcx*4-0x40], ecx; pop rbx; ret;
0x00111edc: sub dword ptr [rip+0xb14dd], 1; mov fs:[r9], ebx; mov rax, r8; pop rbx; ret;
0x00111edd: sub eax, 0xb14dd; add [rcx+rax*2-0x77], esp; sbb [rcx+rcx*4-0x40], ecx; pop rbx; ret;
0x00111ede: fst qword ptr [rbx+rcx], st; add [rcx], al; mov fs:[r9], ebx; mov rax, r8; pop rbx; ret;
0x00111edf: adc al, 0xb; add [rcx], al; mov fs:[r9], ebx; mov rax, r8; pop rbx; ret;
0x00111ee0: or eax, [rax]; add [rcx+rax*2-0x77], esp; sbb [rcx+rcx*4-0x40], ecx; pop rbx; ret;
0x00111f1c: mov byte ptr [rbp+0x31], 0xd2; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb148a]; syscall;
0x00111f1d: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb148a]; syscall;
0x00111f1e: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb148a]; syscall;
0x00111f1f: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb148a]; syscall;
0x00111f20: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb148a]; syscall;
0x00111f21: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb148a]; syscall;
0x00111f22: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xb148a]; syscall;
0x00111f23: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb148a]; syscall;
0x00111f24: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xb148a]; syscall;
0x00111f25: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb148a]; syscall;
0x00111f26: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xb148a; syscall;
0x00111f27: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xb148a]; syscall;
0x00111f28: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xb148a]; syscall;
0x00111f29: add [rax+0xca], bh; lea rdi, [rip+0xb148a]; syscall;
0x00111f2a: mov eax, 0xca; lea rdi, [rip+0xb148a]; syscall;
0x00111f2c: add [rax], al; add [rax-0x73], cl; cmp eax, 0xb148a; syscall;
0x00111f2d: add [rax], al; lea rdi, [rip+0xb148a]; syscall;
0x00111f2e: add [rax-0x73], cl; cmp eax, 0xb148a; syscall;
0x00111f2f: lea rdi, [rip+0xb148a]; syscall;
0x00111f30: lea edi, [rip+0xb148a]; syscall;
0x00111f31: cmp eax, 0xb148a; syscall;
0x00111faa: sub dword ptr [rip+0xb1417], 1; mov fs:[r8], r9d; add rsp, 0x18; ret;
0x00111fad: adc al, 0xb; add [rcx], al; mov fs:[r8], r9d; add rsp, 0x18; ret;
0x00112006: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xb13b2; syscall;
0x0011200c: add [rax], al; add [rax-0x73], cl; cmp eax, 0xb13b2; syscall;
0x0011200e: add [rax-0x73], cl; cmp eax, 0xb13b2; syscall;
0x00112011: cmp eax, 0xb13b2; syscall;
0x00112012: mov dl, 0x13; or eax, [rax]; syscall;
0x0011208c: sub dword ptr [rip+0xb1335], 1; mov fs:[r8], r9d; add rsp, 8; ret;
0x0011208e: xor eax, 0x1000b13; mov fs:[r8], r9d; add rsp, 8; ret;
0x0011208f: adc ecx, [rbx]; add [rcx], al; mov fs:[r8], r9d; add rsp, 8; ret;
0x001120b4: fiadd st, word ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb12fa]; syscall;
0x001120be: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xb12fa; syscall;
0x001120c4: add [rax], al; add [rax-0x73], cl; cmp eax, 0xb12fa; syscall;
0x001120c6: add [rax-0x73], cl; cmp eax, 0xb12fa; syscall;
0x001120c9: cmp eax, 0xb12fa; syscall;
0x00112185: sub dword ptr [rip+0xb123c], 1; mov fs:[r9], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret;
0x001121f5: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb13b2]; syscall;
0x001121f6: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb13b2]; syscall;
0x001121f7: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb13b2]; syscall;
0x001121f8: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb13b2]; syscall;
0x001121f9: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb13b2]; syscall;
0x001121fa: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xb13b2]; syscall;
0x001121fb: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb13b2]; syscall;
0x001121fc: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xb13b2]; syscall;
0x001121fd: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xb13b2]; syscall;
0x001121fe: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xb11ba; syscall;
0x001121ff: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xb13b2]; syscall;
0x00112200: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xb13b2]; syscall;
0x00112201: add [rax+0xca], bh; lea rdi, [rip+0xb13b2]; syscall;
0x00112202: mov eax, 0xca; lea rdi, [rip+0xb13b2]; syscall;
0x00112204: add [rax], al; add [rax-0x73], cl; cmp eax, 0xb11ba; syscall;
0x00112205: add [rax], al; lea rdi, [rip+0xb13b2]; syscall;
0x00112206: add [rax-0x73], cl; cmp eax, 0xb11ba; syscall;
0x00112207: lea rdi, [rip+0xb13b2]; syscall;
0x00112208: lea edi, [rip+0xb13b2]; syscall;
0x00112209: cmp eax, 0xb11ba; syscall;
0x0011220a: mov edx, 0xf000b11; add eax, 0xffff77e9; jmp qword ptr [rsi+0x2e];
0x0011220b: adc [rbx], ecx; add [rdi], cl; add eax, 0xffff77e9; jmp qword ptr [rsi+0x2e];
0x0011220c: or eax, [rax]; syscall;
0x00112269: push rax; rol byte ptr [rbx-0x57ca818], 1; or [rdi], ecx; ret 0xf48;
0x0011226a: rol byte ptr [rbx-0x57ca818], 1; or [rdi], ecx; ret 0xf48;
0x0011226f: cli; or [rdi], ecx; ret 0xf48;
0x00112270: or [rdi], ecx; ret 0xf48;
0x0011227f: xchg esi, eax; ret 0x8b41;
0x00112280: ret 0x8b41;
0x001122fa: xor eax, eax; pop rbx; ret;
0x0011231a: mov [rsi+5], al; mov rax, rsi; pop rbx; ret;
0x0011231c: add eax, 0x5bf08948; ret;
0x0011231d: mov rax, rsi; pop rbx; ret;
0x0011231e: mov eax, esi; pop rbx; ret;
0x00112327: add [rax-0x73], cl; pop rdi; add ebx, ebp; fwait; xor eax, eax; ret;
0x0011232a: pop rdi; add ebx, ebp; fwait; xor eax, eax; ret;
0x0011232b: add ebx, ebp; fwait; xor eax, eax; ret;
0x0011232d: fwait; xor eax, eax; ret;
0x001124a1: mov cl, 0xff; jmp qword ptr [rsi+0x2e];
0x00112586: add [rax], al; add [rax-0x7d], cl; ret 0x4801;
0x001125f3: fcomp st, qword ptr [rbx+0x31]; rcr byte ptr [rbp-0x3a], 1; add [rcx+0x5c], al; pop r13; ret;
0x001125f5: xor eax, eax; pop rbp; mov byte ptr [rcx], 0; pop r12; pop r13; ret;
0x001125f6: rcr byte ptr [rbp-0x3a], 1; add [rcx+0x5c], al; pop r13; ret;
0x001125f7: pop rbp; mov byte ptr [rcx], 0; pop r12; pop r13; ret;
0x001125f8: mov byte ptr [rcx], 0; pop r12; pop r13; ret;
0x001125f9: add [rax], eax; pop r12; pop r13; ret;
0x001125fa: add [rcx+0x5c], al; pop r13; ret;
0x00112638: pop rbx; mov eax, 0xffffffff; pop rbp; pop r12; pop r13; ret;
0x0011268b: out 0xe8, eax; fild st, word ptr [rdi-0xc]; call far fword ptr [rax+0x4c];
0x0011268d: fild st, word ptr [rdi-0xc]; call far fword ptr [rax+0x4c];
0x0011268f: hlt; call far fword ptr [rax+0x4c];
0x00112690: call far fword ptr [rax+0x4c];
0x00112691: pop rax; mov rax, r12; pop rdx; pop r12; ret;
0x00112692: mov rax, r12; pop rdx; pop r12; ret;
0x00112693: mov eax, esp; pop rdx; pop r12; ret;
0x00112695: pop rdx; pop r12; ret;
0x00112725: mov r8, rbp; mov ecx, 0x400; mov rdx, r15; mov rsi, r14; mov rdi, rbx; call rax;
0x00112726: mov eax, ebp; mov ecx, 0x400; mov rdx, r15; mov rsi, r14; mov rdi, rbx; call rax;
0x00112728: mov ecx, 0x400; mov rdx, r15; mov rsi, r14; mov rdi, rbx; call rax;
0x00112729: add [rax+rax], al; add [rcx+rcx*4-6], cl; mov rsi, r14; mov rdi, rbx; call rax;
0x0011272a: add al, 0; add [rcx+rcx*4-6], cl; mov rsi, r14; mov rdi, rbx; call rax;
0x0011272b: add [rax], al; mov rdx, r15; mov rsi, r14; mov rdi, rbx; call rax;
0x0011272c: add [rcx+rcx*4-6], cl; mov rsi, r14; mov rdi, rbx; call rax;
0x0011272d: mov rdx, r15; mov rsi, r14; mov rdi, rbx; call rax;
0x0011272e: mov edx, edi; mov rsi, r14; mov rdi, rbx; call rax;
0x0011272f: cli; mov rsi, r14; mov rdi, rbx; call rax;
0x00112730: mov rsi, r14; mov rdi, rbx; call rax;
0x00112731: mov esi, esi; mov rdi, rbx; call rax;
0x00112732: test byte ptr [rax-0x77], 0xdf; call rax;
0x0011289b: add [rcx+rcx*4-0x20], cl; pop rbx; pop rbp; pop r12; pop r13; ret;
0x00112943: cmp al, 0xf1; jmp qword ptr [rsi+0x2e];
0x00112adb: add [rax], al; add [rax], al; add [rdi], cl; mov dh, 0x42; add [rax-0x7d], ecx; ret 0x8401;
0x00112add: add [rax], al; add [rdi], cl; mov dh, 0x42; add [rax-0x7d], ecx; ret 0x8401;
0x00112adf: add [rdi], cl; mov dh, 0x42; add [rax-0x7d], ecx; ret 0x8401;
0x00112c83: add [rax], al; add [rcx], bh; ret;
0x00112c85: add [rcx], bh; ret;
0x00112e43: jmp qword ptr [rcx+rcx*2-0x75];
0x00112e7b: add [rax], al; add [rax], al; add [rax+0xf], cl; mov esi, 0x83480142; ret 0x8401;
0x00112e7d: add [rax], al; add [rax+0xf], cl; mov esi, 0x83480142; ret 0x8401;
0x00112e7f: add [rax+0xf], cl; mov esi, 0x83480142; ret 0x8401;
0x00112e82: mov esi, 0x83480142; ret 0x8401;
0x00112eae: ror byte ptr [rdi], 0x94; ret;
0x00112eb0: xchg esp, eax; ret;
0x00112fb0: dec dword ptr [rax-0x77]; ret 0x8d48;
0x00113225: ret 0x2ce9;
0x00113437: test [rax+rdx*8], ah; add [rax], eax; add [rcx], dh; dec dword ptr [rax-0x77]; ret 0x8948;
0x00113438: and al, 0xd0; add [rax], eax; add [rcx], dh; dec dword ptr [rax-0x77]; ret 0x8948;
0x0011343a: add [rax], eax; add [rcx], dh; dec dword ptr [rax-0x77]; ret 0x8948;
0x0011343c: add [rcx], dh; dec dword ptr [rax-0x77]; ret 0x8948;
0x001135ec: shr al, 0x4e; cmp esp, esi; call far fword ptr [rsi+0x5f];
0x001135ee: cmp rsp, r14; call far fword ptr [rsi+0x5f];
0x001135ef: cmp esp, esi; call far fword ptr [rsi+0x5f];
0x001135f0: hlt; call far fword ptr [rsi+0x5f];
0x0011387f: fucomip st, st(0); sti; push rsp; std; jmp qword ptr [rcx+rax*2-0x75];
0x00113881: sti; push rsp; std; jmp qword ptr [rcx+rax*2-0x75];
0x00113882: push rsp; std; jmp qword ptr [rcx+rax*2-0x75];
0x00113883: std; jmp qword ptr [rcx+rax*2-0x75];
0x001138e7: push 0x31000791; dec dword ptr [rax-0x77]; ret 0xc031;
0x00113ab7: and [rbp-0x1ff7b], cl; jmp qword ptr [rsi+0x3d];
0x00113abd: jmp qword ptr [rsi+0x3d];
0x00113c43: jmp qword ptr [rcx+rax*2-0x75];
0x00113cc9: lea eax, [rdi]; add [rcx], dh; dec dword ptr [rax-0x77]; ret 0xc031;
0x00113cf8: add ch, al; ret 0xfff5;
0x00113cfa: ret 0xfff5;
0x00113db7: or al, 0xe8; ret;
0x00113dd5: pop rbx; pop rbp; pop r13; pop r14; pop r15; ret;
0x00113dd6: pop rbp; pop r13; pop r14; pop r15; ret;
0x00113dfe: call qword ptr [rax+0x2b841];
0x00113e88: add [rax], al; add [rbp+0x24], dh; add rsp, 0x38; ret;
0x00113e8a: add [rbp+0x24], dh; add rsp, 0x38; ret;
0x00113f25: add [rax], al; add [rbp+5], dh; add rsp, 0x38; ret;
0x00113f27: add [rbp+5], dh; add rsp, 0x38; ret;
0x00113f29: add eax, 0x38c48348; ret;
0x00114168: add [rcx+0x415d5be8], cl; pop rsp; pop r13; pop r14; pop r15; ret;
0x00114431: bnd jmp qword ptr [rsi-0x77];
0x0011446d: call far fword ptr [rcx-0x76bbfff6];
0x00114596: add [rax-0x75], ecx; push rdi; adc [rax+0x39], cl; ret 0x6076;
0x00114599: push rdi; adc [rax+0x39], cl; ret 0x6076;
0x0011459a: adc [rax+0x39], cl; ret 0x6076;
0x0011459d: ret 0x6076;
0x0011465e: mov eax, 0xa; pop rbp; pop r12; pop r13; pop r14; ret;
0x00114697: add [rax+0x478b4803], cl; or [rax-0x7d], cl; ret;
0x00114699: add ecx, [rax-0x75]; or [r8-0x7d], r9b; ret;
0x0011469c: or [r8-0x7d], r9b; ret;
0x0011471e: add [rbx+0x5d], bl; mov eax, [rax+r12*8+4]; pop r12; pop r13; pop r14; ret;
0x00114720: pop rbp; mov eax, [rax+r12*8+4]; pop r12; pop r13; pop r14; ret;
0x00114721: mov eax, [rax+r12*8+4]; pop r12; pop r13; pop r14; ret;
0x00114722: mov eax, [rax+4]; pop r12; pop r13; pop r14; ret;
0x00114725: add al, 0x41; pop rsp; pop r13; pop r14; ret;
0x00114b3e: call qword ptr [rax-0x43f7a3a];
0x00114c2e: call qword ptr [rax-0x177c3d77];
0x00114dc0: mov [rbx+0x30], rax; add rsp, 8; mov eax, r8d; pop rbx; pop rbp; ret;
0x00114dc1: mov [rbx+0x30], eax; add rsp, 8; mov eax, r8d; pop rbx; pop rbp; ret;
0x00114e0d: add [rax], al; nop; mov r8d, 1; pop rbp; mov eax, r8d; ret;
0x00114e0e: add [rax+0x1b841], dl; add [rax], al; pop rbp; mov eax, r8d; ret;
0x00114e0f: nop; mov r8d, 1; pop rbp; mov eax, r8d; ret;
0x00114e10: mov r8d, 1; pop rbp; mov eax, r8d; ret;
0x00114e11: mov eax, 1; pop rbp; mov eax, r8d; ret;
0x00114e12: add [rax], eax; add [rax], al; pop rbp; mov eax, r8d; ret;
0x00114e13: add [rax], al; add [rbp+0x44], bl; mov eax, eax; ret;
0x00114e14: add [rax], al; pop rbp; mov eax, r8d; ret;
0x00114e15: add [rbp+0x44], bl; mov eax, eax; ret;
0x00114e4d: rol rax, 0x11; mov [rip+0xae668], rax; mov byte ptr [rip+0xae669], 1; mov eax, r8d; pop rbp; ret;
0x00114e4e: rol eax, 0x11; mov [rip+0xae668], rax; mov byte ptr [rip+0xae669], 1; mov eax, r8d; pop rbp; ret;
0x00114e4f: rcl byte ptr [rcx], 0x48; mov [rip+0xae668], eax; mov byte ptr [rip+0xae669], 1; mov eax, r8d; pop rbp; ret;
0x00114e50: adc [rax-0x77], ecx; add eax, 0xae668; mov byte ptr [rip+0xae669], 1; mov eax, r8d; pop rbp; ret;
0x00114e51: mov [rip+0xae668], rax; mov byte ptr [rip+0xae669], 1; mov eax, r8d; pop rbp; ret;
0x00114e52: mov [rip+0xae668], eax; mov byte ptr [rip+0xae669], 1; mov eax, r8d; pop rbp; ret;
0x00114e53: add eax, 0xae668; mov byte ptr [rip+0xae669], 1; mov eax, r8d; pop rbp; ret;
0x00114e54: push 0xffffffffc6000ae6; add eax, 0xae669; add [rcx+rcx*4-0x40], eax; pop rbp; ret;
0x00114e55: out 0xa, al; add dh, al; add eax, 0xae669; add [rcx+rcx*4-0x40], eax; pop rbp; ret;
0x00114e56: or al, [rax]; mov byte ptr [rip+0xae669], 1; mov eax, r8d; pop rbp; ret;
0x00114e57: add dh, al; add eax, 0xae669; add [rcx+rcx*4-0x40], eax; pop rbp; ret;
0x00114e58: mov byte ptr [rip+0xae669], 1; mov eax, r8d; pop rbp; ret;
0x00114e59: add eax, 0xae669; add [rcx+rcx*4-0x40], eax; pop rbp; ret;
0x00114e5a: imul esp, esi, 0x4401000a; mov eax, eax; pop rbp; ret;
0x00114e5b: out 0xa, al; add [rcx], al; mov eax, r8d; pop rbp; ret;
0x00114ee7: add al, [rax]; mov rsi, rbx; mov rdi, rbp; call qword ptr [rsp+0x10];
0x00114ee8: add [rax-0x77], cl; fimul st, word ptr [rax-0x77]; out dx, eax; call qword ptr [rsp+0x10];
0x00114ee9: mov rsi, rbx; mov rdi, rbp; call qword ptr [rsp+0x10];
0x00114eea: mov esi, ebx; mov rdi, rbp; call qword ptr [rsp+0x10];
0x00114eeb: fimul st, word ptr [rax-0x77]; out dx, eax; call qword ptr [rsp+0x10];
0x00114eec: mov rdi, rbp; call qword ptr [rsp+0x10];
0x00114eed: mov edi, ebp; call qword ptr [rsp+0x10];
0x00114eee: out dx, eax; call qword ptr [rsp+0x10];
0x00114f32: mov eax, [0xe824048948c78948]; and [rdi], esp; add al, [rax]; mov rax, [rsp]; mov rdi, rbx; call rax;
0x00114f39: and al, 0xe8; and [rdi], esp; add al, [rax]; mov rax, [rsp]; mov rdi, rbx; call rax;
0x00114f3b: and [rdi], esp; add al, [rax]; mov rax, [rsp]; mov rdi, rbx; call rax;
0x00114f3d: add al, [rax]; mov rax, [rsp]; mov rdi, rbx; call rax;
0x00114f3e: add [rax-0x75], cl; add al, 0x24; mov rdi, rbx; call rax;
0x00114f3f: mov rax, [rsp]; mov rdi, rbx; call rax;
0x00114f40: mov eax, [rsp]; mov rdi, rbx; call rax;
0x00114f41: add al, 0x24; mov rdi, rbx; call rax;
0x00114f42: and al, 0x48; mov edi, ebx; call rax;
0x00115010: jmp qword ptr [rbx+rcx*4];
0x0011510a: ror byte ptr [rdi], 0x85; mov edi, 0x83000000; sub eax, 0xae420; add [rcx+rcx*4-0x40], eax; pop rbp; ret;
0x0011510c: test [rdi-0x7d000000], edi; sub eax, 0xae420; add [rcx+rcx*4-0x40], eax; pop rbp; ret;
0x0011510d: mov edi, 0x83000000; sub eax, 0xae420; add [rcx+rcx*4-0x40], eax; pop rbp; ret;
0x0011510e: add [rax], al; add [rbx+0xae4202d], al; add [rcx], al; mov eax, r8d; pop rbp; ret;
0x0011510f: add [rax], al; sub dword ptr [rip+0xae420], 1; mov eax, r8d; pop rbp; ret;
0x00115110: add [rbx+0xae4202d], al; add [rcx], al; mov eax, r8d; pop rbp; ret;
0x00115111: sub dword ptr [rip+0xae420], 1; mov eax, r8d; pop rbp; ret;
0x00115112: sub eax, 0xae420; add [rcx+rcx*4-0x40], eax; pop rbp; ret;
0x00115113: and ah, ah; or al, [rax]; add [rcx+rcx*4-0x40], eax; pop rbp; ret;
0x00115114: in al, 0xa; add [rcx], al; mov eax, r8d; pop rbp; ret;
0x00115115: or al, [rax]; add [rcx+rcx*4-0x40], eax; pop rbp; ret;
0x00115116: add [rcx], al; mov eax, r8d; pop rbp; ret;
0x00115117: add [rcx+rcx*4-0x40], eax; pop rbp; ret;
0x001151e0: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xae33e]; syscall;
0x001151ea: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xae33e; syscall;
0x001151f0: add [rax], al; add [rax-0x73], cl; cmp eax, 0xae33e; syscall;
0x001151f2: add [rax-0x73], cl; cmp eax, 0xae33e; syscall;
0x001151f5: cmp eax, 0xae33e; syscall;
0x001151f9: add [rdi], cl; add eax, 0xffff17e9; jmp qword ptr [rsi+0x66];
0x001151fb: add eax, 0xffff17e9; jmp qword ptr [rsi+0x66];
0x00115262: push qword ptr [rbp-0x15]; pop rbx; ret;
0x00115317: sub dword ptr [rip+0xae21a], 1; add rsp, 8; ret;
0x00115331: test al, 0; add [rax-0x7b], cl; shl byte ptr [rcx+rcx+0x48], 0x8d; cmp eax, 0xae1a0; call rax;
0x00115333: add [rax-0x7b], cl; shl byte ptr [rcx+rcx+0x48], 0x8d; cmp eax, 0xae1a0; call rax;
0x00115336: shl byte ptr [rcx+rcx+0x48], 0x8d; cmp eax, 0xae1a0; call rax;
0x00115338: or [rax-0x73], ecx; cmp eax, 0xae1a0; call rax;
0x00115339: lea rdi, [rip+0xae1a0]; call rax;
0x0011533a: lea edi, [rip+0xae1a0]; call rax;
0x0011533b: cmp eax, 0xae1a0; call rax;
0x0011533e: or al, [rax]; call rax;
0x00115396: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xae192; syscall;
0x0011539c: add [rax], al; add [rax-0x73], cl; cmp eax, 0xae192; syscall;
0x0011539e: add [rax-0x73], cl; cmp eax, 0xae192; syscall;
0x001153a1: cmp eax, 0xae192; syscall;
0x0011542a: add al, [rax]; mov rcx, [rsp+0x10]; mov rdx, r14; mov rdi, r13; mov rsi, [rsp+8]; call rbp;
0x0011542b: add [rax-0x75], cl; and al, 0x10; mov rdx, r14; mov rdi, r13; mov rsi, [rsp+8]; call rbp;
0x0011542c: mov rcx, [rsp+0x10]; mov rdx, r14; mov rdi, r13; mov rsi, [rsp+8]; call rbp;
0x0011542d: mov ecx, [rsp+0x10]; mov rdx, r14; mov rdi, r13; mov rsi, [rsp+8]; call rbp;
0x0011542f: and al, 0x10; mov rdx, r14; mov rdi, r13; mov rsi, [rsp+8]; call rbp;
0x00115430: adc [rcx+rcx*4-0xe], cl; mov rdi, r13; mov rsi, [rsp+8]; call rbp;
0x00115431: mov rdx, r14; mov rdi, r13; mov rsi, [rsp+8]; call rbp;
0x00115432: mov edx, esi; mov rdi, r13; mov rsi, [rsp+8]; call rbp;
0x00115434: mov rdi, r13; mov rsi, [rsp+8]; call rbp;
0x00115435: mov edi, ebp; mov rsi, [rsp+8]; call rbp;
0x00115436: out dx, eax; mov rsi, [rsp+8]; call rbp;
0x00115437: mov rsi, [rsp+8]; call rbp;
0x00115438: mov esi, [rsp+8]; call rbp;
0x0011543a: and al, 8; call rbp;
0x0011563a: sub dword ptr gs:[rip+0xadef6], 1; add rsp, 0x20; mov eax, r8d; pop rbp; ret;
0x0011563b: sub dword ptr [rip+0xadef6], 1; add rsp, 0x20; mov eax, r8d; pop rbp; ret;
0x0011563e: fimul st, word ptr [rdx]; add [rcx], al; add rsp, 0x20; mov eax, r8d; pop rbp; ret;
0x00115640: add [rcx], al; add rsp, 0x20; mov eax, r8d; pop rbp; ret;
0x00115642: add rsp, 0x20; mov eax, r8d; pop rbp; ret;
0x00115643: add esp, 0x20; mov eax, r8d; pop rbp; ret;
0x00115645: and [rcx+rcx*4-0x40], al; pop rbp; ret;
0x001156ad: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xae33e]; syscall;
0x001156ae: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xae33e]; syscall;
0x001156af: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xae33e]; syscall;
0x001156b0: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xae33e]; syscall;
0x001156b1: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xae33e]; syscall;
0x001156b2: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xae33e]; syscall;
0x001156b3: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xae33e]; syscall;
0x001156b4: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xae33e]; syscall;
0x001156b5: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xae33e]; syscall;
0x001156b6: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xade72; syscall;
0x001156b7: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xae33e]; syscall;
0x001156b8: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xae33e]; syscall;
0x001156b9: add [rax+0xca], bh; lea rdi, [rip+0xae33e]; syscall;
0x001156ba: mov eax, 0xca; lea rdi, [rip+0xae33e]; syscall;
0x001156bc: add [rax], al; add [rax-0x73], cl; cmp eax, 0xade72; syscall;
0x001156bd: add [rax], al; lea rdi, [rip+0xae33e]; syscall;
0x001156be: add [rax-0x73], cl; cmp eax, 0xade72; syscall;
0x001156bf: lea rdi, [rip+0xae33e]; syscall;
0x001156c0: lea edi, [rip+0xae33e]; syscall;
0x001156c1: cmp eax, 0xade72; syscall;
0x0011579b: or eax, 0xe8c78948; mov esp, 0x4c00021e; mov edi, esp; call rbp;
0x001157a0: mov esp, 0x4c00021e; mov edi, esp; call rbp;
0x001157e6: add al, [rax]; mov rdi, [rsp+0x28]; mov rsi, r12; call qword ptr [rsp+0x58];
0x001157e8: mov rdi, [rsp+0x28]; mov rsi, r12; call qword ptr [rsp+0x58];
0x001157e9: mov edi, [rsp+0x28]; mov rsi, r12; call qword ptr [rsp+0x58];
0x001157eb: and al, 0x28; mov rsi, r12; call qword ptr [rsp+0x58];
0x001157ec: sub [rcx+rcx*4-0x1a], cl; call qword ptr [rsp+0x58];
0x001157ed: mov rsi, r12; call qword ptr [rsp+0x58];
0x001157ee: mov esi, esp; call qword ptr [rsp+0x58];
0x001157f0: call qword ptr [rsp+0x58];
0x00115836: add al, [rax]; mov rcx, r13; mov edx, 0x400; mov rsi, r15; mov rdi, r12; call rbp;
0x00115837: add [rcx+rcx*4-0x17], cl; mov edx, 0x400; mov rsi, r15; mov rdi, r12; call rbp;
0x00115838: mov rcx, r13; mov edx, 0x400; mov rsi, r15; mov rdi, r12; call rbp;
0x00115839: mov ecx, ebp; mov edx, 0x400; mov rsi, r15; mov rdi, r12; call rbp;
0x0011583b: mov edx, 0x400; mov rsi, r15; mov rdi, r12; call rbp;
0x0011583c: add [rax+rax], al; add [rcx+rcx*4-2], cl; mov rdi, r12; call rbp;
0x0011583d: add al, 0; add [rcx+rcx*4-2], cl; mov rdi, r12; call rbp;
0x0011583e: add [rax], al; mov rsi, r15; mov rdi, r12; call rbp;
0x0011583f: add [rcx+rcx*4-2], cl; mov rdi, r12; call rbp;
0x00115840: mov rsi, r15; mov rdi, r12; call rbp;
0x00115841: mov esi, edi; mov rdi, r12; call rbp;
0x00115842: dec byte ptr [rcx+rcx*4-0x19]; call rbp;
0x001158e5: add al, [rax]; mov rdi, r12; call rbp;
0x001158e6: add [rcx+rcx*4-0x19], cl; call rbp;
0x001158e7: mov rdi, r12; call rbp;
0x001158e8: mov edi, esp; call rbp;
0x00115a93: test [rsi+rdi*8-1], bl; dec dword ptr [rax-0x77]; fucomip st, st(0); rcr byte ptr [rbx], 2; add [rcx+rcx*4-0x19], cl; call rbx;
0x00115a97: dec dword ptr [rax-0x77]; fucomip st, st(0); rcr byte ptr [rbx], 2; add [rcx+rcx*4-0x19], cl; call rbx;
0x00115a9a: fucomip st, st(0); rcr byte ptr [rbx], 2; add [rcx+rcx*4-0x19], cl; call rbx;
0x00115a9c: rcr byte ptr [rbx], 2; add [rcx+rcx*4-0x19], cl; call rbx;
0x00115a9d: sbb eax, [rdx]; add [rcx+rcx*4-0x19], cl; call rbx;
0x00115a9e: add al, [rax]; mov rdi, r12; call rbx;
0x00115a9f: add [rcx+rcx*4-0x19], cl; call rbx;
0x00115aa0: mov rdi, r12; call rbx;
0x00115aa1: mov edi, esp; call rbx;
0x00115b7b: div eax; dec dword ptr [rax-0x77]; add eax, 0xae92b; add rsp, 8; ret;
0x00115b7d: dec dword ptr [rax-0x77]; add eax, 0xae92b; add rsp, 8; ret;
0x00115b7e: mov [rip+0xae92b], rax; add rsp, 8; ret;
0x00115b7f: mov [rip+0xae92b], eax; add rsp, 8; ret;
0x00115b80: add eax, 0xae92b; add rsp, 8; ret;
0x00115b81: sub ebp, ecx; or al, [rax]; add rsp, 8; ret;
0x00115ba8: mov rax, [rip+0xabbf1]; lea rsi, [rip-0x46]; lea rdi, [rip+0xad97f]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00115ba9: mov eax, [rip+0xabbf1]; lea rsi, [rip-0x46]; lea rdi, [rip+0xad97f]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00115baa: add eax, 0xabbf1; lea rsi, [rip-0x46]; lea rdi, [rip+0xad97f]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00115bac: mov ebx, 0x8d48000a; xor eax, 0xffffffba; lea rdi, [rip+0xad97f]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00115bad: or al, [rax]; lea rsi, [rip-0x46]; lea rdi, [rip+0xad97f]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00115bae: add [rax-0x73], cl; xor eax, 0xffffffba; lea rdi, [rip+0xad97f]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00115baf: lea rsi, [rip-0x46]; lea rdi, [rip+0xad97f]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00115bb0: lea esi, [rip-0x46]; lea rdi, [rip+0xad97f]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00115bb1: xor eax, 0xffffffba; lea rdi, [rip+0xad97f]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00115bb2: mov edx, 0x48ffffff; lea edi, [rip+0xad97f]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00115bb5: dec dword ptr [rax-0x73]; cmp eax, 0xad97f; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00115bb6: lea rdi, [rip+0xad97f]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00115bb7: lea edi, [rip+0xad97f]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00115bb8: cmp eax, 0xad97f; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00115c30: mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; pop rbp; pop r12; pop r13; ret;
0x00115c31: mov dword ptr [rax], 0xc; mov eax, 0xffffffff; pop rbp; pop r12; pop r13; ret;
0x00115c34: add [rax], al; add [rax-1], bh; pop rbp; pop r12; pop r13; ret;
0x00115c35: add [rax], al; mov eax, 0xffffffff; pop rbp; pop r12; pop r13; ret;
0x00115c36: add [rax-1], bh; pop rbp; pop r12; pop r13; ret;
0x00115c37: mov eax, 0xffffffff; pop rbp; pop r12; pop r13; ret;
0x00115cb7: fmul st, dword ptr [rdx]; add [rcx], al; mov fs:[r8], r9d; add rsp, 8; ret;
0x00115d06: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xad82a; syscall;
0x00115d0c: add [rax], al; add [rax-0x73], cl; cmp eax, 0xad82a; syscall;
0x00115d0e: add [rax-0x73], cl; cmp eax, 0xad82a; syscall;
0x00115d11: cmp eax, 0xad82a; syscall;
0x00115d12: sub bl, al; or al, [rax]; syscall;
0x00115d8c: sub dword ptr [rip+0xad885], 1; mov fs:[r8], r9d; add rsp, 8; ret;
0x00115db4: fiadd st, word ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xad772]; syscall;
0x00115dbe: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xad772; syscall;
0x00115dc4: add [rax], al; add [rax-0x73], cl; cmp eax, 0xad772; syscall;
0x00115dc6: add [rax-0x73], cl; cmp eax, 0xad772; syscall;
0x00115dc9: cmp eax, 0xad772; syscall;
0x00115dcb: xlat [rbx]; or al, [rax]; syscall;
0x00115e7b: sub dword ptr [rip+0xad6be], 1; mov fs:[r9], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret;
0x00115e7d: mov esi, 0x1000ad6; mov fs:[r9], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret;
0x00115ee5: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xad82a]; syscall;
0x00115ee6: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xad82a]; syscall;
0x00115ee7: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xad82a]; syscall;
0x00115ee8: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xad82a]; syscall;
0x00115ee9: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xad82a]; syscall;
0x00115eea: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xad82a]; syscall;
0x00115eeb: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xad82a]; syscall;
0x00115eec: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xad82a]; syscall;
0x00115eed: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xad82a]; syscall;
0x00115eee: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xad642; syscall;
0x00115eef: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xad82a]; syscall;
0x00115ef0: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xad82a]; syscall;
0x00115ef1: add [rax+0xca], bh; lea rdi, [rip+0xad82a]; syscall;
0x00115ef2: mov eax, 0xca; lea rdi, [rip+0xad82a]; syscall;
0x00115ef4: add [rax], al; add [rax-0x73], cl; cmp eax, 0xad642; syscall;
0x00115ef5: add [rax], al; lea rdi, [rip+0xad82a]; syscall;
0x00115ef6: add [rax-0x73], cl; cmp eax, 0xad642; syscall;
0x00115ef7: lea rdi, [rip+0xad82a]; syscall;
0x00115ef8: lea edi, [rip+0xad82a]; syscall;
0x00115ef9: cmp eax, 0xad642; syscall;
0x00115f67: add [rbp-0x7ccb8a40], al; sub eax, 0xad62d; add [rcx+rax*2-0x77], esp; sbb [rcx+rcx*4-0x40], ecx; pop rbx; ret;
0x00115f69: shl byte ptr [rbp+0x34], 0x83; sub eax, 0xad62d; add [rcx+rax*2-0x77], esp; sbb [rcx+rcx*4-0x40], ecx; pop rbx; ret;
0x00115f6b: xor al, 0x83; sub eax, 0xad62d; add [rcx+rax*2-0x77], esp; sbb [rcx+rcx*4-0x40], ecx; pop rbx; ret;
0x00115f6c: sub dword ptr [rip+0xad62d], 1; mov fs:[r9], ebx; mov rax, r8; pop rbx; ret;
0x00115f6d: sub eax, 0xad62d; add [rcx+rax*2-0x77], esp; sbb [rcx+rcx*4-0x40], ecx; pop rbx; ret;
0x00115f6e: sub eax, 0x1000ad6; mov fs:[r9], ebx; mov rax, r8; pop rbx; ret;
0x00115f70: or al, [rax]; add [rcx+rax*2-0x77], esp; sbb [rcx+rcx*4-0x40], ecx; pop rbx; ret;
0x00115fac: mov byte ptr [rbp+0x31], 0xd2; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xad5da]; syscall;
0x00115fad: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xad5da]; syscall;
0x00115fae: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xad5da]; syscall;
0x00115faf: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xad5da]; syscall;
0x00115fb0: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xad5da]; syscall;
0x00115fb1: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xad5da]; syscall;
0x00115fb2: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xad5da]; syscall;
0x00115fb3: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xad5da]; syscall;
0x00115fb4: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xad5da]; syscall;
0x00115fb5: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xad5da]; syscall;
0x00115fb6: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xad5da; syscall;
0x00115fb7: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xad5da]; syscall;
0x00115fb8: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xad5da]; syscall;
0x00115fb9: add [rax+0xca], bh; lea rdi, [rip+0xad5da]; syscall;
0x00115fba: mov eax, 0xca; lea rdi, [rip+0xad5da]; syscall;
0x00115fbc: add [rax], al; add [rax-0x73], cl; cmp eax, 0xad5da; syscall;
0x00115fbd: add [rax], al; lea rdi, [rip+0xad5da]; syscall;
0x00115fbe: add [rax-0x73], cl; cmp eax, 0xad5da; syscall;
0x00115fbf: lea rdi, [rip+0xad5da]; syscall;
0x00115fc0: lea edi, [rip+0xad5da]; syscall;
0x00115fc1: cmp eax, 0xad5da; syscall;
0x00115fc2: fcmovbe st, st(5); or al, [rax]; syscall;
0x00116160: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xad46e]; syscall;
0x00116161: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xad46e]; syscall;
0x00116162: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xad46e]; syscall;
0x00116163: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xad46e]; syscall;
0x00116164: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xad46e]; syscall;
0x00116165: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xad46e]; syscall;
0x00116166: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xad46e]; syscall;
0x00116167: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xad46e]; syscall;
0x00116168: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xad46e]; syscall;
0x00116169: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xad46e]; syscall;
0x0011616a: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xad46e; syscall;
0x0011616b: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xad46e]; syscall;
0x0011616c: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xad46e]; syscall;
0x0011616d: add [rax+0xca], bh; lea rdi, [rip+0xad46e]; syscall;
0x0011616e: mov eax, 0xca; lea rdi, [rip+0xad46e]; syscall;
0x00116170: add [rax], al; add [rax-0x73], cl; cmp eax, 0xad46e; syscall;
0x00116171: add [rax], al; lea rdi, [rip+0xad46e]; syscall;
0x00116172: add [rax-0x73], cl; cmp eax, 0xad46e; syscall;
0x00116173: lea rdi, [rip+0xad46e]; syscall;
0x00116174: lea edi, [rip+0xad46e]; syscall;
0x00116175: cmp eax, 0xad46e; syscall;
0x001165e8: add eax, 0xf0ed2ae8; jmp qword ptr [rbx+rcx*4+4];
0x0011669e: call qword ptr [rax-0x474a74b8];
0x001166e0: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xacf0a]; syscall;
0x001166e1: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xacf0a]; syscall;
0x001166e2: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xacf0a]; syscall;
0x001166e3: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xacf0a]; syscall;
0x001166e4: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xacf0a]; syscall;
0x001166e5: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xacf0a]; syscall;
0x001166e6: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xacf0a]; syscall;
0x001166e7: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xacf0a]; syscall;
0x001166e8: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xacf0a]; syscall;
0x001166e9: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xacf0a]; syscall;
0x001166ea: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xacf0a; syscall;
0x001166eb: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xacf0a]; syscall;
0x001166ec: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xacf0a]; syscall;
0x001166ed: add [rax+0xca], bh; lea rdi, [rip+0xacf0a]; syscall;
0x001166ee: mov eax, 0xca; lea rdi, [rip+0xacf0a]; syscall;
0x001166f0: add [rax], al; add [rax-0x73], cl; cmp eax, 0xacf0a; syscall;
0x001166f1: add [rax], al; lea rdi, [rip+0xacf0a]; syscall;
0x001166f2: add [rax-0x73], cl; cmp eax, 0xacf0a; syscall;
0x001166f3: lea rdi, [rip+0xacf0a]; syscall;
0x001166f4: lea edi, [rip+0xacf0a]; syscall;
0x001166f5: cmp eax, 0xacf0a; syscall;
0x001166f6: or cl, bh; or al, [rax]; syscall;
0x00116821: call qword ptr [rbx+0x4c];
0x00116844: cmp [rbx-1], dh; call far fword ptr [rdx+0x59];
0x00116994: add [rbp-0x7b], al; dec dword ptr [rdi]; test dl, bl; add [rax], al; add [rcx-0xa], al; ret;
0x00116997: dec dword ptr [rdi]; test dl, bl; add [rax], al; add [rcx-0xa], al; ret;
0x00116999: test dl, bl; add [rax], al; add [rcx-0xa], al; ret;
0x0011699b: add [rax], al; add [rcx-0xa], al; ret;
0x00116a6a: emms; mov esp, 0xfffebbe9; jmp qword ptr [rsi+0xf];
0x00116a6c: mov esp, 0xfffebbe9; jmp qword ptr [rsi+0xf];
0x00116b1f: add [rcx-0xa], al; ret;
0x00116d87: call far fword ptr [rdi+0x41];
0x00116dcb: jmp qword ptr [rcx+rcx*4+0x10];
0x00116ead: sbb [rax-0x77], cl; ret;
0x00117043: inc dword ptr [rcx-0xa]; ret;
0x00117055: cmp [rcx-0xa], al; ret;
0x00117355: test [rsi+0x48000000], edx; add esp, 0x30; pop rbx; pop rbp; pop r12; ret;
0x001173f1: sub esp, [rdx-1]; jmp qword ptr [rsi+0x66];
0x00117412: fcomip st, st(0); dec dword ptr [rax-0x7d]; ret;
0x00117433: fdivrp st(0), st; jmp qword ptr [rsi+0x2e];
0x00117487: sub [rax], al; add [rax], al; add al, ch; iretd;
0x001175b6: xchg [rbp-0x77000000], dl; ret 0x3948;
0x00117603: ret 0x3949;
0x0011760d: add ecx, [rdi]; test [rsi-0x7d000000], cl; ret 0x8103;
0x0011760f: test [rsi-0x7d000000], cl; ret 0x8103;
0x00117615: ret 0x8103;
0x001177a7: add rsp, 0x38; pop rbx; pop rbp; pop r12; pop r13; ret;
0x001177a8: add esp, 0x38; pop rbx; pop rbp; pop r12; pop r13; ret;
0x001177aa: cmp [rbx+0x5d], bl; pop r12; pop r13; ret;
0x00117800: mov fs:[rbp], r12d; pop rbx; pop rbp; pop r12; ret;
0x00117801: mov [rbp], r12d; pop rbx; pop rbp; pop r12; ret;
0x00117802: mov [rbp], esp; pop rbx; pop rbp; pop r12; ret;
0x00117803: add gs:[rbx+0x5d], bl; pop r12; ret;
0x001178a5: add [rsi-0x77], ah; rol r14, 0x45; ret;
0x001178a8: rol r14, 0x45; ret;
0x001178f2: dec dword ptr [rax-0x7d]; clc; push qword ptr [rdi+rcx*8-0x7b]; ror byte ptr [rdi], 0x88; iretd;
0x001178f5: clc; push qword ptr [rdi+rcx*8-0x7b]; ror byte ptr [rdi], 0x88; iretd;
0x001178f6: push qword ptr [rdi+rcx*8-0x7b]; ror byte ptr [rdi], 0x88; iretd;
0x001178fa: ror byte ptr [rdi], 0x88; iretd;
0x0011790e: call qword ptr [rax+0x70b5894c];
0x00117b41: fistp dword ptr [rdx-1], st; jmp qword ptr [rsi+0x66];
0x00117b46: nop [rax+rax]; mov edi, [rdi]; mov eax, 3; syscall; ret;
0x00117b46: nop [rax+rax]; mov edi, [rdi]; mov eax, 3; syscall;
0x00117b47: nop [rax+rax]; mov edi, [rdi]; mov eax, 3; syscall; ret;
0x00117b47: nop [rax+rax]; mov edi, [rdi]; mov eax, 3; syscall;
0x00117b48: nop [rax+rax]; mov edi, [rdi]; mov eax, 3; syscall;
0x00117b48: nop [rax+rax]; mov edi, [rdi]; mov eax, 3; syscall; ret;
0x00117b4a: test [rax], al; add [rax], al; add [rax], al; mov edi, [rdi]; mov eax, 3; syscall;
0x00117b4b: add [rax], al; add [rax], al; add [rbx+0x3b83f], cl; add [rax], al; syscall;
0x00117b4b: add [rax], al; add [rax], al; add [rbx+0x3b83f], cl; add [rax], al; syscall; ret;
0x00117b4c: add [rax], al; add [rax], al; mov edi, [rdi]; mov eax, 3; syscall; ret;
0x00117b4c: add [rax], al; add [rax], al; mov edi, [rdi]; mov eax, 3; syscall;
0x00117b4d: add [rax], al; add [rbx+0x3b83f], cl; add [rax], al; syscall;
0x00117b4d: add [rax], al; add [rbx+0x3b83f], cl; add [rax], al; syscall; ret;
0x00117b4e: add [rax], al; mov edi, [rdi]; mov eax, 3; syscall;
0x00117b4e: add [rax], al; mov edi, [rdi]; mov eax, 3; syscall; ret;
0x00117b4f: add [rbx+0x3b83f], cl; add [rax], al; syscall;
0x00117b4f: add [rbx+0x3b83f], cl; add [rax], al; syscall; ret;
0x00117b50: mov edi, [rdi]; mov eax, 3; syscall; ret;
0x00117b50: mov edi, [rdi]; mov eax, 3; syscall;
0x00117b52: mov eax, 3; syscall; ret;
0x00117b53: add eax, [rax]; add [rax], al; syscall; ret;
0x00117b55: add [rax], al; syscall; ret;
0x00117b57: syscall; ret;
0x00117bf6: add [rax], al; add [rbp+0x24], dh; add rsp, 0x28; pop rbx; pop rbp; ret;
0x00117bf8: add [rbp+0x24], dh; add rsp, 0x28; pop rbx; pop rbp; ret;
0x00117bfa: and al, 0x48; add esp, 0x28; pop rbx; pop rbp; ret;
0x00117c02: nop [rax+rax]; mov edi, [rbx]; mov eax, 3; syscall;
0x00117c03: nop [rax+rax]; mov edi, [rbx]; mov eax, 3; syscall;
0x00117c05: add [rax], r8b; mov edi, [rbx]; mov eax, 3; syscall;
0x00117c06: add [rax], al; mov edi, [rbx]; mov eax, 3; syscall;
0x00117c07: add [rbx+0x3b83b], cl; add [rax], al; syscall;
0x00117c08: mov edi, [rbx]; mov eax, 3; syscall;
0x00117c09: cmp edi, [rax+3]; syscall;
0x00117c0a: mov eax, 3; syscall;
0x00117c0b: add eax, [rax]; add [rax], al; syscall;
0x00117d33: xchg al, dh; add [rax], al; add [rcx-0x77], al; ret;
0x00117d35: add [rax], al; add [rcx-0x77], al; ret;
0x00117d37: add [rcx-0x77], al; ret;
0x00117df0: out dx, eax; mov fs:[rbx], r14d; mov eax, 3; mov edi, [rbp-0x60]; syscall;
0x00117df1: mov fs:[rbx], r14d; mov eax, 3; mov edi, [rbp-0x60]; syscall;
0x00117df2: mov [rbx], r14d; mov eax, 3; mov edi, [rbp-0x60]; syscall;
0x00117df3: mov [rbx], esi; mov eax, 3; mov edi, [rbp-0x60]; syscall;
0x00117df4: xor edi, [rax+3]; mov edi, [rbp-0x60]; syscall;
0x00117df5: mov eax, 3; mov edi, [rbp-0x60]; syscall;
0x00117df6: add eax, [rax]; add [rax], al; mov edi, [rbp-0x60]; syscall;
0x00117df8: add [rax], al; mov edi, [rbp-0x60]; syscall;
0x00117dfa: mov edi, [rbp-0x60]; syscall;
0x00117f88: add [rax-0x7d], cl; ret 0x4801;
0x001180b5: ret 0xe901;
0x001181cb: add [rax], al; add [rax], al; add [rax-0x7d], cl; out dx, eax; add ecx, [rax-0x7d]; call qword ptr [rcx];
0x001181cd: add [rax], al; add [rax-0x7d], cl; out dx, eax; add ecx, [rax-0x7d]; call qword ptr [rcx];
0x001181cf: add [rax-0x7d], cl; out dx, eax; add ecx, [rax-0x7d]; call qword ptr [rcx];
0x001181d2: out dx, eax; add ecx, [rax-0x7d]; call qword ptr [rcx];
0x001181d3: add ecx, [rax-0x7d]; call qword ptr [rcx];
0x001181d6: call qword ptr [rcx];
0x0011824b: add [rax-0x7d], ecx; ret 0x4904;
0x0011824e: ret 0x4904;
0x00118385: rol byte ptr [rbx], 0x25; cld; inc dword ptr [rcx]; add [rax+0x29], cl; ret;
0x00118388: cld; inc dword ptr [rcx]; add [rax+0x29], cl; ret;
0x00118389: inc dword ptr [rcx]; add [rax+0x29], cl; ret;
0x0011838b: add [rax+0x29], cl; ret;
0x00118596: shl byte ptr [rbx+rcx-0x3a], 2; jmp far fword ptr [rax+0xd850f02];
0x0011859b: jmp far fword ptr [rax+0xd850f02];
0x001187fb: add [rcx-0x7d], ecx; rol dword ptr [rcx+rcx*2], 0x39; ret 0x840f;
0x001187fe: rol dword ptr [rcx+rcx*2], 0x39; ret 0x840f;
0x0011887d: inc dword ptr [rbx+0x3145f8e0]; rol byte ptr [rbp-0x77], cl; rol dword ptr [rcx-0x7d], cl; ret 0x4e08;
0x00118883: rol byte ptr [rbp-0x77], cl; rol dword ptr [rcx-0x7d], cl; ret 0x4e08;
0x00118886: rol dword ptr [rcx-0x7d], cl; ret 0x4e08;
0x00118889: ret 0x4e08;
0x00118891: ret 0xf072;
0x001188b0: jmp qword ptr [rsi-0x39];
0x0011890f: inc dword ptr [rbx-0xc8b0a08]; pop rbx; ret;
0x0011894a: adc eax, 0x48f30148; mov [rbp], ebx; add rsp, 8; pop rbx; pop rbp; ret;
0x00118997: add rbx, rsi; mov [rbp], rbx; add rsp, 8; pop rbx; pop rbp; ret;
0x00118998: add ebx, esi; mov [rbp], rbx; add rsp, 8; pop rbx; pop rbp; ret;
0x0011899a: mov [rbp], rbx; add rsp, 8; pop rbx; pop rbp; ret;
0x0011899b: mov [rbp], ebx; add rsp, 8; pop rbx; pop rbp; ret;
0x001189e2: ret 0xf221;
0x00118a26: adc [rax+0x4c5b1145], ecx; mov eax, esp; pop rbp; pop r12; ret;
0x00118a27: mov [rbp+0x11], al; pop rbx; mov rax, r12; pop rbp; pop r12; ret;
0x00118a28: adc [r11+0x4c], r11d; mov eax, esp; pop rbp; pop r12; ret;
0x00118a29: adc [rbx+0x4c], ebx; mov eax, esp; pop rbp; pop r12; ret;
0x00118a2a: pop rbx; mov rax, r12; pop rbp; pop r12; ret;
0x00118a37: add [rbp+0x31], al; in al, 0x5b; pop rbp; mov rax, r12; pop r12; ret;
0x00118a38: xor r12d, r12d; pop rbx; pop rbp; mov rax, r12; pop r12; ret;
0x00118a39: xor esp, esp; pop rbx; pop rbp; mov rax, r12; pop r12; ret;
0x00118a3a: in al, 0x5b; pop rbp; mov rax, r12; pop r12; ret;
0x00118a3b: pop rbx; pop rbp; mov rax, r12; pop r12; ret;
0x00118a3c: pop rbp; mov rax, r12; pop r12; ret;
0x00118a73: mov ebx, 0x2e66fff1; nop [rax+rax]; lea eax, [rdi+9]; and eax, 0xfffffff8; add eax, 0x10; ret;
0x00118a74: int1; jmp qword ptr [rsi+0x2e];
0x00118a76: nop [rax+rax]; lea eax, [rdi+9]; and eax, 0xfffffff8; add eax, 0x10; ret;
0x00118a77: nop [rax+rax]; lea eax, [rdi+9]; and eax, 0xfffffff8; add eax, 0x10; ret;
0x00118a78: nop [rax+rax]; lea eax, [rdi+9]; and eax, 0xfffffff8; add eax, 0x10; ret;
0x00118a7b: add [rax], al; add [rax], al; add [rbp-0x1f7cf6b9], cl; clc; add eax, 0x10; ret;
0x00118a7c: add [rax], al; add [rax], al; lea eax, [rdi+9]; and eax, 0xfffffff8; add eax, 0x10; ret;
0x00118a7d: add [rax], al; add [rbp-0x1f7cf6b9], cl; clc; add eax, 0x10; ret;
0x00118a7e: add [rax], al; lea eax, [rdi+9]; and eax, 0xfffffff8; add eax, 0x10; ret;
0x00118a7f: add [rbp-0x1f7cf6b9], cl; clc; add eax, 0x10; ret;
0x00118a80: lea eax, [rdi+9]; and eax, 0xfffffff8; add eax, 0x10; ret;
0x00118a83: and eax, 0xfffffff8; add eax, 0x10; ret;
0x00118a85: clc; add eax, 0x10; ret;
0x00118a86: add eax, 0x10; ret;
0x00118a9a: mov qword ptr [rdi], 0x10; xor eax, eax; mov dword ptr [rdi+8], 0x29; mov [rdi+0xc], edx; mov [rsi], rdi; ret;
0x00118a9b: mov dword ptr [rdi], 0x10; xor eax, eax; mov dword ptr [rdi+8], 0x29; mov [rdi+0xc], edx; mov [rsi], rdi; ret;
0x00118a9f: add [rax], al; xor eax, eax; mov dword ptr [rdi+8], 0x29; mov [rdi+0xc], edx; mov [rsi], rdi; ret;
0x00118aa0: add [rcx], dh; rol bh, 0x47; or [rcx], ch; add [rax], al; add [rcx-0x76b7f3a9], cl; ret;
0x00118aa1: xor eax, eax; mov dword ptr [rdi+8], 0x29; mov [rdi+0xc], edx; mov [rsi], rdi; ret;
0x00118aa2: rol bh, 0x47; or [rcx], ch; add [rax], al; add [rcx-0x76b7f3a9], cl; ret;
0x00118aa3: mov dword ptr [rdi+8], 0x29; mov [rdi+0xc], edx; mov [rsi], rdi; ret;
0x00118aa4: or [r9], r13b; add [rax], al; add [rcx-0x76b7f3a9], cl; ret;
0x00118aa5: or [rcx], ch; add [rax], al; add [rcx-0x76b7f3a9], cl; ret;
0x00118aa6: sub [rax], eax; add [rax], al; mov [rdi+0xc], edx; mov [rsi], rdi; ret;
0x00118aa7: add [rax], al; add [rcx-0x76b7f3a9], cl; ret;
0x00118aa8: add [rax], al; mov [rdi+0xc], edx; mov [rsi], rdi; ret;
0x00118aa9: add [rcx-0x76b7f3a9], cl; ret;
0x00118aaa: mov [rdi+0xc], edx; mov [rsi], rdi; ret;
0x00118aab: push rdi; or al, 0x48; mov [rsi], edi; ret;
0x00118aac: or al, 0x48; mov [rsi], edi; ret;
0x00118aad: mov [rsi], rdi; ret;
0x00118aae: mov [rsi], edi; ret;
0x00118aaf: ret;
0x00118ab1: nop [rax]; mov eax, 0xffffffff; ret;
0x00118ab3: add byte ptr [rax], 0; add [rax], al; mov eax, 0xffffffff; ret;
0x00118adb: fsubp st(0), st; iretd;
0x00118aee: and esi, esi; ret;
0x00118afd: adc dh, dh; ret;
0x00118b00: add dh, [rbp+0x45]; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret;
0x00118b02: xor r8d, r8d; add rsp, 8; pop rbx; pop rbp; ret;
0x00118bb9: ret 0x6472;
0x00118c08: add r9b, [r8+0x39]; ret 0x1172;
0x00118c09: add cl, [rax+0x39]; ret 0x1172;
0x00118c0c: ret 0x1172;
0x00118c0f: movzx eax, byte ptr [rdi+1]; lea rax, [rdi+rax+2]; cmp rdx, rax; sbb eax, eax; ret;
0x00118c13: lea rax, [rdi+rax+2]; cmp rdx, rax; sbb eax, eax; ret;
0x00118c14: lea eax, [rdi+rax+2]; cmp rdx, rax; sbb eax, eax; ret;
0x00118c17: add cl, [rax+0x39]; ret 0xc019;
0x00118c18: cmp rdx, rax; sbb eax, eax; ret;
0x00118c19: cmp edx, eax; sbb eax, eax; ret;
0x00118c1a: ret 0xc019;
0x00118c1b: sbb eax, eax; ret;
0x00118c1c: rol bl, 0x66; nop; mov eax, 0xffffffff; ret;
0x00118c66: ret 0x3b72;
0x00118cde: mov [r8], rdi; xor eax, eax; ret;
0x00118cdf: mov [rax], edi; xor eax, eax; ret;
0x00118df3: sub ecx, [rdi]; adc r9d, [rcx-0x1d3eb72e]; add ch, al; sahf; ret;
0x00118df5: adc r9d, [rcx-0x1d3eb72e]; add ch, al; sahf; ret;
0x00118df6: adc ecx, [rcx-0x1d3eb72e]; add ch, al; sahf; ret;
0x00118dfc: add ch, al; sahf; ret;
0x00118dfe: sahf; ret;
0x00118f2e: or al, 0xe8; insb [rdi], dx; ret 0xfff0;
0x00118f30: insb [rdi], dx; ret 0xfff0;
0x00118f5a: ret 0xff46;
0x00118fa4: clc; inc dword ptr [rdi+rcx+0x44]; ret 0x8348;
0x00118fa5: inc dword ptr [rdi+rcx+0x44]; ret 0x8348;
0x00118fac: ror byte ptr [rax+rcx*2], 0x39; enter 0xde75, 0x44; mov eax, eax; ret;
0x00118fb0: enter 0xde75, 0x44; mov eax, eax; ret;
0x00118fb2: fiadd st, word ptr [rcx+rcx*4-0x40]; ret;
0x0011909b: out 0xe8, al; iretd;
0x00119304: sbb eax, ecx; out dx, al; add edi, [rax+2]; sub esi, 1; mov [rdi+1], sil; ret;
0x00119305: shr esi, 3; mov eax, 2; sub esi, 1; mov [rdi+1], sil; ret;
0x00119306: out dx, al; add edi, [rax+2]; sub esi, 1; mov [rdi+1], sil; ret;
0x00119307: add edi, [rax+2]; sub esi, 1; mov [rdi+1], sil; ret;
0x00119308: mov eax, 2; sub esi, 1; mov [rdi+1], sil; ret;
0x00119309: add al, [rax]; add [rax], al; sub esi, 1; mov [rdi+1], sil; ret;
0x0011930b: add [rax], al; sub esi, 1; mov [rdi+1], sil; ret;
0x0011930d: sub esi, 1; mov [rdi+1], sil; ret;
0x00119310: mov [rdi+1], sil; ret;
0x00119311: mov [rdi+1], dh; ret;
0x00119313: add ebx, eax; nop [rax]; mov eax, 2; ret;
0x00119315: nop [rax]; mov eax, 2; ret;
0x0011931a: add [rax], al; add bl, al; xchg ax, ax; mov eax, 0xffffffff; ret;
0x0011931c: add bl, al; xchg ax, ax; mov eax, 0xffffffff; ret;
0x0011931e: xchg ax, ax; mov eax, 0xffffffff; ret;
0x0011933b: xchg esi, eax; ret 0xfe83;
0x0011933c: ret 0xfe83;
0x001193bf: sbb cl, [rcx-0x7d]; ret 0x4502;
0x001193c0: add r10, 2; mov [r10-1], r8b; mov [rax], r10; lea eax, [r9+r8+2]; pop rbx; ret;
0x001193c1: add edx, 2; mov [r10-1], r8b; mov [rax], r10; lea eax, [r9+r8+2]; pop rbx; ret;
0x001193c2: ret 0x4502;
0x001193c3: add al, [rbp-0x78]; dec dword ptr [rcx+r9*4+0x10]; lea eax, [r9+r8+2]; pop rbx; ret;
0x001193c4: mov [r10-1], r8b; mov [rax], r10; lea eax, [r9+r8+2]; pop rbx; ret;
0x001193c5: mov [rdx-1], al; mov [rax], r10; lea eax, [r9+r8+2]; pop rbx; ret;
0x001193c6: dec dword ptr [rcx+r9*4+0x10]; lea eax, [r9+r8+2]; pop rbx; ret;
0x001193c7: dec dword ptr [rcx+rcx*4+0x10]; lea eax, [r9+r8+2]; pop rbx; ret;
0x001193c8: mov [rax], r10; lea eax, [r9+r8+2]; pop rbx; ret;
0x001193c9: mov [rax], edx; lea eax, [r9+r8+2]; pop rbx; ret;
0x001193ca: adc [rbx-0x73], al; add [rdx], r8d; pop rbx; ret;
0x001193cb: lea eax, [r9+r8+2]; pop rbx; ret;
0x001193cc: lea eax, [rcx+rax+2]; pop rbx; ret;
0x001193cd: add [rdx], r8d; pop rbx; ret;
0x001193ce: add [rdx], eax; pop rbx; ret;
0x00119457: nop [rax+rax]; mov eax, 0xffffffff; ret;
0x00119458: nop [rax+rax]; mov eax, 0xffffffff; ret;
0x0011945a: test [rax], al; add [rax], al; add [rax], al; mov eax, 0xffffffff; ret;
0x0011945b: add [rax], al; add [rax], al; add [rax-1], bh; ret;
0x00119464: inc ebx; nop [rax+rax]; mov eax, 0xffffffff; pop rbx; ret;
0x00119466: nop [rax+rax]; mov eax, 0xffffffff; pop rbx; ret;
0x00119467: nop [rax+rax]; mov eax, 0xffffffff; pop rbx; ret;
0x00119468: nop [rax+rax]; mov eax, 0xffffffff; pop rbx; ret;
0x0011946a: test [rax], al; add [rax], al; add [rax], al; mov eax, 0xffffffff; pop rbx; ret;
0x0011946b: add [rax], al; add [rax], al; add [rax-1], bh; pop rbx; ret;
0x001194ad: xchg [rsi-0x7d000000], eax; clc; add [rcx+rcx-0x7b], esi; shl byte ptr [rbp+0x15], 0x44; mov eax, eax; ret;
0x001194b3: clc; add [rcx+rcx-0x7b], esi; shl byte ptr [rbp+0x15], 0x44; mov eax, eax; ret;
0x001194b4: add [rcx+rcx-0x7b], esi; shl byte ptr [rbp+0x15], 0x44; mov eax, eax; ret;
0x001194b6: or [rbp+0x441575c0], eax; mov eax, eax; ret;
0x001194b8: shl byte ptr [rbp+0x15], 0x44; mov eax, eax; ret;
0x001194ba: adc eax, 0xc3c08944; nop; movsxd rdx, edx; mov eax, r8d; mov byte ptr [rdi+rdx], 0; ret;
0x001194bd: rol bl, 0x90; movsxd rdx, edx; mov eax, r8d; mov byte ptr [rdi+rdx], 0; ret;
0x001194bf: nop; movsxd rdx, edx; mov eax, r8d; mov byte ptr [rdi+rdx], 0; ret;
0x001194c0: movsxd rdx, edx; mov eax, r8d; mov byte ptr [rdi+rdx], 0; ret;
0x001194c1: movsxd edx, edx; mov eax, r8d; mov byte ptr [rdi+rdx], 0; ret;
0x001194c2: rol byte ptr [rcx+rcx*4-0x40], cl; mov byte ptr [rdi+rdx], 0; ret;
0x001194c3: mov eax, r8d; mov byte ptr [rdi+rdx], 0; ret;
0x001194c4: mov eax, eax; mov byte ptr [rdi+rdx], 0; ret;
0x001194c6: mov byte ptr [rdi+rdx], 0; ret;
0x001195ab: add [rax], al; add [rax], al; add [rcx], bh; iretd;
0x001195c3: ret 0x8901;
0x001195df: add cl, [rcx-0x17fbf36]; add [rax+rcx*8+0x39], esi; iretd;
0x001195e5: add [rax+rcx*8+0x39], esi; iretd;
0x001195ef: movzx edx, byte ptr [rax+1]; add rax, 2; mov [r8], edx; mov [r9], rax; mov eax, ecx; ret;
0x001195f2: add [rax-0x7d], ecx; rol byte ptr [rdx], 0x41; mov [rax], edx; mov [r9], rax; mov eax, ecx; ret;
0x001195f3: add rax, 2; mov [r8], edx; mov [r9], rax; mov eax, ecx; ret;
0x001195f4: add eax, 2; mov [r8], edx; mov [r9], rax; mov eax, ecx; ret;
0x001195f5: rol byte ptr [rdx], 0x41; mov [rax], edx; mov [r9], rax; mov eax, ecx; ret;
0x001195f7: mov [r8], edx; mov [r9], rax; mov eax, ecx; ret;
0x001195f8: mov [rax], edx; mov [r9], rax; mov eax, ecx; ret;
0x00119623: add [rax], al; add [rcx], bh; iretd;
0x00119625: add [rcx], bh; iretd;
0x00119631: ret 0x4501;
0x00119639: sar dword ptr [rcx], 1; iretd;
0x00119640: ret 0x14c;
0x0011965a: fistp qword ptr [rcx], st; iretd;
0x0011965f: add rax, 2; mov [r8], ebx; pop rbx; mov [r9], rax; mov eax, ecx; ret;
0x00119660: add eax, 2; mov [r8], ebx; pop rbx; mov [r9], rax; mov eax, ecx; ret;
0x00119661: rol byte ptr [rdx], 0x41; mov [rax], ebx; pop rbx; mov [r9], rax; mov eax, ecx; ret;
0x00119662: add al, [rcx-0x77]; sbb [rbx+0x49], bl; mov [rcx], eax; mov eax, ecx; ret;
0x00119663: mov [r8], ebx; pop rbx; mov [r9], rax; mov eax, ecx; ret;
0x00119664: mov [rax], ebx; pop rbx; mov [r9], rax; mov eax, ecx; ret;
0x00119665: sbb [rbx+0x49], bl; mov [rcx], eax; mov eax, ecx; ret;
0x00119666: pop rbx; mov [r9], rax; mov eax, ecx; ret;
0x00119667: mov [r9], rax; mov eax, ecx; ret;
0x00119668: mov [rcx], eax; mov eax, ecx; ret;
0x0011966a: mov eax, ecx; ret;
0x00119676: shr ebx, 1; lodsd [rsi]; nop [rax]; mov eax, 0xffffffff; pop rbx; ret;
0x00119678: lodsd [rsi]; nop [rax]; mov eax, 0xffffffff; pop rbx; ret;
0x00119679: nop [rax]; mov eax, 0xffffffff; pop rbx; ret;
0x0011967b: add byte ptr [rax], 0; add [rax], al; mov eax, 0xffffffff; pop rbx; ret;
0x0011967c: add [rax], al; add [rax], al; mov eax, 0xffffffff; pop rbx; ret;
0x0011967d: add [rax], al; add [rax-1], bh; pop rbx; ret;
0x0011967e: add [rax], al; mov eax, 0xffffffff; pop rbx; ret;
0x0011967f: add [rax-1], bh; pop rbx; ret;
0x00119680: mov eax, 0xffffffff; pop rbx; ret;
0x00119684: call far fword ptr [rbx-0x3d];
0x0011968b: add [rax], al; add [rax], al; add [rax+0x63], cl; ret 0xc741;
0x0011968d: add [rax], al; add [rax+0x63], cl; ret 0xc741;
0x0011968f: add [rax+0x63], cl; ret 0xc741;
0x00119692: ret 0xc741;
0x00119693: mov dword ptr [r8], 0; pop rbx; add r10, rax; mov eax, edx; mov [r9], r10; ret;
0x00119694: mov dword ptr [rax], 0; pop rbx; add r10, rax; mov eax, edx; mov [r9], r10; ret;
0x00119697: add [rax], al; add [rbx+0x49], bl; add edx, eax; mov eax, edx; mov [r9], r10; ret;
0x00119698: add [rax], al; pop rbx; add r10, rax; mov eax, edx; mov [r9], r10; ret;
0x00119699: add [rbx+0x49], bl; add edx, eax; mov eax, edx; mov [r9], r10; ret;
0x0011969a: pop rbx; add r10, rax; mov eax, edx; mov [r9], r10; ret;
0x0011969b: add r10, rax; mov eax, edx; mov [r9], r10; ret;
0x0011969c: add edx, eax; mov eax, edx; mov [r9], r10; ret;
0x0011969d: ret 0xd089;
0x0011969e: mov eax, edx; mov [r9], r10; ret;
0x0011969f: ror byte ptr [rbp-0x77], 1; adc ebx, eax; mov eax, 0xffffffff; ret;
0x001196a0: mov [r9], r10; ret;
0x001196a2: adc ebx, eax; mov eax, 0xffffffff; ret;
0x001196cf: add rsp, 8; lea eax, [rbx+rbp]; pop rbx; pop rbp; ret;
0x001196d0: add esp, 8; lea eax, [rbx+rbp]; pop rbx; pop rbp; ret;
0x001196d2: or [rbp+0x5d5b2b04], cl; ret;
0x001196d3: lea eax, [rbx+rbp]; pop rbx; pop rbp; ret;
0x001196d4: add al, 0x2b; pop rbx; pop rbp; ret;
0x001196d5: sub ebx, [rbx+0x5d]; ret;
0x001196e1: rol byte ptr [rbp-0x76ee8a01], 0xf2; shl edx, 4; add edx, 8; cmp esi, 0x80; cmovb eax, edx; ret;
0x001196e5: adc [rcx+0x4e2c1f2], ecx; add edx, 8; cmp esi, 0x80; cmovb eax, edx; ret;
0x001196e6: mov edx, esi; shl edx, 4; add edx, 8; cmp esi, 0x80; cmovb eax, edx; ret;
0x001196e8: shl edx, 4; add edx, 8; cmp esi, 0x80; cmovb eax, edx; ret;
0x001196ea: add al, 0x83; ret 0x8108;
0x001196eb: add edx, 8; cmp esi, 0x80; cmovb eax, edx; ret;
0x001196ec: ret 0x8108;
0x001196ed: or [rcx+0x80fe], al; add [rdi], cl; ret 0xfc3;
0x001196ee: cmp esi, 0x80; cmovb eax, edx; ret;
0x001196ef: inc byte ptr [rax+0xf000000]; ret 0xfc3;
0x001196f0: add byte ptr [rax], 0; add [rdi], cl; ret 0xfc3;
0x001196f1: add [rax], al; add [rdi], cl; ret 0xfc3;
0x001196f2: add [rax], al; cmovb eax, edx; ret;
0x001196f3: add [rdi], cl; ret 0xfc3;
0x001196f4: cmovb eax, edx; ret;
0x0011974d: add esi, ebx; stosq [rdi]; mov [r8+1], dl; mov rax, r8; mov byte ptr [r8+2], 0; ret;
0x0011974f: stosq [rdi]; mov [r8+1], dl; mov rax, r8; mov byte ptr [r8+2], 0; ret;
0x00119750: stosd [rdi]; mov [r8+1], dl; mov rax, r8; mov byte ptr [r8+2], 0; ret;
0x00119751: mov [r8+1], dl; mov rax, r8; mov byte ptr [r8+2], 0; ret;
0x00119752: mov [rax+1], dl; mov rax, r8; mov byte ptr [r8+2], 0; ret;
0x00119753: push rax; add [rcx+rcx*4-0x40], ecx; mov byte ptr [r8+2], 0; ret;
0x00119754: add [rcx+rcx*4-0x40], ecx; mov byte ptr [r8+2], 0; ret;
0x00119755: mov rax, r8; mov byte ptr [r8+2], 0; ret;
0x00119756: mov eax, eax; mov byte ptr [r8+2], 0; ret;
0x00119757: rol byte ptr [rcx-0x3a], 0x40; add al, [rax]; ret;
0x00119758: mov byte ptr [r8+2], 0; ret;
0x00119759: mov byte ptr [rax+2], 0; ret;
0x00119782: shl rdx, 4; xor eax, eax; mov [rdi+3], cl; movdqu xmm0, [rsi]; movups [rdi+rdx+8], xmm0; ret;
0x00119783: shl edx, 4; xor eax, eax; mov [rdi+3], cl; movdqu xmm0, [rsi]; movups [rdi+rdx+8], xmm0; ret;
0x00119786: xor eax, eax; mov [rdi+3], cl; movdqu xmm0, [rsi]; movups [rdi+rdx+8], xmm0; ret;
0x00119788: mov [rdi+3], cl; movdqu xmm0, [rsi]; movups [rdi+rdx+8], xmm0; ret;
0x00119789: add r14, r11; movq mm0, [rsi]; movups [rdi+rdx+8], xmm0; ret;
0x0011978a: add esi, ebx; movq mm0, [rsi]; movups [rdi+rdx+8], xmm0; ret;
0x0011978b: movdqu xmm0, [rsi]; movups [rdi+rdx+8], xmm0; ret;
0x0011978c: movq mm0, [rsi]; movups [rdi+rdx+8], xmm0; ret;
0x0011978f: movups [rdi+rdx+8], xmm0; ret;
0x00119790: adc [rdi+rdx+8], eax; ret;
0x00119793: or bl, al; nop [rax]; mov eax, 0xffffffff; ret;
0x001197c6: ret 0x8d41;
0x0011980d: shl r9, 4; movdqu xmm2, [rdi+r9+8]; movups [rsi+r9+8], xmm2; mov [rsi+3], r8b; xor eax, eax; ret;
0x0011980e: shl ecx, 4; movdqu xmm2, [rdi+r9+8]; movups [rsi+r9+8], xmm2; mov [rsi+3], r8b; xor eax, eax; ret;
0x00119810: add al, 0xf3; movq mm2, [rdi+r9+8]; movups [rsi+r9+8], xmm2; mov [rsi+3], r8b; xor eax, eax; ret;
0x00119811: movdqu xmm2, [rdi+r9+8]; movups [rsi+r9+8], xmm2; mov [rsi+3], r8b; xor eax, eax; ret;
0x00119812: movq mm2, [rdi+r9+8]; movups [rsi+r9+8], xmm2; mov [rsi+3], r8b; xor eax, eax; ret;
0x00119813: movq mm2, [rdi+rcx+8]; movups [rsi+r9+8], xmm2; mov [rsi+3], r8b; xor eax, eax; ret;
0x00119815: push rsp; invd; movups [rsi+r9+8], xmm2; mov [rsi+3], r8b; xor eax, eax; ret;
0x00119816: invd; movups [rsi+r9+8], xmm2; mov [rsi+3], r8b; xor eax, eax; ret;
0x00119817: or [rdx+0xf], al; adc [rsi+rcx+8], edx; mov [rsi+3], r8b; xor eax, eax; ret;
0x00119818: movups [rsi+r9+8], xmm2; mov [rsi+3], r8b; xor eax, eax; ret;
0x00119819: movups [rsi+rcx+8], xmm2; mov [rsi+3], r8b; xor eax, eax; ret;
0x0011981a: adc [rsi+rcx+8], edx; mov [rsi+3], r8b; xor eax, eax; ret;
0x0011981e: mov [rsi+3], r8b; xor eax, eax; ret;
0x0011981f: mov [rsi+3], al; xor eax, eax; ret;
0x00119833: add [rbp+0x12], dh; movzx eax, byte ptr [rdi+1]; shl eax, 3; shr rax, 4; and eax, 0x7f; ret;
0x00119836: movzx eax, byte ptr [rdi+1]; shl eax, 3; shr rax, 4; and eax, 0x7f; ret;
0x0011983a: shl eax, 3; shr rax, 4; and eax, 0x7f; ret;
0x0011983d: shr rax, 4; and eax, 0x7f; ret;
0x0011983e: shr eax, 4; and eax, 0x7f; ret;
0x00119841: and eax, 0x7f; ret;
0x00119845: nop [rax]; mov eax, 0xffffffff; ret;
0x0011986d: or [rax-0x3f], ecx; out 4, al; lea r8, [rdi+rsi+8]; mov rax, r8; ret;
0x0011986e: shl rsi, 4; lea r8, [rdi+rsi+8]; mov rax, r8; ret;
0x0011986f: shl esi, 4; lea r8, [rdi+rsi+8]; mov rax, r8; ret;
0x00119870: out 4, al; lea r8, [rdi+rsi+8]; mov rax, r8; ret;
0x00119871: add al, 0x4c; lea eax, [rdi+rsi+8]; mov rax, r8; ret;
0x00119872: lea r8, [rdi+rsi+8]; mov rax, r8; ret;
0x00119873: lea eax, [rdi+rsi+8]; mov rax, r8; ret;
0x00119876: or [rcx+rcx*4-0x40], cl; ret;
0x001198f4: add [rax], al; add [rbp+0x3c], dh; add rsp, 0x18; pop rbx; pop rbp; ret;
0x001198f6: add [rbp+0x3c], dh; add rsp, 0x18; pop rbx; pop rbp; ret;
0x001198f8: cmp al, 0x48; add esp, 0x18; pop rbx; pop rbp; ret;
0x00119937: cmp al, 0xff; jmp qword ptr [rsi+0xf];
0x00119984: add [rax], al; add [rbp+0x13], dh; add rsp, 0x20; pop rbp; ret;
0x00119986: add [rbp+0x13], dh; add rsp, 0x20; pop rbp; ret;
0x00119989: add rsp, 0x20; pop rbp; ret;
0x0011998a: add esp, 0x20; pop rbp; ret;
0x001199eb: lodsb [rsi]; int1; jmp qword ptr [rsi-0x70];
0x001199ec: int1; jmp qword ptr [rsi-0x70];
0x00119a13: ret 0x4801;
0x00119a14: add [rax-0x7b], ecx; sar byte ptr [rax+0xe], cl; mov rax, rdx; movsxd rdx, ecx; ret;
0x00119a17: sar byte ptr [rax+0xe], cl; mov rax, rdx; movsxd rdx, ecx; ret;
0x00119a1a: mov rax, rdx; movsxd rdx, ecx; ret;
0x00119a1b: mov eax, edx; movsxd rdx, ecx; ret;
0x00119a1c: ror byte ptr [rax+0x63], 1; rol ebx, 1; nop [rax]; mov rax, 0xffffffffffffffff; mov rdx, 0xffffffffffffffff; ret;
0x00119a1d: movsxd rdx, ecx; ret;
0x00119a1e: movsxd edx, ecx; ret;
0x00119a1f: rol ebx, 1; nop [rax]; mov rax, 0xffffffffffffffff; mov rdx, 0xffffffffffffffff; ret;
0x00119a21: nop [rax]; mov rax, 0xffffffffffffffff; mov rdx, 0xffffffffffffffff; ret;
0x00119a23: add byte ptr [rax], 0; add [rax], al; mov rax, 0xffffffffffffffff; mov rdx, 0xffffffffffffffff; ret;
0x00119a24: add [rax], al; add [rax], al; mov rax, 0xffffffffffffffff; mov rdx, 0xffffffffffffffff; ret;
0x00119a26: add [rax], al; mov rax, 0xffffffffffffffff; mov rdx, 0xffffffffffffffff; ret;
0x00119a28: mov rax, 0xffffffffffffffff; mov rdx, 0xffffffffffffffff; ret;
0x00119a29: mov eax, 0xffffffff; mov rdx, 0xffffffffffffffff; ret;
0x00119a2e: dec dword ptr [rax-0x39]; ret 0xffff;
0x00119a2f: mov rdx, 0xffffffffffffffff; ret;
0x00119a30: mov edx, 0xffffffff; ret;
0x00119a92: imul edx, 0x3e8; mov eax, edx; mov edx, 0x7fffffff; add eax, ecx; cmovs eax, edx; ret;
0x00119a96: add [rax], al; mov eax, edx; mov edx, 0x7fffffff; add eax, ecx; cmovs eax, edx; ret;
0x00119a98: mov eax, edx; mov edx, 0x7fffffff; add eax, ecx; cmovs eax, edx; ret;
0x00119a99: sar byte ptr [rdx+0x7fffffff], 1; add eax, ecx; cmovs eax, edx; ret;
0x00119a9a: mov edx, 0x7fffffff; add eax, ecx; cmovs eax, edx; ret;
0x00119a9f: add eax, ecx; cmovs eax, edx; ret;
0x00119aa0: enter 0x480f, 0xc2; ret;
0x00119aa1: cmovs eax, edx; ret;
0x00119aa3: ret 0xfc3;
0x00119aa5: nop [rax]; mov eax, 0x7fffffff; ret;
0x00119aa7: add [rax+0x7fffffff], bh; ret;
0x00119aa8: mov eax, 0x7fffffff; ret;
0x00119ab7: add [rax-0x7d], cl; ret 0x8d01;
0x00119aba: ret 0x8d01;
0x00119b7e: scasb [rdi]; fld st, qword ptr [rcx]; add [rax-0x77], cl; ret 0x8548;
0x00119b7f: fld st, qword ptr [rcx]; add [rax-0x77], cl; ret 0x8548;
0x00119bb8: mov [r12+0x10], rax; mov rax, r12; pop rbx; pop rbp; pop r12; ret;
0x00119bb9: mov [rsp+0x10], eax; mov rax, r12; pop rbx; pop rbp; pop r12; ret;
0x00119bbb: and al, 0x10; mov rax, r12; pop rbx; pop rbp; pop r12; ret;
0x00119bbc: adc [rcx+rcx*4-0x20], cl; pop rbx; pop rbp; pop r12; ret;
0x00119bd7: cmp eax, 0x4cfff0b7; mov eax, esp; pop rbx; pop rbp; pop r12; ret;
0x00119bd8: mov bh, 0xf0; dec dword ptr [rcx+rcx*4-0x20]; pop rbx; pop rbp; pop r12; ret;
0x00119bda: dec dword ptr [rcx+rcx*4-0x20]; pop rbx; pop rbp; pop r12; ret;
0x00119c6e: xor edx, edx; mov rdi, rbp; mov qword ptr [rsp], 0; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00119c6f: ror byte ptr [rax-0x77], cl; out dx, eax; mov qword ptr [rsp], 0; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00119c70: mov rdi, rbp; mov qword ptr [rsp], 0; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00119c71: mov edi, ebp; mov qword ptr [rsp], 0; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00119c72: out dx, eax; mov qword ptr [rsp], 0; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00119c73: mov qword ptr [rsp], 0; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00119c74: mov dword ptr [rsp], 0; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00119c75: add al, 0x24; add [rax], al; add [rax], al; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00119c76: and al, 0; add [rax], al; add [rax-0x3f], cl; enter 0x6411, 0x48; xor eax, [0x30]; call rax;
0x00119c77: add [rax], al; add [rax], al; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00119c78: add [rax], al; add [rax-0x3f], cl; enter 0x6411, 0x48; xor eax, [0x30]; call rax;
0x00119c79: add [rax], al; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x00119d0e: cmp edi, edi; jmp qword ptr [rsi+0x66];
0x00119d4c: mov rsi, rsp; mov rdi, rbp; ror rax, 0x11; xor rax, fs:[0x30]; mov qword ptr [rsp], 0; call rax;
0x00119d4d: mov esi, esp; mov rdi, rbp; ror rax, 0x11; xor rax, fs:[0x30]; mov qword ptr [rsp], 0; call rax;
0x00119d4e: out 0x48, al; mov edi, ebp; ror rax, 0x11; xor rax, fs:[0x30]; mov qword ptr [rsp], 0; call rax;
0x00119d4f: mov rdi, rbp; ror rax, 0x11; xor rax, fs:[0x30]; mov qword ptr [rsp], 0; call rax;
0x00119d50: mov edi, ebp; ror rax, 0x11; xor rax, fs:[0x30]; mov qword ptr [rsp], 0; call rax;
0x00119d51: out dx, eax; ror rax, 0x11; xor rax, fs:[0x30]; mov qword ptr [rsp], 0; call rax;
0x00119d52: ror rax, 0x11; xor rax, fs:[0x30]; mov qword ptr [rsp], 0; call rax;
0x00119d53: ror eax, 0x11; xor rax, fs:[0x30]; mov qword ptr [rsp], 0; call rax;
0x00119d54: enter 0x6411, 0x48; xor eax, [0x30]; mov qword ptr [rsp], 0; call rax;
0x00119d55: adc [rax+rcx*2+0x33], esp; add al, 0x25; xor [rax], al; add [rax], al; mov qword ptr [rsp], 0; call rax;
0x00119d56: xor rax, fs:[0x30]; mov qword ptr [rsp], 0; call rax;
0x00119d57: xor rax, [0x30]; mov qword ptr [rsp], 0; call rax;
0x00119d58: xor eax, [0x30]; mov qword ptr [rsp], 0; call rax;
0x00119d59: add al, 0x25; xor [rax], al; add [rax], al; mov qword ptr [rsp], 0; call rax;
0x00119d5a: and eax, 0x30; mov qword ptr [rsp], 0; call rax;
0x00119d5b: xor [rax], al; add [rax], al; mov qword ptr [rsp], 0; call rax;
0x00119d5c: add [rax], al; add [rax-0x39], cl; add al, 0x24; add [rax], al; add [rax], al; call rax;
0x00119d5d: add [rax], al; mov qword ptr [rsp], 0; call rax;
0x00119d5e: add [rax-0x39], cl; add al, 0x24; add [rax], al; add [rax], al; call rax;
0x00119d5f: mov qword ptr [rsp], 0; call rax;
0x00119d60: mov dword ptr [rsp], 0; call rax;
0x00119d61: add al, 0x24; add [rax], al; add [rax], al; call rax;
0x00119d63: add [rax], al; add [rax], al; call rax;
0x00119d82: add [rax], al; add [rbp+0x5a], dh; add rsp, 0x18; pop rbx; pop rbp; ret;
0x00119d84: add [rbp+0x5a], dh; add rsp, 0x18; pop rbx; pop rbp; ret;
0x00119d86: pop rdx; add rsp, 0x18; pop rbx; pop rbp; ret;
0x00119de3: cmp bh, bh; jmp qword ptr [rsi+0x2e];
0x00119e9d: rol byte ptr [rcx], 0x84; fisttp dword ptr [rdi], st; ret 0x8b48;
0x00119ea0: fisttp dword ptr [rdi], st; ret 0x8b48;
0x0011a057: shl byte ptr [rsi+rcx+0x4c], 0x89; iretd;
0x0011a05f: mov dl, 0xf0; jmp qword ptr [rsi+0xf];
0x0011a0a3: add ebx, ebp; ret 0x2e66;
0x0011a16c: mov r8d, 0x45894466; rol esi, 0x45; ret;
0x0011a16d: mov eax, 0x45894466; rol esi, 0x45; ret;
0x0011a171: rol r14d, 0x45; ret;
0x0011a172: rol esi, 0x45; ret;
0x0011a3cc: add al, 0x85; test byte ptr [rdi], 0x85; ret;
0x0011a3ce: test byte ptr [rdi], 0x85; ret;
0x0011a498: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xa9166]; syscall;
0x0011a4a2: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xa9166; syscall;
0x0011a4a8: add [rax], al; add [rax-0x73], cl; cmp eax, 0xa9166; syscall;
0x0011a4aa: add [rax-0x73], cl; cmp eax, 0xa9166; syscall;
0x0011a4ad: cmp eax, 0xa9166; syscall;
0x0011a4ae: xchg cx, ax; or al, [rax]; syscall;
0x0011a4af: xchg ecx, eax; or al, [rax]; syscall;
0x0011a4e2: cmp edx, 0xffffffff; jmp qword ptr [rsi+0x2e];
0x0011a556: add [rcx+rcx*4+0x3d], cl; ret 0xa90;
0x0011a55a: ret 0xa90;
0x0011a708: push rdi; sub dword ptr [rip+0xa8f08], 1; add rsp, 8; pop rbx; pop rbp; ret;
0x0011a709: sub dword ptr [rip+0xa8f08], 1; add rsp, 8; pop rbx; pop rbp; ret;
0x0011a70b: or [rdi+0x4801000a], cl; add esp, 8; pop rbx; pop rbp; ret;
0x0011a70e: add [rcx], al; add rsp, 8; pop rbx; pop rbp; ret;
0x0011a717: nop [rax+rax]; ret;
0x0011a76c: mov [0x1bad23145], eax; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xa8e92]; syscall;
0x0011a76d: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xa9166]; syscall;
0x0011a76e: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xa9166]; syscall;
0x0011a76f: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xa9166]; syscall;
0x0011a770: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xa9166]; syscall;
0x0011a771: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xa9166]; syscall;
0x0011a772: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xa9166]; syscall;
0x0011a773: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xa9166]; syscall;
0x0011a774: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xa9166]; syscall;
0x0011a775: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xa9166]; syscall;
0x0011a776: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xa8e92; syscall;
0x0011a777: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xa9166]; syscall;
0x0011a778: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xa9166]; syscall;
0x0011a779: add [rax+0xca], bh; lea rdi, [rip+0xa9166]; syscall;
0x0011a77a: mov eax, 0xca; lea rdi, [rip+0xa9166]; syscall;
0x0011a77c: add [rax], al; add [rax-0x73], cl; cmp eax, 0xa8e92; syscall;
0x0011a77d: add [rax], al; lea rdi, [rip+0xa9166]; syscall;
0x0011a77e: add [rax-0x73], cl; cmp eax, 0xa8e92; syscall;
0x0011a77f: lea rdi, [rip+0xa9166]; syscall;
0x0011a780: lea edi, [rip+0xa9166]; syscall;
0x0011a781: cmp eax, 0xa8e92; syscall;
0x0011a8c5: cmovs eax, [rbx+0x45c6f0e0]; ret;
0x0011aa67: add [rdi], cl; mov bh, 0x4e; adc cl, [rbp-0x2ff6f]; jmp qword ptr [rsi-0x7d];
0x0011aa69: mov bh, 0x4e; adc cl, [rbp-0x2ff6f]; jmp qword ptr [rsi-0x7d];
0x0011aa6a: adc r9b, [rbp-0x2ff6f]; jmp qword ptr [rsi-0x7d];
0x0011aa6b: adc cl, [rbp-0x2ff6f]; jmp qword ptr [rsi-0x7d];
0x0011aa74: cli; add [rcx+0xf], eax; xchg edi, eax; ret 0xd231;
0x0011aa75: add [rcx+0xf], eax; xchg edi, eax; ret 0xd231;
0x0011aa78: xchg edi, eax; ret 0xd231;
0x0011aa79: ret 0xd231;
0x0011aa7d: cmp ecx, 0x4e8b0308; adc al, 0xf; xchg ebp, eax; ret 0x2144;
0x0011aa80: add ecx, [rbx-0x6af0ebb2]; ret 0x2144;
0x0011aa83: adc al, 0xf; xchg ebp, eax; ret 0x2144;
0x0011aa85: xchg ebp, eax; ret 0x2144;
0x0011aa86: ret 0x2144;
0x0011aa9f: jmp qword ptr [rbx];
0x0011ab4e: sub bh, bh; jmp qword ptr [rsi+0x2e];
0x0011aceb: add rsp, 0x168; pop rbx; pop rbp; pop r12; pop r13; ret;
0x0011acec: add esp, 0x168; pop rbx; pop rbp; pop r12; pop r13; ret;
0x0011acee: push 0x5b000001; pop rbp; pop r12; pop r13; ret;
0x0011acef: add [rax], eax; add [rbx+0x5d], bl; pop r12; pop r13; ret;
0x0011af0c: add [rdi+2], bh; sar rdx, 4; mov [rbx+0x10], rax; mov eax, 0x14; add edx, 1; syscall;
0x0011af0d: mov edi, 2; sar rdx, 4; mov [rbx+0x10], rax; mov eax, 0x14; add edx, 1; syscall;
0x0011af10: add [rax], al; sar rdx, 4; mov [rbx+0x10], rax; mov eax, 0x14; add edx, 1; syscall;
0x0011af12: sar rdx, 4; mov [rbx+0x10], rax; mov eax, 0x14; add edx, 1; syscall;
0x0011af13: sar edx, 4; mov [rbx+0x10], rax; mov eax, 0x14; add edx, 1; syscall;
0x0011af14: cli; add al, 0x48; mov [rbx+0x10], eax; mov eax, 0x14; add edx, 1; syscall;
0x0011af15: add al, 0x48; mov [rbx+0x10], eax; mov eax, 0x14; add edx, 1; syscall;
0x0011af16: mov [rbx+0x10], rax; mov eax, 0x14; add edx, 1; syscall;
0x0011af17: mov [rbx+0x10], eax; mov eax, 0x14; add edx, 1; syscall;
0x0011af18: adc [r8+0x14], dil; add edx, 1; syscall;
0x0011af19: adc [rax+0x14], bh; add edx, 1; syscall;
0x0011af1a: mov eax, 0x14; add edx, 1; syscall;
0x0011af1b: adc al, 0; add [rax], al; add edx, 1; syscall;
0x0011af1d: add [rax], al; add edx, 1; syscall;
0x0011af1f: add edx, 1; syscall;
0x0011af2f: add [rax], al; add [rbp+0x3c], dh; add rsp, 0x58; pop rbx; pop rbp; ret;
0x0011af31: add [rbp+0x3c], dh; add rsp, 0x58; pop rbx; pop rbp; ret;
0x0011af33: cmp al, 0x48; add esp, 0x58; pop rbx; pop rbp; ret;
0x0011af34: add rsp, 0x58; pop rbx; pop rbp; ret;
0x0011af35: add esp, 0x58; pop rbx; pop rbp; ret;
0x0011af37: pop rax; pop rbx; pop rbp; ret;
0x0011b112: add [rax], al; add [rbp+0x16], dh; add rsp, 0x20; pop rbx; ret;
0x0011b114: add [rbp+0x16], dh; add rsp, 0x20; pop rbx; ret;
0x0011b12e: out dx, al; and al, 0xff; jmp qword ptr [rsi+0x66];
0x0011b12f: and al, 0xff; jmp qword ptr [rsi+0x66];
0x0011b172: stosb [rdi]; and al, 0xff; jmp qword ptr [rsi+0x2e];
0x0011b173: and al, 0xff; jmp qword ptr [rsi+0x2e];
0x0011b2f9: ret 0x1b9;
0x0011b3fe: call qword ptr [rax+0x69058b48];
0x0011b41e: call qword ptr [rax+0x7406fd83];
0x0011b46e: ret 0x482e;
0x0011b4a6: cmp cl, [rax-0x77]; ror byte ptr [rax-0x7d], 1; ret 0xc601;
0x0011b4a9: ror byte ptr [rax-0x7d], 1; ret 0xc601;
0x0011b4ac: ret 0xc601;
0x0011b4e3: cmp cl, [rax-0x7d]; rol byte ptr [rcx], 0xe9; iretd;
0x0011b4e6: rol byte ptr [rcx], 0xe9; iretd;
0x0011b4e7: add ecx, ebp; iretd;
0x0011b787: add cl, [r8+0x39]; ret;
0x0011b788: add cl, [rax+0x39]; ret;
0x0011b817: and [rbx+0x33740aff], al; mov rax, [rip+0xa264c]; mov dword ptr fs:[rax], 0x61; mov eax, 0xffffffff; ret;
0x0011b81a: or dh, [rbx+rsi+0x48]; mov eax, [rip+0xa264c]; mov dword ptr fs:[rax], 0x61; mov eax, 0xffffffff; ret;
0x0011b81c: xor ecx, [rax-0x75]; add eax, 0xa264c; mov dword ptr fs:[rax], 0x61; mov eax, 0xffffffff; ret;
0x0011b81d: mov rax, [rip+0xa264c]; mov dword ptr fs:[rax], 0x61; mov eax, 0xffffffff; ret;
0x0011b81e: mov eax, [rip+0xa264c]; mov dword ptr fs:[rax], 0x61; mov eax, 0xffffffff; ret;
0x0011b81f: add eax, 0xa264c; mov dword ptr fs:[rax], 0x61; mov eax, 0xffffffff; ret;
0x0011b821: or al, [rax]; mov dword ptr fs:[rax], 0x61; mov eax, 0xffffffff; ret;
0x0011b822: or al, [rax]; mov dword ptr fs:[rax], 0x61; mov eax, 0xffffffff; ret;
0x0011b824: mov dword ptr fs:[rax], 0x61; mov eax, 0xffffffff; ret;
0x0011b825: mov dword ptr [rax], 0x61; mov eax, 0xffffffff; ret;
0x0011b826: add [rcx], ah; add [rax], al; mov eax, 0xffffffff; ret;
0x0011b885: mov dword ptr fs:[rax], 0x61; mov eax, 0xffffffff; pop rbx; pop rbp; pop r12; ret;
0x0011b886: mov dword ptr [rax], 0x61; mov eax, 0xffffffff; pop rbx; pop rbp; pop r12; ret;
0x0011b889: add [rax], al; add [rax-1], bh; pop rbx; pop rbp; pop r12; ret;
0x0011b88a: add [rax], al; mov eax, 0xffffffff; pop rbx; pop rbp; pop r12; ret;
0x0011b88b: add [rax-1], bh; pop rbx; pop rbp; pop r12; ret;
0x0011b88c: mov eax, 0xffffffff; pop rbx; pop rbp; pop r12; ret;
0x0011b95f: enter 0x8841, 4; adc [rax-0x7d], cl; ret 0xf01;
0x0011b963: adc [rax-0x7d], cl; ret 0xf01;
0x0011b990: add [r8+r8*8-0x76bb1f8b], r8; rol bl, 1; nop [rax+rax]; xor r10d, r10d; mov eax, r10d; ret;
0x0011b991: add [rax+rax*8-0x76bb1f8b], eax; rol bl, 1; nop [rax+rax]; xor r10d, r10d; mov eax, r10d; ret;
0x0011b993: shl byte ptr [rbp-0x20], 0x44; mov eax, edx; ret;
0x0011b998: rol bl, 1; nop [rax+rax]; xor r10d, r10d; mov eax, r10d; ret;
0x0011b99a: nop [rax+rax]; xor r10d, r10d; mov eax, r10d; ret;
0x0011b99b: nop [rax+rax]; xor r10d, r10d; mov eax, r10d; ret;
0x0011b99d: add [rax], r8b; xor r10d, r10d; mov eax, r10d; ret;
0x0011b99e: add [rax], al; xor r10d, r10d; mov eax, r10d; ret;
0x0011b99f: add [rbp+0x31], al; rol byte ptr [rcx+rcx*4-0x30], cl; ret;
0x0011b9a0: xor r10d, r10d; mov eax, r10d; ret;
0x0011b9a1: xor edx, edx; mov eax, r10d; ret;
0x0011b9a2: rol byte ptr [rcx+rcx*4-0x30], cl; ret;
0x0011b9a3: mov eax, r10d; ret;
0x0011b9c0: add [rax], al; add [rdi+rcx+0x44], cl; rol byte ptr [rcx+0xffff], 1; add [rdi+rcx+0x4e], al; iretd;
0x0011b9c2: add [rdi+rcx+0x44], cl; rol byte ptr [rcx+0xffff], 1; add [rdi+rcx+0x4e], al; iretd;
0x0011b9c6: rol byte ptr [rcx+0xffff], 1; add [rdi+rcx+0x4e], al; iretd;
0x0011b9ca: add [rax], al; add [rdi+rcx+0x4e], al; iretd;
0x0011b9cc: add [rdi+rcx+0x4e], al; iretd;
0x0011ba31: mov ebx, 0xc641; mov rax, r10; ret;
0x0011ba32: mov byte ptr [r8], 0; mov rax, r10; ret;
0x0011ba33: mov byte ptr [rax], 0; mov rax, r10; ret;
0x0011ba34: add [rax], al; mov rax, r10; ret;
0x0011ba35: add [rcx+rcx*4-0x30], cl; ret;
0x0011ba36: mov rax, r10; ret;
0x0011ba38: rol bl, 1; nop [rax+rax]; mov r8, r10; mov rax, r10; mov byte ptr [r8], 0; ret;
0x0011ba3a: nop [rax+rax]; mov r8, r10; mov rax, r10; mov byte ptr [r8], 0; ret;
0x0011ba3b: nop [rax+rax]; mov r8, r10; mov rax, r10; mov byte ptr [r8], 0; ret;
0x0011ba3d: add [rax], r8b; mov r8, r10; mov rax, r10; mov byte ptr [r8], 0; ret;
0x0011ba3e: add [rax], al; mov r8, r10; mov rax, r10; mov byte ptr [r8], 0; ret;
0x0011ba3f: add [rbp-0x77], cl; ror byte ptr [rcx+rcx*4-0x30], 1; mov byte ptr [r8], 0; ret;
0x0011ba40: mov r8, r10; mov rax, r10; mov byte ptr [r8], 0; ret;
0x0011ba41: mov eax, edx; mov rax, r10; mov byte ptr [r8], 0; ret;
0x0011ba42: ror byte ptr [rcx+rcx*4-0x30], 1; mov byte ptr [r8], 0; ret;
0x0011ba43: mov rax, r10; mov byte ptr [r8], 0; ret;
0x0011ba44: mov eax, edx; mov byte ptr [r8], 0; ret;
0x0011ba45: rol byte ptr [rcx-0x3a], 1; add [rax], al; ret;
0x0011ba46: mov byte ptr [r8], 0; ret;
0x0011ba47: mov byte ptr [rax], 0; ret;
0x0011ba71: add ecx, [rax-0x75]; push rbx; adc [rax-0x73], cl; add [rax-0x77], rcx; or ecx, [rcx+rcx*4+0x24]; ret 0x5d5b;
0x0011ba74: push rbx; adc [rax-0x73], cl; add [rax-0x77], rcx; or ecx, [rcx+rcx*4+0x24]; ret 0x5d5b;
0x0011ba75: adc [rax-0x73], cl; add [rax-0x77], rcx; or ecx, [rcx+rcx*4+0x24]; ret 0x5d5b;
0x0011ba78: add [rax-0x77], rcx; or ecx, [rcx+rcx*4+0x24]; ret 0x5d5b;
0x0011ba79: add [rax-0x77], ecx; or ecx, [rcx+rcx*4+0x24]; ret 0x5d5b;
0x0011ba7a: mov [rbx], rcx; mov [rdx+rax*8], r12; pop rbx; pop rbp; pop r12; ret;
0x0011ba7b: mov [rbx], ecx; mov [rdx+rax*8], r12; pop rbx; pop rbp; pop r12; ret;
0x0011ba7c: or ecx, [rcx+rcx*4+0x24]; ret 0x5d5b;
0x0011ba7d: mov [rdx+rax*8], r12; pop rbx; pop rbp; pop r12; ret;
0x0011ba7e: mov [rdx+rax*8], esp; pop rbx; pop rbp; pop r12; ret;
0x0011ba7f: and al, 0xc2; pop rbx; pop rbp; pop r12; ret;
0x0011ba80: ret 0x5d5b;
0x0011baa2: mov qword ptr [rbx], 0; mov qword ptr [rbx+8], 0xffffffffffffffff; pop rbx; pop rbp; pop r12; ret;
0x0011baa3: mov dword ptr [rbx], 0; mov qword ptr [rbx+8], 0xffffffffffffffff; pop rbx; pop rbp; pop r12; ret;
0x0011baa7: add [rax], al; mov qword ptr [rbx+8], 0xffffffffffffffff; pop rbx; pop rbp; pop r12; ret;
0x0011baa9: mov qword ptr [rbx+8], 0xffffffffffffffff; pop rbx; pop rbp; pop r12; ret;
0x0011baaa: mov dword ptr [rbx+8], 0xffffffff; pop rbx; pop rbp; pop r12; ret;
0x0011bbc1: sldt [rax]; add [rbx+0x4f0f0ff8], al; ret 0x8389;
0x0011bbc2: add [rax], al; add [rbx+0x4f0f0ff8], al; ret 0x8389;
0x0011bbc4: add [rbx+0x4f0f0ff8], al; ret 0x8389;
0x0011bbea: add [rax], al; add [rbx+0x4f0f1ef8], al; ret 0x8389;
0x0011bbec: add [rbx+0x4f0f1ef8], al; ret 0x8389;
0x0011bc69: ret 0x8389;
0x0011bc9e: xor [rax-0x75], ecx; push rbx; adc [rbp+rcx*4+4], cl; ret 0x8348;
0x0011bca1: push rbx; adc [rbp+rcx*4+4], cl; ret 0x8348;
0x0011bca2: adc [rbp+rcx*4+4], cl; ret 0x8348;
0x0011bcb8: or [rcx+rcx*4-0x40], cl; pop rbx; pop rbp; pop r12; pop r13; ret;
0x0011bcc3: nop [rax+rax]; xor r8d, r8d; mov rax, r8; ret;
0x0011bcc5: add [rax], r8b; xor r8d, r8d; mov rax, r8; ret;
0x0011bcc6: add [rax], al; xor r8d, r8d; mov rax, r8; ret;
0x0011bcc8: xor r8d, r8d; mov rax, r8; ret;
0x0011bcc9: xor eax, eax; mov rax, r8; ret;
0x0011bd68: add [rbx-0x49f0fe0d], al; ret;
0x0011bd6c: movzx eax, bl; neg eax; pop rbx; pop rbp; pop r12; ret;
0x0011bd6d: mov dh, 0xc3; neg eax; pop rbx; pop rbp; pop r12; ret;
0x0011bd6f: neg eax; pop rbx; pop rbp; pop r12; ret;
0x0011bd70: fcomp st, dword ptr [rbx+0x5d]; pop r12; ret;
0x0011bed3: sub [rax-0x75], ecx; test [rax+rdx*4], ah; add [rax], al; add [rax+0x39], cl; ret 0x840f;
0x0011befc: ret 0xb60f;
0x0011bf37: add [rdi], cl; mov dh, 0x43; add [rax-0x7d], ecx; ret;
0x0011c092: xchg edi, eax; ret 0xda80;
0x0011c093: ret 0xda80;
0x0011c0ab: cli; or [rdi], ecx; xchg esp, eax; ret 0xd108;
0x0011c0ac: or [rdi], ecx; xchg esp, eax; ret 0xd108;
0x0011c0ae: xchg esp, eax; ret 0xd108;
0x0011c0af: ret 0xd108;
0x0011c0b1: rol dword ptr [rcx-0x77], 1; iretd;
0x0011c0d3: add [rcx-0x7d], r9d; mov byte ptr [rcx], 0x3c; and [rbx+rsi*8+0x3c], dh; or [rdi+rbp*8-0x7c], esi; ror byte ptr [rdi], 0x94; ret 0xa3c;
0x0011c0d4: add [rcx-0x7d], ecx; mov byte ptr [rcx], 0x3c; and [rbx+rsi*8+0x3c], dh; or [rdi+rbp*8-0x7c], esi; ror byte ptr [rdi], 0x94; ret 0xa3c;
0x0011c0d7: mov byte ptr [rcx], 0x3c; and [rbx+rsi*8+0x3c], dh; or [rdi+rbp*8-0x7c], esi; ror byte ptr [rdi], 0x94; ret 0xa3c;
0x0011c0da: and [rbx+rsi*8+0x3c], dh; or [rdi+rbp*8-0x7c], esi; ror byte ptr [rdi], 0x94; ret 0xa3c;
0x0011c0de: or [rdi+rbp*8-0x7c], esi; ror byte ptr [rdi], 0x94; ret 0xa3c;
0x0011c0e2: ror byte ptr [rdi], 0x94; ret 0xa3c;
0x0011c0e4: xchg esp, eax; ret 0xa3c;
0x0011c0e5: ret 0xa3c;
0x0011c49e: test [rax+rbx*8], ah; add [rax], al; add [rax+0x39], cl; ret 0x840f;
0x0011c49f: and al, 0xd8; add [rax], al; add [rax+0x39], cl; ret 0x840f;
0x0011c4c4: ret 0x889;
0x0011c5bf: ret 0x54e9;
0x0011c870: dec dword ptr [rax-0x75]; test [rax+rdx*4], ah; add [rax], al; add [rax+0x39], cl; ret 0x840f;
0x0011c873: test [rax+rdx*4], ah; add [rax], al; add [rax+0x39], cl; ret 0x840f;
0x0011c874: and al, 0x90; add [rax], al; add [rax+0x39], cl; ret 0x840f;
0x0011c875: nop; add [rax], al; add [rax+0x39], cl; ret 0x840f;
0x0011c876: add [rax], al; add [rax+0x39], cl; ret 0x840f;
0x0011c878: add [rax+0x39], cl; ret 0x840f;
0x0011c899: ret 0x30e9;
0x0011ca01: sbb ecx, [rdi+rdi*8]; jmp qword ptr [rsi+0x66];
0x0011ca02: or al, 0xff; jmp qword ptr [rsi+0x66];
0x0011cc36: sub al, 0xf; xchg ebp, eax; rol byte ptr [rdx+rax*8-0x49f0e88c], 0x43; add [rax-0x7d], ecx; ret;
0x0011cc38: xchg ebp, eax; rol byte ptr [rdx+rax*8-0x49f0e88c], 0x43; add [rax-0x7d], ecx; ret;
0x0011cc39: rol byte ptr [rdx+rax*8-0x49f0e88c], 0x43; add [rax-0x7d], ecx; ret;
0x0011cc3b: ret 0x1774;
0x0011cee1: and ecx, [rdi]; xchg ebp, eax; ret 0x2c3c;
0x0011cee3: xchg ebp, eax; ret 0x2c3c;
0x0011cee4: ret 0x2c3c;
0x0011ceeb: ret 0x1974;
0x0011d03d: xchg edi, eax; iretd;
0x0011d073: or esi, edx; dec dword ptr [rax-0x77]; ret 0x8548;
0x0011d0ec: or dh, dl; dec dword ptr [rax-0x77]; ret 0x8548;
0x0011d163: add al, 0xff; jmp qword ptr [rsi+0x2e];
0x0011d179: mov rax, [rip+0xa461f]; lea rsi, [rip-0x3c8]; lea rdi, [rip+0xa677d]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0011d17a: mov rax, [rip+0xa461f]; lea rsi, [rip-0x3c8]; lea rdi, [rip+0xa677d]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0011d17b: mov eax, [rip+0xa461f]; lea rsi, [rip-0x3c8]; lea rdi, [rip+0xa677d]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0011d17c: add eax, 0xa461f; lea rsi, [rip-0x3c8]; lea rdi, [rip+0xa677d]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0011d17e: or r8b, [rax]; lea rsi, [rip-0x3c8]; lea rdi, [rip+0xa677d]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0011d17f: or al, [rax]; lea rsi, [rip-0x3c8]; lea rdi, [rip+0xa677d]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0011d180: add [rax-0x73], cl; xor eax, 0xfffffc38; lea rdi, [rip+0xa677d]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0011d181: lea rsi, [rip-0x3c8]; lea rdi, [rip+0xa677d]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0011d182: lea esi, [rip-0x3c8]; lea rdi, [rip+0xa677d]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0011d183: xor eax, 0xfffffc38; lea rdi, [rip+0xa677d]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0011d187: dec dword ptr [rax-0x73]; cmp eax, 0xa677d; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0011d188: lea rdi, [rip+0xa677d]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0011d189: lea edi, [rip+0xa677d]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0011d18a: cmp eax, 0xa677d; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0011d18c: or al, [eax]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0011d18d: or al, [rax]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0011d1b8: inc dword ptr [rbx+0xa674c0d]; add [rdx], al; add rsp, 8; ret;
0x0011d1b9: or dword ptr [rip+0xa674c], 2; add rsp, 8; ret;
0x0011d1be: add [rdx], al; add rsp, 8; ret;
0x0011d377: add [rax-0x7d], cl; ret 0x8328;
0x0011d37a: ret 0x8328;
0x0011d459: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xa6495]; syscall;
0x0011d45a: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xa6495]; syscall;
0x0011d45b: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xa6495]; syscall;
0x0011d45c: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xa6495]; syscall;
0x0011d45d: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xa6495]; syscall;
0x0011d45e: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xa6495]; syscall;
0x0011d45f: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xa6495]; syscall;
0x0011d460: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xa6495]; syscall;
0x0011d461: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xa6495]; syscall;
0x0011d462: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xa6495]; syscall;
0x0011d463: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xa6495; syscall;
0x0011d464: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xa6495]; syscall;
0x0011d465: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xa6495]; syscall;
0x0011d466: add [rax+0xca], bh; lea rdi, [rip+0xa6495]; syscall;
0x0011d467: mov eax, 0xca; lea rdi, [rip+0xa6495]; syscall;
0x0011d469: add [rax], al; add [rax-0x73], cl; cmp eax, 0xa6495; syscall;
0x0011d46a: add [rax], al; lea rdi, [rip+0xa6495]; syscall;
0x0011d46b: add [rax-0x73], cl; cmp eax, 0xa6495; syscall;
0x0011d46c: lea rdi, [rip+0xa6495]; syscall;
0x0011d46d: lea edi, [rip+0xa6495]; syscall;
0x0011d46e: cmp eax, 0xa6495; syscall;
0x0011d46f: xchg ebp, eax; or al, fs:[rax]; syscall;
0x0011d470: or al, fs:[rax]; syscall;
0x0011d4d6: cmp eax, [rbx-0x72b3fe18]; insb [rdi], dx; ret;
0x0011d4d9: add [rbp+rcx*4+0x6c], ecx; ret;
0x0011d506: shl byte ptr [rdi+rbx+0x48], 0x83; ret;
0x0011d588: or [rax-0x7b], cl; push qword ptr [rbp-0x16]; add rsp, 8; pop rbx; pop rbp; ret;
0x0011d58b: push qword ptr [rbp-0x16]; add rsp, 8; pop rbx; pop rbp; ret;
0x0011d624: nop [rax+rax]; xchg ax, ax; mov rax, [rip+0xa09b9]; mov rax, fs:[rax]; ret;
0x0011d625: nop [rax+rax]; xchg ax, ax; mov rax, [rip+0xa09b9]; mov rax, fs:[rax]; ret;
0x0011d626: nop [rax+rax]; xchg ax, ax; mov rax, [rip+0xa09b9]; mov rax, fs:[rax]; ret;
0x0011d629: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov rax, [rip+0xa09b9]; mov rax, fs:[rax]; ret;
0x0011d62a: add [rax], al; add [rax], al; xchg ax, ax; mov rax, [rip+0xa09b9]; mov rax, fs:[rax]; ret;
0x0011d62b: add [rax], al; add [rsi-0x70], ah; mov rax, [rip+0xa09b9]; mov rax, fs:[rax]; ret;
0x0011d62c: add [rax], al; xchg ax, ax; mov rax, [rip+0xa09b9]; mov rax, fs:[rax]; ret;
0x0011d62d: add [rsi-0x70], ah; mov rax, [rip+0xa09b9]; mov rax, fs:[rax]; ret;
0x0011d62e: xchg ax, ax; mov rax, [rip+0xa09b9]; mov rax, fs:[rax]; ret;
0x0011d62f: nop; mov rax, [rip+0xa09b9]; mov rax, fs:[rax]; ret;
0x0011d630: mov rax, [rip+0xa09b9]; mov rax, fs:[rax]; ret;
0x0011d631: mov eax, [rip+0xa09b9]; mov rax, fs:[rax]; ret;
0x0011d632: add eax, 0xa09b9; mov rax, fs:[rax]; ret;
0x0011d633: mov ecx, 0x64000a09; mov rax, [rax]; ret;
0x0011d635: or al, [rax]; mov rax, fs:[rax]; ret;
0x0011d637: mov rax, fs:[rax]; ret;
0x0011d638: mov rax, [rax]; ret;
0x0011d639: mov eax, [rax]; ret;
0x0011d649: add rsp, 8; movzx eax, ax; ret;
0x0011d64a: add esp, 8; movzx eax, ax; ret;
0x0011d64c: or [rdi], cl; mov bh, 0xc0; ret;
0x0011d64d: movzx eax, ax; ret;
0x0011d64e: mov bh, 0xc0; ret;
0x0011d6c7: and [rax-0x7d], cl; ret;
0x0011d732: adc [r13+0x5b0875c0], r8b; ret;
0x0011d733: adc [rbp+0x5b0875c0], al; ret;
0x0011d735: shl byte ptr [rbp+8], 0x5b; ret;
0x0011d74a: mov rax, fs:[rbx]; mov qword ptr [rax+8], 0; pop rbx; ret;
0x0011d74b: mov rax, [rbx]; mov qword ptr [rax+8], 0; pop rbx; ret;
0x0011d74c: mov eax, [rbx]; mov qword ptr [rax+8], 0; pop rbx; ret;
0x0011d74e: mov qword ptr [rax+8], 0; pop rbx; ret;
0x0011d74f: mov dword ptr [rax+8], 0; pop rbx; ret;
0x0011d789: add [rsp+0x48], esi; add esp, 8; ret;
0x0011d78b: and al, 0x48; add esp, 8; ret;
0x0011d7c9: add al, ch; push rcx; outsb dx, [rsi]; int1; call qword ptr [rax+0x53555441];
0x0011d7cb: push rcx; outsb dx, [rsi]; int1; call qword ptr [rax+0x53555441];
0x0011d7cc: outsb dx, [rsi]; int1; call qword ptr [rax+0x53555441];
0x0011d7cd: int1; call qword ptr [rax+0x53555441];
0x0011d7ce: call qword ptr [rax+0x53555441];
0x0011d801: add [rax+1], bh; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret;
0x0011d802: mov eax, 1; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret;
0x0011d86b: add rsp, 0x10; mov eax, 1; pop rbx; pop rbp; pop r12; ret;
0x0011d86c: add esp, 0x10; mov eax, 1; pop rbx; pop rbp; pop r12; ret;
0x0011d86e: adc [rax+1], bh; pop rbx; pop rbp; pop r12; ret;
0x0011d880: add rsp, 0x10; xor eax, eax; pop rbx; pop rbp; pop r12; ret;
0x0011d881: add esp, 0x10; xor eax, eax; pop rbx; pop rbp; pop r12; ret;
0x0011d883: adc [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret;
0x0011d8e7: out 0xe8, al; ret;
0x0011da1c: in al, 0xe8; idiv byte ptr [rax-0x10]; jmp qword ptr [rsp+rax*2-0x77];
0x0011da1e: idiv byte ptr [rax-0x10]; jmp qword ptr [rsp+rax*2-0x77];
0x0011db59: mov byte ptr [r12+0x18], 0; add rsp, 8; mov rax, r12; pop rbp; pop r12; ret;
0x0011db5a: mov byte ptr [rsp+0x18], 0; add rsp, 8; mov rax, r12; pop rbp; pop r12; ret;
0x0011db5d: sbb [rax], al; add rsp, 8; mov rax, r12; pop rbp; pop r12; ret;
0x0011dbb4: or [rsp+rax*2-0x75], ah; and ebp, eax; ret 6;
0x0011dbb8: and ebp, eax; ret 6;
0x0011dbc6: mov fs:[rbx], r12d; pop rbx; pop rbp; pop r12; ret;
0x0011dbc7: mov [rbx], r12d; pop rbx; pop rbp; pop r12; ret;
0x0011dbc8: mov [rbx], esp; pop rbx; pop rbp; pop r12; ret;
0x0011dbc9: and ebx, [rbx+0x5d]; pop r12; ret;
0x0011dc09: add al, ch; adc [rdx-0xf], ebp; call qword ptr [rax+0x55415641];
0x0011dc0b: adc [rdx-0xf], ebp; call qword ptr [rax+0x55415641];
0x0011dc0c: push 0xfffffffffffffff1; call qword ptr [rax+0x55415641];
0x0011dc0d: int1; call qword ptr [rax+0x55415641];
0x0011dc66: fstp dword ptr [rbx+0x5d], st; pop r12; pop r13; pop r14; ret;
0x0011dcb4: mov [rip+0xa5ea5], rax; mov qword ptr [rax], 0; mov qword ptr [rax+8], 0; mov qword ptr [rax+0x10], 0; add rsp, 8; ret;
0x0011dcb5: mov [rip+0xa5ea5], eax; mov qword ptr [rax], 0; mov qword ptr [rax+8], 0; mov qword ptr [rax+0x10], 0; add rsp, 8; ret;
0x0011dcb6: add eax, 0xa5ea5; mov qword ptr [rax], 0; mov qword ptr [rax+8], 0; mov qword ptr [rax+0x10], 0; add rsp, 8; ret;
0x0011dcb9: or al, [rax]; mov qword ptr [rax], 0; mov qword ptr [rax+8], 0; mov qword ptr [rax+0x10], 0; add rsp, 8; ret;
0x0011dcbb: mov qword ptr [rax], 0; mov qword ptr [rax+8], 0; mov qword ptr [rax+0x10], 0; add rsp, 8; ret;
0x0011dcbc: mov dword ptr [rax], 0; mov qword ptr [rax+8], 0; mov qword ptr [rax+0x10], 0; add rsp, 8; ret;
0x0011dcbe: add [rax], al; add [rax], al; mov qword ptr [rax+8], 0; mov qword ptr [rax+0x10], 0; add rsp, 8; ret;
0x0011dcc0: add [rax], al; mov qword ptr [rax+8], 0; mov qword ptr [rax+0x10], 0; add rsp, 8; ret;
0x0011dcc2: mov qword ptr [rax+8], 0; mov qword ptr [rax+0x10], 0; add rsp, 8; ret;
0x0011dcc3: mov dword ptr [rax+8], 0; mov qword ptr [rax+0x10], 0; add rsp, 8; ret;
0x0011dcc6: add [rax], al; add [rax], al; mov qword ptr [rax+0x10], 0; add rsp, 8; ret;
0x0011dcc8: add [rax], al; mov qword ptr [rax+0x10], 0; add rsp, 8; ret;
0x0011dcca: mov qword ptr [rax+0x10], 0; add rsp, 8; ret;
0x0011dccb: mov dword ptr [rax+0x10], 0; add rsp, 8; ret;
0x0011dd4d: push rdi; adc [rax+0x33], cl; or [rax+0x33], r9b; push rsi; adc [rax+9], cl; ret 0x2474;
0x0011dd4e: adc [rax+0x33], cl; or [rax+0x33], r9b; push rsi; adc [rax+9], cl; ret 0x2474;
0x0011dd51: or [rax+0x33], r9b; push rsi; adc [rax+9], cl; ret 0x2474;
0x0011dd52: or [rax+0x33], cl; push rsi; adc [rax+9], cl; ret 0x2474;
0x0011dd55: push rsi; adc [rax+9], cl; ret 0x2474;
0x0011dd56: adc [rax+9], cl; ret 0x2474;
0x0011dd59: ret 0x2474;
0x0011dd5b: and al, 0x44; mov eax, eax; ret;
0x0011de42: add cl, [rdi]; test [rcx], ebp; add [rax], eax; add [rax-0x75], cl; or [r8-0x77], r9b; iretd;
0x0011de44: test [rcx], ebp; add [rax], eax; add [rax-0x75], cl; or [r8-0x77], r9b; iretd;
0x0011de46: add [rax], eax; add [rax-0x75], cl; or [r8-0x77], r9b; iretd;
0x0011de48: add [rax-0x75], cl; or [r8-0x77], r9b; iretd;
0x0011de4b: or [r8-0x77], r9b; iretd;
0x0011df03: xchg esp, eax; ret 0x8349;
0x0011df52: ret 0x3904;
0x0011df65: cmp [rbx-0x43c63dc4], ecx; ret;
0x0011df68: ret 0xbc39;
0x0011dfd2: add [rbx+rcx+0x48], esi; add esp, 0x10; pop rbx; pop rbp; pop r12; ret;
0x0011dffe: mov [rbx+0x18], rbp; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret;
0x0011dfff: mov [rbx+0x18], ebp; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret;
0x0011e000: imul ebx, [rax], 0x48; add esp, 0x10; pop rbx; pop rbp; pop r12; ret;
0x0011e098: ret 0x2d72;
0x0011e0b2: add rsp, 0xa0; mov rax, r12; pop rbx; pop rbp; pop r12; ret;
0x0011e0b3: add esp, 0xa0; mov rax, r12; pop rbx; pop rbp; pop r12; ret;
0x0011e0b5: mov al, [0x5d5be0894c000000]; pop r12; ret;
0x0011e0b6: add [rax], al; add [rcx+rcx*4-0x20], cl; pop rbx; pop rbp; pop r12; ret;
0x0011e0b7: add [rax], al; mov rax, r12; pop rbx; pop rbp; pop r12; ret;
0x0011e0b8: add [rcx+rcx*4-0x20], cl; pop rbx; pop rbp; pop r12; ret;
0x0011e0b9: mov rax, r12; pop rbx; pop rbp; pop r12; ret;
0x0011e20a: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xa593e; syscall;
0x0011e210: add [rax], al; add [rax-0x73], cl; cmp eax, 0xa593e; syscall;
0x0011e212: add [rax-0x73], cl; cmp eax, 0xa593e; syscall;
0x0011e215: cmp eax, 0xa593e; syscall;
0x0011e216: pop rcx; or al, [rax]; syscall;
0x0011e217: pop rcx; or al, [rax]; syscall;
0x0011e2c3: sub qword ptr [rip+0xa588d], 1; pop rbp; ret;
0x0011e2c4: sub dword ptr [rip+0xa588d], 1; pop rbp; ret;
0x0011e2c6: lea ebx, [rax+0xa]; add [rcx], al; pop rbp; ret;
0x0011e2c9: add [rcx], al; pop rbp; ret;
0x0011e324: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xa5822]; syscall; pop rbp; ret;
0x0011e325: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xa5822]; syscall; pop rbp; ret;
0x0011e326: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xa5822; syscall;
0x0011e327: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xa5822]; syscall; pop rbp; ret;
0x0011e328: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xa5822]; syscall; pop rbp; ret;
0x0011e329: add [rax+0xca], bh; lea rdi, [rip+0xa5822]; syscall; pop rbp; ret;
0x0011e32a: mov eax, 0xca; lea rdi, [rip+0xa5822]; syscall; pop rbp; ret;
0x0011e32c: add [rax], al; add [rax-0x73], cl; cmp eax, 0xa5822; syscall;
0x0011e32c: add [rax], al; add [rax-0x73], cl; cmp eax, 0xa5822; syscall; pop rbp; ret;
0x0011e32d: add [rax], al; lea rdi, [rip+0xa5822]; syscall; pop rbp; ret;
0x0011e32e: add [rax-0x73], cl; cmp eax, 0xa5822; syscall;
0x0011e32e: add [rax-0x73], cl; cmp eax, 0xa5822; syscall; pop rbp; ret;
0x0011e32f: lea rdi, [rip+0xa5822]; syscall; pop rbp; ret;
0x0011e330: lea edi, [rip+0xa5822]; syscall; pop rbp; ret;
0x0011e331: cmp eax, 0xa5822; syscall; pop rbp; ret;
0x0011e331: cmp eax, 0xa5822; syscall;
0x0011e333: pop rax; or al, [rax]; syscall; pop rbp; ret;
0x0011e333: pop rax; or al, [rax]; syscall;
0x0011e334: or al, [rax]; syscall; pop rbp; ret;
0x0011e336: syscall; pop rbp; ret;
0x0011e33b: sar ecx, 0xff; call qword ptr [rax+0x48555441];
0x0011e33e: call qword ptr [rax+0x48555441];
0x0011e3a2: xor r12d, r12d; add rsp, 8; mov rax, r12; pop rbp; pop r12; ret;
0x0011e3a3: xor esp, esp; add rsp, 8; mov rax, r12; pop rbp; pop r12; ret;
0x0011e3a4: in al, 0x48; add esp, 8; mov rax, r12; pop rbp; pop r12; ret;
0x0011e3a5: add rsp, 8; mov rax, r12; pop rbp; pop r12; ret;
0x0011e3a6: add esp, 8; mov rax, r12; pop rbp; pop r12; ret;
0x0011e3a8: or [rcx+rcx*4-0x20], cl; pop rbp; pop r12; ret;
0x0011e3a9: mov rax, r12; pop rbp; pop r12; ret;
0x0011e3e4: mov eax, [0x1bad23145]; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xa575a]; syscall;
0x0011e3ee: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xa575a; syscall;
0x0011e3f4: add [rax], al; add [rax-0x73], cl; cmp eax, 0xa575a; syscall;
0x0011e3f6: add [rax-0x73], cl; cmp eax, 0xa575a; syscall;
0x0011e3f9: cmp eax, 0xa575a; syscall;
0x0011e3fa: pop rdx; push rdi; or al, [rax]; syscall;
0x0011e3fb: push rdi; or al, [rax]; syscall;
0x0011e41b: add al, ch; jmp qword ptr [rcx-0xf];
0x0011e41d: jmp qword ptr [rcx-0xf];
0x0011e41f: int1; jmp qword ptr [rsi+0x66];
0x0011e516: xchg ebx, eax; ret 0x8440;
0x0011e517: ret 0x8440;
0x0011e62b: ret 0x960f;
0x0011e62d: xchg esi, eax; ret 0x8366;
0x0011e62e: ret 0x8366;
0x0011e6ff: fmul st, qword ptr [rax-0x7d]; ret;
0x0011ea0d: ret 0x4104;
0x0011eae0: or [rax-0x77], cl; ret;
0x0011eafc: pop rsp; iretd;
0x0011eb15: jmp far fword ptr [rax-0x797af0ff];
0x0011eb3f: add [rcx-0x39], cl; iretd;
0x0011eb6b: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xa4fdd; syscall;
0x0011eb71: add [rax], al; add [rax-0x73], cl; cmp eax, 0xa4fdd; syscall;
0x0011eb73: add [rax-0x73], cl; cmp eax, 0xa4fdd; syscall;
0x0011eb76: cmp eax, 0xa4fdd; syscall;
0x0011eba3: add ecx, [rax-0x75]; push rbx; adc [rax-0x73], cl; add [rax-0x77], rcx; or ecx, [rcx+rcx*4+0x2c]; ret 0x67e9;
0x0011eba6: push rbx; adc [rax-0x73], cl; add [rax-0x77], rcx; or ecx, [rcx+rcx*4+0x2c]; ret 0x67e9;
0x0011eba7: adc [rax-0x73], cl; add [rax-0x77], rcx; or ecx, [rcx+rcx*4+0x2c]; ret 0x67e9;
0x0011ebaa: add [rax-0x77], rcx; or ecx, [rcx+rcx*4+0x2c]; ret 0x67e9;
0x0011ebab: add [rax-0x77], ecx; or ecx, [rcx+rcx*4+0x2c]; ret 0x67e9;
0x0011ebae: or ecx, [rcx+rcx*4+0x2c]; ret 0x67e9;
0x0011ebb2: ret 0x67e9;
0x0011ec2a: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xa4f1e; syscall;
0x0011ec30: add [rax], al; add [rax-0x73], cl; cmp eax, 0xa4f1e; syscall;
0x0011ec32: add [rax-0x73], cl; cmp eax, 0xa4f1e; syscall;
0x0011ec35: cmp eax, 0xa4f1e; syscall;
0x0011ec72: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xa593e]; syscall;
0x0011ec7c: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xa4ecc; syscall;
0x0011ec82: add [rax], al; add [rax-0x73], cl; cmp eax, 0xa4ecc; syscall;
0x0011ec84: add [rax-0x73], cl; cmp eax, 0xa4ecc; syscall;
0x0011ec87: cmp eax, 0xa4ecc; syscall;
0x0011ec88: int3; or r8b, [rax]; syscall;
0x0011ed55: sbb al, [rbx+0xa4dfb2d]; add [rcx], al; pop rbx; ret;
0x0011ed56: sub dword ptr [rip+0xa4dfb], 1; pop rbx; ret;
0x0011ed7d: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xa593e]; syscall;
0x0011ed7e: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xa593e]; syscall;
0x0011ed7f: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xa593e]; syscall;
0x0011ed80: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xa593e]; syscall;
0x0011ed81: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xa593e]; syscall;
0x0011ed82: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xa593e]; syscall;
0x0011ed83: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xa593e]; syscall;
0x0011ed84: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xa593e]; syscall;
0x0011ed84: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xa4dc2]; syscall; pop rbx; ret;
0x0011ed85: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xa4dc2]; syscall; pop rbx; ret;
0x0011ed85: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xa593e]; syscall;
0x0011ed86: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xa4dc2; syscall;
0x0011ed87: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xa593e]; syscall;
0x0011ed87: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xa4dc2]; syscall; pop rbx; ret;
0x0011ed88: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xa593e]; syscall;
0x0011ed88: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xa4dc2]; syscall; pop rbx; ret;
0x0011ed89: add [rax+0xca], bh; lea rdi, [rip+0xa4dc2]; syscall; pop rbx; ret;
0x0011ed89: add [rax+0xca], bh; lea rdi, [rip+0xa593e]; syscall;
0x0011ed8a: mov eax, 0xca; lea rdi, [rip+0xa4dc2]; syscall; pop rbx; ret;
0x0011ed8a: mov eax, 0xca; lea rdi, [rip+0xa593e]; syscall;
0x0011ed8c: add [rax], al; add [rax-0x73], cl; cmp eax, 0xa4dc2; syscall; pop rbx; ret;
0x0011ed8c: add [rax], al; add [rax-0x73], cl; cmp eax, 0xa4dc2; syscall;
0x0011ed8d: add [rax], al; lea rdi, [rip+0xa593e]; syscall;
0x0011ed8d: add [rax], al; lea rdi, [rip+0xa4dc2]; syscall; pop rbx; ret;
0x0011ed8e: add [rax-0x73], cl; cmp eax, 0xa4dc2; syscall;
0x0011ed8e: add [rax-0x73], cl; cmp eax, 0xa4dc2; syscall; pop rbx; ret;
0x0011ed8f: lea rdi, [rip+0xa593e]; syscall;
0x0011ed8f: lea rdi, [rip+0xa4dc2]; syscall; pop rbx; ret;
0x0011ed90: lea edi, [rip+0xa593e]; syscall;
0x0011ed90: lea edi, [rip+0xa4dc2]; syscall; pop rbx; ret;
0x0011ed91: cmp eax, 0xa4dc2; syscall; pop rbx; ret;
0x0011ed91: cmp eax, 0xa4dc2; syscall;
0x0011ed92: ret 0xa4d;
0x0011ed93: or r8b, [r8]; syscall; pop rbx; ret;
0x0011ed93: or r8b, [r8]; syscall;
0x0011ed94: or al, [rax]; syscall; pop rbx; ret;
0x0011ede9: sbb [rbx-0x76efdb84], cl; out dx, al; mov [rsp+0x14], eax; mov rdx, r12; mov eax, 0x81; syscall;
0x0011edea: mov edi, [rsp+0x10]; mov esi, ebp; mov [rsp+0x14], eax; mov rdx, r12; mov eax, 0x81; syscall;
0x0011edec: and al, 0x10; mov esi, ebp; mov [rsp+0x14], eax; mov rdx, r12; mov eax, 0x81; syscall;
0x0011eded: adc [rcx+0x244489ee], cl; adc al, 0x4c; mov edx, esp; mov eax, 0x81; syscall;
0x0011edee: mov esi, ebp; mov [rsp+0x14], eax; mov rdx, r12; mov eax, 0x81; syscall;
0x0011edef: out dx, al; mov [rsp+0x14], eax; mov rdx, r12; mov eax, 0x81; syscall;
0x0011edf0: mov [rsp+0x14], eax; mov rdx, r12; mov eax, 0x81; syscall;
0x0011edf2: and al, 0x14; mov rdx, r12; mov eax, 0x81; syscall;
0x0011edf3: adc al, 0x4c; mov edx, esp; mov eax, 0x81; syscall;
0x0011edf4: mov rdx, r12; mov eax, 0x81; syscall;
0x0011edf5: mov edx, esp; mov eax, 0x81; syscall;
0x0011edf7: mov eax, 0x81; syscall;
0x0011ee16: add [rbp+0x22], dh; add rsp, 0x90; pop rbx; pop rbp; pop r12; ret;
0x0011ee19: add rsp, 0x90; pop rbx; pop rbp; pop r12; ret;
0x0011ee1a: add esp, 0x90; pop rbx; pop rbp; pop r12; ret;
0x0011ee1c: nop; add [rax], al; add [rbx+0x5d], bl; pop r12; ret;
0x0011efe4: fbstp tbyte ptr [rax+rbx+0xf], st; mov dh, 0x43; add [rax-0x7d], ecx; ret;
0x0011efe6: sbb [rdi], cl; mov dh, 0x43; add [rax-0x7d], ecx; ret;
0x0011efe8: mov dh, 0x43; add [rax-0x7d], ecx; ret;
0x0011efe9: add [r8-0x7d], ecx; ret;
0x0011f087: add [rax+0xf], cl; mov esi, 0x83480153; ret;
0x0011f08a: mov esi, 0x83480153; ret;
0x0011f08b: push rbx; add [rax-0x7d], ecx; ret;
0x0011f113: add [rax], al; add [rbp-0x73], al; pop rbp; add cl, [rbp+0x63]; fild st, dword ptr [rcx-0x80]; jmp qword ptr [rcx];
0x0011f115: add [rbp-0x73], al; pop rbp; add cl, [rbp+0x63]; fild st, dword ptr [rcx-0x80]; jmp qword ptr [rcx];
0x0011f118: pop rbp; add cl, [rbp+0x63]; fild st, dword ptr [rcx-0x80]; jmp qword ptr [rcx];
0x0011f119: add cl, [rbp+0x63]; fild st, dword ptr [rcx-0x80]; jmp qword ptr [rcx];
0x0011f11c: fild st, dword ptr [rcx-0x80]; jmp qword ptr [rcx];
0x0011f11f: jmp qword ptr [rcx];
0x0011f2ea: add cl, [rcx+0xa]; add [rbp+rcx*4+0x67], cl; xor [rax-0x7b], cl; ror byte ptr [rax+0xf], 0x44; ret 0x8b4c;
0x0011f2ed: add [rbp+rcx*4+0x67], cl; xor [rax-0x7b], cl; ror byte ptr [rax+0xf], 0x44; ret 0x8b4c;
0x0011f2f0: xor [eax-0x7b], cl; ror byte ptr [rax+0xf], 0x44; ret 0x8b4c;
0x0011f2f1: xor [rax-0x7b], cl; ror byte ptr [rax+0xf], 0x44; ret 0x8b4c;
0x0011f2f4: ror byte ptr [rax+0xf], 0x44; ret 0x8b4c;
0x0011f469: add [rax-0x7b], cl; shl byte ptr [rsi+rdx+0x48], 0x8b; cmp eax, 0xa478a; ror rdi, 0x11; xor rdi, fs:[0x30]; call rax;
0x0011f46c: shl byte ptr [rsi+rdx+0x48], 0x8b; cmp eax, 0xa478a; ror rdi, 0x11; xor rdi, fs:[0x30]; call rax;
0x0011f46f: mov rdi, [rip+0xa478a]; ror rdi, 0x11; xor rdi, fs:[0x30]; call rax;
0x0011f470: mov edi, [rip+0xa478a]; ror rdi, 0x11; xor rdi, fs:[0x30]; call rax;
0x0011f471: cmp eax, 0xa478a; ror rdi, 0x11; xor rdi, fs:[0x30]; call rax;
0x0011f472: mov al, [rdi+0xa]; add [rax-0x3f], cl; iretd;
0x0011f473: or r8b, [r8]; ror rdi, 0x11; xor rdi, fs:[0x30]; call rax;
0x0011f474: or al, [rax]; ror rdi, 0x11; xor rdi, fs:[0x30]; call rax;
0x0011f475: add [rax-0x3f], cl; iretd;
0x0011f476: ror rdi, 0x11; xor rdi, fs:[0x30]; call rax;
0x0011f477: ror edi, 0x11; xor rdi, fs:[0x30]; call rax;
0x0011f479: adc [rax+rcx*2+0x33], esp; cmp al, 0x25; xor [rax], al; add [rax], al; call rax;
0x0011f47a: xor rdi, fs:[0x30]; call rax;
0x0011f47b: xor rdi, [0x30]; call rax;
0x0011f47c: xor edi, [0x30]; call rax;
0x0011f47d: cmp al, 0x25; xor [rax], al; add [rax], al; call rax;
0x0011f58c: fsub st(3), st; mov cl, 0x90; pop rbx; pop rbp; pop r12; ret;
0x0011f58e: mov cl, 0x90; pop rbx; pop rbp; pop r12; ret;
0x0011f58f: nop; pop rbx; pop rbp; pop r12; ret;
0x0011f75d: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xa44b3; syscall;
0x0011f763: add [rax], al; add [rax-0x73], cl; cmp eax, 0xa44b3; syscall;
0x0011f765: add [rax-0x73], cl; cmp eax, 0xa44b3; syscall;
0x0011f768: cmp eax, 0xa44b3; syscall;
0x0011f769: mov bl, 0x44; or al, [rax]; syscall;
0x0011f76a: or r8b, [rax]; syscall;
0x0011f9aa: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xa4266; syscall;
0x0011f9b0: add [rax], al; add [rax-0x73], cl; cmp eax, 0xa4266; syscall;
0x0011f9b2: add [rax-0x73], cl; cmp eax, 0xa4266; syscall;
0x0011f9b5: cmp eax, 0xa4266; syscall;
0x0011fa5b: or cl, [rax-0x7d]; ret;
0x0011fb34: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xa40dc; syscall;
0x0011fb3a: add [rax], al; add [rax-0x73], cl; cmp eax, 0xa40dc; syscall;
0x0011fb3c: add [rax-0x73], cl; cmp eax, 0xa40dc; syscall;
0x0011fb3f: cmp eax, 0xa40dc; syscall;
0x0011fce8: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xa44b3]; syscall;
0x0011fce9: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xa44b3]; syscall;
0x0011fcea: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xa44b3]; syscall;
0x0011fceb: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xa44b3]; syscall;
0x0011fcec: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xa44b3]; syscall;
0x0011fced: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xa44b3]; syscall;
0x0011fcee: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xa44b3]; syscall;
0x0011fcef: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xa44b3]; syscall;
0x0011fcf0: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xa44b3]; syscall;
0x0011fcf1: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xa44b3]; syscall;
0x0011fcf2: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xa3f1e; syscall;
0x0011fcf3: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xa44b3]; syscall;
0x0011fcf4: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xa44b3]; syscall;
0x0011fcf5: add [rax+0xca], bh; lea rdi, [rip+0xa44b3]; syscall;
0x0011fcf6: mov eax, 0xca; lea rdi, [rip+0xa44b3]; syscall;
0x0011fcf8: add [rax], al; add [rax-0x73], cl; cmp eax, 0xa3f1e; syscall;
0x0011fcf9: add [rax], al; lea rdi, [rip+0xa44b3]; syscall;
0x0011fcfa: add [rax-0x73], cl; cmp eax, 0xa3f1e; syscall;
0x0011fcfb: lea rdi, [rip+0xa44b3]; syscall;
0x0011fcfc: lea edi, [rip+0xa44b3]; syscall;
0x0011fcfd: cmp eax, 0xa3f1e; syscall;
0x0011fd64: fdivr st, st(6); jmp qword ptr [rsi+0xf];
0x0011fdc9: add ecx, [rax-0x7b]; shl byte ptr [rcx+rdx*8+0x5b], 0x31; rcr byte ptr [rbp+0x41], 0x5c; pop r13; pop r14; ret;
0x0011fdcc: shl byte ptr [rcx+rdx*8+0x5b], 0x31; rcr byte ptr [rbp+0x41], 0x5c; pop r13; pop r14; ret;
0x0011fdce: rcr dword ptr [rbx+0x31], 1; rcr byte ptr [rbp+0x41], 0x5c; pop r13; pop r14; ret;
0x0011fdf1: mov eax, 1; pop rbp; pop r12; pop r13; pop r14; ret;
0x0011fdf3: add [rax], al; add [rbp+0x41], bl; pop rsp; pop r13; pop r14; ret;
0x0011fdf4: add [rax], al; pop rbp; pop r12; pop r13; pop r14; ret;
0x0011fdf5: add [rbp+0x41], bl; pop rsp; pop r13; pop r14; ret;
0x0011fe07: rol byte ptr [rcx+0x5c], 0x41; pop rbp; and eax, 2; pop r14; sub eax, 1; ret;
0x0011fe08: pop r12; pop r13; and eax, 2; pop r14; sub eax, 1; ret;
0x0011fe09: pop rsp; pop r13; and eax, 2; pop r14; sub eax, 1; ret;
0x0011fe0a: pop r13; and eax, 2; pop r14; sub eax, 1; ret;
0x0011fe0b: pop rbp; and eax, 2; pop r14; sub eax, 1; ret;
0x0011fe0c: and eax, 2; pop r14; sub eax, 1; ret;
0x0011fe0e: add al, [rcx+0x5e]; sub eax, 1; ret;
0x0011fe0f: pop r14; sub eax, 1; ret;
0x0011fe10: pop rsi; sub eax, 1; ret;
0x0011fe11: sub eax, 1; ret;
0x0011fe9b: pop rbp; mov eax, r9d; pop r12; pop r13; pop r14; ret;
0x0011fe9c: mov eax, r9d; pop r12; pop r13; pop r14; ret;
0x0011fe9d: mov eax, ecx; pop r12; pop r13; pop r14; ret;
0x0011fe9e: enter 0x5c41, 0x41; pop rbp; pop r14; ret;
0x0011fec5: call far fword ptr [rbx+0x44];
0x0011fec7: mov eax, r9d; pop rbp; pop r12; pop r13; pop r14; ret;
0x0011fec8: mov eax, ecx; pop rbp; pop r12; pop r13; pop r14; ret;
0x0011fec9: enter 0x415d, 0x5c; pop r13; pop r14; ret;
0x0011ff1c: cmc; jmp qword ptr [rsi-0x70];
0x001200aa: add [rax], al; add [rbp+7], dh; add rsp, 0x10; pop r12; ret;
0x001200ac: add [rbp+7], dh; add rsp, 0x10; pop r12; ret;
0x001200af: add rsp, 0x10; pop r12; ret;
0x001200b0: add esp, 0x10; pop r12; ret;
0x001200b2: adc [rcx+0x5c], al; ret;
0x0012012d: mov [rbp], rax; mov rdx, [r15]; mov r8, rbx; mov rcx, r14; mov rdi, r13; call r12;
0x0012012e: mov [rbp], eax; mov rdx, [r15]; mov r8, rbx; mov rcx, r14; mov rdi, r13; call r12;
0x00120131: mov rdx, [r15]; mov r8, rbx; mov rcx, r14; mov rdi, r13; call r12;
0x00120132: mov edx, [rdi]; mov r8, rbx; mov rcx, r14; mov rdi, r13; call r12;
0x00120134: mov r8, rbx; mov rcx, r14; mov rdi, r13; call r12;
0x00120135: mov eax, ebx; mov rcx, r14; mov rdi, r13; call r12;
0x00120136: fmul st, dword ptr [rcx+rcx*4-0xf]; mov rdi, r13; call r12;
0x00120137: mov rcx, r14; mov rdi, r13; call r12;
0x00120138: mov ecx, esi; mov rdi, r13; call r12;
0x00120139: int1; mov rdi, r13; call r12;
0x0012013a: mov rdi, r13; call r12;
0x0012013b: mov edi, ebp; call r12;
0x0012013c: out dx, eax; call r12;
0x00120197: add [rcx-0x77], cl; or [rax-0x77], cl; iretd;
0x0012019a: or [rax-0x77], cl; iretd;
0x00120274: add [rax], eax; mov edi, [rbx]; call qword ptr [rsp+0x20];
0x00120276: mov edi, [rbx]; call qword ptr [rsp+0x20];
0x00120303: add [rax], eax; xor edi, edi; call qword ptr [rsp+0x20];
0x00120305: xor edi, edi; call qword ptr [rsp+0x20];
0x00120307: call qword ptr [rsp+0x20];
0x0012033e: lea rcx, [rsp+0x20]; xor edx, edx; mov rsi, r14; mov rdi, r15; mov [rsp+8], rcx; call r12;
0x0012033f: lea ecx, [rsp+0x20]; xor edx, edx; mov rsi, r14; mov rdi, r15; mov [rsp+8], rcx; call r12;
0x00120341: and al, 0x20; xor edx, edx; mov rsi, r14; mov rdi, r15; mov [rsp+8], rcx; call r12;
0x00120342: and [rcx], dh; ror byte ptr [rcx+rcx*4-0xa], cl; mov rdi, r15; mov [rsp+8], rcx; call r12;
0x00120343: xor edx, edx; mov rsi, r14; mov rdi, r15; mov [rsp+8], rcx; call r12;
0x00120344: ror byte ptr [rcx+rcx*4-0xa], cl; mov rdi, r15; mov [rsp+8], rcx; call r12;
0x00120345: mov rsi, r14; mov rdi, r15; mov [rsp+8], rcx; call r12;
0x00120346: mov esi, esi; mov rdi, r15; mov [rsp+8], rcx; call r12;
0x00120347: test byte ptr [rcx+rcx*4-1], 0x48; mov [rsp+8], ecx; call r12;
0x00120348: mov rdi, r15; mov [rsp+8], rcx; call r12;
0x00120349: mov edi, edi; mov [rsp+8], rcx; call r12;
0x0012034a: dec dword ptr [rax-0x77]; and al, 8; call r12;
0x0012034b: mov [rsp+8], rcx; call r12;
0x0012034c: mov [rsp+8], ecx; call r12;
0x0012034e: and al, 8; call r12;
0x00120435: add [rax], eax; call qword ptr [rsp+0x10];
0x00120437: call qword ptr [rsp+0x10];
0x0012048f: lea r13, [rsp+0x10]; xor edx, edx; mov rsi, r12; mov rdi, rbx; mov rcx, r13; call r10;
0x00120490: lea ebp, [rsp+0x10]; xor edx, edx; mov rsi, r12; mov rdi, rbx; mov rcx, r13; call r10;
0x00120492: and al, 0x10; xor edx, edx; mov rsi, r12; mov rdi, rbx; mov rcx, r13; call r10;
0x00120493: adc [rcx], dh; ror byte ptr [rcx+rcx*4-0x1a], cl; mov rdi, rbx; mov rcx, r13; call r10;
0x00120494: xor edx, edx; mov rsi, r12; mov rdi, rbx; mov rcx, r13; call r10;
0x00120495: ror byte ptr [rcx+rcx*4-0x1a], cl; mov rdi, rbx; mov rcx, r13; call r10;
0x00120496: mov rsi, r12; mov rdi, rbx; mov rcx, r13; call r10;
0x00120497: mov esi, esp; mov rdi, rbx; mov rcx, r13; call r10;
0x00120498: out 0x48, al; mov edi, ebx; mov rcx, r13; call r10;
0x00120499: mov rdi, rbx; mov rcx, r13; call r10;
0x0012049a: mov edi, ebx; mov rcx, r13; call r10;
0x0012049b: fisttp word ptr [rcx+rcx*4-0x17], st; call r10;
0x0012049c: mov rcx, r13; call r10;
0x0012049d: mov ecx, ebp; call r10;
0x0012049f: call r10;
0x001204a1: ror byte ptr [rax-0x39], cl; ret 0xffff;
0x001204cf: mov ebp, eax; sar r14, 1; jmp qword ptr [rsi+0x66];
0x001204d1: sar r14, 1; jmp qword ptr [rsi+0x66];
0x001204d2: sar esi, 1; jmp qword ptr [rsi+0x66];
0x00120601: mov r8, [rsp+0x48]; mov rcx, [rsp+0x50]; mov rdx, [rsp+0xe0]; mov rsi, [rsp+0x40]; mov rdi, [rsp+0x38]; call qword ptr [rsp+0x68];
0x00120602: mov eax, [rsp+0x48]; mov rcx, [rsp+0x50]; mov rdx, [rsp+0xe0]; mov rsi, [rsp+0x40]; mov rdi, [rsp+0x38]; call qword ptr [rsp+0x68];
0x00120604: and al, 0x48; mov rcx, [rsp+0x50]; mov rdx, [rsp+0xe0]; mov rsi, [rsp+0x40]; mov rdi, [rsp+0x38]; call qword ptr [rsp+0x68];
0x00120606: mov rcx, [rsp+0x50]; mov rdx, [rsp+0xe0]; mov rsi, [rsp+0x40]; mov rdi, [rsp+0x38]; call qword ptr [rsp+0x68];
0x00120607: mov ecx, [rsp+0x50]; mov rdx, [rsp+0xe0]; mov rsi, [rsp+0x40]; mov rdi, [rsp+0x38]; call qword ptr [rsp+0x68];
0x00120609: and al, 0x50; mov rdx, [rsp+0xe0]; mov rsi, [rsp+0x40]; mov rdi, [rsp+0x38]; call qword ptr [rsp+0x68];
0x0012060a: push rax; mov rdx, [rsp+0xe0]; mov rsi, [rsp+0x40]; mov rdi, [rsp+0x38]; call qword ptr [rsp+0x68];
0x0012060b: mov rdx, [rsp+0xe0]; mov rsi, [rsp+0x40]; mov rdi, [rsp+0x38]; call qword ptr [rsp+0x68];
0x0012060c: mov edx, [rsp+0xe0]; mov rsi, [rsp+0x40]; mov rdi, [rsp+0x38]; call qword ptr [rsp+0x68];
0x00120611: add [rax], al; mov rsi, [rsp+0x40]; mov rdi, [rsp+0x38]; call qword ptr [rsp+0x68];
0x00120613: mov rsi, [rsp+0x40]; mov rdi, [rsp+0x38]; call qword ptr [rsp+0x68];
0x00120614: mov esi, [rsp+0x40]; mov rdi, [rsp+0x38]; call qword ptr [rsp+0x68];
0x00120616: and al, 0x40; mov rdi, [rsp+0x38]; call qword ptr [rsp+0x68];
0x00120618: mov rdi, [rsp+0x38]; call qword ptr [rsp+0x68];
0x00120619: mov edi, [rsp+0x38]; call qword ptr [rsp+0x68];
0x0012061b: and al, 0x38; call qword ptr [rsp+0x68];
0x0012061d: call qword ptr [rsp+0x68];
0x0012065a: ret 0xfff7;
0x0012075c: div byte ptr [rcx+rdi-0x18]; cld; outsb dx, [rsi]; add [rax], eax; mov edi, [r14]; call qword ptr [rsp+0x70];
0x0012075e: cmp eax, ebp; cld; outsb dx, [rsi]; add [rax], eax; mov edi, [r14]; call qword ptr [rsp+0x70];
0x00120760: cld; outsb dx, [rsi]; add [rax], eax; mov edi, [r14]; call qword ptr [rsp+0x70];
0x00120761: outsb dx, [rsi]; add [rax], eax; mov edi, [r14]; call qword ptr [rsp+0x70];
0x00120762: add [rax], eax; mov edi, [r14]; call qword ptr [rsp+0x70];
0x00120763: add [rcx-0x75], al; notrack call qword ptr [rsp+0x70];
0x00120764: mov edi, [r14]; call qword ptr [rsp+0x70];
0x00120765: mov edi, [rsi]; call qword ptr [rsp+0x70];
0x00120766: notrack call qword ptr [rsp+0x70];
0x00120796: add al, bpl; ret;
0x0012079a: outsb dx, [rsi]; add [rax], eax; xor edi, edi; call qword ptr [rsp+0x70];
0x0012079b: add [rax], eax; xor edi, edi; call qword ptr [rsp+0x70];
0x0012079d: xor edi, edi; call qword ptr [rsp+0x70];
0x0012079f: call qword ptr [rsp+0x70];
0x00120805: lea r13, [rsp+0x68]; xor edx, edx; mov rsi, r12; mov rdi, r14; mov rcx, r13; call rbx;
0x00120806: lea ebp, [rsp+0x68]; xor edx, edx; mov rsi, r12; mov rdi, r14; mov rcx, r13; call rbx;
0x00120808: and al, 0x68; xor edx, edx; mov rsi, r12; mov rdi, r14; mov rcx, r13; call rbx;
0x00120809: push 0xffffffff894cd231; out 0x4c, al; mov edi, esi; mov rcx, r13; call rbx;
0x0012080a: xor edx, edx; mov rsi, r12; mov rdi, r14; mov rcx, r13; call rbx;
0x0012080b: ror byte ptr [rcx+rcx*4-0x1a], cl; mov rdi, r14; mov rcx, r13; call rbx;
0x0012080c: mov rsi, r12; mov rdi, r14; mov rcx, r13; call rbx;
0x0012080d: mov esi, esp; mov rdi, r14; mov rcx, r13; call rbx;
0x0012080e: out 0x4c, al; mov edi, esi; mov rcx, r13; call rbx;
0x0012080f: mov rdi, r14; mov rcx, r13; call rbx;
0x00120810: mov edi, esi; mov rcx, r13; call rbx;
0x00120812: mov rcx, r13; call rbx;
0x00120813: mov ecx, ebp; call rbx;
0x00120815: call rbx;
0x00120883: cdq; int 0xfe; jmp qword ptr [rsi+0xf];
0x00120884: int 0xfe; jmp qword ptr [rsi+0xf];
0x001208c4: ret 0x4864;
0x00120b2a: or al, 0x66; test r13d, 0x840f1000; ret 0xfffe;
0x00120b2c: test r13d, 0x840f1000; ret 0xfffe;
0x00120b2d: test ebp, 0x840f1000; ret 0xfffe;
0x00120b3e: add [rcx+rcx*8+0x7880cd75], eax; jmp far fword ptr [rsi];
0x00120b42: int 0x80;
0x00120b45: jmp far fword ptr [rsi];
0x00120cac: cmp ecx, esi; call qword ptr [rax-0x76b6a8bf];
0x00120cad: int1; call qword ptr [rax-0x76b6a8bf];
0x00120cae: call qword ptr [rax-0x76b6a8bf];
0x00120d84: dec dword ptr [rax-0x7b]; ror byte ptr [rdi], 0x94; ror byte ptr [rax-0x7d], 0xc4; or bl, al; mov eax, 1; ret;
0x00120d85: test rax, rax; sete al; add rsp, 8; ret;
0x00120d87: ror byte ptr [rdi], 0x94; ror byte ptr [rax-0x7d], 0xc4; or bl, al; mov eax, 1; ret;
0x00120d89: xchg esp, eax; ror byte ptr [rax-0x7d], 0xc4; or bl, al; mov eax, 1; ret;
0x00120d8a: ror byte ptr [rax-0x7d], 0xc4; or bl, al; mov eax, 1; ret;
0x00120d8e: or bl, al; mov eax, 1; ret;
0x00120dc3: or [rax-0x7d], cl; ret;
0x00120dd9: out 0x48, al; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret;
0x00120de3: nop [rax+rax]; add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret;
0x00120de5: add [rax], r8b; add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret;
0x00120e3e: out dx, al; iretd;
0x00120e77: or [rcx+rcx*4-0x20], cl; pop rbx; pop rbp; pop r12; pop r13; ret;
0x00120e78: mov rax, r12; pop rbx; pop rbp; pop r12; pop r13; ret;
0x0012156f: or [rax-1], bh; pop rbp; pop r12; pop r13; pop r14; ret;
0x00121570: mov eax, 0xffffffff; pop rbp; pop r12; pop r13; pop r14; ret;
0x00121574: call far fword ptr [rbp+0x41];
0x0012158f: lea rcx, [rip+0x66f8a]; and esi, 7; movsxd rax, [rcx+rsi*4]; shr rdx, 3; add rax, rcx; jmp rax;
0x00121590: lea ecx, [rip+0x66f8a]; and esi, 7; movsxd rax, [rcx+rsi*4]; shr rdx, 3; add rax, rcx; jmp rax;
0x00121591: or eax, 0x66f8a; and esi, 7; movsxd rax, [rcx+rsi*4]; shr rdx, 3; add rax, rcx; jmp rax;
0x00121592: mov ch, [rdi+6]; add [rbx+0x634807e6], al; add al, 0xb1; shr rdx, 3; add rax, rcx; jmp rax;
0x00121595: add [rbx+0x634807e6], al; add al, 0xb1; shr rdx, 3; add rax, rcx; jmp rax;
0x00121596: and esi, 7; movsxd rax, [rcx+rsi*4]; shr rdx, 3; add rax, rcx; jmp rax;
0x00121597: out 7, al; movsxd rax, [rcx+rsi*4]; shr rdx, 3; add rax, rcx; jmp rax;
0x00121599: movsxd rax, [rcx+rsi*4]; shr rdx, 3; add rax, rcx; jmp rax;
0x0012159a: movsxd eax, [rcx+rsi*4]; shr rdx, 3; add rax, rcx; jmp rax;
0x0012159b: add al, 0xb1; shr rdx, 3; add rax, rcx; jmp rax;
0x0012159c: mov cl, 0x48; shr edx, 3; add rax, rcx; jmp rax;
0x0012159d: shr rdx, 3; add rax, rcx; jmp rax;
0x0012159e: shr edx, 3; add rax, rcx; jmp rax;
0x0012162f: enter 0x8348, 0xea; add [rbp-0x7e], esi; ret;
0x00121633: add [rbp-0x7e], esi; ret;
0x00121688: mov rax, [r8+8]; mov edx, [rdi+0x5c]; lea rsi, [rdi+0x48]; mov rdi, r8; mov rax, [rax+0x18]; jmp rax;
0x00121689: mov eax, [rax+8]; mov edx, [rdi+0x5c]; lea rsi, [rdi+0x48]; mov rdi, r8; mov rax, [rax+0x18]; jmp rax;
0x0012168c: mov edx, [rdi+0x5c]; lea rsi, [rdi+0x48]; mov rdi, r8; mov rax, [rax+0x18]; jmp rax;
0x0012168d: push rdi; pop rsp; lea rsi, [rdi+0x48]; mov rdi, r8; mov rax, [rax+0x18]; jmp rax;
0x0012168e: pop rsp; lea rsi, [rdi+0x48]; mov rdi, r8; mov rax, [rax+0x18]; jmp rax;
0x0012168f: lea rsi, [rdi+0x48]; mov rdi, r8; mov rax, [rax+0x18]; jmp rax;
0x00121690: lea esi, [rdi+0x48]; mov rdi, r8; mov rax, [rax+0x18]; jmp rax;
0x00121693: mov rdi, r8; mov rax, [rax+0x18]; jmp rax;
0x00121694: mov edi, eax; mov rax, [rax+0x18]; jmp rax;
0x00121696: mov rax, [rax+0x18]; jmp rax;
0x00121697: mov eax, [rax+0x18]; jmp rax;
0x001216b2: nop [rax+rax]; nop [rax]; mov eax, 1; ret;
0x001216b3: nop [rax+rax]; nop [rax]; mov eax, 1; ret;
0x001216b4: nop [rax+rax]; nop [rax]; mov eax, 1; ret;
0x001216b6: test [rax], al; add [rax], al; add [rax], al; nop [rax]; mov eax, 1; ret;
0x001216b8: add [rax], al; add [rax], al; nop [rax]; mov eax, 1; ret;
0x001216ba: add [rax], al; nop [rax]; mov eax, 1; ret;
0x001216bc: nop [rax]; mov eax, 1; ret;
0x001216be: add [rax+1], dil; ret;
0x001216c2: add [rax], al; add bl, al; nop [rax+rax]; xor eax, eax; ret;
0x001216c4: add bl, al; nop [rax+rax]; xor eax, eax; ret;
0x00121761: fistp dword ptr [rip-0x74b80000], st; and al, 8; mov rdi, rbp; call qword ptr [rax+0x20];
0x00121762: sbb eax, 0x8b480000; and al, 8; mov rdi, rbp; call qword ptr [rax+0x20];
0x00121794: add [rax], al; add [rbp+6], dh; add rsp, 0x40; pop rbp; ret;
0x00121796: add [rbp+6], dh; add rsp, 0x40; pop rbp; ret;
0x00121799: add rsp, 0x40; pop rbp; ret;
0x0012179a: add esp, 0x40; pop rbp; ret;
0x001217a1: mov esi, 0x6666fffe; nop [rax+rax]; nop; ret;
0x001217a5: nop [rax+rax]; nop; ret;
0x001217a6: nop [rax+rax]; nop; ret;
0x001217a7: nop [rax+rax]; nop; ret;
0x001217a9: test [rax], al; add [rax], al; add [rax], al; nop; ret;
0x001217ab: add [rax], al; add [rax], al; nop; ret;
0x001217ce: mov rax, [rip+0x9ffcb]; lea rsi, [rip-0xfc]; lea rdi, [rip+0xa245d]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x001217cf: mov eax, [rip+0x9ffcb]; lea rsi, [rip-0xfc]; lea rdi, [rip+0xa245d]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x001217d0: add eax, 0x9ffcb; lea rsi, [rip-0xfc]; lea rdi, [rip+0xa245d]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x001217d3: or [rax], eax; lea rsi, [rip-0xfc]; lea rdi, [rip+0xa245d]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x001217d4: add [rax-0x73], cl; xor eax, 0xffffff04; lea rdi, [rip+0xa245d]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x001217d5: lea rsi, [rip-0xfc]; lea rdi, [rip+0xa245d]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x001217d6: lea esi, [rip-0xfc]; lea rdi, [rip+0xa245d]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x001217d7: xor eax, 0xffffff04; lea rdi, [rip+0xa245d]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x001217db: dec dword ptr [rax-0x73]; cmp eax, 0xa245d; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x001217dc: lea rdi, [rip+0xa245d]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x001217dd: lea edi, [rip+0xa245d]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x001217de: cmp eax, 0xa245d; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x001217df: pop rbp; and al, 0xa; add [rax-0x3f], cl; enter 0x6411, 0x48; xor eax, [0x30]; call rax;
0x001217e0: and al, 0xa; add [rax-0x3f], cl; enter 0x6411, 0x48; xor eax, [0x30]; call rax;
0x001217e1: or al, [rax]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x001217ed: add [rax], al; add bh, bh; ror byte ptr [rax-0x73], 1; add eax, 0xa2467; add rsp, 8; ret;
0x001217ef: add bh, bh; ror byte ptr [rax-0x73], 1; add eax, 0xa2467; add rsp, 8; ret;
0x001217f1: ror byte ptr [rax-0x73], 1; add eax, 0xa2467; add rsp, 8; ret;
0x001217f2: lea rax, [rip+0xa2467]; add rsp, 8; ret;
0x001217f3: lea eax, [rip+0xa2467]; add rsp, 8; ret;
0x001217f4: add eax, 0xa2467; add rsp, 8; ret;
0x0012180e: inc dword ptr [rbx+0xa242a0d]; add [rdx], al; add rsp, 8; lea rax, [rip+0xa243f]; ret;
0x0012180f: or dword ptr [rip+0xa242a], 2; add rsp, 8; lea rax, [rip+0xa243f]; ret;
0x00121811: sub ah, [rdx+rcx]; add [rdx], al; add rsp, 8; lea rax, [rip+0xa243f]; ret;
0x00121812: and al, 0xa; add [rdx], al; add rsp, 8; lea rax, [rip+0xa243f]; ret;
0x00121814: add [rdx], al; add rsp, 8; lea rax, [rip+0xa243f]; ret;
0x00121816: add rsp, 8; lea rax, [rip+0xa243f]; ret;
0x00121817: add esp, 8; lea rax, [rip+0xa243f]; ret;
0x00121819: or [rax-0x73], cl; add eax, 0xa243f; ret;
0x0012181a: lea rax, [rip+0xa243f]; ret;
0x0012181b: lea eax, [rip+0xa243f]; ret;
0x0012181c: add eax, 0xa243f; ret;
0x0012181f: or al, [rax]; ret;
0x0012183b: or al, ch; paddusw mm0, [rax]; add [rbp+0x310b75c0], al; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret;
0x0012183d: paddusw mm0, [rax]; add [rbp+0x310b75c0], al; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret;
0x0012183e: fld st, qword ptr [rax]; add [rbp+0x310b75c0], al; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret;
0x00121840: add [rbp+0x310b75c0], al; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret;
0x00121842: shl byte ptr [rbp+0xb], 0x31; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret;
0x00121844: or esi, [rcx]; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret;
0x00121845: xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret;
0x001219ae: ret 0x6601;
0x00121a3f: ret 0xc069;
0x00121a59: add ebp, [rcx]; ret 0x8166;
0x00121a5e: ret 0x200;
0x00121cc6: sbb [rax-0x7b], cl; ror byte ptr [rax-0x77], 5; call far fword ptr [rdi];
0x00121cc9: ror byte ptr [rax-0x77], 5; call far fword ptr [rdi];
0x00121cf8: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xa1fb2]; syscall;
0x00121cf9: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xa1fb2]; syscall;
0x00121cfa: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xa1fb2]; syscall;
0x00121cfb: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xa1fb2]; syscall;
0x00121cfc: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xa1fb2]; syscall;
0x00121cfd: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xa1fb2]; syscall;
0x00121cfe: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xa1fb2]; syscall;
0x00121cff: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xa1fb2]; syscall;
0x00121d00: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0xa1fb2]; syscall;
0x00121d01: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0xa1fb2]; syscall;
0x00121d02: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0xa1fb2; syscall;
0x00121d03: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0xa1fb2]; syscall;
0x00121d04: add [rax], al; mov eax, 0xca; lea rdi, [rip+0xa1fb2]; syscall;
0x00121d05: add [rax+0xca], bh; lea rdi, [rip+0xa1fb2]; syscall;
0x00121d06: mov eax, 0xca; lea rdi, [rip+0xa1fb2]; syscall;
0x00121d08: add [rax], al; add [rax-0x73], cl; cmp eax, 0xa1fb2; syscall;
0x00121d09: add [rax], al; lea rdi, [rip+0xa1fb2]; syscall;
0x00121d0a: add [rax-0x73], cl; cmp eax, 0xa1fb2; syscall;
0x00121d0b: lea rdi, [rip+0xa1fb2]; syscall;
0x00121d0c: lea edi, [rip+0xa1fb2]; syscall;
0x00121d0d: cmp eax, 0xa1fb2; syscall;
0x00121d0e: mov dl, 0x1f; or al, [rax]; syscall;
0x00121d10: or al, [rax]; syscall;
0x00121d5a: mov eax, 0x1f0ffffe; add bl, al; nop [rax+rax]; nop [rax]; ret;
0x00121d5f: add bl, al; nop [rax+rax]; nop [rax]; ret;
0x00121d7e: add [rcx], sil; rol bl, 0x66; nop [rax+rax]; xchg ax, ax; ret;
0x00121d7f: add [rcx], dh; rol bl, 0x66; nop [rax+rax]; xchg ax, ax; ret;
0x00121d81: rol bl, 0x66; nop [rax+rax]; xchg ax, ax; ret;
0x00121dcc: mov rsi, rbp; mov rcx, rbx; xor eax, eax; pop rbx; pop rbp; jmp rcx;
0x00121dcd: mov esi, ebp; mov rcx, rbx; xor eax, eax; pop rbx; pop rbp; jmp rcx;
0x00121dce: out dx, al; mov rcx, rbx; xor eax, eax; pop rbx; pop rbp; jmp rcx;
0x00121dcf: mov rcx, rbx; xor eax, eax; pop rbx; pop rbp; jmp rcx;
0x00121dd0: mov ecx, ebx; xor eax, eax; pop rbx; pop rbp; jmp rcx;
0x00121dd2: xor eax, eax; pop rbx; pop rbp; jmp rcx;
0x00121dd8: nop [rax+rax]; add rsp, 8; mov eax, 0x10; pop rbx; pop rbp; ret;
0x00121dde: add [rax], al; add rsp, 8; mov eax, 0x10; pop rbx; pop rbp; ret;
0x00121de0: add rsp, 8; mov eax, 0x10; pop rbx; pop rbp; ret;
0x00121de1: add esp, 8; mov eax, 0x10; pop rbx; pop rbp; ret;
0x00121de3: or [rax+0x10], bh; pop rbx; pop rbp; ret;
0x00121de4: mov eax, 0x10; pop rbx; pop rbp; ret;
0x00121de5: adc [rax], al; add [rax], al; pop rbx; pop rbp; ret;
0x00121e58: add [rax], al; nop [rax+rax]; mov rax, [rbx+0x20]; mov rsi, r13; mov rdi, rbp; call qword ptr [rax+8];
0x00121e5a: nop [rax+rax]; mov rax, [rbx+0x20]; mov rsi, r13; mov rdi, rbp; call qword ptr [rax+8];
0x00121e5b: nop [rax+rax]; mov rax, [rbx+0x20]; mov rsi, r13; mov rdi, rbp; call qword ptr [rax+8];
0x00121e5d: add [rax], r8b; mov rax, [rbx+0x20]; mov rsi, r13; mov rdi, rbp; call qword ptr [rax+8];
0x00121e5e: add [rax], al; mov rax, [rbx+0x20]; mov rsi, r13; mov rdi, rbp; call qword ptr [rax+8];
0x00121e5f: add [rax-0x75], cl; and [r9+r9*4-0x12], cl; mov rdi, rbp; call qword ptr [rax+8];
0x00121e60: mov rax, [rbx+0x20]; mov rsi, r13; mov rdi, rbp; call qword ptr [rax+8];
0x00121e61: mov eax, [rbx+0x20]; mov rsi, r13; mov rdi, rbp; call qword ptr [rax+8];
0x00121e62: and [r9+r9*4-0x12], cl; mov rdi, rbp; call qword ptr [rax+8];
0x00121e63: and [rcx+rcx*4-0x12], cl; mov rdi, rbp; call qword ptr [rax+8];
0x00121e64: mov rsi, r13; mov rdi, rbp; call qword ptr [rax+8];
0x00121e65: mov esi, ebp; mov rdi, rbp; call qword ptr [rax+8];
0x00121e66: out dx, al; mov rdi, rbp; call qword ptr [rax+8];
0x00121e72: add [rax], al; add [rcx-0x75], cl; cmp al, 0x24; mov rsi, rbp; mov rax, [rdi+0x38]; call qword ptr [rax+8];
0x00121e73: add [rax], al; mov rdi, [r12]; mov rsi, rbp; mov rax, [rdi+0x38]; call qword ptr [rax+8];
0x00121e74: add [rcx-0x75], cl; cmp al, 0x24; mov rsi, rbp; mov rax, [rdi+0x38]; call qword ptr [rax+8];
0x00121e75: mov rdi, [r12]; mov rsi, rbp; mov rax, [rdi+0x38]; call qword ptr [rax+8];
0x00121e76: mov edi, [rsp]; mov rsi, rbp; mov rax, [rdi+0x38]; call qword ptr [rax+8];
0x00121e77: cmp al, 0x24; mov rsi, rbp; mov rax, [rdi+0x38]; call qword ptr [rax+8];
0x00121e78: and al, 0x48; mov esi, ebp; mov rax, [rdi+0x38]; call qword ptr [rax+8];
0x00121e79: mov rsi, rbp; mov rax, [rdi+0x38]; call qword ptr [rax+8];
0x00121e7a: mov esi, ebp; mov rax, [rdi+0x38]; call qword ptr [rax+8];
0x00121e7b: out dx, al; mov rax, [rdi+0x38]; call qword ptr [rax+8];
0x00121e89: add [rax], al; xor eax, eax; mov rsi, [rsp+0x10]; mov rcx, [rsp+8]; mov rdi, rbp; call rcx;
0x00121e8a: add [rcx], dh; ror byte ptr [rax-0x75], 0x74; and al, 0x10; mov rcx, [rsp+8]; mov rdi, rbp; call rcx;
0x00121e8b: xor eax, eax; mov rsi, [rsp+0x10]; mov rcx, [rsp+8]; mov rdi, rbp; call rcx;
0x00121e8c: ror byte ptr [rax-0x75], 0x74; and al, 0x10; mov rcx, [rsp+8]; mov rdi, rbp; call rcx;
0x00121e8d: mov rsi, [rsp+0x10]; mov rcx, [rsp+8]; mov rdi, rbp; call rcx;
0x00121e8e: mov esi, [rsp+0x10]; mov rcx, [rsp+8]; mov rdi, rbp; call rcx;
0x00121e90: and al, 0x10; mov rcx, [rsp+8]; mov rdi, rbp; call rcx;
0x00121e91: adc [rax-0x75], cl; and al, 8; mov rdi, rbp; call rcx;
0x00121e92: mov rcx, [rsp+8]; mov rdi, rbp; call rcx;
0x00121e93: mov ecx, [rsp+8]; mov rdi, rbp; call rcx;
0x00121e95: and al, 8; mov rdi, rbp; call rcx;
0x00121e96: or [rax-0x77], cl; out dx, eax; call rcx;
0x00121e97: mov rdi, rbp; call rcx;
0x00121e98: mov edi, ebp; call rcx;
0x00121e99: out dx, eax; call rcx;
0x00121ea1: add [rax], al; add [rax-0x75], cl; and [r8-0x77], cl; out dx, eax; lea r15, [rsp+0x50]; call qword ptr [rax+0x20];
0x00121ea2: add [rax], al; mov rax, [rbx+0x20]; mov rdi, rbp; lea r15, [rsp+0x50]; call qword ptr [rax+0x20];
0x00121ea3: add [rax-0x75], cl; and [r8-0x77], cl; out dx, eax; lea r15, [rsp+0x50]; call qword ptr [rax+0x20];
0x00121ea4: mov rax, [rbx+0x20]; mov rdi, rbp; lea r15, [rsp+0x50]; call qword ptr [rax+0x20];
0x00121ea5: mov eax, [rbx+0x20]; mov rdi, rbp; lea r15, [rsp+0x50]; call qword ptr [rax+0x20];
0x00121ea6: and [r8-0x77], cl; out dx, eax; lea r15, [rsp+0x50]; call qword ptr [rax+0x20];
0x00121ea7: and [rax-0x77], cl; out dx, eax; lea r15, [rsp+0x50]; call qword ptr [rax+0x20];
0x00121ea8: mov rdi, rbp; lea r15, [rsp+0x50]; call qword ptr [rax+0x20];
0x00121ea9: mov edi, ebp; lea r15, [rsp+0x50]; call qword ptr [rax+0x20];
0x00121eaa: out dx, eax; lea r15, [rsp+0x50]; call qword ptr [rax+0x20];
0x00121eab: lea r15, [rsp+0x50]; call qword ptr [rax+0x20];
0x00121eac: lea edi, [rsp+0x50]; call qword ptr [rax+0x20];
0x00121eae: and al, 0x50; call qword ptr [rax+0x20];
0x00121eaf: push rax; call qword ptr [rax+0x20];
0x00121eb7: add al, ch; adc edi, [rax+rax+0x438b4800]; and [rcx], dh; test byte ptr [rax-0x77], 0xef; mov dword ptr [rbx+0x18], 1; call qword ptr [rax+0x28];
0x00121eb9: adc edi, [rax+rax+0x438b4800]; and [rcx], dh; test byte ptr [rax-0x77], 0xef; mov dword ptr [rbx+0x18], 1; call qword ptr [rax+0x28];
0x00121eba: mov esp, 0x8b480000; and [r9], sil; test byte ptr [rax-0x77], 0xef; mov dword ptr [rbx+0x18], 1; call qword ptr [rax+0x28];
0x00121ebb: add [rax], al; mov rax, [rbx+0x20]; xor esi, esi; mov rdi, rbp; mov dword ptr [rbx+0x18], 1; call qword ptr [rax+0x28];
0x00121ebc: add [rax-0x75], cl; and [r9], sil; test byte ptr [rax-0x77], 0xef; mov dword ptr [rbx+0x18], 1; call qword ptr [rax+0x28];
0x00121ebd: mov rax, [rbx+0x20]; xor esi, esi; mov rdi, rbp; mov dword ptr [rbx+0x18], 1; call qword ptr [rax+0x28];
0x00121ebe: mov eax, [rbx+0x20]; xor esi, esi; mov rdi, rbp; mov dword ptr [rbx+0x18], 1; call qword ptr [rax+0x28];
0x00121ebf: and [r9], sil; test byte ptr [rax-0x77], 0xef; mov dword ptr [rbx+0x18], 1; call qword ptr [rax+0x28];
0x00121ec0: and [rcx], dh; test byte ptr [rax-0x77], 0xef; mov dword ptr [rbx+0x18], 1; call qword ptr [rax+0x28];
0x00121ec1: xor esi, esi; mov rdi, rbp; mov dword ptr [rbx+0x18], 1; call qword ptr [rax+0x28];
0x00121ec2: test byte ptr [rax-0x77], 0xef; mov dword ptr [rbx+0x18], 1; call qword ptr [rax+0x28];
0x00121ec3: mov rdi, rbp; mov dword ptr [rbx+0x18], 1; call qword ptr [rax+0x28];
0x00121ec4: mov edi, ebp; mov dword ptr [rbx+0x18], 1; call qword ptr [rax+0x28];
0x00121ec5: out dx, eax; mov dword ptr [rbx+0x18], 1; call qword ptr [rax+0x28];
0x00121ec6: mov dword ptr [rbx+0x18], 1; call qword ptr [rax+0x28];
0x00121ec9: add [rax], eax; add [rax], al; call qword ptr [rax+0x28];
0x00121f2e: push qword ptr [rdi+rdi*2+0x48]; mov eax, [rdi+0x38]; call qword ptr [rax+0x18];
0x00121f37: sbb [rbp+0x483c74c0], al; mov eax, [rbx+0x20]; xor esi, esi; mov rdi, rbp; mov dword ptr [rbx+0x18], 0; call qword ptr [rax+0x28];
0x00121f39: shl byte ptr [rsp+rdi+0x48], 0x8b; and [r9], sil; test byte ptr [rax-0x77], 0xef; mov dword ptr [rbx+0x18], 0; call qword ptr [rax+0x28];
0x00121f3b: cmp al, 0x48; mov eax, [rbx+0x20]; xor esi, esi; mov rdi, rbp; mov dword ptr [rbx+0x18], 0; call qword ptr [rax+0x28];
0x00121f3c: mov rax, [rbx+0x20]; xor esi, esi; mov rdi, rbp; mov dword ptr [rbx+0x18], 0; call qword ptr [rax+0x28];
0x00121f3d: mov eax, [rbx+0x20]; xor esi, esi; mov rdi, rbp; mov dword ptr [rbx+0x18], 0; call qword ptr [rax+0x28];
0x00121f3e: and [r9], sil; test byte ptr [rax-0x77], 0xef; mov dword ptr [rbx+0x18], 0; call qword ptr [rax+0x28];
0x00121f3f: and [rcx], dh; test byte ptr [rax-0x77], 0xef; mov dword ptr [rbx+0x18], 0; call qword ptr [rax+0x28];
0x00121f40: xor esi, esi; mov rdi, rbp; mov dword ptr [rbx+0x18], 0; call qword ptr [rax+0x28];
0x00121f41: test byte ptr [rax-0x77], 0xef; mov dword ptr [rbx+0x18], 0; call qword ptr [rax+0x28];
0x00121f42: mov rdi, rbp; mov dword ptr [rbx+0x18], 0; call qword ptr [rax+0x28];
0x00121f43: mov edi, ebp; mov dword ptr [rbx+0x18], 0; call qword ptr [rax+0x28];
0x00121f44: out dx, eax; mov dword ptr [rbx+0x18], 0; call qword ptr [rax+0x28];
0x00121f45: mov dword ptr [rbx+0x18], 0; call qword ptr [rax+0x28];
0x00121f4e: sub [rax-0x75], cl; and [r11+0x22c093], cl; add [rcx+rcx*4-0xa], cl; add qword ptr [rbx+0x22a8], 1; mov rdi, rbp; call qword ptr [rax+0x18];
0x00121f4f: mov rax, [rbx+0x20]; mov edx, [rbx+0x22c0]; mov rsi, r14; add qword ptr [rbx+0x22a8], 1; mov rdi, rbp; call qword ptr [rax+0x18];
0x00121f50: mov eax, [rbx+0x20]; mov edx, [rbx+0x22c0]; mov rsi, r14; add qword ptr [rbx+0x22a8], 1; mov rdi, rbp; call qword ptr [rax+0x18];
0x00121f51: and [r11+0x22c093], cl; add [rcx+rcx*4-0xa], cl; add qword ptr [rbx+0x22a8], 1; mov rdi, rbp; call qword ptr [rax+0x18];
0x00121f52: and [rbx+0x22c093], cl; add [rcx+rcx*4-0xa], cl; add qword ptr [rbx+0x22a8], 1; mov rdi, rbp; call qword ptr [rax+0x18];
0x00121f53: mov edx, [rbx+0x22c0]; mov rsi, r14; add qword ptr [rbx+0x22a8], 1; mov rdi, rbp; call qword ptr [rax+0x18];
0x00121f54: xchg ebx, eax; shl byte ptr [rdx], 0; add [rcx+rcx*4-0xa], cl; add qword ptr [rbx+0x22a8], 1; mov rdi, rbp; call qword ptr [rax+0x18];
0x00121f55: shl byte ptr [rdx], 0; add [rcx+rcx*4-0xa], cl; add qword ptr [rbx+0x22a8], 1; mov rdi, rbp; call qword ptr [rax+0x18];
0x00121f56: and al, [rax]; add [rcx+rcx*4-0xa], cl; add qword ptr [rbx+0x22a8], 1; mov rdi, rbp; call qword ptr [rax+0x18];
0x00121f57: add [rax], al; mov rsi, r14; add qword ptr [rbx+0x22a8], 1; mov rdi, rbp; call qword ptr [rax+0x18];
0x00121f58: add [rcx+rcx*4-0xa], cl; add qword ptr [rbx+0x22a8], 1; mov rdi, rbp; call qword ptr [rax+0x18];
0x00121f59: mov rsi, r14; add qword ptr [rbx+0x22a8], 1; mov rdi, rbp; call qword ptr [rax+0x18];
0x00121f5a: mov esi, esi; add qword ptr [rbx+0x22a8], 1; mov rdi, rbp; call qword ptr [rax+0x18];
0x00121f5b: test byte ptr [rax-0x7d], 0x83; test al, 0x22; add [rax], al; add [rax-0x77], ecx; out dx, eax; call qword ptr [rax+0x18];
0x00121f5c: add qword ptr [rbx+0x22a8], 1; mov rdi, rbp; call qword ptr [rax+0x18];
0x00121f5d: add dword ptr [rbx+0x22a8], 1; mov rdi, rbp; call qword ptr [rax+0x18];
0x00121f5e: sub dword ptr [rax+0x1000022], 0x48; mov edi, ebp; call qword ptr [rax+0x18];
0x00121f5f: test al, 0x22; add [rax], al; add [rax-0x77], ecx; out dx, eax; call qword ptr [rax+0x18];
0x00121f60: and al, [rax]; add [rcx], al; mov rdi, rbp; call qword ptr [rax+0x18];
0x00121f61: add [rax], al; add [rax-0x77], ecx; out dx, eax; call qword ptr [rax+0x18];
0x00121f62: add [rcx], al; mov rdi, rbp; call qword ptr [rax+0x18];
0x00121f63: add [rax-0x77], ecx; out dx, eax; call qword ptr [rax+0x18];
0x00121f64: mov rdi, rbp; call qword ptr [rax+0x18];
0x00121f65: mov edi, ebp; call qword ptr [rax+0x18];
0x00121f66: out dx, eax; call qword ptr [rax+0x18];
0x00121fad: add bl, ch; enter 0x8b48, 0x47; cmp [rbp+rcx*4+0x6c], cl; and al, 0x68; mov rsi, r13; call qword ptr [rax+0x10];
0x00121faf: enter 0x8b48, 0x47; cmp [rbp+rcx*4+0x6c], cl; and al, 0x68; mov rsi, r13; call qword ptr [rax+0x10];
0x00121fb0: mov rax, [rdi+0x38]; lea r13, [rsp+0x68]; mov rsi, r13; call qword ptr [rax+0x10];
0x00121fb1: mov eax, [rdi+0x38]; lea r13, [rsp+0x68]; mov rsi, r13; call qword ptr [rax+0x10];
0x00121fb2: cmp [r13+r9*4+0x6c], r9b; and al, 0x68; mov rsi, r13; call qword ptr [rax+0x10];
0x00121fb3: cmp [rbp+rcx*4+0x6c], cl; and al, 0x68; mov rsi, r13; call qword ptr [rax+0x10];
0x00121fb4: lea r13, [rsp+0x68]; mov rsi, r13; call qword ptr [rax+0x10];
0x00121fb5: lea ebp, [rsp+0x68]; mov rsi, r13; call qword ptr [rax+0x10];
0x00121fb6: insb [rdi], dx; and al, 0x68; mov rsi, r13; call qword ptr [rax+0x10];
0x00121fb7: and al, 0x68; mov rsi, r13; call qword ptr [rax+0x10];
0x00121fb9: mov rsi, r13; call qword ptr [rax+0x10];
0x00121fba: mov esi, ebp; call qword ptr [rax+0x10];
0x00121fbb: out dx, al; call qword ptr [rax+0x10];
0x00121fbd: push rax; adc [rbp+0x494874c0], al; mov edi, [rsp]; mov rsi, r13; mov rax, [rdi+0x38]; call qword ptr [rax+0x10];
0x00121fbe: adc [rbp+0x494874c0], al; mov edi, [rsp]; mov rsi, r13; mov rax, [rdi+0x38]; call qword ptr [rax+0x10];
0x00121fc0: shl byte ptr [rax+rcx*2+0x49], 0x8b; cmp al, 0x24; mov rsi, r13; mov rax, [rdi+0x38]; call qword ptr [rax+0x10];
0x00121fc3: mov rdi, [r12]; mov rsi, r13; mov rax, [rdi+0x38]; call qword ptr [rax+0x10];
0x00121fc4: mov edi, [rsp]; mov rsi, r13; mov rax, [rdi+0x38]; call qword ptr [rax+0x10];
0x00121fc5: cmp al, 0x24; mov rsi, r13; mov rax, [rdi+0x38]; call qword ptr [rax+0x10];
0x00121fc6: and al, 0x4c; mov esi, ebp; mov rax, [rdi+0x38]; call qword ptr [rax+0x10];
0x00121fc7: mov rsi, r13; mov rax, [rdi+0x38]; call qword ptr [rax+0x10];
0x00121fc8: mov esi, ebp; mov rax, [rdi+0x38]; call qword ptr [rax+0x10];
0x00121fc9: out dx, al; mov rax, [rdi+0x38]; call qword ptr [rax+0x10];
0x00122099: add [rbp+0x487274c0], al; mov eax, [rbx+0x20]; mov rdi, rbp; call qword ptr [rax+0x20];
0x0012209b: shl byte ptr [rdx+rsi*2+0x48], 0x8b; and [r8-0x77], cl; out dx, eax; call qword ptr [rax+0x20];
0x0012209e: mov rax, [rbx+0x20]; mov rdi, rbp; call qword ptr [rax+0x20];
0x0012209f: mov eax, [rbx+0x20]; mov rdi, rbp; call qword ptr [rax+0x20];
0x001220a0: and [r8-0x77], cl; out dx, eax; call qword ptr [rax+0x20];
0x001220a1: and [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x20];
0x001220ad: add [rax-0x75], cl; and [r8-0x75], cl; cmp [rax-0x7b], cl; shl byte ptr [rbp+rax+0x48], 0x89; out dx, eax; call rax;
0x001220b0: and [r8-0x75], cl; cmp [rax-0x7b], cl; shl byte ptr [rbp+rax+0x48], 0x89; out dx, eax; call rax;
0x001220b1: and [rax-0x75], cl; cmp [rax-0x7b], cl; shl byte ptr [rbp+rax+0x48], 0x89; out dx, eax; call rax;
0x00122147: xor al, dh; dec dword ptr [rax-0x77]; ret;
0x00122203: add [rax-0x7b], cl; push qword ptr [rdi+rcx+0x48]; mov eax, [rdi+8]; call qword ptr [rax+0x20];
0x00122206: push qword ptr [rdi+rcx+0x48]; mov eax, [rdi+8]; call qword ptr [rax+0x20];
0x001222bb: add [rdx+0x19], ch; mov r8, [rsp+0x28]; mov rcx, [rsp+0x20]; mov rdx, [rsp+0x18]; mov rsi, [rsp+0x10]; call qword ptr [rax];
0x001222bc: push 0x19; mov r8, [rsp+0x28]; mov rcx, [rsp+0x20]; mov rdx, [rsp+0x18]; mov rsi, [rsp+0x10]; call qword ptr [rax];
0x001222bd: sbb [rbx+rcx*4+0x44], ecx; and al, 0x28; mov rcx, [rsp+0x20]; mov rdx, [rsp+0x18]; mov rsi, [rsp+0x10]; call qword ptr [rax];
0x001222be: mov r8, [rsp+0x28]; mov rcx, [rsp+0x20]; mov rdx, [rsp+0x18]; mov rsi, [rsp+0x10]; call qword ptr [rax];
0x001222bf: mov eax, [rsp+0x28]; mov rcx, [rsp+0x20]; mov rdx, [rsp+0x18]; mov rsi, [rsp+0x10]; call qword ptr [rax];
0x001222c1: and al, 0x28; mov rcx, [rsp+0x20]; mov rdx, [rsp+0x18]; mov rsi, [rsp+0x10]; call qword ptr [rax];
0x001222c2: sub [rax-0x75], cl; and al, 0x20; mov rdx, [rsp+0x18]; mov rsi, [rsp+0x10]; call qword ptr [rax];
0x001222c3: mov rcx, [rsp+0x20]; mov rdx, [rsp+0x18]; mov rsi, [rsp+0x10]; call qword ptr [rax];
0x001222c4: mov ecx, [rsp+0x20]; mov rdx, [rsp+0x18]; mov rsi, [rsp+0x10]; call qword ptr [rax];
0x001222c6: and al, 0x20; mov rdx, [rsp+0x18]; mov rsi, [rsp+0x10]; call qword ptr [rax];
0x001222c7: and [rax-0x75], cl; push rsp; and al, 0x18; mov rsi, [rsp+0x10]; call qword ptr [rax];
0x001222c8: mov rdx, [rsp+0x18]; mov rsi, [rsp+0x10]; call qword ptr [rax];
0x001222c9: mov edx, [rsp+0x18]; mov rsi, [rsp+0x10]; call qword ptr [rax];
0x001222ca: push rsp; and al, 0x18; mov rsi, [rsp+0x10]; call qword ptr [rax];
0x001222cb: and al, 0x18; mov rsi, [rsp+0x10]; call qword ptr [rax];
0x001222cd: mov rsi, [rsp+0x10]; call qword ptr [rax];
0x001222ce: mov esi, [rsp+0x10]; call qword ptr [rax];
0x001223a5: add [rax-0x7b], cl; push qword ptr [rdi+rax+0x48]; mov eax, [rdi+8]; call qword ptr [rax+0x20];
0x001223a8: push qword ptr [rdi+rax+0x48]; mov eax, [rdi+8]; call qword ptr [rax+0x20];
0x001223bb: nop [rax+rax]; pop rbp; ret;
0x001223bd: add [rax], r8b; pop rbp; ret;
0x001223e9: mov [rip+0xa18ed], eax; add rsp, 8; ret;
0x001223ea: add eax, 0xa18ed; add rsp, 8; ret;
0x001223ed: or al, [rax]; add rsp, 8; ret;
0x0012245d: add rsp, 0x28; pop rbp; pop r12; pop r13; pop r14; ret;
0x0012245e: add esp, 0x28; pop rbp; pop r12; pop r13; pop r14; ret;
0x00122460: sub [rbp+0x41], bl; pop rsp; pop r13; pop r14; ret;
0x0012246b: mov cl, 0xfe; jmp qword ptr [rsi-0x70];
0x001224b3: test byte ptr [rcx], 0x8b; push rax; adc dh, dh; ret 0x7401;
0x00122512: add [rbp+0x21], dh; add rsp, 0x18; mov eax, r12d; pop rbx; pop r12; ret;
0x00122515: add rsp, 0x18; mov eax, r12d; pop rbx; pop r12; ret;
0x00122516: add esp, 0x18; mov eax, r12d; pop rbx; pop r12; ret;
0x00122518: sbb [rcx+rcx*4-0x20], al; pop rbx; pop r12; ret;
0x0012260c: and [rsi+1], bh; mov [rsp+0x28], rbx; push qword ptr [rip+0x6fefb]; push qword ptr [rip+0x6feed]; lea r9, [rsp+0x1c]; call qword ptr [rax];
0x0012260d: mov esi, 1; mov [rsp+0x28], rbx; push qword ptr [rip+0x6fefb]; push qword ptr [rip+0x6feed]; lea r9, [rsp+0x1c]; call qword ptr [rax];
0x00122610: add [rax], al; mov [rsp+0x28], rbx; push qword ptr [rip+0x6fefb]; push qword ptr [rip+0x6feed]; lea r9, [rsp+0x1c]; call qword ptr [rax];
0x00122612: mov [rsp+0x28], rbx; push qword ptr [rip+0x6fefb]; push qword ptr [rip+0x6feed]; lea r9, [rsp+0x1c]; call qword ptr [rax];
0x00122613: mov [rsp+0x28], ebx; push qword ptr [rip+0x6fefb]; push qword ptr [rip+0x6feed]; lea r9, [rsp+0x1c]; call qword ptr [rax];
0x00122614: pop rsp; and al, 0x28; push qword ptr [rip+0x6fefb]; push qword ptr [rip+0x6feed]; lea r9, [rsp+0x1c]; call qword ptr [rax];
0x00122615: and al, 0x28; push qword ptr [rip+0x6fefb]; push qword ptr [rip+0x6feed]; lea r9, [rsp+0x1c]; call qword ptr [rax];
0x00122616: sub bh, bh; xor eax, 0x6fefb; push qword ptr [rip+0x6feed]; lea r9, [rsp+0x1c]; call qword ptr [rax];
0x00122618: xor eax, 0x6fefb; push qword ptr [rip+0x6feed]; lea r9, [rsp+0x1c]; call qword ptr [rax];
0x00122619: sti; inc byte ptr [rsi]; add bh, bh; xor eax, 0x6feed; lea r9, [rsp+0x1c]; call qword ptr [rax];
0x0012261a: inc byte ptr [rsi]; add bh, bh; xor eax, 0x6feed; lea r9, [rsp+0x1c]; call qword ptr [rax];
0x0012261c: add bh, bh; xor eax, 0x6feed; lea r9, [rsp+0x1c]; call qword ptr [rax];
0x0012261e: xor eax, 0x6feed; lea r9, [rsp+0x1c]; call qword ptr [rax];
0x0012261f: in eax, dx; inc byte ptr [rsi]; add [rbp+rcx*4+0x4c], cl; and al, 0x1c; call qword ptr [rax];
0x00122620: inc byte ptr [rsi]; add [rbp+rcx*4+0x4c], cl; and al, 0x1c; call qword ptr [rax];
0x0012262d: shl byte ptr [rbp+0x18], 0x49; mov eax, [rsp+8]; mov rdi, r12; call qword ptr [rax+0x20];
0x0012262f: sbb [rcx-0x75], cl; and al, 8; mov rdi, r12; call qword ptr [rax+0x20];
0x00122630: mov rax, [r12+8]; mov rdi, r12; call qword ptr [rax+0x20];
0x00122631: mov eax, [rsp+8]; mov rdi, r12; call qword ptr [rax+0x20];
0x00122633: and al, 8; mov rdi, r12; call qword ptr [rax+0x20];
0x00122634: or [rcx+rcx*4-0x19], cl; call qword ptr [rax+0x20];
0x0012266e: or al, 0; add [rax], al; add bl, ch; mov ebx, 0xfeafa6e8; jmp qword ptr [rsi+0xf];
0x00122670: add [rax], al; add bl, ch; mov ebx, 0xfeafa6e8; jmp qword ptr [rsi+0xf];
0x00122672: add bl, ch; mov ebx, 0xfeafa6e8; jmp qword ptr [rsi+0xf];
0x00122674: mov ebx, 0xfeafa6e8; jmp qword ptr [rsi+0xf];
0x001226c8: test [rdi+0x48000000], ebp; add esp, 0x50; pop rbx; pop rbp; pop r12; ret;
0x00122742: mov qword ptr [rsp+0x20], 0; mov qword ptr [rsp+0x28], 0; push qword ptr [rip+0x6fdbe]; push qword ptr [rip+0x6fdb0]; lea r9, [rsp+0x1c]; call qword ptr [rax];
0x00122743: mov dword ptr [rsp+0x20], 0; mov qword ptr [rsp+0x28], 0; push qword ptr [rip+0x6fdbe]; push qword ptr [rip+0x6fdb0]; lea r9, [rsp+0x1c]; call qword ptr [rax];
0x00122749: add [rax], al; mov qword ptr [rsp+0x28], 0; push qword ptr [rip+0x6fdbe]; push qword ptr [rip+0x6fdb0]; lea r9, [rsp+0x1c]; call qword ptr [rax];
0x0012274b: mov qword ptr [rsp+0x28], 0; push qword ptr [rip+0x6fdbe]; push qword ptr [rip+0x6fdb0]; lea r9, [rsp+0x1c]; call qword ptr [rax];
0x0012274c: mov dword ptr [rsp+0x28], 0; push qword ptr [rip+0x6fdbe]; push qword ptr [rip+0x6fdb0]; lea r9, [rsp+0x1c]; call qword ptr [rax];
0x00122750: add [rax], al; add [rax], al; push qword ptr [rip+0x6fdbe]; push qword ptr [rip+0x6fdb0]; lea r9, [rsp+0x1c]; call qword ptr [rax];
0x00122751: add [rax], al; add bh, bh; xor eax, 0x6fdbe; push qword ptr [rip+0x6fdb0]; lea r9, [rsp+0x1c]; call qword ptr [rax];
0x00122752: add [rax], al; push qword ptr [rip+0x6fdbe]; push qword ptr [rip+0x6fdb0]; lea r9, [rsp+0x1c]; call qword ptr [rax];
0x00122753: add bh, bh; xor eax, 0x6fdbe; push qword ptr [rip+0x6fdb0]; lea r9, [rsp+0x1c]; call qword ptr [rax];
0x00122754: push qword ptr [rip+0x6fefb]; push qword ptr [rip+0x6feed]; lea r9, [rsp+0x1c]; call qword ptr [rax];
0x00122755: xor eax, 0x6fdbe; push qword ptr [rip+0x6fdb0]; lea r9, [rsp+0x1c]; call qword ptr [rax];
0x00122756: mov esi, 0xff0006fd; xor eax, 0x6fdb0; lea r9, [rsp+0x1c]; call qword ptr [rax];
0x00122759: add bh, bh; xor eax, 0x6fdb0; lea r9, [rsp+0x1c]; call qword ptr [rax];
0x0012275a: push qword ptr [rip+0x6feed]; lea r9, [rsp+0x1c]; call qword ptr [rax];
0x0012275b: xor eax, 0x6fdb0; lea r9, [rsp+0x1c]; call qword ptr [rax];
0x0012275f: add [rbp+rcx*4+0x4c], cl; and al, 0x1c; call qword ptr [rax];
0x00122760: lea r9, [rsp+0x1c]; call qword ptr [rax];
0x00122761: lea ecx, [rsp+0x1c]; call qword ptr [rax];
0x00122763: and al, 0x1c; call qword ptr [rax];
0x00122764: sbb al, 0xff; adc [rax-0x75], cl; or [r8-0x77], r9b; out dx, eax; call qword ptr [rax+0x20];
0x00122766: adc [rax-0x75], cl; or [r8-0x77], r9b; out dx, eax; call qword ptr [rax+0x20];
0x00122815: add [rcx+0x54], al; lea r8, [rip+0x181]; mov esi, 4; mov rdi, rbp; lea r9, [rsp+0x20]; call qword ptr [rax];
0x00122816: push r12; lea r8, [rip+0x181]; mov esi, 4; mov rdi, rbp; lea r9, [rsp+0x20]; call qword ptr [rax];
0x00122817: push rsp; lea r8, [rip+0x181]; mov esi, 4; mov rdi, rbp; lea r9, [rsp+0x20]; call qword ptr [rax];
0x00122818: lea r8, [rip+0x181]; mov esi, 4; mov rdi, rbp; lea r9, [rsp+0x20]; call qword ptr [rax];
0x00122819: lea eax, [rip+0x181]; mov esi, 4; mov rdi, rbp; lea r9, [rsp+0x20]; call qword ptr [rax];
0x0012281a: add eax, 0x181; mov esi, 4; mov rdi, rbp; lea r9, [rsp+0x20]; call qword ptr [rax];
0x0012281b: add dword ptr [rcx], 0x4be0000; add [rax], al; add [rax-0x77], cl; out dx, eax; lea r9, [rsp+0x20]; call qword ptr [rax];
0x0012281c: add [rax], eax; add [rsi+4], bh; mov rdi, rbp; lea r9, [rsp+0x20]; call qword ptr [rax];
0x0012281d: add [rax], al; mov esi, 4; mov rdi, rbp; lea r9, [rsp+0x20]; call qword ptr [rax];
0x0012281e: add [rsi+4], bh; mov rdi, rbp; lea r9, [rsp+0x20]; call qword ptr [rax];
0x0012281f: mov esi, 4; mov rdi, rbp; lea r9, [rsp+0x20]; call qword ptr [rax];
0x00122820: add al, 0; add [rax], al; mov rdi, rbp; lea r9, [rsp+0x20]; call qword ptr [rax];
0x00122821: add [rax], al; add [rax-0x77], cl; out dx, eax; lea r9, [rsp+0x20]; call qword ptr [rax];
0x00122822: add [rax], al; mov rdi, rbp; lea r9, [rsp+0x20]; call qword ptr [rax];
0x00122823: add [rax-0x77], cl; out dx, eax; lea r9, [rsp+0x20]; call qword ptr [rax];
0x00122824: mov rdi, rbp; lea r9, [rsp+0x20]; call qword ptr [rax];
0x00122825: mov edi, ebp; lea r9, [rsp+0x20]; call qword ptr [rax];
0x00122826: out dx, eax; lea r9, [rsp+0x20]; call qword ptr [rax];
0x00122855: add [rax], al; nop [rax+rax]; mov rax, [rbp+8]; mov rdi, rbp; call qword ptr [rax+0x20];
0x00122857: nop [rax+rax]; mov rax, [rbp+8]; mov rdi, rbp; call qword ptr [rax+0x20];
0x00122858: nop [rax+rax]; mov rax, [rbp+8]; mov rdi, rbp; call qword ptr [rax+0x20];
0x0012285a: test [rax], al; add [rax], al; add [rax], al; mov rax, [rbp+8]; mov rdi, rbp; call qword ptr [rax+0x20];
0x0012285b: add [rax], al; add [rax], al; add [rax-0x75], cl; or [r8-0x77], r9b; out dx, eax; call qword ptr [rax+0x20];
0x0012285c: add [rax], al; add [rax], al; mov rax, [rbp+8]; mov rdi, rbp; call qword ptr [rax+0x20];
0x0012285d: add [rax], al; add [rax-0x75], cl; or [r8-0x77], r9b; out dx, eax; call qword ptr [rax+0x20];
0x0012285e: add [rax], al; mov rax, [rbp+8]; mov rdi, rbp; call qword ptr [rax+0x20];
0x0012285f: add [rax-0x75], cl; or [r8-0x77], r9b; out dx, eax; call qword ptr [rax+0x20];
0x001228d9: push r12; lea r8, [rip+0xbe]; xor ecx, ecx; lea rdx, [rip+0xcb15]; lea r9, [rsp+0x20]; call qword ptr [rax];
0x001228da: push rsp; lea r8, [rip+0xbe]; xor ecx, ecx; lea rdx, [rip+0xcb15]; lea r9, [rsp+0x20]; call qword ptr [rax];
0x001228db: lea r8, [rip+0xbe]; xor ecx, ecx; lea rdx, [rip+0xcb15]; lea r9, [rsp+0x20]; call qword ptr [rax];
0x001228dc: lea eax, [rip+0xbe]; xor ecx, ecx; lea rdx, [rip+0xcb15]; lea r9, [rsp+0x20]; call qword ptr [rax];
0x001228dd: add eax, 0xbe; xor ecx, ecx; lea rdx, [rip+0xcb15]; lea r9, [rsp+0x20]; call qword ptr [rax];
0x001228de: mov esi, 0x31000000; leave; lea rdx, [rip+0xcb15]; lea r9, [rsp+0x20]; call qword ptr [rax];
0x001228df: add [rax], al; add [rcx], dh; leave; lea rdx, [rip+0xcb15]; lea r9, [rsp+0x20]; call qword ptr [rax];
0x001228e0: add [rax], al; xor ecx, ecx; lea rdx, [rip+0xcb15]; lea r9, [rsp+0x20]; call qword ptr [rax];
0x001228e1: add [rcx], dh; leave; lea rdx, [rip+0xcb15]; lea r9, [rsp+0x20]; call qword ptr [rax];
0x001228e2: xor ecx, ecx; lea rdx, [rip+0xcb15]; lea r9, [rsp+0x20]; call qword ptr [rax];
0x001228e3: leave; lea rdx, [rip+0xcb15]; lea r9, [rsp+0x20]; call qword ptr [rax];
0x001228e4: lea rdx, [rip+0xcb15]; lea r9, [rsp+0x20]; call qword ptr [rax];
0x001228e5: lea edx, [rip+0xcb15]; lea r9, [rsp+0x20]; call qword ptr [rax];
0x001228e6: adc eax, 0xcb15; lea r9, [rsp+0x20]; call qword ptr [rax];
0x001228e7: adc eax, 0x4c0000cb; lea ecx, [rsp+0x20]; call qword ptr [rax];
0x001228e9: add [rax], al; lea r9, [rsp+0x20]; call qword ptr [rax];
0x001228ea: add [rbp+rcx*4+0x4c], cl; and al, 0x20; call qword ptr [rax];
0x001228eb: lea r9, [rsp+0x20]; call qword ptr [rax];
0x001228ec: lea ecx, [rsp+0x20]; call qword ptr [rax];
0x001228ee: and al, 0x20; call qword ptr [rax];
0x001228f5: shl byte ptr [rbp+0x14], 0x48; mov eax, [rbp+8]; mov rdi, rbp; call qword ptr [rax+0x20];
0x001228f7: adc al, 0x48; mov eax, [rbp+8]; mov rdi, rbp; call qword ptr [rax+0x20];
0x00122ad6: add [rax], al; add [rbp+0x32], dh; add rsp, 0x18; pop rbx; pop rbp; ret;
0x00122ad8: add [rbp+0x32], dh; add rsp, 0x18; pop rbx; pop rbp; ret;
0x00122af8: mov rax, [rsp]; mov rsi, [rbx+0x10]; mov rdi, rbp; mov [rbx], rax; xor eax, eax; call qword ptr [rbx+0x18];
0x00122af9: mov eax, [rsp]; mov rsi, [rbx+0x10]; mov rdi, rbp; mov [rbx], rax; xor eax, eax; call qword ptr [rbx+0x18];
0x00122afa: add al, 0x24; mov rsi, [rbx+0x10]; mov rdi, rbp; mov [rbx], rax; xor eax, eax; call qword ptr [rbx+0x18];
0x00122afb: and al, 0x48; mov esi, [rbx+0x10]; mov rdi, rbp; mov [rbx], rax; xor eax, eax; call qword ptr [rbx+0x18];
0x00122afc: mov rsi, [rbx+0x10]; mov rdi, rbp; mov [rbx], rax; xor eax, eax; call qword ptr [rbx+0x18];
0x00122afd: mov esi, [rbx+0x10]; mov rdi, rbp; mov [rbx], rax; xor eax, eax; call qword ptr [rbx+0x18];
0x00122aff: adc [rax-0x77], cl; out dx, eax; mov [rbx], rax; xor eax, eax; call qword ptr [rbx+0x18];
0x00122b00: mov rdi, rbp; mov [rbx], rax; xor eax, eax; call qword ptr [rbx+0x18];
0x00122b01: mov edi, ebp; mov [rbx], rax; xor eax, eax; call qword ptr [rbx+0x18];
0x00122b02: out dx, eax; mov [rbx], rax; xor eax, eax; call qword ptr [rbx+0x18];
0x00122b03: mov [rbx], rax; xor eax, eax; call qword ptr [rbx+0x18];
0x00122b04: mov [rbx], eax; xor eax, eax; call qword ptr [rbx+0x18];
0x00122b05: add esi, [rcx]; sar bh, 0x53; sbb bl, ch; mov esi, 0xfeab0ee8; jmp qword ptr [rsi+0x66];
0x00122b06: xor eax, eax; call qword ptr [rbx+0x18];
0x00122b07: sar bh, 0x53; sbb bl, ch; mov esi, 0xfeab0ee8; jmp qword ptr [rsi+0x66];
0x00122b08: call qword ptr [rbx+0x18];
0x00122b09: push rbx; sbb bl, ch; mov esi, 0xfeab0ee8; jmp qword ptr [rsi+0x66];
0x00122b0a: sbb bl, ch; mov esi, 0xfeab0ee8; jmp qword ptr [rsi+0x66];
0x00122b0c: mov esi, 0xfeab0ee8; jmp qword ptr [rsi+0x66];
0x00122b8b: add [rbp+0x48bb74c0], al; mov eax, [rbp+8]; mov rdi, rbp; mov qword ptr [rsp], 0; call qword ptr [rax+0x20];
0x00122b8d: shl byte ptr [rbx+rdi*4+0x48], 0x8b; or [r8-0x77], r9b; out dx, eax; mov qword ptr [rsp], 0; call qword ptr [rax+0x20];
0x00122b8f: mov ebx, 0x8458b48; mov rdi, rbp; mov qword ptr [rsp], 0; call qword ptr [rax+0x20];
0x00122b90: mov rax, [rbp+8]; mov rdi, rbp; mov qword ptr [rsp], 0; call qword ptr [rax+0x20];
0x00122b91: mov eax, [rbp+8]; mov rdi, rbp; mov qword ptr [rsp], 0; call qword ptr [rax+0x20];
0x00122b92: or [r8-0x77], r9b; out dx, eax; mov qword ptr [rsp], 0; call qword ptr [rax+0x20];
0x00122b93: or [rax-0x77], cl; out dx, eax; mov qword ptr [rsp], 0; call qword ptr [rax+0x20];
0x00122b94: mov rdi, rbp; mov qword ptr [rsp], 0; call qword ptr [rax+0x20];
0x00122b95: mov edi, ebp; mov qword ptr [rsp], 0; call qword ptr [rax+0x20];
0x00122b96: out dx, eax; mov qword ptr [rsp], 0; call qword ptr [rax+0x20];
0x00122b97: mov qword ptr [rsp], 0; call qword ptr [rax+0x20];
0x00122b98: mov dword ptr [rsp], 0; call qword ptr [rax+0x20];
0x00122b99: add al, 0x24; add [rax], al; add [rax], al; call qword ptr [rax+0x20];
0x00122b9b: add [rax], al; add [rax], al; call qword ptr [rax+0x20];
0x00122b9d: add [rax], al; call qword ptr [rax+0x20];
0x00122bac: mov al, [0x489774c0850000c9]; mov eax, [rbp+8]; mov rdi, rbp; call qword ptr [rax+0x20];
0x00122baf: add [rbp+0x489774c0], al; mov eax, [rbp+8]; mov rdi, rbp; call qword ptr [rax+0x20];
0x00122bb1: shl byte ptr [rdi+rdx*4+0x48], 0x8b; or [r8-0x77], r9b; out dx, eax; call qword ptr [rax+0x20];
0x00122bb3: xchg edi, eax; mov rax, [rbp+8]; mov rdi, rbp; call qword ptr [rax+0x20];
0x00122bbe: mov rsi, [rbx+0x20]; mov rdi, rbp; mov r12d, eax; xor eax, eax; call qword ptr [rbx+0x28];
0x00122bbf: mov esi, [rbx+0x20]; mov rdi, rbp; mov r12d, eax; xor eax, eax; call qword ptr [rbx+0x28];
0x00122bc1: and [rax-0x77], cl; out dx, eax; mov r12d, eax; xor eax, eax; call qword ptr [rbx+0x28];
0x00122bc2: mov rdi, rbp; mov r12d, eax; xor eax, eax; call qword ptr [rbx+0x28];
0x00122bc3: mov edi, ebp; mov r12d, eax; xor eax, eax; call qword ptr [rbx+0x28];
0x00122bc4: out dx, eax; mov r12d, eax; xor eax, eax; call qword ptr [rbx+0x28];
0x00122bc5: mov r12d, eax; xor eax, eax; call qword ptr [rbx+0x28];
0x00122bc6: mov esp, eax; xor eax, eax; call qword ptr [rbx+0x28];
0x00122bc8: xor eax, eax; call qword ptr [rbx+0x28];
0x00122bca: call qword ptr [rbx+0x28];
0x00122bd4: dec dword ptr [rax-0x75]; or [r8-0x77], r9b; out dx, eax; call qword ptr [rax+0x20];
0x00122bd5: mov rax, [rbp+8]; mov rdi, rbp; call qword ptr [rax+0x20];
0x00122bd6: mov eax, [rbp+8]; mov rdi, rbp; call qword ptr [rax+0x20];
0x00122bd7: or [r8-0x77], r9b; out dx, eax; call qword ptr [rax+0x20];
0x00122be5: mov r14d, eax; mov eax, eax; sub rax, r12; mov [rbx+0x18], rax; mov rax, [rbp+8]; call qword ptr [rax+0x28];
0x00122be6: mov esi, eax; mov eax, eax; sub rax, r12; mov [rbx+0x18], rax; mov rax, [rbp+8]; call qword ptr [rax+0x28];
0x00122be8: mov eax, eax; sub rax, r12; mov [rbx+0x18], rax; mov rax, [rbp+8]; call qword ptr [rax+0x28];
0x00122be9: ror byte ptr [rcx+rbp-0x20], 0x48; mov [rbx+0x18], eax; mov rax, [rbp+8]; call qword ptr [rax+0x28];
0x00122bea: sub rax, r12; mov [rbx+0x18], rax; mov rax, [rbp+8]; call qword ptr [rax+0x28];
0x00122beb: sub eax, esp; mov [rbx+0x18], rax; mov rax, [rbp+8]; call qword ptr [rax+0x28];
0x00122bed: mov [rbx+0x18], rax; mov rax, [rbp+8]; call qword ptr [rax+0x28];
0x00122bee: mov [rbx+0x18], eax; mov rax, [rbp+8]; call qword ptr [rax+0x28];
0x00122bf1: mov rax, [rbp+8]; call qword ptr [rax+0x28];
0x00122bf2: mov eax, [rbp+8]; call qword ptr [rax+0x28];
0x00122c0b: dec dword ptr [rax-0x75]; or [r9+rcx*4-0xa], r8b; mov rdi, rbp; call qword ptr [rax+0x28];
0x00122c0c: mov rax, [rbp+8]; mov esi, r14d; mov rdi, rbp; call qword ptr [rax+0x28];
0x00122c0d: mov eax, [rbp+8]; mov esi, r14d; mov rdi, rbp; call qword ptr [rax+0x28];
0x00122c0e: or [r9+rcx*4-0xa], r8b; mov rdi, rbp; call qword ptr [rax+0x28];
0x00122c0f: or [rcx+rcx*4-0xa], al; mov rdi, rbp; call qword ptr [rax+0x28];
0x00122c10: mov esi, r14d; mov rdi, rbp; call qword ptr [rax+0x28];
0x00122c11: mov esi, esi; mov rdi, rbp; call qword ptr [rax+0x28];
0x00122c12: test byte ptr [rax-0x77], 0xef; call qword ptr [rax+0x28];
0x00122c69: test [rax+rdx*8], ah; add [rax], al; add [rbx+rcx*4+5], cl; ret 0x6f8;
0x00122c6a: and al, 0xd0; add [rax], al; add [rbx+rcx*4+5], cl; ret 0x6f8;
0x00122c6c: add [rax], al; add [rbx+rcx*4+5], cl; ret 0x6f8;
0x00122c6e: add [rbx+rcx*4+5], cl; ret 0x6f8;
0x00122c72: ret 0x6f8;
0x00122d17: mov [rsp+0x30], r15; push qword ptr [rsp+0xe8]; push qword ptr [rsp+0xe8]; mov [rsp+0x18], rdi; lea r9, [rsp+0x40]; call qword ptr [rax];
0x00122d18: mov [rsp+0x30], edi; push qword ptr [rsp+0xe8]; push qword ptr [rsp+0xe8]; mov [rsp+0x18], rdi; lea r9, [rsp+0x40]; call qword ptr [rax];
0x00122d1a: and al, 0x30; push qword ptr [rsp+0xe8]; push qword ptr [rsp+0xe8]; mov [rsp+0x18], rdi; lea r9, [rsp+0x40]; call qword ptr [rax];
0x00122d1c: push qword ptr [rsp+0xe8]; push qword ptr [rsp+0xe8]; mov [rsp+0x18], rdi; lea r9, [rsp+0x40]; call qword ptr [rax];
0x00122d21: add [rax], al; push qword ptr [rsp+0xe8]; mov [rsp+0x18], rdi; lea r9, [rsp+0x40]; call qword ptr [rax];
0x00122d23: push qword ptr [rsp+0xe8]; mov [rsp+0x18], rdi; lea r9, [rsp+0x40]; call qword ptr [rax];
0x00122d28: add [rax], al; mov [rsp+0x18], rdi; lea r9, [rsp+0x40]; call qword ptr [rax];
0x00122d2a: mov [rsp+0x18], rdi; lea r9, [rsp+0x40]; call qword ptr [rax];
0x00122d2b: mov [rsp+0x18], edi; lea r9, [rsp+0x40]; call qword ptr [rax];
0x00122d2d: and al, 0x18; lea r9, [rsp+0x40]; call qword ptr [rax];
0x00122d2e: sbb [rbp+rcx*4+0x4c], cl; and al, 0x40; call qword ptr [rax];
0x00122d2f: lea r9, [rsp+0x40]; call qword ptr [rax];
0x00122d30: lea ecx, [rsp+0x40]; call qword ptr [rax];
0x00122d32: and al, 0x40; call qword ptr [rax];
0x00122d35: adc [rdx+0x59], bl; mov rdi, [rsp+8]; mov r12d, eax; mov rax, [rdi+8]; call qword ptr [rax+0x20];
0x00122d36: pop rdx; pop rcx; mov rdi, [rsp+8]; mov r12d, eax; mov rax, [rdi+8]; call qword ptr [rax+0x20];
0x00122d37: pop rcx; mov rdi, [rsp+8]; mov r12d, eax; mov rax, [rdi+8]; call qword ptr [rax+0x20];
0x00122d38: mov rdi, [rsp+8]; mov r12d, eax; mov rax, [rdi+8]; call qword ptr [rax+0x20];
0x00122d39: mov edi, [rsp+8]; mov r12d, eax; mov rax, [rdi+8]; call qword ptr [rax+0x20];
0x00122d3b: and al, 8; mov r12d, eax; mov rax, [rdi+8]; call qword ptr [rax+0x20];
0x00122d3d: mov r12d, eax; mov rax, [rdi+8]; call qword ptr [rax+0x20];
0x00122d3e: mov esp, eax; mov rax, [rdi+8]; call qword ptr [rax+0x20];
0x00122d81: fwait; test al, 0xfe; jmp qword ptr [rsi+0x66];
0x00122d82: test al, 0xfe; jmp qword ptr [rsi+0x66];
0x00122ee7: add al, ch; xor ebx, [rdx-1]; jmp qword ptr [rsi+0xf];
0x00122ee9: xor ebx, [rdx-1]; jmp qword ptr [rsi+0xf];
0x0012301c: add [rax], al; add [rcx-0x39751711], cl; cld; dec dword ptr [rcx-0x75]; cmp [r9+rcx*4-0x11], r9b; call qword ptr [rax+0x20];
0x0012301e: add [rcx-0x39751711], cl; cld; dec dword ptr [rcx-0x75]; cmp [r9+rcx*4-0x11], r9b; call qword ptr [rax+0x20];
0x00123022: mov al, dh; cld; dec dword ptr [rcx-0x75]; cmp [r9+rcx*4-0x11], r9b; call qword ptr [rax+0x20];
0x00123024: cld; dec dword ptr [rcx-0x75]; cmp [r9+rcx*4-0x11], r9b; call qword ptr [rax+0x20];
0x00123025: dec dword ptr [rcx-0x75]; cmp [r9+rcx*4-0x11], r9b; call qword ptr [rax+0x20];
0x00123026: mov rax, [r13+0x38]; mov rdi, r13; call qword ptr [rax+0x20];
0x00123027: mov eax, [rbp+0x38]; mov rdi, r13; call qword ptr [rax+0x20];
0x00123028: cmp [r9+rcx*4-0x11], r9b; call qword ptr [rax+0x20];
0x00123029: cmp [rcx+rcx*4-0x11], cl; call qword ptr [rax+0x20];
0x0012306f: inc dword ptr [rbp+0x48a574c0]; mov eax, [rsp+0xc8]; mov rdi, rbx; call qword ptr [rax+0x20];
0x00123073: movsd [rdi], [rsi]; mov rax, [rsp+0xc8]; mov rdi, rbx; call qword ptr [rax+0x20];
0x00123074: mov rax, [rsp+0xc8]; mov rdi, rbx; call qword ptr [rax+0x20];
0x00123075: mov eax, [rsp+0xc8]; mov rdi, rbx; call qword ptr [rax+0x20];
0x00123078: enter 0, 0; mov rdi, rbx; call qword ptr [rax+0x20];
0x0012307a: add [rax], al; mov rdi, rbx; call qword ptr [rax+0x20];
0x00123147: add eax, 0xe9fff343; iretd;
0x001232e3: add [rax], al; mov rsi, [rsp+0x10]; mov rdi, rbx; xor eax, eax; mov rcx, [rsp+8]; call rcx;
0x001232e5: mov rsi, [rsp+0x10]; mov rdi, rbx; xor eax, eax; mov rcx, [rsp+8]; call rcx;
0x001232e6: mov esi, [rsp+0x10]; mov rdi, rbx; xor eax, eax; mov rcx, [rsp+8]; call rcx;
0x001232e8: and al, 0x10; mov rdi, rbx; xor eax, eax; mov rcx, [rsp+8]; call rcx;
0x001232e9: adc [rax-0x77], cl; fbstp tbyte ptr [rcx], st; ror byte ptr [rax-0x75], 0x4c; and al, 8; call rcx;
0x001232ea: mov rdi, rbx; xor eax, eax; mov rcx, [rsp+8]; call rcx;
0x001232eb: mov edi, ebx; xor eax, eax; mov rcx, [rsp+8]; call rcx;
0x001232ec: fbstp tbyte ptr [rcx], st; ror byte ptr [rax-0x75], 0x4c; and al, 8; call rcx;
0x001232ed: xor eax, eax; mov rcx, [rsp+8]; call rcx;
0x001232ee: ror byte ptr [rax-0x75], 0x4c; and al, 8; call rcx;
0x001232ef: mov rcx, [rsp+8]; call rcx;
0x001232f0: mov ecx, [rsp+8]; call rcx;
0x001232f2: and al, 8; call rcx;
0x00123306: test [rbx+0x48fffffe], al; mov edi, ebx; call rax;
0x0012338c: adc [rcx+rcx*4-0x12], cl; rol ax, 8; mov rdi, r14; mov [rsp+0x192], ax; mov rax, [rsp+0x30]; call rax;
0x0012338d: mov rsi, r13; rol ax, 8; mov rdi, r14; mov [rsp+0x192], ax; mov rax, [rsp+0x30]; call rax;
0x0012338e: mov esi, ebp; rol ax, 8; mov rdi, r14; mov [rsp+0x192], ax; mov rax, [rsp+0x30]; call rax;
0x0012338f: out dx, al; rol ax, 8; mov rdi, r14; mov [rsp+0x192], ax; mov rax, [rsp+0x30]; call rax;
0x00123390: rol ax, 8; mov rdi, r14; mov [rsp+0x192], ax; mov rax, [rsp+0x30]; call rax;
0x00123391: rol eax, 8; mov rdi, r14; mov [rsp+0x192], ax; mov rax, [rsp+0x30]; call rax;
0x00123392: ror byte ptr [rax], 0x4c; mov edi, esi; mov [rsp+0x192], ax; mov rax, [rsp+0x30]; call rax;
0x00123393: or [rcx+rcx*4-9], cl; mov [rsp+0x192], ax; mov rax, [rsp+0x30]; call rax;
0x00123394: mov rdi, r14; mov [rsp+0x192], ax; mov rax, [rsp+0x30]; call rax;
0x00123395: mov edi, esi; mov [rsp+0x192], ax; mov rax, [rsp+0x30]; call rax;
0x00123396: mul dword ptr [rsi-0x77]; test [rdx+rdx*4], ah; add [rax], eax; add [rax-0x75], cl; and al, 0x30; call rax;
0x00123397: mov [rsp+0x192], ax; mov rax, [rsp+0x30]; call rax;
0x00123398: mov [rsp+0x192], eax; mov rax, [rsp+0x30]; call rax;
0x00123399: test [rdx+rdx*4], ah; add [rax], eax; add [rax-0x75], cl; and al, 0x30; call rax;
0x0012339a: and al, 0x92; add [rax], eax; add [rax-0x75], cl; and al, 0x30; call rax;
0x0012339b: xchg edx, eax; add [rax], eax; add [rax-0x75], cl; and al, 0x30; call rax;
0x0012339c: add [rax], eax; add [rax-0x75], cl; and al, 0x30; call rax;
0x0012339d: add [rax], al; mov rax, [rsp+0x30]; call rax;
0x0012339e: add [rax-0x75], cl; and al, 0x30; call rax;
0x0012339f: mov rax, [rsp+0x30]; call rax;
0x001233a0: mov eax, [rsp+0x30]; call rax;
0x001233a2: and al, 0x30; call rax;
0x001233d1: mov ebx, 0x48000001; mov ecx, [rsp+8]; mov rsi, r14; mov rdi, rbx; xor eax, eax; call rcx;
0x001233d3: add [rax], al; mov rcx, [rsp+8]; mov rsi, r14; mov rdi, rbx; xor eax, eax; call rcx;
0x001233d4: add [rax-0x75], cl; and al, 8; mov rsi, r14; mov rdi, rbx; xor eax, eax; call rcx;
0x001233d5: mov rcx, [rsp+8]; mov rsi, r14; mov rdi, rbx; xor eax, eax; call rcx;
0x001233d6: mov ecx, [rsp+8]; mov rsi, r14; mov rdi, rbx; xor eax, eax; call rcx;
0x001233d8: and al, 8; mov rsi, r14; mov rdi, rbx; xor eax, eax; call rcx;
0x001233d9: or [rcx+rcx*4-0xa], cl; mov rdi, rbx; xor eax, eax; call rcx;
0x001233da: mov rsi, r14; mov rdi, rbx; xor eax, eax; call rcx;
0x001233db: mov esi, esi; mov rdi, rbx; xor eax, eax; call rcx;
0x001233dc: test byte ptr [rax-0x77], 0xdf; xor eax, eax; call rcx;
0x001233dd: mov rdi, rbx; xor eax, eax; call rcx;
0x001233de: mov edi, ebx; xor eax, eax; call rcx;
0x001233e0: xor eax, eax; call rcx;
0x00123507: nop [rax+rax]; add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret;
0x00123508: nop [rax+rax]; add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret;
0x0012350e: add [rax], al; add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret;
0x00123510: add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret;
0x00123511: add esp, 8; mov eax, 1; pop rbx; pop rbp; ret;
0x00123513: or [rax+1], bh; pop rbx; pop rbp; ret;
0x00123514: mov eax, 1; pop rbx; pop rbp; ret;
0x00123515: add [rax], eax; add [rax], al; pop rbx; pop rbp; ret;
0x00123528: add rsp, 8; mov rdi, rbp; pop rbx; xor eax, eax; pop rbp; jmp rdx;
0x00123529: add esp, 8; mov rdi, rbp; pop rbx; xor eax, eax; pop rbp; jmp rdx;
0x0012352b: or [rax-0x77], cl; out dx, eax; pop rbx; xor eax, eax; pop rbp; jmp rdx;
0x0012352c: mov rdi, rbp; pop rbx; xor eax, eax; pop rbp; jmp rdx;
0x0012352d: mov edi, ebp; pop rbx; xor eax, eax; pop rbp; jmp rdx;
0x0012352e: out dx, eax; pop rbx; xor eax, eax; pop rbp; jmp rdx;
0x0012352f: pop rbx; xor eax, eax; pop rbp; jmp rdx;
0x00123530: xor eax, eax; pop rbp; jmp rdx;
0x00123532: pop rbp; jmp rdx;
0x00123602: shl byte ptr [rbx+rcx+0x31], 0xc0; ret;
0x00123686: sbb [rbx+0x247401f8], eax; mov dword ptr [rsi], 0x10; mov [rsi+8], rax; ret;
0x0012368c: mov dword ptr [rsi], 0x10; mov [rsi+8], rax; ret;
0x0012368e: adc [rax], al; add [rax], al; mov [rsi+8], rax; ret;
0x00123690: add [rax], al; mov [rsi+8], rax; ret;
0x00123692: mov [rsi+8], rax; ret;
0x001236a6: pop rcx; mov dword ptr [rsi], 0; ret;
0x001236a7: mov dword ptr [rsi], 0; ret;
0x001236b6: sub [rbx+0x147401f8], eax; mov dword ptr [rsi], 0x10; mov qword ptr [rsi+8], 1; mov [rsi+0x10], rax; ret;
0x001236bc: mov dword ptr [rsi], 0x10; mov qword ptr [rsi+8], 1; mov [rsi+0x10], rax; ret;
0x001236be: adc [rax], al; add [rax], al; mov qword ptr [rsi+8], 1; mov [rsi+0x10], rax; ret;
0x001236c0: add [rax], al; mov qword ptr [rsi+8], 1; mov [rsi+0x10], rax; ret;
0x001236c2: mov qword ptr [rsi+8], 1; mov [rsi+0x10], rax; ret;
0x001236c3: mov dword ptr [rsi+8], 1; mov [rsi+0x10], rax; ret;
0x001236c6: add [rax], eax; add [rax], al; mov [rsi+0x10], rax; ret;
0x001236cc: adc bl, r8b; nop; mov eax, [rdi+0x20]; mov dword ptr [rsi], 7; mov [rsi+8], eax; ret;
0x001236cd: adc bl, al; nop; mov eax, [rdi+0x20]; mov dword ptr [rsi], 7; mov [rsi+8], eax; ret;
0x001236cf: nop; mov eax, [rdi+0x20]; mov dword ptr [rsi], 7; mov [rsi+8], eax; ret;
0x001236d0: mov eax, [rdi+0x20]; mov dword ptr [rsi], 7; mov [rsi+8], eax; ret;
0x001236d3: mov dword ptr [rsi], 7; mov [rsi+8], eax; ret;
0x001236d7: add [rax], al; mov [rsi+8], eax; ret;
0x001236d9: mov [rsi+8], eax; ret;
0x001236e0: mov rax, [rdi+0x20]; mov dword ptr [rsi], 6; mov [rsi+8], rax; mov rax, [rdi+0x28]; mov [rsi+0x10], rax; ret;
0x001236e1: mov eax, [rdi+0x20]; mov dword ptr [rsi], 6; mov [rsi+8], rax; mov rax, [rdi+0x28]; mov [rsi+0x10], rax; ret;
0x001236e4: mov dword ptr [rsi], 6; mov [rsi+8], rax; mov rax, [rdi+0x28]; mov [rsi+0x10], rax; ret;
0x001236e8: add [rax], al; mov [rsi+8], rax; mov rax, [rdi+0x28]; mov [rsi+0x10], rax; ret;
0x001236ea: mov [rsi+8], rax; mov rax, [rdi+0x28]; mov [rsi+0x10], rax; ret;
0x001236eb: mov [rsi+8], eax; mov rax, [rdi+0x28]; mov [rsi+0x10], rax; ret;
0x001236ee: mov rax, [rdi+0x28]; mov [rsi+0x10], rax; ret;
0x001236ef: mov eax, [rdi+0x28]; mov [rsi+0x10], rax; ret;
0x001236ff: add [rbx+0x727705f8], al; lea r8, [rip+0x64e34]; mov ecx, eax; movsxd rdx, [r8+rcx*4]; add rdx, r8; jmp rdx;
0x00123702: add eax, 0x8d4c7277; add eax, 0x64e34; mov ecx, eax; movsxd rdx, [r8+rcx*4]; add rdx, r8; jmp rdx;
0x00123705: lea r8, [rip+0x64e34]; mov ecx, eax; movsxd rdx, [r8+rcx*4]; add rdx, r8; jmp rdx;
0x00123706: lea eax, [rip+0x64e34]; mov ecx, eax; movsxd rdx, [r8+rcx*4]; add rdx, r8; jmp rdx;
0x00123707: add eax, 0x64e34; mov ecx, eax; movsxd rdx, [r8+rcx*4]; add rdx, r8; jmp rdx;
0x0012370b: add [rcx+0x146349c1], cl; mov [rcx+rax-0x3e], cl; jmp rdx;
0x0012370c: mov ecx, eax; movsxd rdx, [r8+rcx*4]; add rdx, r8; jmp rdx;
0x0012370d: ror dword ptr [rcx+0x63], 0x14; mov [rcx+rax-0x3e], cl; jmp rdx;
0x0012370e: movsxd rdx, [r8+rcx*4]; add rdx, r8; jmp rdx;
0x0012370f: movsxd edx, [rax+rcx*4]; add rdx, r8; jmp rdx;
0x00123710: adc al, 0x88; add rdx, r8; jmp rdx;
0x00123711: mov [rcx+rax-0x3e], cl; jmp rdx;
0x00123712: add rdx, r8; jmp rdx;
0x00123713: add edx, eax; jmp rdx;
0x00123714: ret 0xe2ff;
0x00123720: mov rax, [rdi+0x38]; mov dword ptr [rsi], 9; mov [rsi+8], rax; mov rax, [rdi+0x40]; mov [rsi+0x10], rax; ret;
0x00123721: mov eax, [rdi+0x38]; mov dword ptr [rsi], 9; mov [rsi+8], rax; mov rax, [rdi+0x40]; mov [rsi+0x10], rax; ret;
0x00123724: mov dword ptr [rsi], 9; mov [rsi+8], rax; mov rax, [rdi+0x40]; mov [rsi+0x10], rax; ret;
0x00123726: or [rax], eax; add [rax], al; mov [rsi+8], rax; mov rax, [rdi+0x40]; mov [rsi+0x10], rax; ret;
0x00123727: add [rax], al; add [rax-0x77], cl; or [rax-0x75], r9b; mov [rsi+0x10], rax; ret;
0x00123728: add [rax], al; mov [rsi+8], rax; mov rax, [rdi+0x40]; mov [rsi+0x10], rax; ret;
0x00123729: add [rax-0x77], cl; or [rax-0x75], r9b; mov [rsi+0x10], rax; ret;
0x0012372a: mov [rsi+8], rax; mov rax, [rdi+0x40]; mov [rsi+0x10], rax; ret;
0x0012372b: mov [rsi+8], eax; mov rax, [rdi+0x40]; mov [rsi+0x10], rax; ret;
0x0012372c: or [rax-0x75], r9b; mov [rsi+0x10], rax; ret;
0x0012372d: or [rax-0x75], cl; mov [rsi+0x10], rax; ret;
0x0012372e: mov rax, [rdi+0x40]; mov [rsi+0x10], rax; ret;
0x0012372f: mov eax, [rdi+0x40]; mov [rsi+0x10], rax; ret;
0x00123734: adc bl, r8b; nop [rax+rax]; mov dword ptr [rsi], 0xc; ret;
0x00123735: adc bl, al; nop [rax+rax]; mov dword ptr [rsi], 0xc; ret;
0x00123737: nop [rax+rax]; mov dword ptr [rsi], 0xc; ret;
0x00123738: nop [rax+rax]; mov dword ptr [rsi], 0xc; ret;
0x0012373a: test [rax], al; add [rax], al; add [rax], al; mov dword ptr [rsi], 0xc; ret;
0x0012373c: add [rax], al; add [rax], al; mov dword ptr [rsi], 0xc; ret;
0x0012373e: add [rax], al; mov dword ptr [rsi], 0xc; ret;
0x00123740: mov dword ptr [rsi], 0xc; ret;
0x00123742: or al, 0; add [rax], al; ret;
0x00123743: add [rax], al; add bl, al; nop [rax+rax]; mov dword ptr [rsi], 0xb; ret;
0x00123745: add bl, al; nop [rax+rax]; mov dword ptr [rsi], 0xb; ret;
0x00123747: nop [rax+rax]; mov dword ptr [rsi], 0xb; ret;
0x00123748: nop [rax+rax]; mov dword ptr [rsi], 0xb; ret;
0x0012374a: test [rax], al; add [rax], al; add [rax], al; mov dword ptr [rsi], 0xb; ret;
0x0012374c: add [rax], al; add [rax], al; mov dword ptr [rsi], 0xb; ret;
0x0012374e: add [rax], al; mov dword ptr [rsi], 0xb; ret;
0x00123750: mov dword ptr [rsi], 0xb; ret;
0x00123752: or eax, [rax]; add [rax], al; ret;
0x00123753: add [rax], al; add bl, al; nop [rax+rax]; mov dword ptr [rsi], 0xa; ret;
0x00123755: add bl, al; nop [rax+rax]; mov dword ptr [rsi], 0xa; ret;
0x00123757: nop [rax+rax]; mov dword ptr [rsi], 0xa; ret;
0x00123758: nop [rax+rax]; mov dword ptr [rsi], 0xa; ret;
0x0012375a: test [rax], al; add [rax], al; add [rax], al; mov dword ptr [rsi], 0xa; ret;
0x0012375c: add [rax], al; add [rax], al; mov dword ptr [rsi], 0xa; ret;
0x0012375e: add [rax], al; mov dword ptr [rsi], 0xa; ret;
0x00123760: mov dword ptr [rsi], 0xa; ret;
0x00123762: or al, [rax]; add [rax], al; ret;
0x00123763: add [rax], al; add bl, al; nop [rax+rax]; mov dword ptr [rsi], 8; ret;
0x00123765: add bl, al; nop [rax+rax]; mov dword ptr [rsi], 8; ret;
0x00123767: nop [rax+rax]; mov dword ptr [rsi], 8; ret;
0x00123768: nop [rax+rax]; mov dword ptr [rsi], 8; ret;
0x0012376a: test [rax], al; add [rax], al; add [rax], al; mov dword ptr [rsi], 8; ret;
0x0012376c: add [rax], al; add [rax], al; mov dword ptr [rsi], 8; ret;
0x0012376e: add [rax], al; mov dword ptr [rsi], 8; ret;
0x00123770: mov dword ptr [rsi], 8; ret;
0x00123772: or [rax], al; add [rax], al; ret;
0x00123773: add [rax], al; add bl, al; mov dword ptr [rsi], 0x10; mov qword ptr [rsi+8], 0; mov [rsi+0x10], rax; ret;
0x00123775: add bl, al; mov dword ptr [rsi], 0x10; mov qword ptr [rsi+8], 0; mov [rsi+0x10], rax; ret;
0x00123777: mov dword ptr [rsi], 0x10; mov qword ptr [rsi+8], 0; mov [rsi+0x10], rax; ret;
0x00123779: adc [rax], al; add [rax], al; mov qword ptr [rsi+8], 0; mov [rsi+0x10], rax; ret;
0x0012377b: add [rax], al; mov qword ptr [rsi+8], 0; mov [rsi+0x10], rax; ret;
0x0012377d: mov qword ptr [rsi+8], 0; mov [rsi+0x10], rax; ret;
0x0012377e: mov dword ptr [rsi+8], 0; mov [rsi+0x10], rax; ret;
0x00123781: add [rax], al; add [rax], al; mov [rsi+0x10], rax; ret;
0x001237b6: rol byte ptr [rbx], 0x83; ret 0x8303;
0x001237b7: add eax, [rbx-0x1f7cfc3e]; cld; and edx, 0xfffffffc; lea esi, [rax+rdx+0x28]; mov rax, [rdi+8]; call qword ptr [rax+0x30];
0x001237b8: add edx, 3; and eax, 0xfffffffc; and edx, 0xfffffffc; lea esi, [rax+rdx+0x28]; mov rax, [rdi+8]; call qword ptr [rax+0x30];
0x001237b9: ret 0x8303;
0x001237ba: add eax, [rbx-0x1d7c0320]; cld; lea esi, [rax+rdx+0x28]; mov rax, [rdi+8]; call qword ptr [rax+0x30];
0x001237bb: and eax, 0xfffffffc; and edx, 0xfffffffc; lea esi, [rax+rdx+0x28]; mov rax, [rdi+8]; call qword ptr [rax+0x30];
0x001237bd: cld; and edx, 0xfffffffc; lea esi, [rax+rdx+0x28]; mov rax, [rdi+8]; call qword ptr [rax+0x30];
0x001237be: and edx, 0xfffffffc; lea esi, [rax+rdx+0x28]; mov rax, [rdi+8]; call qword ptr [rax+0x30];
0x001237c0: cld; lea esi, [rax+rdx+0x28]; mov rax, [rdi+8]; call qword ptr [rax+0x30];
0x001237c1: lea esi, [rax+rdx+0x28]; mov rax, [rdi+8]; call qword ptr [rax+0x30];
0x001237c3: adc [rax], ch; mov rax, [rdi+8]; call qword ptr [rax+0x30];
0x001237c5: mov rax, [rdi+8]; call qword ptr [rax+0x30];
0x001237c6: mov eax, [rdi+8]; call qword ptr [rax+0x30];
0x001237fb: nop [rax+rax]; xor eax, eax; pop rbx; pop rbp; pop r12; ret;
0x001237fd: add [rax], r8b; xor eax, eax; pop rbx; pop rbp; pop r12; ret;
0x001237fe: add [rax], al; xor eax, eax; pop rbx; pop rbp; pop r12; ret;
0x001237ff: add [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret;
0x00123800: xor eax, eax; pop rbx; pop rbp; pop r12; ret;
0x00123801: rcr byte ptr [rbx+0x5d], 0x41; pop rsp; ret;
0x0012381c: test [rdi], edi; add [rax], eax; add [rax-0x75], cl; or [r14+0x20], r15b; mov rdi, rbp; call qword ptr [rax+0x30];
0x0012381e: add [rax], eax; add [rax-0x75], cl; or [r14+0x20], r15b; mov rdi, rbp; call qword ptr [rax+0x30];
0x0012381f: add [rax], al; mov rax, [rbp+8]; mov esi, 0x20; mov rdi, rbp; call qword ptr [rax+0x30];
0x00123820: add [rax-0x75], cl; or [r14+0x20], r15b; mov rdi, rbp; call qword ptr [rax+0x30];
0x00123821: mov rax, [rbp+8]; mov esi, 0x20; mov rdi, rbp; call qword ptr [rax+0x30];
0x00123822: mov eax, [rbp+8]; mov esi, 0x20; mov rdi, rbp; call qword ptr [rax+0x30];
0x00123823: or [r14+0x20], r15b; mov rdi, rbp; call qword ptr [rax+0x30];
0x00123824: or [rsi+0x20], bh; mov rdi, rbp; call qword ptr [rax+0x30];
0x00123825: mov esi, 0x20; mov rdi, rbp; call qword ptr [rax+0x30];
0x00123826: and [rax], al; add [rax], al; mov rdi, rbp; call qword ptr [rax+0x30];
0x001238d1: cmp [rbx-0x3917bfad], cl; sbb al, dh; dec dword ptr [rax-0x75]; or [r14+8], r15b; mov rdi, rbp; call qword ptr [rax+0x30];
0x001238d7: sbb al, dh; dec dword ptr [rax-0x75]; or [r14+8], r15b; mov rdi, rbp; call qword ptr [rax+0x30];
0x001238d9: dec dword ptr [rax-0x75]; or [r14+8], r15b; mov rdi, rbp; call qword ptr [rax+0x30];
0x00123923: add [rax], al; mov rax, [rbp+8]; lea esi, [r12+3]; mov rdi, rbp; and esi, 0xfffffffc; call qword ptr [rax+0x30];
0x00123925: mov rax, [rbp+8]; lea esi, [r12+3]; mov rdi, rbp; and esi, 0xfffffffc; call qword ptr [rax+0x30];
0x00123926: mov eax, [rbp+8]; lea esi, [r12+3]; mov rdi, rbp; and esi, 0xfffffffc; call qword ptr [rax+0x30];
0x00123929: lea esi, [r12+3]; mov rdi, rbp; and esi, 0xfffffffc; call qword ptr [rax+0x30];
0x0012392a: lea esi, [rsp+3]; mov rdi, rbp; and esi, 0xfffffffc; call qword ptr [rax+0x30];
0x0012392c: and al, 3; mov rdi, rbp; and esi, 0xfffffffc; call qword ptr [rax+0x30];
0x0012392d: add ecx, [rax-0x77]; out dx, eax; and esi, 0xfffffffc; call qword ptr [rax+0x30];
0x0012392e: mov rdi, rbp; and esi, 0xfffffffc; call qword ptr [rax+0x30];
0x0012392f: mov edi, ebp; and esi, 0xfffffffc; call qword ptr [rax+0x30];
0x00123930: out dx, eax; and esi, 0xfffffffc; call qword ptr [rax+0x30];
0x00123931: and esi, 0xfffffffc; call qword ptr [rax+0x30];
0x00123932: out 0xfc, al; call qword ptr [rax+0x30];
0x00123933: cld; call qword ptr [rax+0x30];
0x00123a9e: call qword ptr [rax+0x38738b48];
0x00123aa3: cmp [rax-0x77], cl; iretd;
0x00123aa8: ret 0xf2e8;
0x00123ac9: ret 0xd1e8;
0x00123b60: cmp [rax], al; add [rax], al; add [rax+0x63], cl; sbb [r11+0xa7603f8], r8b; mov eax, 2; ret;
0x00123b62: add [rax], al; add [rax+0x63], cl; sbb [r11+0xa7603f8], r8b; mov eax, 2; ret;
0x00123b64: add [rax+0x63], cl; sbb [r11+0xa7603f8], r8b; mov eax, 2; ret;
0x00123b67: sbb [r11+0xa7603f8], r8b; mov eax, 2; ret;
0x00123b68: sbb [rbx+0xa7603f8], al; mov eax, 2; ret;
0x00123b6a: clc; add esi, [rsi+0xa]; mov eax, 2; ret;
0x00123b6b: add esi, [rsi+0xa]; mov eax, 2; ret;
0x00123b6d: or bh, [rax+2]; ret;
0x00123b70: add [rax], al; add bl, al; nop [rax]; lea rdx, [rip+0x99fe1]; jmp qword ptr [rdx+rax*8];
0x00123b72: add bl, al; nop [rax]; lea rdx, [rip+0x99fe1]; jmp qword ptr [rdx+rax*8];
0x00123b74: nop [rax]; lea rdx, [rip+0x99fe1]; jmp qword ptr [rdx+rax*8];
0x00123b77: add [rax-0x73], cl; adc eax, 0x99fe1; jmp qword ptr [rdx+rax*8];
0x00123b78: lea rdx, [rip+0x99fe1]; jmp qword ptr [rdx+rax*8];
0x00123b79: lea edx, [rip+0x99fe1]; jmp qword ptr [rdx+rax*8];
0x00123b7a: adc eax, 0x99fe1; jmp qword ptr [rdx+rax*8];
0x00123b7c: lahf; or [rax], eax; jmp qword ptr [rdx+rax*8];
0x00123b7d: or [rax], eax; jmp qword ptr [rdx+rax*8];
0x00123b7f: jmp qword ptr [rdx+rax*8];
0x00123b81: ret 0x2e66;
0x00123be1: leave; add [rax], al; mov rax, [rsp+8]; mov esi, r14d; mov rdi, r13; call qword ptr [rax+0x30];
0x00123be2: add [rax], al; mov rax, [rsp+8]; mov esi, r14d; mov rdi, r13; call qword ptr [rax+0x30];
0x00123be3: add [rax-0x75], cl; and al, 8; mov esi, r14d; mov rdi, r13; call qword ptr [rax+0x30];
0x00123be4: mov rax, [rsp+8]; mov esi, r14d; mov rdi, r13; call qword ptr [rax+0x30];
0x00123be5: mov eax, [rsp+8]; mov esi, r14d; mov rdi, r13; call qword ptr [rax+0x30];
0x00123be7: and al, 8; mov esi, r14d; mov rdi, r13; call qword ptr [rax+0x30];
0x00123be8: or [rcx+rcx*4-0xa], al; mov rdi, r13; call qword ptr [rax+0x30];
0x00123be9: mov esi, r14d; mov rdi, r13; call qword ptr [rax+0x30];
0x00123bea: mov esi, esi; mov rdi, r13; call qword ptr [rax+0x30];
0x00123bec: mov rdi, r13; call qword ptr [rax+0x30];
0x00123bf1: xor [rax-0x7b], cl; ror byte ptr [rdi], 0x84; insd [rdi], dx; add [rax], eax; add [rax-0x77], cl; ret 0x8b;
0x00123bf4: ror byte ptr [rdi], 0x84; insd [rdi], dx; add [rax], eax; add [rax-0x77], cl; ret 0x8b;
0x00123bf7: insd [rdi], dx; add [rax], eax; add [rax-0x77], cl; ret 0x8b;
0x00123bf8: add [rax], eax; add [rax-0x77], cl; ret 0x8b;
0x00123bfa: add [rax-0x77], cl; ret 0x8b;
0x00123bfd: ret 0x8b;
0x00123c1e: or [rax-0x75], cl; cmp [rax-0x7b], cl; shl byte ptr [rbp+rax+0x4c], 0x89; out dx, eax; call rax;
0x00123cdf: or [rdi], cl; iretd;
0x00123d3e: cmp [rbp+0x31], al; test byte ptr [rax-0x77], 0x50; xor cl, ch; iretd;
0x00123d41: test byte ptr [rax-0x77], 0x50; xor cl, ch; iretd;
0x00123d44: push rax; xor cl, ch; iretd;
0x00123d45: xor cl, ch; iretd;
0x00123db2: add [rax], al; add bl, al; nop [rax+rax]; mov eax, 2; ret;
0x00123db4: add bl, al; nop [rax+rax]; mov eax, 2; ret;
0x00123db6: nop [rax+rax]; mov eax, 2; ret;
0x00123db7: nop [rax+rax]; mov eax, 2; ret;
0x00123db8: nop [rax+rax]; mov eax, 2; ret;
0x00123dba: test [rax], al; add [rax], al; add [rax], al; mov eax, 2; ret;
0x00123dbb: add [rax], al; add [rax], al; add [rax+2], bh; ret;
0x00123dbc: add [rax], al; add [rax], al; mov eax, 2; ret;
0x00123dbd: add [rax], al; add [rax+2], bh; ret;
0x00123dc2: add [rax], al; add bl, al; nop [rax+rax]; ret;
0x00123dc4: add bl, al; nop [rax+rax]; ret;
0x00123dc6: nop [rax+rax]; ret;
0x00123dc7: nop [rax+rax]; ret;
0x00123e0a: xor eax, eax; mov dword ptr [rdi], 2; add rsp, 8; pop rbx; pop rbp; jmp rcx;
0x00123e0c: mov dword ptr [rdi], 2; add rsp, 8; pop rbx; pop rbp; jmp rcx;
0x00123e0e: add al, [rax]; add [rax], al; add rsp, 8; pop rbx; pop rbp; jmp rcx;
0x00123e10: add [rax], al; add rsp, 8; pop rbx; pop rbp; jmp rcx;
0x00123e12: add rsp, 8; pop rbx; pop rbp; jmp rcx;
0x00123e13: add esp, 8; pop rbx; pop rbp; jmp rcx;
0x00123e15: or [rbx+0x5d], bl; jmp rcx;
0x00123e16: pop rbx; pop rbp; jmp rcx;
0x00123e1a: nop [rax+rax]; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret;
0x00123e1b: nop [rax+rax]; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret;
0x00123e1d: add [rax], r8b; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret;
0x00123e1e: add [rax], al; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret;
0x00123e54: mov rcx, rbx; xor eax, eax; pop rbx; add rdi, 0x23b0; pop rbp; jmp rcx;
0x00123e55: mov ecx, ebx; xor eax, eax; pop rbx; add rdi, 0x23b0; pop rbp; jmp rcx;
0x00123e57: xor eax, eax; pop rbx; add rdi, 0x23b0; pop rbp; jmp rcx;
0x00123e59: pop rbx; add rdi, 0x23b0; pop rbp; jmp rcx;
0x00123e5a: add rdi, 0x23b0; pop rbp; jmp rcx;
0x00123e5b: add edi, 0x23b0; pop rbp; jmp rcx;
0x00123e5d: mov al, 0x23; add [rax], al; pop rbp; jmp rcx;
0x00123e5f: add [rax], al; pop rbp; jmp rcx;
0x00123e61: pop rbp; jmp rcx;
0x00123e64: nop [rax]; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret;
0x00123e98: mov rax, [rbx+0x23b8]; xor esi, esi; lea r12, [rbx+0x23b0]; mov dword ptr [rbx+0x23b0], 0; mov rdi, r12; call qword ptr [rax+0x28];
0x00123e99: mov eax, [rbx+0x23b8]; xor esi, esi; lea r12, [rbx+0x23b0]; mov dword ptr [rbx+0x23b0], 0; mov rdi, r12; call qword ptr [rax+0x28];
0x00123e9a: cmp dword ptr [rax+0x31000023], 0xfffffff6; lea r12, [rbx+0x23b0]; mov dword ptr [rbx+0x23b0], 0; mov rdi, r12; call qword ptr [rax+0x28];
0x00123e9d: add [rax], al; xor esi, esi; lea r12, [rbx+0x23b0]; mov dword ptr [rbx+0x23b0], 0; mov rdi, r12; call qword ptr [rax+0x28];
0x00123e9f: xor esi, esi; lea r12, [rbx+0x23b0]; mov dword ptr [rbx+0x23b0], 0; mov rdi, r12; call qword ptr [rax+0x28];
0x00123ea1: lea r12, [rbx+0x23b0]; mov dword ptr [rbx+0x23b0], 0; mov rdi, r12; call qword ptr [rax+0x28];
0x00123ea2: lea esp, [rbx+0x23b0]; mov dword ptr [rbx+0x23b0], 0; mov rdi, r12; call qword ptr [rax+0x28];
0x00123ea3: mov [0x23b083c7000023b0], eax; add [rax], al; add [rax], al; add [rax], al; mov rdi, r12; call qword ptr [rax+0x28];
0x00123ea4: mov al, 0x23; add [rax], al; mov dword ptr [rbx+0x23b0], 0; mov rdi, r12; call qword ptr [rax+0x28];
0x00123ea5: and eax, [rax]; add bh, al; xor dword ptr [rax+0x23], 0; add [rax], al; mov rdi, r12; call qword ptr [rax+0x28];
0x00123ea6: add [rax], al; mov dword ptr [rbx+0x23b0], 0; mov rdi, r12; call qword ptr [rax+0x28];
0x00123ea7: add bh, al; xor dword ptr [rax+0x23], 0; add [rax], al; mov rdi, r12; call qword ptr [rax+0x28];
0x00123ea8: mov dword ptr [rbx+0x23b0], 0; mov rdi, r12; call qword ptr [rax+0x28];
0x00123ea9: xor dword ptr [rax+0x23], 0; add [rax], al; mov rdi, r12; call qword ptr [rax+0x28];
0x00123eaa: mov al, 0x23; add [rax], al; add [rax], al; add [rax], al; mov rdi, r12; call qword ptr [rax+0x28];
0x00123eab: and eax, [rax]; add [rax], al; add [rax], al; add [rcx+rcx*4-0x19], cl; call qword ptr [rax+0x28];
0x00123eac: add [rax], al; add [rax], al; add [rax], al; mov rdi, r12; call qword ptr [rax+0x28];
0x00123ead: add [rax], al; add [rax], al; add [rcx+rcx*4-0x19], cl; call qword ptr [rax+0x28];
0x00123eae: add [rax], al; add [rax], al; mov rdi, r12; call qword ptr [rax+0x28];
0x00123eaf: add [rax], al; add [rcx+rcx*4-0x19], cl; call qword ptr [rax+0x28];
0x00123ec0: idiv bh; inc dword ptr [rbp+0x481974c0]; mov eax, [rbx+0x23b8]; mov rdi, r12; call qword ptr [rax+0x20];
0x00123ec2: inc dword ptr [rbp+0x481974c0]; mov eax, [rbx+0x23b8]; mov rdi, r12; call qword ptr [rax+0x20];
0x00123ec7: mov rax, [rbx+0x23b8]; mov rdi, r12; call qword ptr [rax+0x20];
0x00123ec8: mov eax, [rbx+0x23b8]; mov rdi, r12; call qword ptr [rax+0x20];
0x00123eca: mov eax, 0x4c000023; mov edi, esp; call qword ptr [rax+0x20];
0x00123ecb: and eax, [rax]; add [rcx+rcx*4-0x19], cl; call qword ptr [rax+0x20];
0x00123ecc: add [rax], al; mov rdi, r12; call qword ptr [rax+0x20];
0x00123ecd: add [rcx+rcx*4-0x19], cl; call qword ptr [rax+0x20];
0x00123ed3: and [rbx-0x48], bl; add [rax], eax; add [rax], al; pop rbp; pop r12; ret;
0x00123ed4: pop rbx; mov eax, 1; pop rbp; pop r12; ret;
0x00123ede: xchg ax, ax; pop rbx; xor eax, eax; pop rbp; pop r12; ret;
0x00123edf: nop; pop rbx; xor eax, eax; pop rbp; pop r12; ret;
0x00123f0b: lea r12, [rax+0x23b0]; xor esi, esi; mov dword ptr [rax+0x23b0], 1; mov rax, [rax+0x23b8]; mov rdi, r12; call qword ptr [rax+0x28];
0x00123f0c: lea esp, [rax+0x23b0]; xor esi, esi; mov dword ptr [rax+0x23b0], 1; mov rax, [rax+0x23b8]; mov rdi, r12; call qword ptr [rax+0x28];
0x00123f10: add [rax], al; xor esi, esi; mov dword ptr [rax+0x23b0], 1; mov rax, [rax+0x23b8]; mov rdi, r12; call qword ptr [rax+0x28];
0x00123f12: xor esi, esi; mov dword ptr [rax+0x23b0], 1; mov rax, [rax+0x23b8]; mov rdi, r12; call qword ptr [rax+0x28];
0x00123f14: mov dword ptr [rax+0x23b0], 1; mov rax, [rax+0x23b8]; mov rdi, r12; call qword ptr [rax+0x28];
0x00123f15: xor byte ptr [rax+0x1000023], 0; add [rax], al; mov rax, [rax+0x23b8]; mov rdi, r12; call qword ptr [rax+0x28];
0x00123f18: add [rax], al; add [rax], eax; add [rax], al; mov rax, [rax+0x23b8]; mov rdi, r12; call qword ptr [rax+0x28];
0x00123f1a: add [rax], eax; add [rax], al; mov rax, [rax+0x23b8]; mov rdi, r12; call qword ptr [rax+0x28];
0x00123f1c: add [rax], al; mov rax, [rax+0x23b8]; mov rdi, r12; call qword ptr [rax+0x28];
0x00123f1e: mov rax, [rax+0x23b8]; mov rdi, r12; call qword ptr [rax+0x28];
0x00123f1f: mov eax, [rax+0x23b8]; mov rdi, r12; call qword ptr [rax+0x28];
0x00123f21: mov eax, 0x4c000023; mov edi, esp; call qword ptr [rax+0x28];
0x00123f22: and eax, [rax]; add [rcx+rcx*4-0x19], cl; call qword ptr [rax+0x28];
0x00123f23: add [rax], al; mov rdi, r12; call qword ptr [rax+0x28];
0x00123f24: add [rcx+rcx*4-0x19], cl; call qword ptr [rax+0x28];
0x00123f25: mov rdi, r12; call qword ptr [rax+0x28];
0x00123f26: mov edi, esp; call qword ptr [rax+0x28];
0x00123f35: inc dword ptr [rbp-0x3f6af040]; add rsp, 8; movzx eax, al; pop rbp; pop r12; ret;
0x00123f38: setne al; add rsp, 8; movzx eax, al; pop rbp; pop r12; ret;
0x00123f3a: ror byte ptr [rax-0x7d], 0xc4; or [rdi], cl; mov dh, 0xc0; pop rbp; pop r12; ret;
0x00123f3b: add rsp, 8; movzx eax, al; pop rbp; pop r12; ret;
0x00123f3c: add esp, 8; movzx eax, al; pop rbp; pop r12; ret;
0x00123f3e: or [rdi], cl; mov dh, 0xc0; pop rbp; pop r12; ret;
0x00123f3f: movzx eax, al; pop rbp; pop r12; ret;
0x00123f40: mov dh, 0xc0; pop rbp; pop r12; ret;
0x00123f46: nop [rax+rax]; add rsp, 8; xor eax, eax; pop rbp; pop r12; ret;
0x00123f47: nop [rax+rax]; add rsp, 8; xor eax, eax; pop rbp; pop r12; ret;
0x00123f48: nop [rax+rax]; add rsp, 8; xor eax, eax; pop rbp; pop r12; ret;
0x00123f4e: add [rax], al; add rsp, 8; xor eax, eax; pop rbp; pop r12; ret;
0x00123fbd: xor al, ch; or eax, 0x4c0000c6; mov eax, esp; pop r12; ret;
0x00123fbf: or eax, 0x4c0000c6; mov eax, esp; pop r12; ret;
0x00123fc0: mov byte ptr [rax], 0; mov rax, r12; pop r12; ret;
0x00124070: mov rax, [r14+8]; mov rsi, [rbx+0x10]; mov rdx, r12; mov rdi, r14; call qword ptr [rax+0x10];
0x00124071: mov eax, [rsi+8]; mov rsi, [rbx+0x10]; mov rdx, r12; mov rdi, r14; call qword ptr [rax+0x10];
0x00124074: mov rsi, [rbx+0x10]; mov rdx, r12; mov rdi, r14; call qword ptr [rax+0x10];
0x00124075: mov esi, [rbx+0x10]; mov rdx, r12; mov rdi, r14; call qword ptr [rax+0x10];
0x00124077: adc [rcx+rcx*4-0x1e], cl; mov rdi, r14; call qword ptr [rax+0x10];
0x00124078: mov rdx, r12; mov rdi, r14; call qword ptr [rax+0x10];
0x00124079: mov edx, esp; mov rdi, r14; call qword ptr [rax+0x10];
0x0012407b: mov rdi, r14; call qword ptr [rax+0x10];
0x0012407c: mov edi, esi; call qword ptr [rax+0x10];
0x0012407d: idiv edi; push rax; adc [rbp+0x28840fc0], al; add [rax], eax; add [rcx+rcx*4-0x19], cl; call qword ptr [rbx];
0x0012407f: push rax; adc [rbp+0x28840fc0], al; add [rax], eax; add [rcx+rcx*4-0x19], cl; call qword ptr [rbx];
0x00124080: adc [rbp+0x28840fc0], al; add [rax], eax; add [rcx+rcx*4-0x19], cl; call qword ptr [rbx];
0x00124082: ror byte ptr [rdi], 0x84; sub [rcx], al; add [rax], al; mov rdi, r12; call qword ptr [rbx];
0x00124084: test [rax], ch; add [rax], eax; add [rcx+rcx*4-0x19], cl; call qword ptr [rbx];
0x00124085: sub [rcx], al; add [rax], al; mov rdi, r12; call qword ptr [rbx];
0x00124086: add [rax], eax; add [rcx+rcx*4-0x19], cl; call qword ptr [rbx];
0x00124087: add [rax], al; mov rdi, r12; call qword ptr [rbx];
0x00124088: add [rcx+rcx*4-0x19], cl; call qword ptr [rbx];
0x00124089: mov rdi, r12; call qword ptr [rbx];
0x0012408a: mov edi, esp; call qword ptr [rbx];
0x00124091: sbb [rax-0x77], cl; ret 0x8548;
0x001240a5: add [rbp+0x497274c0], al; mov eax, [rsi+8]; mov rsi, [rbx+0x10]; mov rdx, r12; mov rdi, r14; call qword ptr [rax+0x20];
0x001240aa: mov rax, [r14+8]; mov rsi, [rbx+0x10]; mov rdx, r12; mov rdi, r14; call qword ptr [rax+0x20];
0x001240ab: mov eax, [rsi+8]; mov rsi, [rbx+0x10]; mov rdx, r12; mov rdi, r14; call qword ptr [rax+0x20];
0x001240ae: mov rsi, [rbx+0x10]; mov rdx, r12; mov rdi, r14; call qword ptr [rax+0x20];
0x001240af: mov esi, [rbx+0x10]; mov rdx, r12; mov rdi, r14; call qword ptr [rax+0x20];
0x001240b1: adc [rcx+rcx*4-0x1e], cl; mov rdi, r14; call qword ptr [rax+0x20];
0x001240b2: mov rdx, r12; mov rdi, r14; call qword ptr [rax+0x20];
0x001240b3: mov edx, esp; mov rdi, r14; call qword ptr [rax+0x20];
0x00124193: and byte ptr [rdx], 0; add [rbx+0x5d], bl; pop r12; pop r13; pop r14; ret;
0x00124194: and al, [rax]; add [rbx+0x5d], bl; pop r12; pop r13; pop r14; ret;
0x001241b8: add bl, ch; ret 0x2bf;
0x001241ba: ret 0x2bf;
0x0012436e: adc [rax-0x77], cl; ret 0x86eb;
0x00124371: ret 0x86eb;
0x00124494: test [rdi+0x48000000], ecx; add esp, 0x20; pop rbx; pop rbp; pop r12; ret;
0x00124497: add [rax], al; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret;
0x001244a2: nop [rax+rax]; mov rax, [rdi+8]; mov r12, rsp; lea rsi, [rsp+8]; call qword ptr [rax];
0x001244a3: nop [rax+rax]; mov rax, [rdi+8]; mov r12, rsp; lea rsi, [rsp+8]; call qword ptr [rax];
0x001244a5: add [rax], r8b; mov rax, [rdi+8]; mov r12, rsp; lea rsi, [rsp+8]; call qword ptr [rax];
0x001244a6: add [rax], al; mov rax, [rdi+8]; mov r12, rsp; lea rsi, [rsp+8]; call qword ptr [rax];
0x001244a7: add [rax-0x75], cl; or [r9-0x77], r9b; in al, 0x48; lea esi, [rsp+8]; call qword ptr [rax];
0x001244a8: mov rax, [rdi+8]; mov r12, rsp; lea rsi, [rsp+8]; call qword ptr [rax];
0x001244a9: mov eax, [rdi+8]; mov r12, rsp; lea rsi, [rsp+8]; call qword ptr [rax];
0x001244aa: or [r9-0x77], r9b; in al, 0x48; lea esi, [rsp+8]; call qword ptr [rax];
0x001244ab: or [rcx-0x77], cl; in al, 0x48; lea esi, [rsp+8]; call qword ptr [rax];
0x001244ac: mov r12, rsp; lea rsi, [rsp+8]; call qword ptr [rax];
0x001244ad: mov esp, esp; lea rsi, [rsp+8]; call qword ptr [rax];
0x001244ae: in al, 0x48; lea esi, [rsp+8]; call qword ptr [rax];
0x001244b3: or bh, bh; adc [rbp+0x481074c0], al; mov eax, [rbp+8]; mov rsi, r12; mov rdi, rbp; call qword ptr [rax];
0x001244b5: adc [rbp+0x481074c0], al; mov eax, [rbp+8]; mov rsi, r12; mov rdi, rbp; call qword ptr [rax];
0x001244b7: shl byte ptr [rax+rdx+0x48], 0x8b; or [r9+rcx*4-0x1a], r9b; mov rdi, rbp; call qword ptr [rax];
0x001244b9: adc [rax-0x75], cl; or [r9+rcx*4-0x1a], r9b; mov rdi, rbp; call qword ptr [rax];
0x001244ba: mov rax, [rbp+8]; mov rsi, r12; mov rdi, rbp; call qword ptr [rax];
0x001244bb: mov eax, [rbp+8]; mov rsi, r12; mov rdi, rbp; call qword ptr [rax];
0x001244bc: or [r9+rcx*4-0x1a], r9b; mov rdi, rbp; call qword ptr [rax];
0x001244bd: or [rcx+rcx*4-0x1a], cl; mov rdi, rbp; call qword ptr [rax];
0x001244be: mov rsi, r12; mov rdi, rbp; call qword ptr [rax];
0x001244bf: mov esi, esp; mov rdi, rbp; call qword ptr [rax];
0x001244c0: out 0x48, al; mov edi, ebp; call qword ptr [rax];
0x001244d4: mov [rsp], rax; movsxd rax, [rsi]; mov rsi, rsp; mov [rsp+8], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x001244d5: mov [rsp], eax; movsxd rax, [rsi]; mov rsi, rsp; mov [rsp+8], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x001244d6: add al, 0x24; movsxd rax, [rsi]; mov rsi, rsp; mov [rsp+8], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x001244d7: and al, 0x48; movsxd eax, [rsi]; mov rsi, rsp; mov [rsp+8], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x001244d8: movsxd rax, [rsi]; mov rsi, rsp; mov [rsp+8], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x001244d9: movsxd eax, [rsi]; mov rsi, rsp; mov [rsp+8], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x001244db: mov rsi, rsp; mov [rsp+8], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x001244dc: mov esi, esp; mov [rsp+8], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x001244dd: out 0x48, al; mov [rsp+8], eax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x001244de: mov [rsp+8], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x001244df: mov [rsp+8], eax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x001244e1: and al, 8; mov rax, [rdi+8]; call qword ptr [rax+8];
0x001244e8: push rax; or [rbp+0x489774c0], al; mov eax, [rbp+8]; lea rsi, [rsp+8]; mov rdi, rbp; call qword ptr [rax+8];
0x001244e9: or [rbp+0x489774c0], al; mov eax, [rbp+8]; lea rsi, [rsp+8]; mov rdi, rbp; call qword ptr [rax+8];
0x001244ed: xchg edi, eax; mov rax, [rbp+8]; lea rsi, [rsp+8]; mov rdi, rbp; call qword ptr [rax+8];
0x001244ee: mov rax, [rbp+8]; lea rsi, [rsp+8]; mov rdi, rbp; call qword ptr [rax+8];
0x001244ef: mov eax, [rbp+8]; lea rsi, [rsp+8]; mov rdi, rbp; call qword ptr [rax+8];
0x001244f2: lea rsi, [rsp+8]; mov rdi, rbp; call qword ptr [rax+8];
0x001244f3: lea esi, [rsp+8]; mov rdi, rbp; call qword ptr [rax+8];
0x001244f5: and al, 8; mov rdi, rbp; call qword ptr [rax+8];
0x0012455a: sub rcx, rsi; mov [rdx+0x58], rdi; mov [rdx+0x68], rcx; ret;
0x0012455b: sub ecx, esi; mov [rdx+0x58], rdi; mov [rdx+0x68], rcx; ret;
0x0012455c: int1; mov [rdx+0x58], rdi; mov [rdx+0x68], rcx; ret;
0x0012455d: mov [rdx+0x58], rdi; mov [rdx+0x68], rcx; ret;
0x0012455e: mov [rdx+0x58], edi; mov [rdx+0x68], rcx; ret;
0x00124560: pop rax; mov [rdx+0x68], rcx; ret;
0x00124561: mov [rdx+0x68], rcx; ret;
0x00124562: mov [rdx+0x68], ecx; ret;
0x00124566: nop [rax+rax]; xor eax, eax; ret;
0x00124567: nop [rax+rax]; xor eax, eax; ret;
0x00124584: sub [rdi-0x17], dh; mov [rdx+0x20], rsi; ret;
0x00124587: mov [rdx+0x20], rsi; ret;
0x00124588: mov [rdx+0x20], esi; ret;
0x001245c1: in al, dx; or [rax-0x75], cl; outsd dx, [rsi]; and [rbx-0x74b7fe02], al; xor [r15], r9b; ret 0x8b48;
0x001245c2: or [rax-0x75], cl; outsd dx, [rsi]; and [rbx-0x74b7fe02], al; xor [r15], r9b; ret 0x8b48;
0x001245c5: outsd dx, [rsi]; and [rbx-0x74b7fe02], al; xor [r15], r9b; ret 0x8b48;
0x001245c6: and [rbx-0x74b7fe02], al; xor [r15], r9b; ret 0x8b48;
0x001245c9: add [rax-0x75], ecx; xor [r15], r9b; ret 0x8b48;
0x001245cc: xor [r15], r9b; ret 0x8b48;
0x001245cd: xor [rdi], cl; ret 0x8b48;
0x001245e1: sub rdx, 4; or eax, edx; mov edx, ebp; bswap eax; mov [rcx], eax; call qword ptr [rbx+0x10];
0x001245e2: sub edx, 4; or eax, edx; mov edx, ebp; bswap eax; mov [rcx], eax; call qword ptr [rbx+0x10];
0x001245e5: or eax, edx; mov edx, ebp; bswap eax; mov [rcx], eax; call qword ptr [rbx+0x10];
0x001245e7: mov edx, ebp; bswap eax; mov [rcx], eax; call qword ptr [rbx+0x10];
0x001245e9: bswap eax; mov [rcx], eax; call qword ptr [rbx+0x10];
0x001245eb: mov [rcx], eax; call qword ptr [rbx+0x10];
0x001245ed: call qword ptr [rbx+0x10];
0x00124604: rol byte ptr [rax+rcx*2], 0x89; and [r8+1], dil; add rsp, 8; pop rbx; pop rbp; ret;
0x00124606: mov [rbx+0x20], rax; mov eax, 1; add rsp, 8; pop rbx; pop rbp; ret;
0x00124607: mov [rbx+0x20], eax; mov eax, 1; add rsp, 8; pop rbx; pop rbp; ret;
0x00124608: and [r8+1], dil; add rsp, 8; pop rbx; pop rbp; ret;
0x00124609: and [rax+1], bh; add rsp, 8; pop rbx; pop rbp; ret;
0x001246a5: mov [rax], edx; mov eax, 1; add rsp, 8; pop rbx; pop rbp; ret;
0x001246a6: adc [rax+1], bh; add rsp, 8; pop rbx; pop rbp; ret;
0x001246a7: mov eax, 1; add rsp, 8; pop rbx; pop rbp; ret;
0x001246a8: add [rax], eax; add [rax], al; add rsp, 8; pop rbx; pop rbp; ret;
0x0012470d: xor al, [rbx+0xd7401fa]; add rsp, 8; mov eax, r8d; pop rbx; pop rbp; ret;
0x00124710: add [rbp+rcx+0x48], esi; add esp, 8; mov eax, r8d; pop rbx; pop rbp; ret;
0x00124712: or eax, 0x8c48348; mov eax, r8d; pop rbx; pop rbp; ret;
0x0012472b: add rsp, 8; sub r8d, edx; pop rbx; pop rbp; mov eax, r8d; ret;
0x0012472c: add esp, 8; sub r8d, edx; pop rbx; pop rbp; mov eax, r8d; ret;
0x0012472e: or [rcx+0x29], al; rcr byte ptr [rbx+0x5d], 1; mov eax, r8d; ret;
0x0012472f: sub r8d, edx; pop rbx; pop rbp; mov eax, r8d; ret;
0x00124730: sub eax, edx; pop rbx; pop rbp; mov eax, r8d; ret;
0x00124731: rcr byte ptr [rbx+0x5d], 1; mov eax, r8d; ret;
0x00124748: add rsp, 8; lea r8d, [rdx+rax]; pop rbx; pop rbp; mov eax, r8d; ret;
0x00124749: add esp, 8; lea r8d, [rdx+rax]; pop rbx; pop rbp; mov eax, r8d; ret;
0x0012474b: or [rbp+rcx*4+4], al; add bl, [rbx+0x5d]; mov eax, r8d; ret;
0x0012474c: lea r8d, [rdx+rax]; pop rbx; pop rbp; mov eax, r8d; ret;
0x0012474d: lea eax, [rdx+rax]; pop rbx; pop rbp; mov eax, r8d; ret;
0x0012474e: add al, 2; pop rbx; pop rbp; mov eax, r8d; ret;
0x0012474f: add bl, [rbx+0x5d]; mov eax, r8d; ret;
0x00124750: pop rbx; pop rbp; mov eax, r8d; ret;
0x00124751: pop rbp; mov eax, r8d; ret;
0x001247ba: add [rax], al; add [rbx+0x5d], bl; pop r12; pop r13; pop r14; ret;
0x00124825: mov rdi, [rbx]; add rbp, rdx; sub r8d, edx; mov edx, r8d; mov rsi, rbp; call qword ptr [rbx+0x40];
0x00124826: mov edi, [rbx]; add rbp, rdx; sub r8d, edx; mov edx, r8d; mov rsi, rbp; call qword ptr [rbx+0x40];
0x00124828: add rbp, rdx; sub r8d, edx; mov edx, r8d; mov rsi, rbp; call qword ptr [rbx+0x40];
0x00124829: add ebp, edx; sub r8d, edx; mov edx, r8d; mov rsi, rbp; call qword ptr [rbx+0x40];
0x0012482b: sub r8d, edx; mov edx, r8d; mov rsi, rbp; call qword ptr [rbx+0x40];
0x0012482c: sub eax, edx; mov edx, r8d; mov rsi, rbp; call qword ptr [rbx+0x40];
0x0012482d: rol byte ptr [rcx+rcx*4-0x3e], 1; mov rsi, rbp; call qword ptr [rbx+0x40];
0x0012482e: mov edx, r8d; mov rsi, rbp; call qword ptr [rbx+0x40];
0x0012482f: mov edx, eax; mov rsi, rbp; call qword ptr [rbx+0x40];
0x00124831: mov rsi, rbp; call qword ptr [rbx+0x40];
0x00124832: mov esi, ebp; call qword ptr [rbx+0x40];
0x00124833: out dx, al; call qword ptr [rbx+0x40];
0x00124834: call qword ptr [rbx+0x40];
0x001249eb: add [rax], al; add [rbp+0x32], dh; add rsp, 0x10; pop rbx; ret;
0x001249ed: add [rbp+0x32], dh; add rsp, 0x10; pop rbx; ret;
0x00124a1d: add [rax], al; add bl, ch; mov esi, 0xfe8bf9e8; jmp qword ptr [rsi+0xf];
0x00124a1f: add bl, ch; mov esi, 0xfe8bf9e8; jmp qword ptr [rsi+0xf];
0x00124a21: mov esi, 0xfe8bf9e8; jmp qword ptr [rsi+0xf];
0x00124a23: stc; mov edi, esi; jmp qword ptr [rsi+0xf];
0x00124a24: mov edi, esi; jmp qword ptr [rsi+0xf];
0x00124a63: or cl, [rax-0x7d]; ret 0xf04;
0x00124a89: add [rax], al; add [rbp+0x2f], dh; add rsp, 0x10; pop rbx; ret;
0x00124a8b: add [rbp+0x2f], dh; add rsp, 0x10; pop rbx; ret;
0x00124ab8: add [rax], al; add bl, ch; shr eax, 0x5e; mov edi, esi; jmp qword ptr [rsi+0x66];
0x00124aba: add bl, ch; shr eax, 0x5e; mov edi, esi; jmp qword ptr [rsi+0x66];
0x00124abc: shr eax, 0x5e; mov edi, esi; jmp qword ptr [rsi+0x66];
0x00124abe: pop rsi; mov edi, esi; jmp qword ptr [rsi+0x66];
0x00124abf: mov edi, esi; jmp qword ptr [rsi+0x66];
0x00124b34: pop r11; mov eax, r8d; pop rbp; pop r12; ret;
0x00124b35: pop rbx; mov eax, r8d; pop rbp; pop r12; ret;
0x00124b36: mov eax, r8d; pop rbp; pop r12; ret;
0x00124b37: mov eax, eax; pop rbp; pop r12; ret;
0x00124bd0: jmp qword ptr [rbx+0xf];
0x00124dc8: fmul st, qword ptr [rcx+rcx*4+0x65]; push 0xffffffffffff6ce9; jmp qword ptr [rsi+0xf];
0x00124dcb: push 0xffffffffffff6ce9; jmp qword ptr [rsi+0xf];
0x00124dcc: push 0xffffffffffff6ce9; jmp qword ptr [rsi+0xf];
0x00124de3: mov rdi, [rbp]; add r14, rdx; sub r8d, edx; mov edx, r8d; mov rsi, r14; call qword ptr [rbp+0x40];
0x00124de4: mov edi, [rbp]; add r14, rdx; sub r8d, edx; mov edx, r8d; mov rsi, r14; call qword ptr [rbp+0x40];
0x00124de7: add r14, rdx; sub r8d, edx; mov edx, r8d; mov rsi, r14; call qword ptr [rbp+0x40];
0x00124de8: add esi, edx; sub r8d, edx; mov edx, r8d; mov rsi, r14; call qword ptr [rbp+0x40];
0x00124dea: sub r8d, edx; mov edx, r8d; mov rsi, r14; call qword ptr [rbp+0x40];
0x00124deb: sub eax, edx; mov edx, r8d; mov rsi, r14; call qword ptr [rbp+0x40];
0x00124dec: rol byte ptr [rcx+rcx*4-0x3e], 1; mov rsi, r14; call qword ptr [rbp+0x40];
0x00124ded: mov edx, r8d; mov rsi, r14; call qword ptr [rbp+0x40];
0x00124dee: mov edx, eax; mov rsi, r14; call qword ptr [rbp+0x40];
0x00124df0: mov rsi, r14; call qword ptr [rbp+0x40];
0x00124df1: mov esi, esi; call qword ptr [rbp+0x40];
0x00124e47: xchg esi, edi; jmp qword ptr [rsi+0xf];
0x00124e8e: ret 0x2948;
0x00124ef2: ret 0xeac1;
0x00124f25: add rsp, 0x18; pop rbx; pop rbp; pop r12; pop r13; ret;
0x00124f26: add esp, 0x18; pop rbx; pop rbp; pop r12; pop r13; ret;
0x00124f28: sbb [rbx+0x5d], bl; pop r12; pop r13; ret;
0x00124f37: mov edx, [rbp+0x48]; mov rdi, [rbp]; add r13, rax; sub edx, eax; mov rsi, r13; call qword ptr [rbp+0x40];
0x00124f38: push rbp; mov rdi, [rbp]; add r13, rax; sub edx, eax; mov rsi, r13; call qword ptr [rbp+0x40];
0x00124f3a: mov rdi, [rbp]; add r13, rax; sub edx, eax; mov rsi, r13; call qword ptr [rbp+0x40];
0x00124f3b: mov edi, [rbp]; add r13, rax; sub edx, eax; mov rsi, r13; call qword ptr [rbp+0x40];
0x00124f3e: add r13, rax; sub edx, eax; mov rsi, r13; call qword ptr [rbp+0x40];
0x00124f3f: add ebp, eax; sub edx, eax; mov rsi, r13; call qword ptr [rbp+0x40];
0x00124f41: sub edx, eax; mov rsi, r13; call qword ptr [rbp+0x40];
0x00124f43: mov rsi, r13; call qword ptr [rbp+0x40];
0x00124f44: mov esi, ebp; call qword ptr [rbp+0x40];
0x00124f45: out dx, al; call qword ptr [rbp+0x40];
0x00124f46: call qword ptr [rbp+0x40];
0x00124f4d: ret 0x9848;
0x00124f71: stosd [rdi]; xchg dh, bh; jmp qword ptr [rsi+0x66];
0x00124f72: xchg dh, bh; jmp qword ptr [rsi+0x66];
0x00124fac: add [rax], al; add [rax+0x689c80f], al; mov eax, 1; mov [rdi+0x30], rdx; mov [rdi+0x20], rcx; ret;
0x00124fae: add [rax+0x689c80f], al; mov eax, 1; mov [rdi+0x30], rdx; mov [rdi+0x20], rcx; ret;
0x00124faf: or byte ptr [rdi], 0xc8; mov [rsi], eax; mov eax, 1; mov [rdi+0x30], rdx; mov [rdi+0x20], rcx; ret;
0x00124fb0: bswap eax; mov [rsi], eax; mov eax, 1; mov [rdi+0x30], rdx; mov [rdi+0x20], rcx; ret;
0x00124fb1: enter 0x689, 0xb8; add [rax], eax; add [rax], al; mov [rdi+0x30], rdx; mov [rdi+0x20], rcx; ret;
0x00124fb2: mov [rsi], eax; mov eax, 1; mov [rdi+0x30], rdx; mov [rdi+0x20], rcx; ret;
0x00124fb4: mov eax, 1; mov [rdi+0x30], rdx; mov [rdi+0x20], rcx; ret;
0x00124fb5: add [rax], eax; add [rax], al; mov [rdi+0x30], rdx; mov [rdi+0x20], rcx; ret;
0x00124fb7: add [rax], al; mov [rdi+0x30], rdx; mov [rdi+0x20], rcx; ret;
0x00124fb9: mov [rdi+0x30], rdx; mov [rdi+0x20], rcx; ret;
0x00124fba: mov [rdi+0x30], edx; mov [rdi+0x20], rcx; ret;
0x00124fbd: mov [rdi+0x20], rcx; ret;
0x00124fbe: mov [rdi+0x20], ecx; ret;
0x0012504b: nop [rax+rax]; mov rax, [rsp+0x10]; mov rdx, r13; mov rsi, r12; mov rdi, rbp; call rax;
0x0012504d: add [rax], r8b; mov rax, [rsp+0x10]; mov rdx, r13; mov rsi, r12; mov rdi, rbp; call rax;
0x0012504e: add [rax], al; mov rax, [rsp+0x10]; mov rdx, r13; mov rsi, r12; mov rdi, rbp; call rax;
0x0012504f: add [rax-0x75], cl; and al, 0x10; mov rdx, r13; mov rsi, r12; mov rdi, rbp; call rax;
0x00125050: mov rax, [rsp+0x10]; mov rdx, r13; mov rsi, r12; mov rdi, rbp; call rax;
0x00125051: mov eax, [rsp+0x10]; mov rdx, r13; mov rsi, r12; mov rdi, rbp; call rax;
0x00125053: and al, 0x10; mov rdx, r13; mov rsi, r12; mov rdi, rbp; call rax;
0x00125054: adc [rcx+rcx*4-0x16], cl; mov rsi, r12; mov rdi, rbp; call rax;
0x00125055: mov rdx, r13; mov rsi, r12; mov rdi, rbp; call rax;
0x00125056: mov edx, ebp; mov rsi, r12; mov rdi, rbp; call rax;
0x00125058: mov rsi, r12; mov rdi, rbp; call rax;
0x00125059: mov esi, esp; mov rdi, rbp; call rax;
0x0012505a: out 0x48, al; mov edi, ebp; call rax;
0x00125097: imul ecx, [rax-0x7d], 0x5d5b28c4; pop r12; pop r13; pop r14; pop r15; ret;
0x00125103: test esi, edi; jmp qword ptr [rsi+0x2e];
0x00125180: mov rax, [rsp+0x20]; mov rcx, r13; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call rax;
0x00125181: mov eax, [rsp+0x20]; mov rcx, r13; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call rax;
0x00125183: and al, 0x20; mov rcx, r13; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call rax;
0x00125184: and [rcx+rcx*4-0x17], cl; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call rax;
0x00125185: mov rcx, r13; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call rax;
0x00125186: mov ecx, ebp; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call rax;
0x00125188: mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call rax;
0x00125189: mov edx, esp; mov rsi, rbp; mov rdi, rbx; call rax;
0x0012518b: mov rsi, rbp; mov rdi, rbx; call rax;
0x0012518c: mov esi, ebp; mov rdi, rbx; call rax;
0x0012518d: out dx, al; mov rdi, rbx; call rax;
0x00125200: insb [rdi], dx; ret 0xffff;
0x0012526d: add [rax+rdx+0x48], esi; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret;
0x001252f7: xor eax, 0x850000a8; ror byte ptr [rdi], 0x95; ror byte ptr [rdi], 0xb6; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret;
0x001252fa: add [rbp-0x3f6af040], al; movzx eax, al; add rsp, 8; pop rbx; pop rbp; ret;
0x00125478: or al, 1; add [rax], al; add dh, dh; ret 0x7507;
0x0012547a: add [rax], al; add dh, dh; ret 0x7507;
0x0012547c: add dh, dh; ret 0x7507;
0x0012547e: ret 0x7507;
0x001254ce: add [rax], al; add [rbp+0x14], dh; add rsp, 0x40; pop rbx; ret;
0x001254d0: add [rbp+0x14], dh; add rsp, 0x40; pop rbx; ret;
0x001254d2: adc al, 0x48; add esp, 0x40; pop rbx; ret;
0x001254d3: add rsp, 0x40; pop rbx; ret;
0x001254d4: add esp, 0x40; pop rbx; ret;
0x00125563: add bh, bh; add [rax+0x31], cl; ret 0xc148;
0x00125565: add [rax+0x31], cl; ret 0xc148;
0x00125756: or [rax-0x77], cl; ret 0x3148;
0x00125759: ret 0x3148;
0x0012577d: enter 0xc148, 0xea; adc [rax+0x31], cl; ret 0xb70f;
0x00125781: adc [rax+0x31], cl; ret 0xb70f;
0x00125784: ret 0xb70f;
0x001257a2: xor rsi, rdx; shl rdx, 4; xor rax, rdx; mov [r8], rsi; mov [r8+8], rax; ret;
0x001257a3: xor esi, edx; shl rdx, 4; xor rax, rdx; mov [r8], rsi; mov [r8+8], rax; ret;
0x001257a5: shl rdx, 4; xor rax, rdx; mov [r8], rsi; mov [r8+8], rax; ret;
0x001257a6: shl edx, 4; xor rax, rdx; mov [r8], rsi; mov [r8+8], rax; ret;
0x001257a8: add al, 0x48; xor eax, edx; mov [r8], rsi; mov [r8+8], rax; ret;
0x001257a9: xor rax, rdx; mov [r8], rsi; mov [r8+8], rax; ret;
0x001257aa: xor eax, edx; mov [r8], rsi; mov [r8+8], rax; ret;
0x001257ac: mov [r8], rsi; mov [r8+8], rax; ret;
0x001257ad: mov [rax], esi; mov [r8+8], rax; ret;
0x001257af: mov [r8+8], rax; ret;
0x001257b0: mov [rax+8], eax; ret;
0x001259fe: ret 0xe281;
0x00125a2e: ret 0xff25;
0x00125b42: mov esp, 0x50099; add [rcx-0x7d], cl; ret 0x8310;
0x00125b43: cdq; add [rip-0x7cb70000], al; ret 0x8310;
0x00125b44: add [rip-0x7cb70000], al; ret 0x8310;
0x00125b45: add eax, 0x83490000; ret 0x8310;
0x00125b47: add [rcx-0x7d], cl; ret 0x8310;
0x00125c74: sbb [rax-0x76be04ad], cl; ror byte ptr [rax-0x77], cl; ret 0xc148;
0x00125c7a: ror byte ptr [rax-0x77], cl; ret 0xc148;
0x00125c81: or [rax-0x76be02ad], cl; ror byte ptr [rax-0x77], 1; ret 0xc148;
0x00125c8e: adc [rax-0x76be01ad], cl; ror dword ptr [rax-0x77], 1; ret 0xc148;
0x00125c90: push rbx; inc byte ptr [rcx-0x77]; ror dword ptr [rax-0x77], 1; ret 0xc148;
0x00125c91: inc byte ptr [rcx-0x77]; ror dword ptr [rax-0x77], 1; ret 0xc148;
0x00125c94: ror dword ptr [rax-0x77], 1; ret 0xc148;
0x00125e91: mov esi, [rdi-2]; jmp qword ptr [rsi+0x2e];
0x00125eb5: mov dword ptr [rcx], 0xf7fe083; mov dh, 4; add cl, [rax+0x3948ff47]; iretd;
0x00125ebb: mov dh, 4; add cl, [rax+0x3948ff47]; iretd;
0x00125ebd: add cl, [rax+0x3948ff47]; iretd;
0x00125ebf: dec dword ptr [r8+0x39]; iretd;
0x00125ec0: dec dword ptr [rax+0x39]; iretd;
0x00125efa: xor bl, [rax+rax+0xfc08500]; xchg ebp, eax; ror byte ptr [rax-0x7d], 0xc4; or [rdi], cl; mov dh, 0xc0; ret;
0x00125f1c: add [rax], al; test eax, eax; setne al; add rsp, 8; movzx eax, al; ret;
0x00125f1d: add [rbp-0x3f6af040], al; add rsp, 8; movzx eax, al; ret;
0x00125f55: inc dword ptr [rbp-0x3f6af040]; movzx eax, al; add rsp, 8; pop rbx; pop rbp; ret;
0x00125f57: ror byte ptr [rdi], 0x95; ror byte ptr [rdi], 0xb6; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret;
0x00125f58: setne al; movzx eax, al; add rsp, 8; pop rbx; pop rbp; ret;
0x00125f59: xchg ebp, eax; ror byte ptr [rdi], 0xb6; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret;
0x00125f5a: ror byte ptr [rdi], 0xb6; ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret;
0x00125f5b: movzx eax, al; add rsp, 8; pop rbx; pop rbp; ret;
0x00125f5c: mov dh, 0xc0; add rsp, 8; pop rbx; pop rbp; ret;
0x00125f5d: ror byte ptr [rax-0x7d], 0xc4; or [rbx+0x5d], bl; ret;
0x00125f95: add [rbp+0x480e75c0], al; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret;
0x00125f97: shl byte ptr [rbp+0xe], 0x48; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret;
0x00125fda: in al, dx; or al, ch; iretd;
0x00125fdb: or al, ch; iretd;
0x00126030: add [rbp+0x480b75c0], al; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret;
0x00126032: shl byte ptr [rbp+0xb], 0x48; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret;
0x0012611f: add [rbp-0x3f6af040], al; add rsp, 8; movzx eax, al; pop rbx; pop rbp; ret;
0x0012612f: nop; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret;
0x00126130: add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret;
0x00126131: add esp, 8; xor eax, eax; pop rbx; pop rbp; ret;
0x00126134: xor eax, eax; pop rbx; pop rbp; ret;
0x00126159: add [rax], al; add [rbp+0x481074d2], al; add esp, 8; pop rbx; pop rbp; ret;
0x0012615b: add [rbp+0x481074d2], al; add esp, 8; pop rbx; pop rbp; ret;
0x0012615d: shl byte ptr [rax+rdx+0x48], cl; add esp, 8; pop rbx; pop rbp; ret;
0x0012617b: inc dword ptr [rbp-0x3f6af040]; add rsp, 8; movzx eax, al; pop rbx; pop rbp; ret;
0x0012617e: setne al; add rsp, 8; movzx eax, al; pop rbx; pop rbp; ret;
0x00126180: ror byte ptr [rax-0x7d], 0xc4; or [rdi], cl; mov dh, 0xc0; pop rbx; pop rbp; ret;
0x00126181: add rsp, 8; movzx eax, al; pop rbx; pop rbp; ret;
0x00126182: add esp, 8; movzx eax, al; pop rbx; pop rbp; ret;
0x00126184: or [rdi], cl; mov dh, 0xc0; pop rbx; pop rbp; ret;
0x00126185: movzx eax, al; pop rbx; pop rbp; ret;
0x00126186: mov dh, 0xc0; pop rbx; pop rbp; ret;
0x0012623c: sub [rcx+rcx*4-0x20], al; pop rbx; pop rbp; pop r12; pop r13; ret;
0x001263fe: imul eax; lodsb [rsi]; iretd;
0x00126400: lodsb [rsi]; iretd;
0x00126440: insb [rdi], dx; xchg edx, eax; cld; jmp qword ptr [rsp+rax*2-0x77];
0x00126441: xchg edx, eax; cld; jmp qword ptr [rsp+rax*2-0x77];
0x00126442: cld; jmp qword ptr [rsp+rax*2-0x77];
0x00126443: jmp qword ptr [rsp+rax*2-0x77];
0x001264f6: jmp qword ptr [rcx+rcx*4+0x2b];
0x001264fe: jmp qword ptr [rdi+rax*8+3];
0x00126524: jmp qword ptr [rcx+rcx*4+0x13];
0x001267a4: and [rax+0x29], cl; ret 0x8b4c;
0x001267b9: sub [rax-0x46], cl; iretd;
0x0012683e: sub [r13+rcx*4+0x42], cl; or [rcx-0x77], al; ret 0x8949;
0x0012683f: sub [rbp+rcx*4+0x42], cl; or [rcx-0x77], al; ret 0x8949;
0x00126843: or [rcx-0x77], al; ret 0x8949;
0x00126978: out dx, eax; dec dword ptr [rcx-0x77]; test [rax+rbx*8], ah; add [rax], al; add [rax-0x77], cl; ret 0xc031;
0x00126979: dec dword ptr [rcx-0x77]; test [rax+rbx*8], ah; add [rax], al; add [rax-0x77], cl; ret 0xc031;
0x0012697c: test [rax+rbx*8], ah; add [rax], al; add [rax-0x77], cl; ret 0xc031;
0x0012697d: and al, 0xd8; add [rax], al; add [rax-0x77], cl; ret 0xc031;
0x0012697f: add [rax], al; add [rax-0x77], cl; ret 0xc031;
0x00126981: add [rax-0x77], cl; ret 0xc031;
0x00126a50: xchg edi, eax; ret 0xa75;
0x00126a51: ret 0xa75;
0x00126a5a: sbb [rdi], cl; xchg edi, eax; ret 0xb841;
0x00126a5c: xchg edi, eax; ret 0xb841;
0x00126a5d: ret 0xb841;
0x00126ba3: ror byte ptr [rdi], 0x84; iretd;
0x00126d40: push rbp; add [rbx+0x634801ea], al; ret 0x1578;
0x00126d41: add [rbx+0x634801ea], al; ret 0x1578;
0x00126d44: add [rax+0x63], ecx; ret 0x1578;
0x00126d47: ret 0x1578;
0x00126df9: ret 0x8944;
0x00126e98: ret 0x5489;
0x00126ede: call qword ptr [rax-0x1f7ba39];
0x00126f87: add [rbp-0x7ccb8a40], al; sub eax, 0x9ce95; add [rcx+rax*2-0x77], esp; sbb [rcx+rcx*4-0x40], ecx; pop rbx; ret;
0x00126f89: shl byte ptr [rbp+0x34], 0x83; sub eax, 0x9ce95; add [rcx+rax*2-0x77], esp; sbb [rcx+rcx*4-0x40], ecx; pop rbx; ret;
0x00126f8b: xor al, 0x83; sub eax, 0x9ce95; add [rcx+rax*2-0x77], esp; sbb [rcx+rcx*4-0x40], ecx; pop rbx; ret;
0x00126f8c: sub dword ptr [rip+0x9ce95], 1; mov fs:[r9], ebx; mov rax, r8; pop rbx; ret;
0x00126f8d: sub eax, 0x9ce95; add [rcx+rax*2-0x77], esp; sbb [rcx+rcx*4-0x40], ecx; pop rbx; ret;
0x00126f90: or [rax], eax; add [rcx+rax*2-0x77], esp; sbb [rcx+rcx*4-0x40], ecx; pop rbx; ret;
0x00126f91: add [rcx], al; mov fs:[r9], ebx; mov rax, r8; pop rbx; ret;
0x00126f92: add [rcx+rax*2-0x77], esp; sbb [rcx+rcx*4-0x40], ecx; pop rbx; ret;
0x00126f93: mov fs:[r9], ebx; mov rax, r8; pop rbx; ret;
0x00126f94: mov [r9], ebx; mov rax, r8; pop rbx; ret;
0x00126f95: mov [rcx], ebx; mov rax, r8; pop rbx; ret;
0x00126f96: sbb [rcx+rcx*4-0x40], ecx; pop rbx; ret;
0x00126f97: mov rax, r8; pop rbx; ret;
0x00126fcc: mov byte ptr [rbp+0x31], 0xd2; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x9ce42]; syscall;
0x00126fcd: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x9ce42]; syscall;
0x00126fce: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x9ce42]; syscall;
0x00126fcf: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x9ce42]; syscall;
0x00126fd0: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x9ce42]; syscall;
0x00126fd1: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x9ce42]; syscall;
0x00126fd2: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x9ce42]; syscall;
0x00126fd3: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x9ce42]; syscall;
0x00126fd4: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x9ce42]; syscall;
0x00126fd5: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x9ce42]; syscall;
0x00126fd6: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x9ce42; syscall;
0x00126fd7: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0x9ce42]; syscall;
0x00126fd8: add [rax], al; mov eax, 0xca; lea rdi, [rip+0x9ce42]; syscall;
0x00126fd9: add [rax+0xca], bh; lea rdi, [rip+0x9ce42]; syscall;
0x00126fda: mov eax, 0xca; lea rdi, [rip+0x9ce42]; syscall;
0x00126fdc: add [rax], al; add [rax-0x73], cl; cmp eax, 0x9ce42; syscall;
0x00126fdd: add [rax], al; lea rdi, [rip+0x9ce42]; syscall;
0x00126fde: add [rax-0x73], cl; cmp eax, 0x9ce42; syscall;
0x00126fdf: lea rdi, [rip+0x9ce42]; syscall;
0x00126fe0: lea edi, [rip+0x9ce42]; syscall;
0x00126fe1: cmp eax, 0x9ce42; syscall;
0x0012706c: int 9; add al, ch; int3; fucomip st, st(7); dec dword ptr [rax-0x77]; ret 0x8548;
0x0012706e: add al, ch; int3; fucomip st, st(7); dec dword ptr [rax-0x77]; ret 0x8548;
0x00127070: int3; fucomip st, st(7); dec dword ptr [rax-0x77]; ret 0x8548;
0x00127071: fucomip st, st(7); dec dword ptr [rax-0x77]; ret 0x8548;
0x0012712e: scasb [rdi]; ror dword ptr [rcx], cl; add [rax-0x77], cl; ret 0x8548;
0x0012712f: ror dword ptr [rcx], cl; add [rax-0x77], cl; ret 0x8548;
0x00127180: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x9ccb6]; syscall;
0x00127181: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x9ccb6]; syscall;
0x00127182: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x9ccb6]; syscall;
0x00127183: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x9ccb6]; syscall;
0x00127184: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x9ccb6]; syscall;
0x00127185: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x9ccb6]; syscall;
0x00127186: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x9ccb6]; syscall;
0x00127187: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x9ccb6]; syscall;
0x00127188: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x9ccb6]; syscall;
0x00127189: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x9ccb6]; syscall;
0x0012718a: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x9ccb6; syscall;
0x0012718b: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0x9ccb6]; syscall;
0x0012718c: add [rax], al; mov eax, 0xca; lea rdi, [rip+0x9ccb6]; syscall;
0x0012718d: add [rax+0xca], bh; lea rdi, [rip+0x9ccb6]; syscall;
0x0012718e: mov eax, 0xca; lea rdi, [rip+0x9ccb6]; syscall;
0x00127190: add [rax], al; add [rax-0x73], cl; cmp eax, 0x9ccb6; syscall;
0x00127191: add [rax], al; lea rdi, [rip+0x9ccb6]; syscall;
0x00127192: add [rax-0x73], cl; cmp eax, 0x9ccb6; syscall;
0x00127193: lea rdi, [rip+0x9ccb6]; syscall;
0x00127194: lea edi, [rip+0x9ccb6]; syscall;
0x00127195: cmp eax, 0x9ccb6; syscall;
0x00127196: mov dh, 0xcc; or [rax], eax; syscall;
0x00127197: int3; or [rax], eax; syscall;
0x0012722e: add al, ch; or al, 0xde; out dx, eax; dec dword ptr [rax-0x77]; ret 0x8548;
0x00127230: or al, 0xde; out dx, eax; dec dword ptr [rax-0x77]; ret 0x8548;
0x00127231: fsubp st(7), st; dec dword ptr [rax-0x77]; ret 0x8548;
0x00127232: out dx, eax; dec dword ptr [rax-0x77]; ret 0x8548;
0x001272ef: ror dword ptr [rcx], 1; add [rax-0x77], cl; ret 0x8548;
0x00127340: inc dword ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x9cb26]; syscall;
0x00127341: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x9cb26]; syscall;
0x00127342: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x9cb26]; syscall;
0x00127343: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x9cb26]; syscall;
0x00127344: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x9cb26]; syscall;
0x00127345: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x9cb26]; syscall;
0x00127346: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x9cb26]; syscall;
0x00127347: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x9cb26]; syscall;
0x00127348: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x9cb26]; syscall;
0x00127349: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x9cb26]; syscall;
0x0012734a: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x9cb26; syscall;
0x0012734b: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0x9cb26]; syscall;
0x0012734c: add [rax], al; mov eax, 0xca; lea rdi, [rip+0x9cb26]; syscall;
0x0012734d: add [rax+0xca], bh; lea rdi, [rip+0x9cb26]; syscall;
0x0012734e: mov eax, 0xca; lea rdi, [rip+0x9cb26]; syscall;
0x00127350: add [rax], al; add [rax-0x73], cl; cmp eax, 0x9cb26; syscall;
0x00127351: add [rax], al; lea rdi, [rip+0x9cb26]; syscall;
0x00127352: add [rax-0x73], cl; cmp eax, 0x9cb26; syscall;
0x00127353: lea rdi, [rip+0x9cb26]; syscall;
0x00127354: lea edi, [rip+0x9cb26]; syscall;
0x00127355: cmp eax, 0x9cb26; syscall;
0x001273da: sub dword ptr [rip+0x9caa7], 1; mov fs:[r8], r9d; add rsp, 0x18; ret;
0x001273df: add [rcx], al; mov fs:[r8], r9d; add rsp, 0x18; ret;
0x001273e1: mov fs:[r8], r9d; add rsp, 0x18; ret;
0x001273e2: mov [r8], r9d; add rsp, 0x18; ret;
0x001273e3: mov [rax], ecx; add rsp, 0x18; ret;
0x00127436: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x9ca42; syscall;
0x0012743c: add [rax], al; add [rax-0x73], cl; cmp eax, 0x9ca42; syscall;
0x0012743e: add [rax-0x73], cl; cmp eax, 0x9ca42; syscall;
0x00127441: cmp eax, 0x9ca42; syscall;
0x001274bc: sub dword ptr [rip+0x9c9c5], 1; mov fs:[r8], r9d; add rsp, 8; ret;
0x001274c1: add [rcx], al; mov fs:[r8], r9d; add rsp, 8; ret;
0x001274c3: mov fs:[r8], r9d; add rsp, 8; ret;
0x001274c4: mov [r8], r9d; add rsp, 8; ret;
0x001274c5: mov [rax], ecx; add rsp, 8; ret;
0x001274ca: or bl, al; nop [rax]; ret;
0x001274e4: fiadd st, word ptr [rbp+0x31]; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x9c98a]; syscall;
0x001274ee: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x9c98a; syscall;
0x001274f4: add [rax], al; add [rax-0x73], cl; cmp eax, 0x9c98a; syscall;
0x001274f6: add [rax-0x73], cl; cmp eax, 0x9c98a; syscall;
0x001274f9: cmp eax, 0x9c98a; syscall;
0x001274fa: mov cl, cl; or [rax], eax; syscall;
0x001274fb: leave; or [rax], eax; syscall;
0x00127585: call qword ptr [rsi+0x48];
0x001275b5: sub dword ptr [rip+0x9c8cc], 1; mov fs:[r9], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret;
0x001275b8: enter 9, 1; mov fs:[r9], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret;
0x001275ba: add [rcx], al; mov fs:[r9], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret;
0x001275bc: mov fs:[r9], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret;
0x001275bd: mov [r9], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret;
0x001275be: mov [rcx], ebx; add rsp, 0x20; mov eax, r8d; pop rbx; ret;
0x001275c0: add rsp, 0x20; mov eax, r8d; pop rbx; ret;
0x001275c1: add esp, 0x20; mov eax, r8d; pop rbx; ret;
0x001275c3: and [rcx+rcx*4-0x40], al; pop rbx; ret;
0x001275c4: mov eax, r8d; pop rbx; ret;
0x001275c5: mov eax, eax; pop rbx; ret;
0x00127625: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x9ca42]; syscall;
0x00127626: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x9ca42]; syscall;
0x00127627: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x9ca42]; syscall;
0x00127628: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x9ca42]; syscall;
0x00127629: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x9ca42]; syscall;
0x0012762a: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x9ca42]; syscall;
0x0012762b: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x9ca42]; syscall;
0x0012762c: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x9ca42]; syscall;
0x0012762d: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x9ca42]; syscall;
0x0012762e: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x9c84a; syscall;
0x0012762f: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0x9ca42]; syscall;
0x00127630: add [rax], al; mov eax, 0xca; lea rdi, [rip+0x9ca42]; syscall;
0x00127631: add [rax+0xca], bh; lea rdi, [rip+0x9ca42]; syscall;
0x00127632: mov eax, 0xca; lea rdi, [rip+0x9ca42]; syscall;
0x00127634: add [rax], al; add [rax-0x73], cl; cmp eax, 0x9c84a; syscall;
0x00127635: add [rax], al; lea rdi, [rip+0x9ca42]; syscall;
0x00127636: add [rax-0x73], cl; cmp eax, 0x9c84a; syscall;
0x00127637: lea rdi, [rip+0x9ca42]; syscall;
0x00127638: lea edi, [rip+0x9ca42]; syscall;
0x00127639: cmp eax, 0x9c84a; syscall;
0x0012763b: enter 9, 0xf; add eax, 0xffff77e9; jmp qword ptr [rsi+0x2e];
0x0012763d: add [rdi], cl; add eax, 0xffff77e9; jmp qword ptr [rsi+0x2e];
0x0012763f: add eax, 0xffff77e9; jmp qword ptr [rsi+0x2e];
0x00127768: mov r8, r15; mov rcx, rbp; mov rdx, r14; mov rsi, r12; mov rdi, r13; call qword ptr [rsp+0x30];
0x00127769: mov eax, edi; mov rcx, rbp; mov rdx, r14; mov rsi, r12; mov rdi, r13; call qword ptr [rsp+0x30];
0x0012776a: clc; mov rcx, rbp; mov rdx, r14; mov rsi, r12; mov rdi, r13; call qword ptr [rsp+0x30];
0x0012776b: mov rcx, rbp; mov rdx, r14; mov rsi, r12; mov rdi, r13; call qword ptr [rsp+0x30];
0x0012776c: mov ecx, ebp; mov rdx, r14; mov rsi, r12; mov rdi, r13; call qword ptr [rsp+0x30];
0x0012776e: mov rdx, r14; mov rsi, r12; mov rdi, r13; call qword ptr [rsp+0x30];
0x0012776f: mov edx, esi; mov rsi, r12; mov rdi, r13; call qword ptr [rsp+0x30];
0x00127771: mov rsi, r12; mov rdi, r13; call qword ptr [rsp+0x30];
0x00127772: mov esi, esp; mov rdi, r13; call qword ptr [rsp+0x30];
0x00127773: out 0x4c, al; mov edi, ebp; call qword ptr [rsp+0x30];
0x00127774: mov rdi, r13; call qword ptr [rsp+0x30];
0x00127ab8: mov r8, r15; mov rcx, rbp; mov rdx, r14; mov rsi, r12; mov edi, r13d; call qword ptr [rsp+0x30];
0x00127ab9: mov eax, edi; mov rcx, rbp; mov rdx, r14; mov rsi, r12; mov edi, r13d; call qword ptr [rsp+0x30];
0x00127aba: clc; mov rcx, rbp; mov rdx, r14; mov rsi, r12; mov edi, r13d; call qword ptr [rsp+0x30];
0x00127abb: mov rcx, rbp; mov rdx, r14; mov rsi, r12; mov edi, r13d; call qword ptr [rsp+0x30];
0x00127abc: mov ecx, ebp; mov rdx, r14; mov rsi, r12; mov edi, r13d; call qword ptr [rsp+0x30];
0x00127abe: mov rdx, r14; mov rsi, r12; mov edi, r13d; call qword ptr [rsp+0x30];
0x00127abf: mov edx, esi; mov rsi, r12; mov edi, r13d; call qword ptr [rsp+0x30];
0x00127ac1: mov rsi, r12; mov edi, r13d; call qword ptr [rsp+0x30];
0x00127ac2: mov esi, esp; mov edi, r13d; call qword ptr [rsp+0x30];
0x00127ac3: out 0x44, al; mov edi, ebp; call qword ptr [rsp+0x30];
0x00127ac4: mov edi, r13d; call qword ptr [rsp+0x30];
0x00127ac5: mov edi, ebp; call qword ptr [rsp+0x30];
0x00127ac6: out dx, eax; call qword ptr [rsp+0x30];
0x00127ac7: call qword ptr [rsp+0x30];
0x00127c56: outsb dx, [rsi]; ret 9;
0x00127c5c: outsd dx, [rsi]; ret 9;
0x00127c99: jmp qword ptr [rax+rcx*2+0x33];
0x00127cf0: mov rax, [rdi+0x10]; movdqu xmm0, [rax+0x90]; movups [rsi], xmm0; mov rax, [rax+0xa0]; mov [rsi+0x10], rax; ret;
0x00127cf1: mov eax, [rdi+0x10]; movdqu xmm0, [rax+0x90]; movups [rsi], xmm0; mov rax, [rax+0xa0]; mov [rsi+0x10], rax; ret;
0x00127cf2: adc r11b, r14b; movq mm0, [rax+0x90]; movups [rsi], xmm0; mov rax, [rax+0xa0]; mov [rsi+0x10], rax; ret;
0x00127cf3: adc bl, dh; movq mm0, [rax+0x90]; movups [rsi], xmm0; mov rax, [rax+0xa0]; mov [rsi+0x10], rax; ret;
0x00127cf4: movdqu xmm0, [rax+0x90]; movups [rsi], xmm0; mov rax, [rax+0xa0]; mov [rsi+0x10], rax; ret;
0x00127cf5: movq mm0, [rax+0x90]; movups [rsi], xmm0; mov rax, [rax+0xa0]; mov [rsi+0x10], rax; ret;
0x00127cf9: add [rax], al; add [rdi], cl; adc [rsi], eax; mov rax, [rax+0xa0]; mov [rsi+0x10], rax; ret;
0x00127cfa: add [rax], al; movups [rsi], xmm0; mov rax, [rax+0xa0]; mov [rsi+0x10], rax; ret;
0x00127cfb: add [rdi], cl; adc [rsi], eax; mov rax, [rax+0xa0]; mov [rsi+0x10], rax; ret;
0x00127cfc: movups [rsi], xmm0; mov rax, [rax+0xa0]; mov [rsi+0x10], rax; ret;
0x00127cfd: adc [rsi], eax; mov rax, [rax+0xa0]; mov [rsi+0x10], rax; ret;
0x00127cff: mov rax, [rax+0xa0]; mov [rsi+0x10], rax; ret;
0x00127d00: mov eax, [rax+0xa0]; mov [rsi+0x10], rax; ret;
0x00127d04: add [rax], al; mov [rsi+0x10], rax; ret;
0x00127d14: mov rcx, rsi; xor eax, eax; mov rsi, rdx; mov dword ptr [rdi+0xc8], 2; add rdi, 0xc8; jmp rcx;
0x00127d15: mov ecx, esi; xor eax, eax; mov rsi, rdx; mov dword ptr [rdi+0xc8], 2; add rdi, 0xc8; jmp rcx;
0x00127d16: int1; xor eax, eax; mov rsi, rdx; mov dword ptr [rdi+0xc8], 2; add rdi, 0xc8; jmp rcx;
0x00127d17: xor eax, eax; mov rsi, rdx; mov dword ptr [rdi+0xc8], 2; add rdi, 0xc8; jmp rcx;
0x00127d18: ror byte ptr [rax-0x77], 0xd6; mov dword ptr [rdi+0xc8], 2; add rdi, 0xc8; jmp rcx;
0x00127d19: mov rsi, rdx; mov dword ptr [rdi+0xc8], 2; add rdi, 0xc8; jmp rcx;
0x00127d1a: mov esi, edx; mov dword ptr [rdi+0xc8], 2; add rdi, 0xc8; jmp rcx;
0x00127d1c: mov dword ptr [rdi+0xc8], 2; add rdi, 0xc8; jmp rcx;
0x00127d1e: enter 0, 0; add al, [rax]; add [rax], al; add rdi, 0xc8; jmp rcx;
0x00127d20: add [rax], al; add al, [rax]; add [rax], al; add rdi, 0xc8; jmp rcx;
0x00127d22: add al, [rax]; add [rax], al; add rdi, 0xc8; jmp rcx;
0x00127d24: add [rax], al; add rdi, 0xc8; jmp rcx;
0x00127d26: add rdi, 0xc8; jmp rcx;
0x00127d27: add edi, 0xc8; jmp rcx;
0x00127d29: enter 0, 0; jmp rcx;
0x00127d2b: add [rax], al; jmp rcx;
0x00127d59: add [rax], al; add [rax-0x75], cl; cmp [rax-0x7b], cl; shl byte ptr [rcx+rcx+0x48], 0x8d; mov ebp, 0xc8; call rax;
0x00127d5b: add [rax-0x75], cl; cmp [rax-0x7b], cl; shl byte ptr [rcx+rcx+0x48], 0x8d; mov ebp, 0xc8; call rax;
0x00127d5f: cmp [rax-0x7b], cl; shl byte ptr [rcx+rcx+0x48], 0x8d; mov ebp, 0xc8; call rax;
0x00127d62: shl byte ptr [rcx+rcx+0x48], 0x8d; mov ebp, 0xc8; call rax;
0x00127d64: or [rax-0x73], ecx; mov ebp, 0xc8; call rax;
0x00127d65: lea rdi, [rbp+0xc8]; call rax;
0x00127d66: lea edi, [rbp+0xc8]; call rax;
0x00127d67: mov ebp, 0xc8; call rax;
0x00127d68: enter 0, 0; call rax;
0x00127da2: adc [r11+0x17770ffe], r8b; lea rdi, [rip+0x617d0]; mov ecx, esi; movsxd rax, [rdi+rcx*4]; add rax, rdi; jmp rax;
0x00127da3: adc [rbx+0x17770ffe], al; lea rdi, [rip+0x617d0]; mov ecx, esi; movsxd rax, [rdi+rcx*4]; add rax, rdi; jmp rax;
0x00127da9: lea rdi, [rip+0x617d0]; mov ecx, esi; movsxd rax, [rdi+rcx*4]; add rax, rdi; jmp rax;
0x00127daa: lea edi, [rip+0x617d0]; mov ecx, esi; movsxd rax, [rdi+rcx*4]; add rax, rdi; jmp rax;
0x00127dab: cmp eax, 0x617d0; mov ecx, esi; movsxd rax, [rdi+rcx*4]; add rax, rdi; jmp rax;
0x00127db0: mov ecx, esi; movsxd rax, [rdi+rcx*4]; add rax, rdi; jmp rax;
0x00127db1: int1; movsxd rax, [rdi+rcx*4]; add rax, rdi; jmp rax;
0x00127db2: movsxd rax, [rdi+rcx*4]; add rax, rdi; jmp rax;
0x00127db3: movsxd eax, [rdi+rcx*4]; add rax, rdi; jmp rax;
0x00127db4: add al, 0x8f; add rax, rdi; jmp rax;
0x00127db6: add rax, rdi; jmp rax;
0x00127db7: add eax, edi; jmp rax;
0x00127db8: clc; jmp rax;
0x00127dc3: nop [rax+rax]; movdqu xmm0, [rdx]; mov eax, esi; movups [r8+8], xmm0; ret;
0x00127dc5: add [rax], r8b; movdqu xmm0, [rdx]; mov eax, esi; movups [r8+8], xmm0; ret;
0x00127dc6: add [rax], al; movdqu xmm0, [rdx]; mov eax, esi; movups [r8+8], xmm0; ret;
0x00127dc7: add bl, dh; movq mm0, [rdx]; mov eax, esi; movups [r8+8], xmm0; ret;
0x00127dc8: movdqu xmm0, [rdx]; mov eax, esi; movups [r8+8], xmm0; ret;
0x00127dc9: movq mm0, [rdx]; mov eax, esi; movups [r8+8], xmm0; ret;
0x00127dcc: mov eax, esi; movups [r8+8], xmm0; ret;
0x00127dce: movups [r8+8], xmm0; ret;
0x00127dcf: movups [rax+8], xmm0; ret;
0x00127dd0: adc [rax+8], eax; ret;
0x00127dd2: or bl, al; nop [rax]; movdqu xmm1, [r8+8]; mov eax, 1; movups [rdx], xmm1; ret;
0x00127dd4: nop [rax]; movdqu xmm1, [r8+8]; mov eax, 1; movups [rdx], xmm1; ret;
0x00127dd6: add bl, sil; movq mm1, [r8+8]; mov eax, 1; movups [rdx], xmm1; ret;
0x00127dd7: add bl, dh; movq mm1, [r8+8]; mov eax, 1; movups [rdx], xmm1; ret;
0x00127dd8: movdqu xmm1, [r8+8]; mov eax, 1; movups [rdx], xmm1; ret;
0x00127dd9: movq mm1, [r8+8]; mov eax, 1; movups [rdx], xmm1; ret;
0x00127dda: movq mm1, [rax+8]; mov eax, 1; movups [rdx], xmm1; ret;
0x00127ddb: outsd dx, [rsi]; or [rax+1], dil; movups [rdx], xmm1; ret;
0x00127ddc: or [rax+1], dil; movups [rdx], xmm1; ret;
0x00127ddd: or [rax+1], bh; movups [rdx], xmm1; ret;
0x00127dde: mov eax, 1; movups [rdx], xmm1; ret;
0x00127ddf: add [rax], eax; add [rax], al; movups [rdx], xmm1; ret;
0x00127de0: add [rax], al; add [rdi], cl; adc [rdx], ecx; ret;
0x00127de1: add [rax], al; movups [rdx], xmm1; ret;
0x00127de2: add [rdi], cl; adc [rdx], ecx; ret;
0x00127de3: movups [rdx], xmm1; ret;
0x00127de4: adc [rdx], ecx; ret;
0x00127e33: mov eax, [r8+0x84]; mov [rdx+0x68], eax; movzx eax, word ptr [r8+0x88]; mov [rdx+0x6c], ax; mov eax, 1; ret;
0x00127e34: mov eax, [rax+0x84]; mov [rdx+0x68], eax; movzx eax, word ptr [r8+0x88]; mov [rdx+0x6c], ax; mov eax, 1; ret;
0x00127e35: add byte ptr [rax+rax+0x42890000], 0x68; movzx eax, word ptr [r8+0x88]; mov [rdx+0x6c], ax; mov eax, 1; ret;
0x00127e38: add [rax], al; mov [rdx+0x68], eax; movzx eax, word ptr [r8+0x88]; mov [rdx+0x6c], ax; mov eax, 1; ret;
0x00127e3a: mov [rdx+0x68], eax; movzx eax, word ptr [r8+0x88]; mov [rdx+0x6c], ax; mov eax, 1; ret;
0x00127e3c: push 0xffffffff80b70f41; mov [rax], al; add [rax], al; mov [rdx+0x6c], ax; mov eax, 1; ret;
0x00127e3d: movzx eax, word ptr [r8+0x88]; mov [rdx+0x6c], ax; mov eax, 1; ret;
0x00127e3e: movzx eax, word ptr [rax+0x88]; mov [rdx+0x6c], ax; mov eax, 1; ret;
0x00127e3f: mov bh, 0x80; mov [rax], al; add [rax], al; mov [rdx+0x6c], ax; mov eax, 1; ret;
0x00127e40: or byte ptr [rax+0x66000000], 0x89; insb [rdi], dx; mov eax, 1; ret;
0x00127e41: mov [rax], al; add [rax], al; mov [rdx+0x6c], ax; mov eax, 1; ret;
0x00127e42: add [rax], al; add [rsi-0x77], ah; insb [rdi], dx; mov eax, 1; ret;
0x00127e43: add [rax], al; mov [rdx+0x6c], ax; mov eax, 1; ret;
0x00127e44: add [rsi-0x77], ah; insb [rdi], dx; mov eax, 1; ret;
0x00127e45: mov [rdx+0x6c], ax; mov eax, 1; ret;
0x00127e46: mov [rdx+0x6c], eax; mov eax, 1; ret;
0x00127e48: insb [rdi], dx; mov eax, 1; ret;
0x00127e4d: add bl, al; nop; mov eax, [r8]; mov [rdx], eax; mov eax, 1; ret;
0x00127e4f: nop; mov eax, [r8]; mov [rdx], eax; mov eax, 1; ret;
0x00127e50: mov eax, [r8]; mov [rdx], eax; mov eax, 1; ret;
0x00127e51: mov eax, [rax]; mov [rdx], eax; mov eax, 1; ret;
0x00127e52: add [rcx+0x1b802], cl; add [rax], al; ret;
0x00127e57: add [rax], al; add bl, al; nop [rax+rax]; mov dword ptr [r8+4], 1; mov eax, 1; ret;
0x00127e59: add bl, al; nop [rax+rax]; mov dword ptr [r8+4], 1; mov eax, 1; ret;
0x00127e5b: nop [rax+rax]; mov dword ptr [r8+4], 1; mov eax, 1; ret;
0x00127e5d: add [rax], r8b; mov dword ptr [r8+4], 1; mov eax, 1; ret;
0x00127e5e: add [rax], al; mov dword ptr [r8+4], 1; mov eax, 1; ret;
0x00127e5f: add [rcx-0x39], al; add al, 1; add [rax], al; add [rax+1], bh; ret;
0x00127e60: mov dword ptr [r8+4], 1; mov eax, 1; ret;
0x00127e61: mov dword ptr [rax+4], 1; mov eax, 1; ret;
0x00127e6a: add [rax], al; add bl, al; xchg ax, ax; mov dword ptr [r8+4], 0; mov eax, 1; ret;
0x00127e6c: add bl, al; xchg ax, ax; mov dword ptr [r8+4], 0; mov eax, 1; ret;
0x00127e6e: xchg ax, ax; mov dword ptr [r8+4], 0; mov eax, 1; ret;
0x00127e6f: nop; mov dword ptr [r8+4], 0; mov eax, 1; ret;
0x00127e70: mov dword ptr [r8+4], 0; mov eax, 1; ret;
0x00127e71: mov dword ptr [rax+4], 0; mov eax, 1; ret;
0x00127e80: mov eax, [r8+0xa8]; bswap eax; mov eax, eax; mov [rdx], rax; mov eax, 1; ret;
0x00127e81: mov eax, [rax+0xa8]; bswap eax; mov eax, eax; mov [rdx], rax; mov eax, 1; ret;
0x00127e82: sub byte ptr [rax+0xf000000], 0xc8; mov eax, eax; mov [rdx], rax; mov eax, 1; ret;
0x00127e97: add [rax-0x75], cl; add al, [rbx-0x37f0fe18]; mov [r8+0xa8], eax; mov eax, 1; ret;
0x00127e98: mov rax, [rdx]; sub eax, 1; bswap eax; mov [r8+0xa8], eax; mov eax, 1; ret;
0x00127e99: mov eax, [rdx]; sub eax, 1; bswap eax; mov [r8+0xa8], eax; mov eax, 1; ret;
0x00127e9a: add al, [rbx-0x37f0fe18]; mov [r8+0xa8], eax; mov eax, 1; ret;
0x00127e9b: sub eax, 1; bswap eax; mov [r8+0xa8], eax; mov eax, 1; ret;
0x00127e9d: add [rdi], ecx; enter 0x8941, 0x80; test al, 0; add [rax], al; mov eax, 1; ret;
0x00127e9e: bswap eax; mov [r8+0xa8], eax; mov eax, 1; ret;
0x00127e9f: enter 0x8941, 0x80; test al, 0; add [rax], al; mov eax, 1; ret;
0x00127ea0: mov [r8+0xa8], eax; mov eax, 1; ret;
0x00127ea1: mov [rax+0xa8], eax; mov eax, 1; ret;
0x00127ea3: test al, 0; add [rax], al; mov eax, 1; ret;
0x00127eaf: add [rcx-0x75], al; cmp byte ptr [rax+0xf000000], 0xc8; mov eax, eax; mov [rdx], rax; mov eax, 1; ret;
0x00127eb0: mov eax, [r8+0xb8]; bswap eax; mov eax, eax; mov [rdx], rax; mov eax, 1; ret;
0x00127eb1: mov eax, [rax+0xb8]; bswap eax; mov eax, eax; mov [rdx], rax; mov eax, 1; ret;
0x00127eb2: cmp byte ptr [rax+0xf000000], 0xc8; mov eax, eax; mov [rdx], rax; mov eax, 1; ret;
0x00127eb3: mov eax, 0xf000000; enter 0xc089, 0x48; mov [rdx], eax; mov eax, 1; ret;
0x00127ec4: nop [rax]; mov rax, [rdx]; bswap eax; mov [r8+0xb8], eax; mov eax, 1; ret;
0x00127ec8: mov rax, [rdx]; bswap eax; mov [r8+0xb8], eax; mov eax, 1; ret;
0x00127ec9: mov eax, [rdx]; bswap eax; mov [r8+0xb8], eax; mov eax, 1; ret;
0x00127eca: add cl, [rdi]; enter 0x8941, 0x80; mov eax, 0xb8000000; add [rax], eax; add [rax], al; ret;
0x00127ecb: bswap eax; mov [r8+0xb8], eax; mov eax, 1; ret;
0x00127ecc: enter 0x8941, 0x80; mov eax, 0xb8000000; add [rax], eax; add [rax], al; ret;
0x00127ecd: mov [r8+0xb8], eax; mov eax, 1; ret;
0x00127ece: mov [rax+0xb8], eax; mov eax, 1; ret;
0x00127ed0: mov eax, 0xb8000000; add [rax], eax; add [rax], al; ret;
0x00127edf: add [rcx-0x75], al; xor byte ptr [rax+rax-0x37f10000], 0x89; ror byte ptr [rax-0x77], 2; mov eax, 1; ret;
0x00127ee0: mov eax, [r8+0xb4]; bswap eax; mov eax, eax; mov [rdx], rax; mov eax, 1; ret;
0x00127ee1: mov eax, [rax+0xb4]; bswap eax; mov eax, eax; mov [rdx], rax; mov eax, 1; ret;
0x00127ee2: xor byte ptr [rax+rax-0x37f10000], 0x89; ror byte ptr [rax-0x77], 2; mov eax, 1; ret;
0x00127ee4: add [rax], al; add [rdi], cl; enter 0xc089, 0x48; mov [rdx], eax; mov eax, 1; ret;
0x00127ee5: add [rax], al; bswap eax; mov eax, eax; mov [rdx], rax; mov eax, 1; ret;
0x00127ee6: add [rdi], cl; enter 0xc089, 0x48; mov [rdx], eax; mov eax, 1; ret;
0x00127ee7: bswap eax; mov eax, eax; mov [rdx], rax; mov eax, 1; ret;
0x00127ee8: enter 0xc089, 0x48; mov [rdx], eax; mov eax, 1; ret;
0x00127ee9: mov eax, eax; mov [rdx], rax; mov eax, 1; ret;
0x00127eea: ror byte ptr [rax-0x77], 2; mov eax, 1; ret;
0x00127eeb: mov [rdx], rax; mov eax, 1; ret;
0x00127ef4: nop [rax]; mov rax, [rdx]; bswap eax; mov [r8+0xb4], eax; mov eax, 1; ret;
0x00127ef8: mov rax, [rdx]; bswap eax; mov [r8+0xb4], eax; mov eax, 1; ret;
0x00127ef9: mov eax, [rdx]; bswap eax; mov [r8+0xb4], eax; mov eax, 1; ret;
0x00127efa: add cl, [rdi]; enter 0x8941, 0x80; mov ah, 0; add [rax], al; mov eax, 1; ret;
0x00127efb: bswap eax; mov [r8+0xb4], eax; mov eax, 1; ret;
0x00127efc: enter 0x8941, 0x80; mov ah, 0; add [rax], al; mov eax, 1; ret;
0x00127efd: mov [r8+0xb4], eax; mov eax, 1; ret;
0x00127efe: mov [rax+0xb4], eax; mov eax, 1; ret;
0x00127eff: xor byte ptr [rax+rax+0x1b80000], 0; add [rax], al; ret;
0x00127f00: mov ah, 0; add [rax], al; mov eax, 1; ret;
0x00127fd0: lea ebp, [rax-1]; mov rax, [rbx+0xd0]; mov [rbx+0xa8], ebp; bswap ebp; mov ebp, ebp; call qword ptr [rax+0x18];
0x00127fd3: mov rax, [rbx+0xd0]; mov [rbx+0xa8], ebp; bswap ebp; mov ebp, ebp; call qword ptr [rax+0x18];
0x00127fd4: mov eax, [rbx+0xd0]; mov [rbx+0xa8], ebp; bswap ebp; mov ebp, ebp; call qword ptr [rax+0x18];
0x00127fd5: adc eax, 0; add [rax], al; mov [rbx+0xa8], ebp; bswap ebp; mov ebp, ebp; call qword ptr [rax+0x18];
0x00127fd6: rol byte ptr [rax], 1; add [rax], al; mov [rbx+0xa8], ebp; bswap ebp; mov ebp, ebp; call qword ptr [rax+0x18];
0x00127fd7: add [rax], al; add [rcx+0xa8ab], cl; add [rdi], cl; int 0x89; in eax, dx; call qword ptr [rax+0x18];
0x00127fd8: add [rax], al; mov [rbx+0xa8], ebp; bswap ebp; mov ebp, ebp; call qword ptr [rax+0x18];
0x00127fd9: add [rcx+0xa8ab], cl; add [rdi], cl; int 0x89; in eax, dx; call qword ptr [rax+0x18];
0x00127fda: mov [rbx+0xa8], ebp; bswap ebp; mov ebp, ebp; call qword ptr [rax+0x18];
0x00127fdb: stosd [rdi]; test al, 0; add [rax], al; bswap ebp; mov ebp, ebp; call qword ptr [rax+0x18];
0x00127fdc: test al, 0; add [rax], al; bswap ebp; mov ebp, ebp; call qword ptr [rax+0x18];
0x00127fdd: add [rax], al; add [rdi], cl; int 0x89; in eax, dx; call qword ptr [rax+0x18];
0x00127fde: add [rax], al; bswap ebp; mov ebp, ebp; call qword ptr [rax+0x18];
0x00127fdf: add [rdi], cl; int 0x89; in eax, dx; call qword ptr [rax+0x18];
0x00127fe0: bswap ebp; mov ebp, ebp; call qword ptr [rax+0x18];
0x00127fe1: int 0x89; in eax, dx; call qword ptr [rax+0x18];
0x00127fe2: mov ebp, ebp; call qword ptr [rax+0x18];
0x00127fe3: in eax, dx; call qword ptr [rax+0x18];
0x00127fea: test [rcx+0x48000001], dh; mov eax, [rbx+0xd0]; mov rsi, [rsp+0x18]; mov rdi, r12; call qword ptr [rax+8];
0x00127feb: mov cl, 1; add [rax], al; mov rax, [rbx+0xd0]; mov rsi, [rsp+0x18]; mov rdi, r12; call qword ptr [rax+8];
0x00127fed: add [rax], al; mov rax, [rbx+0xd0]; mov rsi, [rsp+0x18]; mov rdi, r12; call qword ptr [rax+8];
0x00127fee: add [rax-0x75], cl; adc eax, 0; add [rax], al; mov rsi, [rsp+0x18]; mov rdi, r12; call qword ptr [rax+8];
0x00127fef: mov rax, [rbx+0xd0]; mov rsi, [rsp+0x18]; mov rdi, r12; call qword ptr [rax+8];
0x00127ff0: mov eax, [rbx+0xd0]; mov rsi, [rsp+0x18]; mov rdi, r12; call qword ptr [rax+8];
0x00127ff1: adc eax, 0; add [rax], al; mov rsi, [rsp+0x18]; mov rdi, r12; call qword ptr [rax+8];
0x00127ff2: rol byte ptr [rax], 1; add [rax], al; mov rsi, [rsp+0x18]; mov rdi, r12; call qword ptr [rax+8];
0x00127ff4: add [rax], al; mov rsi, [rsp+0x18]; mov rdi, r12; call qword ptr [rax+8];
0x00128004: test [rdi+0x48000001], dl; mov eax, [rsp+0x10]; mov rsi, r12; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+8];
0x0012812a: and al, 0x3c; add [rbx+0x48], esi; mov eax, [rsp+0x10]; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x18];
0x0012812c: add [rbx+0x48], esi; mov eax, [rsp+0x10]; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x18];
0x0012812e: mov [0x388b481024448b48], eax; mov rax, [rdi+0x38]; call qword ptr [rax+0x18];
0x0012817e: call qword ptr [rax+0x87b8348];
0x00128375: rcr byte ptr [rbx+0x41], 0x5c; pop r13; pop r14; pop r15; pop rbp; ret;
0x0012838f: shr al, 1; mov edx, [rdx-2]; jmp qword ptr [rsi+0x66];
0x00128391: mov edx, [rdx-2]; jmp qword ptr [rsi+0x66];
0x00128459: or [rax-0x46], cl; iretd;
0x00128760: ror byte ptr [rdi], 0x84; sub [rcx], eax; add [rax], al; mov rax, [r13+0xd0]; mov rdi, rbp; call qword ptr [rax+0x20];
0x00128763: sub [rcx], eax; add [rax], al; mov rax, [r13+0xd0]; mov rdi, rbp; call qword ptr [rax+0x20];
0x00128765: add [rax], al; mov rax, [r13+0xd0]; mov rdi, rbp; call qword ptr [rax+0x20];
0x00128766: add [rcx-0x75], cl; test eax, edx; add [rax], al; add [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x20];
0x00128767: mov rax, [r13+0xd0]; mov rdi, rbp; call qword ptr [rax+0x20];
0x00128768: mov eax, [rbp+0xd0]; mov rdi, rbp; call qword ptr [rax+0x20];
0x00128769: test eax, edx; add [rax], al; add [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x20];
0x0012876a: rol byte ptr [rax], 1; add [rax], al; mov rdi, rbp; call qword ptr [rax+0x20];
0x0012876b: add [rax], al; add [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x20];
0x0012876c: add [rax], al; mov rdi, rbp; call qword ptr [rax+0x20];
0x0012876d: add [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x20];
0x0012877f: add [rax], al; add [rax-0x75], cl; cmp [rax-0x7b], cl; shl byte ptr [rbp+rax+0x48], 0x89; out dx, eax; call rax;
0x00128781: add [rax-0x75], cl; cmp [rax-0x7b], cl; shl byte ptr [rbp+rax+0x48], 0x89; out dx, eax; call rax;
0x001287ab: int1; ret;
0x00128952: add [rbx+0x55e8007d], cl; insd [rdi], dx; cld; jmp qword ptr [rsi-0x7d];
0x00128955: add al, ch; push rbp; insd [rdi], dx; cld; jmp qword ptr [rsi-0x7d];
0x00128957: push rbp; insd [rdi], dx; cld; jmp qword ptr [rsi-0x7d];
0x00128958: insd [rdi], dx; cld; jmp qword ptr [rsi-0x7d];
0x0012898a: mov cl, cl; out dx, eax; jmp qword ptr [rsi-0x70];
0x0012898b: leave; out dx, eax; jmp qword ptr [rsi-0x70];
0x00128b1b: add [rax], al; add [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; pop r13; ret;
0x00128b1d: add [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; pop r13; ret;
0x00128b9a: ret 0xffff;
0x00128c07: mov dword ptr [rbx+0x48], 1; mov dword ptr [rbx+0x58], 0x28; pop rbx; pop rbp; pop r12; ret;
0x00128c0c: add [rax], al; mov dword ptr [rbx+0x58], 0x28; pop rbx; pop rbp; pop r12; ret;
0x00128c0e: mov dword ptr [rbx+0x58], 0x28; pop rbx; pop rbp; pop r12; ret;
0x00128c11: sub [rax], al; add [rax], al; pop rbx; pop rbp; pop r12; ret;
0x00128dd6: ror byte ptr [rdi], 0x84; ret;
0x00128f73: ret 0xffef;
0x00128faf: test [rax+rax+0x8bf0000], esi; add [rax], al; add al, ch; ret;
0x0012918c: add [rax-0x77], cl; in eax, 0x89; ret;
0x0012918f: in eax, 0x89; ret;
0x001291c8: add al, ch; ret 0xf168;
0x001291ca: ret 0xf168;
0x001291cc: int1; jmp qword ptr [rbx+rcx*4+4];
0x001291f0: add [rax], al; add [rbp+0x65], dh; add rsp, 0x28; pop rbx; pop rbp; ret;
0x001291f2: add [rbp+0x65], dh; add rsp, 0x28; pop rbx; pop rbp; ret;
0x001291f4: add rsp, 0x28; pop rbx; pop rbp; ret;
0x001291f5: add rsp, 0x28; pop rbx; pop rbp; ret;
0x001291f6: add esp, 0x28; pop rbx; pop rbp; ret;
0x001291f8: sub [rbx+0x5d], bl; ret;
0x0012923d: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x9acf6]; syscall;
0x0012923e: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x9acf6]; syscall;
0x0012923f: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x9acf6]; syscall;
0x00129240: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x9acf6]; syscall;
0x00129241: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x9acf6]; syscall;
0x00129242: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x9acf6]; syscall;
0x00129243: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x9acf6]; syscall;
0x00129244: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x9acf6]; syscall;
0x00129245: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x9acf6]; syscall;
0x00129246: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x9acf6; syscall;
0x00129247: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0x9acf6]; syscall;
0x00129248: add [rax], al; mov eax, 0xca; lea rdi, [rip+0x9acf6]; syscall;
0x00129249: add [rax+0xca], bh; lea rdi, [rip+0x9acf6]; syscall;
0x0012924a: mov eax, 0xca; lea rdi, [rip+0x9acf6]; syscall;
0x0012924c: add [rax], al; add [rax-0x73], cl; cmp eax, 0x9acf6; syscall;
0x0012924d: add [rax], al; lea rdi, [rip+0x9acf6]; syscall;
0x0012924e: add [rax-0x73], cl; cmp eax, 0x9acf6; syscall;
0x0012924f: lea rdi, [rip+0x9acf6]; syscall;
0x00129250: lea edi, [rip+0x9acf6]; syscall;
0x00129251: cmp eax, 0x9acf6; syscall;
0x00129252: imul byte ptr [rcx+rcx-0x14faf100]; xchg eax, ebp; rol dword ptr [rbx-2], 0xff; nop; ret;
0x00129253: lodsb [rsi]; or [rax], eax; syscall;
0x00129259: xchg eax, ebp; rol dword ptr [rbx-2], 0xff; nop; ret;
0x0012925b: rol dword ptr [rbx-2], 0xff; nop; ret;
0x0012925e: call qword ptr [rax+0x2e6666c3];
0x001292d8: add [rax], al; add [rbp+0x7e], dh; add rsp, 0x20; pop rbx; ret;
0x001292da: add [rbp+0x7e], dh; add rsp, 0x20; pop rbx; ret;
0x00129451: mov dword ptr [r12+0x70], 0; mov [r12+0x60], eax; mov rax, [rbp+8]; mov esi, 8; mov rdi, rbp; call qword ptr [rax+0x30];
0x00129452: mov dword ptr [rsp+0x70], 0; mov [r12+0x60], eax; mov rax, [rbp+8]; mov esi, 8; mov rdi, rbp; call qword ptr [rax+0x30];
0x00129458: add [rax], al; mov [r12+0x60], eax; mov rax, [rbp+8]; mov esi, 8; mov rdi, rbp; call qword ptr [rax+0x30];
0x00129459: add [rcx-0x77], al; and al, 0x60; mov rax, [rbp+8]; mov esi, 8; mov rdi, rbp; call qword ptr [rax+0x30];
0x0012945a: mov [r12+0x60], eax; mov rax, [rbp+8]; mov esi, 8; mov rdi, rbp; call qword ptr [rax+0x30];
0x0012945b: mov [rsp+0x60], eax; mov rax, [rbp+8]; mov esi, 8; mov rdi, rbp; call qword ptr [rax+0x30];
0x0012945d: and al, 0x60; mov rax, [rbp+8]; mov esi, 8; mov rdi, rbp; call qword ptr [rax+0x30];
0x0012945f: mov rax, [rbp+8]; mov esi, 8; mov rdi, rbp; call qword ptr [rax+0x30];
0x00129460: mov eax, [rbp+8]; mov esi, 8; mov rdi, rbp; call qword ptr [rax+0x30];
0x00129461: or [r14+8], r15b; mov rdi, rbp; call qword ptr [rax+0x30];
0x00129462: or [rsi+8], bh; mov rdi, rbp; call qword ptr [rax+0x30];
0x0012948e: inc dword ptr [rbp+0x487d74c0]; mov eax, [rbp+8]; mov dword ptr [rsp+0xc], 0xc; mov esi, 8; mov rdi, rbp; call qword ptr [rax+0x30];
0x00129493: mov rax, [rbp+8]; mov dword ptr [rsp+0xc], 0xc; mov esi, 8; mov rdi, rbp; call qword ptr [rax+0x30];
0x00129494: mov eax, [rbp+8]; mov dword ptr [rsp+0xc], 0xc; mov esi, 8; mov rdi, rbp; call qword ptr [rax+0x30];
0x00129497: mov dword ptr [rsp+0xc], 0xc; mov esi, 8; mov rdi, rbp; call qword ptr [rax+0x30];
0x00129499: and al, 0xc; or al, 0; add [rax], al; mov esi, 8; mov rdi, rbp; call qword ptr [rax+0x30];
0x0012949a: or al, 0xc; add [rax], al; add [rsi+8], bh; mov rdi, rbp; call qword ptr [rax+0x30];
0x0012949b: or al, 0; add [rax], al; mov esi, 8; mov rdi, rbp; call qword ptr [rax+0x30];
0x0012949c: add [rax], al; add [rsi+8], bh; mov rdi, rbp; call qword ptr [rax+0x30];
0x0012949d: add [rax], al; mov esi, 8; mov rdi, rbp; call qword ptr [rax+0x30];
0x0012949e: add [rsi+8], bh; mov rdi, rbp; call qword ptr [rax+0x30];
0x0012949f: mov esi, 8; mov rdi, rbp; call qword ptr [rax+0x30];
0x001294a0: or [rax], al; add [rax], al; mov rdi, rbp; call qword ptr [rax+0x30];
0x001294a1: add [rax], al; add [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x30];
0x001294a2: add [rax], al; mov rdi, rbp; call qword ptr [rax+0x30];
0x001294a3: add [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x30];
0x001294a4: mov rdi, rbp; call qword ptr [rax+0x30];
0x001294a5: mov edi, ebp; call qword ptr [rax+0x30];
0x001294a6: out dx, eax; call qword ptr [rax+0x30];
0x001294a7: call qword ptr [rax+0x30];
0x001294d6: shr bl, 0x39; nop [rax]; mov rax, [rbp+8]; mov rsi, rbx; mov rdi, rbp; call qword ptr [rax+0x48];
0x001294d9: nop [rax]; mov rax, [rbp+8]; mov rsi, rbx; mov rdi, rbp; call qword ptr [rax+0x48];
0x001294db: add byte ptr [rax], 0; add [rax], al; mov rax, [rbp+8]; mov rsi, rbx; mov rdi, rbp; call qword ptr [rax+0x48];
0x001294dc: add [rax], al; add [rax], al; mov rax, [rbp+8]; mov rsi, rbx; mov rdi, rbp; call qword ptr [rax+0x48];
0x001294dd: add [rax], al; add [rax-0x75], cl; or [r8-0x77], r9b; fimul st, word ptr [rax-0x77]; out dx, eax; call qword ptr [rax+0x48];
0x001294de: add [rax], al; mov rax, [rbp+8]; mov rsi, rbx; mov rdi, rbp; call qword ptr [rax+0x48];
0x001294df: add [rax-0x75], cl; or [r8-0x77], r9b; fimul st, word ptr [rax-0x77]; out dx, eax; call qword ptr [rax+0x48];
0x001294e0: mov rax, [rbp+8]; mov rsi, rbx; mov rdi, rbp; call qword ptr [rax+0x48];
0x001294e1: mov eax, [rbp+8]; mov rsi, rbx; mov rdi, rbp; call qword ptr [rax+0x48];
0x001294e2: or [r8-0x77], r9b; fimul st, word ptr [rax-0x77]; out dx, eax; call qword ptr [rax+0x48];
0x001294e3: or [rax-0x77], cl; fimul st, word ptr [rax-0x77]; out dx, eax; call qword ptr [rax+0x48];
0x001294e4: mov rsi, rbx; mov rdi, rbp; call qword ptr [rax+0x48];
0x001294e5: mov esi, ebx; mov rdi, rbp; call qword ptr [rax+0x48];
0x001294e6: fimul st, word ptr [rax-0x77]; out dx, eax; call qword ptr [rax+0x48];
0x00129524: add [rax], al; add rsp, 0x50; pop rbx; pop rbp; pop r12; ret;
0x00129526: add rsp, 0x50; pop rbx; pop rbp; pop r12; ret;
0x00129527: add esp, 0x50; pop rbx; pop rbp; pop r12; ret;
0x00129529: push rax; pop rbx; pop rbp; pop r12; ret;
0x00129586: nop [rax+rax]; mov rax, [rbp+8]; lea rsi, [rbx+0x18]; mov rdi, rbp; call qword ptr [rax+0x48];
0x00129587: nop [rax+rax]; mov rax, [rbp+8]; lea rsi, [rbx+0x18]; mov rdi, rbp; call qword ptr [rax+0x48];
0x00129588: nop [rax+rax]; mov rax, [rbp+8]; lea rsi, [rbx+0x18]; mov rdi, rbp; call qword ptr [rax+0x48];
0x0012958c: add [rax], al; add [rax], al; mov rax, [rbp+8]; lea rsi, [rbx+0x18]; mov rdi, rbp; call qword ptr [rax+0x48];
0x0012958e: add [rax], al; mov rax, [rbp+8]; lea rsi, [rbx+0x18]; mov rdi, rbp; call qword ptr [rax+0x48];
0x00129590: mov rax, [rbp+8]; lea rsi, [rbx+0x18]; mov rdi, rbp; call qword ptr [rax+0x48];
0x00129591: mov eax, [rbp+8]; lea rsi, [rbx+0x18]; mov rdi, rbp; call qword ptr [rax+0x48];
0x00129594: lea rsi, [rbx+0x18]; mov rdi, rbp; call qword ptr [rax+0x48];
0x00129595: lea esi, [rbx+0x18]; mov rdi, rbp; call qword ptr [rax+0x48];
0x00129597: sbb [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x48];
0x001295a6: mov rax, [rbp+8]; lea rsi, [rsp+0xc]; mov rdi, rbp; call qword ptr [rax+0x48];
0x001295a7: mov eax, [rbp+8]; lea rsi, [rsp+0xc]; mov rdi, rbp; call qword ptr [rax+0x48];
0x001295aa: lea rsi, [rsp+0xc]; mov rdi, rbp; call qword ptr [rax+0x48];
0x001295ab: lea esi, [rsp+0xc]; mov rdi, rbp; call qword ptr [rax+0x48];
0x001295ad: and al, 0xc; mov rdi, rbp; call qword ptr [rax+0x48];
0x001295ae: or al, 0x48; mov edi, ebp; call qword ptr [rax+0x48];
0x0012965f: test [rcx+0x48000000], edx; add esp, 0x30; pop rbx; pop rbp; pop r12; ret;
0x0012969d: sbb [rbx-0x45b7cbb5], cl; iretd;
0x00129826: sbb al, ch; add al, 0xb9; out dx, eax; inc dword ptr [rbp+rcx*4+0x48]; add [rcx-0x76b3e7bb], ecx; iretd;
0x00129828: add al, 0xb9; out dx, eax; inc dword ptr [rbp+rcx*4+0x48]; add [rcx-0x76b3e7bb], ecx; iretd;
0x00129829: mov ecx, 0x8d44ffef; add [rcx-0x76b3e7bb], rcx; iretd;
0x0012982a: out dx, eax; inc dword ptr [rbp+rcx*4+0x48]; add [rcx-0x76b3e7bb], ecx; iretd;
0x0012982b: inc dword ptr [rbp+rcx*4+0x48]; add [rcx-0x76b3e7bb], ecx; iretd;
0x0012982e: add [rcx-0x76b3e7bb], rcx; iretd;
0x0012982f: add [rcx-0x76b3e7bb], ecx; iretd;
0x00129873: cli; or [rdi], cl; adc dword ptr [rbp+0x41000000], 0xfffffff6; ret 0xf04;
0x00129874: or [rdi], cl; adc dword ptr [rbp+0x41000000], 0xfffffff6; ret 0xf04;
0x00129876: adc dword ptr [rbp+0x41000000], 0xfffffff6; ret 0xf04;
0x00129877: xchg ebp, eax; add [rax], al; add [rcx-0xa], al; ret 0xf04;
0x00129878: add [rax], al; add [rcx-0xa], al; ret 0xf04;
0x0012987a: add [rcx-0xa], al; ret 0xf04;
0x0012997e: call qword ptr [rax-0x76f874bf];
0x00129a32: and [rax+rax], al; add [rbx+0x5d], bl; pop r12; pop r13; pop r14; ret;
0x00129a33: add al, 0; add [rbx+0x5d], bl; pop r12; pop r13; pop r14; ret;
0x00129a35: add [rbx+0x5d], bl; pop r12; pop r13; pop r14; ret;
0x00129a41: cmp edi, esi; jmp qword ptr [rsi+0x2e];
0x00129a44: nop [rax+rax]; xchg ax, ax; ret;
0x00129a45: nop [rax+rax]; xchg ax, ax; ret;
0x00129a46: nop [rax+rax]; xchg ax, ax; ret;
0x00129a48: test [rax], al; add [rax], al; add [rax], al; xchg ax, ax; ret;
0x00129a49: add [rax], al; add [rax], al; add [rsi-0x70], ah; ret;
0x00129a4a: add [rax], al; add [rax], al; xchg ax, ax; ret;
0x00129a4b: add [rax], al; add [rsi-0x70], ah; ret;
0x00129a4c: add [rax], al; xchg ax, ax; ret;
0x00129a4d: add [rsi-0x70], ah; ret;
0x00129a4e: xchg ax, ax; ret;
0x00129a63: mov rdi, rsi; mov rax, [rdi+8]; mov rsi, [r8+0x40]; mov edx, [rsi+0x1c8]; add rsi, 0x38; jmp qword ptr [rax+0x18];
0x00129a64: mov edi, esi; mov rax, [rdi+8]; mov rsi, [r8+0x40]; mov edx, [rsi+0x1c8]; add rsi, 0x38; jmp qword ptr [rax+0x18];
0x00129a66: mov rax, [rdi+8]; mov rsi, [r8+0x40]; mov edx, [rsi+0x1c8]; add rsi, 0x38; jmp qword ptr [rax+0x18];
0x00129a67: mov eax, [rdi+8]; mov rsi, [r8+0x40]; mov edx, [rsi+0x1c8]; add rsi, 0x38; jmp qword ptr [rax+0x18];
0x00129a6a: mov rsi, [r8+0x40]; mov edx, [rsi+0x1c8]; add rsi, 0x38; jmp qword ptr [rax+0x18];
0x00129a6b: mov esi, [rax+0x40]; mov edx, [rsi+0x1c8]; add rsi, 0x38; jmp qword ptr [rax+0x18];
0x00129a6e: mov edx, [rsi+0x1c8]; add rsi, 0x38; jmp qword ptr [rax+0x18];
0x00129a6f: xchg esi, eax; enter 1, 0; add rsi, 0x38; jmp qword ptr [rax+0x18];
0x00129a70: enter 1, 0; add rsi, 0x38; jmp qword ptr [rax+0x18];
0x00129a72: add [rax], al; add rsi, 0x38; jmp qword ptr [rax+0x18];
0x00129a74: add rsi, 0x38; jmp qword ptr [rax+0x18];
0x00129a75: add esi, 0x38; jmp qword ptr [rax+0x18];
0x00129a78: jmp qword ptr [rax+0x18];
0x00129b49: or [rax-0x75], cl; cmp [rax-0x7b], cl; shl byte ptr [rbp+rax+0x48], 0x89; out dx, eax; call rax;
0x00129b65: add [rbp+0x25], dh; add rsp, 0x40; pop rbx; pop rbp; pop r12; ret;
0x00129b67: and eax, 0x40c48348; pop rbx; pop rbp; pop r12; ret;
0x00129b68: add rsp, 0x40; pop rbx; pop rbp; pop r12; ret;
0x00129b69: add esp, 0x40; pop rbx; pop rbp; pop r12; ret;
0x00129b71: nop [rax]; mov rax, [rsp+8]; mov rdi, rbp; call qword ptr [rax+0x20];
0x00129b73: add byte ptr [rax], 0; add [rax], al; mov rax, [rsp+8]; mov rdi, rbp; call qword ptr [rax+0x20];
0x00129b74: add [rax], al; add [rax], al; mov rax, [rsp+8]; mov rdi, rbp; call qword ptr [rax+0x20];
0x00129b75: add [rax], al; add [rax-0x75], cl; and al, 8; mov rdi, rbp; call qword ptr [rax+0x20];
0x00129b76: add [rax], al; mov rax, [rsp+8]; mov rdi, rbp; call qword ptr [rax+0x20];
0x00129b77: add [rax-0x75], cl; and al, 8; mov rdi, rbp; call qword ptr [rax+0x20];
0x00129b78: mov rax, [rsp+8]; mov rdi, rbp; call qword ptr [rax+0x20];
0x00129b79: mov eax, [rsp+8]; mov rdi, rbp; call qword ptr [rax+0x20];
0x00129b7b: and al, 8; mov rdi, rbp; call qword ptr [rax+0x20];
0x00129b7c: or [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x20];
0x00129b82: and [rcx-0x77], al; test [rax+rcx*8], ah; add [rax], eax; add bl, ch; mov eax, 0xfe3a8ee8; jmp qword ptr [rsi+0x66];
0x00129b85: test [rax+rcx*8], ah; add [rax], eax; add bl, ch; mov eax, 0xfe3a8ee8; jmp qword ptr [rsi+0x66];
0x00129b86: and al, 0xc8; add [rax], eax; add bl, ch; mov eax, 0xfe3a8ee8; jmp qword ptr [rsi+0x66];
0x00129b88: add [rax], eax; add bl, ch; mov eax, 0xfe3a8ee8; jmp qword ptr [rsi+0x66];
0x00129b8a: add bl, ch; mov eax, 0xfe3a8ee8; jmp qword ptr [rsi+0x66];
0x00129b8c: mov eax, 0xfe3a8ee8; jmp qword ptr [rsi+0x66];
0x00129b8f: cmp bh, dh; jmp qword ptr [rsi+0x66];
0x00129bd6: mov rax, 0x5c415d5b00000001; pop r13; ret;
0x00129c7d: lahf; cmp esi, edi; jmp qword ptr [rsi+0x66];
0x00129c7e: cmp esi, edi; jmp qword ptr [rsi+0x66];
0x00129d1e: cmp [rax-0x7b], cl; shl byte ptr [rbp+rax+0x4c], 0x89; out dx, eax; call rax;
0x00129d21: shl byte ptr [rbp+rax+0x4c], 0x89; out dx, eax; call rax;
0x00129d24: mov rdi, r13; call rax;
0x00129d3c: add byte ptr [rcx+rcx*4-0x20], 0x5b; pop rbp; pop r12; pop r13; pop r14; ret;
0x00129d5e: xor esi, esi; mov rdi, r13; mov dword ptr [rsp+0x40], 0; mov [rsp+0x10], rax; mov rax, [rsp+0x48]; call qword ptr [rax+0x28];
0x00129d60: mov rdi, r13; mov dword ptr [rsp+0x40], 0; mov [rsp+0x10], rax; mov rax, [rsp+0x48]; call qword ptr [rax+0x28];
0x00129d61: mov edi, ebp; mov dword ptr [rsp+0x40], 0; mov [rsp+0x10], rax; mov rax, [rsp+0x48]; call qword ptr [rax+0x28];
0x00129d62: out dx, eax; mov dword ptr [rsp+0x40], 0; mov [rsp+0x10], rax; mov rax, [rsp+0x48]; call qword ptr [rax+0x28];
0x00129d63: mov dword ptr [rsp+0x40], 0; mov [rsp+0x10], rax; mov rax, [rsp+0x48]; call qword ptr [rax+0x28];
0x00129d65: and al, 0x40; add [rax], al; add [rax], al; mov [rsp+0x10], rax; mov rax, [rsp+0x48]; call qword ptr [rax+0x28];
0x00129d67: add [rax], al; add [rax], al; mov [rsp+0x10], rax; mov rax, [rsp+0x48]; call qword ptr [rax+0x28];
0x00129d68: add [rax], al; add [rax-0x77], cl; and al, 0x10; mov rax, [rsp+0x48]; call qword ptr [rax+0x28];
0x00129d69: add [rax], al; mov [rsp+0x10], rax; mov rax, [rsp+0x48]; call qword ptr [rax+0x28];
0x00129d6a: add [rax-0x77], cl; and al, 0x10; mov rax, [rsp+0x48]; call qword ptr [rax+0x28];
0x00129d6b: mov [rsp+0x10], rax; mov rax, [rsp+0x48]; call qword ptr [rax+0x28];
0x00129d6c: mov [rsp+0x10], eax; mov rax, [rsp+0x48]; call qword ptr [rax+0x28];
0x00129d6e: and al, 0x10; mov rax, [rsp+0x48]; call qword ptr [rax+0x28];
0x00129d6f: adc [rax-0x75], cl; and al, 0x48; call qword ptr [rax+0x28];
0x00129d70: mov rax, [rsp+0x48]; call qword ptr [rax+0x28];
0x00129d71: mov eax, [rsp+0x48]; call qword ptr [rax+0x28];
0x00129d73: and al, 0x48; call qword ptr [rax+0x28];
0x00129ea8: test [rdi+rax*8-0x74b70011], al; and al, 0x58; mov rdi, r12; call qword ptr [rax+0x20];
0x00129ea9: test bh, al; out dx, eax; dec dword ptr [rax-0x75]; and al, 0x58; mov rdi, r12; call qword ptr [rax+0x20];
0x00129eab: out dx, eax; dec dword ptr [rax-0x75]; and al, 0x58; mov rdi, r12; call qword ptr [rax+0x20];
0x00129eac: dec dword ptr [rax-0x75]; and al, 0x58; mov rdi, r12; call qword ptr [rax+0x20];
0x00129ead: mov rax, [rsp+0x58]; mov rdi, r12; call qword ptr [rax+0x20];
0x00129eae: mov eax, [rsp+0x58]; mov rdi, r12; call qword ptr [rax+0x20];
0x00129eb0: and al, 0x58; mov rdi, r12; call qword ptr [rax+0x20];
0x00129eb1: pop rax; mov rdi, r12; call qword ptr [rax+0x20];
0x00129eb2: mov rdi, r12; call qword ptr [rax+0x20];
0x00129eb3: mov edi, esp; call qword ptr [rax+0x20];
0x0012a031: add esi, eax; out dx, eax; inc dword ptr [rcx+0xfffb]; add [rdi], cl; xchg edi, eax; ret;
0x0012a033: out dx, eax; inc dword ptr [rcx+0xfffb]; add [rdi], cl; xchg edi, eax; ret;
0x0012a034: inc dword ptr [rcx+0xfffb]; add [rdi], cl; xchg edi, eax; ret;
0x0012a038: add [rax], al; add [rdi], cl; xchg edi, eax; ret;
0x0012a03a: add [rdi], cl; xchg edi, eax; ret;
0x0012a03c: xchg edi, eax; ret;
0x0012a050: fsub st(0), st; ret 0xefb2;
0x0012a052: ret 0xefb2;
0x0012a31b: xor edi, esi; jmp qword ptr [rsi-0x70];
0x0012a3a0: mov rax, fs:[0x28]; mov [rsp+0x438], rax; xor eax, eax; mov rax, [rdi+8]; lea rsi, [rsp+0x10]; call qword ptr [rax+0x10];
0x0012a3a1: mov rax, [0x28]; mov [rsp+0x438], rax; xor eax, eax; mov rax, [rdi+8]; lea rsi, [rsp+0x10]; call qword ptr [rax+0x10];
0x0012a3a2: mov eax, [0x28]; mov [rsp+0x438], rax; xor eax, eax; mov rax, [rdi+8]; lea rsi, [rsp+0x10]; call qword ptr [rax+0x10];
0x0012a3a4: and eax, 0x28; mov [rsp+0x438], rax; xor eax, eax; mov rax, [rdi+8]; lea rsi, [rsp+0x10]; call qword ptr [rax+0x10];
0x0012a3a7: add [rax], al; mov [rsp+0x438], rax; xor eax, eax; mov rax, [rdi+8]; lea rsi, [rsp+0x10]; call qword ptr [rax+0x10];
0x0012a3a9: mov [rsp+0x438], rax; xor eax, eax; mov rax, [rdi+8]; lea rsi, [rsp+0x10]; call qword ptr [rax+0x10];
0x0012a3aa: mov [rsp+0x438], eax; xor eax, eax; mov rax, [rdi+8]; lea rsi, [rsp+0x10]; call qword ptr [rax+0x10];
0x0012a3af: add [rax], al; xor eax, eax; mov rax, [rdi+8]; lea rsi, [rsp+0x10]; call qword ptr [rax+0x10];
0x0012a3b1: xor eax, eax; mov rax, [rdi+8]; lea rsi, [rsp+0x10]; call qword ptr [rax+0x10];
0x0012a3b3: mov rax, [rdi+8]; lea rsi, [rsp+0x10]; call qword ptr [rax+0x10];
0x0012a3b4: mov eax, [rdi+8]; lea rsi, [rsp+0x10]; call qword ptr [rax+0x10];
0x0012a3b7: lea rsi, [rsp+0x10]; call qword ptr [rax+0x10];
0x0012a3b8: lea esi, [rsp+0x10]; call qword ptr [rax+0x10];
0x0012a3ba: and al, 0x10; call qword ptr [rax+0x10];
0x0012a3d3: add [rax], eax; add [rbx+0x48102444], cl; lea edx, [rip+0x5f1df]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x0012a3d4: add [rax], al; mov eax, [rsp+0x10]; lea rdx, [rip+0x5f1df]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x0012a3d5: add [rbx+0x48102444], cl; lea edx, [rip+0x5f1df]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x0012a3d6: mov eax, [rsp+0x10]; lea rdx, [rip+0x5f1df]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x0012a3d8: and al, 0x10; lea rdx, [rip+0x5f1df]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x0012a3d9: adc [rax-0x73], cl; adc eax, 0x5f1df; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x0012a3da: lea rdx, [rip+0x5f1df]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x0012a3db: lea edx, [rip+0x5f1df]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x0012a3dc: adc eax, 0x5f1df; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x0012a473: add [rcx+rcx*4-0x40], cl; pop rbx; pop rbp; pop r12; pop r13; ret;
0x0012a474: mov rax, r8; pop rbx; pop rbp; pop r12; pop r13; ret;
0x0012a6dc: add rsp, 0x428; pop rbx; pop rbp; pop r12; pop r13; ret;
0x0012a6dd: add esp, 0x428; pop rbx; pop rbp; pop r12; pop r13; ret;
0x0012a6df: sub [rax+rax], al; add [rbx+0x5d], bl; pop r12; pop r13; ret;
0x0012a6e0: add al, 0; add [rbx+0x5d], bl; pop r12; pop r13; ret;
0x0012a735: or [rax-0x77], cl; ret 0xc031;
0x0012a740: mov rax, [rdi+0x10]; movdqu xmm0, [rax+0x30]; movups [rsi], xmm0; mov rax, [rax+0x40]; mov [rsi+0x10], rax; ret;
0x0012a741: mov eax, [rdi+0x10]; movdqu xmm0, [rax+0x30]; movups [rsi], xmm0; mov rax, [rax+0x40]; mov [rsi+0x10], rax; ret;
0x0012a742: adc r11b, r14b; movq mm0, [rax+0x30]; movups [rsi], xmm0; mov rax, [rax+0x40]; mov [rsi+0x10], rax; ret;
0x0012a743: adc bl, dh; movq mm0, [rax+0x30]; movups [rsi], xmm0; mov rax, [rax+0x40]; mov [rsi+0x10], rax; ret;
0x0012a744: movdqu xmm0, [rax+0x30]; movups [rsi], xmm0; mov rax, [rax+0x40]; mov [rsi+0x10], rax; ret;
0x0012a745: movq mm0, [rax+0x30]; movups [rsi], xmm0; mov rax, [rax+0x40]; mov [rsi+0x10], rax; ret;
0x0012a746: outsd dx, [rsi]; xor [rdi], cl; adc [rsi], eax; mov rax, [rax+0x40]; mov [rsi+0x10], rax; ret;
0x0012a748: xor [rdi], cl; adc [rsi], eax; mov rax, [rax+0x40]; mov [rsi+0x10], rax; ret;
0x0012a749: movups [rsi], xmm0; mov rax, [rax+0x40]; mov [rsi+0x10], rax; ret;
0x0012a74a: adc [rsi], eax; mov rax, [rax+0x40]; mov [rsi+0x10], rax; ret;
0x0012a74c: mov rax, [rax+0x40]; mov [rsi+0x10], rax; ret;
0x0012a74d: mov eax, [rax+0x40]; mov [rsi+0x10], rax; ret;
0x0012a764: mov rcx, rsi; xor eax, eax; mov rsi, rdx; mov dword ptr [rdi+0x68], 2; add rdi, 0x68; jmp rcx;
0x0012a765: mov ecx, esi; xor eax, eax; mov rsi, rdx; mov dword ptr [rdi+0x68], 2; add rdi, 0x68; jmp rcx;
0x0012a766: int1; xor eax, eax; mov rsi, rdx; mov dword ptr [rdi+0x68], 2; add rdi, 0x68; jmp rcx;
0x0012a767: xor eax, eax; mov rsi, rdx; mov dword ptr [rdi+0x68], 2; add rdi, 0x68; jmp rcx;
0x0012a768: ror byte ptr [rax-0x77], 0xd6; mov dword ptr [rdi+0x68], 2; add rdi, 0x68; jmp rcx;
0x0012a769: mov rsi, rdx; mov dword ptr [rdi+0x68], 2; add rdi, 0x68; jmp rcx;
0x0012a76a: mov esi, edx; mov dword ptr [rdi+0x68], 2; add rdi, 0x68; jmp rcx;
0x0012a76c: mov dword ptr [rdi+0x68], 2; add rdi, 0x68; jmp rcx;
0x0012a76e: push 2; add rdi, 0x68; jmp rcx;
0x0012a76f: add al, [rax]; add [rax], al; add rdi, 0x68; jmp rcx;
0x0012a771: add [rax], al; add rdi, 0x68; jmp rcx;
0x0012a773: add rdi, 0x68; jmp rcx;
0x0012a774: add edi, 0x68; jmp rcx;
0x0012a776: push 0x1f0fe1ff; add byte ptr [rax], 0; add [rax], al; ret;
0x0012a7b2: lea rdi, [rbp+0x68]; call rax;
0x0012a7b3: lea edi, [rbp+0x68]; call rax;
0x0012a7cb: stosq [rdi]; out dx, eax; call qword ptr [rax-0x17ff8275];
0x0012a7cc: stosd [rdi]; out dx, eax; call qword ptr [rax-0x17ff8275];
0x0012a7e6: rol byte ptr [rbx+0x14770ffe], 1; lea rcx, [rip+0x5f1b1]; mov edx, esi; movsxd rax, [rcx+rdx*4]; add rax, rcx; jmp rax;
0x0012a7eb: adc al, 0x48; lea ecx, [rip+0x5f1b1]; mov edx, esi; movsxd rax, [rcx+rdx*4]; add rax, rcx; jmp rax;
0x0012a7ec: lea rcx, [rip+0x5f1b1]; mov edx, esi; movsxd rax, [rcx+rdx*4]; add rax, rcx; jmp rax;
0x0012a7ed: lea ecx, [rip+0x5f1b1]; mov edx, esi; movsxd rax, [rcx+rdx*4]; add rax, rcx; jmp rax;
0x0012a7ee: or eax, 0x5f1b1; mov edx, esi; movsxd rax, [rcx+rdx*4]; add rax, rcx; jmp rax;
0x0012a7ef: mov cl, 0xf1; add eax, 0x48f28900; movsxd eax, [rcx+rdx*4]; add rax, rcx; jmp rax;
0x0012a7f0: int1; add eax, 0x48f28900; movsxd eax, [rcx+rdx*4]; add rax, rcx; jmp rax;
0x0012a7fb: enter 0xe0ff, 0x66; nop; xor eax, eax; ret;
0x0012a803: nop [rax+rax]; movdqu xmm0, [r8]; mov eax, esi; mov dword ptr [rdi+0x18], 1; movups [rdi+8], xmm0; ret;
0x0012a805: add [rax], r8b; movdqu xmm0, [r8]; mov eax, esi; mov dword ptr [rdi+0x18], 1; movups [rdi+8], xmm0; ret;
0x0012a806: add [rax], al; movdqu xmm0, [r8]; mov eax, esi; mov dword ptr [rdi+0x18], 1; movups [rdi+8], xmm0; ret;
0x0012a807: add bl, dh; movq mm0, [r8]; mov eax, esi; mov dword ptr [rdi+0x18], 1; movups [rdi+8], xmm0; ret;
0x0012a808: movdqu xmm0, [r8]; mov eax, esi; mov dword ptr [rdi+0x18], 1; movups [rdi+8], xmm0; ret;
0x0012a809: movq mm0, [r8]; mov eax, esi; mov dword ptr [rdi+0x18], 1; movups [rdi+8], xmm0; ret;
0x0012a80a: movq mm0, [rax]; mov eax, esi; mov dword ptr [rdi+0x18], 1; movups [rdi+8], xmm0; ret;
0x0012a80b: outsd dx, [rsi]; add [rcx+0x1847c7f0], cl; add [rax], eax; add [rax], al; movups [rdi+8], xmm0; ret;
0x0012a80c: add [rcx+0x1847c7f0], cl; add [rax], eax; add [rax], al; movups [rdi+8], xmm0; ret;
0x0012a80d: mov eax, esi; mov dword ptr [rdi+0x18], 1; movups [rdi+8], xmm0; ret;
0x0012a80f: mov dword ptr [rdi+0x18], 1; movups [rdi+8], xmm0; ret;
0x0012a810: sbb [r9], r8b; add [rax], al; add [rdi], cl; adc [rdi+8], eax; ret;
0x0012a811: sbb [rcx], al; add [rax], al; add [rdi], cl; adc [rdi+8], eax; ret;
0x0012a812: add [rax], eax; add [rax], al; movups [rdi+8], xmm0; ret;
0x0012a813: add [rax], al; add [rdi], cl; adc [rdi+8], eax; ret;
0x0012a814: add [rax], al; movups [rdi+8], xmm0; ret;
0x0012a815: add [rdi], cl; adc [rdi+8], eax; ret;
0x0012a816: movups [rdi+8], xmm0; ret;
0x0012a817: adc [rdi+8], eax; ret;
0x0012a818: or r11b, r8b; nop [rax+rax]; movdqu xmm1, [rdi+8]; mov eax, 1; movups [r8], xmm1; ret;
0x0012a819: or bl, al; nop [rax+rax]; movdqu xmm1, [rdi+8]; mov eax, 1; movups [r8], xmm1; ret;
0x0012a81b: nop [rax+rax]; movdqu xmm1, [rdi+8]; mov eax, 1; movups [r8], xmm1; ret;
0x0012a81d: add [rax], r8b; movdqu xmm1, [rdi+8]; mov eax, 1; movups [r8], xmm1; ret;
0x0012a81e: add [rax], al; movdqu xmm1, [rdi+8]; mov eax, 1; movups [r8], xmm1; ret;
0x0012a81f: add bl, dh; movq mm1, [rdi+8]; mov eax, 1; movups [r8], xmm1; ret;
0x0012a820: movdqu xmm1, [rdi+8]; mov eax, 1; movups [r8], xmm1; ret;
0x0012a821: movq mm1, [rdi+8]; mov eax, 1; movups [r8], xmm1; ret;
0x0012a822: outsd dx, [rsi]; or [r8+1], r15b; movups [r8], xmm1; ret;
0x0012a823: or [r8+1], r15b; movups [r8], xmm1; ret;
0x0012a824: or [rax+1], bh; movups [r8], xmm1; ret;
0x0012a82d: or bl, al; nop; movdqu xmm2, [rdi+0x1c]; mov eax, 1; movups [r8], xmm2; ret;
0x0012a82f: nop; movdqu xmm2, [rdi+0x1c]; mov eax, 1; movups [r8], xmm2; ret;
0x0012a830: movdqu xmm2, [rdi+0x1c]; mov eax, 1; movups [r8], xmm2; ret;
0x0012a831: movq mm2, [rdi+0x1c]; mov eax, 1; movups [r8], xmm2; ret;
0x0012a833: push rdi; sbb al, 0xb8; add [rax], eax; add [rax], al; movups [r8], xmm2; ret;
0x0012a834: sbb al, 0xb8; add [rax], eax; add [rax], al; movups [r8], xmm2; ret;
0x0012a835: mov eax, 1; movups [r8], xmm2; ret;
0x0012a836: add [rax], eax; add [rax], al; movups [r8], xmm2; ret;
0x0012a837: add [rax], al; add [rcx+0xf], al; adc [rax], edx; ret;
0x0012a838: add [rax], al; movups [r8], xmm2; ret;
0x0012a839: add [rcx+0xf], al; adc [rax], edx; ret;
0x0012a83a: movups [r8], xmm2; ret;
0x0012a83b: movups [rax], xmm2; ret;
0x0012a83c: adc [rax], edx; ret;
0x0012a83d: adc bl, al; nop; mov eax, [rdi]; mov [r8], eax; mov eax, 1; ret;
0x0012a86f: add [rbx-0x37f0b7b9], cl; mov eax, eax; mov [r8], rax; mov eax, 1; ret;
0x0012a870: mov eax, [rdi+0x48]; bswap eax; mov eax, eax; mov [r8], rax; mov eax, 1; ret;
0x0012a872: bswap rax; mov eax, eax; mov [r8], rax; mov eax, 1; ret;
0x0012a880: mov rax, [r8]; sub eax, 1; bswap eax; mov [rdi+0x48], eax; mov eax, 1; ret;
0x0012a881: mov eax, [rax]; sub eax, 1; bswap eax; mov [rdi+0x48], eax; mov eax, 1; ret;
0x0012a882: add [rbx-0x37f0fe18], al; mov [rdi+0x48], eax; mov eax, 1; ret;
0x0012a883: sub eax, 1; bswap eax; mov [rdi+0x48], eax; mov eax, 1; ret;
0x0012a885: add [rdi], ecx; enter 0x4789, 0x48; mov eax, 1; ret;
0x0012a886: bswap eax; mov [rdi+0x48], eax; mov eax, 1; ret;
0x0012a887: enter 0x4789, 0x48; mov eax, 1; ret;
0x0012a888: mov [rdi+0x48], eax; mov eax, 1; ret;
0x0012a895: add [rax], al; add [rbx-0x37f0a7b9], cl; mov eax, eax; mov [r8], rax; mov eax, 1; ret;
0x0012a897: add [rbx-0x37f0a7b9], cl; mov eax, eax; mov [r8], rax; mov eax, 1; ret;
0x0012a898: mov eax, [rdi+0x58]; bswap eax; mov eax, eax; mov [r8], rax; mov eax, 1; ret;
0x0012a899: pop r8; bswap eax; mov eax, eax; mov [r8], rax; mov eax, 1; ret;
0x0012a89a: pop rax; bswap eax; mov eax, eax; mov [r8], rax; mov eax, 1; ret;
0x0012a8a8: nop [rax+rax]; mov rax, [r8]; bswap eax; mov [rdi+0x58], eax; mov eax, 1; ret;
0x0012a8ad: add [rax], al; add [rcx-0x75], cl; add [rdi], cl; enter 0x4789, 0x58; mov eax, 1; ret;
0x0012a8ae: add [rax], al; mov rax, [r8]; bswap eax; mov [rdi+0x58], eax; mov eax, 1; ret;
0x0012a8af: add [rcx-0x75], cl; add [rdi], cl; enter 0x4789, 0x58; mov eax, 1; ret;
0x0012a8b0: mov rax, [r8]; bswap eax; mov [rdi+0x58], eax; mov eax, 1; ret;
0x0012a8b1: mov eax, [rax]; bswap eax; mov [rdi+0x58], eax; mov eax, 1; ret;
0x0012a8b2: add [rdi], cl; enter 0x4789, 0x58; mov eax, 1; ret;
0x0012a8b3: bswap eax; mov [rdi+0x58], eax; mov eax, 1; ret;
0x0012a8b4: enter 0x4789, 0x58; mov eax, 1; ret;
0x0012a8b5: mov [rdi+0x58], eax; mov eax, 1; ret;
0x0012a8b6: pop r8; mov eax, 1; ret;
0x0012a8b7: pop rax; mov eax, 1; ret;
0x0012a8c0: mov eax, [rdi+0x54]; bswap eax; mov eax, eax; mov [r8], rax; mov eax, 1; ret;
0x0012a8c1: push r12; bswap eax; mov eax, eax; mov [r8], rax; mov eax, 1; ret;
0x0012a8c2: push rsp; bswap eax; mov eax, eax; mov [r8], rax; mov eax, 1; ret;
0x0012a8ce: add bl, al; mov rax, [r8]; bswap eax; mov [rdi+0x54], eax; mov eax, 1; ret;
0x0012a8d0: mov rax, [r8]; bswap eax; mov [rdi+0x54], eax; mov eax, 1; ret;
0x0012a8d1: mov eax, [rax]; bswap eax; mov [rdi+0x54], eax; mov eax, 1; ret;
0x0012a8d2: add [rdi], cl; enter 0x4789, 0x54; mov eax, 1; ret;
0x0012a8d3: bswap eax; mov [rdi+0x54], eax; mov eax, 1; ret;
0x0012a8d4: enter 0x4789, 0x54; mov eax, 1; ret;
0x0012a8d5: mov [rdi+0x54], eax; mov eax, 1; ret;
0x0012a8d6: push r12; mov eax, 1; ret;
0x0012a8d7: push rsp; mov eax, 1; ret;
0x0012a989: mov rsi, [rsp+8]; lea ebp, [rax-1]; mov rax, [rbx+0x70]; mov [rbx+0x48], ebp; bswap ebp; call qword ptr [rax+0x18];
0x0012a98a: mov esi, [rsp+8]; lea ebp, [rax-1]; mov rax, [rbx+0x70]; mov [rbx+0x48], ebp; bswap ebp; call qword ptr [rax+0x18];
0x0012a98c: and al, 8; lea ebp, [rax-1]; mov rax, [rbx+0x70]; mov [rbx+0x48], ebp; bswap ebp; call qword ptr [rax+0x18];
0x0012a98e: lea ebp, [rax-1]; mov rax, [rbx+0x70]; mov [rbx+0x48], ebp; bswap ebp; call qword ptr [rax+0x18];
0x0012a991: mov rax, [rbx+0x70]; mov [rbx+0x48], ebp; bswap ebp; call qword ptr [rax+0x18];
0x0012a992: mov eax, [rbx+0x70]; mov [rbx+0x48], ebp; bswap ebp; call qword ptr [rax+0x18];
0x0012a995: mov [rbx+0x48], ebp; bswap ebp; call qword ptr [rax+0x18];
0x0012a996: imul ecx, [rax+0xf], 0xffffffcd; call qword ptr [rax+0x18];
0x0012a997: bswap rbp; call qword ptr [rax+0x18];
0x0012a998: bswap ebp; call qword ptr [rax+0x18];
0x0012a9a0: test [rbx+0x48000001], bl; mov eax, [rbx+0x70]; mov rsi, [rsp+0x18]; mov rdi, r12; call qword ptr [rax+8];
0x0012a9a3: add [rax], al; mov rax, [rbx+0x70]; mov rsi, [rsp+0x18]; mov rdi, r12; call qword ptr [rax+8];
0x0012a9a5: mov rax, [rbx+0x70]; mov rsi, [rsp+0x18]; mov rdi, r12; call qword ptr [rax+8];
0x0012a9a6: mov eax, [rbx+0x70]; mov rsi, [rsp+0x18]; mov rdi, r12; call qword ptr [rax+8];
0x0012a9a9: mov rsi, [rsp+0x18]; mov rdi, r12; call qword ptr [rax+8];
0x0012a9aa: mov esi, [rsp+0x18]; mov rdi, r12; call qword ptr [rax+8];
0x0012a9ac: and al, 0x18; mov rdi, r12; call qword ptr [rax+8];
0x0012a9ad: sbb [rcx+rcx*4-0x19], cl; call qword ptr [rax+8];
0x0012a9ae: mov rdi, r12; call qword ptr [rax+8];
0x0012a9af: mov edi, esp; call qword ptr [rax+8];
0x0012a9b7: test [rcx+rax-0x74b80000], al; and al, 0x10; mov rsi, r12; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+8];
0x0012a9ba: add [rax], al; mov rax, [rsp+0x10]; mov rsi, r12; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+8];
0x0012a9bb: add [rax-0x75], cl; and al, 0x10; mov rsi, r12; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+8];
0x0012a9bc: mov rax, [rsp+0x10]; mov rsi, r12; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+8];
0x0012a9bd: mov eax, [rsp+0x10]; mov rsi, r12; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+8];
0x0012a9bf: and al, 0x10; mov rsi, r12; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+8];
0x0012a9c0: adc [rcx+rcx*4-0x1a], cl; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+8];
0x0012a9c1: mov rsi, r12; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+8];
0x0012a9c2: mov esi, esp; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+8];
0x0012a9c3: out 0x48, al; mov edi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+8];
0x0012a9c4: mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+8];
0x0012a9c5: mov edi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+8];
0x0012a9d4: add [rax], al; xor eax, eax; mov rsi, [rsp+0x30]; mov rcx, [rsp+0x28]; mov rdi, r12; call rcx;
0x0012a9d5: add [rcx], dh; ror byte ptr [rax-0x75], 0x74; and al, 0x30; mov rcx, [rsp+0x28]; mov rdi, r12; call rcx;
0x0012a9d6: xor eax, eax; mov rsi, [rsp+0x30]; mov rcx, [rsp+0x28]; mov rdi, r12; call rcx;
0x0012a9d7: ror byte ptr [rax-0x75], 0x74; and al, 0x30; mov rcx, [rsp+0x28]; mov rdi, r12; call rcx;
0x0012a9d8: mov rsi, [rsp+0x30]; mov rcx, [rsp+0x28]; mov rdi, r12; call rcx;
0x0012a9d9: mov esi, [rsp+0x30]; mov rcx, [rsp+0x28]; mov rdi, r12; call rcx;
0x0012a9db: and al, 0x30; mov rcx, [rsp+0x28]; mov rdi, r12; call rcx;
0x0012a9dc: xor [rax-0x75], cl; and al, 0x28; mov rdi, r12; call rcx;
0x0012a9dd: mov rcx, [rsp+0x28]; mov rdi, r12; call rcx;
0x0012a9de: mov ecx, [rsp+0x28]; mov rdi, r12; call rcx;
0x0012a9e0: and al, 0x28; mov rdi, r12; call rcx;
0x0012a9e1: sub [rcx+rcx*4-0x19], cl; call rcx;
0x0012a9e2: mov rdi, r12; call rcx;
0x0012a9e3: mov edi, esp; call rcx;
0x0012aad3: and al, 0x3c; add [rdi+0x48], esi; mov eax, [rsp+0x10]; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x18];
0x0012aad5: add [rdi+0x48], esi; mov eax, [rsp+0x10]; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x18];
0x0012aad7: cmpsd [rsi], [rdi]; mov rax, [rsp+0x10]; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x18];
0x0012aad8: mov rax, [rsp+0x10]; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x18];
0x0012aad9: mov eax, [rsp+0x10]; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x18];
0x0012aadb: and al, 0x10; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x18];
0x0012aae8: ror byte ptr [rdi], 0x85; cmp esi, 0xffffffff; call qword ptr [rax-0x14cfbc75];
0x0012aaeb: cmp esi, 0xffffffff; call qword ptr [rax-0x14cfbc75];
0x0012aaee: call qword ptr [rax-0x14cfbc75];
0x0012ab7b: mov rax, [rsp+0x10]; lea rbp, [rsp+0x68]; mov rsi, rbp; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x10];
0x0012ab7c: mov eax, [rsp+0x10]; lea rbp, [rsp+0x68]; mov rsi, rbp; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x10];
0x0012ab7e: and al, 0x10; lea rbp, [rsp+0x68]; mov rsi, rbp; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x10];
0x0012ab80: lea rbp, [rsp+0x68]; mov rsi, rbp; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x10];
0x0012ab81: lea ebp, [rsp+0x68]; mov rsi, rbp; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x10];
0x0012ab82: insb [rdi], dx; and al, 0x68; mov rsi, rbp; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x10];
0x0012ab83: and al, 0x68; mov rsi, rbp; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x10];
0x0012ab84: push 0x48ee8948; mov edi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x10];
0x0012abc9: push qword ptr [rcx]; ror byte ptr [rax-0x75], 0x74; and al, 0x40; mov rdx, [rsp+0x20]; mov rdi, r12; call rdx;
0x0012abca: xor eax, eax; mov rsi, [rsp+0x40]; mov rdx, [rsp+0x20]; mov rdi, r12; call rdx;
0x0012abcb: ror byte ptr [rax-0x75], 0x74; and al, 0x40; mov rdx, [rsp+0x20]; mov rdi, r12; call rdx;
0x0012abcc: mov rsi, [rsp+0x40]; mov rdx, [rsp+0x20]; mov rdi, r12; call rdx;
0x0012abcd: mov esi, [rsp+0x40]; mov rdx, [rsp+0x20]; mov rdi, r12; call rdx;
0x0012abcf: and al, 0x40; mov rdx, [rsp+0x20]; mov rdi, r12; call rdx;
0x0012abd1: mov rdx, [rsp+0x20]; mov rdi, r12; call rdx;
0x0012abd2: mov edx, [rsp+0x20]; mov rdi, r12; call rdx;
0x0012abd3: push rsp; and al, 0x20; mov rdi, r12; call rdx;
0x0012abd4: and al, 0x20; mov rdi, r12; call rdx;
0x0012abd5: and [rcx+rcx*4-0x19], cl; call rdx;
0x0012abd6: mov rdi, r12; call rdx;
0x0012abd7: mov edi, esp; call rdx;
0x0012abd9: call rdx;
0x0012abf0: sub bh, dh; jmp qword ptr [rsi+0x66];
0x0012ac58: or [rcx+rcx*4-0x40], al; pop rbx; pop rbp; pop r12; pop r13; ret;
0x0012ac59: mov eax, r8d; pop rbx; pop rbp; pop r12; pop r13; ret;
0x0012ac5a: mov eax, eax; pop rbx; pop rbp; pop r12; pop r13; ret;
0x0012ac6f: pop rbx; mov eax, r8d; pop rbp; pop r12; pop r13; ret;
0x0012ac70: mov eax, r8d; pop rbp; pop r12; pop r13; ret;
0x0012ac71: mov eax, eax; pop rbp; pop r12; pop r13; ret;
0x0012ac72: rcr byte ptr [rbp+0x41], 0x5c; pop r13; ret;
0x0012ada3: sub dh, bh; jmp qword ptr [rsi+0x2e];
0x0012ae98: ror byte ptr [rdi], 0x84; add [rcx], eax; add [rax], al; mov rax, [r14+0x70]; mov rdi, rbp; call qword ptr [rax+0x20];
0x0012ae9b: add [rcx], eax; add [rax], al; mov rax, [r14+0x70]; mov rdi, rbp; call qword ptr [rax+0x20];
0x0012ae9d: add [rax], al; mov rax, [r14+0x70]; mov rdi, rbp; call qword ptr [rax+0x20];
0x0012ae9f: mov rax, [r14+0x70]; mov rdi, rbp; call qword ptr [rax+0x20];
0x0012aea0: mov eax, [rsi+0x70]; mov rdi, rbp; call qword ptr [rax+0x20];
0x0012aeb4: cmp [rax-0x7b], cl; shl byte ptr [rbp+rax+0x48], 0x89; out dx, eax; call rax;
0x0012aeb7: shl byte ptr [rbp+rax+0x48], 0x89; out dx, eax; call rax;
0x0012aeba: mov rdi, rbp; call rax;
0x0012aebb: mov edi, ebp; call rax;
0x0012aebc: out dx, eax; call rax;
0x0012b050: mov rax, [rdi+0x10]; movdqu xmm0, [rax+0x40]; movups [rsi], xmm0; mov rax, [rax+0x50]; mov [rsi+0x10], rax; ret;
0x0012b051: mov eax, [rdi+0x10]; movdqu xmm0, [rax+0x40]; movups [rsi], xmm0; mov rax, [rax+0x50]; mov [rsi+0x10], rax; ret;
0x0012b052: adc r11b, r14b; movq mm0, [rax+0x40]; movups [rsi], xmm0; mov rax, [rax+0x50]; mov [rsi+0x10], rax; ret;
0x0012b053: adc bl, dh; movq mm0, [rax+0x40]; movups [rsi], xmm0; mov rax, [rax+0x50]; mov [rsi+0x10], rax; ret;
0x0012b054: movdqu xmm0, [rax+0x40]; movups [rsi], xmm0; mov rax, [rax+0x50]; mov [rsi+0x10], rax; ret;
0x0012b055: movq mm0, [rax+0x40]; movups [rsi], xmm0; mov rax, [rax+0x50]; mov [rsi+0x10], rax; ret;
0x0012b056: outsd dx, [rsi]; movups [rsi], xmm0; mov rax, [rax+0x50]; mov [rsi+0x10], rax; ret;
0x0012b059: movups [rsi], xmm0; mov rax, [rax+0x50]; mov [rsi+0x10], rax; ret;
0x0012b05a: adc [rsi], eax; mov rax, [rax+0x50]; mov [rsi+0x10], rax; ret;
0x0012b05c: mov rax, [rax+0x50]; mov [rsi+0x10], rax; ret;
0x0012b05d: mov eax, [rax+0x50]; mov [rsi+0x10], rax; ret;
0x0012b05f: push rax; mov [rsi+0x10], rax; ret;
0x0012b060: mov [rsi+0x10], rax; ret;
0x0012b061: mov [rsi+0x10], eax; ret;
0x0012b074: mov rcx, rsi; xor eax, eax; mov rsi, rdx; mov dword ptr [rdi+0x58], 2; add rdi, 0x58; jmp rcx;
0x0012b075: mov ecx, esi; xor eax, eax; mov rsi, rdx; mov dword ptr [rdi+0x58], 2; add rdi, 0x58; jmp rcx;
0x0012b076: int1; xor eax, eax; mov rsi, rdx; mov dword ptr [rdi+0x58], 2; add rdi, 0x58; jmp rcx;
0x0012b077: xor eax, eax; mov rsi, rdx; mov dword ptr [rdi+0x58], 2; add rdi, 0x58; jmp rcx;
0x0012b078: ror byte ptr [rax-0x77], 0xd6; mov dword ptr [rdi+0x58], 2; add rdi, 0x58; jmp rcx;
0x0012b079: mov rsi, rdx; mov dword ptr [rdi+0x58], 2; add rdi, 0x58; jmp rcx;
0x0012b07a: mov esi, edx; mov dword ptr [rdi+0x58], 2; add rdi, 0x58; jmp rcx;
0x0012b07c: mov dword ptr [rdi+0x58], 2; add rdi, 0x58; jmp rcx;
0x0012b07d: pop r8; add al, [rax]; add [rax], al; add rdi, 0x58; jmp rcx;
0x0012b07e: pop rax; add al, [rax]; add [rax], al; add rdi, 0x58; jmp rcx;
0x0012b07f: add al, [rax]; add [rax], al; add rdi, 0x58; jmp rcx;
0x0012b081: add [rax], al; add rdi, 0x58; jmp rcx;
0x0012b083: add rdi, 0x58; jmp rcx;
0x0012b084: add edi, 0x58; jmp rcx;
0x0012b086: pop rax; jmp rcx;
0x0012b089: nop [rax]; ret;
0x0012b08b: add byte ptr [rax], 0; add [rax], al; ret;
0x0012b0ae: add [rax], al; lea rcx, [rip+0x5e92d]; mov edx, esi; movsxd rax, [rcx+rdx*4]; add rax, rcx; jmp rax;
0x0012b0af: add [rax-0x73], cl; or eax, 0x5e92d; mov edx, esi; movsxd rax, [rcx+rdx*4]; add rax, rcx; jmp rax;
0x0012b0b0: lea rcx, [rip+0x5e92d]; mov edx, esi; movsxd rax, [rcx+rdx*4]; add rax, rcx; jmp rax;
0x0012b0b1: lea ecx, [rip+0x5e92d]; mov edx, esi; movsxd rax, [rcx+rdx*4]; add rax, rcx; jmp rax;
0x0012b0b2: or eax, 0x5e92d; mov edx, esi; movsxd rax, [rcx+rdx*4]; add rax, rcx; jmp rax;
0x0012b0b5: add eax, 0x48f28900; movsxd eax, [rcx+rdx*4]; add rax, rcx; jmp rax;
0x0012b0b6: add [rcx+0x46348f2], cl; xchg ecx, eax; add rax, rcx; jmp rax;
0x0012b0b7: mov edx, esi; movsxd rax, [rcx+rdx*4]; add rax, rcx; jmp rax;
0x0012b0b9: movsxd rax, [rcx+rdx*4]; add rax, rcx; jmp rax;
0x0012b0ba: movsxd eax, [rcx+rdx*4]; add rax, rcx; jmp rax;
0x0012b0bb: add al, 0x91; add rax, rcx; jmp rax;
0x0012b0bc: xchg ecx, eax; add rax, rcx; jmp rax;
0x0012b0bd: add rax, rcx; jmp rax;
0x0012b0be: add eax, ecx; jmp rax;
0x0012b0c8: mov rax, [r8]; mov rdx, [rdi+0x90]; bswap eax; mov [rdx+0xc], eax; mov eax, 1; ret;
0x0012b0c9: mov eax, [rax]; mov rdx, [rdi+0x90]; bswap eax; mov [rdx+0xc], eax; mov eax, 1; ret;
0x0012b0cb: mov rdx, [rdi+0x90]; bswap eax; mov [rdx+0xc], eax; mov eax, 1; ret;
0x0012b0cc: mov edx, [rdi+0x90]; bswap eax; mov [rdx+0xc], eax; mov eax, 1; ret;
0x0012b0ce: nop; add [rax], al; add [rdi], cl; enter 0x4289, 0xc; mov eax, 1; ret;
0x0012b0cf: add [rax], al; add [rdi], cl; enter 0x4289, 0xc; mov eax, 1; ret;
0x0012b0d0: add [rax], al; bswap eax; mov [rdx+0xc], eax; mov eax, 1; ret;
0x0012b0d1: add [rdi], cl; enter 0x4289, 0xc; mov eax, 1; ret;
0x0012b0d2: bswap eax; mov [rdx+0xc], eax; mov eax, 1; ret;
0x0012b0d3: enter 0x4289, 0xc; mov eax, 1; ret;
0x0012b0d4: mov [rdx+0xc], eax; mov eax, 1; ret;
0x0012b0d6: or al, 0xb8; add [rax], eax; add [rax], al; ret;
0x0012b0db: add bl, al; nop [rax]; movdqu xmm0, [r8]; mov eax, esi; movups [rdi+0x30], xmm0; ret;
0x0012b0dd: nop [rax]; movdqu xmm0, [r8]; mov eax, esi; movups [rdi+0x30], xmm0; ret;
0x0012b0df: add bl, dh; movq mm0, [r8]; mov eax, esi; movups [rdi+0x30], xmm0; ret;
0x0012b0e0: movdqu xmm0, [r8]; mov eax, esi; movups [rdi+0x30], xmm0; ret;
0x0012b0e1: movq mm0, [r8]; mov eax, esi; movups [rdi+0x30], xmm0; ret;
0x0012b0e2: movq mm0, [rax]; mov eax, esi; movups [rdi+0x30], xmm0; ret;
0x0012b0e5: mov eax, esi; movups [rdi+0x30], xmm0; ret;
0x0012b0e7: movups [rdi+0x30], xmm0; ret;
0x0012b0e8: adc [rdi+0x30], eax; ret;
0x0012b0e9: xor r11b, r8b; nop [rax]; movdqu xmm1, [rdi+0x30]; mov eax, 1; movups [r8], xmm1; ret;
0x0012b0ea: xor bl, al; nop [rax]; movdqu xmm1, [rdi+0x30]; mov eax, 1; movups [r8], xmm1; ret;
0x0012b0ec: nop [rax]; movdqu xmm1, [rdi+0x30]; mov eax, 1; movups [r8], xmm1; ret;
0x0012b0ee: add bl, sil; movq mm1, [rdi+0x30]; mov eax, 1; movups [r8], xmm1; ret;
0x0012b0ef: add bl, dh; movq mm1, [rdi+0x30]; mov eax, 1; movups [r8], xmm1; ret;
0x0012b0f0: movdqu xmm1, [rdi+0x30]; mov eax, 1; movups [r8], xmm1; ret;
0x0012b0f1: movq mm1, [rdi+0x30]; mov eax, 1; movups [r8], xmm1; ret;
0x0012b0f2: outsd dx, [rsi]; xor [r8+1], r15b; movups [r8], xmm1; ret;
0x0012b0f3: xor [r8+1], r15b; movups [r8], xmm1; ret;
0x0012b0f4: xor [rax+1], bh; movups [r8], xmm1; ret;
0x0012b0f5: mov eax, 1; movups [r8], xmm1; ret;
0x0012b0f6: add [rax], eax; add [rax], al; movups [r8], xmm1; ret;
0x0012b0f7: add [rax], al; add [rcx+0xf], al; adc [rax], ecx; ret;
0x0012b0f8: add [rax], al; movups [r8], xmm1; ret;
0x0012b0f9: add [rcx+0xf], al; adc [rax], ecx; ret;
0x0012b0fa: movups [r8], xmm1; ret;
0x0012b0fb: movups [rax], xmm1; ret;
0x0012b0fc: adc [rax], ecx; ret;
0x0012b0fd: or bl, al; nop; movdqu xmm4, [rdi+8]; mov eax, 1; movups [r8], xmm4; ret;
0x0012b0ff: nop; movdqu xmm4, [rdi+8]; mov eax, 1; movups [r8], xmm4; ret;
0x0012b100: movdqu xmm4, [rdi+8]; mov eax, 1; movups [r8], xmm4; ret;
0x0012b101: movq mm4, [rdi+8]; mov eax, 1; movups [r8], xmm4; ret;
0x0012b102: outsd dx, [rsi]; or [eax+1], bh; movups [r8], xmm4; ret;
0x0012b103: or [eax+1], bh; movups [r8], xmm4; ret;
0x0012b104: or [rax+1], bh; movups [r8], xmm4; ret;
0x0012b105: mov eax, 1; movups [r8], xmm4; ret;
0x0012b106: add [rax], eax; add [rax], al; movups [r8], xmm4; ret;
0x0012b107: add [rax], al; add [rcx+0xf], al; adc [rax], esp; ret;
0x0012b108: add [rax], al; movups [r8], xmm4; ret;
0x0012b109: add [rcx+0xf], al; adc [rax], esp; ret;
0x0012b10a: movups [r8], xmm4; ret;
0x0012b10b: movups [rax], xmm4; ret;
0x0012b10c: adc [rax], esp; ret;
0x0012b10d: and bl, al; nop; movdqu xmm2, [r8]; mov eax, 1; movups [rdi+0x20], xmm2; ret;
0x0012b10f: nop; movdqu xmm2, [r8]; mov eax, 1; movups [rdi+0x20], xmm2; ret;
0x0012b110: movdqu xmm2, [r8]; mov eax, 1; movups [rdi+0x20], xmm2; ret;
0x0012b111: movq mm2, [r8]; mov eax, 1; movups [rdi+0x20], xmm2; ret;
0x0012b112: movq mm2, [rax]; mov eax, 1; movups [rdi+0x20], xmm2; ret;
0x0012b113: outsd dx, [rsi]; adc [rax+1], bh; movups [rdi+0x20], xmm2; ret;
0x0012b114: adc [rax+1], bh; movups [rdi+0x20], xmm2; ret;
0x0012b115: mov eax, 1; movups [rdi+0x20], xmm2; ret;
0x0012b116: add [rax], eax; add [rax], al; movups [rdi+0x20], xmm2; ret;
0x0012b117: add [rax], al; add [rdi], cl; adc [rdi+0x20], edx; ret;
0x0012b118: add [rax], al; movups [rdi+0x20], xmm2; ret;
0x0012b119: add [rdi], cl; adc [rdi+0x20], edx; ret;
0x0012b11a: movups [rdi+0x20], xmm2; ret;
0x0012b11b: adc [rdi+0x20], edx; ret;
0x0012b11d: and bl, al; nop; movdqu xmm3, [rdi+0x20]; mov eax, 1; movups [r8], xmm3; ret;
0x0012b11f: nop; movdqu xmm3, [rdi+0x20]; mov eax, 1; movups [r8], xmm3; ret;
0x0012b120: movdqu xmm3, [rdi+0x20]; mov eax, 1; movups [r8], xmm3; ret;
0x0012b121: movq mm3, [rdi+0x20]; mov eax, 1; movups [r8], xmm3; ret;
0x0012b122: outsd dx, [rsi]; pop rdi; and [rax+1], bh; movups [r8], xmm3; ret;
0x0012b123: pop rdi; and [rax+1], bh; movups [r8], xmm3; ret;
0x0012b124: and [rax+1], bh; movups [r8], xmm3; ret;
0x0012b125: mov eax, 1; movups [r8], xmm3; ret;
0x0012b126: add [rax], eax; add [rax], al; movups [r8], xmm3; ret;
0x0012b127: add [rax], al; add [rcx+0xf], al; adc [rax], ebx; ret;
0x0012b128: add [rax], al; movups [r8], xmm3; ret;
0x0012b129: add [rcx+0xf], al; adc [rax], ebx; ret;
0x0012b12a: movups [r8], xmm3; ret;
0x0012b12b: movups [rax], xmm3; ret;
0x0012b12c: adc [rax], ebx; ret;
0x0012b12d: sbb bl, al; nop; mov eax, [rdi]; mov [r8], eax; mov eax, 1; ret;
0x0012b12f: nop; mov eax, [rdi]; mov [r8], eax; mov eax, 1; ret;
0x0012b130: mov eax, [rdi]; mov [r8], eax; mov eax, 1; ret;
0x0012b132: mov [r8], eax; mov eax, 1; ret;
0x0012b137: add [rax], al; add bl, al; nop [rax+rax]; mov dword ptr [rdi+4], 1; mov eax, 1; ret;
0x0012b139: add bl, al; nop [rax+rax]; mov dword ptr [rdi+4], 1; mov eax, 1; ret;
0x0012b13b: nop [rax+rax]; mov dword ptr [rdi+4], 1; mov eax, 1; ret;
0x0012b13d: add [rax], r8b; mov dword ptr [rdi+4], 1; mov eax, 1; ret;
0x0012b13e: add [rax], al; mov dword ptr [rdi+4], 1; mov eax, 1; ret;
0x0012b13f: add bh, al; add al, 1; add [rax], al; add [rax+1], bh; ret;
0x0012b140: mov dword ptr [rdi+4], 1; mov eax, 1; ret;
0x0012b142: add al, 1; add [rax], al; add [rax+1], bh; ret;
0x0012b143: add [rax], eax; add [rax], al; mov eax, 1; ret;
0x0012b149: add [rax], al; add bl, al; nop [rax]; mov dword ptr [rdi+4], 0; mov eax, 1; ret;
0x0012b14b: add bl, al; nop [rax]; mov dword ptr [rdi+4], 0; mov eax, 1; ret;
0x0012b14d: nop [rax]; mov dword ptr [rdi+4], 0; mov eax, 1; ret;
0x0012b14f: add bh, al; add al, 0; add [rax], al; add [rax+1], bh; ret;
0x0012b150: mov dword ptr [rdi+4], 0; mov eax, 1; ret;
0x0012b152: add al, 0; add [rax], al; add [rax+1], bh; ret;
0x0012b162: xchg [rax-0x75000000], edx; add [rdi], cl; enter 0xc089, 0x49; mov [rax], eax; mov eax, 1; ret;
0x0012b163: nop; add [rax], al; add [rbx-0x7637f100], cl; ror byte ptr [rcx-0x77], 0; mov eax, 1; ret;
0x0012b164: add [rax], al; add [rbx-0x7637f100], cl; ror byte ptr [rcx-0x77], 0; mov eax, 1; ret;
0x0012b166: add [rbx-0x7637f100], cl; ror byte ptr [rcx-0x77], 0; mov eax, 1; ret;
0x0012b167: mov eax, [rax]; bswap eax; mov eax, eax; mov [r8], rax; mov eax, 1; ret;
0x0012b168: add [rdi], cl; enter 0xc089, 0x49; mov [rax], eax; mov eax, 1; ret;
0x0012b183: mov rdx, [rdi+0x90]; sub eax, 1; bswap eax; mov [rdx], eax; mov eax, 1; ret;
0x0012b184: mov edx, [rdi+0x90]; sub eax, 1; bswap eax; mov [rdx], eax; mov eax, 1; ret;
0x0012b186: nop; add [rax], al; add [rbx-0x37f0fe18], al; mov [rdx], eax; mov eax, 1; ret;
0x0012b187: add [rax], al; add [rbx-0x37f0fe18], al; mov [rdx], eax; mov eax, 1; ret;
0x0012b188: add [rax], al; sub eax, 1; bswap eax; mov [rdx], eax; mov eax, 1; ret;
0x0012b189: add [rbx-0x37f0fe18], al; mov [rdx], eax; mov eax, 1; ret;
0x0012b18a: sub eax, 1; bswap eax; mov [rdx], eax; mov eax, 1; ret;
0x0012b18c: add [rdi], ecx; enter 0x289, 0xb8; add [rax], eax; add [rax], al; ret;
0x0012b18d: bswap eax; mov [rdx], eax; mov eax, 1; ret;
0x0012b18e: enter 0x289, 0xb8; add [rax], eax; add [rax], al; ret;
0x0012b18f: mov [rdx], eax; mov eax, 1; ret;
0x0012b190: add bh, [rax+1]; ret;
0x0012b1a2: xchg [rax-0x75000000], edx; adc [rdi], cl; enter 0xc089, 0x49; mov [rax], eax; mov eax, 1; ret;
0x0012b1a4: add [rax], al; add [rbx-0x37f0efc0], cl; mov eax, eax; mov [r8], rax; mov eax, 1; ret;
0x0012b1a6: add [rbx-0x37f0efc0], cl; mov eax, eax; mov [r8], rax; mov eax, 1; ret;
0x0012b1a7: mov eax, [rax+0x10]; bswap eax; mov eax, eax; mov [r8], rax; mov eax, 1; ret;
0x0012b1a9: adc [rdi], cl; enter 0xc089, 0x49; mov [rax], eax; mov eax, 1; ret;
0x0012b1c0: mov rax, [r8]; mov rdx, [rdi+0x90]; bswap eax; mov [rdx+0x10], eax; mov eax, 1; ret;
0x0012b1c1: mov eax, [rax]; mov rdx, [rdi+0x90]; bswap eax; mov [rdx+0x10], eax; mov eax, 1; ret;
0x0012b1c3: mov rdx, [rdi+0x90]; bswap eax; mov [rdx+0x10], eax; mov eax, 1; ret;
0x0012b1c4: mov edx, [rdi+0x90]; bswap eax; mov [rdx+0x10], eax; mov eax, 1; ret;
0x0012b1c6: nop; add [rax], al; add [rdi], cl; enter 0x4289, 0x10; mov eax, 1; ret;
0x0012b1c7: add [rax], al; add [rdi], cl; enter 0x4289, 0x10; mov eax, 1; ret;
0x0012b1c8: add [rax], al; bswap eax; mov [rdx+0x10], eax; mov eax, 1; ret;
0x0012b1c9: add [rdi], cl; enter 0x4289, 0x10; mov eax, 1; ret;
0x0012b1ca: bswap eax; mov [rdx+0x10], eax; mov eax, 1; ret;
0x0012b1cb: enter 0x4289, 0x10; mov eax, 1; ret;
0x0012b1cc: mov [rdx+0x10], eax; mov eax, 1; ret;
0x0012b1cd: adc [rax+1], dil; ret;
0x0012b1ce: adc [rax+1], bh; ret;
0x0012b1da: xchg [rax-0x75000000], edx; or al, 0xf; enter 0xc089, 0x49; mov [rax], eax; mov eax, 1; ret;
0x0012b1dc: add [rax], al; add [rbx-0x37f0f3c0], cl; mov eax, eax; mov [r8], rax; mov eax, 1; ret;
0x0012b1de: add [rbx-0x37f0f3c0], cl; mov eax, eax; mov [r8], rax; mov eax, 1; ret;
0x0012b1df: mov eax, [rax+0xc]; bswap eax; mov eax, eax; mov [r8], rax; mov eax, 1; ret;
0x0012b1e1: or al, 0xf; enter 0xc089, 0x49; mov [rax], eax; mov eax, 1; ret;
0x0012b1e2: bswap eax; mov eax, eax; mov [r8], rax; mov eax, 1; ret;
0x0012b1e3: enter 0xc089, 0x49; mov [rax], eax; mov eax, 1; ret;
0x0012b1e4: mov eax, eax; mov [r8], rax; mov eax, 1; ret;
0x0012b1e5: ror byte ptr [rcx-0x77], 0; mov eax, 1; ret;
0x0012b1e6: mov [r8], rax; mov eax, 1; ret;
0x0012b1e7: mov [rax], eax; mov eax, 1; ret;
0x0012b1eb: add [rax], al; add bl, al; nop; xor eax, eax; ret;
0x0012b1ed: add bl, al; nop; xor eax, eax; ret;
0x0012b222: lea rdi, [rbp+0x58]; call rax;
0x0012b223: lea edi, [rbp+0x58]; call rax;
0x0012b225: pop rax; call rax;
0x0012b23d: out dx, eax; call qword ptr [rax-0x17ff8275];
0x0012b23e: call qword ptr [rax-0x17ff8275];
0x0012b374: mov rbx, [rsp+0x58]; mov rax, [r15+0x60]; mov dword ptr [r15+0x58], 0; mov esi, [r15+0x88]; mov rdi, rbx; call qword ptr [rax+0x28];
0x0012b375: mov ebx, [rsp+0x58]; mov rax, [r15+0x60]; mov dword ptr [r15+0x58], 0; mov esi, [r15+0x88]; mov rdi, rbx; call qword ptr [rax+0x28];
0x0012b377: and al, 0x58; mov rax, [r15+0x60]; mov dword ptr [r15+0x58], 0; mov esi, [r15+0x88]; mov rdi, rbx; call qword ptr [rax+0x28];
0x0012b378: pop rax; mov rax, [r15+0x60]; mov dword ptr [r15+0x58], 0; mov esi, [r15+0x88]; mov rdi, rbx; call qword ptr [rax+0x28];
0x0012b379: mov rax, [r15+0x60]; mov dword ptr [r15+0x58], 0; mov esi, [r15+0x88]; mov rdi, rbx; call qword ptr [rax+0x28];
0x0012b37a: mov eax, [rdi+0x60]; mov dword ptr [r15+0x58], 0; mov esi, [r15+0x88]; mov rdi, rbx; call qword ptr [rax+0x28];
0x0012b37d: mov dword ptr [r15+0x58], 0; mov esi, [r15+0x88]; mov rdi, rbx; call qword ptr [rax+0x28];
0x0012b37e: mov dword ptr [rdi+0x58], 0; mov esi, [r15+0x88]; mov rdi, rbx; call qword ptr [rax+0x28];
0x0012b37f: pop r8; add [rax], al; add [rax], al; mov esi, [r15+0x88]; mov rdi, rbx; call qword ptr [rax+0x28];
0x0012b380: pop rax; add [rax], al; add [rax], al; mov esi, [r15+0x88]; mov rdi, rbx; call qword ptr [rax+0x28];
0x0012b381: add [rax], al; add [rax], al; mov esi, [r15+0x88]; mov rdi, rbx; call qword ptr [rax+0x28];
0x0012b383: add [rax], al; mov esi, [r15+0x88]; mov rdi, rbx; call qword ptr [rax+0x28];
0x0012b385: mov esi, [r15+0x88]; mov rdi, rbx; call qword ptr [rax+0x28];
0x0012b386: mov esi, [rdi+0x88]; mov rdi, rbx; call qword ptr [rax+0x28];
0x0012b388: mov [rax], al; add [rax], al; mov rdi, rbx; call qword ptr [rax+0x28];
0x0012b38a: add [rax], al; mov rdi, rbx; call qword ptr [rax+0x28];
0x0012b38c: mov rdi, rbx; call qword ptr [rax+0x28];
0x0012b38d: mov edi, ebx; call qword ptr [rax+0x28];
0x0012b392: mov rax, [r15+0x90]; lea rsi, [rsp+0x78]; mov rdi, rbx; add dword ptr [rax], 1; mov rax, [r15+0x60]; call qword ptr [rax+8];
0x0012b393: mov eax, [rdi+0x90]; lea rsi, [rsp+0x78]; mov rdi, rbx; add dword ptr [rax], 1; mov rax, [r15+0x60]; call qword ptr [rax+8];
0x0012b394: xchg [rax+0x48000000], edx; lea esi, [rsp+0x78]; mov rdi, rbx; add dword ptr [rax], 1; mov rax, [r15+0x60]; call qword ptr [rax+8];
0x0012b397: add [rax], al; lea rsi, [rsp+0x78]; mov rdi, rbx; add dword ptr [rax], 1; mov rax, [r15+0x60]; call qword ptr [rax+8];
0x0012b399: lea rsi, [rsp+0x78]; mov rdi, rbx; add dword ptr [rax], 1; mov rax, [r15+0x60]; call qword ptr [rax+8];
0x0012b39a: lea esi, [rsp+0x78]; mov rdi, rbx; add dword ptr [rax], 1; mov rax, [r15+0x60]; call qword ptr [rax+8];
0x0012b39c: and al, 0x78; mov rdi, rbx; add dword ptr [rax], 1; mov rax, [r15+0x60]; call qword ptr [rax+8];
0x0012b39e: mov rdi, rbx; add dword ptr [rax], 1; mov rax, [r15+0x60]; call qword ptr [rax+8];
0x0012b39f: mov edi, ebx; add dword ptr [rax], 1; mov rax, [r15+0x60]; call qword ptr [rax+8];
0x0012b3a1: add dword ptr [rax], 1; mov rax, [r15+0x60]; call qword ptr [rax+8];
0x0012b3a2: add [rcx], al; mov rax, [r15+0x60]; call qword ptr [rax+8];
0x0012b3a4: mov rax, [r15+0x60]; call qword ptr [rax+8];
0x0012b3a5: mov eax, [rdi+0x60]; call qword ptr [rax+8];
0x0012b3b3: mov rax, [rsp+0x38]; mov rbx, [rsp+0x58]; mov rdi, [rax]; mov rsi, rbx; mov rax, [rdi+0x38]; call qword ptr [rax+8];
0x0012b3b4: mov eax, [rsp+0x38]; mov rbx, [rsp+0x58]; mov rdi, [rax]; mov rsi, rbx; mov rax, [rdi+0x38]; call qword ptr [rax+8];
0x0012b3b6: and al, 0x38; mov rbx, [rsp+0x58]; mov rdi, [rax]; mov rsi, rbx; mov rax, [rdi+0x38]; call qword ptr [rax+8];
0x0012b3b8: mov rbx, [rsp+0x58]; mov rdi, [rax]; mov rsi, rbx; mov rax, [rdi+0x38]; call qword ptr [rax+8];
0x0012b3b9: mov ebx, [rsp+0x58]; mov rdi, [rax]; mov rsi, rbx; mov rax, [rdi+0x38]; call qword ptr [rax+8];
0x0012b3ba: pop rsp; and al, 0x58; mov rdi, [rax]; mov rsi, rbx; mov rax, [rdi+0x38]; call qword ptr [rax+8];
0x0012b3bb: and al, 0x58; mov rdi, [rax]; mov rsi, rbx; mov rax, [rdi+0x38]; call qword ptr [rax+8];
0x0012b3bc: pop rax; mov rdi, [rax]; mov rsi, rbx; mov rax, [rdi+0x38]; call qword ptr [rax+8];
0x0012b3bd: mov rdi, [rax]; mov rsi, rbx; mov rax, [rdi+0x38]; call qword ptr [rax+8];
0x0012b3be: mov edi, [rax]; mov rsi, rbx; mov rax, [rdi+0x38]; call qword ptr [rax+8];
0x0012b3c0: mov rsi, rbx; mov rax, [rdi+0x38]; call qword ptr [rax+8];
0x0012b3c1: mov esi, ebx; mov rax, [rdi+0x38]; call qword ptr [rax+8];
0x0012b3c3: mov rax, [rdi+0x38]; call qword ptr [rax+8];
0x0012b3c4: mov eax, [rdi+0x38]; call qword ptr [rax+8];
0x0012b3c9: or [rbp+0x7b840fc0], al; add eax, 0xc0310000; mov rsi, [rsp+0x40]; mov rcx, [rsp]; mov rdi, rbx; call rcx;
0x0012b3cf: add eax, 0xc0310000; mov rsi, [rsp+0x40]; mov rcx, [rsp]; mov rdi, rbx; call rcx;
0x0012b3d0: add [rax], al; xor eax, eax; mov rsi, [rsp+0x40]; mov rcx, [rsp]; mov rdi, rbx; call rcx;
0x0012b3d1: add [rcx], dh; ror byte ptr [rax-0x75], 0x74; and al, 0x40; mov rcx, [rsp]; mov rdi, rbx; call rcx;
0x0012b3d2: xor eax, eax; mov rsi, [rsp+0x40]; mov rcx, [rsp]; mov rdi, rbx; call rcx;
0x0012b3d3: ror byte ptr [rax-0x75], 0x74; and al, 0x40; mov rcx, [rsp]; mov rdi, rbx; call rcx;
0x0012b3d4: mov rsi, [rsp+0x40]; mov rcx, [rsp]; mov rdi, rbx; call rcx;
0x0012b3d5: mov esi, [rsp+0x40]; mov rcx, [rsp]; mov rdi, rbx; call rcx;
0x0012b3d7: and al, 0x40; mov rcx, [rsp]; mov rdi, rbx; call rcx;
0x0012b3d9: mov rcx, [rsp]; mov rdi, rbx; call rcx;
0x0012b3da: mov ecx, [rsp]; mov rdi, rbx; call rcx;
0x0012b3db: or al, 0x24; mov rdi, rbx; call rcx;
0x0012b3dc: and al, 0x48; mov edi, ebx; call rcx;
0x0012b3e5: test [rbx+5], ah; add [rax], al; mov rax, [r15+0x60]; mov rdi, rbx; call qword ptr [rax+0x20];
0x0012b3e8: add [rax], al; mov rax, [r15+0x60]; mov rdi, rbx; call qword ptr [rax+0x20];
0x0012b3ea: mov rax, [r15+0x60]; mov rdi, rbx; call qword ptr [rax+0x20];
0x0012b3eb: mov eax, [rdi+0x60]; mov rdi, rbx; call qword ptr [rax+0x20];
0x0012b3ee: mov rdi, rbx; call qword ptr [rax+0x20];
0x0012b3ef: mov edi, ebx; call qword ptr [rax+0x20];
0x0012b50e: sbb [rax-0x77], cl; ret 0x850f;
0x0012b5c6: add eax, [rax]; add [rax-0x75], cl; add [rax-0x7b], cl; shl byte ptr [rbp-0x21], 0xe8; sar rsi, cl; jmp qword ptr [rsi+0x2e];
0x0012b5c8: add [rax-0x75], cl; add [rax-0x7b], cl; shl byte ptr [rbp-0x21], 0xe8; sar rsi, cl; jmp qword ptr [rsi+0x2e];
0x0012b5cb: add [rax-0x7b], cl; shl byte ptr [rbp-0x21], 0xe8; sar rsi, cl; jmp qword ptr [rsi+0x2e];
0x0012b5ce: shl byte ptr [rbp-0x21], 0xe8; sar rsi, cl; jmp qword ptr [rsi+0x2e];
0x0012b5d0: fucomip st, st(0); sar rsi, cl; jmp qword ptr [rsi+0x2e];
0x0012b5d2: sar rsi, cl; jmp qword ptr [rsi+0x2e];
0x0012b5d3: sar esi, cl; jmp qword ptr [rsi+0x2e];
0x0012b66e: call qword ptr [rax-0x71db7b0a];
0x0012b682: push 0xffffffffef9c80e8; dec dword ptr [rax-0x77]; ret;
0x0012b685: pushfq; out dx, eax; dec dword ptr [rax-0x77]; ret;
0x0012b843: add [rdi], ecx; test [rbx+0x48fffffa], ah; mov eax, [rsp+0x38]; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x18];
0x0012b845: test [rbx+0x48fffffa], ah; mov eax, [rsp+0x38]; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x18];
0x0012b846: mov [0x3824448b48fffffa], eax; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x18];
0x0012b849: dec dword ptr [rax-0x75]; and al, 0x38; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x18];
0x0012b84a: mov rax, [rsp+0x38]; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x18];
0x0012b84b: mov eax, [rsp+0x38]; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x18];
0x0012b84d: and al, 0x38; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x18];
0x0012b84f: mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x18];
0x0012b850: mov edi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x18];
0x0012b852: mov rax, [rdi+0x38]; call qword ptr [rax+0x18];
0x0012b853: mov eax, [rdi+0x38]; call qword ptr [rax+0x18];
0x0012b866: cmp edx, 0xffffffff; jmp qword ptr [rsi+0xf];
0x0012b90a: dec dword ptr [rax-0x7d]; ret 0x4807;
0x0012b90d: ret 0x4807;
0x0012b9bb: mov rax, [rsp+0x38]; lea rbp, [rsp+0x128]; mov rsi, rbp; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x10];
0x0012b9bc: mov eax, [rsp+0x38]; lea rbp, [rsp+0x128]; mov rsi, rbp; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x10];
0x0012b9be: and al, 0x38; lea rbp, [rsp+0x128]; mov rsi, rbp; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x10];
0x0012b9c0: lea rbp, [rsp+0x128]; mov rsi, rbp; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x10];
0x0012b9c1: lea ebp, [rsp+0x128]; mov rsi, rbp; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x10];
0x0012b9c4: sub [rcx], al; add [rax], al; mov rsi, rbp; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x10];
0x0012b9c5: add [rax], eax; add [rax-0x77], cl; out dx, al; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x10];
0x0012b9c6: add [rax], al; mov rsi, rbp; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x10];
0x0012b9c7: add [rax-0x77], cl; out dx, al; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x10];
0x0012b9c8: mov rsi, rbp; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x10];
0x0012b9c9: mov esi, ebp; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x10];
0x0012b9ca: out dx, al; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x10];
0x0012b9cb: mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x10];
0x0012b9cc: mov edi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x10];
0x0012b9ce: mov rax, [rdi+0x38]; call qword ptr [rax+0x10];
0x0012b9cf: mov eax, [rdi+0x38]; call qword ptr [rax+0x10];
0x0012bba9: test [rdx+0x49000000], al; mov eax, [rdi+0x60]; mov rdi, rbp; call qword ptr [rax+0x20];
0x0012bbac: add [rax], al; mov rax, [r15+0x60]; mov rdi, rbp; call qword ptr [rax+0x20];
0x0012bbae: mov rax, [r15+0x60]; mov rdi, rbp; call qword ptr [rax+0x20];
0x0012bbaf: mov eax, [rdi+0x60]; mov rdi, rbp; call qword ptr [rax+0x20];
0x0012bbb2: mov rdi, rbp; call qword ptr [rax+0x20];
0x0012bd0c: sbb esi, edi; call qword ptr [rax+0x10ec8348];
0x0012bd0e: call qword ptr [rax+0x10ec8348];
0x0012bd8a: push rax; adc dh, dh; ret 0x7401;
0x0012bd8b: adc dh, dh; ret 0x7401;
0x0012bd8d: ret 0x7401;
0x0012bde8: add [rax], al; add [rbp+0x1c], dh; add rsp, 0x10; pop rbx; ret;
0x0012bdea: add [rbp+0x1c], dh; add rsp, 0x10; pop rbx; ret;
0x0012bdec: sbb al, 0x48; add esp, 0x10; pop rbx; ret;
0x0012be0b: sbb dh, bh; jmp qword ptr [rsi-0x70];
0x0012be5f: int 0; add [rax], al; mov rax, [rbx]; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x20];
0x0012be61: add [rax], al; mov rax, [rbx]; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x20];
0x0012be70: mov rdi, [rbx]; mov rax, [rdi+8]; call qword ptr [rax+0x20];
0x0012be71: mov edi, [rbx]; mov rax, [rdi+8]; call qword ptr [rax+0x20];
0x0012bee6: mov rax, [rdi+8]; lea rdx, [rsp+0x20]; mov esi, 4; mov qword ptr [rsp+0x20], 6; mov qword ptr [rsp+0x28], 0; call qword ptr [rax+0x28];
0x0012bee7: mov eax, [rdi+8]; lea rdx, [rsp+0x20]; mov esi, 4; mov qword ptr [rsp+0x20], 6; mov qword ptr [rsp+0x28], 0; call qword ptr [rax+0x28];
0x0012beea: lea rdx, [rsp+0x20]; mov esi, 4; mov qword ptr [rsp+0x20], 6; mov qword ptr [rsp+0x28], 0; call qword ptr [rax+0x28];
0x0012beeb: lea edx, [rsp+0x20]; mov esi, 4; mov qword ptr [rsp+0x20], 6; mov qword ptr [rsp+0x28], 0; call qword ptr [rax+0x28];
0x0012beec: push rsp; and al, 0x20; mov esi, 4; mov qword ptr [rsp+0x20], 6; mov qword ptr [rsp+0x28], 0; call qword ptr [rax+0x28];
0x0012beed: and al, 0x20; mov esi, 4; mov qword ptr [rsp+0x20], 6; mov qword ptr [rsp+0x28], 0; call qword ptr [rax+0x28];
0x0012beee: and [rsi+4], bh; mov qword ptr [rsp+0x20], 6; mov qword ptr [rsp+0x28], 0; call qword ptr [rax+0x28];
0x0012beef: mov esi, 4; mov qword ptr [rsp+0x20], 6; mov qword ptr [rsp+0x28], 0; call qword ptr [rax+0x28];
0x0012bef0: add al, 0; add [rax], al; mov qword ptr [rsp+0x20], 6; mov qword ptr [rsp+0x28], 0; call qword ptr [rax+0x28];
0x0012bef2: add [rax], al; mov qword ptr [rsp+0x20], 6; mov qword ptr [rsp+0x28], 0; call qword ptr [rax+0x28];
0x0012bef4: mov qword ptr [rsp+0x20], 6; mov qword ptr [rsp+0x28], 0; call qword ptr [rax+0x28];
0x0012bef5: mov dword ptr [rsp+0x20], 6; mov qword ptr [rsp+0x28], 0; call qword ptr [rax+0x28];
0x0012befa: add [rax], al; add [rax-0x39], cl; and al, 0x28; add [rax], al; add [rax], al; call qword ptr [rax+0x28];
0x0012befb: add [rax], al; mov qword ptr [rsp+0x28], 0; call qword ptr [rax+0x28];
0x0012befc: add [rax-0x39], cl; and al, 0x28; add [rax], al; add [rax], al; call qword ptr [rax+0x28];
0x0012befd: mov qword ptr [rsp+0x28], 0; call qword ptr [rax+0x28];
0x0012befe: mov dword ptr [rsp+0x28], 0; call qword ptr [rax+0x28];
0x0012bf00: and al, 0x28; add [rax], al; add [rax], al; call qword ptr [rax+0x28];
0x0012bf02: add [rax], al; add [rax], al; call qword ptr [rax+0x28];
0x0012bf09: mov rdi, [rbx]; lea rdx, [rsp+0x18]; mov esi, 6; mov rax, [rdi+8]; call qword ptr [rax+0x28];
0x0012bf0a: mov edi, [rbx]; lea rdx, [rsp+0x18]; mov esi, 6; mov rax, [rdi+8]; call qword ptr [rax+0x28];
0x0012bf0b: cmp ecx, [rax-0x73]; push rsp; and al, 0x18; mov esi, 6; mov rax, [rdi+8]; call qword ptr [rax+0x28];
0x0012bf0c: lea rdx, [rsp+0x18]; mov esi, 6; mov rax, [rdi+8]; call qword ptr [rax+0x28];
0x0012bf0d: lea edx, [rsp+0x18]; mov esi, 6; mov rax, [rdi+8]; call qword ptr [rax+0x28];
0x0012bf0e: push rsp; and al, 0x18; mov esi, 6; mov rax, [rdi+8]; call qword ptr [rax+0x28];
0x0012bf0f: and al, 0x18; mov esi, 6; mov rax, [rdi+8]; call qword ptr [rax+0x28];
0x0012bf10: sbb [rsi+6], bh; mov rax, [rdi+8]; call qword ptr [rax+0x28];
0x0012bf11: mov esi, 6; mov rax, [rdi+8]; call qword ptr [rax+0x28];
0x0012bf14: add [rax], al; mov rax, [rdi+8]; call qword ptr [rax+0x28];
0x0012bf16: mov rax, [rdi+8]; call qword ptr [rax+0x28];
0x0012bf17: mov eax, [rdi+8]; call qword ptr [rax+0x28];
0x0012bf3b: dec dword ptr [rax-0x75]; or [r8-0x73], r9b; push rsp; and al, 0x18; mov esi, 6; call qword ptr [rax+0x28];
0x0012bf3c: mov rax, [rdi+8]; lea rdx, [rsp+0x18]; mov esi, 6; call qword ptr [rax+0x28];
0x0012bf3d: mov eax, [rdi+8]; lea rdx, [rsp+0x18]; mov esi, 6; call qword ptr [rax+0x28];
0x0012bf3e: or [r8-0x73], r9b; push rsp; and al, 0x18; mov esi, 6; call qword ptr [rax+0x28];
0x0012bf3f: or [rax-0x73], cl; push rsp; and al, 0x18; mov esi, 6; call qword ptr [rax+0x28];
0x0012bf40: lea rdx, [rsp+0x18]; mov esi, 6; call qword ptr [rax+0x28];
0x0012bf41: lea edx, [rsp+0x18]; mov esi, 6; call qword ptr [rax+0x28];
0x0012bf42: push rsp; and al, 0x18; mov esi, 6; call qword ptr [rax+0x28];
0x0012bf43: and al, 0x18; mov esi, 6; call qword ptr [rax+0x28];
0x0012bf44: sbb [rsi+6], bh; call qword ptr [rax+0x28];
0x0012bf45: mov esi, 6; call qword ptr [rax+0x28];
0x0012bf84: mov [rbx+0xc], eax; mov rax, [rbx]; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x20];
0x0012bf86: or al, 0x48; mov eax, [rbx]; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x20];
0x0012bf87: mov rax, [rbx]; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x20];
0x0012bf88: mov eax, [rbx]; mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x20];
0x0012bf8a: mov rdi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x20];
0x0012bf8b: mov edi, [rax]; mov rax, [rdi+0x38]; call qword ptr [rax+0x20];
0x0012bf8d: mov rax, [rdi+0x38]; call qword ptr [rax+0x20];
0x0012bf8e: mov eax, [rdi+0x38]; call qword ptr [rax+0x20];
0x0012bfbb: test [rax+0x48000000], dl; mov eax, [rdi+8]; lea rdx, [rsp+0xc]; mov esi, 0xd; call qword ptr [rax+0x28];
0x0012bfbe: add [rax], al; mov rax, [rdi+8]; lea rdx, [rsp+0xc]; mov esi, 0xd; call qword ptr [rax+0x28];
0x0012bfbf: add [rax-0x75], cl; or [r8-0x73], r9b; push rsp; and al, 0xc; mov esi, 0xd; call qword ptr [rax+0x28];
0x0012bfc0: mov rax, [rdi+8]; lea rdx, [rsp+0xc]; mov esi, 0xd; call qword ptr [rax+0x28];
0x0012bfc1: mov eax, [rdi+8]; lea rdx, [rsp+0xc]; mov esi, 0xd; call qword ptr [rax+0x28];
0x0012bfc2: or [r8-0x73], r9b; push rsp; and al, 0xc; mov esi, 0xd; call qword ptr [rax+0x28];
0x0012bfc3: or [rax-0x73], cl; push rsp; and al, 0xc; mov esi, 0xd; call qword ptr [rax+0x28];
0x0012bfc4: lea rdx, [rsp+0xc]; mov esi, 0xd; call qword ptr [rax+0x28];
0x0012bfc5: lea edx, [rsp+0xc]; mov esi, 0xd; call qword ptr [rax+0x28];
0x0012bfc6: push rsp; and al, 0xc; mov esi, 0xd; call qword ptr [rax+0x28];
0x0012bfc7: and al, 0xc; mov esi, 0xd; call qword ptr [rax+0x28];
0x0012bfc9: mov esi, 0xd; call qword ptr [rax+0x28];
0x0012bfcc: add [rax], al; call qword ptr [rax+0x28];
0x0012bfe7: mov [rax], es; add [rax], al; add rsp, 0xb8; pop rbx; pop rbp; ret;
0x0012bfe9: add [rax], al; add rsp, 0xb8; pop rbx; pop rbp; ret;
0x0012bfeb: add rsp, 0xb8; pop rbx; pop rbp; ret;
0x0012bfec: add esp, 0xb8; pop rbx; pop rbp; ret;
0x0012bfee: mov eax, 0x5b000000; pop rbp; ret;
0x0012bfef: add [rax], al; add [rbx+0x5d], bl; ret;
0x0012bff0: add [rax], al; pop rbx; pop rbp; ret;
0x0012bff1: add [rbx+0x5d], bl; ret;
0x0012bff7: add [rax-0x75], cl; cmp ebp, ebx; ret;
0x0012bffa: cmp ebp, ebx; ret;
0x0012c029: fist dword ptr [rdx-0x76b70011], st; ret;
0x0012c02a: xchg edx, eax; out dx, eax; dec dword ptr [rax-0x77]; ret;
0x0012c048: nop [rax+rax]; mov rdx, [rdi+8]; mov [rsp], rax; call qword ptr [rdx+0x20];
0x0012c04a: test [rax], al; add [rax], al; add [rax], al; mov rdx, [rdi+8]; mov [rsp], rax; call qword ptr [rdx+0x20];
0x0012c04c: add [rax], al; add [rax], al; mov rdx, [rdi+8]; mov [rsp], rax; call qword ptr [rdx+0x20];
0x0012c04d: add [rax], al; add [rax-0x75], cl; push rdi; or [rax-0x77], cl; add al, 0x24; call qword ptr [rdx+0x20];
0x0012c04e: add [rax], al; mov rdx, [rdi+8]; mov [rsp], rax; call qword ptr [rdx+0x20];
0x0012c04f: add [rax-0x75], cl; push rdi; or [rax-0x77], cl; add al, 0x24; call qword ptr [rdx+0x20];
0x0012c050: mov rdx, [rdi+8]; mov [rsp], rax; call qword ptr [rdx+0x20];
0x0012c051: mov edx, [rdi+8]; mov [rsp], rax; call qword ptr [rdx+0x20];
0x0012c052: push rdi; or [rax-0x77], cl; add al, 0x24; call qword ptr [rdx+0x20];
0x0012c053: or [rax-0x77], cl; add al, 0x24; call qword ptr [rdx+0x20];
0x0012c054: mov [rsp], rax; call qword ptr [rdx+0x20];
0x0012c055: mov [rsp], eax; call qword ptr [rdx+0x20];
0x0012c056: add al, 0x24; call qword ptr [rdx+0x20];
0x0012c058: call qword ptr [rdx+0x20];
0x0012c0e0: add [rcx+rcx*4-0x1e], cl; push 0x1e; mov r9, r15; mov r8, rbx; mov rsi, rbp; call qword ptr [rax];
0x0012c0e1: mov rdx, r12; push 0x1e; mov r9, r15; mov r8, rbx; mov rsi, rbp; call qword ptr [rax];
0x0012c0e2: mov edx, esp; push 0x1e; mov r9, r15; mov r8, rbx; mov rsi, rbp; call qword ptr [rax];
0x0012c0e4: push 0x1e; mov r9, r15; mov r8, rbx; mov rsi, rbp; call qword ptr [rax];
0x0012c0e6: mov r9, r15; mov r8, rbx; mov rsi, rbp; call qword ptr [rax];
0x0012c0e7: mov ecx, edi; mov r8, rbx; mov rsi, rbp; call qword ptr [rax];
0x0012c0e8: stc; mov r8, rbx; mov rsi, rbp; call qword ptr [rax];
0x0012c0e9: mov r8, rbx; mov rsi, rbp; call qword ptr [rax];
0x0012c0ea: mov eax, ebx; mov rsi, rbp; call qword ptr [rax];
0x0012c0eb: fmul st, dword ptr [rax-0x77]; out dx, al; call qword ptr [rax];
0x0012c0ec: mov rsi, rbp; call qword ptr [rax];
0x0012c0ed: mov esi, ebp; call qword ptr [rax];
0x0012c0ee: out dx, al; call qword ptr [rax];
0x0012c17d: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x97dd2]; syscall;
0x0012c17e: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x97dd2]; syscall;
0x0012c17f: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x97dd2]; syscall;
0x0012c180: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x97dd2]; syscall;
0x0012c181: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x97dd2]; syscall;
0x0012c182: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x97dd2]; syscall;
0x0012c183: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x97dd2]; syscall;
0x0012c184: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x97dd2]; syscall;
0x0012c185: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x97dd2]; syscall;
0x0012c186: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x97dd2; syscall;
0x0012c187: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0x97dd2]; syscall;
0x0012c188: add [rax], al; mov eax, 0xca; lea rdi, [rip+0x97dd2]; syscall;
0x0012c189: add [rax+0xca], bh; lea rdi, [rip+0x97dd2]; syscall;
0x0012c18a: mov eax, 0xca; lea rdi, [rip+0x97dd2]; syscall;
0x0012c18c: add [rax], al; add [rax-0x73], cl; cmp eax, 0x97dd2; syscall;
0x0012c18d: add [rax], al; lea rdi, [rip+0x97dd2]; syscall;
0x0012c18e: add [rax-0x73], cl; cmp eax, 0x97dd2; syscall;
0x0012c18f: lea rdi, [rip+0x97dd2]; syscall;
0x0012c190: lea edi, [rip+0x97dd2]; syscall;
0x0012c191: cmp eax, 0x97dd2; syscall;
0x0012c194: or [rax], eax; syscall;
0x0012c1f0: add [rax], al; add [rbp+0x12], dh; add rsp, 0x18; ret;
0x0012c1f2: add [rbp+0x12], dh; add rsp, 0x18; ret;
0x0012c267: add [rax], al; add [rbp+0x18], dh; add rsp, 0x88; ret;
0x0012c269: add [rbp+0x18], dh; add rsp, 0x88; ret;
0x0012c26c: add rsp, 0x88; ret;
0x0012c26d: add esp, 0x88; ret;
0x0012c26f: mov [rax], al; add [rax], al; ret;
0x0012c311: adc edi, esi; jmp qword ptr [rsi+0x66];
0x0012c388: add [rax], al; add [rbp+0x12], dh; add rsp, 0x30; pop rbx; ret;
0x0012c38a: add [rbp+0x12], dh; add rsp, 0x30; pop rbx; ret;
0x0012c38d: add rsp, 0x30; pop rbx; ret;
0x0012c38e: add esp, 0x30; pop rbx; ret;
0x0012c3a1: adc bh, dh; jmp qword ptr [rsi+0x66];
0x0012c43f: add al, ch; mov ebx, 0x48fff9fc; lea esi, [rsp+0x10]; mov edi, eax; call rbp;
0x0012c441: mov ebx, 0x48fff9fc; lea esi, [rsp+0x10]; mov edi, eax; call rbp;
0x0012c4f1: add [rax], al; add [rbp+0x31], dh; add rsp, 0x48; pop rbx; pop rbp; ret;
0x0012c4f3: add [rbp+0x31], dh; add rsp, 0x48; pop rbx; pop rbp; ret;
0x0012c4f6: add rsp, 0x48; pop rbx; pop rbp; ret;
0x0012c4f7: add esp, 0x48; pop rbx; pop rbp; ret;
0x0012c505: lea rsi, [rsp+0x10]; mov edi, eax; call rbp;
0x0012c506: lea esi, [rsp+0x10]; mov edi, eax; call rbp;
0x0012c508: and al, 0x10; mov edi, eax; call rbp;
0x0012c50a: mov edi, eax; call rbp;
0x0012c595: idiv edi; call far fword ptr [rcx+0x5e];
0x0012c597: call far fword ptr [rcx+0x5e];
0x0012c5b1: push qword ptr [rip+0x65f59]; mov esi, 4; mov rdi, rbp; lea r8, [rip-0x9046]; lea rdx, [rip+0x2e33]; call qword ptr [rax];
0x0012c5b2: xor eax, 0x65f59; mov esi, 4; mov rdi, rbp; lea r8, [rip-0x9046]; lea rdx, [rip+0x2e33]; call qword ptr [rax];
0x0012c5b6: add [rsi+4], bh; mov rdi, rbp; lea r8, [rip-0x9046]; lea rdx, [rip+0x2e33]; call qword ptr [rax];
0x0012c5b7: mov esi, 4; mov rdi, rbp; lea r8, [rip-0x9046]; lea rdx, [rip+0x2e33]; call qword ptr [rax];
0x0012c5b8: add al, 0; add [rax], al; mov rdi, rbp; lea r8, [rip-0x9046]; lea rdx, [rip+0x2e33]; call qword ptr [rax];
0x0012c5b9: add [rax], al; add [rax-0x77], cl; out dx, eax; lea r8, [rip-0x9046]; lea rdx, [rip+0x2e33]; call qword ptr [rax];
0x0012c5ba: add [rax], al; mov rdi, rbp; lea r8, [rip-0x9046]; lea rdx, [rip+0x2e33]; call qword ptr [rax];
0x0012c5bb: add [rax-0x77], cl; out dx, eax; lea r8, [rip-0x9046]; lea rdx, [rip+0x2e33]; call qword ptr [rax];
0x0012c5bc: mov rdi, rbp; lea r8, [rip-0x9046]; lea rdx, [rip+0x2e33]; call qword ptr [rax];
0x0012c5bd: mov edi, ebp; lea r8, [rip-0x9046]; lea rdx, [rip+0x2e33]; call qword ptr [rax];
0x0012c5be: out dx, eax; lea r8, [rip-0x9046]; lea rdx, [rip+0x2e33]; call qword ptr [rax];
0x0012c5bf: lea r8, [rip-0x9046]; lea rdx, [rip+0x2e33]; call qword ptr [rax];
0x0012c5c0: lea eax, [rip-0x9046]; lea rdx, [rip+0x2e33]; call qword ptr [rax];
0x0012c5c1: add eax, 0xffff6fba; lea rdx, [rip+0x2e33]; call qword ptr [rax];
0x0012c5c2: mov edx, 0x48ffff6f; lea edx, [rip+0x2e33]; call qword ptr [rax];
0x0012c5c5: dec dword ptr [rax-0x73]; adc eax, 0x2e33; call qword ptr [rax];
0x0012c5c6: lea rdx, [rip+0x2e33]; call qword ptr [rax];
0x0012c5c7: lea edx, [rip+0x2e33]; call qword ptr [rax];
0x0012c5c8: adc eax, 0x2e33; call qword ptr [rax];
0x0012c5c9: xor ebp, [rsi]; add [rax], al; call qword ptr [rax];
0x0012c5ca: add [rax], al; call qword ptr [rax];
0x0012c5cb: add [rax], al; call qword ptr [rax];
0x0012c5cf: mov rdi, rbp; mov ebx, eax; pop rax; mov rax, [rbp+8]; pop rdx; call qword ptr [rax+0x20];
0x0012c5d0: mov edi, ebp; mov ebx, eax; pop rax; mov rax, [rbp+8]; pop rdx; call qword ptr [rax+0x20];
0x0012c5d1: out dx, eax; mov ebx, eax; pop rax; mov rax, [rbp+8]; pop rdx; call qword ptr [rax+0x20];
0x0012c5d2: mov ebx, eax; pop rax; mov rax, [rbp+8]; pop rdx; call qword ptr [rax+0x20];
0x0012c5d4: pop rax; mov rax, [rbp+8]; pop rdx; call qword ptr [rax+0x20];
0x0012c5d5: mov rax, [rbp+8]; pop rdx; call qword ptr [rax+0x20];
0x0012c5d6: mov eax, [rbp+8]; pop rdx; call qword ptr [rax+0x20];
0x0012c5d9: pop rdx; call qword ptr [rax+0x20];
0x0012c5fa: add [rax], al; add [rbp+0xe], dh; add rsp, 0x38; pop rbx; pop rbp; ret;
0x0012c5fc: add [rbp+0xe], dh; add rsp, 0x38; pop rbx; pop rbp; ret;
0x0012c5ff: add rsp, 0x38; pop rbx; pop rbp; ret;
0x0012c600: add esp, 0x38; pop rbx; pop rbp; ret;
0x0012c602: cmp [rbx+0x5d], bl; ret;
0x0012c60f: adc dh, bh; jmp qword ptr [rsi+0x66];
0x0012c679: add [rax], al; add [rbp+5], dh; add rsp, 0x18; ret;
0x0012c67b: add [rbp+5], dh; add rsp, 0x18; ret;
0x0012c67d: add eax, 0x18c48348; ret;
0x0012c6e9: add [rax], al; add [rbp+0x11], dh; add rsp, 0x20; pop rbx; ret;
0x0012c6eb: add [rbp+0x11], dh; add rsp, 0x20; pop rbx; ret;
0x0012c6ee: add rsp, 0x20; pop rbx; ret;
0x0012c6ef: add esp, 0x20; pop rbx; ret;
0x0012c730: shl byte ptr [rsi+rcx+0x49], 0x8b; cmp [rcx+rcx*4-0x39], cl; call qword ptr [rax+0x20];
0x0012c733: mov rax, [r8+0x38]; mov rdi, r8; call qword ptr [rax+0x20];
0x0012c734: mov eax, [rax+0x38]; mov rdi, r8; call qword ptr [rax+0x20];
0x0012c736: cmp [rcx+rcx*4-0x39], cl; call qword ptr [rax+0x20];
0x0012c737: mov rdi, r8; call qword ptr [rax+0x20];
0x0012c738: mov edi, eax; call qword ptr [rax+0x20];
0x0012c73d: mov rdi, [rbp]; mov rax, [rdi+8]; call qword ptr [rax+0x20];
0x0012c73e: mov edi, [rbp]; mov rax, [rdi+8]; call qword ptr [rax+0x20];
0x0012c741: mov rax, [rdi+8]; call qword ptr [rax+0x20];
0x0012c742: mov eax, [rdi+8]; call qword ptr [rax+0x20];
0x0012c751: nop [rax]; pop rbp; ret;
0x0012c753: add byte ptr [rax], 0; add [rax], al; pop rbp; ret;
0x0012c754: add [rax], al; add [rax], al; pop rbp; ret;
0x0012c756: add [rax], al; pop rbp; ret;
0x0012c7ce: add [rbp+0x69], dh; add rsp, 0x110; pop rbx; pop rbp; pop r12; ret;
0x0012c7d0: imul ecx, [rax-0x7f], 0x110c4; add [rbx+0x5d], bl; pop r12; ret;
0x0012c7d1: add rsp, 0x110; pop rbx; pop rbp; pop r12; ret;
0x0012c7d2: add esp, 0x110; pop rbx; pop rbp; pop r12; ret;
0x0012c7d4: adc [rcx], al; add [rax], al; pop rbx; pop rbp; pop r12; ret;
0x0012c7d5: add [rax], eax; add [rbx+0x5d], bl; pop r12; ret;
0x0012c83e: call qword ptr [rax+0x55415641];
0x0012c890: out 0xe8, eax; stosb [rdi]; mov bh, ch; dec dword ptr [rax-0x77]; ret;
0x0012c892: stosb [rdi]; mov bh, ch; dec dword ptr [rax-0x77]; ret;
0x0012c893: mov bh, ch; dec dword ptr [rax-0x77]; ret;
0x0012c91c: mov al, [0x5d5bc08944000000]; pop r12; pop r13; pop r14; ret;
0x0012c922: rcr byte ptr [rbx+0x5d], 0x41; pop rsp; pop r13; pop r14; ret;
0x0012ca55: mov rdi, [rsp+8]; mov r8, r13; mov rcx, r12; mov rdx, rbp; mov rsi, rbx; call rax;
0x0012ca56: mov edi, [rsp+8]; mov r8, r13; mov rcx, r12; mov rdx, rbp; mov rsi, rbx; call rax;
0x0012ca58: and al, 8; mov r8, r13; mov rcx, r12; mov rdx, rbp; mov rsi, rbx; call rax;
0x0012ca5a: mov r8, r13; mov rcx, r12; mov rdx, rbp; mov rsi, rbx; call rax;
0x0012ca5b: mov eax, ebp; mov rcx, r12; mov rdx, rbp; mov rsi, rbx; call rax;
0x0012ca5d: mov rcx, r12; mov rdx, rbp; mov rsi, rbx; call rax;
0x0012ca5e: mov ecx, esp; mov rdx, rbp; mov rsi, rbx; call rax;
0x0012ca60: mov rdx, rbp; mov rsi, rbx; call rax;
0x0012ca61: mov edx, ebp; mov rsi, rbx; call rax;
0x0012ca63: mov rsi, rbx; call rax;
0x0012ca64: mov esi, ebx; call rax;
0x0012caa7: imul ecx, [rax-0x7d], 0x5d5b38c4; pop r12; pop r13; pop r14; pop r15; ret;
0x0012cb13: or edi, esi; jmp qword ptr [rsi+0x2e];
0x0012cb57: add [rsi+0xe], bh; pop rbx; xor eax, eax; pop rbp; pop r12; ret;
0x0012cb76: mov byte ptr [r12+rbx], 0; mov eax, 1; pop rbx; pop rbp; pop r12; ret;
0x0012cb77: mov byte ptr [rsp+rbx], 0; mov eax, 1; pop rbx; pop rbp; pop r12; ret;
0x0012cb78: add al, 0x1c; add [rax+1], bh; pop rbx; pop rbp; pop r12; ret;
0x0012cb79: sbb al, 0; mov eax, 1; pop rbx; pop rbp; pop r12; ret;
0x0012cb7a: add [rax+1], bh; pop rbx; pop rbp; pop r12; ret;
0x0012cc01: add [rbp+0x24], dh; add rsp, 0x28; mov eax, r12d; pop rbp; pop r12; ret;
0x0012cc03: and al, 0x48; add esp, 0x28; mov eax, r12d; pop rbp; pop r12; ret;
0x0012cc04: add rsp, 0x28; mov eax, r12d; pop rbp; pop r12; ret;
0x0012cc05: add esp, 0x28; mov eax, r12d; pop rbp; pop r12; ret;
0x0012cc07: sub [rcx+rcx*4-0x20], al; pop rbp; pop r12; ret;
0x0012cc79: jmp qword ptr [rsi+0x44];
0x0012ccae: call far fword ptr [rsi+0x5f];
0x0012cd01: mov [rsp+0x40], rax; mov rax, [r14+8]; push r13; push r12; lea r9, [rsp+0x3a]; call qword ptr [rax];
0x0012cd02: mov [rsp+0x40], eax; mov rax, [r14+8]; push r13; push r12; lea r9, [rsp+0x3a]; call qword ptr [rax];
0x0012cd04: and al, 0x40; mov rax, [r14+8]; push r13; push r12; lea r9, [rsp+0x3a]; call qword ptr [rax];
0x0012cd06: mov rax, [r14+8]; push r13; push r12; lea r9, [rsp+0x3a]; call qword ptr [rax];
0x0012cd07: mov eax, [rsi+8]; push r13; push r12; lea r9, [rsp+0x3a]; call qword ptr [rax];
0x0012cd08: or [rcx+0x55], r8b; push r12; lea r9, [rsp+0x3a]; call qword ptr [rax];
0x0012cd09: or [rcx+0x55], al; push r12; lea r9, [rsp+0x3a]; call qword ptr [rax];
0x0012cd0a: push r13; push r12; lea r9, [rsp+0x3a]; call qword ptr [rax];
0x0012cd0b: push rbp; push r12; lea r9, [rsp+0x3a]; call qword ptr [rax];
0x0012cd0c: push r12; lea r9, [rsp+0x3a]; call qword ptr [rax];
0x0012cd0d: push rsp; lea r9, [rsp+0x3a]; call qword ptr [rax];
0x0012cd0e: lea r9, [rsp+0x3a]; call qword ptr [rax];
0x0012cd0f: lea ecx, [rsp+0x3a]; call qword ptr [rax];
0x0012cd11: and al, 0x3a; call qword ptr [rax];
0x0012cd1d: sbb [rax+0x49], dh; mov edx, [rsi+8]; mov dword ptr [r10], 0xe; lea rsi, [r10+8]; mov rdi, r14; call qword ptr [rdx+0x10];
0x0012cd20: mov rdx, [r14+8]; mov dword ptr [r10], 0xe; lea rsi, [r10+8]; mov rdi, r14; call qword ptr [rdx+0x10];
0x0012cd21: mov edx, [rsi+8]; mov dword ptr [r10], 0xe; lea rsi, [r10+8]; mov rdi, r14; call qword ptr [rdx+0x10];
0x0012cd24: mov dword ptr [r10], 0xe; lea rsi, [r10+8]; mov rdi, r14; call qword ptr [rdx+0x10];
0x0012cd25: mov dword ptr [rdx], 0xe; lea rsi, [r10+8]; mov rdi, r14; call qword ptr [rdx+0x10];
0x0012cd29: add [rax], al; lea rsi, [r10+8]; mov rdi, r14; call qword ptr [rdx+0x10];
0x0012cd2b: lea rsi, [r10+8]; mov rdi, r14; call qword ptr [rdx+0x10];
0x0012cd2c: lea esi, [rdx+8]; mov rdi, r14; call qword ptr [rdx+0x10];
0x0012cd2e: or [rcx+rcx*4-9], cl; call qword ptr [rdx+0x10];
0x0012cd2f: mov rdi, r14; call qword ptr [rdx+0x10];
0x0012cd30: mov edi, esi; call qword ptr [rdx+0x10];
0x0012cd31: idiv edi; push rdx; adc [rcx-0x75], cl; or [rcx+r9*4-9], r9b; call qword ptr [rax+0x20];
0x0012cd32: call qword ptr [rdx+0x10];
0x0012cd33: push rdx; adc [rcx-0x75], cl; or [rcx+r9*4-9], r9b; call qword ptr [rax+0x20];
0x0012cd34: adc [rcx-0x75], cl; or [rcx+r9*4-9], r9b; call qword ptr [rax+0x20];
0x0012cd35: mov rax, [r14+8]; mov rdi, r14; call qword ptr [rax+0x20];
0x0012cd36: mov eax, [rsi+8]; mov rdi, r14; call qword ptr [rax+0x20];
0x0012cd37: or [rcx+r9*4-9], r9b; call qword ptr [rax+0x20];
0x0012cd38: or [rcx+rcx*4-9], cl; call qword ptr [rax+0x20];
0x0012cd39: mov rdi, r14; call qword ptr [rax+0x20];
0x0012cd3a: mov edi, esi; call qword ptr [rax+0x20];
0x0012cd6b: push 0x5c415d5b; pop r13; pop r14; pop r15; ret;
0x0012cdde: or dh, bh; jmp qword ptr [rsi+0x66];
0x0012ce01: nop [rax+rax]; nop [rax+rax]; mov rax, [rip+0x90f89]; lea rdx, [rip+0x97182]; mov fs:[rax], rdx; ret;
0x0012ce02: nop [rax+rax]; nop [rax+rax]; mov rax, [rip+0x90f89]; lea rdx, [rip+0x97182]; mov fs:[rax], rdx; ret;
0x0012ce03: nop [rax+rax]; nop [rax+rax]; mov rax, [rip+0x90f89]; lea rdx, [rip+0x97182]; mov fs:[rax], rdx; ret;
0x0012ce09: add [rax], al; nop [rax+rax]; mov rax, [rip+0x90f89]; lea rdx, [rip+0x97182]; mov fs:[rax], rdx; ret;
0x0012ce0b: nop [rax+rax]; mov rax, [rip+0x90f89]; lea rdx, [rip+0x97182]; mov fs:[rax], rdx; ret;
0x0012ce0d: add [rax], r8b; mov rax, [rip+0x90f89]; lea rdx, [rip+0x97182]; mov fs:[rax], rdx; ret;
0x0012ce0e: add [rax], al; mov rax, [rip+0x90f89]; lea rdx, [rip+0x97182]; mov fs:[rax], rdx; ret;
0x0012ce0f: add [rax-0x75], cl; add eax, 0x90f89; lea rdx, [rip+0x97182]; mov fs:[rax], rdx; ret;
0x0012ce10: mov rax, [rip+0x90f89]; lea rdx, [rip+0x97182]; mov fs:[rax], rdx; ret;
0x0012ce11: mov eax, [rip+0x90f89]; lea rdx, [rip+0x97182]; mov fs:[rax], rdx; ret;
0x0012ce12: add eax, 0x90f89; lea rdx, [rip+0x97182]; mov fs:[rax], rdx; ret;
0x0012ce13: mov [rdi], ecx; or [rax], eax; lea rdx, [rip+0x97182]; mov fs:[rax], rdx; ret;
0x0012ce14: wbinvd; add [rax-0x73], cl; adc eax, 0x97182; mov fs:[rax], rdx; ret;
0x0012ce15: or [rax], eax; lea rdx, [rip+0x97182]; mov fs:[rax], rdx; ret;
0x0012ce16: add [rax-0x73], cl; adc eax, 0x97182; mov fs:[rax], rdx; ret;
0x0012ce17: lea rdx, [rip+0x97182]; mov fs:[rax], rdx; ret;
0x0012ce18: lea edx, [rip+0x97182]; mov fs:[rax], rdx; ret;
0x0012ce19: adc eax, 0x97182; mov fs:[rax], rdx; ret;
0x0012ce1c: or [rax], eax; mov fs:[rax], rdx; ret;
0x0012ce1e: mov fs:[rax], rdx; ret;
0x0012ce1f: mov [rax], rdx; ret;
0x0012ce20: mov [rax], edx; ret;
0x0012ceb9: pop rbx; test bh, ch; jmp qword ptr [rax+rcx*2-0x39];
0x0012ceba: test bh, ch; jmp qword ptr [rax+rcx*2-0x39];
0x0012cebb: out dx, eax; jmp qword ptr [rax+rcx*2-0x39];
0x0012cebc: jmp qword ptr [rax+rcx*2-0x39];
0x0012cebd: mov qword ptr fs:[rbx], 0; add rsp, 8; pop rbx; pop rbp; ret;
0x0012cebe: mov qword ptr [rbx], 0; add rsp, 8; pop rbx; pop rbp; ret;
0x0012cebf: mov dword ptr [rbx], 0; add rsp, 8; pop rbx; pop rbp; ret;
0x0012cec1: add [rax], al; add [rax], al; add rsp, 8; pop rbx; pop rbp; ret;
0x0012cec3: add [rax], al; add rsp, 8; pop rbx; pop rbp; ret;
0x0012cedb: mov rax, [rip+0x948be]; lea rsi, [rip-0xd9]; lea rdi, [rip+0x97090]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0012cedc: mov eax, [rip+0x948be]; lea rsi, [rip-0xd9]; lea rdi, [rip+0x97090]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0012cedd: add eax, 0x948be; lea rsi, [rip-0xd9]; lea rdi, [rip+0x97090]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0012cede: mov esi, 0x48000948; lea esi, [rip-0xd9]; lea rdi, [rip+0x97090]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0012cedf: or [rax], rax; lea rsi, [rip-0xd9]; lea rdi, [rip+0x97090]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0012cee0: or [rax], eax; lea rsi, [rip-0xd9]; lea rdi, [rip+0x97090]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0012cee1: add [rax-0x73], cl; xor eax, 0xffffff27; lea rdi, [rip+0x97090]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0012cee2: lea rsi, [rip-0xd9]; lea rdi, [rip+0x97090]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0012cee3: lea esi, [rip-0xd9]; lea rdi, [rip+0x97090]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0012cee4: xor eax, 0xffffff27; lea rdi, [rip+0x97090]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0012cee8: dec dword ptr [rax-0x73]; cmp eax, 0x97090; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0012cee9: lea rdi, [rip+0x97090]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0012ceea: lea edi, [rip+0x97090]; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0012ceeb: cmp eax, 0x97090; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0012ceee: or [rax], eax; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x0012ceef: add [rax-0x3f], cl; enter 0x6411, 0x48; xor eax, [0x30]; call rax;
0x0012cf22: mov rdx, [rip+0x90e77]; lea rax, [rip+0x97070]; mov fs:[rdx], rax; pop rbx; mov dword ptr [rip+0x97041], 2; ret;
0x0012cf23: mov edx, [rip+0x90e77]; lea rax, [rip+0x97070]; mov fs:[rdx], rax; pop rbx; mov dword ptr [rip+0x97041], 2; ret;
0x0012cf24: adc eax, 0x90e77; lea rax, [rip+0x97070]; mov fs:[rdx], rax; pop rbx; mov dword ptr [rip+0x97041], 2; ret;
0x0012cf27: or [rax], eax; lea rax, [rip+0x97070]; mov fs:[rdx], rax; pop rbx; mov dword ptr [rip+0x97041], 2; ret;
0x0012cf28: add [rax-0x73], cl; add eax, 0x97070; mov fs:[rdx], rax; pop rbx; mov dword ptr [rip+0x97041], 2; ret;
0x0012cf29: lea rax, [rip+0x97070]; mov fs:[rdx], rax; pop rbx; mov dword ptr [rip+0x97041], 2; ret;
0x0012cf2a: lea eax, [rip+0x97070]; mov fs:[rdx], rax; pop rbx; mov dword ptr [rip+0x97041], 2; ret;
0x0012cf2b: add eax, 0x97070; mov fs:[rdx], rax; pop rbx; mov dword ptr [rip+0x97041], 2; ret;
0x0012cf2e: or [rax], eax; mov fs:[rdx], rax; pop rbx; mov dword ptr [rip+0x97041], 2; ret;
0x0012cf2f: add [rax+rcx*2-0x77], ah; add bl, [rbx-0x39]; add eax, 0x97041; add al, [rax]; add [rax], al; ret;
0x0012cf30: mov fs:[rdx], rax; pop rbx; mov dword ptr [rip+0x97041], 2; ret;
0x0012cf31: mov [rdx], rax; pop rbx; mov dword ptr [rip+0x97041], 2; ret;
0x0012cf32: mov [rdx], eax; pop rbx; mov dword ptr [rip+0x97041], 2; ret;
0x0012cf33: add bl, [rbx-0x39]; add eax, 0x97041; add al, [rax]; add [rax], al; ret;
0x0012cf34: pop rbx; mov dword ptr [rip+0x97041], 2; ret;
0x0012cf35: mov dword ptr [rip+0x97041], 2; ret;
0x0012cf36: add eax, 0x97041; add al, [rax]; add [rax], al; ret;
0x0012cf39: or [rax], eax; add al, [rax]; add [rax], al; ret;
0x0012cf49: add al, ch; rol dword ptr [rdx-0x7ab70011], 1; shl byte ptr [rbx+rdi*4+0x64], 0x48; mov [rbx], eax; pop rbx; ret;
0x0012cf4b: rol dword ptr [rdx-0x7ab70011], 1; shl byte ptr [rbx+rdi*4+0x64], 0x48; mov [rbx], eax; pop rbx; ret;
0x0012cf4d: out dx, eax; dec dword ptr [rax-0x7b]; shl byte ptr [rbx+rdi*4+0x64], 0x48; mov [rbx], eax; pop rbx; ret;
0x0012cf4e: dec dword ptr [rax-0x7b]; shl byte ptr [rbx+rdi*4+0x64], 0x48; mov [rbx], eax; pop rbx; ret;
0x0012cf51: shl byte ptr [rbx+rdi*4+0x64], 0x48; mov [rbx], eax; pop rbx; ret;
0x0012cf53: mov ebx, 0x3894864; pop rbx; ret;
0x0012cf54: mov fs:[rbx], rax; pop rbx; ret;
0x0012cf55: mov [rbx], rax; pop rbx; ret;
0x0012cf56: mov [rbx], eax; pop rbx; ret;
0x0012cf94: lea rdx, [rip+0x97005]; cmp rax, rdx; lea rdx, [rip+0x96d7b]; cmove rax, rdx; add rsp, 8; ret;
0x0012cf95: lea edx, [rip+0x97005]; cmp rax, rdx; lea rdx, [rip+0x96d7b]; cmove rax, rdx; add rsp, 8; ret;
0x0012cf96: adc eax, 0x97005; cmp rax, rdx; lea rdx, [rip+0x96d7b]; cmove rax, rdx; add rsp, 8; ret;
0x0012cf97: add eax, 0x48000970; cmp eax, edx; lea rdx, [rip+0x96d7b]; cmove rax, rdx; add rsp, 8; ret;
0x0012cf99: or [rax], eax; cmp rax, rdx; lea rdx, [rip+0x96d7b]; cmove rax, rdx; add rsp, 8; ret;
0x0012cf9a: add [rax+0x39], cl; ror byte ptr [rax-0x73], 1; adc eax, 0x96d7b; cmove rax, rdx; add rsp, 8; ret;
0x0012cf9b: cmp rax, rdx; lea rdx, [rip+0x96d7b]; cmove rax, rdx; add rsp, 8; ret;
0x0012cf9c: cmp eax, edx; lea rdx, [rip+0x96d7b]; cmove rax, rdx; add rsp, 8; ret;
0x0012cf9d: ror byte ptr [rax-0x73], 1; adc eax, 0x96d7b; cmove rax, rdx; add rsp, 8; ret;
0x0012cf9e: lea rdx, [rip+0x96d7b]; cmove rax, rdx; add rsp, 8; ret;
0x0012cf9f: lea edx, [rip+0x96d7b]; cmove rax, rdx; add rsp, 8; ret;
0x0012cfa0: adc eax, 0x96d7b; cmove rax, rdx; add rsp, 8; ret;
0x0012cfa2: insd [rdi], dx; or [rax], eax; cmove rax, rdx; add rsp, 8; ret;
0x0012cfa3: or [rax], eax; cmove rax, rdx; add rsp, 8; ret;
0x0012cfa5: cmove rax, rdx; add rsp, 8; ret;
0x0012cfa6: cmove eax, edx; add rsp, 8; ret;
0x0012cfdb: lea rdx, [rax+0x80]; cmp rax, rcx; lea rax, [rip+0x96d14]; cmovne rax, rdx; add rsp, 8; ret;
0x0012cfdc: lea edx, [rax+0x80]; cmp rax, rcx; lea rax, [rip+0x96d14]; cmovne rax, rdx; add rsp, 8; ret;
0x0012cfe0: add [rax], al; cmp rax, rcx; lea rax, [rip+0x96d14]; cmovne rax, rdx; add rsp, 8; ret;
0x0012cfe2: cmp rax, rcx; lea rax, [rip+0x96d14]; cmovne rax, rdx; add rsp, 8; ret;
0x0012cfe3: cmp eax, ecx; lea rax, [rip+0x96d14]; cmovne rax, rdx; add rsp, 8; ret;
0x0012cfe4: enter 0x8d48, 5; adc al, 0x6d; or [rax], eax; cmovne rax, rdx; add rsp, 8; ret;
0x0012cfe5: lea rax, [rip+0x96d14]; cmovne rax, rdx; add rsp, 8; ret;
0x0012cfe6: lea eax, [rip+0x96d14]; cmovne rax, rdx; add rsp, 8; ret;
0x0012cfe7: add eax, 0x96d14; cmovne rax, rdx; add rsp, 8; ret;
0x0012cfe8: adc al, 0x6d; or [rax], eax; cmovne rax, rdx; add rsp, 8; ret;
0x0012cfe9: insd [rdi], dx; or [rax], eax; cmovne rax, rdx; add rsp, 8; ret;
0x0012d01b: lea rdx, [rax+0xa0]; cmp rax, rcx; lea rax, [rip+0x96cbc]; cmovne rax, rdx; add rsp, 8; ret;
0x0012d01c: lea edx, [rax+0xa0]; cmp rax, rcx; lea rax, [rip+0x96cbc]; cmovne rax, rdx; add rsp, 8; ret;
0x0012d01d: nop; mov al, [0x8d48c83948000000]; add eax, 0x96cbc; cmovne rax, rdx; add rsp, 8; ret;
0x0012d01e: mov al, [0x8d48c83948000000]; add eax, 0x96cbc; cmovne rax, rdx; add rsp, 8; ret;
0x0012d020: add [rax], al; cmp rax, rcx; lea rax, [rip+0x96cbc]; cmovne rax, rdx; add rsp, 8; ret;
0x0012d021: add [rax+0x39], cl; enter 0x8d48, 5; mov esp, 0x4800096c; cmovne eax, edx; add rsp, 8; ret;
0x0012d022: cmp rax, rcx; lea rax, [rip+0x96cbc]; cmovne rax, rdx; add rsp, 8; ret;
0x0012d023: cmp eax, ecx; lea rax, [rip+0x96cbc]; cmovne rax, rdx; add rsp, 8; ret;
0x0012d024: enter 0x8d48, 5; mov esp, 0x4800096c; cmovne eax, edx; add rsp, 8; ret;
0x0012d025: lea rax, [rip+0x96cbc]; cmovne rax, rdx; add rsp, 8; ret;
0x0012d026: lea eax, [rip+0x96cbc]; cmovne rax, rdx; add rsp, 8; ret;
0x0012d027: add eax, 0x96cbc; cmovne rax, rdx; add rsp, 8; ret;
0x0012d028: mov esp, 0x4800096c; cmovne eax, edx; add rsp, 8; ret;
0x0012d05b: lea rdx, [rax+0xa8]; cmp rax, rcx; lea rax, [rip+0x96c74]; cmovne rax, rdx; add rsp, 8; ret;
0x0012d05c: lea edx, [rax+0xa8]; cmp rax, rcx; lea rax, [rip+0x96c74]; cmovne rax, rdx; add rsp, 8; ret;
0x0012d060: add [rax], al; cmp rax, rcx; lea rax, [rip+0x96c74]; cmovne rax, rdx; add rsp, 8; ret;
0x0012d062: cmp rax, rcx; lea rax, [rip+0x96c74]; cmovne rax, rdx; add rsp, 8; ret;
0x0012d063: cmp eax, ecx; lea rax, [rip+0x96c74]; cmovne rax, rdx; add rsp, 8; ret;
0x0012d065: lea rax, [rip+0x96c74]; cmovne rax, rdx; add rsp, 8; ret;
0x0012d066: lea eax, [rip+0x96c74]; cmovne rax, rdx; add rsp, 8; ret;
0x0012d067: add eax, 0x96c74; cmovne rax, rdx; add rsp, 8; ret;
0x0012d069: insb [rdi], dx; or [rax], eax; cmovne rax, rdx; add rsp, 8; ret;
0x0012d06a: or [rax], eax; cmovne rax, rdx; add rsp, 8; ret;
0x0012d093: dec dword ptr [rax-0x7d]; mov eax, 0xe0; add [rax-0x77], cl; ret;
0x0012d096: mov eax, 0xe0; add [rax-0x77], cl; ret;
0x0012d0bf: ret 0xfd81;
0x0012d129: clc; push qword ptr [rbx+rdi*2-0x7d]; ret 0x3901;
0x0012d12a: push qword ptr [rbx+rdi*2-0x7d]; ret 0x3901;
0x0012d12e: ret 0x3901;
0x0012d1f2: or eax, 0x8c48348; pop rbx; pop rbp; pop r12; pop r13; ret;
0x0012d234: ror dword ptr [rax-0x39], 1; ret 0xfffe;
0x0012d23b: dec dword ptr [rax-0x2d]; ret 0x2149;
0x0012d23e: ret 0x2149;
0x0012d26d: inc dword ptr [rbp-0x75]; add gs:[rax-0x7d], cl; ret;
0x0012d270: add gs:[rax-0x7d], cl; ret;
0x0012d27b: add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret;
0x0012d27c: add esp, 8; pop rbx; pop rbp; pop r12; pop r13; ret;
0x0012d27e: or [rbx+0x5d], bl; pop r12; pop r13; ret;
0x0012d2b1: dec dword ptr [rax-0x75]; mov al, ch; add [rax], al; add [rax-0x77], cl; ret 0x8548;
0x0012d2b4: mov al, ch; add [rax], al; add [rax-0x77], cl; ret 0x8548;
0x0012d2b6: add [rax], al; add [rax-0x77], cl; ret 0x8548;
0x0012d2b8: add [rax-0x77], cl; ret 0x8548;
0x0012d3c3: out dx, eax; inc dword ptr [rbp+0x5b0775db]; pop rbp; pop r12; ret;
0x0012d3c4: inc dword ptr [rbp+0x5b0775db]; pop rbp; pop r12; ret;
0x0012d3de: call qword ptr [rax-0x177e76b8];
0x0012d422: mov rax, [rdi+8]; mov dword ptr [rsp+0x10], 0; mov dword ptr [rsp+0x30], 0; mov [rsp+0x38], rdx; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d423: mov eax, [rdi+8]; mov dword ptr [rsp+0x10], 0; mov dword ptr [rsp+0x30], 0; mov [rsp+0x38], rdx; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d426: mov dword ptr [rsp+0x10], 0; mov dword ptr [rsp+0x30], 0; mov [rsp+0x38], rdx; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d42a: add [rax], al; add [rax], al; mov dword ptr [rsp+0x30], 0; mov [rsp+0x38], rdx; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d42c: add [rax], al; mov dword ptr [rsp+0x30], 0; mov [rsp+0x38], rdx; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d42e: mov dword ptr [rsp+0x30], 0; mov [rsp+0x38], rdx; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d430: and al, 0x30; add [rax], al; add [rax], al; mov [rsp+0x38], rdx; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d432: add [rax], al; add [rax], al; mov [rsp+0x38], rdx; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d433: add [rax], al; add [rax-0x77], cl; push rsp; and al, 0x38; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d434: add [rax], al; mov [rsp+0x38], rdx; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d435: add [rax-0x77], cl; push rsp; and al, 0x38; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d436: mov [rsp+0x38], rdx; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d437: mov [rsp+0x38], edx; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d438: push rsp; and al, 0x38; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d439: and al, 0x38; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d43a: cmp [rdi], cl; adc [rsp+0x18], eax; call qword ptr [rax+0x18];
0x0012d488: mov dword ptr [rsp+0x10], 0; mov [rsp+0x28], rax; mov rax, [rdi+8]; mov dword ptr [rsp+0x30], 3; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d48e: add [rax], al; mov [rsp+0x28], rax; mov rax, [rdi+8]; mov dword ptr [rsp+0x30], 3; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d48f: add [rax-0x77], cl; and al, 0x28; mov rax, [rdi+8]; mov dword ptr [rsp+0x30], 3; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d490: mov [rsp+0x28], rax; mov rax, [rdi+8]; mov dword ptr [rsp+0x30], 3; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d491: mov [rsp+0x28], eax; mov rax, [rdi+8]; mov dword ptr [rsp+0x30], 3; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d493: and al, 0x28; mov rax, [rdi+8]; mov dword ptr [rsp+0x30], 3; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d495: mov rax, [rdi+8]; mov dword ptr [rsp+0x30], 3; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d496: mov eax, [rdi+8]; mov dword ptr [rsp+0x30], 3; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d497: or r15b, r8b; and al, 0x30; add eax, [rax]; add [rax], al; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d498: or bh, al; and al, 0x30; add eax, [rax]; add [rax], al; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d499: mov dword ptr [rsp+0x30], 3; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d49b: and al, 0x30; add eax, [rax]; add [rax], al; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d49c: xor [rbx], al; add [rax], al; add [rdi], cl; adc [rsp+0x18], eax; call qword ptr [rax+0x18];
0x0012d49d: add eax, [rax]; add [rax], al; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d4bf: pop rbp; add esi, edi; jmp qword ptr [rsi+0x66];
0x0012d4c0: add esi, edi; jmp qword ptr [rsi+0x66];
0x0012d4f8: mov dword ptr [rsp+0x10], 0; mov [rsp+0x28], rax; mov rax, [rdi+8]; mov dword ptr [rsp+0x30], 4; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d4fe: add [rax], al; mov [rsp+0x28], rax; mov rax, [rdi+8]; mov dword ptr [rsp+0x30], 4; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d4ff: add [rax-0x77], cl; and al, 0x28; mov rax, [rdi+8]; mov dword ptr [rsp+0x30], 4; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d500: mov [rsp+0x28], rax; mov rax, [rdi+8]; mov dword ptr [rsp+0x30], 4; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d501: mov [rsp+0x28], eax; mov rax, [rdi+8]; mov dword ptr [rsp+0x30], 4; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d503: and al, 0x28; mov rax, [rdi+8]; mov dword ptr [rsp+0x30], 4; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d505: mov rax, [rdi+8]; mov dword ptr [rsp+0x30], 4; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d506: mov eax, [rdi+8]; mov dword ptr [rsp+0x30], 4; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d507: or r15b, r8b; and al, 0x30; add al, 0; add [rax], al; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d508: or bh, al; and al, 0x30; add al, 0; add [rax], al; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d509: mov dword ptr [rsp+0x30], 4; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d50b: and al, 0x30; add al, 0; add [rax], al; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d50c: xor [rax+rax], al; add [rax], al; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d50d: add al, 0; add [rax], al; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d52f: in eax, dx; add dh, bh; jmp qword ptr [rsi+0x66];
0x0012d568: mov dword ptr [rsp+0x10], 0; mov [rsp+0x28], rax; mov rax, [rdi+8]; mov dword ptr [rsp+0x30], 5; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d56e: add [rax], al; mov [rsp+0x28], rax; mov rax, [rdi+8]; mov dword ptr [rsp+0x30], 5; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d56f: add [rax-0x77], cl; and al, 0x28; mov rax, [rdi+8]; mov dword ptr [rsp+0x30], 5; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d570: mov [rsp+0x28], rax; mov rax, [rdi+8]; mov dword ptr [rsp+0x30], 5; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d571: mov [rsp+0x28], eax; mov rax, [rdi+8]; mov dword ptr [rsp+0x30], 5; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d573: and al, 0x28; mov rax, [rdi+8]; mov dword ptr [rsp+0x30], 5; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d574: sub [rax-0x75], cl; or r15b, r8b; and al, 0x30; add eax, 0xf000000; adc [rsp+0x18], eax; call qword ptr [rax+0x18];
0x0012d575: mov rax, [rdi+8]; mov dword ptr [rsp+0x30], 5; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d576: mov eax, [rdi+8]; mov dword ptr [rsp+0x30], 5; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d577: or r15b, r8b; and al, 0x30; add eax, 0xf000000; adc [rsp+0x18], eax; call qword ptr [rax+0x18];
0x0012d578: or bh, al; and al, 0x30; add eax, 0xf000000; adc [rsp+0x18], eax; call qword ptr [rax+0x18];
0x0012d579: mov dword ptr [rsp+0x30], 5; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d57b: and al, 0x30; add eax, 0xf000000; adc [rsp+0x18], eax; call qword ptr [rax+0x18];
0x0012d57c: xor [rip+0xf000000], al; adc [rsp+0x18], eax; call qword ptr [rax+0x18];
0x0012d57d: add eax, 0xf000000; adc [rsp+0x18], eax; call qword ptr [rax+0x18];
0x0012d5c6: or [r9+0x48202474], r9b; mov esi, esp; mov dword ptr [rsp+8], 1; mov dword ptr [rsp+0x10], 1; mov dword ptr [rsp+0x18], 1; call qword ptr [rax+0x18];
0x0012d5c7: or [rcx+0x48202474], cl; mov esi, esp; mov dword ptr [rsp+8], 1; mov dword ptr [rsp+0x10], 1; mov dword ptr [rsp+0x18], 1; call qword ptr [rax+0x18];
0x0012d5c8: mov [rsp+0x20], esi; mov rsi, rsp; mov dword ptr [rsp+8], 1; mov dword ptr [rsp+0x10], 1; mov dword ptr [rsp+0x18], 1; call qword ptr [rax+0x18];
0x0012d5ca: and al, 0x20; mov rsi, rsp; mov dword ptr [rsp+8], 1; mov dword ptr [rsp+0x10], 1; mov dword ptr [rsp+0x18], 1; call qword ptr [rax+0x18];
0x0012d5cc: mov rsi, rsp; mov dword ptr [rsp+8], 1; mov dword ptr [rsp+0x10], 1; mov dword ptr [rsp+0x18], 1; call qword ptr [rax+0x18];
0x0012d5cd: mov esi, esp; mov dword ptr [rsp+8], 1; mov dword ptr [rsp+0x10], 1; mov dword ptr [rsp+0x18], 1; call qword ptr [rax+0x18];
0x0012d5cf: mov dword ptr [rsp+8], 1; mov dword ptr [rsp+0x10], 1; mov dword ptr [rsp+0x18], 1; call qword ptr [rax+0x18];
0x0012d5d1: and al, 8; add [rax], eax; add [rax], al; mov dword ptr [rsp+0x10], 1; mov dword ptr [rsp+0x18], 1; call qword ptr [rax+0x18];
0x0012d5d3: add [rax], eax; add [rax], al; mov dword ptr [rsp+0x10], 1; mov dword ptr [rsp+0x18], 1; call qword ptr [rax+0x18];
0x0012d5d5: add [rax], al; mov dword ptr [rsp+0x10], 1; mov dword ptr [rsp+0x18], 1; call qword ptr [rax+0x18];
0x0012d5d6: add bh, al; and al, 0x10; add [rax], eax; add [rax], al; mov dword ptr [rsp+0x18], 1; call qword ptr [rax+0x18];
0x0012d5d7: mov dword ptr [rsp+0x10], 1; mov dword ptr [rsp+0x18], 1; call qword ptr [rax+0x18];
0x0012d5d9: and al, 0x10; add [rax], eax; add [rax], al; mov dword ptr [rsp+0x18], 1; call qword ptr [rax+0x18];
0x0012d5db: add [rax], eax; add [rax], al; mov dword ptr [rsp+0x18], 1; call qword ptr [rax+0x18];
0x0012d5dc: add [rax], al; add bh, al; and al, 0x18; add [rax], eax; add [rax], al; call qword ptr [rax+0x18];
0x0012d5dd: add [rax], al; mov dword ptr [rsp+0x18], 1; call qword ptr [rax+0x18];
0x0012d5de: add bh, al; and al, 0x18; add [rax], eax; add [rax], al; call qword ptr [rax+0x18];
0x0012d5df: mov dword ptr [rsp+0x18], 1; call qword ptr [rax+0x18];
0x0012d5e1: and al, 0x18; add [rax], eax; add [rax], al; call qword ptr [rax+0x18];
0x0012d601: add dh, bh; jmp qword ptr [rsi+0x66];
0x0012d628: mov rsi, rsp; mov dword ptr [rsp+8], 1; mov dword ptr [rsp+0x10], 1; mov dword ptr [rsp+0x18], 1; mov dword ptr [rsp+0x20], 5; call qword ptr [rax+0x18];
0x0012d629: mov esi, esp; mov dword ptr [rsp+8], 1; mov dword ptr [rsp+0x10], 1; mov dword ptr [rsp+0x18], 1; mov dword ptr [rsp+0x20], 5; call qword ptr [rax+0x18];
0x0012d62b: mov dword ptr [rsp+8], 1; mov dword ptr [rsp+0x10], 1; mov dword ptr [rsp+0x18], 1; mov dword ptr [rsp+0x20], 5; call qword ptr [rax+0x18];
0x0012d62f: add [rax], eax; add [rax], al; mov dword ptr [rsp+0x10], 1; mov dword ptr [rsp+0x18], 1; mov dword ptr [rsp+0x20], 5; call qword ptr [rax+0x18];
0x0012d631: add [rax], al; mov dword ptr [rsp+0x10], 1; mov dword ptr [rsp+0x18], 1; mov dword ptr [rsp+0x20], 5; call qword ptr [rax+0x18];
0x0012d633: mov dword ptr [rsp+0x10], 1; mov dword ptr [rsp+0x18], 1; mov dword ptr [rsp+0x20], 5; call qword ptr [rax+0x18];
0x0012d635: and al, 0x10; add [rax], eax; add [rax], al; mov dword ptr [rsp+0x18], 1; mov dword ptr [rsp+0x20], 5; call qword ptr [rax+0x18];
0x0012d637: add [rax], eax; add [rax], al; mov dword ptr [rsp+0x18], 1; mov dword ptr [rsp+0x20], 5; call qword ptr [rax+0x18];
0x0012d639: add [rax], al; mov dword ptr [rsp+0x18], 1; mov dword ptr [rsp+0x20], 5; call qword ptr [rax+0x18];
0x0012d63a: add bh, al; and al, 0x18; add [rax], eax; add [rax], al; mov dword ptr [rsp+0x20], 5; call qword ptr [rax+0x18];
0x0012d63b: mov dword ptr [rsp+0x18], 1; mov dword ptr [rsp+0x20], 5; call qword ptr [rax+0x18];
0x0012d63d: and al, 0x18; add [rax], eax; add [rax], al; mov dword ptr [rsp+0x20], 5; call qword ptr [rax+0x18];
0x0012d63f: add [rax], eax; add [rax], al; mov dword ptr [rsp+0x20], 5; call qword ptr [rax+0x18];
0x0012d641: add [rax], al; mov dword ptr [rsp+0x20], 5; call qword ptr [rax+0x18];
0x0012d643: mov dword ptr [rsp+0x20], 5; call qword ptr [rax+0x18];
0x0012d698: mov dword ptr [rsp+0x10], 0; mov [rsp+0x28], rax; mov rax, [rdi+8]; mov dword ptr [rsp+0x30], 1; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d69e: add [rax], al; mov [rsp+0x28], rax; mov rax, [rdi+8]; mov dword ptr [rsp+0x30], 1; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d69f: add [rax-0x77], cl; and al, 0x28; mov rax, [rdi+8]; mov dword ptr [rsp+0x30], 1; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d6a0: mov [rsp+0x28], rax; mov rax, [rdi+8]; mov dword ptr [rsp+0x30], 1; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d6a1: mov [rsp+0x28], eax; mov rax, [rdi+8]; mov dword ptr [rsp+0x30], 1; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d6a3: and al, 0x28; mov rax, [rdi+8]; mov dword ptr [rsp+0x30], 1; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d6a5: mov rax, [rdi+8]; mov dword ptr [rsp+0x30], 1; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d6a6: mov eax, [rdi+8]; mov dword ptr [rsp+0x30], 1; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d6a7: or r15b, r8b; and al, 0x30; add [rax], eax; add [rax], al; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d6a8: or bh, al; and al, 0x30; add [rax], eax; add [rax], al; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d6a9: mov dword ptr [rsp+0x30], 1; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d6ab: and al, 0x30; add [rax], eax; add [rax], al; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d6ac: xor [rcx], al; add [rax], al; add [rdi], cl; adc [rsp+0x18], eax; call qword ptr [rax+0x18];
0x0012d6ad: add [rax], eax; add [rax], al; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d6ae: add [rax], al; add [rdi], cl; adc [rsp+0x18], eax; call qword ptr [rax+0x18];
0x0012d6af: add [rax], al; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d6b0: add [rdi], cl; adc [rsp+0x18], eax; call qword ptr [rax+0x18];
0x0012d712: mov rax, [rdi+8]; mov dword ptr [rsp+0x10], 0; mov dword ptr [rsp+0x30], 2; mov [rsp+0x40], rdx; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d713: mov eax, [rdi+8]; mov dword ptr [rsp+0x10], 0; mov dword ptr [rsp+0x30], 2; mov [rsp+0x40], rdx; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d716: mov dword ptr [rsp+0x10], 0; mov dword ptr [rsp+0x30], 2; mov [rsp+0x40], rdx; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d71a: add [rax], al; add [rax], al; mov dword ptr [rsp+0x30], 2; mov [rsp+0x40], rdx; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d71c: add [rax], al; mov dword ptr [rsp+0x30], 2; mov [rsp+0x40], rdx; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d71e: mov dword ptr [rsp+0x30], 2; mov [rsp+0x40], rdx; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d720: and al, 0x30; add al, [rax]; add [rax], al; mov [rsp+0x40], rdx; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d722: add al, [rax]; add [rax], al; mov [rsp+0x40], rdx; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d723: add [rax], al; add [rax-0x77], cl; push rsp; and al, 0x40; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d724: add [rax], al; mov [rsp+0x40], rdx; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d725: add [rax-0x77], cl; push rsp; and al, 0x40; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d726: mov [rsp+0x40], rdx; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d727: mov [rsp+0x40], edx; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d728: push rsp; and al, 0x40; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d729: and al, 0x40; movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d72b: movups [rsp+0x18], xmm0; call qword ptr [rax+0x18];
0x0012d72c: adc [rsp+0x18], eax; call qword ptr [rax+0x18];
0x0012d72e: and al, 0x18; call qword ptr [rax+0x18];
0x0012d73e: add [rax], al; add [rbp+5], dh; add rsp, 0x78; ret;
0x0012d740: add [rbp+5], dh; add rsp, 0x78; ret;
0x0012d742: add eax, 0x78c48348; ret;
0x0012d743: add rsp, 0x78; ret;
0x0012d744: add esp, 0x78; ret;
0x0012d7b1: lea r13, [rsp+0x420]; nop [rax]; mov rax, [rbp+8]; mov rsi, rbx; mov rdi, rbp; call qword ptr [rax];
0x0012d7b2: lea ebp, [rsp+0x420]; nop [rax]; mov rax, [rbp+8]; mov rsi, rbx; mov rdi, rbp; call qword ptr [rax];
0x0012d7b7: add [rax], al; nop [rax]; mov rax, [rbp+8]; mov rsi, rbx; mov rdi, rbp; call qword ptr [rax];
0x0012d7b9: nop [rax]; mov rax, [rbp+8]; mov rsi, rbx; mov rdi, rbp; call qword ptr [rax];
0x0012d7bb: add byte ptr [rax], 0; add [rax], al; mov rax, [rbp+8]; mov rsi, rbx; mov rdi, rbp; call qword ptr [rax];
0x0012d7bc: add [rax], al; add [rax], al; mov rax, [rbp+8]; mov rsi, rbx; mov rdi, rbp; call qword ptr [rax];
0x0012d7bd: add [rax], al; add [rax-0x75], cl; or [r8-0x77], r9b; fimul st, word ptr [rax-0x77]; out dx, eax; call qword ptr [rax];
0x0012d7be: add [rax], al; mov rax, [rbp+8]; mov rsi, rbx; mov rdi, rbp; call qword ptr [rax];
0x0012d7bf: add [rax-0x75], cl; or [r8-0x77], r9b; fimul st, word ptr [rax-0x77]; out dx, eax; call qword ptr [rax];
0x0012d7c0: mov rax, [rbp+8]; mov rsi, rbx; mov rdi, rbp; call qword ptr [rax];
0x0012d7c1: mov eax, [rbp+8]; mov rsi, rbx; mov rdi, rbp; call qword ptr [rax];
0x0012d7c2: or [r8-0x77], r9b; fimul st, word ptr [rax-0x77]; out dx, eax; call qword ptr [rax];
0x0012d7c3: or [rax-0x77], cl; fimul st, word ptr [rax-0x77]; out dx, eax; call qword ptr [rax];
0x0012d7c4: mov rsi, rbx; mov rdi, rbp; call qword ptr [rax];
0x0012d7c5: mov esi, ebx; mov rdi, rbp; call qword ptr [rax];
0x0012d7c6: fimul st, word ptr [rax-0x77]; out dx, eax; call qword ptr [rax];
0x0012d8cd: lea rsi, [rsp+0xa0]; mov dword ptr [rsp+0xb0], 0; mov [rsp+0xc8], rdx; mov dword ptr [rsp+0xd0], 2; movups [rsp+0xb8], xmm1; call rax;
0x0012d8ce: lea esi, [rsp+0xa0]; mov dword ptr [rsp+0xb0], 0; mov [rsp+0xc8], rdx; mov dword ptr [rsp+0xd0], 2; movups [rsp+0xb8], xmm1; call rax;
0x0012d8d3: add [rax], al; mov dword ptr [rsp+0xb0], 0; mov [rsp+0xc8], rdx; mov dword ptr [rsp+0xd0], 2; movups [rsp+0xb8], xmm1; call rax;
0x0012d8d5: mov dword ptr [rsp+0xb0], 0; mov [rsp+0xc8], rdx; mov dword ptr [rsp+0xd0], 2; movups [rsp+0xb8], xmm1; call rax;
0x0012d8dc: add [rax], al; add [rax], al; mov [rsp+0xc8], rdx; mov dword ptr [rsp+0xd0], 2; movups [rsp+0xb8], xmm1; call rax;
0x0012d8de: add [rax], al; mov [rsp+0xc8], rdx; mov dword ptr [rsp+0xd0], 2; movups [rsp+0xb8], xmm1; call rax;
0x0012d8e0: mov [rsp+0xc8], rdx; mov dword ptr [rsp+0xd0], 2; movups [rsp+0xb8], xmm1; call rax;
0x0012d8e1: mov [rsp+0xc8], edx; mov dword ptr [rsp+0xd0], 2; movups [rsp+0xb8], xmm1; call rax;
0x0012d8e4: enter 0, 0; mov dword ptr [rsp+0xd0], 2; movups [rsp+0xb8], xmm1; call rax;
0x0012d8e6: add [rax], al; mov dword ptr [rsp+0xd0], 2; movups [rsp+0xb8], xmm1; call rax;
0x0012d8e8: mov dword ptr [rsp+0xd0], 2; movups [rsp+0xb8], xmm1; call rax;
0x0012d8eb: rol byte ptr [rax], 1; add [rax], al; add al, [rax]; add [rax], al; movups [rsp+0xb8], xmm1; call rax;
0x0012d8ec: add [rax], al; add [rdx], al; add [rax], al; add [rdi], cl; adc [rsp+0xb8], ecx; call rax;
0x0012d8ed: add [rax], al; add al, [rax]; add [rax], al; movups [rsp+0xb8], xmm1; call rax;
0x0012d8ee: add [rdx], al; add [rax], al; add [rdi], cl; adc [rsp+0xb8], ecx; call rax;
0x0012d8ef: add al, [rax]; add [rax], al; movups [rsp+0xb8], xmm1; call rax;
0x0012d8f0: add [rax], al; add [rdi], cl; adc [rsp+0xb8], ecx; call rax;
0x0012d8f1: add [rax], al; movups [rsp+0xb8], xmm1; call rax;
0x0012d8f2: add [rdi], cl; adc [rsp+0xb8], ecx; call rax;
0x0012d8f3: movups [rsp+0xb8], xmm1; call rax;
0x0012d8f4: adc [rsp+0xb8], ecx; call rax;
0x0012d8fd: nop [rax]; mov rax, [rbp+8]; mov rdi, rbp; call qword ptr [rax+8];
0x0012d8ff: add [rax-0x75], cl; or [r8-0x77], r9b; out dx, eax; call qword ptr [rax+8];
0x0012d932: add rsp, 0x5c8; pop rbx; pop rbp; pop r12; pop r13; ret;
0x0012d933: add esp, 0x5c8; pop rbx; pop rbp; pop r12; pop r13; ret;
0x0012d935: enter 5, 0; pop rbx; pop rbp; pop r12; pop r13; ret;
0x0012d936: add eax, 0x5d5b0000; pop r12; pop r13; ret;
0x0012d987: mov dword ptr [rsp+0xb0], 0; lea rsi, [rsp+0xa0]; mov [rsp+0xc8], rdx; mov dword ptr [rsp+0xd0], 1; movups [rsp+0xb8], xmm2; call rax;
0x0012d990: add [rax], al; lea rsi, [rsp+0xa0]; mov [rsp+0xc8], rdx; mov dword ptr [rsp+0xd0], 1; movups [rsp+0xb8], xmm2; call rax;
0x0012d992: lea rsi, [rsp+0xa0]; mov [rsp+0xc8], rdx; mov dword ptr [rsp+0xd0], 1; movups [rsp+0xb8], xmm2; call rax;
0x0012d993: lea esi, [rsp+0xa0]; mov [rsp+0xc8], rdx; mov dword ptr [rsp+0xd0], 1; movups [rsp+0xb8], xmm2; call rax;
0x0012d998: add [rax], al; mov [rsp+0xc8], rdx; mov dword ptr [rsp+0xd0], 1; movups [rsp+0xb8], xmm2; call rax;
0x0012d99a: mov [rsp+0xc8], rdx; mov dword ptr [rsp+0xd0], 1; movups [rsp+0xb8], xmm2; call rax;
0x0012d99b: mov [rsp+0xc8], edx; mov dword ptr [rsp+0xd0], 1; movups [rsp+0xb8], xmm2; call rax;
0x0012d99e: enter 0, 0; mov dword ptr [rsp+0xd0], 1; movups [rsp+0xb8], xmm2; call rax;
0x0012d9a0: add [rax], al; mov dword ptr [rsp+0xd0], 1; movups [rsp+0xb8], xmm2; call rax;
0x0012d9a2: mov dword ptr [rsp+0xd0], 1; movups [rsp+0xb8], xmm2; call rax;
0x0012d9a5: rol byte ptr [rax], 1; add [rax], al; add [rax], eax; add [rax], al; movups [rsp+0xb8], xmm2; call rax;
0x0012d9a6: add [rax], al; add [rcx], al; add [rax], al; add [rdi], cl; adc [rsp+0xb8], edx; call rax;
0x0012d9a7: add [rax], al; add [rax], eax; add [rax], al; movups [rsp+0xb8], xmm2; call rax;
0x0012d9a8: add [rcx], al; add [rax], al; add [rdi], cl; adc [rsp+0xb8], edx; call rax;
0x0012d9a9: add [rax], eax; add [rax], al; movups [rsp+0xb8], xmm2; call rax;
0x0012d9aa: add [rax], al; add [rdi], cl; adc [rsp+0xb8], edx; call rax;
0x0012d9ab: add [rax], al; movups [rsp+0xb8], xmm2; call rax;
0x0012d9ac: add [rdi], cl; adc [rsp+0xb8], edx; call rax;
0x0012d9ad: movups [rsp+0xb8], xmm2; call rax;
0x0012d9ae: adc [rsp+0xb8], edx; call rax;
0x0012d9b1: mov eax, 0xff000000; ror byte ptr [rax-0x75], 1; or [r8-0x77], r9b; out dx, eax; call qword ptr [rax+8];
0x0012d9b2: add [rax], al; add bh, bh; ror byte ptr [rax-0x75], 1; or [r8-0x77], r9b; out dx, eax; call qword ptr [rax+8];
0x0012d9b4: add bh, bh; ror byte ptr [rax-0x75], 1; or [r8-0x77], r9b; out dx, eax; call qword ptr [rax+8];
0x0012d9b6: ror byte ptr [rax-0x75], 1; or [r8-0x77], r9b; out dx, eax; call qword ptr [rax+8];
0x0012d9b7: mov rax, [rbp+8]; mov rdi, rbp; call qword ptr [rax+8];
0x0012d9b8: mov eax, [rbp+8]; mov rdi, rbp; call qword ptr [rax+8];
0x0012d9b9: or [r8-0x77], r9b; out dx, eax; call qword ptr [rax+8];
0x0012d9ba: or [rax-0x77], cl; out dx, eax; call qword ptr [rax+8];
0x0012d9c9: nop [rax]; mov rax, [rbp+8]; mov rdi, rbp; call qword ptr [rax+0x28];
0x0012d9cb: add byte ptr [rax], 0; add [rax], al; mov rax, [rbp+8]; mov rdi, rbp; call qword ptr [rax+0x28];
0x0012d9cc: add [rax], al; add [rax], al; mov rax, [rbp+8]; mov rdi, rbp; call qword ptr [rax+0x28];
0x0012d9cd: add [rax], al; add [rax-0x75], cl; or [r8-0x77], r9b; out dx, eax; call qword ptr [rax+0x28];
0x0012d9ce: add [rax], al; mov rax, [rbp+8]; mov rdi, rbp; call qword ptr [rax+0x28];
0x0012d9cf: add [rax-0x75], cl; or [r8-0x77], r9b; out dx, eax; call qword ptr [rax+0x28];
0x0012d9d0: mov rax, [rbp+8]; mov rdi, rbp; call qword ptr [rax+0x28];
0x0012d9d1: mov eax, [rbp+8]; mov rdi, rbp; call qword ptr [rax+0x28];
0x0012d9d2: or [r8-0x77], r9b; out dx, eax; call qword ptr [rax+0x28];
0x0012d9d3: or [rax-0x77], cl; out dx, eax; call qword ptr [rax+0x28];
0x0012d9d4: mov rdi, rbp; call qword ptr [rax+0x28];
0x0012d9de: call qword ptr [rax-0x3fdb7b77];
0x0012d9eb: lea rsi, [rsp+0xa0]; mov rdi, rbp; mov dword ptr [rsp+0xa8], 1; mov dword ptr [rsp+0xb0], 1; mov dword ptr [rsp+0xb8], 1; call qword ptr [rax+0x18];
0x0012d9ec: lea esi, [rsp+0xa0]; mov rdi, rbp; mov dword ptr [rsp+0xa8], 1; mov dword ptr [rsp+0xb0], 1; mov dword ptr [rsp+0xb8], 1; call qword ptr [rax+0x18];
0x0012d9f1: add [rax], al; mov rdi, rbp; mov dword ptr [rsp+0xa8], 1; mov dword ptr [rsp+0xb0], 1; mov dword ptr [rsp+0xb8], 1; call qword ptr [rax+0x18];
0x0012d9f2: add [rax-0x77], cl; out dx, eax; mov dword ptr [rsp+0xa8], 1; mov dword ptr [rsp+0xb0], 1; mov dword ptr [rsp+0xb8], 1; call qword ptr [rax+0x18];
0x0012d9f3: mov rdi, rbp; mov dword ptr [rsp+0xa8], 1; mov dword ptr [rsp+0xb0], 1; mov dword ptr [rsp+0xb8], 1; call qword ptr [rax+0x18];
0x0012d9f4: mov edi, ebp; mov dword ptr [rsp+0xa8], 1; mov dword ptr [rsp+0xb0], 1; mov dword ptr [rsp+0xb8], 1; call qword ptr [rax+0x18];
0x0012d9f5: out dx, eax; mov dword ptr [rsp+0xa8], 1; mov dword ptr [rsp+0xb0], 1; mov dword ptr [rsp+0xb8], 1; call qword ptr [rax+0x18];
0x0012d9f6: mov dword ptr [rsp+0xa8], 1; mov dword ptr [rsp+0xb0], 1; mov dword ptr [rsp+0xb8], 1; call qword ptr [rax+0x18];
0x0012d9fb: add [rax], al; add [rax], eax; add [rax], al; mov dword ptr [rsp+0xb0], 1; mov dword ptr [rsp+0xb8], 1; call qword ptr [rax+0x18];
0x0012d9fd: add [rax], eax; add [rax], al; mov dword ptr [rsp+0xb0], 1; mov dword ptr [rsp+0xb8], 1; call qword ptr [rax+0x18];
0x0012d9ff: add [rax], al; mov dword ptr [rsp+0xb0], 1; mov dword ptr [rsp+0xb8], 1; call qword ptr [rax+0x18];
0x0012da01: mov dword ptr [rsp+0xb0], 1; mov dword ptr [rsp+0xb8], 1; call qword ptr [rax+0x18];
0x0012da04: mov al, 0; add [rax], al; add [rax], eax; add [rax], al; mov dword ptr [rsp+0xb8], 1; call qword ptr [rax+0x18];
0x0012da06: add [rax], al; add [rax], eax; add [rax], al; mov dword ptr [rsp+0xb8], 1; call qword ptr [rax+0x18];
0x0012da08: add [rax], eax; add [rax], al; mov dword ptr [rsp+0xb8], 1; call qword ptr [rax+0x18];
0x0012da0a: add [rax], al; mov dword ptr [rsp+0xb8], 1; call qword ptr [rax+0x18];
0x0012da0c: mov dword ptr [rsp+0xb8], 1; call qword ptr [rax+0x18];
0x0012da11: add [rax], al; add [rax], eax; add [rax], al; call qword ptr [rax+0x18];
0x0012da13: add [rax], eax; add [rax], al; call qword ptr [rax+0x18];
0x0012da15: add [rax], al; call qword ptr [rax+0x18];
0x0012da1e: call qword ptr [rax+0x48e78948];
0x0012da1f: nop; mov rdi, rsp; mov rsi, rbp; call qword ptr [rax+0x18];
0x0012da20: mov rdi, rsp; mov rsi, rbp; call qword ptr [rax+0x18];
0x0012da21: mov edi, esp; mov rsi, rbp; call qword ptr [rax+0x18];
0x0012da22: out 0x48, eax; mov esi, ebp; call qword ptr [rax+0x18];
0x0012da23: mov rsi, rbp; call qword ptr [rax+0x18];
0x0012da24: mov esi, ebp; call qword ptr [rax+0x18];
0x0012da25: out dx, al; call qword ptr [rax+0x18];
0x0012da2f: in eax, dx; sti; std; jmp qword ptr [rsi+0x66];
0x0012da30: sti; std; jmp qword ptr [rsi+0x66];
0x0012daa2: rol byte ptr [rcx], 0x89; ret;
0x0012db16: add [rax], al; add [rbp+8], dh; add rsp, 0x98; ret;
0x0012db18: add [rbp+8], dh; add rsp, 0x98; ret;
0x0012db1b: add rsp, 0x98; ret;
0x0012db1c: add esp, 0x98; ret;
0x0012dbfa: add [rax], al; add [rbp+0x26], dh; add rsp, 0x28; ret;
0x0012dbfc: add [rbp+0x26], dh; add rsp, 0x28; ret;
0x0012dbfe: add rsp, 0x28; ret;
0x0012dc26: idiv cl; std; jmp qword ptr [rsi+0xf];
0x0012dc27: stc; std; jmp qword ptr [rsi+0xf];
0x0012dc51: add [rax], al; add [rax-0x7b], cl; shl byte ptr [rbp-0x19], 0x5b; ret;
0x0012dc53: add [rax-0x7b], cl; shl byte ptr [rbp-0x19], 0x5b; ret;
0x0012dc56: shl byte ptr [rbp-0x19], 0x5b; ret;
0x0012dc58: out 0x5b, eax; ret;
0x0012dc5b: nop [rax+rax]; mov eax, 2; ret;
0x0012dc5d: add [rax], r8b; mov eax, 2; ret;
0x0012dc5e: add [rax], al; mov eax, 2; ret;
0x0012dc5f: add [rax+2], bh; ret;
0x0012dc70: mov rdi, [rdi+0x40]; mov rcx, rsi; xor eax, eax; mov rsi, rdx; add rdi, 0x10; jmp rcx;
0x0012dc71: mov edi, [rdi+0x40]; mov rcx, rsi; xor eax, eax; mov rsi, rdx; add rdi, 0x10; jmp rcx;
0x0012dcc2: dec dword ptr [rbx-0x1a17ff83]; sbb esp, edi; jmp qword ptr [rsi-0x7d];
0x0012dcc5: add al, ch; in eax, 0x19; cld; jmp qword ptr [rsi-0x7d];
0x0012dcc7: in eax, 0x19; cld; jmp qword ptr [rsi-0x7d];
0x0012dcc8: sbb esp, edi; jmp qword ptr [rsi-0x7d];
0x0012dcc9: cld; jmp qword ptr [rsi-0x7d];
0x0012dcfa: sbb dh, [rsi-0x11]; jmp qword ptr [rsi-0x70];
0x0012dcfc: out dx, eax; jmp qword ptr [rsi-0x70];
0x0012ddaf: test byte ptr [rip+0x3d8d4800], 0x1f; ret 5;
0x0012ddb6: ret 5;
0x0012de79: cmp [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; pop r13; ret;
0x0012de91: idiv ebp; jmp qword ptr [rsi+0x66];
0x0012ded5: add rsp, 8; mov eax, r12d; pop rbp; pop r12; ret;
0x0012ded6: add esp, 8; mov eax, r12d; pop rbp; pop r12; ret;
0x0012ded8: or [rcx+rcx*4-0x20], al; pop rbp; pop r12; ret;
0x0012defd: cmp eax, 1; mov eax, 1; sbb eax, 0xffffffff; add rsp, 8; ret;
0x0012defe: clc; add [rax+1], edi; sbb eax, 0xffffffff; add rsp, 8; ret;
0x0012deff: add [rax+1], edi; sbb eax, 0xffffffff; add rsp, 8; ret;
0x0012df00: mov eax, 1; sbb eax, 0xffffffff; add rsp, 8; ret;
0x0012df01: add [rax], eax; add [rax], al; sbb eax, 0xffffffff; add rsp, 8; ret;
0x0012df03: add [rax], al; sbb eax, 0xffffffff; add rsp, 8; ret;
0x0012df05: sbb eax, 0xffffffff; add rsp, 8; ret;
0x0012df06: fdivr st, st(7); add rsp, 8; ret;
0x0012df38: inc dword ptr [rbp-0x38ec8a40]; add [r8], r8b; add [rax], al; add [rbx+0x5d], bl; pop r12; ret;
0x0012df3a: shl byte ptr [rbp+0x13], 0xc7; add [r8], r8b; add [rax], al; add [rbx+0x5d], bl; pop r12; ret;
0x0012df3c: adc eax, edi; add [r8], r8b; add [rax], al; add [rbx+0x5d], bl; pop r12; ret;
0x0012df3d: mov dword ptr [rbp], 0; pop rbx; pop rbp; pop r12; ret;
0x0012df3e: add [r8], r8b; add [rax], al; add [rbx+0x5d], bl; pop r12; ret;
0x0012df3f: add [rax], al; add [rax], al; add [rbx+0x5d], bl; pop r12; ret;
0x0012df40: add [rax], al; add [rax], al; pop rbx; pop rbp; pop r12; ret;
0x0012df52: add ecx, [rax-0x77]; or [r8+1], r15b; pop rbx; pop rbp; pop r12; ret;
0x0012df53: mov [rbp+8], rax; mov eax, 1; pop rbx; pop rbp; pop r12; ret;
0x0012df54: mov [rbp+8], eax; mov eax, 1; pop rbx; pop rbp; pop r12; ret;
0x0012df55: or [r8+1], r15b; pop rbx; pop rbp; pop r12; ret;
0x0012df56: or [rax+1], bh; pop rbx; pop rbp; pop r12; ret;
0x0012df57: mov eax, 1; pop rbx; pop rbp; pop r12; ret;
0x0012df58: add [rax], eax; add [rax], al; pop rbx; pop rbp; pop r12; ret;
0x0012df59: add [rax], al; add [rbx+0x5d], bl; pop r12; ret;
0x0012df5a: add [rax], al; pop rbx; pop rbp; pop r12; ret;
0x0012df8f: add [rcx], ch; ret;
0x0012dfba: or [rax-1], bh; pop rbx; pop rbp; pop r12; pop r13; ret;
0x0012dfbb: mov eax, 0xffffffff; pop rbx; pop rbp; pop r12; pop r13; ret;
0x0012dfbf: call far fword ptr [rbx+0x5d];
0x0012dfd3: or [rcx+rcx*4-0x20], al; pop rbx; pop rbp; pop r12; pop r13; ret;
0x0012dfd4: mov eax, r12d; pop rbx; pop rbp; pop r12; pop r13; ret;
0x0012dfd5: mov eax, esp; pop rbx; pop rbp; pop r12; pop r13; ret;
0x0012e072: adc [rbx+0x5d], bl; pop r12; pop r13; pop r14; ret;
0x0012e086: add [rbx+rax*4+0x38], ah; add al, 0x75; ret;
0x0012e08a: add al, 0x75; ret;
0x0012e2d5: nop [rax+rax]; nop; mov eax, 2; ret;
0x0012e2d6: nop [rax+rax]; nop; mov eax, 2; ret;
0x0012e2d7: nop [rax+rax]; nop; mov eax, 2; ret;
0x0012e2d9: test [rax], al; add [rax], al; add [rax], al; nop; mov eax, 2; ret;
0x0012e2db: add [rax], al; add [rax], al; nop; mov eax, 2; ret;
0x0012e2dd: add [rax], al; nop; mov eax, 2; ret;
0x0012e2df: nop; mov eax, 2; ret;
0x0012e2e0: mov eax, 2; ret;
0x0012e2e1: add al, [rax]; add [rax], al; ret;
0x0012e2f0: mov rdi, [rdi+0x48]; mov rcx, rsi; xor eax, eax; mov rsi, rdx; add rdi, 0x10; jmp rcx;
0x0012e2f1: mov edi, [rdi+0x48]; mov rcx, rsi; xor eax, eax; mov rsi, rdx; add rdi, 0x10; jmp rcx;
0x0012e2f4: mov rcx, rsi; xor eax, eax; mov rsi, rdx; add rdi, 0x10; jmp rcx;
0x0012e2f5: mov ecx, esi; xor eax, eax; mov rsi, rdx; add rdi, 0x10; jmp rcx;
0x0012e2f6: int1; xor eax, eax; mov rsi, rdx; add rdi, 0x10; jmp rcx;
0x0012e2f7: xor eax, eax; mov rsi, rdx; add rdi, 0x10; jmp rcx;
0x0012e2f8: ror byte ptr [rax-0x77], 0xd6; add rdi, 0x10; jmp rcx;
0x0012e2f9: mov rsi, rdx; add rdi, 0x10; jmp rcx;
0x0012e2fa: mov esi, edx; add rdi, 0x10; jmp rcx;
0x0012e314: mov rcx, rsi; xor eax, eax; mov rsi, rdx; mov dword ptr [rdi+0x10], 2; add rdi, 0x10; jmp rcx;
0x0012e315: mov ecx, esi; xor eax, eax; mov rsi, rdx; mov dword ptr [rdi+0x10], 2; add rdi, 0x10; jmp rcx;
0x0012e316: int1; xor eax, eax; mov rsi, rdx; mov dword ptr [rdi+0x10], 2; add rdi, 0x10; jmp rcx;
0x0012e317: xor eax, eax; mov rsi, rdx; mov dword ptr [rdi+0x10], 2; add rdi, 0x10; jmp rcx;
0x0012e318: ror byte ptr [rax-0x77], 0xd6; mov dword ptr [rdi+0x10], 2; add rdi, 0x10; jmp rcx;
0x0012e319: mov rsi, rdx; mov dword ptr [rdi+0x10], 2; add rdi, 0x10; jmp rcx;
0x0012e31a: mov esi, edx; mov dword ptr [rdi+0x10], 2; add rdi, 0x10; jmp rcx;
0x0012e31c: mov dword ptr [rdi+0x10], 2; add rdi, 0x10; jmp rcx;
0x0012e31f: add al, [rax]; add [rax], al; add rdi, 0x10; jmp rcx;
0x0012e321: add [rax], al; add rdi, 0x10; jmp rcx;
0x0012e323: add rdi, 0x10; jmp rcx;
0x0012e324: add edi, 0x10; jmp rcx;
0x0012e359: lea rdi, [r12+0x10]; call rax;
0x0012e35a: lea edi, [rsp+0x10]; call rax;
0x0012e35c: and al, 0x10; call rax;
0x0012e396: mov rbp, [rdi+0x48]; mov rax, [rbp+0x18]; lea r13, [rbp+0x10]; mov dword ptr [rbp+0x10], 0; mov rdi, r13; call qword ptr [rax+0x28];
0x0012e397: mov ebp, [rdi+0x48]; mov rax, [rbp+0x18]; lea r13, [rbp+0x10]; mov dword ptr [rbp+0x10], 0; mov rdi, r13; call qword ptr [rax+0x28];
0x0012e398: outsd dx, [rsi]; mov rax, [rbp+0x18]; lea r13, [rbp+0x10]; mov dword ptr [rbp+0x10], 0; mov rdi, r13; call qword ptr [rax+0x28];
0x0012e39a: mov rax, [rbp+0x18]; lea r13, [rbp+0x10]; mov dword ptr [rbp+0x10], 0; mov rdi, r13; call qword ptr [rax+0x28];
0x0012e39b: mov eax, [rbp+0x18]; lea r13, [rbp+0x10]; mov dword ptr [rbp+0x10], 0; mov rdi, r13; call qword ptr [rax+0x28];
0x0012e39c: sbb [r13+rcx*4+0x6d], r9b; adc bh, al; adc [r8], r8b; add [rax], al; add [rcx+rcx*4-0x11], cl; call qword ptr [rax+0x28];
0x0012e39d: sbb [rbp+rcx*4+0x6d], cl; adc bh, al; adc [r8], r8b; add [rax], al; add [rcx+rcx*4-0x11], cl; call qword ptr [rax+0x28];
0x0012e39e: lea r13, [rbp+0x10]; mov dword ptr [rbp+0x10], 0; mov rdi, r13; call qword ptr [rax+0x28];
0x0012e39f: lea ebp, [rbp+0x10]; mov dword ptr [rbp+0x10], 0; mov rdi, r13; call qword ptr [rax+0x28];
0x0012e3a0: insd [rdi], dx; adc bh, al; adc [r8], r8b; add [rax], al; add [rcx+rcx*4-0x11], cl; call qword ptr [rax+0x28];
0x0012e3a1: adc bh, al; adc [r8], r8b; add [rax], al; add [rcx+rcx*4-0x11], cl; call qword ptr [rax+0x28];
0x0012e3a2: mov dword ptr [rbp+0x10], 0; mov rdi, r13; call qword ptr [rax+0x28];
0x0012e3a3: adc [r8], r8b; add [rax], al; add [rcx+rcx*4-0x11], cl; call qword ptr [rax+0x28];
0x0012e3a4: adc [rax], al; add [rax], al; add [rcx+rcx*4-0x11], cl; call qword ptr [rax+0x28];
0x0012e3a5: add [rax], al; add [rax], al; mov rdi, r13; call qword ptr [rax+0x28];
0x0012e3c1: inc dword ptr [rbp+0x483a74c0]; mov eax, [rbp+0x18]; mov rdi, r13; call qword ptr [rax+0x20];
0x0012e3c3: shl byte ptr [rdx+rdi+0x48], 0x8b; sbb [r9+rcx*4-0x11], r9b; call qword ptr [rax+0x20];
0x0012e3c5: cmp cl, [rax-0x75]; sbb [r9+rcx*4-0x11], r9b; call qword ptr [rax+0x20];
0x0012e3c6: mov rax, [rbp+0x18]; mov rdi, r13; call qword ptr [rax+0x20];
0x0012e3c7: mov eax, [rbp+0x18]; mov rdi, r13; call qword ptr [rax+0x20];
0x0012e3c8: sbb [r9+rcx*4-0x11], r9b; call qword ptr [rax+0x20];
0x0012e3c9: sbb [rcx+rcx*4-0x11], cl; call qword ptr [rax+0x20];
0x0012e3ca: mov rdi, r13; call qword ptr [rax+0x20];
0x0012e3cb: mov edi, ebp; call qword ptr [rax+0x20];
0x0012e3cc: out dx, eax; call qword ptr [rax+0x20];
0x0012e3cd: call qword ptr [rax+0x20];
0x0012e728: mov rax, [rbx+0x18]; lea r13, [rbx+0x10]; xor esi, esi; mov dword ptr [rbx+0x10], 1; mov rdi, r13; call qword ptr [rax+0x28];
0x0012e729: mov eax, [rbx+0x18]; lea r13, [rbx+0x10]; xor esi, esi; mov dword ptr [rbx+0x10], 1; mov rdi, r13; call qword ptr [rax+0x28];
0x0012e72c: lea r13, [rbx+0x10]; xor esi, esi; mov dword ptr [rbx+0x10], 1; mov rdi, r13; call qword ptr [rax+0x28];
0x0012e72d: lea ebp, [rbx+0x10]; xor esi, esi; mov dword ptr [rbx+0x10], 1; mov rdi, r13; call qword ptr [rax+0x28];
0x0012e72e: imul edx, [rax], 0x31; test bh, 0x43; adc [rcx], al; add [rax], al; add [rcx+rcx*4-0x11], cl; call qword ptr [rax+0x28];
0x0012e72f: adc [rcx], dh; test bh, 0x43; adc [rcx], al; add [rax], al; add [rcx+rcx*4-0x11], cl; call qword ptr [rax+0x28];
0x0012e730: xor esi, esi; mov dword ptr [rbx+0x10], 1; mov rdi, r13; call qword ptr [rax+0x28];
0x0012e731: test bh, 0x43; adc [rcx], al; add [rax], al; add [rcx+rcx*4-0x11], cl; call qword ptr [rax+0x28];
0x0012e732: mov dword ptr [rbx+0x10], 1; mov rdi, r13; call qword ptr [rax+0x28];
0x0012e733: adc [r9], al; add [rax], al; add [rcx+rcx*4-0x11], cl; call qword ptr [rax+0x28];
0x0012e734: adc [rcx], al; add [rax], al; add [rcx+rcx*4-0x11], cl; call qword ptr [rax+0x28];
0x0012e735: add [rax], eax; add [rax], al; mov rdi, r13; call qword ptr [rax+0x28];
0x0012e736: add [rax], al; add [rcx+rcx*4-0x11], cl; call qword ptr [rax+0x28];
0x0012e737: add [rax], al; mov rdi, r13; call qword ptr [rax+0x28];
0x0012e738: add [rcx+rcx*4-0x11], cl; call qword ptr [rax+0x28];
0x0012e739: mov rdi, r13; call qword ptr [rax+0x28];
0x0012e73a: mov edi, ebp; call qword ptr [rax+0x28];
0x0012e73b: out dx, eax; call qword ptr [rax+0x28];
0x0012e73c: call qword ptr [rax+0x28];
0x0012e90f: in eax, dx; std; jmp qword ptr [rsi+0x66];
0x0012e9ca: cmp ch, [rcx-0x11]; dec dword ptr [rbp-0x7b]; in al, 0xf; xchg esp, eax; ret 0x854d;
0x0012e9cc: out dx, eax; dec dword ptr [rbp-0x7b]; in al, 0xf; xchg esp, eax; ret 0x854d;
0x0012e9cd: dec dword ptr [rbp-0x7b]; in al, 0xf; xchg esp, eax; ret 0x854d;
0x0012e9d0: in al, 0xf; xchg esp, eax; ret 0x854d;
0x0012e9d2: xchg esp, eax; ret 0x854d;
0x0012e9d3: ret 0x854d;
0x0012ed03: sbb ecx, ebp; std; jmp qword ptr [rsi+0xf];
0x0012ed1e: call qword ptr [rax+0x54415541];
0x0012ed56: add [rcx], dh; dec dword ptr [rax-0x77]; ret 0xc031;
0x0012ed58: dec dword ptr [rax-0x77]; ret 0xc031;
0x0012ed66: or [rcx], dh; rcr byte ptr [rbx+0x5d], 0x41; pop rsp; pop r13; ret;
0x0012ed67: xor eax, eax; pop rbx; pop rbp; pop r12; pop r13; ret;
0x0012ed68: rcr byte ptr [rbx+0x5d], 0x41; pop rsp; pop r13; ret;
0x0012edd0: or [rax+1], bh; pop rbx; pop rbp; pop r12; pop r13; ret;
0x0012edd1: mov eax, 1; pop rbx; pop rbp; pop r12; pop r13; ret;
0x0012edd3: add [rax], al; add [rbx+0x5d], bl; pop r12; pop r13; ret;
0x0012edd4: add [rax], al; pop rbx; pop rbp; pop r12; pop r13; ret;
0x0012edd5: add [rbx+0x5d], bl; pop r12; pop r13; ret;
0x0012ee87: ret 0x4c01;
0x0012ee8b: ret 0x3274;
0x0012eea9: mov rdi, 0xf98304e0c137e883; sbb al, [rcx+0xf]; ret 0x99eb;
0x0012eeb0: add al, 0x83; stc; sbb al, [rcx+0xf]; ret 0x99eb;
0x0012eeb2: stc; sbb al, [rcx+0xf]; ret 0x99eb;
0x0012eeb3: sbb al, [rcx+0xf]; ret 0x99eb;
0x0012eeb7: ret 0x99eb;
0x0012eeb9: cdq; nop [rax+rax]; ret;
0x0012ef14: add [rcx+0x39], ecx; ret 0xd675;
0x0012ef17: ret 0xd675;
0x0012ef1a: add r9d, r9d; movsxd r9, r9d; mov byte ptr [rsi+r9], 0; ret;
0x0012ef1b: add ecx, ecx; movsxd r9, r9d; mov byte ptr [rsi+r9], 0; ret;
0x0012ef1c: leave; movsxd r9, r9d; mov byte ptr [rsi+r9], 0; ret;
0x0012ef1d: movsxd r9, r9d; mov byte ptr [rsi+r9], 0; ret;
0x0012ef1e: movsxd ecx, ecx; mov byte ptr [rsi+r9], 0; ret;
0x0012ef1f: leave; mov byte ptr [rsi+r9], 0; ret;
0x0012ef20: mov byte ptr [rsi+r9], 0; ret;
0x0012ef21: mov byte ptr [rsi+rcx], 0; ret;
0x0012ef56: ret 0x101;
0x0012f03e: in eax, 0xfd; jmp qword ptr [rsi+0x66];
0x0012f08b: out 0x89, al; fisttp word ptr [rax-0x77], st; ret 0x8948;
0x0012f08d: fisttp word ptr [rax-0x77], st; ret 0x8948;
0x0012f10d: pmulhw mm7, mm5; jmp qword ptr [rsi+0x2e];
0x0012f10e: in eax, 0xfd; jmp qword ptr [rsi+0x2e];
0x0012f183: add [rcx+rcx*4-0x12], ecx; mov edx, 0xffffffff; mov rdi, r15; xor eax, eax; add r13, rbx; call rbp;
0x0012f184: mov rsi, r13; mov edx, 0xffffffff; mov rdi, r15; xor eax, eax; add r13, rbx; call rbp;
0x0012f185: mov esi, ebp; mov edx, 0xffffffff; mov rdi, r15; xor eax, eax; add r13, rbx; call rbp;
0x0012f186: out dx, al; mov edx, 0xffffffff; mov rdi, r15; xor eax, eax; add r13, rbx; call rbp;
0x0012f187: mov edx, 0xffffffff; mov rdi, r15; xor eax, eax; add r13, rbx; call rbp;
0x0012f18b: dec dword ptr [rcx+rcx*4-1]; xor eax, eax; add r13, rbx; call rbp;
0x0012f18c: mov rdi, r15; xor eax, eax; add r13, rbx; call rbp;
0x0012f18d: mov edi, edi; xor eax, eax; add r13, rbx; call rbp;
0x0012f18e: push qword ptr [rcx]; ror byte ptr [rcx+1], 0xdd; call rbp;
0x0012f18f: xor eax, eax; add r13, rbx; call rbp;
0x0012f190: ror byte ptr [rcx+1], 0xdd; call rbp;
0x0012f191: add r13, rbx; call rbp;
0x0012f192: add ebp, ebx; call rbp;
0x0012f2c3: sub al, 0x31; sar byte ptr [rdx-1], 0x4c; mov esi, esi; mov rdi, r12; call r13;
0x0012f2c4: xor eax, eax; mov edx, 0xffffffff; mov rsi, r14; mov rdi, r12; call r13;
0x0012f2c5: sar byte ptr [rdx-1], 0x4c; mov esi, esi; mov rdi, r12; call r13;
0x0012f2c6: mov edx, 0xffffffff; mov rsi, r14; mov rdi, r12; call r13;
0x0012f2ca: dec dword ptr [rcx+rcx*4-0xa]; mov rdi, r12; call r13;
0x0012f2cb: mov rsi, r14; mov rdi, r12; call r13;
0x0012f2cc: mov esi, esi; mov rdi, r12; call r13;
0x0012f2cd: test byte ptr [rcx+rcx*4-0x19], 0x41; call rbp;
0x0012f2ce: mov rdi, r12; call r13;
0x0012f2cf: mov edi, esp; call r13;
0x0012f2d0: out 0x41, eax; call rbp;
0x0012f2d1: call r13;
0x0012f2d2: call rbp;
0x0012f2db: or [rbx+0x5d], bl; pop r12; pop r13; pop r14; pop r15; ret;
0x0012f2f8: add [rbx+0x5d], bl; pop r12; pop r13; pop r14; pop r15; ret;
0x0012f340: add rsp, 8; xor eax, eax; pop rbp; pop r12; ret;
0x0012f341: add esp, 8; xor eax, eax; pop rbp; pop r12; ret;
0x0012f343: or [rcx], dh; rcr byte ptr [rbp+0x41], 0x5c; ret;
0x0012f34a: nop [rax+rax]; mov rax, [rdi+8]; call qword ptr [rax+0x18];
0x0012f34b: nop [rax+rax]; mov rax, [rdi+8]; call qword ptr [rax+0x18];
0x0012f34d: add [rax], r8b; mov rax, [rdi+8]; call qword ptr [rax+0x18];
0x0012f34e: add [rax], al; mov rax, [rdi+8]; call qword ptr [rax+0x18];
0x0012f350: mov rax, [rdi+8]; call qword ptr [rax+0x18];
0x0012f351: mov eax, [rdi+8]; call qword ptr [rax+0x18];
0x0012f354: call qword ptr [rax+0x18];
0x0012f36a: lea rsi, [rip+0x5a6b3]; mov rax, [rax+0x18]; add rsp, 8; pop rbp; pop r12; jmp rax;
0x0012f36b: lea esi, [rip+0x5a6b3]; mov rax, [rax+0x18]; add rsp, 8; pop rbp; pop r12; jmp rax;
0x0012f36c: xor eax, 0x5a6b3; mov rax, [rax+0x18]; add rsp, 8; pop rbp; pop r12; jmp rax;
0x0012f371: mov rax, [rax+0x18]; add rsp, 8; pop rbp; pop r12; jmp rax;
0x0012f372: mov eax, [rax+0x18]; add rsp, 8; pop rbp; pop r12; jmp rax;
0x0012f37e: xchg ax, ax; add rsp, 8; mov eax, 1; pop rbp; pop r12; ret;
0x0012f37f: nop; add rsp, 8; mov eax, 1; pop rbp; pop r12; ret;
0x0012f380: add rsp, 8; mov eax, 1; pop rbp; pop r12; ret;
0x0012f381: add esp, 8; mov eax, 1; pop rbp; pop r12; ret;
0x0012f383: or [rax+1], bh; pop rbp; pop r12; ret;
0x0012f384: mov eax, 1; pop rbp; pop r12; ret;
0x0012f385: add [rax], eax; add [rax], al; pop rbp; pop r12; ret;
0x0012f386: add [rax], al; add [rbp+0x41], bl; pop rsp; ret;
0x0012f387: add [rax], al; pop rbp; pop r12; ret;
0x0012f388: add [rbp+0x41], bl; pop rsp; ret;
0x0012f38d: nop [rax]; mov rax, [rdi+8]; call qword ptr [rax+0x10];
0x0012f390: mov rax, [rdi+8]; call qword ptr [rax+0x10];
0x0012f391: mov eax, [rdi+8]; call qword ptr [rax+0x10];
0x0012f394: call qword ptr [rax+0x10];
0x0012f3aa: lea rsi, [rip+0x94cf7]; mov rax, [rax+0x10]; add rsp, 8; pop rbp; pop r12; jmp rax;
0x0012f3ab: lea esi, [rip+0x94cf7]; mov rax, [rax+0x10]; add rsp, 8; pop rbp; pop r12; jmp rax;
0x0012f3ac: xor eax, 0x94cf7; mov rax, [rax+0x10]; add rsp, 8; pop rbp; pop r12; jmp rax;
0x0012f3ad: test dword ptr [rcx+rcx], 0x10408b48; add rsp, 8; pop rbp; pop r12; jmp rax;
0x0012f3ae: or [rax], r8; mov rax, [rax+0x10]; add rsp, 8; pop rbp; pop r12; jmp rax;
0x0012f3af: or [rax], eax; mov rax, [rax+0x10]; add rsp, 8; pop rbp; pop r12; jmp rax;
0x0012f3b1: mov rax, [rax+0x10]; add rsp, 8; pop rbp; pop r12; jmp rax;
0x0012f3b2: mov eax, [rax+0x10]; add rsp, 8; pop rbp; pop r12; jmp rax;
0x0012f3b5: add rsp, 8; pop rbp; pop r12; jmp rax;
0x0012f3b6: add esp, 8; pop rbp; pop r12; jmp rax;
0x0012f3b8: or [rbp+0x41], bl; pop rsp; jmp rax;
0x0012f3b9: pop rbp; pop r12; jmp rax;
0x0012f3ba: pop r12; jmp rax;
0x0012f3bb: pop rsp; jmp rax;
0x0012f3c7: mov rax, fs:[0x28]; mov [rsp+0x38], rax; xor eax, eax; mov rdi, rsp; mov dword ptr [rsp], 2; call r8;
0x0012f3c8: mov rax, [0x28]; mov [rsp+0x38], rax; xor eax, eax; mov rdi, rsp; mov dword ptr [rsp], 2; call r8;
0x0012f3c9: mov eax, [0x28]; mov [rsp+0x38], rax; xor eax, eax; mov rdi, rsp; mov dword ptr [rsp], 2; call r8;
0x0012f3cb: and eax, 0x28; mov [rsp+0x38], rax; xor eax, eax; mov rdi, rsp; mov dword ptr [rsp], 2; call r8;
0x0012f3ce: add [rax], al; mov [rsp+0x38], rax; xor eax, eax; mov rdi, rsp; mov dword ptr [rsp], 2; call r8;
0x0012f3cf: add [rax-0x77], cl; and al, 0x38; xor eax, eax; mov rdi, rsp; mov dword ptr [rsp], 2; call r8;
0x0012f3d0: mov [rsp+0x38], rax; xor eax, eax; mov rdi, rsp; mov dword ptr [rsp], 2; call r8;
0x0012f3d1: mov [rsp+0x38], eax; xor eax, eax; mov rdi, rsp; mov dword ptr [rsp], 2; call r8;
0x0012f3d3: and al, 0x38; xor eax, eax; mov rdi, rsp; mov dword ptr [rsp], 2; call r8;
0x0012f3d4: cmp [rcx], dh; ror byte ptr [rax-0x77], 0xe7; mov dword ptr [rsp], 2; call r8;
0x0012f3d5: xor eax, eax; mov rdi, rsp; mov dword ptr [rsp], 2; call r8;
0x0012f3d6: ror byte ptr [rax-0x77], 0xe7; mov dword ptr [rsp], 2; call r8;
0x0012f3d7: mov rdi, rsp; mov dword ptr [rsp], 2; call r8;
0x0012f3d8: mov edi, esp; mov dword ptr [rsp], 2; call r8;
0x0012f3d9: out 0xc7, eax; add al, 0x24; add al, [rax]; add [rax], al; call r8;
0x0012f3da: mov dword ptr [rsp], 2; call r8;
0x0012f3db: add al, 0x24; add al, [rax]; add [rax], al; call r8;
0x0012f3dd: add al, [rax]; add [rax], al; call r8;
0x0012f3df: add [rax], al; call r8;
0x0012f3ef: add [rax], al; add [rbp+5], dh; add rsp, 0x48; ret;
0x0012f3f1: add [rbp+5], dh; add rsp, 0x48; ret;
0x0012f3f3: add eax, 0x48c48348; ret;
0x0012f3fa: and ah, dl; std; jmp qword ptr [rsi-0x70];
0x0012f3fe: xchg ax, ax; mov eax, 1; ret;
0x0012f3ff: nop; mov eax, 1; ret;
0x0012f4ca: add [rax], al; add [rbp+0x3b], dh; add rsp, 0x10; pop rbx; ret;
0x0012f4cc: add [rbp+0x3b], dh; add rsp, 0x10; pop rbx; ret;
0x0012f4f2: nop [rax+rax]; mov eax, [rsi]; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012f4f3: nop [rax+rax]; mov eax, [rsi]; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012f4f5: add [rax], r8b; mov eax, [rsi]; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012f4f6: add [rax], al; mov eax, [rsi]; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012f4f7: add [rbx-0x1976b7fa], cl; mov [rsp], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012f4f8: mov eax, [rsi]; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012f506: push rax; or bl, ch; mov ch, 0xe8; adc ecx, esp; std; call qword ptr [rax-0x3f7af875];
0x0012f507: or bl, ch; mov ch, 0xe8; adc ecx, esp; std; call qword ptr [rax-0x3f7af875];
0x0012f509: mov ch, 0xe8; adc ecx, esp; std; call qword ptr [rax-0x3f7af875];
0x0012f50b: adc ecx, esp; std; call qword ptr [rax-0x3f7af875];
0x0012f50d: std; call qword ptr [rax-0x3f7af875];
0x0012f50e: call qword ptr [rax-0x3f7af875];
0x0012f521: cmp eax, 2; sete al; movzx eax, al; ret;
0x0012f524: sete al; movzx eax, al; ret;
0x0012f52f: add [rbx-0x138afe08], al; mov rax, [rdi+8]; jmp qword ptr [rax];
0x0012f531: clc; add [rbp-0x14], esi; mov rax, [rdi+8]; jmp qword ptr [rax];
0x0012f532: add [rbp-0x14], esi; mov rax, [rdi+8]; jmp qword ptr [rax];
0x0012f534: in al, dx; mov rax, [rdi+8]; jmp qword ptr [rax];
0x0012f535: mov rax, [rdi+8]; jmp qword ptr [rax];
0x0012f536: mov eax, [rdi+8]; jmp qword ptr [rax];
0x0012f539: jmp qword ptr [rax];
0x0012f53b: nop [rax+rax]; mov rax, [rdi+8]; jmp qword ptr [rax+8];
0x0012f53d: add [rax], r8b; mov rax, [rdi+8]; jmp qword ptr [rax+8];
0x0012f53e: add [rax], al; mov rax, [rdi+8]; jmp qword ptr [rax+8];
0x0012f540: mov rax, [rdi+8]; jmp qword ptr [rax+8];
0x0012f541: mov eax, [rdi+8]; jmp qword ptr [rax+8];
0x0012f544: jmp qword ptr [rax+8];
0x0012f583: add [rax], al; add [rbp+0x63], dh; add rsp, 0x10; pop rbp; ret;
0x0012f585: add [rbp+0x63], dh; add rsp, 0x10; pop rbp; ret;
0x0012f5a7: add [rbp+0x41], dh; mov rax, [rdi+8]; mov rax, [rax+8]; add rsp, 0x10; pop rbp; jmp rax;
0x0012f5aa: mov rax, [rdi+8]; mov rax, [rax+8]; add rsp, 0x10; pop rbp; jmp rax;
0x0012f5ab: mov eax, [rdi+8]; mov rax, [rax+8]; add rsp, 0x10; pop rbp; jmp rax;
0x0012f5ae: mov rax, [rax+8]; add rsp, 0x10; pop rbp; jmp rax;
0x0012f5af: mov eax, [rax+8]; add rsp, 0x10; pop rbp; jmp rax;
0x0012f5b2: add rsp, 0x10; pop rbp; jmp rax;
0x0012f5b3: add esp, 0x10; pop rbp; jmp rax;
0x0012f5b6: pop rbp; jmp rax;
0x0012f5c4: add bl, ch; mov cl, 0x66; nop [rax+rax]; mov rax, [rdi+8]; mov rsi, rsp; call qword ptr [rax];
0x0012f5c6: mov cl, 0x66; nop [rax+rax]; mov rax, [rdi+8]; mov rsi, rsp; call qword ptr [rax];
0x0012f5c7: nop [rax+rax]; mov rax, [rdi+8]; mov rsi, rsp; call qword ptr [rax];
0x0012f5ec: xor al, ah; std; call qword ptr [rbp+0x48];
0x0012f5ee: std; call qword ptr [rbp+0x48];
0x0012f5ef: call qword ptr [rbp+0x48];
0x0012f688: mov rdx, rax; mov [rsp+0x10], rax; mov rax, [rdi+8]; sar rdx, 0x20; mov [rsp+8], rdx; call qword ptr [rax+8];
0x0012f689: mov edx, eax; mov [rsp+0x10], rax; mov rax, [rdi+8]; sar rdx, 0x20; mov [rsp+8], rdx; call qword ptr [rax+8];
0x0012f68b: mov [rsp+0x10], rax; mov rax, [rdi+8]; sar rdx, 0x20; mov [rsp+8], rdx; call qword ptr [rax+8];
0x0012f68c: mov [rsp+0x10], eax; mov rax, [rdi+8]; sar rdx, 0x20; mov [rsp+8], rdx; call qword ptr [rax+8];
0x0012f68e: and al, 0x10; mov rax, [rdi+8]; sar rdx, 0x20; mov [rsp+8], rdx; call qword ptr [rax+8];
0x0012f690: mov rax, [rdi+8]; sar rdx, 0x20; mov [rsp+8], rdx; call qword ptr [rax+8];
0x0012f691: mov eax, [rdi+8]; sar rdx, 0x20; mov [rsp+8], rdx; call qword ptr [rax+8];
0x0012f692: or [r8-0x3f], r9b; cli; and [rax-0x77], cl; push rsp; and al, 8; call qword ptr [rax+8];
0x0012f693: or [rax-0x3f], cl; cli; and [rax-0x77], cl; push rsp; and al, 8; call qword ptr [rax+8];
0x0012f694: sar rdx, 0x20; mov [rsp+8], rdx; call qword ptr [rax+8];
0x0012f695: sar edx, 0x20; mov [rsp+8], rdx; call qword ptr [rax+8];
0x0012f696: cli; and [rax-0x77], cl; push rsp; and al, 8; call qword ptr [rax+8];
0x0012f71e: test [rdx+0x48000000], ebx; add esp, 0x28; mov eax, r8d; pop rbx; pop rbp; ret;
0x0012f721: add [rax], al; add rsp, 0x28; mov eax, r8d; pop rbx; pop rbp; ret;
0x0012f723: add rsp, 0x28; mov eax, r8d; pop rbx; pop rbp; ret;
0x0012f724: add esp, 0x28; mov eax, r8d; pop rbx; pop rbp; ret;
0x0012f726: sub [rcx+rcx*4-0x40], al; pop rbx; pop rbp; ret;
0x0012f729: rcr byte ptr [rbx+0x5d], 0xc3; nop [rax]; mov rax, [rdi+8]; lea rsi, [rsp+8]; call qword ptr [rax];
0x0012f72d: nop [rax]; mov rax, [rdi+8]; lea rsi, [rsp+8]; call qword ptr [rax];
0x0012f730: mov rax, [rdi+8]; lea rsi, [rsp+8]; call qword ptr [rax];
0x0012f731: mov eax, [rdi+8]; lea rsi, [rsp+8]; call qword ptr [rax];
0x0012f734: lea rsi, [rsp+8]; call qword ptr [rax];
0x0012f735: lea esi, [rsp+8]; call qword ptr [rax];
0x0012f737: and al, 8; call qword ptr [rax];
0x0012f738: or bh, bh; adc [rbp+0x485574c0], al; mov eax, [rbp+8]; lea rsi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax];
0x0012f73a: adc [rbp+0x485574c0], al; mov eax, [rbp+8]; lea rsi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax];
0x0012f73e: push rbp; mov rax, [rbp+8]; lea rsi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax];
0x0012f73f: mov rax, [rbp+8]; lea rsi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax];
0x0012f740: mov eax, [rbp+8]; lea rsi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax];
0x0012f743: lea rsi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax];
0x0012f744: lea esi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax];
0x0012f746: and al, 0x10; mov rdi, rbp; call qword ptr [rax];
0x0012f747: adc [rax-0x77], cl; out dx, eax; call qword ptr [rax];
0x0012f748: mov rdi, rbp; call qword ptr [rax];
0x0012f749: mov edi, ebp; call qword ptr [rax];
0x0012f74a: out dx, eax; call qword ptr [rax];
0x0012f777: or [rax-0x77], cl; ret 0x8948;
0x0012f778: mov rdx, rax; mov [rsp+0x10], rax; mov rax, [rdi+8]; shr rdx, 0x20; mov [rsp+8], rdx; call qword ptr [rax+8];
0x0012f779: mov edx, eax; mov [rsp+0x10], rax; mov rax, [rdi+8]; shr rdx, 0x20; mov [rsp+8], rdx; call qword ptr [rax+8];
0x0012f77b: mov [rsp+0x10], rax; mov rax, [rdi+8]; shr rdx, 0x20; mov [rsp+8], rdx; call qword ptr [rax+8];
0x0012f77c: mov [rsp+0x10], eax; mov rax, [rdi+8]; shr rdx, 0x20; mov [rsp+8], rdx; call qword ptr [rax+8];
0x0012f77e: and al, 0x10; mov rax, [rdi+8]; shr rdx, 0x20; mov [rsp+8], rdx; call qword ptr [rax+8];
0x0012f780: mov rax, [rdi+8]; shr rdx, 0x20; mov [rsp+8], rdx; call qword ptr [rax+8];
0x0012f781: mov eax, [rdi+8]; shr rdx, 0x20; mov [rsp+8], rdx; call qword ptr [rax+8];
0x0012f784: shr rdx, 0x20; mov [rsp+8], rdx; call qword ptr [rax+8];
0x0012f785: shr edx, 0x20; mov [rsp+8], rdx; call qword ptr [rax+8];
0x0012f787: and [rax-0x77], cl; push rsp; and al, 8; call qword ptr [rax+8];
0x0012f788: mov [rsp+8], rdx; call qword ptr [rax+8];
0x0012f789: mov [rsp+8], edx; call qword ptr [rax+8];
0x0012f78a: push rsp; and al, 8; call qword ptr [rax+8];
0x0012f78b: and al, 8; call qword ptr [rax+8];
0x0012f79c: nop [rax]; mov rax, [rbp+8]; lea rsi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax+8];
0x0012f7a0: mov rax, [rbp+8]; lea rsi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax+8];
0x0012f7a1: mov eax, [rbp+8]; lea rsi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax+8];
0x0012f7a4: lea rsi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax+8];
0x0012f7a5: lea esi, [rsp+0x10]; mov rdi, rbp; call qword ptr [rax+8];
0x0012f7a7: and al, 0x10; mov rdi, rbp; call qword ptr [rax+8];
0x0012f7a8: adc [rax-0x77], cl; out dx, eax; call qword ptr [rax+8];
0x0012f7a9: mov rdi, rbp; call qword ptr [rax+8];
0x0012f7aa: mov edi, ebp; call qword ptr [rax+8];
0x0012f7ab: out dx, eax; call qword ptr [rax+8];
0x0012f7be: pop rsi; fdivp st(5), st; jmp qword ptr [rsi+0x66];
0x0012f7bf: fdivp st(5), st; jmp qword ptr [rsi+0x66];
0x0012f82a: add [rax], al; add [rbp+0x3d], dh; add rsp, 0x10; pop rbx; ret;
0x0012f82c: add [rbp+0x3d], dh; add rsp, 0x10; pop rbx; ret;
0x0012f82e: cmp eax, 0x10c48348; pop rbx; ret;
0x0012f853: nop [rax+rax]; movsx rax, word ptr [rsi]; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012f855: add [rax], r8b; movsx rax, word ptr [rsi]; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012f856: add [rax], al; movsx rax, word ptr [rsi]; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012f857: add [rax+0xf], cl; mov edi, 0xe6894806; mov [rsp], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012f858: movsx rax, word ptr [rsi]; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012f859: movsx eax, word ptr [rsi]; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012f85a: mov edi, 0xe6894806; mov [rsp], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012f8e3: nop [rax+rax]; movzx eax, word ptr [rsi]; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012f8e5: add [rax], r8b; movzx eax, word ptr [rsi]; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012f8e6: add [rax], al; movzx eax, word ptr [rsi]; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012f8e7: add [rdi], cl; mov bh, 6; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012f8e8: movzx eax, word ptr [rsi]; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012f8e9: mov bh, 6; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012f8f7: push rax; or bl, ch; mov ah, 0xe8; and ch, bl; std; call qword ptr [rbp+0x53];
0x0012f8f8: or bl, ch; mov ah, 0xe8; and ch, bl; std; call qword ptr [rbp+0x53];
0x0012f8fa: mov ah, 0xe8; and ch, bl; std; call qword ptr [rbp+0x53];
0x0012f8fc: and ch, bl; std; call qword ptr [rbp+0x53];
0x0012f945: nop [rax]; movsx rax, bpl; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012f947: add [rax+0xf], cl; mov esi, 0xe68948c5; mov [rsp], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012f948: movsx rax, bpl; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012f949: movsx eax, ch; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012f94a: mov esi, 0xe68948c5; mov [rsp], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012f98c: nop; fdiv st(5), st; call qword ptr [rbp+0x53];
0x0012f98d: fdiv st(5), st; call qword ptr [rbp+0x53];
0x0012f98e: std; call qword ptr [rbp+0x53];
0x0012f9c9: add [rax], al; add [rbp+0x4d], dh; add rsp, 0x18; pop rbx; pop rbp; ret;
0x0012f9cb: add [rbp+0x4d], dh; add rsp, 0x18; pop rbx; pop rbp; ret;
0x0012f9d5: nop [rax]; movzx eax, bpl; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012f9d7: add [rax+0xf], al; mov dh, 0xc5; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012f9d8: movzx eax, bpl; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012f9d9: movzx eax, ch; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012f9da: mov dh, 0xc5; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012f9f8: nop [rax+rax]; mov rax, [rdi+8]; mov rsi, rsp; call qword ptr [rax];
0x0012f9fa: test [rax], al; add [rax], al; add [rax], al; mov rax, [rdi+8]; mov rsi, rsp; call qword ptr [rax];
0x0012f9fc: add [rax], al; add [rax], al; mov rax, [rdi+8]; mov rsi, rsp; call qword ptr [rax];
0x0012f9fe: add [rax], al; mov rax, [rdi+8]; mov rsi, rsp; call qword ptr [rax];
0x0012fa1c: add ah, bl; std; call qword ptr [rbx+0x48];
0x0012fa1d: fdiv st(5), st; call qword ptr [rbx+0x48];
0x0012fa1e: std; call qword ptr [rbx+0x48];
0x0012fa5a: add [rax], al; add [rbp+0x4a], dh; add rsp, 0x10; pop rbx; ret;
0x0012fa5c: add [rbp+0x4a], dh; add rsp, 0x10; pop rbx; ret;
0x0012fa93: ror byte ptr [rax-0x77], 0xe6; test edx, edx; setne al; mov [rsp], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012fa94: mov rsi, rsp; test edx, edx; setne al; mov [rsp], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012fa95: mov esi, esp; test edx, edx; setne al; mov [rsp], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012fa97: test edx, edx; setne al; mov [rsp], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012fa98: ror byte ptr [rdi], cl; xchg ebp, eax; ror byte ptr [rax-0x77], 4; and al, 0x48; mov eax, [rdi+8]; call qword ptr [rax+8];
0x0012fa99: setne al; mov [rsp], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012fa9a: xchg ebp, eax; ror byte ptr [rax-0x77], 4; and al, 0x48; mov eax, [rdi+8]; call qword ptr [rax+8];
0x0012fa9b: ror byte ptr [rax-0x77], 4; and al, 0x48; mov eax, [rdi+8]; call qword ptr [rax+8];
0x0012faea: add [rax], al; add [rbp+0x3c], dh; add rsp, 0x10; pop rbx; ret;
0x0012faec: add [rbp+0x3c], dh; add rsp, 0x10; pop rbx; ret;
0x0012faee: cmp al, 0x48; add esp, 0x10; pop rbx; ret;
0x0012faf2: adc [rbx-0x3d], bl; nop [rax]; mov rax, [rdi+8]; mov rsi, rsp; call qword ptr [rax];
0x0012faf5: nop [rax]; mov rax, [rdi+8]; mov rsi, rsp; call qword ptr [rax];
0x0012faf8: mov rax, [rdi+8]; mov rsi, rsp; call qword ptr [rax];
0x0012faf9: mov eax, [rdi+8]; mov rsi, rsp; call qword ptr [rax];
0x0012fafc: mov rsi, rsp; call qword ptr [rax];
0x0012fafd: mov esi, esp; call qword ptr [rax];
0x0012fb12: nop [rax+rax]; movsxd rax, [rsi]; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012fb13: nop [rax+rax]; movsxd rax, [rsi]; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012fb15: add [rax], r8b; movsxd rax, [rsi]; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012fb16: add [rax], al; movsxd rax, [rsi]; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012fb18: movsxd rax, [rsi]; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012fb19: movsxd eax, [rsi]; mov rsi, rsp; mov [rsp], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012fb1b: mov rsi, rsp; mov [rsp], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012fb1c: mov esi, esp; mov [rsp], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012fb1d: out 0x48, al; mov [rsp], eax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012fb1e: mov [rsp], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012fb1f: mov [rsp], eax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012fb20: add al, 0x24; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012fb21: and al, 0x48; mov eax, [rdi+8]; call qword ptr [rax+8];
0x0012fb39: nop [rax]; mov eax, 1; ret;
0x0012fb3b: add byte ptr [rax], 0; add [rax], al; mov eax, 1; ret;
0x0012fb3c: add [rax], al; add [rax], al; mov eax, 1; ret;
0x0012fb3d: add [rax], al; add [rax+1], bh; ret;
0x0012fb3e: add [rax], al; mov eax, 1; ret;
0x0012fb3f: add [rax+1], bh; ret;
0x0012fbb2: nop [rax+rax]; mov eax, [rdx]; lea rsi, [rsp+0x10]; mov [rsp+0x10], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012fbb3: nop [rax+rax]; mov eax, [rdx]; lea rsi, [rsp+0x10]; mov [rsp+0x10], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012fbb5: add [rax], r8b; mov eax, [rdx]; lea rsi, [rsp+0x10]; mov [rsp+0x10], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012fbb6: add [rax], al; mov eax, [rdx]; lea rsi, [rsp+0x10]; mov [rsp+0x10], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012fbb7: add [rbx+0x748d4802], cl; and al, 0x10; mov [rsp+0x10], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012fbb8: mov eax, [rdx]; lea rsi, [rsp+0x10]; mov [rsp+0x10], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012fbba: lea rsi, [rsp+0x10]; mov [rsp+0x10], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012fbbb: lea esi, [rsp+0x10]; mov [rsp+0x10], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012fbbd: and al, 0x10; mov [rsp+0x10], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012fbbe: adc [rax-0x77], cl; and al, 0x10; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012fbbf: mov [rsp+0x10], rax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012fbc0: mov [rsp+0x10], eax; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012fbc2: and al, 0x10; mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012fbc4: mov rax, [rdi+8]; call qword ptr [rax+8];
0x0012fbc5: mov eax, [rdi+8]; call qword ptr [rax+8];
0x0012fc03: nop [rax+rax]; mov rax, [rdi+8]; lea rsi, [rsp+0x10]; call qword ptr [rax];
0x0012fc05: add [rax], r8b; mov rax, [rdi+8]; lea rsi, [rsp+0x10]; call qword ptr [rax];
0x0012fc06: add [rax], al; mov rax, [rdi+8]; lea rsi, [rsp+0x10]; call qword ptr [rax];
0x0012fc08: mov rax, [rdi+8]; lea rsi, [rsp+0x10]; call qword ptr [rax];
0x0012fc09: mov eax, [rdi+8]; lea rsi, [rsp+0x10]; call qword ptr [rax];
0x0012fc0c: lea rsi, [rsp+0x10]; call qword ptr [rax];
0x0012fc0d: lea esi, [rsp+0x10]; call qword ptr [rax];
0x0012fc0f: and al, 0x10; call qword ptr [rax];
0x0012fc21: ret 0x8941;
0x0012fceb: xor ecx, ebx; std; call qword ptr [rax-0x460d76b8];
0x0012fcec: fscale; call qword ptr [rax-0x460d76b8];
0x0012fced: std; call qword ptr [rax-0x460d76b8];
0x0012fcee: call qword ptr [rax-0x460d76b8];
0x0012fd42: sbb [r8-0x7d], cl; ret;
0x0012fd43: sbb [rax-0x7d], cl; ret;
0x0012fd58: test dword ptr [rcx+0x5c], 0xffffffba; inc dword ptr [rcx+0x5d]; xor eax, eax; pop r14; jmp rcx;
0x0012fd59: pop r12; mov edx, 0xffffffff; pop r13; xor eax, eax; pop r14; jmp rcx;
0x0012fd5a: pop rsp; mov edx, 0xffffffff; pop r13; xor eax, eax; pop r14; jmp rcx;
0x0012fd6d: add [rax], al; add [rbx+0x31], bl; rcr byte ptr [rbp+0x41], 0x5c; pop r13; pop r14; ret;
0x0012fd6f: add [rbx+0x31], bl; rcr byte ptr [rbp+0x41], 0x5c; pop r13; pop r14; ret;
0x0012fd71: xor eax, eax; pop rbp; pop r12; pop r13; pop r14; ret;
0x0012fd72: rcr byte ptr [rbp+0x41], 0x5c; pop r13; pop r14; ret;
0x0012fd8f: mov rcx, r13; mov edx, 0xffffffff; pop r13; xor eax, eax; pop r14; jmp rcx;
0x0012fd90: mov ecx, ebp; mov edx, 0xffffffff; pop r13; xor eax, eax; pop r14; jmp rcx;
0x0012fd92: mov edx, 0xffffffff; pop r13; xor eax, eax; pop r14; jmp rcx;
0x0012fd96: inc dword ptr [rcx+0x5d]; xor eax, eax; pop r14; jmp rcx;
0x0012fd97: pop r13; xor eax, eax; pop r14; jmp rcx;
0x0012fd98: pop rbp; xor eax, eax; pop r14; jmp rcx;
0x0012fd99: xor eax, eax; pop r14; jmp rcx;
0x0012fd9b: pop r14; jmp rcx;
0x0012fd9c: pop rsi; jmp rcx;
0x0012fef2: sub dl, bh; std; jmp qword ptr [rsi+0x2e];
0x0012fef3: xlat [rbx]; std; jmp qword ptr [rsi+0x2e];
0x0012ff0d: inc dword ptr [rbp-0x3f6af040]; add rsp, 8; movzx eax, al; ret;
0x0012ff0e: test eax, eax; setne al; add rsp, 8; movzx eax, al; ret;
0x0012ff0f: ror byte ptr [rdi], 0x95; ror byte ptr [rax-0x7d], 0xc4; or [rdi], cl; mov dh, 0xc0; ret;
0x0012ff10: setne al; add rsp, 8; movzx eax, al; ret;
0x0012ff11: xchg ebp, eax; ror byte ptr [rax-0x7d], 0xc4; or [rdi], cl; mov dh, 0xc0; ret;
0x0012ff12: ror byte ptr [rax-0x7d], 0xc4; or [rdi], cl; mov dh, 0xc0; ret;
0x0012ff13: add rsp, 8; movzx eax, al; ret;
0x0012ff14: add esp, 8; movzx eax, al; ret;
0x0012ff16: or [rdi], cl; mov dh, 0xc0; ret;
0x0012ffbe: mov rdx, rax; mov [rsp+4], eax; mov rax, [rdi+8]; sar rdx, 0x20; mov [rsp], edx; call qword ptr [rax+0x48];
0x0012ffbf: mov edx, eax; mov [rsp+4], eax; mov rax, [rdi+8]; sar rdx, 0x20; mov [rsp], edx; call qword ptr [rax+0x48];
0x0012ffc1: mov [rsp+4], eax; mov rax, [rdi+8]; sar rdx, 0x20; mov [rsp], edx; call qword ptr [rax+0x48];
0x0012ffc3: and al, 4; mov rax, [rdi+8]; sar rdx, 0x20; mov [rsp], edx; call qword ptr [rax+0x48];
0x0012ffc4: add al, 0x48; mov eax, [rdi+8]; sar rdx, 0x20; mov [rsp], edx; call qword ptr [rax+0x48];
0x0012ffc5: mov rax, [rdi+8]; sar rdx, 0x20; mov [rsp], edx; call qword ptr [rax+0x48];
0x0012ffc6: mov eax, [rdi+8]; sar rdx, 0x20; mov [rsp], edx; call qword ptr [rax+0x48];
0x0012ffc9: sar rdx, 0x20; mov [rsp], edx; call qword ptr [rax+0x48];
0x0012ffca: sar edx, 0x20; mov [rsp], edx; call qword ptr [rax+0x48];
0x00130062: test [rsi+0x48000000], edx; add esp, 0x18; mov eax, r8d; pop rbx; pop rbp; ret;
0x00130065: add [rax], al; add rsp, 0x18; mov eax, r8d; pop rbx; pop rbp; ret;
0x00130067: add rsp, 0x18; mov eax, r8d; pop rbx; pop rbp; ret;
0x00130068: add esp, 0x18; mov eax, r8d; pop rbx; pop rbp; ret;
0x0013006a: sbb [rcx+rcx*4-0x40], al; pop rbx; pop rbp; ret;
0x0013006d: rcr byte ptr [rbx+0x5d], 0xc3; nop [rax]; mov rax, [rdi+8]; mov rsi, rsp; call qword ptr [rax+0x40];
0x00130071: nop [rax]; mov rax, [rdi+8]; mov rsi, rsp; call qword ptr [rax+0x40];
0x00130073: add byte ptr [rax], 0; add [rax], al; mov rax, [rdi+8]; mov rsi, rsp; call qword ptr [rax+0x40];
0x00130074: add [rax], al; add [rax], al; mov rax, [rdi+8]; mov rsi, rsp; call qword ptr [rax+0x40];
0x00130076: add [rax], al; mov rax, [rdi+8]; mov rsi, rsp; call qword ptr [rax+0x40];
0x00130078: mov rax, [rdi+8]; mov rsi, rsp; call qword ptr [rax+0x40];
0x00130079: mov eax, [rdi+8]; mov rsi, rsp; call qword ptr [rax+0x40];
0x0013007c: mov rsi, rsp; call qword ptr [rax+0x40];
0x0013007d: mov esi, esp; call qword ptr [rax+0x40];
0x00130085: push rcx; mov rax, [rbp+8]; lea rsi, [rsp+4]; mov rdi, rbp; call qword ptr [rax+0x40];
0x00130086: mov rax, [rbp+8]; lea rsi, [rsp+4]; mov rdi, rbp; call qword ptr [rax+0x40];
0x00130087: mov eax, [rbp+8]; lea rsi, [rsp+4]; mov rdi, rbp; call qword ptr [rax+0x40];
0x0013008a: lea rsi, [rsp+4]; mov rdi, rbp; call qword ptr [rax+0x40];
0x0013008b: lea esi, [rsp+4]; mov rdi, rbp; call qword ptr [rax+0x40];
0x0013008d: and al, 4; mov rdi, rbp; call qword ptr [rax+0x40];
0x0013008e: add al, 0x48; mov edi, ebp; call qword ptr [rax+0x40];
0x0013008f: mov rdi, rbp; call qword ptr [rax+0x40];
0x00130090: mov edi, ebp; call qword ptr [rax+0x40];
0x00130091: out dx, eax; call qword ptr [rax+0x40];
0x001300be: mov rdx, rax; mov [rsp+4], eax; mov rax, [rdi+8]; shr rdx, 0x20; mov [rsp], edx; call qword ptr [rax+0x48];
0x001300bf: mov edx, eax; mov [rsp+4], eax; mov rax, [rdi+8]; shr rdx, 0x20; mov [rsp], edx; call qword ptr [rax+0x48];
0x001300c0: ret 0x4489;
0x001300c1: mov [rsp+4], eax; mov rax, [rdi+8]; shr rdx, 0x20; mov [rsp], edx; call qword ptr [rax+0x48];
0x001300c3: and al, 4; mov rax, [rdi+8]; shr rdx, 0x20; mov [rsp], edx; call qword ptr [rax+0x48];
0x001300c4: add al, 0x48; mov eax, [rdi+8]; shr rdx, 0x20; mov [rsp], edx; call qword ptr [rax+0x48];
0x001300c5: mov rax, [rdi+8]; shr rdx, 0x20; mov [rsp], edx; call qword ptr [rax+0x48];
0x001300c6: mov eax, [rdi+8]; shr rdx, 0x20; mov [rsp], edx; call qword ptr [rax+0x48];
0x001300c9: shr rdx, 0x20; mov [rsp], edx; call qword ptr [rax+0x48];
0x001300ca: shr edx, 0x20; mov [rsp], edx; call qword ptr [rax+0x48];
0x001300cd: mov [rsp], edx; call qword ptr [rax+0x48];
0x001300ce: adc al, 0x24; call qword ptr [rax+0x48];
0x001300de: call qword ptr [rax+0x8458b48];
0x001300df: nop; mov rax, [rbp+8]; lea rsi, [rsp+4]; mov rdi, rbp; call qword ptr [rax+0x48];
0x001300e0: mov rax, [rbp+8]; lea rsi, [rsp+4]; mov rdi, rbp; call qword ptr [rax+0x48];
0x001300e1: mov eax, [rbp+8]; lea rsi, [rsp+4]; mov rdi, rbp; call qword ptr [rax+0x48];
0x001300e4: lea rsi, [rsp+4]; mov rdi, rbp; call qword ptr [rax+0x48];
0x001300e5: lea esi, [rsp+4]; mov rdi, rbp; call qword ptr [rax+0x48];
0x001300e7: and al, 4; mov rdi, rbp; call qword ptr [rax+0x48];
0x001300e8: add al, 0x48; mov edi, ebp; call qword ptr [rax+0x48];
0x001300e9: mov rdi, rbp; call qword ptr [rax+0x48];
0x001300ea: mov edi, ebp; call qword ptr [rax+0x48];
0x001300eb: out dx, eax; call qword ptr [rax+0x48];
0x0013017e: rol byte ptr [rbp+0x442d74c0], 0x89; rol bl, 0x66; nop [rax+rax]; mov r8d, 1; mov eax, r8d; ret;
0x00130180: shl byte ptr [rbp+rbp+0x44], 0x89; rol bl, 0x66; nop [rax+rax]; mov r8d, 1; mov eax, r8d; ret;
0x00130182: sub eax, 0xc3c08944; nop [rax+rax]; mov r8d, 1; mov eax, r8d; ret;
0x00130185: rol bl, 0x66; nop [rax+rax]; mov r8d, 1; mov eax, r8d; ret;
0x00130187: nop [rax+rax]; mov r8d, 1; mov eax, r8d; ret;
0x00130188: nop [rax+rax]; mov r8d, 1; mov eax, r8d; ret;
0x0013018a: test [rax], al; add [rax], al; add [rax], al; mov r8d, 1; mov eax, r8d; ret;
0x0013018c: add [rax], al; add [rax], al; mov r8d, 1; mov eax, r8d; ret;
0x0013018d: add [rax], al; add [rcx-0x48], al; add [rax], eax; add [rax], al; mov eax, r8d; ret;
0x0013018e: add [rax], al; mov r8d, 1; mov eax, r8d; ret;
0x0013018f: add [rcx-0x48], al; add [rax], eax; add [rax], al; mov eax, r8d; ret;
0x00130198: rol bl, 0x66; nop [rax+rax]; mov rax, [rdi+8]; jmp qword ptr [rax+0x40];
0x0013019a: nop [rax+rax]; mov rax, [rdi+8]; jmp qword ptr [rax+0x40];
0x0013019b: nop [rax+rax]; mov rax, [rdi+8]; jmp qword ptr [rax+0x40];
0x0013019d: add [rax], r8b; mov rax, [rdi+8]; jmp qword ptr [rax+0x40];
0x0013019e: add [rax], al; mov rax, [rdi+8]; jmp qword ptr [rax+0x40];
0x001301a0: mov rax, [rdi+8]; jmp qword ptr [rax+0x40];
0x001301a1: mov eax, [rdi+8]; jmp qword ptr [rax+0x40];
0x001301a4: jmp qword ptr [rax+0x40];
0x001301a7: nop [rax+rax]; mov rax, [rdi+8]; jmp qword ptr [rax+0x48];
0x001301a8: nop [rax+rax]; mov rax, [rdi+8]; jmp qword ptr [rax+0x48];
0x001301aa: test [rax], al; add [rax], al; add [rax], al; mov rax, [rdi+8]; jmp qword ptr [rax+0x48];
0x001301ac: add [rax], al; add [rax], al; mov rax, [rdi+8]; jmp qword ptr [rax+0x48];
0x001301ae: add [rax], al; mov rax, [rdi+8]; jmp qword ptr [rax+0x48];
0x001301b0: mov rax, [rdi+8]; jmp qword ptr [rax+0x48];
0x001301b1: mov eax, [rdi+8]; jmp qword ptr [rax+0x48];
0x001301b4: jmp qword ptr [rax+0x48];
0x00130226: nop [rax+rax]; movsx eax, word ptr [rsi]; lea rsi, [rsp+4]; mov [rsp+4], eax; mov rax, [rdi+8]; call qword ptr [rax+0x48];
0x00130227: nop [rax+rax]; movsx eax, word ptr [rsi]; lea rsi, [rsp+4]; mov [rsp+4], eax; mov rax, [rdi+8]; call qword ptr [rax+0x48];
0x00130228: nop [rax+rax]; movsx eax, word ptr [rsi]; lea rsi, [rsp+4]; mov [rsp+4], eax; mov rax, [rdi+8]; call qword ptr [rax+0x48];
0x0013022e: add [rax], al; movsx eax, word ptr [rsi]; lea rsi, [rsp+4]; mov [rsp+4], eax; mov rax, [rdi+8]; call qword ptr [rax+0x48];
0x0013022f: add [rdi], cl; mov edi, 0x748d4806; and al, 4; mov [rsp+4], eax; mov rax, [rdi+8]; call qword ptr [rax+0x48];
0x00130230: movsx eax, word ptr [rsi]; lea rsi, [rsp+4]; mov [rsp+4], eax; mov rax, [rdi+8]; call qword ptr [rax+0x48];
0x00130231: mov edi, 0x748d4806; and al, 4; mov [rsp+4], eax; mov rax, [rdi+8]; call qword ptr [rax+0x48];
0x0013028a: add [rax], al; add [rbp+0x46], dh; add rsp, 0x10; pop rbx; ret;
0x0013028c: add [rbp+0x46], dh; add rsp, 0x10; pop rbx; ret;
0x001302b6: nop [rax+rax]; movzx eax, word ptr [rsi]; lea rsi, [rsp+4]; mov [rsp+4], eax; mov rax, [rdi+8]; call qword ptr [rax+0x48];
0x001302b7: nop [rax+rax]; movzx eax, word ptr [rsi]; lea rsi, [rsp+4]; mov [rsp+4], eax; mov rax, [rdi+8]; call qword ptr [rax+0x48];
0x001302b8: nop [rax+rax]; movzx eax, word ptr [rsi]; lea rsi, [rsp+4]; mov [rsp+4], eax; mov rax, [rdi+8]; call qword ptr [rax+0x48];
0x001302be: add [rax], al; movzx eax, word ptr [rsi]; lea rsi, [rsp+4]; mov [rsp+4], eax; mov rax, [rdi+8]; call qword ptr [rax+0x48];
0x001302bf: add [rdi], cl; mov bh, 6; lea rsi, [rsp+4]; mov [rsp+4], eax; mov rax, [rdi+8]; call qword ptr [rax+0x48];
0x001302c0: movzx eax, word ptr [rsi]; lea rsi, [rsp+4]; mov [rsp+4], eax; mov rax, [rdi+8]; call qword ptr [rax+0x48];
0x001302c1: mov bh, 6; lea rsi, [rsp+4]; mov [rsp+4], eax; mov rax, [rdi+8]; call qword ptr [rax+0x48];
0x001302d7: sar ebp, cl; jmp qword ptr [rsi+0xf];
0x00130345: nop [rax]; movsx eax, byte ptr [rsi]; lea rsi, [rsp+4]; mov [rsp+4], eax; mov rax, [rdi+8]; call qword ptr [rax+0x48];
0x00130347: add [rdi], cl; mov esi, 0x748d4806; and al, 4; mov [rsp+4], eax; mov rax, [rdi+8]; call qword ptr [rax+0x48];
0x00130348: movsx eax, byte ptr [rsi]; lea rsi, [rsp+4]; mov [rsp+4], eax; mov rax, [rdi+8]; call qword ptr [rax+0x48];
0x00130349: mov esi, 0x748d4806; and al, 4; mov [rsp+4], eax; mov rax, [rdi+8]; call qword ptr [rax+0x48];
0x0013035f: sar ch, cl; jmp qword ptr [rsi+0x66];
0x001303aa: add [rax], al; add [rbp+0x3e], dh; add rsp, 0x10; pop rbx; ret;
0x001303ac: add [rbp+0x3e], dh; add rsp, 0x10; pop rbx; ret;
0x001303ae: add rsp, 0x10; pop rbx; ret;
0x001303b2: adc [rbx-0x3d], bl; nop [rax]; mov rax, [rdi+8]; lea rsi, [rsp+4]; call qword ptr [rax+0x40];
0x001303b5: nop [rax]; mov rax, [rdi+8]; lea rsi, [rsp+4]; call qword ptr [rax+0x40];
0x001303b8: mov rax, [rdi+8]; lea rsi, [rsp+4]; call qword ptr [rax+0x40];
0x001303b9: mov eax, [rdi+8]; lea rsi, [rsp+4]; call qword ptr [rax+0x40];
0x001303bc: lea rsi, [rsp+4]; call qword ptr [rax+0x40];
0x001303bd: lea esi, [rsp+4]; call qword ptr [rax+0x40];
0x001303bf: and al, 4; call qword ptr [rax+0x40];
0x001303c1: call qword ptr [rax+0x40];
0x001303d5: nop [rax]; movzx eax, byte ptr [rsi]; lea rsi, [rsp+4]; mov [rsp+4], eax; mov rax, [rdi+8]; call qword ptr [rax+0x48];
0x001303d7: add [rdi], cl; mov dh, 6; lea rsi, [rsp+4]; mov [rsp+4], eax; mov rax, [rdi+8]; call qword ptr [rax+0x48];
0x001303d8: movzx eax, byte ptr [rsi]; lea rsi, [rsp+4]; mov [rsp+4], eax; mov rax, [rdi+8]; call qword ptr [rax+0x48];
0x001303d9: mov dh, 6; lea rsi, [rsp+4]; mov [rsp+4], eax; mov rax, [rdi+8]; call qword ptr [rax+0x48];
0x001303db: lea rsi, [rsp+4]; mov [rsp+4], eax; mov rax, [rdi+8]; call qword ptr [rax+0x48];
0x001303dc: lea esi, [rsp+4]; mov [rsp+4], eax; mov rax, [rdi+8]; call qword ptr [rax+0x48];
0x001303de: and al, 4; mov [rsp+4], eax; mov rax, [rdi+8]; call qword ptr [rax+0x48];
0x001303df: add al, 0x89; and al, 4; mov rax, [rdi+8]; call qword ptr [rax+0x48];
0x001303e0: mov [rsp+4], eax; mov rax, [rdi+8]; call qword ptr [rax+0x48];
0x001303e2: and al, 4; mov rax, [rdi+8]; call qword ptr [rax+0x48];
0x001303e3: add al, 0x48; mov eax, [rdi+8]; call qword ptr [rax+0x48];
0x001303e4: mov rax, [rdi+8]; call qword ptr [rax+0x48];
0x001303e5: mov eax, [rdi+8]; call qword ptr [rax+0x48];
0x001303e8: call qword ptr [rax+0x48];
0x001303ec: mov dl, 0xe8; sar ch, cl; jmp qword ptr [rsi+0x2e];
0x001303ee: sar ch, cl; jmp qword ptr [rsi+0x2e];
0x001303ef: sar ch, cl; jmp qword ptr [rsi+0x2e];
0x001303ff: add bl, al; nop [rax+rax]; nop [rax]; mov rax, [rdi+0x18]; sub rax, [rdi+0x20]; ret;
0x00130402: nop [rax+rax]; nop [rax]; mov rax, [rdi+0x18]; sub rax, [rdi+0x20]; ret;
0x00130403: nop [rax+rax]; nop [rax]; mov rax, [rdi+0x18]; sub rax, [rdi+0x20]; ret;
0x00130404: nop [rax+rax]; nop [rax]; mov rax, [rdi+0x18]; sub rax, [rdi+0x20]; ret;
0x00130408: add [rax], al; add [rax], al; nop [rax]; mov rax, [rdi+0x18]; sub rax, [rdi+0x20]; ret;
0x0013040a: add [rax], al; nop [rax]; mov rax, [rdi+0x18]; sub rax, [rdi+0x20]; ret;
0x0013040c: nop [rax]; mov rax, [rdi+0x18]; sub rax, [rdi+0x20]; ret;
0x00130410: mov rax, [rdi+0x18]; sub rax, [rdi+0x20]; ret;
0x00130411: mov eax, [rdi+0x18]; sub rax, [rdi+0x20]; ret;
0x00130414: sub rax, [rdi+0x20]; ret;
0x00130415: sub eax, [rdi+0x20]; ret;
0x00130444: shl byte ptr [rbp+0x1c], 1; mov r8d, 1; mov [rdi+0x28], eax; mov [rdi+0x18], rsi; mov eax, r8d; ret;
0x00130446: sbb al, 0x41; mov eax, 1; mov [rdi+0x28], eax; mov [rdi+0x18], rsi; mov eax, r8d; ret;
0x00130447: mov r8d, 1; mov [rdi+0x28], eax; mov [rdi+0x18], rsi; mov eax, r8d; ret;
0x00130448: mov eax, 1; mov [rdi+0x28], eax; mov [rdi+0x18], rsi; mov eax, r8d; ret;
0x00130449: add [rax], eax; add [rax], al; mov [rdi+0x28], eax; mov [rdi+0x18], rsi; mov eax, r8d; ret;
0x0013044b: add [rax], al; mov [rdi+0x28], eax; mov [rdi+0x18], rsi; mov eax, r8d; ret;
0x0013044d: mov [rdi+0x28], eax; mov [rdi+0x18], rsi; mov eax, r8d; ret;
0x00130450: mov [rdi+0x18], rsi; mov eax, r8d; ret;
0x00130451: mov [rdi+0x18], esi; mov eax, r8d; ret;
0x00130458: nop [rax+rax]; xor r8d, r8d; mov eax, r8d; ret;
0x0013045a: test [rax], al; add [rax], al; add [rax], al; xor r8d, r8d; mov eax, r8d; ret;
0x0013045c: add [rax], al; add [rax], al; xor r8d, r8d; mov eax, r8d; ret;
0x0013045e: add [rax], al; xor r8d, r8d; mov eax, r8d; ret;
0x00130480: mov esi, esi; mov [rdi+0x28], eax; add rsi, r8; mov [rdi+0x18], rsi; mov rax, r8; ret;
0x00130481: test byte ptr [rcx+0x14c2847], 0xc6; mov [rdi+0x18], rsi; mov rax, r8; ret;
0x00130482: mov [rdi+0x28], eax; add rsi, r8; mov [rdi+0x18], rsi; mov rax, r8; ret;
0x00130483: sub [r9+r8-0x3a], r9b; mov [rdi+0x18], rsi; mov rax, r8; ret;
0x00130484: sub [rcx+rax-0x3a], cl; mov [rdi+0x18], rsi; mov rax, r8; ret;
0x00130485: add rsi, r8; mov [rdi+0x18], rsi; mov rax, r8; ret;
0x00130486: add esi, eax; mov [rdi+0x18], rsi; mov rax, r8; ret;
0x00130488: mov [rdi+0x18], rsi; mov rax, r8; ret;
0x00130489: mov [rdi+0x18], esi; mov rax, r8; ret;
0x0013048b: sbb [rcx+rcx*4-0x40], cl; ret;
0x0013048c: mov rax, r8; ret;
0x001304ad: add rax, 4; bswap edx; mov [rax-4], edx; mov [rdi+0x18], rax; mov eax, r8d; ret;
0x001304ae: add eax, 4; bswap edx; mov [rax-4], edx; mov [rdi+0x18], rax; mov eax, r8d; ret;
0x001304af: rol byte ptr [rdi+rcx], 0xca; mov [rax-4], edx; mov [rdi+0x18], rax; mov eax, r8d; ret;
0x001304b1: bswap edx; mov [rax-4], edx; mov [rdi+0x18], rax; mov eax, r8d; ret;
0x001304dc: adc [rax-0x7d], cl; rol byte ptr [rdi+rcx], 0xca; mov [rsi], edx; mov [rdi+0x18], rax; mov eax, r8d; ret;
0x001304dd: add rax, 4; bswap edx; mov [rsi], edx; mov [rdi+0x18], rax; mov eax, r8d; ret;
0x001304de: add eax, 4; bswap edx; mov [rsi], edx; mov [rdi+0x18], rax; mov eax, r8d; ret;
0x001304df: rol byte ptr [rdi+rcx], 0xca; mov [rsi], edx; mov [rdi+0x18], rax; mov eax, r8d; ret;
0x001304e1: bswap edx; mov [rsi], edx; mov [rdi+0x18], rax; mov eax, r8d; ret;
0x001304e3: mov [rsi], edx; mov [rdi+0x18], rax; mov eax, r8d; ret;
0x0013050e: bswap edx; add rax, 4; mov [rax-4], edx; mov [rdi+0x18], rax; mov eax, r8d; ret;
0x00130510: add rax, 4; mov [rax-4], edx; mov [rdi+0x18], rax; mov eax, r8d; ret;
0x00130511: add eax, 4; mov [rax-4], edx; mov [rdi+0x18], rax; mov eax, r8d; ret;
0x00130512: rol byte ptr [rcx+rcx*4], 0x50; cld; mov [rdi+0x18], rax; mov eax, r8d; ret;
0x00130513: add al, 0x89; push rax; cld; mov [rdi+0x18], rax; mov eax, r8d; ret;
0x00130514: mov [rax-4], edx; mov [rdi+0x18], rax; mov eax, r8d; ret;
0x00130515: push rax; cld; mov [rdi+0x18], rax; mov eax, r8d; ret;
0x00130516: cld; mov [rdi+0x18], rax; mov eax, r8d; ret;
0x00130517: mov [rdi+0x18], rax; mov eax, r8d; ret;
0x00130518: mov [rdi+0x18], eax; mov eax, r8d; ret;
0x00130519: sbb [r9+r9*4-0x40], r8b; ret;
0x0013053c: add cl, [rax-0x7d]; ret 0xf04;
0x00130540: add al, 0xf; enter 0x9848, 0x48; mov [rsi], eax; mov [rdi+0x18], rdx; mov eax, r8d; ret;
0x00130541: bswap eax; cdqe; mov [rsi], rax; mov [rdi+0x18], rdx; mov eax, r8d; ret;
0x00130542: enter 0x9848, 0x48; mov [rsi], eax; mov [rdi+0x18], rdx; mov eax, r8d; ret;
0x00130543: cdqe; mov [rsi], rax; mov [rdi+0x18], rdx; mov eax, r8d; ret;
0x00130544: cwde; mov [rsi], rax; mov [rdi+0x18], rdx; mov eax, r8d; ret;
0x00130545: mov [rsi], rax; mov [rdi+0x18], rdx; mov eax, r8d; ret;
0x00130546: mov [rsi], eax; mov [rdi+0x18], rdx; mov eax, r8d; ret;
0x00130548: mov [rdi+0x18], rdx; mov eax, r8d; ret;
0x00130549: mov [rdi+0x18], edx; mov eax, r8d; ret;
0x0013054a: push rdi; sbb [rcx+rcx*4-0x40], al; ret;
0x0013054b: sbb [rcx+rcx*4-0x40], al; ret;
0x0013054e: rol bl, 0x8b; sub [r9], r15b; shl byte ptr [rbx+9], 1; xor r8d, r8d; mov eax, r8d; ret;
0x00130551: sub [r9], r15b; shl byte ptr [rbx+9], 1; xor r8d, r8d; mov eax, r8d; ret;
0x00130552: sub [rcx], bh; shl byte ptr [rbx+9], 1; xor r8d, r8d; mov eax, r8d; ret;
0x00130554: shl byte ptr [rbx+9], 1; xor r8d, r8d; mov eax, r8d; ret;
0x00130557: xor r8d, r8d; mov eax, r8d; ret;
0x00130558: xor eax, eax; mov eax, r8d; ret;
0x001305bd: mov r8d, 1; add rsp, 8; mov eax, r8d; pop rbx; pop rbp; ret;
0x001305be: mov eax, 1; add rsp, 8; mov eax, r8d; pop rbx; pop rbp; ret;
0x001305c1: add [rax], al; add rsp, 8; mov eax, r8d; pop rbx; pop rbp; ret;
0x001305c3: add rsp, 8; mov eax, r8d; pop rbx; pop rbp; ret;
0x001305c4: add esp, 8; mov eax, r8d; pop rbx; pop rbp; ret;
0x001305c6: or [rcx+rcx*4-0x40], al; pop rbx; pop rbp; ret;
0x001305c7: mov eax, r8d; pop rbx; pop rbp; ret;
0x001305c8: mov eax, eax; pop rbx; pop rbp; ret;
0x001305d7: mov [rdi], ecx; mov [rdi+8], rax; mov [rdi+0x20], rsi; mov [rdi+0x18], rsi; mov [rdi+0x28], edx; ret;
0x001305d9: mov [rdi+8], rax; mov [rdi+0x20], rsi; mov [rdi+0x18], rsi; mov [rdi+0x28], edx; ret;
0x001305da: mov [rdi+8], eax; mov [rdi+0x20], rsi; mov [rdi+0x18], rsi; mov [rdi+0x28], edx; ret;
0x001305dd: mov [rdi+0x20], rsi; mov [rdi+0x18], rsi; mov [rdi+0x28], edx; ret;
0x001305de: mov [rdi+0x20], esi; mov [rdi+0x18], rsi; mov [rdi+0x28], edx; ret;
0x001305e1: mov [rdi+0x18], rsi; mov [rdi+0x28], edx; ret;
0x001305e2: mov [rdi+0x18], esi; mov [rdi+0x28], edx; ret;
0x001305e5: mov [rdi+0x28], edx; ret;
0x00130603: in al, 0x74; sub dh, [rcx]; sar byte ptr [rdx-1], 0x4c; mov esi, esp; mov rdi, rbx; call rcx;
0x00130605: sub dh, [rcx]; sar byte ptr [rdx-1], 0x4c; mov esi, esp; mov rdi, rbx; call rcx;
0x00130606: xor eax, eax; mov edx, 0xffffffff; mov rsi, r12; mov rdi, rbx; call rcx;
0x00130607: sar byte ptr [rdx-1], 0x4c; mov esi, esp; mov rdi, rbx; call rcx;
0x00130608: mov edx, 0xffffffff; mov rsi, r12; mov rdi, rbx; call rcx;
0x0013060c: dec dword ptr [rcx+rcx*4-0x1a]; mov rdi, rbx; call rcx;
0x0013060d: mov rsi, r12; mov rdi, rbx; call rcx;
0x0013060e: mov esi, esp; mov rdi, rbx; call rcx;
0x0013060f: out 0x48, al; mov edi, ebx; call rcx;
0x00130610: mov rdi, rbx; call rcx;
0x00130611: mov edi, ebx; call rcx;
0x00130619: test [rdx+0x48000000], cl; add esp, 0x10; pop rbx; pop rbp; pop r12; ret;
0x0013061c: add [rax], al; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret;
0x0013063e: add dh, [rbp+rbx*8-0x15]; ret;
0x00130640: fucomp st, st(3); ret;
0x001306bb: add [rbx+0x48082444], cl; add esp, 0x10; pop rbx; pop rbp; pop r12; ret;
0x001306bc: mov eax, [rsp+8]; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret;
0x001306be: and al, 8; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret;
0x001306c0: add rsp, 0x10; pop rbx; pop rbp; pop r12; ret;
0x001306c1: add esp, 0x10; pop rbx; pop rbp; pop r12; ret;
0x001306c3: adc [rbx+0x5d], bl; pop r12; ret;
0x00130737: add rsp, 0x18; pop rbp; pop r12; pop r13; pop r14; ret;
0x00130738: add esp, 0x18; pop rbp; pop r12; pop r13; pop r14; ret;
0x0013073a: sbb [rbp+0x41], bl; pop rsp; pop r13; pop r14; ret;
0x0013075c: ror dh, 0xfd; inc dword ptr [rbx-0x47fbd7b9]; add [rax], eax; add [rax], al; ret;
0x0013075e: std; inc dword ptr [rbx-0x47fbd7b9]; add [rax], eax; add [rax], al; ret;
0x0013075f: inc dword ptr [rbx-0x47fbd7b9]; add [rax], eax; add [rax], al; ret;
0x00130766: add [rax], al; add bl, al; nop [rax+rax]; add [rdi+0x28], edx; mov eax, 1; ret;
0x00130768: add bl, al; nop [rax+rax]; add [rdi+0x28], edx; mov eax, 1; ret;
0x0013076a: nop [rax+rax]; add [rdi+0x28], edx; mov eax, 1; ret;
0x0013076b: nop [rax+rax]; add [rdi+0x28], edx; mov eax, 1; ret;
0x0013076d: add [rax], r8b; add [rdi+0x28], edx; mov eax, 1; ret;
0x0013076e: add [rax], al; add [rdi+0x28], edx; mov eax, 1; ret;
0x0013076f: add [rcx], al; push rdi; sub [rax+1], bh; ret;
0x00130770: add [rdi+0x28], edx; mov eax, 1; ret;
0x00130771: push rdi; sub [rax+1], bh; ret;
0x00130772: sub [rax+1], bh; ret;
0x00130775: add [rax], al; add bl, al; nop [rax]; mov eax, [rdi+0x28]; ret;
0x00130777: add bl, al; nop [rax]; mov eax, [rdi+0x28]; ret;
0x00130779: nop [rax]; mov eax, [rdi+0x28]; ret;
0x0013077b: add byte ptr [rax], 0; add [rax], al; mov eax, [rdi+0x28]; ret;
0x0013077c: add [rax], al; add [rax], al; mov eax, [rdi+0x28]; ret;
0x0013077d: add [rax], al; add [rbx+0x66c32847], cl; nop [rax+rax]; nop; xor eax, eax; ret;
0x0013077e: add [rax], al; mov eax, [rdi+0x28]; ret;
0x0013077f: add [rbx+0x66c32847], cl; nop [rax+rax]; nop; xor eax, eax; ret;
0x00130780: mov eax, [rdi+0x28]; ret;
0x00130781: sub r11b, r8b; nop [rax+rax]; nop; xor eax, eax; ret;
0x00130782: sub bl, al; nop [rax+rax]; nop; xor eax, eax; ret;
0x00130785: nop [rax+rax]; nop; xor eax, eax; ret;
0x00130786: nop [rax+rax]; nop; xor eax, eax; ret;
0x00130787: nop [rax+rax]; nop; xor eax, eax; ret;
0x00130789: test [rax], al; add [rax], al; add [rax], al; nop; xor eax, eax; ret;
0x0013078b: add [rax], al; add [rax], al; nop; xor eax, eax; ret;
0x0013078c: add [rax], al; add [rax+0x66c3c031], dl; nop [rax+rax]; xchg ax, ax; xor eax, eax; ret;
0x0013078d: add [rax], al; nop; xor eax, eax; ret;
0x0013078e: add [rax+0x66c3c031], dl; nop [rax+rax]; xchg ax, ax; xor eax, eax; ret;
0x00130791: rol bl, 0x66; nop [rax+rax]; xchg ax, ax; xor eax, eax; ret;
0x00130794: nop [rax+rax]; xchg ax, ax; xor eax, eax; ret;
0x00130795: nop [rax+rax]; xchg ax, ax; xor eax, eax; ret;
0x00130796: nop [rax+rax]; xchg ax, ax; xor eax, eax; ret;
0x00130798: test [rax], al; add [rax], al; add [rax], al; xchg ax, ax; xor eax, eax; ret;
0x00130799: add [rax], al; add [rax], al; add [rsi-0x70], ah; xor eax, eax; ret;
0x0013079a: add [rax], al; add [rax], al; xchg ax, ax; xor eax, eax; ret;
0x0013079b: add [rax], al; add [rsi-0x70], ah; xor eax, eax; ret;
0x0013079c: add [rax], al; xchg ax, ax; xor eax, eax; ret;
0x0013079d: add [rsi-0x70], ah; xor eax, eax; ret;
0x0013079e: xchg ax, ax; xor eax, eax; ret;
0x0013079f: nop; xor eax, eax; ret;
0x001307d1: mov qword ptr [rbx+0x18], 0; pop rbx; ret;
0x001307d2: mov dword ptr [rbx+0x18], 0; pop rbx; ret;
0x001307f9: and [rsi+0xc], dh; add [rbx+0x28], ebp; pop rbx; pop rbp; pop r12; ret;
0x001307fb: or al, 1; imul ebp, [rax], 0x5b; pop rbp; pop r12; ret;
0x001307fc: add [rbx+0x28], ebp; pop rbx; pop rbp; pop r12; ret;
0x001307fd: imul ebp, [rax], 0x5b; pop rbp; pop r12; ret;
0x001307fe: sub [rbx+0x5d], bl; pop r12; ret;
0x0013082a: nop [rax+rax]; xor eax, eax; ret;
0x00130833: nop [rax+rax]; pop rbx; xor eax, eax; pop rbp; pop r12; ret;
0x00130835: add [rax], r8b; pop rbx; xor eax, eax; pop rbp; pop r12; ret;
0x00130836: add [rax], al; pop rbx; xor eax, eax; pop rbp; pop r12; ret;
0x00130837: add [rbx+0x31], bl; rcr byte ptr [rbp+0x41], 0x5c; ret;
0x00130838: pop rbx; xor eax, eax; pop rbp; pop r12; ret;
0x00130839: xor eax, eax; pop rbp; pop r12; ret;
0x0013083a: rcr byte ptr [rbp+0x41], 0x5c; ret;
0x00130849: nop [rax]; add dword ptr [rdi+0x28], 4; mov eax, 1; ret;
0x0013084b: add byte ptr [rax], 0; add [rax], al; add dword ptr [rdi+0x28], 4; mov eax, 1; ret;
0x0013084c: add [rax], al; add [rax], al; add dword ptr [rdi+0x28], 4; mov eax, 1; ret;
0x0013084d: add [rax], al; add [rbx-0x47fbd7b9], al; add [rax], eax; add [rax], al; ret;
0x0013084e: add [rax], al; add dword ptr [rdi+0x28], 4; mov eax, 1; ret;
0x0013084f: add [rbx-0x47fbd7b9], al; add [rax], eax; add [rax], al; ret;
0x00130850: add dword ptr [rdi+0x28], 4; mov eax, 1; ret;
0x00130851: sub [r8+r15*4], r8b; add [rax], eax; add [rax], al; ret;
0x00130852: sub [rax+rdi*4], al; add [rax], eax; add [rax], al; ret;
0x00130853: add al, 0xb8; add [rax], eax; add [rax], al; ret;
0x00130900: mov [rsp+0x40], rax; mov [rsp+0x70], rax; lea rax, [rsp+0x30]; mov [rsp+8], rax; xor eax, eax; call r8;
0x00130901: mov [rsp+0x40], eax; mov [rsp+0x70], rax; lea rax, [rsp+0x30]; mov [rsp+8], rax; xor eax, eax; call r8;
0x00130903: and al, 0x40; mov [rsp+0x70], rax; lea rax, [rsp+0x30]; mov [rsp+8], rax; xor eax, eax; call r8;
0x00130905: mov [rsp+0x70], rax; lea rax, [rsp+0x30]; mov [rsp+8], rax; xor eax, eax; call r8;
0x00130906: mov [rsp+0x70], eax; lea rax, [rsp+0x30]; mov [rsp+8], rax; xor eax, eax; call r8;
0x00130908: and al, 0x70; lea rax, [rsp+0x30]; mov [rsp+8], rax; xor eax, eax; call r8;
0x0013090a: lea rax, [rsp+0x30]; mov [rsp+8], rax; xor eax, eax; call r8;
0x0013090b: lea eax, [rsp+0x30]; mov [rsp+8], rax; xor eax, eax; call r8;
0x0013090d: and al, 0x30; mov [rsp+8], rax; xor eax, eax; call r8;
0x0013090e: xor [rax-0x77], cl; and al, 8; xor eax, eax; call r8;
0x0013090f: mov [rsp+8], rax; xor eax, eax; call r8;
0x00130910: mov [rsp+8], eax; xor eax, eax; call r8;
0x00130912: and al, 8; xor eax, eax; call r8;
0x00130914: xor eax, eax; call r8;
0x00130916: call r8;
0x0013093e: add [rax], al; add [rbp+9], dh; add rsp, 0x90; pop rbx; ret;
0x00130940: add [rbp+9], dh; add rsp, 0x90; pop rbx; ret;
0x00130943: add rsp, 0x90; pop rbx; ret;
0x00130944: add esp, 0x90; pop rbx; ret;
0x00130951: nop [rax+rax]; nop [rax+rax]; xor eax, eax; ret;
0x00130952: nop [rax+rax]; nop [rax+rax]; xor eax, eax; ret;
0x00130953: nop [rax+rax]; nop [rax+rax]; xor eax, eax; ret;
0x00130955: test [rax], al; add [rax], al; add [rax], al; nop [rax+rax]; xor eax, eax; ret;
0x00130957: add [rax], al; add [rax], al; nop [rax+rax]; xor eax, eax; ret;
0x00130959: add [rax], al; nop [rax+rax]; xor eax, eax; ret;
0x001309c2: pop rdx; int3; std; jmp qword ptr [rsi+0x2e];
0x001309c3: int3; std; jmp qword ptr [rsi+0x2e];
0x00130a15: add [rax], al; add [rbp+8], dh; movzx eax, al; add rsp, 0x18; ret;
0x00130a17: add [rbp+8], dh; movzx eax, al; add rsp, 0x18; ret;
0x00130a19: or [rdi], cl; mov dh, 0xc0; add rsp, 0x18; ret;
0x00130a1a: movzx eax, al; add rsp, 0x18; ret;
0x00130a1b: mov dh, 0xc0; add rsp, 0x18; ret;
0x00130b02: sbb cl, bl; std; jmp qword ptr [rsi+0x2e];
0x00130b2e: ret 0xfff4;
0x00130b31: add rsp, 8; not eax; shr eax, 0x1f; ret;
0x00130b32: add esp, 8; not eax; shr eax, 0x1f; ret;
0x00130b35: not eax; shr eax, 0x1f; ret;
0x00130b37: shr eax, 0x1f; ret;
0x00130b47: sbb al, ch; ret;
0x00130b5f: add [rbp+0x410c75d2], al; mov eax, 1; mov eax, r8d; ret;
0x00130ba1: shl byte ptr [rbp+0xc], cl; mov r8d, 1; mov eax, r8d; ret;
0x00130ba3: or al, 0x41; mov eax, 1; mov eax, r8d; ret;
0x00130ba4: mov r8d, 1; mov eax, r8d; ret;
0x00130ba5: mov eax, 1; mov eax, r8d; ret;
0x00130ba6: add [rax], eax; add [rax], al; mov eax, r8d; ret;
0x00130bcb: xor r8d, r8d; cmp rax, 1; sete r8b; add rsp, 8; mov eax, r8d; ret;
0x00130bcc: xor eax, eax; cmp rax, 1; sete r8b; add rsp, 8; mov eax, r8d; ret;
0x00130bcd: ror byte ptr [rax-0x7d], 0xf8; add [rcx+0xf], eax; xchg esp, eax; ror byte ptr [rax-0x7d], 0xc4; or [rcx+rcx*4-0x40], al; ret;
0x00130bce: cmp rax, 1; sete r8b; add rsp, 8; mov eax, r8d; ret;
0x00130bcf: cmp eax, 1; sete r8b; add rsp, 8; mov eax, r8d; ret;
0x00130bd0: clc; add [rcx+0xf], eax; xchg esp, eax; ror byte ptr [rax-0x7d], 0xc4; or [rcx+rcx*4-0x40], al; ret;
0x00130bd1: add [rcx+0xf], eax; xchg esp, eax; ror byte ptr [rax-0x7d], 0xc4; or [rcx+rcx*4-0x40], al; ret;
0x00130bd2: sete r8b; add rsp, 8; mov eax, r8d; ret;
0x00130bd3: sete al; add rsp, 8; mov eax, r8d; ret;
0x00130bd4: xchg esp, eax; ror byte ptr [rax-0x7d], 0xc4; or [rcx+rcx*4-0x40], al; ret;
0x00130be7: mov [rdi], edx; mov [rdi+8], rax; mov [rdi+0x18], rsi; mov dword ptr [rdi+0x28], 0; mov qword ptr [rdi+0x20], 0; ret;
0x00130be9: mov [rdi+8], rax; mov [rdi+0x18], rsi; mov dword ptr [rdi+0x28], 0; mov qword ptr [rdi+0x20], 0; ret;
0x00130bea: mov [rdi+8], eax; mov [rdi+0x18], rsi; mov dword ptr [rdi+0x28], 0; mov qword ptr [rdi+0x20], 0; ret;
0x00130bed: mov [rdi+0x18], rsi; mov dword ptr [rdi+0x28], 0; mov qword ptr [rdi+0x20], 0; ret;
0x00130bee: mov [rdi+0x18], esi; mov dword ptr [rdi+0x28], 0; mov qword ptr [rdi+0x20], 0; ret;
0x00130bf1: mov dword ptr [rdi+0x28], 0; mov qword ptr [rdi+0x20], 0; ret;
0x00130bf4: add [rax], al; add [rax], al; mov qword ptr [rdi+0x20], 0; ret;
0x00130bf6: add [rax], al; mov qword ptr [rdi+0x20], 0; ret;
0x00130bf8: mov qword ptr [rdi+0x20], 0; ret;
0x00130bf9: mov dword ptr [rdi+0x20], 0; ret;
0x00130c15: dec dword ptr [rax-0x75]; cmp [rax-0x77], cl; ret;
0x00130c18: cmp [rax-0x77], cl; ret;
0x00130c2d: mov dword ptr [rax], 0; pop rbx; ret;
0x00130c64: cwde; ret;
0x00130ce2: ret 0x4c89;
0x00130ce6: add [rdi], cl; mov bh, 0x4c; ret 0x6604;
0x00130ce8: mov bh, 0x4c; ret 0x6604;
0x00130cea: ret 0x6604;
0x00130f3d: ffreep st(6); std; jmp qword ptr [rsi+0x2e];
0x00130f5e: test byte ptr [rax-0x73], 0x35; ret;
0x00130f62: ret;
0x0013128e: call qword ptr [rax+0x44ef8948];
0x00131300: adc [rax+0x39], cl; ret 0x3375;
0x00131303: ret 0x3375;
0x00131353: leave; ret 0xfffd;
0x001315da: sbb cl, [rax-0x75]; add [r11-0x7483dbac], r9b; or [r9], dil; ret 0x4e75;
0x001315dd: add [r11-0x7483dbac], r9b; or [r9], dil; ret 0x4e75;
0x001315de: add [rbx-0x7483dbac], cl; or [r9], dil; ret 0x4e75;
0x001315e4: or [r9], dil; ret 0x4e75;
0x001316a6: xor al, 0; add [rcx-0x77], al; ret 0xf883;
0x001316a8: add [rcx-0x77], al; ret 0xf883;
0x001317c4: ret 0xe975;
0x0013188e: call qword ptr [rax+0xff6854d];
0x00131b74: add rsp, 0x28; pop rbx; pop rbp; pop r12; pop r13; ret;
0x00131b75: add esp, 0x28; pop rbx; pop rbp; pop r12; pop r13; ret;
0x00131b77: sub [rbx+0x5d], bl; pop r12; pop r13; ret;
0x00131b78: pop rbx; pop rbp; pop r12; pop r13; ret;
0x00131c2e: fmul st, dword ptr [rax-9]; fadd st, dword ptr [rbx+0x14807e0]; ret;
0x00131c31: fadd st, dword ptr [rbx+0x14807e0]; ret;
0x00131da1: or [r9], dil; ret 0x3975;
0x00131da2: or [rcx], bh; ret 0x3975;
0x00131da4: ret 0x3975;
0x00131ddb: add [rax], al; add [rax], al; add [rcx-0xa37b], cl; jmp far fword ptr [rax+0x412e7501];
0x00131ddd: add [rax], al; add [rcx-0xa37b], cl; jmp far fword ptr [rax+0x412e7501];
0x00131ddf: add [rcx-0xa37b], cl; jmp far fword ptr [rax+0x412e7501];
0x00131de1: test [rdi+rdi*8-1], ebx; jmp far fword ptr [rax+0x412e7501];
0x00131de5: jmp far fword ptr [rax+0x412e7501];
0x00131e8e: call qword ptr [rax-0x874275];
0x00131f0e: call qword ptr [rax-0x140bf];
0x001320ce: call qword ptr [rax-0x8b427d];
0x00132107: or byte ptr [rbx-6], 0x83; ret 0x4901;
0x0013210c: ret 0x4901;
0x001321dd: dec dword ptr [rax+0x39]; ret;
0x00132317: dec dword ptr [rax+0x39]; ret 0x850f;
0x001323a0: mov dl, 0xfd; jmp qword ptr [rsi+0x66];
0x0013249b: idiv bh; jmp qword ptr [rsi-0x70];
0x001324ad: add [rax], al; add bl, ch; fdivr st, dword ptr [rax-1]; ret;
0x001324af: add bl, ch; fdivr st, dword ptr [rax-1]; ret;
0x001324b1: fdivr st, dword ptr [rax-1]; ret;
0x001324f9: add rsp, 0x20; mov eax, r12d; pop rbx; pop rbp; pop r12; ret;
0x001324fa: add esp, 0x20; mov eax, r12d; pop rbx; pop rbp; pop r12; ret;
0x001324fc: and [rcx+rcx*4-0x20], al; pop rbx; pop rbp; pop r12; ret;
0x001324fd: mov eax, r12d; pop rbx; pop rbp; pop r12; ret;
0x001324fe: mov eax, esp; pop rbx; pop rbp; pop r12; ret;
0x001325af: dec dword ptr [rax-0x75]; add ebp, ebx; mov eax, gs; mov al, 0xfd; jmp qword ptr [rsi+0xf];
0x001325b2: add ebp, ebx; mov eax, gs; mov al, 0xfd; jmp qword ptr [rsi+0xf];
0x001325b4: mov eax, gs; mov al, 0xfd; jmp qword ptr [rsi+0xf];
0x001325b7: mov al, 0xfd; jmp qword ptr [rsi+0xf];
0x0013298d: and [rax+0x39], cl; ret 0xac74;
0x00132990: ret 0xac74;
0x00132ab0: adc [rcx-0x7d], al; iretd;
0x00132b6e: or [rax+0x63], cl; push rax; and [rcx+0x39342454], cl; iretd;
0x00132b71: push rax; and [rcx+0x39342454], cl; iretd;
0x00132b72: and [rcx+0x39342454], cl; iretd;
0x00132b76: xor al, 0x39; iretd;
0x00132b95: sbb [rax+0x39], cl; ret 0x870f;
0x00132b98: ret 0x870f;
0x00132c93: add [rbp+0x31], al; fild st, dword ptr [rcx-0x77]; ret 0xf883;
0x00132c96: fild st, dword ptr [rcx-0x77]; ret 0xf883;
0x00132c99: ret 0xf883;
0x00132cf7: add [rax], al; add [rcx+0x63], cl; iretd;
0x00132cf9: add [rcx+0x63], cl; iretd;
0x00132dee: add [rcx+0x63], ecx; iretd;
0x00132e23: lea eax, [rax]; add [rax], al; add [rcx-0x77], cl; iretd;
0x00132e25: add [rax], al; add [rcx-0x77], cl; iretd;
0x00132e27: add [rcx-0x77], cl; iretd;
0x00132e3e: call qword ptr [rax+0x129605c7];
0x00132f18: adc al, 0x22; out dx, eax; dec dword ptr [rax-0x77]; ret;
0x00132f19: and ch, bh; dec dword ptr [rax-0x77]; ret;
0x00132f1a: out dx, eax; dec dword ptr [rax-0x77]; ret;
0x00132fcd: fadd st, dword ptr [rbx-0x76b7f820]; ret;
0x0013304a: mov [r11+0x148087a], cs; ret;
0x0013304b: mov [rbx+0x148087a], cs; ret;
0x0013304e: or [rax+1], cl; ret;
0x001330f4: push rdx; or [rcx], bh; ret 0x4e75;
0x001330f5: or [rcx], bh; ret 0x4e75;
0x001330f7: ret 0x4e75;
0x00133268: cmp [rax-0x77], cl; ret 0x894c;
0x00133415: call far fword ptr [rsi];
0x001337a5: sbb [rbx+0x5d], bl; pop r12; pop r13; pop r14; pop r15; ret;
0x001337c4: dec dword ptr [rbp-0x77]; iretd;
0x00133826: idiv bh; call far fword ptr [rdx+0x59];
0x00133828: call far fword ptr [rdx+0x59];
0x0013383a: cmovs eax, [rbx+0x5d5b28c4]; pop r12; pop r13; pop r14; pop r15; ret;
0x0013384c: popfq; std; call qword ptr [rax+0x56415741];
0x0013384d: std; call qword ptr [rax+0x56415741];
0x0013384e: call qword ptr [rax+0x56415741];
0x00133afd: add [rcx], al; add [rax], al; add cl, ch; ret 0xfffe;
0x00133b12: fwait; std; jmp qword ptr [rsi+0x66];
0x00133cb1: mov esp, 0x8bb8558b; or [rcx], dil; ror dword ptr [rdi], 1; test [rdx-0x75000000], dl; or [rcx], dil; ret 0x850f;
0x00133cb3: push rbp; mov eax, 0x3908488b; ror dword ptr [rdi], 1; test [rdx-0x75000000], dl; or [rcx], dil; ret 0x850f;
0x00133cb4: mov eax, 0x3908488b; ror dword ptr [rdi], 1; test [rdx-0x75000000], dl; or [rcx], dil; ret 0x850f;
0x00133cb6: or [rcx], dil; ror dword ptr [rdi], 1; test [rdx-0x75000000], dl; or [rcx], dil; ret 0x850f;
0x00133cb7: or [rcx], bh; ror dword ptr [rdi], 1; test [rdx-0x75000000], dl; or [rcx], dil; ret 0x850f;
0x00133cb9: ror dword ptr [rdi], 1; test [rdx-0x75000000], dl; or [rcx], dil; ret 0x850f;
0x00133cbb: test [rdx-0x75000000], dl; or [rcx], dil; ret 0x850f;
0x00133cc1: or [rcx], dil; ret 0x850f;
0x00133cc2: or [rcx], bh; ret 0x850f;
0x00133cc4: ret 0x850f;
0x00133d6d: jmp qword ptr [rax+0x31450008];
0x00133d70: add [rbp+0x31], al; jmp qword ptr [rdi+rax*8];
0x00133d8e: dec dword ptr [rcx-0x75]; add [r11+0x408bb855], r9b; or [rcx], bh; ret 0x840f;
0x00133d91: add [r11+0x408bb855], r9b; or [rcx], bh; ret 0x840f;
0x00133d92: add [rbx+0x408bb855], cl; or [rcx], bh; ret 0x840f;
0x00133d94: push rbp; mov eax, 0x3908408b; ret 0x840f;
0x00133d95: mov eax, 0x3908408b; ret 0x840f;
0x00133d97: or [rcx], dil; ret 0x840f;
0x00133d98: or [rcx], bh; ret 0x840f;
0x00133d9a: ret 0x840f;
0x00133e8c: nop; xchg edi, eax; std; inc dword ptr [rcx-0x7d]; iretd;
0x00133e8d: xchg edi, eax; std; inc dword ptr [rcx-0x7d]; iretd;
0x00133e8e: std; inc dword ptr [rcx-0x7d]; iretd;
0x00133e8f: inc dword ptr [rcx-0x7d]; iretd;
0x00133eff: sub [rbx+0x5d], bl; pop r12; pop r13; pop r14; pop r15; ret;
0x00133fa7: ret 0x2949;
0x00133fc6: push rsi; xchg esi, eax; std; jmp qword ptr [rsi+0xf];
0x00133fc7: xchg esi, eax; std; jmp qword ptr [rsi+0xf];
0x0013404e: jmp qword ptr [rbx+0x6b];
0x001341b1: jmp far fword ptr [rcx-0x36];
0x0013423c: pop rbp; mov rax, r12; pop r12; pop r13; pop r14; ret;
0x0013423d: mov rax, r12; pop r12; pop r13; pop r14; ret;
0x0013423e: mov eax, esp; pop r12; pop r13; pop r14; ret;
0x0013426a: mov rax, r12; pop rbp; pop r12; pop r13; pop r14; ret;
0x0013426b: mov eax, esp; pop rbp; pop r12; pop r13; pop r14; ret;
0x0013442f: add bl, ch; mov ecx, 0xfd91e9e8; jmp qword ptr [rsi+0xf];
0x00134431: mov ecx, 0xfd91e9e8; jmp qword ptr [rsi+0xf];
0x00134434: xchg ecx, eax; std; jmp qword ptr [rsi+0xf];
0x0013447c: add eax, esi; call qword ptr [rax-0x1a76b7ab];
0x0013447e: call qword ptr [rax-0x1a76b7ab];
0x0013449a: add [rax], eax; add [rax-0x77], cl; xchg ebp, eax; cmp dh, 0xff; jmp qword ptr [rax+rcx*2-0x75];
0x0013449c: add [rax-0x77], cl; xchg ebp, eax; cmp dh, 0xff; jmp qword ptr [rax+rcx*2-0x75];
0x0013449f: xchg ebp, eax; cmp dh, 0xff; jmp qword ptr [rax+rcx*2-0x75];
0x001344a0: cmp dh, 0xff; jmp qword ptr [rax+rcx*2-0x75];
0x001344da: jmp qword ptr [rbx+rcx*4+0xb];
0x0013459d: call qword ptr [rax+rax];
0x001345bd: out dx, eax; mov al, 0xfb; dec dword ptr [rbx-0x1737b]; jmp qword ptr [rcx+rcx*4+3];
0x001345be: mov al, 0xfb; dec dword ptr [rbx-0x1737b]; jmp qword ptr [rcx+rcx*4+3];
0x001345bf: sti; dec dword ptr [rbx-0x1737b]; jmp qword ptr [rcx+rcx*4+3];
0x001345c0: dec dword ptr [rbx-0x1737b]; jmp qword ptr [rcx+rcx*4+3];
0x001345c6: jmp qword ptr [rcx+rcx*4+3];
0x00134862: out 0x8d, eax; add eax, 0x3d8d4800; out dx, al; lea eax, [rip-0x2511800]; out dx, eax; jmp qword ptr [rsi+0x66];
0x00134863: lea eax, [rip+0x3d8d4800]; out dx, al; lea eax, [rip-0x2511800]; out dx, eax; jmp qword ptr [rsi+0x66];
0x00134864: add eax, 0x3d8d4800; out dx, al; lea eax, [rip-0x2511800]; out dx, eax; jmp qword ptr [rsi+0x66];
0x00134869: out dx, al; lea eax, [rip-0x2511800]; out dx, eax; jmp qword ptr [rsi+0x66];
0x0013486a: lea eax, [rip-0x2511800]; out dx, eax; jmp qword ptr [rsi+0x66];
0x0013486b: add eax, 0xfdaee800; out dx, eax; jmp qword ptr [rsi+0x66];
0x0013486c: add al, ch; scasb [rdi]; std; out dx, eax; jmp qword ptr [rsi+0x66];
0x0013486e: scasb [rdi]; std; out dx, eax; jmp qword ptr [rsi+0x66];
0x0013486f: std; out dx, eax; jmp qword ptr [rsi+0x66];
0x00134870: out dx, eax; jmp qword ptr [rsi+0x66];
0x00134995: add [rax], eax; add [rbx+rdi+0x3c], cl; and al, 0x72; mov [0xffff4be924048b49], al; jmp qword ptr [rsi+0xf];
0x00134997: add [rbx+rdi+0x3c], cl; and al, 0x72; mov [0xffff4be924048b49], al; jmp qword ptr [rsi+0xf];
0x0013499b: and al, 0x72; mov [0xffff4be924048b49], al; jmp qword ptr [rsi+0xf];
0x0013499d: mov [0xffff4be924048b49], al; jmp qword ptr [rsi+0xf];
0x00134a80: sbb [rax-0x7d], ecx; ret;
0x00134c4e: sti; inc dword ptr [rbp-0x577af040]; add [rax], al; add al, ch; ret;
0x00134c4f: inc dword ptr [rbp-0x577af040]; add [rax], al; add al, ch; ret;
0x00134c53: test [rax-0x18000000], ebp; ret;
0x00134ceb: add [rax], al; add [rbp+0x1f], dh; add rsp, 0x520; mov rax, r12; pop r12; ret;
0x00134ced: add [rbp+0x1f], dh; add rsp, 0x520; mov rax, r12; pop r12; ret;
0x00134cf0: add rsp, 0x520; mov rax, r12; pop r12; ret;
0x00134cf1: add esp, 0x520; mov rax, r12; pop r12; ret;
0x00134cf5: add [rax], al; mov rax, r12; pop r12; ret;
0x00134cf6: add [rcx+rcx*4-0x20], cl; pop r12; ret;
0x00134d10: or al, 0x89; std; jmp qword ptr [rsi+0x66];
0x00134d11: mov ebp, edi; jmp qword ptr [rsi+0x66];
0x00134d34: add [rbp+0x481778c0], al; lea eax, [rip+0x8f420]; mov edx, 0; cmovne rax, rdx; add rsp, 8; ret;
0x00134d36: sar byte ptr [rax+0x17], 0x48; lea eax, [rip+0x8f420]; mov edx, 0; cmovne rax, rdx; add rsp, 8; ret;
0x00134d39: lea rax, [rip+0x8f420]; mov edx, 0; cmovne rax, rdx; add rsp, 8; ret;
0x00134d3a: lea eax, [rip+0x8f420]; mov edx, 0; cmovne rax, rdx; add rsp, 8; ret;
0x00134d3b: add eax, 0x8f420; mov edx, 0; cmovne rax, rdx; add rsp, 8; ret;
0x00134d3c: and ah, dh; or [rax], al; mov edx, 0; cmovne rax, rdx; add rsp, 8; ret;
0x00134d3d: hlt; or [rax], al; mov edx, 0; cmovne rax, rdx; add rsp, 8; ret;
0x00134d3e: or [rax], al; mov edx, 0; cmovne rax, rdx; add rsp, 8; ret;
0x00134d3f: add [rdx], bh; cmovne rax, rdx; add rsp, 8; ret;
0x00134d40: mov edx, 0; cmovne rax, rdx; add rsp, 8; ret;
0x00134d41: add [rax], al; add [rax], al; cmovne rax, rdx; add rsp, 8; ret;
0x00134d42: add [rax], al; add [rax+0xf], cl; ret 0x8348;
0x00134d43: add [rax], al; cmovne rax, rdx; add rsp, 8; ret;
0x00134d44: add [rax+0xf], cl; ret 0x8348;
0x00134d45: cmovne rax, rdx; add rsp, 8; ret;
0x00134d46: cmovne eax, edx; add rsp, 8; ret;
0x00134d70: call qword ptr [rbx+0x48];
0x00134ddf: add [rax], al; add al, ch; stc; add al, 0xef; jmp qword ptr [rbx+rcx*4+4];
0x00134de1: add al, ch; stc; add al, 0xef; jmp qword ptr [rbx+rcx*4+4];
0x00134de3: stc; add al, 0xef; jmp qword ptr [rbx+rcx*4+4];
0x00134de4: add al, 0xef; jmp qword ptr [rbx+rcx*4+4];
0x00134de5: out dx, eax; jmp qword ptr [rbx+rcx*4+4];
0x00134de6: jmp qword ptr [rbx+rcx*4+4];
0x00134ecc: mov [rbp+0x31], eax; sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x8f29e]; syscall;
0x00134ed6: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x8f29e; syscall;
0x00134edc: add [rax], al; add [rax-0x73], cl; cmp eax, 0x8f29e; syscall;
0x00134ede: add [rax-0x73], cl; cmp eax, 0x8f29e; syscall;
0x00134ee1: cmp eax, 0x8f29e; syscall;
0x00134f14: xchg ebp, edi; jmp qword ptr [rsi+0xf];
0x00134f93: out 0xe8, eax; xchg eax, esi; sti; dec dword ptr [rax-0x77]; ret;
0x00134f95: xchg eax, esi; sti; dec dword ptr [rax-0x77]; ret;
0x00134f97: sti; dec dword ptr [rax-0x77]; ret;
0x00135141: inc dword ptr [rbp+0x480a78c0]; add esp, 8; pop rbp; pop r12; ret;
0x00135143: sar byte ptr [rax+0xa], 0x48; add esp, 8; pop rbp; pop r12; ret;
0x00135146: add rsp, 8; pop rbp; pop r12; ret;
0x00135147: add esp, 8; pop rbp; pop r12; ret;
0x00135149: or [rbp+0x41], bl; pop rsp; ret;
0x00135162: nop [rax+rax]; nop [rax]; mov rax, [rip+0x88cf9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x00135163: nop [rax+rax]; nop [rax]; mov rax, [rip+0x88cf9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x00135164: nop [rax+rax]; nop [rax]; mov rax, [rip+0x88cf9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x0013516a: add [rax], al; nop [rax]; mov rax, [rip+0x88cf9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x0013516c: nop [rax]; mov rax, [rip+0x88cf9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x0013516f: add [rax-0x75], cl; add eax, 0x88cf9; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x00135172: add eax, 0x88cf9; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x00135173: stc; mov [rax], cs; add [rdi+rax*8], ah; add [rax], al; add [rax-1], bh; ret;
0x00135174: mov [rax], cs; add [rdi+rax*8], ah; add [rax], al; add [rax-1], bh; ret;
0x00135194: add eax, 0xffff96e9; call qword ptr [rax-0x18];
0x001351db: add [rax], al; add [rbp+0x2c], dh; add rsp, 0x18; ret;
0x001351dd: add [rbp+0x2c], dh; add rsp, 0x18; ret;
0x001351df: sub al, 0x48; add esp, 0x18; ret;
0x0013520e: test ch, bh; jmp qword ptr [rsi+0x2e];
0x0013524c: xor eax, [rbx+0x8ef302d]; add [rcx], al; add rsp, 8; ret;
0x00135296: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x8eede; syscall;
0x0013529c: add [rax], al; add [rax-0x73], cl; cmp eax, 0x8eede; syscall;
0x0013529e: add [rax-0x73], cl; cmp eax, 0x8eede; syscall;
0x001352a1: cmp eax, 0x8eede; syscall;
0x001352a2: fsubp st(6), st; or [rax], al; syscall;
0x001352e6: sub qword ptr [rip+0x8ee96], 1; add rsp, 0x10; mov eax, r8d; pop rbp; ret;
0x00135346: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x8ee2e; syscall;
0x0013534c: add [rax], al; add [rax-0x73], cl; cmp eax, 0x8ee2e; syscall;
0x0013534e: add [rax-0x73], cl; cmp eax, 0x8ee2e; syscall;
0x00135351: cmp eax, 0x8ee2e; syscall;
0x00135352: out dx, al; or [rax], al; syscall;
0x00135353: out dx, al; or [rax], al; syscall;
0x0013538c: add [rax], al; add [rbp-0x7cd28a40], al; sub eax, 0x8edea; add [rcx+rcx*4-0x40], ecx; pop rbp; ret;
0x0013538e: add [rbp-0x7cd28a40], al; sub eax, 0x8edea; add [rcx+rcx*4-0x40], ecx; pop rbp; ret;
0x00135390: shl byte ptr [rbp+0x2d], 0x83; sub eax, 0x8edea; add [rcx+rcx*4-0x40], ecx; pop rbp; ret;
0x00135392: sub eax, 0xedea2d83; or [rax], al; add [rcx+rcx*4-0x40], ecx; pop rbp; ret;
0x00135393: sub dword ptr [rip+0x8edea], 1; mov rax, r8; pop rbp; ret;
0x00135394: sub eax, 0x8edea; add [rcx+rcx*4-0x40], ecx; pop rbp; ret;
0x00135396: in eax, dx; or [rax], al; add [rcx+rcx*4-0x40], ecx; pop rbp; ret;
0x00135397: or [rax], al; add [rcx+rcx*4-0x40], ecx; pop rbp; ret;
0x00135398: add [rcx], al; mov rax, r8; pop rbp; ret;
0x00135399: add [rcx+rcx*4-0x40], ecx; pop rbp; ret;
0x001353d6: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x8ed9e; syscall;
0x001353dc: add [rax], al; add [rax-0x73], cl; cmp eax, 0x8ed9e; syscall;
0x001353de: add [rax-0x73], cl; cmp eax, 0x8ed9e; syscall;
0x001353e1: cmp eax, 0x8ed9e; syscall;
0x001353e2: sahf; in eax, dx; or [rax], al; syscall;
0x0013541c: xor eax, [rbx+0x8ed602d]; add [rcx], al; add rsp, 8; ret;
0x0013541d: sub dword ptr [rip+0x8ef30], 1; add rsp, 8; ret;
0x00135422: add [rcx], al; add rsp, 8; ret;
0x0013545c: mov dword ptr [rbp+0x31], 0x1bad2; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x8eede]; syscall;
0x00135466: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x8ed0e; syscall;
0x0013546c: add [rax], al; add [rax-0x73], cl; cmp eax, 0x8ed0e; syscall;
0x0013546e: add [rax-0x73], cl; cmp eax, 0x8ed0e; syscall;
0x00135471: cmp eax, 0x8ed0e; syscall;
0x00135473: in eax, dx; or [rax], al; syscall;
0x00135542: add [rax], al; add [rbp+0x2d], dh; add rsp, 0x10; pop rbp; ret;
0x00135544: add [rbp+0x2d], dh; add rsp, 0x10; pop rbp; ret;
0x00135546: sub eax, 0x10c48348; pop rbp; ret;
0x00135547: add rsp, 0x10; pop rbp; ret;
0x00135548: add esp, 0x10; pop rbp; ret;
0x0013562e: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x8eb46; syscall;
0x00135634: add [rax], al; add [rax-0x73], cl; cmp eax, 0x8eb46; syscall;
0x00135636: add [rax-0x73], cl; cmp eax, 0x8eb46; syscall;
0x00135639: cmp eax, 0x8eb46; syscall;
0x00135642: mov rax, [rip+0x88827]; mov r8d, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, r8d; mov qword ptr [rdx], 0; ret;
0x00135643: mov eax, [rip+0x88827]; mov r8d, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, r8d; mov qword ptr [rdx], 0; ret;
0x00135644: add eax, 0x88827; mov r8d, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, r8d; mov qword ptr [rdx], 0; ret;
0x00135647: or [rax], al; mov r8d, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, r8d; mov qword ptr [rdx], 0; ret;
0x00135649: mov r8d, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, r8d; mov qword ptr [rdx], 0; ret;
0x0013564a: mov eax, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, r8d; mov qword ptr [rdx], 0; ret;
0x0013564f: mov dword ptr fs:[rax], 0x16; mov eax, r8d; mov qword ptr [rdx], 0; ret;
0x00135650: mov dword ptr [rax], 0x16; mov eax, r8d; mov qword ptr [rdx], 0; ret;
0x00135651: add [rsi], dl; add [rax], al; add [rcx+rcx*4-0x40], al; mov qword ptr [rdx], 0; ret;
0x00135653: add [rax], al; add [rcx+rcx*4-0x40], al; mov qword ptr [rdx], 0; ret;
0x00135654: add [rax], al; mov eax, r8d; mov qword ptr [rdx], 0; ret;
0x00135655: add [rcx+rcx*4-0x40], al; mov qword ptr [rdx], 0; ret;
0x00135656: mov eax, r8d; mov qword ptr [rdx], 0; ret;
0x00135657: mov eax, eax; mov qword ptr [rdx], 0; ret;
0x00135658: ror byte ptr [rax-0x39], 2; add [rax], al; add [rax], al; ret;
0x00135659: mov qword ptr [rdx], 0; ret;
0x0013565a: mov dword ptr [rdx], 0; ret;
0x001356a6: push rcx; sub dword ptr [rip+0x8ebb6], 1; add rsp, 0x10; mov eax, r8d; pop rbp; ret;
0x001356a7: sub dword ptr [rip+0x8ee96], 1; add rsp, 0x10; mov eax, r8d; pop rbp; ret;
0x001356ac: add [rcx], al; add rsp, 0x10; mov eax, r8d; pop rbp; ret;
0x001356ae: add rsp, 0x10; mov eax, r8d; pop rbp; ret;
0x001356af: add esp, 0x10; mov eax, r8d; pop rbp; ret;
0x001356b1: adc [rcx+rcx*4-0x40], al; pop rbp; ret;
0x001356b2: mov eax, r8d; pop rbp; ret;
0x0013570e: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x8ea66; syscall;
0x00135714: add [rax], al; add [rax-0x73], cl; cmp eax, 0x8ea66; syscall;
0x00135716: add [rax-0x73], cl; cmp eax, 0x8ea66; syscall;
0x00135719: cmp eax, 0x8ea66; syscall;
0x0013571d: add [rdi], cl; add eax, 0x2e668ceb; nop [rax+rax]; nop [rax]; ret;
0x0013571f: add eax, 0x2e668ceb; nop [rax+rax]; nop [rax]; ret;
0x00135721: mov [rsi+0x2e], fs; nop [rax+rax]; nop [rax]; ret;
0x00135722: nop [rax+rax]; nop [rax]; ret;
0x00135723: nop [rax+rax]; nop [rax]; ret;
0x00135724: nop [rax+rax]; nop [rax]; ret;
0x00135726: test [rax], al; add [rax], al; add [rax], al; nop [rax]; ret;
0x00135728: add [rax], al; add [rax], al; nop [rax]; ret;
0x0013572a: add [rax], al; nop [rax]; ret;
0x0013574a: call qword ptr [rbp+0x53];
0x001357bb: add [rax], al; add al, ch; pop r11; stc; jmp qword ptr [rsi+0xf];
0x001357bd: add al, ch; pop r11; stc; jmp qword ptr [rsi+0xf];
0x001357bf: pop r11; stc; jmp qword ptr [rsi+0xf];
0x001357c0: pop rbx; stc; jmp qword ptr [rsi+0xf];
0x001357c1: stc; jmp qword ptr [rsi+0xf];
0x001357f6: and al, 0x89; ret;
0x0013582d: add [rax], eax; add [rcx+0x415d5bd8], cl; pop rsp; pop r13; pop r14; ret;
0x0013582f: add [rcx+0x415d5bd8], cl; pop rsp; pop r13; pop r14; ret;
0x00135831: fcomp st, dword ptr [rbx+0x5d]; pop r12; pop r13; pop r14; ret;
0x00135848: enter 0xd2e8, 0x7d; std; jmp qword ptr [rsi-0x70];
0x0013584a: sar byte ptr [rbp-3], cl; jmp qword ptr [rsi-0x70];
0x001358ad: add [rax], al; add [rbp+0x33], dh; add rsp, 0x190; mov rax, r8; pop rbp; ret;
0x001358af: add [rbp+0x33], dh; add rsp, 0x190; mov rax, r8; pop rbp; ret;
0x001358b2: add rsp, 0x190; mov rax, r8; pop rbp; ret;
0x001358b3: add esp, 0x190; mov rax, r8; pop rbp; ret;
0x001358b5: nop; add [rax], eax; add [rcx+rcx*4-0x40], cl; pop rbp; ret;
0x001358b6: add [rax], eax; add [rcx+rcx*4-0x40], cl; pop rbp; ret;
0x001358b7: add [rax], al; mov rax, r8; pop rbp; ret;
0x001358b8: add [rcx+rcx*4-0x40], cl; pop rbp; ret;
0x001358b9: mov rax, r8; pop rbp; ret;
0x001358ba: mov eax, eax; pop rbp; ret;
0x001358e0: add [rax], al; add bl, ch; mov edx, 0xfd7d36e8; jmp qword ptr [rsi+0xf];
0x001358e2: add bl, ch; mov edx, 0xfd7d36e8; jmp qword ptr [rsi+0xf];
0x001358e4: mov edx, 0xfd7d36e8; jmp qword ptr [rsi+0xf];
0x00135908: jmp qword ptr [rsi-0x7d];
0x0013590c: add esi, [rdi+0x11]; cmp dx, cx; sete al; ret;
0x0013590f: cmp dx, cx; sete al; ret;
0x00135910: cmp edx, ecx; sete al; ret;
0x00135912: sete al; ret;
0x0013591b: add [rax], al; add [rax], al; add [rbx-0x7c99fa17], al; stc; add esi, [rsi+7]; ret;
0x0013591d: add [rax], al; add [rbx-0x7c99fa17], al; stc; add esi, [rsi+7]; ret;
0x0013591f: add [rbx-0x7c99fa17], al; stc; add esi, [rsi+7]; ret;
0x00135925: stc; add esi, [rsi+7]; ret;
0x00135926: add esi, [rsi+7]; ret;
0x00135982: clc; out dx, al; inc dword ptr [rbp-0x3f6bf040]; add rsp, 8; ret;
0x00135983: out dx, al; inc dword ptr [rbp-0x3f6bf040]; add rsp, 8; ret;
0x00135984: inc dword ptr [rbp-0x3f6bf040]; add rsp, 8; ret;
0x00135985: test eax, eax; sete al; add rsp, 8; ret;
0x00135987: sete al; add rsp, 8; ret;
0x001359fa: xchg edi, eax; rcr byte ptr [rax+rax], 0x84; ror byte ptr [rdi], 0x84; ret 0;
0x001359fb: rcr byte ptr [rax+rax], 0x84; ror byte ptr [rdi], 0x84; ret 0;
0x001359ff: ror byte ptr [rdi], 0x84; ret 0;
0x00135a4f: imul al; imul edx, [rbp+0x1b8fffb], 0; add [rax], al; mov qword ptr [rip+0x8e8bb], 0; add rsp, 8; ret;
0x00135a51: imul edx, [rbp+0x1b8fffb], 0; add [rax], al; mov qword ptr [rip+0x8e8bb], 0; add rsp, 8; ret;
0x00135a55: mov eax, 1; mov qword ptr [rip+0x8e8bb], 0; add rsp, 8; ret;
0x00135a56: add [rax], eax; add [rax], al; mov qword ptr [rip+0x8e8bb], 0; add rsp, 8; ret;
0x00135a58: add [rax], al; mov qword ptr [rip+0x8e8bb], 0; add rsp, 8; ret;
0x00135a59: add [rax-0x39], cl; add eax, 0x8e8bb; add [rax], al; add [rax], al; add rsp, 8; ret;
0x00135a5a: mov qword ptr [rip+0x8e8bb], 0; add rsp, 8; ret;
0x00135a5b: mov dword ptr [rip+0x8e8bb], 0; add rsp, 8; ret;
0x00135a5c: add eax, 0x8e8bb; add [rax], al; add [rax], al; add rsp, 8; ret;
0x00135a5f: or [rax], al; add [rax], al; add [rax], al; add rsp, 8; ret;
0x00135bec: xor [rbx+0x5d], bl; pop r12; pop r13; pop r14; ret;
0x00135d22: add [rbp+0x70], dh; add rsp, 0x30; pop rbx; pop rbp; pop r12; ret;
0x00135d94: fucomi st, st(0); xchg [rax-3], bh; jmp qword ptr [rsi+0xf];
0x00135d96: xchg [rax-3], bh; jmp qword ptr [rsi+0xf];
0x00135ddb: ror byte ptr [rdi], 0x85; test dword ptr [rax], 0x83480000; ret;
0x00135ddd: test edi, esi; add [rax], al; add [rax-0x7d], cl; ret;
0x00135dde: test dword ptr [rax], 0x83480000; ret;
0x00135ddf: add [rax], al; add [rax-0x7d], cl; ret;
0x00135f32: jmp qword ptr [rsi-0x77];
0x0013606a: ret 0x883;
0x0013619d: test [rdx+0x48000001], esp; add esp, 0x30; pop rbx; pop rbp; pop r12; ret;
0x0013619e: mov [0x5b30c48348000001], al; pop rbp; pop r12; ret;
0x001361a0: add [rax], al; add rsp, 0x30; pop rbx; pop rbp; pop r12; ret;
0x001361a2: add rsp, 0x30; pop rbx; pop rbp; pop r12; ret;
0x001361a3: add esp, 0x30; pop rbx; pop rbp; pop r12; ret;
0x001361a5: xor [rbx+0x5d], bl; pop r12; ret;
0x00136369: mov dword ptr [rip+0x880bd], 0xffffffff; add rsp, 8; ret;
0x001363f5: ret 0x6875;
0x00136453: cmp [rcx+rcx*4-0x10], al; pop rbp; pop r12; pop r13; pop r14; ret;
0x00136454: mov eax, r14d; pop rbp; pop r12; pop r13; pop r14; ret;
0x00136455: mov eax, esi; pop rbp; pop r12; pop r13; pop r14; ret;
0x0013648b: cmp edi, 0xffffffff; call qword ptr [rax-0x761976b4];
0x0013648e: call qword ptr [rax-0x761976b4];
0x00136569: sub dword ptr [rip+0x8dc13], 1; mov eax, r12d; pop rbp; pop r12; pop r13; ret;
0x0013656a: sub dword ptr [rip+0x8dc13], 1; mov eax, r12d; pop rbp; pop r12; pop r13; ret;
0x0013656b: sub eax, 0x8dc13; add [rcx+rcx*4-0x20], eax; pop rbp; pop r12; pop r13; ret;
0x0013656e: or [rax], al; add [rcx+rcx*4-0x20], eax; pop rbp; pop r12; pop r13; ret;
0x0013656f: add [rcx], al; mov eax, r12d; pop rbp; pop r12; pop r13; ret;
0x00136570: add [rcx+rcx*4-0x20], eax; pop rbp; pop r12; pop r13; ret;
0x00136571: mov eax, r12d; pop rbp; pop r12; pop r13; ret;
0x00136572: mov eax, esp; pop rbp; pop r12; pop r13; ret;
0x00136574: pop rbp; pop r12; pop r13; ret;
0x00136575: pop r12; pop r13; ret;
0x00136576: pop rsp; pop r13; ret;
0x00136577: pop r13; ret;
0x001365ad: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x8f29e]; syscall;
0x001365ae: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x8f29e]; syscall;
0x001365af: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x8f29e]; syscall;
0x001365b0: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x8f29e]; syscall;
0x001365b1: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x8f29e]; syscall;
0x001365b2: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x8f29e]; syscall;
0x001365b3: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x8f29e]; syscall;
0x001365b4: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x8f29e]; syscall;
0x001365b5: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x8f29e]; syscall;
0x001365b6: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x8dbbe; syscall;
0x001365b7: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0x8f29e]; syscall;
0x001365b8: add [rax], al; mov eax, 0xca; lea rdi, [rip+0x8f29e]; syscall;
0x001365b9: add [rax+0xca], bh; lea rdi, [rip+0x8f29e]; syscall;
0x001365ba: mov eax, 0xca; lea rdi, [rip+0x8f29e]; syscall;
0x001365bc: add [rax], al; add [rax-0x73], cl; cmp eax, 0x8dbbe; syscall;
0x001365bd: add [rax], al; lea rdi, [rip+0x8f29e]; syscall;
0x001365be: add [rax-0x73], cl; cmp eax, 0x8dbbe; syscall;
0x001365bf: lea rdi, [rip+0x8f29e]; syscall;
0x001365c0: lea edi, [rip+0x8f29e]; syscall;
0x001365c1: cmp eax, 0x8dbbe; syscall;
0x001365c4: or [rax], al; syscall;
0x001365fe: call qword ptr [rax+0xeb95441];
0x00136778: add [rax], al; add rsp, 0x88; mov eax, r12d; pop rbp; pop r12; ret;
0x0013677a: add rsp, 0x88; mov eax, r12d; pop rbp; pop r12; ret;
0x0013677b: add esp, 0x88; mov eax, r12d; pop rbp; pop r12; ret;
0x0013677d: mov [rax], al; add [rax], al; mov eax, r12d; pop rbp; pop r12; ret;
0x0013677e: add [rax], al; add [rcx+rcx*4-0x20], al; pop rbp; pop r12; ret;
0x0013677f: add [rax], al; mov eax, r12d; pop rbp; pop r12; ret;
0x00136780: add [rcx+rcx*4-0x20], al; pop rbp; pop r12; ret;
0x00136781: mov eax, r12d; pop rbp; pop r12; ret;
0x00136782: mov eax, esp; pop rbp; pop r12; ret;
0x0013683c: jmp qword ptr [rdi+rax*8];
0x0013683f: add [rdx], al; add [rax], al; add cl, ch; sbb eax, 0xe8ffffff; shr byte ptr [rbp-3], cl; jmp qword ptr [rsi-0x70];
0x00136841: add [rax], al; add cl, ch; sbb eax, 0xe8ffffff; shr byte ptr [rbp-3], cl; jmp qword ptr [rsi-0x70];
0x00136843: add cl, ch; sbb eax, 0xe8ffffff; shr byte ptr [rbp-3], cl; jmp qword ptr [rsi-0x70];
0x00136845: sbb eax, 0xe8ffffff; shr byte ptr [rbp-3], cl; jmp qword ptr [rsi-0x70];
0x0013684a: shr byte ptr [rbp-3], cl; jmp qword ptr [rsi-0x70];
0x0013684b: insd [rdi], dx; std; jmp qword ptr [rsi-0x70];
0x0013684c: std; jmp qword ptr [rsi-0x70];
0x001368f1: and [rbx+0x5d], bl; pop r12; pop r13; pop r14; ret;
0x001368f2: pop rbx; pop rbp; pop r12; pop r13; pop r14; ret;
0x001368f3: pop rbp; pop r12; pop r13; pop r14; ret;
0x001368f4: pop r12; pop r13; pop r14; ret;
0x001368f5: pop rsp; pop r13; pop r14; ret;
0x001368f6: pop r13; pop r14; ret;
0x001368f7: pop rbp; pop r14; ret;
0x0013692d: inc dword ptr [rbx+0xd74fff8]; add rsp, 8; ret;
0x0013692f: clc; push qword ptr [rbp+rcx+0x48]; add esp, 8; ret;
0x00136930: push qword ptr [rbp+rcx+0x48]; add esp, 8; ret;
0x00136932: or eax, 0x8c48348; ret;
0x00136b10: jmp qword ptr [rcx+rax*2-0x39];
0x00136b9e: jmp qword ptr [rbp+rax*2-0x77];
0x00136bdd: push 0xfffffffffffffffd; call qword ptr [rbp-0x42];
0x00136bde: std; call qword ptr [rbp-0x42];
0x00136bdf: call qword ptr [rbp-0x42];
0x00136c31: add [rax], al; add [rbp+0x11], dh; add rsp, 0x18; pop rbx; pop rbp; ret;
0x00136c33: add [rbp+0x11], dh; add rsp, 0x18; pop rbx; pop rbp; ret;
0x00136c36: add rsp, 0x18; pop rbx; pop rbp; ret;
0x00136c37: add esp, 0x18; pop rbx; pop rbp; ret;
0x00136c39: sbb [rbx+0x5d], bl; ret;
0x00136ede: std; jmp qword ptr [rsi+0x66];
0x00136f2b: add [rax+0xf], cl; ret 0x8b48;
0x00136f80: add [rax], al; add [rbp+8], dh; add rsp, 0xa8; ret;
0x00136f82: add [rbp+8], dh; add rsp, 0xa8; ret;
0x00136f85: add rsp, 0xa8; ret;
0x00136f86: add esp, 0xa8; ret;
0x00136f88: test al, 0; add [rax], al; ret;
0x00136f8e: mov fs, [rsi-3]; jmp qword ptr [rsi+0x2e];
0x00136fa4: add eax, 0xffffa6e9; call qword ptr [rax-0x18];
0x00136fa9: call qword ptr [rax-0x18];
0x00136fb1: imul esp, edx, 0xffffffff; jmp qword ptr [rsi+0x2e];
0x00136fba: add [rax], al; add [rax], al; add [rax-0x1e2417], dl; jmp qword ptr [rsi+0x2e];
0x00136fbc: add [rax], al; add [rax-0x1e2417], dl; jmp qword ptr [rsi+0x2e];
0x00136fbe: add [rax-0x1e2417], dl; jmp qword ptr [rsi+0x2e];
0x00136fca: add [rax], al; add [rax], al; add [rax-0x1be417], dl; jmp qword ptr [rsi+0x2e];
0x00136fcc: add [rax], al; add [rax-0x1be417], dl; jmp qword ptr [rsi+0x2e];
0x00136fce: add [rax-0x1be417], dl; jmp qword ptr [rsi+0x2e];
0x00136fda: add [rax], al; add [rax], al; add [rax-0x1b6417], dl; jmp qword ptr [rsi+0x2e];
0x00136fdc: add [rax], al; add [rax-0x1b6417], dl; jmp qword ptr [rsi+0x2e];
0x00136fde: add [rax-0x1b6417], dl; jmp qword ptr [rsi+0x2e];
0x00136fe1: fwait; in al, 0xff; jmp qword ptr [rsi+0x2e];
0x00136fe2: in al, 0xff; jmp qword ptr [rsi+0x2e];
0x00136fea: add [rax], al; add [rax], al; add [rax-0x1af417], dl; jmp qword ptr [rsi+0x2e];
0x00136fec: add [rax], al; add [rax-0x1af417], dl; jmp qword ptr [rsi+0x2e];
0x00136fee: add [rax-0x1af417], dl; jmp qword ptr [rsi+0x2e];
0x00136ff2: in eax, 0xff; jmp qword ptr [rsi+0x2e];
0x00136ffa: add [rax], al; add [rax], al; add [rax-0x1ca417], dl; jmp qword ptr [rsi+0x2e];
0x00136ffc: add [rax], al; add [rax-0x1ca417], dl; jmp qword ptr [rsi+0x2e];
0x00136ffe: add [rax-0x1ca417], dl; jmp qword ptr [rsi+0x2e];
0x0013700a: add [rax], al; add [rax], al; add [rax-0xb4417], dl; jmp qword ptr [rsi+0x2e];
0x0013700c: add [rax], al; add [rax-0xb4417], dl; jmp qword ptr [rsi+0x2e];
0x0013700e: add [rax-0xb4417], dl; jmp qword ptr [rsi+0x2e];
0x0013701a: add [rax], al; add [rax], al; add [rax-0xa2417], dl; jmp qword ptr [rsi+0x2e];
0x0013701c: add [rax], al; add [rax-0xa2417], dl; jmp qword ptr [rsi+0x2e];
0x0013701e: add [rax-0xa2417], dl; jmp qword ptr [rsi+0x2e];
0x00137059: rol dword ptr [rax+0x48000001], 0x89; mov cl, 0xe9; add esi, ebx; movsq [rdi], [rsi]; ret;
0x0013705a: add byte ptr [rcx], 0; add [rax-0x77], cl; mov cl, 0xe9; add esi, ebx; movsq [rdi], [rsi]; ret;
0x0013705b: add [rax], eax; add [rax-0x77], cl; mov cl, 0xe9; add esi, ebx; movsq [rdi], [rsi]; ret;
0x0013705d: add [rax-0x77], cl; mov cl, 0xe9; add esi, ebx; movsq [rdi], [rsi]; ret;
0x00137060: mov cl, 0xe9; add esi, ebx; movsq [rdi], [rsi]; ret;
0x00137063: add esi, ebx; movsq [rdi], [rsi]; ret;
0x00137065: movsq [rdi], [rsi]; ret;
0x00137066: movsd [rdi], [rsi]; ret;
0x00137088: mov [rsp+0x18], rdi; lea rdi, [r12+0x930]; mov rax, fs:[0x28]; mov [rsp+0x68], rax; xor eax, eax; call qword ptr [r12+0xf08];
0x00137089: mov [rsp+0x18], edi; lea rdi, [r12+0x930]; mov rax, fs:[0x28]; mov [rsp+0x68], rax; xor eax, eax; call qword ptr [r12+0xf08];
0x0013708b: and al, 0x18; lea rdi, [r12+0x930]; mov rax, fs:[0x28]; mov [rsp+0x68], rax; xor eax, eax; call qword ptr [r12+0xf08];
0x0013708d: lea rdi, [r12+0x930]; mov rax, fs:[0x28]; mov [rsp+0x68], rax; xor eax, eax; call qword ptr [r12+0xf08];
0x0013708e: lea edi, [rsp+0x930]; mov rax, fs:[0x28]; mov [rsp+0x68], rax; xor eax, eax; call qword ptr [r12+0xf08];
0x00137091: xor [rcx], cl; add [rax], al; mov rax, fs:[0x28]; mov [rsp+0x68], rax; xor eax, eax; call qword ptr [r12+0xf08];
0x00137093: add [rax], al; mov rax, fs:[0x28]; mov [rsp+0x68], rax; xor eax, eax; call qword ptr [r12+0xf08];
0x00137095: mov rax, fs:[0x28]; mov [rsp+0x68], rax; xor eax, eax; call qword ptr [r12+0xf08];
0x00137096: mov rax, [0x28]; mov [rsp+0x68], rax; xor eax, eax; call qword ptr [r12+0xf08];
0x00137097: mov eax, [0x28]; mov [rsp+0x68], rax; xor eax, eax; call qword ptr [r12+0xf08];
0x00137098: add al, 0x25; sub [rax], al; add [rax], al; mov [rsp+0x68], rax; xor eax, eax; call qword ptr [r12+0xf08];
0x00137099: and eax, 0x28; mov [rsp+0x68], rax; xor eax, eax; call qword ptr [r12+0xf08];
0x0013709a: sub [rax], al; add [rax], al; mov [rsp+0x68], rax; xor eax, eax; call qword ptr [r12+0xf08];
0x0013709b: add [rax], al; add [rax-0x77], cl; and al, 0x68; xor eax, eax; call qword ptr [r12+0xf08];
0x0013709c: add [rax], al; mov [rsp+0x68], rax; xor eax, eax; call qword ptr [r12+0xf08];
0x0013709d: add [rax-0x77], cl; and al, 0x68; xor eax, eax; call qword ptr [r12+0xf08];
0x0013709e: mov [rsp+0x68], rax; xor eax, eax; call qword ptr [r12+0xf08];
0x0013709f: mov [rsp+0x68], eax; xor eax, eax; call qword ptr [r12+0xf08];
0x001370a1: and al, 0x68; xor eax, eax; call qword ptr [r12+0xf08];
0x001370a3: xor eax, eax; call qword ptr [r12+0xf08];
0x001370a5: call qword ptr [r12+0xf08];
0x001370a6: call qword ptr [rsp+0xf08];
0x001371be: shl byte ptr [rdx+rdx+0x48], 0x8b; add eax, 0x86c98; call qword ptr [rax+0x200];
0x001371c0: adc cl, [rax-0x75]; add eax, 0x86c98; call qword ptr [rax+0x200];
0x001371c1: mov rax, [rip+0x86c98]; call qword ptr [rax+0x200];
0x001371c2: mov eax, [rip+0x86c98]; call qword ptr [rax+0x200];
0x001371c3: add eax, 0x86c98; call qword ptr [rax+0x200];
0x001371c4: cwde; insb [rdi], dx; or [rax], al; call qword ptr [rax+0x200];
0x001371c5: insb [rdi], dx; or [rax], al; call qword ptr [rax+0x200];
0x001371c6: or [rax], al; call qword ptr [rax+0x200];
0x001371c8: call qword ptr [rax+0x200];
0x001371ce: mov [rsp+0x58], rax; mov rax, [rsp+0x18]; mov rdx, r14; mov esi, 0x40; mov rdi, rbx; call rax;
0x001371cf: mov [rsp+0x58], eax; mov rax, [rsp+0x18]; mov rdx, r14; mov esi, 0x40; mov rdi, rbx; call rax;
0x001371d1: and al, 0x58; mov rax, [rsp+0x18]; mov rdx, r14; mov esi, 0x40; mov rdi, rbx; call rax;
0x001371d2: pop rax; mov rax, [rsp+0x18]; mov rdx, r14; mov esi, 0x40; mov rdi, rbx; call rax;
0x001371d3: mov rax, [rsp+0x18]; mov rdx, r14; mov esi, 0x40; mov rdi, rbx; call rax;
0x001371d4: mov eax, [rsp+0x18]; mov rdx, r14; mov esi, 0x40; mov rdi, rbx; call rax;
0x001371d6: and al, 0x18; mov rdx, r14; mov esi, 0x40; mov rdi, rbx; call rax;
0x001371d7: sbb [rcx+rcx*4-0xe], cl; mov esi, 0x40; mov rdi, rbx; call rax;
0x001371d8: mov rdx, r14; mov esi, 0x40; mov rdi, rbx; call rax;
0x001371d9: mov edx, esi; mov esi, 0x40; mov rdi, rbx; call rax;
0x001371db: mov esi, 0x40; mov rdi, rbx; call rax;
0x001371de: add [rax], al; mov rdi, rbx; call rax;
0x001371e0: mov rdi, rbx; call rax;
0x001371e1: mov edi, ebx; call rax;
0x001371e6: ror byte ptr [rdi], 0x84; imul edi, 0xffffffff; dec dword ptr [rcx+0x49082444]; lea edi, [rsp+0x930]; call qword ptr [r12+0xf10];
0x001371e9: imul edi, 0xffffffff; dec dword ptr [rcx+0x49082444]; lea edi, [rsp+0x930]; call qword ptr [r12+0xf10];
0x001371ec: dec dword ptr [rcx+0x49082444]; lea edi, [rsp+0x930]; call qword ptr [r12+0xf10];
0x001371ed: mov [rsp+8], eax; lea rdi, [r12+0x930]; call qword ptr [r12+0xf10];
0x001371ef: and al, 8; lea rdi, [r12+0x930]; call qword ptr [r12+0xf10];
0x001371f1: lea rdi, [r12+0x930]; call qword ptr [r12+0xf10];
0x001371f2: lea edi, [rsp+0x930]; call qword ptr [r12+0xf10];
0x001371f5: xor [rcx], cl; add [rax], al; call qword ptr [r12+0xf10];
0x001371f7: add [rax], al; call qword ptr [r12+0xf10];
0x001371f9: call qword ptr [r12+0xf10];
0x001371fa: call qword ptr [rsp+0xf10];
0x00137260: movsxd edi, ebp; jmp qword ptr [rsi+0x2e];
0x00137283: mov rbx, rdi; sub rsp, 0x28; mov r13, [rip+0x86b5f]; mov [rsp+8], rcx; lea rdi, [r13+0x908]; call qword ptr [r13+0xf08];
0x00137284: mov ebx, edi; sub rsp, 0x28; mov r13, [rip+0x86b5f]; mov [rsp+8], rcx; lea rdi, [r13+0x908]; call qword ptr [r13+0xf08];
0x00137285: sti; sub rsp, 0x28; mov r13, [rip+0x86b5f]; mov [rsp+8], rcx; lea rdi, [r13+0x908]; call qword ptr [r13+0xf08];
0x00137286: sub rsp, 0x28; mov r13, [rip+0x86b5f]; mov [rsp+8], rcx; lea rdi, [r13+0x908]; call qword ptr [r13+0xf08];
0x00137287: sub esp, 0x28; mov r13, [rip+0x86b5f]; mov [rsp+8], rcx; lea rdi, [r13+0x908]; call qword ptr [r13+0xf08];
0x00137289: sub [rbx+rcx*4+0x2d], cl; pop rdi; imul ecx, [rax], 0; mov [rsp+8], rcx; lea rdi, [r13+0x908]; call qword ptr [r13+0xf08];
0x0013728a: mov r13, [rip+0x86b5f]; mov [rsp+8], rcx; lea rdi, [r13+0x908]; call qword ptr [r13+0xf08];
0x0013728b: mov ebp, [rip+0x86b5f]; mov [rsp+8], rcx; lea rdi, [r13+0x908]; call qword ptr [r13+0xf08];
0x0013728c: sub eax, 0x86b5f; mov [rsp+8], rcx; lea rdi, [r13+0x908]; call qword ptr [r13+0xf08];
0x0013728d: pop rdi; imul ecx, [rax], 0; mov [rsp+8], rcx; lea rdi, [r13+0x908]; call qword ptr [r13+0xf08];
0x0013728e: imul ecx, [rax], 0; mov [rsp+8], rcx; lea rdi, [r13+0x908]; call qword ptr [r13+0xf08];
0x0013728f: or [rax], al; mov [rsp+8], rcx; lea rdi, [r13+0x908]; call qword ptr [r13+0xf08];
0x00137290: add [rax-0x77], cl; and al, 8; lea rdi, [r13+0x908]; call qword ptr [r13+0xf08];
0x00137291: mov [rsp+8], rcx; lea rdi, [r13+0x908]; call qword ptr [r13+0xf08];
0x00137292: mov [rsp+8], ecx; lea rdi, [r13+0x908]; call qword ptr [r13+0xf08];
0x00137294: and al, 8; lea rdi, [r13+0x908]; call qword ptr [r13+0xf08];
0x00137295: or [rcx-0x73], cl; mov ebp, 0x908; call qword ptr [r13+0xf08];
0x00137296: lea rdi, [r13+0x908]; call qword ptr [r13+0xf08];
0x00137297: lea edi, [rbp+0x908]; call qword ptr [r13+0xf08];
0x00137298: mov ebp, 0x908; call qword ptr [r13+0xf08];
0x00137299: or [rcx], cl; add [rax], al; call qword ptr [r13+0xf08];
0x0013729b: add [rax], al; call qword ptr [r13+0xf08];
0x0013729d: call qword ptr [r13+0xf08];
0x0013729e: call qword ptr [rbp+0xf08];
0x001373a9: xchg [rax-0x77], cl; ret 0x294c;
0x001373ac: ret 0x294c;
0x0013740f: mov rax, [r8]; add rax, [r11+8]; mov r14d, 1; mov [rbp+0x18], rax; lea rdi, [r13+0x908]; call qword ptr [r13+0xf10];
0x00137410: mov eax, [rax]; add rax, [r11+8]; mov r14d, 1; mov [rbp+0x18], rax; lea rdi, [r13+0x908]; call qword ptr [r13+0xf10];
0x00137412: add rax, [r11+8]; mov r14d, 1; mov [rbp+0x18], rax; lea rdi, [r13+0x908]; call qword ptr [r13+0xf10];
0x00137413: add eax, [rbx+8]; mov r14d, 1; mov [rbp+0x18], rax; lea rdi, [r13+0x908]; call qword ptr [r13+0xf10];
0x00137414: or [r9-0x42], al; add [rax], eax; add [rax], al; mov [rbp+0x18], rax; lea rdi, [r13+0x908]; call qword ptr [r13+0xf10];
0x00137415: or [rcx-0x42], al; add [rax], eax; add [rax], al; mov [rbp+0x18], rax; lea rdi, [r13+0x908]; call qword ptr [r13+0xf10];
0x00137416: mov r14d, 1; mov [rbp+0x18], rax; lea rdi, [r13+0x908]; call qword ptr [r13+0xf10];
0x00137417: mov esi, 1; mov [rbp+0x18], rax; lea rdi, [r13+0x908]; call qword ptr [r13+0xf10];
0x00137418: add [rax], eax; add [rax], al; mov [rbp+0x18], rax; lea rdi, [r13+0x908]; call qword ptr [r13+0xf10];
0x00137419: add [rax], al; add [rax-0x77], cl; sbb [r9-0x73], r9b; mov ebp, 0x908; call qword ptr [r13+0xf10];
0x0013741a: add [rax], al; mov [rbp+0x18], rax; lea rdi, [r13+0x908]; call qword ptr [r13+0xf10];
0x0013741b: add [rax-0x77], cl; sbb [r9-0x73], r9b; mov ebp, 0x908; call qword ptr [r13+0xf10];
0x0013741c: mov [rbp+0x18], rax; lea rdi, [r13+0x908]; call qword ptr [r13+0xf10];
0x0013741d: mov [rbp+0x18], eax; lea rdi, [r13+0x908]; call qword ptr [r13+0xf10];
0x0013741e: sbb [r9-0x73], r9b; mov ebp, 0x908; call qword ptr [r13+0xf10];
0x0013741f: sbb [rcx-0x73], cl; mov ebp, 0x908; call qword ptr [r13+0xf10];
0x00137420: lea rdi, [r13+0x908]; call qword ptr [r13+0xf10];
0x00137421: lea edi, [rbp+0x908]; call qword ptr [r13+0xf10];
0x00137422: mov ebp, 0x908; call qword ptr [r13+0xf10];
0x00137423: or [rcx], cl; add [rax], al; call qword ptr [r13+0xf10];
0x00137425: add [rax], al; call qword ptr [r13+0xf10];
0x00137427: call qword ptr [r13+0xf10];
0x00137428: call qword ptr [rbp+0xf10];
0x001374be: add [rax], al; add [rax-0x75], cl; or [rax-0x7b], r9b; shl byte ptr [rsi+rsi*4+0x49], 0x8b; adc [rax+1], cl; ret 0x3948;
0x001374c0: add [rax-0x75], cl; or [rax-0x7b], r9b; shl byte ptr [rsi+rsi*4+0x49], 0x8b; adc [rax+1], cl; ret 0x3948;
0x001374c3: or [rax-0x7b], r9b; shl byte ptr [rsi+rsi*4+0x49], 0x8b; adc [rax+1], cl; ret 0x3948;
0x001374c4: or [rax-0x7b], cl; shl byte ptr [rsi+rsi*4+0x49], 0x8b; adc [rax+1], cl; ret 0x3948;
0x001374c7: shl byte ptr [rsi+rsi*4+0x49], 0x8b; adc [rax+1], cl; ret 0x3948;
0x00137561: dec dword ptr [rax-0x75]; or [rcx-0x75], r9b; adc [rax+1], cl; ret 0x3948;
0x00137564: or [rcx-0x75], r9b; adc [rax+1], cl; ret 0x3948;
0x00137565: or [rcx-0x75], cl; adc [rax+1], cl; ret 0x3948;
0x00137568: adc [rax+1], cl; ret 0x3948;
0x0013756b: ret 0x3948;
0x001375de: add [rax], al; add [rax+0x29], cl; ret 0xc148;
0x001375e0: add [rax+0x29], cl; ret 0xc148;
0x00137624: adc [rax+0x3b], cl; sub [rbx-0x1b], sil; mov eax, 1; ret;
0x00137627: sub [rbx-0x1b], sil; mov eax, 1; ret;
0x00137628: sub [rbx-0x1b], dh; mov eax, 1; ret;
0x0013762a: in eax, 0xb8; add [rax], eax; add [rax], al; ret;
0x0013762b: mov eax, 1; ret;
0x0013762c: add [rax], eax; add [rax], al; ret;
0x0013762d: add [rax], al; add bl, al; nop [rax]; xor eax, eax; ret;
0x0013762f: add bl, al; nop [rax]; xor eax, eax; ret;
0x0013763b: nop [rax+rax]; mov rax, [rip+0x86819]; mov rsi, rdi; mov rdi, [rsp]; mov rax, [rax+0x1e0]; jmp rax;
0x0013763d: add [rax], r8b; mov rax, [rip+0x86819]; mov rsi, rdi; mov rdi, [rsp]; mov rax, [rax+0x1e0]; jmp rax;
0x0013763e: add [rax], al; mov rax, [rip+0x86819]; mov rsi, rdi; mov rdi, [rsp]; mov rax, [rax+0x1e0]; jmp rax;
0x0013763f: add [rax-0x75], cl; add eax, 0x86819; mov rsi, rdi; mov rdi, [rsp]; mov rax, [rax+0x1e0]; jmp rax;
0x00137640: mov rax, [rip+0x86819]; mov rsi, rdi; mov rdi, [rsp]; mov rax, [rax+0x1e0]; jmp rax;
0x00137641: mov eax, [rip+0x86819]; mov rsi, rdi; mov rdi, [rsp]; mov rax, [rax+0x1e0]; jmp rax;
0x00137642: add eax, 0x86819; mov rsi, rdi; mov rdi, [rsp]; mov rax, [rax+0x1e0]; jmp rax;
0x00137643: sbb [rax+8], ebp; add [rax-0x77], cl; dec byte ptr [rax-0x75]; cmp al, 0x24; mov rax, [rax+0x1e0]; jmp rax;
0x00137644: push 0xffffffff89480008; dec byte ptr [rax-0x75]; cmp al, 0x24; mov rax, [rax+0x1e0]; jmp rax;
0x00137645: or [rax], al; mov rsi, rdi; mov rdi, [rsp]; mov rax, [rax+0x1e0]; jmp rax;
0x00137646: add [rax-0x77], cl; dec byte ptr [rax-0x75]; cmp al, 0x24; mov rax, [rax+0x1e0]; jmp rax;
0x00137647: mov rsi, rdi; mov rdi, [rsp]; mov rax, [rax+0x1e0]; jmp rax;
0x00137648: mov esi, edi; mov rdi, [rsp]; mov rax, [rax+0x1e0]; jmp rax;
0x00137649: dec byte ptr [rax-0x75]; cmp al, 0x24; mov rax, [rax+0x1e0]; jmp rax;
0x0013766c: mov eax, 0x968; add [rsp+rbx+0x48], dh; mov eax, [rip+0x867e5]; mov rdi, [rsp]; mov rax, [rax+0x1e0]; jmp rax;
0x0013766f: add [rax], al; add [rsp+rbx+0x48], dh; mov eax, [rip+0x867e5]; mov rdi, [rsp]; mov rax, [rax+0x1e0]; jmp rax;
0x00137671: add [rsp+rbx+0x48], dh; mov eax, [rip+0x867e5]; mov rdi, [rsp]; mov rax, [rax+0x1e0]; jmp rax;
0x00137673: sbb al, 0x48; mov eax, [rip+0x867e5]; mov rdi, [rsp]; mov rax, [rax+0x1e0]; jmp rax;
0x00137674: mov rax, [rip+0x867e5]; mov rdi, [rsp]; mov rax, [rax+0x1e0]; jmp rax;
0x00137675: mov eax, [rip+0x867e5]; mov rdi, [rsp]; mov rax, [rax+0x1e0]; jmp rax;
0x00137676: add eax, 0x867e5; mov rdi, [rsp]; mov rax, [rax+0x1e0]; jmp rax;
0x00137677: in eax, 0x67; or [rax], al; mov rdi, [rsp]; mov rax, [rax+0x1e0]; jmp rax;
0x00137678: or [eax], al; mov rdi, [rsp]; mov rax, [rax+0x1e0]; jmp rax;
0x00137679: or [rax], al; mov rdi, [rsp]; mov rax, [rax+0x1e0]; jmp rax;
0x0013767a: add [rax-0x75], cl; cmp al, 0x24; mov rax, [rax+0x1e0]; jmp rax;
0x0013767b: mov rdi, [rsp]; mov rax, [rax+0x1e0]; jmp rax;
0x0013767c: mov edi, [rsp]; mov rax, [rax+0x1e0]; jmp rax;
0x0013767d: cmp al, 0x24; mov rax, [rax+0x1e0]; jmp rax;
0x0013767e: and al, 0x48; mov eax, [rax+0x1e0]; jmp rax;
0x0013767f: mov rax, [rax+0x1e0]; jmp rax;
0x00137680: mov eax, [rax+0x1e0]; jmp rax;
0x00137681: and al, 1; add [rax], al; jmp rax;
0x001376c0: mov r8d, [rip+0x88f61]; sub rsp, 8; push qword ptr [rax]; mov rax, [rip+0x8678c]; mov rdi, [rdi]; call qword ptr [rax+0x1f0];
0x001376c1: mov eax, [rip+0x88f61]; sub rsp, 8; push qword ptr [rax]; mov rax, [rip+0x8678c]; mov rdi, [rdi]; call qword ptr [rax+0x1f0];
0x001376c2: add eax, 0x88f61; sub rsp, 8; push qword ptr [rax]; mov rax, [rip+0x8678c]; mov rdi, [rdi]; call qword ptr [rax+0x1f0];
0x001376c5: or [rax], al; sub rsp, 8; push qword ptr [rax]; mov rax, [rip+0x8678c]; mov rdi, [rdi]; call qword ptr [rax+0x1f0];
0x001376c7: sub rsp, 8; push qword ptr [rax]; mov rax, [rip+0x8678c]; mov rdi, [rdi]; call qword ptr [rax+0x1f0];
0x001376c8: sub esp, 8; push qword ptr [rax]; mov rax, [rip+0x8678c]; mov rdi, [rdi]; call qword ptr [rax+0x1f0];
0x001376c9: in al, dx; or bh, bh; xor [rax-0x75], cl; add eax, 0x8678c; mov rdi, [rdi]; call qword ptr [rax+0x1f0];
0x001376ca: or bh, bh; xor [rax-0x75], cl; add eax, 0x8678c; mov rdi, [rdi]; call qword ptr [rax+0x1f0];
0x001376cb: push qword ptr [rax]; mov rax, [rip+0x8678c]; mov rdi, [rdi]; call qword ptr [rax+0x1f0];
0x001376cc: xor [rax-0x75], cl; add eax, 0x8678c; mov rdi, [rdi]; call qword ptr [rax+0x1f0];
0x001376cd: mov rax, [rip+0x8678c]; mov rdi, [rdi]; call qword ptr [rax+0x1f0];
0x001376ce: mov eax, [rip+0x8678c]; mov rdi, [rdi]; call qword ptr [rax+0x1f0];
0x001376cf: add eax, 0x8678c; mov rdi, [rdi]; call qword ptr [rax+0x1f0];
0x001376d1: or [eax], al; mov rdi, [rdi]; call qword ptr [rax+0x1f0];
0x001376d2: or [rax], al; mov rdi, [rdi]; call qword ptr [rax+0x1f0];
0x001376d4: mov rdi, [rdi]; call qword ptr [rax+0x1f0];
0x001376d5: mov edi, [rdi]; call qword ptr [rax+0x1f0];
0x001376d7: call qword ptr [rax+0x1f0];
0x001376da: add [rax], eax; add [rax-0x77], cl; sbb [r8+0x5a], bl; pop rbx; ret;
0x001376db: add [rax], al; mov [rbx+0x18], rax; pop rax; pop rdx; pop rbx; ret;
0x001376dc: add [rax-0x77], cl; sbb [r8+0x5a], bl; pop rbx; ret;
0x001376dd: mov [rbx+0x18], rax; pop rax; pop rdx; pop rbx; ret;
0x001376de: mov [rbx+0x18], eax; pop rax; pop rdx; pop rbx; ret;
0x001376df: sbb [r8+0x5a], bl; pop rbx; ret;
0x001376e0: sbb [rax+0x5a], bl; pop rbx; ret;
0x0013770d: xor r8d, r8d; mov rdi, [rdi+8]; push 0; lea rcx, [rsi+0x398]; push 2; call qword ptr [rax+0x1e8];
0x0013770e: xor eax, eax; mov rdi, [rdi+8]; push 0; lea rcx, [rsi+0x398]; push 2; call qword ptr [rax+0x1e8];
0x0013770f: ror byte ptr [rax-0x75], 0x7f; or [rdx], ch; lea rcx, [rsi+0x398]; push 2; call qword ptr [rax+0x1e8];
0x00137710: mov rdi, [rdi+8]; push 0; lea rcx, [rsi+0x398]; push 2; call qword ptr [rax+0x1e8];
0x00137711: mov edi, [rdi+8]; push 0; lea rcx, [rsi+0x398]; push 2; call qword ptr [rax+0x1e8];
0x00137713: or [rdx], ch; lea rcx, [rsi+0x398]; push 2; call qword ptr [rax+0x1e8];
0x00137714: push 0; lea rcx, [rsi+0x398]; push 2; call qword ptr [rax+0x1e8];
0x00137716: lea rcx, [rsi+0x398]; push 2; call qword ptr [rax+0x1e8];
0x00137717: lea ecx, [rsi+0x398]; push 2; call qword ptr [rax+0x1e8];
0x00137719: cwde; add eax, [rax]; add [rdx+2], ch; call qword ptr [rax+0x1e8];
0x0013771a: add eax, [rax]; add [rdx+2], ch; call qword ptr [rax+0x1e8];
0x0013771b: add [rax], al; push 2; call qword ptr [rax+0x1e8];
0x0013771c: add [rdx+2], ch; call qword ptr [rax+0x1e8];
0x0013771d: push 2; call qword ptr [rax+0x1e8];
0x0013774e: xor r9d, r9d; mov rdi, [rdi+8]; push 0; lea rcx, [rsi+0x398]; push 0; call qword ptr [rax+0x1e8];
0x0013774f: xor ecx, ecx; mov rdi, [rdi+8]; push 0; lea rcx, [rsi+0x398]; push 0; call qword ptr [rax+0x1e8];
0x00137750: leave; mov rdi, [rdi+8]; push 0; lea rcx, [rsi+0x398]; push 0; call qword ptr [rax+0x1e8];
0x00137751: mov rdi, [rdi+8]; push 0; lea rcx, [rsi+0x398]; push 0; call qword ptr [rax+0x1e8];
0x00137752: mov edi, [rdi+8]; push 0; lea rcx, [rsi+0x398]; push 0; call qword ptr [rax+0x1e8];
0x00137754: or [rdx], ch; lea rcx, [rsi+0x398]; push 0; call qword ptr [rax+0x1e8];
0x00137755: push 0; lea rcx, [rsi+0x398]; push 0; call qword ptr [rax+0x1e8];
0x00137757: lea rcx, [rsi+0x398]; push 0; call qword ptr [rax+0x1e8];
0x00137758: lea ecx, [rsi+0x398]; push 0; call qword ptr [rax+0x1e8];
0x0013775a: cwde; add eax, [rax]; add [rdx], ch; call qword ptr [rax+0x1e8];
0x0013775b: add eax, [rax]; add [rdx], ch; call qword ptr [rax+0x1e8];
0x0013775c: add [rax], al; push 0; call qword ptr [rax+0x1e8];
0x0013775d: add [rdx], ch; call qword ptr [rax+0x1e8];
0x0013775e: push 0; call qword ptr [rax+0x1e8];
0x00137763: add [rax], eax; add [rax-0x77], cl; adc [r8+0x5a], bl; pop rbx; ret;
0x00137764: add [rax], al; mov [rbx+0x10], rax; pop rax; pop rdx; pop rbx; ret;
0x00137765: add [rax-0x77], cl; adc [r8+0x5a], bl; pop rbx; ret;
0x00137766: mov [rbx+0x10], rax; pop rax; pop rdx; pop rbx; ret;
0x00137767: mov [rbx+0x10], eax; pop rax; pop rdx; pop rbx; ret;
0x00137768: adc [r8+0x5a], bl; pop rbx; ret;
0x00137769: adc [rax+0x5a], bl; pop rbx; ret;
0x0013776e: xchg ax, ax; mov rax, [rip+0x866e9]; jmp qword ptr [rax+0x1f8];
0x0013776f: nop; mov rax, [rip+0x866e9]; jmp qword ptr [rax+0x1f8];
0x00137770: mov rax, [rip+0x866e9]; jmp qword ptr [rax+0x1f8];
0x00137771: mov eax, [rip+0x866e9]; jmp qword ptr [rax+0x1f8];
0x00137772: add eax, 0x866e9; jmp qword ptr [rax+0x1f8];
0x00137775: or [rax], al; jmp qword ptr [rax+0x1f8];
0x00137777: jmp qword ptr [rax+0x1f8];
0x001377ce: add [rax], al; add [rbp+0x28], dh; add rsp, 0x38; ret;
0x001377d0: add [rbp+0x28], dh; add rsp, 0x38; ret;
0x0013785e: add [rax], al; add [rbp+0x18], dh; add rsp, 0x38; ret;
0x00137860: add [rbp+0x18], dh; add rsp, 0x38; ret;
0x00137866: cmp bl, al; nop [rax+rax]; mov rax, [rip+0x8caf1]; call qword ptr [rax];
0x00137868: nop [rax+rax]; mov rax, [rip+0x8caf1]; call qword ptr [rax];
0x0013786a: test [rax], al; add [rax], al; add [rax], al; mov rax, [rip+0x8caf1]; call qword ptr [rax];
0x0013786b: add [rax], al; add [rax], al; add [rax-0x75], cl; add eax, 0x8caf1; call qword ptr [rax];
0x0013786c: add [rax], al; add [rax], al; mov rax, [rip+0x8caf1]; call qword ptr [rax];
0x0013786d: add [rax], al; add [rax-0x75], cl; add eax, 0x8caf1; call qword ptr [rax];
0x0013786e: add [rax], al; mov rax, [rip+0x8caf1]; call qword ptr [rax];
0x0013786f: add [rax-0x75], cl; add eax, 0x8caf1; call qword ptr [rax];
0x00137870: mov rax, [rip+0x8caf1]; call qword ptr [rax];
0x00137871: mov eax, [rip+0x8caf1]; call qword ptr [rax];
0x00137872: add eax, 0x8caf1; call qword ptr [rax];
0x00137875: or [rax], al; call qword ptr [rax];
0x00137877: call qword ptr [rax];
0x001378f9: add [rax], al; add [rbp+0x1e], dh; add rsp, 0x38; ret;
0x001378fb: add [rbp+0x1e], dh; add rsp, 0x38; ret;
0x00137901: cmp bl, al; nop [rax+rax]; mov rax, [rip+0x8ca59]; call qword ptr [rax+8];
0x00137903: nop [rax+rax]; mov rax, [rip+0x8ca59]; call qword ptr [rax+8];
0x00137905: add [rax], r8b; mov rax, [rip+0x8ca59]; call qword ptr [rax+8];
0x00137906: add [rax], al; mov rax, [rip+0x8ca59]; call qword ptr [rax+8];
0x00137907: add [rax-0x75], cl; add eax, 0x8ca59; call qword ptr [rax+8];
0x00137908: mov rax, [rip+0x8ca59]; call qword ptr [rax+8];
0x00137909: mov eax, [rip+0x8ca59]; call qword ptr [rax+8];
0x0013790a: add eax, 0x8ca59; call qword ptr [rax+8];
0x0013790d: or [rax], al; call qword ptr [rax+8];
0x0013790f: call qword ptr [rax+8];
0x0013791d: call far fword ptr [rbp+rdi*8-1];
0x0013791e: pop rsp; std; jmp qword ptr [rsi+0x66];
0x00137a48: add [rax], al; add [rbp+0x37], dh; add rsp, 0x48; ret;
0x00137a4a: add [rbp+0x37], dh; add rsp, 0x48; ret;
0x00137a4d: add rsp, 0x48; ret;
0x00137a4e: add esp, 0x48; ret;
0x00137a6f: add [rax], al; add [rbp+0x10], dh; mov rax, [rax+0x18]; add rsp, 0x48; jmp rax;
0x00137a71: add [rbp+0x10], dh; mov rax, [rax+0x18]; add rsp, 0x48; jmp rax;
0x00137a74: mov rax, [rax+0x18]; add rsp, 0x48; jmp rax;
0x00137a75: mov eax, [rax+0x18]; add rsp, 0x48; jmp rax;
0x00137a78: add rsp, 0x48; jmp rax;
0x00137a79: add esp, 0x48; jmp rax;
0x00137aaf: dec dword ptr [rax-0x75]; add eax, 0x8c8b1; mov rax, [rax+0x10]; jmp rax;
0x00137ab0: mov rax, [rip+0x8c8b1]; mov rax, [rax+0x10]; jmp rax;
0x00137ab1: mov eax, [rip+0x8c8b1]; mov rax, [rax+0x10]; jmp rax;
0x00137ab2: add eax, 0x8c8b1; mov rax, [rax+0x10]; jmp rax;
0x00137ab3: mov cl, 0xc8; or [rax], al; mov rax, [rax+0x10]; jmp rax;
0x00137ab4: enter 8, 0x48; mov eax, [rax+0x10]; jmp rax;
0x00137ab5: or [rax], al; mov rax, [rax+0x10]; jmp rax;
0x00137ab7: mov rax, [rax+0x10]; jmp rax;
0x00137ab8: mov eax, [rax+0x10]; jmp rax;
0x00137ad8: mov rdi, [rdi+8]; push 0; push rax; mov rax, [rip+0x8637a]; mov r8, [rbx+0x10]; call qword ptr [rax+0x1e8];
0x00137ad9: mov edi, [rdi+8]; push 0; push rax; mov rax, [rip+0x8637a]; mov r8, [rbx+0x10]; call qword ptr [rax+0x1e8];
0x00137adb: or [rdx], ch; push rax; mov rax, [rip+0x8637a]; mov r8, [rbx+0x10]; call qword ptr [rax+0x1e8];
0x00137adc: push 0; push rax; mov rax, [rip+0x8637a]; mov r8, [rbx+0x10]; call qword ptr [rax+0x1e8];
0x00137add: add [rax+0x48], dl; mov eax, [rip+0x8637a]; mov r8, [rbx+0x10]; call qword ptr [rax+0x1e8];
0x00137ade: push rax; mov rax, [rip+0x8637a]; mov r8, [rbx+0x10]; call qword ptr [rax+0x1e8];
0x00137adf: mov rax, [rip+0x8637a]; mov r8, [rbx+0x10]; call qword ptr [rax+0x1e8];
0x00137ae0: mov eax, [rip+0x8637a]; mov r8, [rbx+0x10]; call qword ptr [rax+0x1e8];
0x00137ae1: add eax, 0x8637a; mov r8, [rbx+0x10]; call qword ptr [rax+0x1e8];
0x00137ae4: or [rax], al; mov r8, [rbx+0x10]; call qword ptr [rax+0x1e8];
0x00137ae6: mov r8, [rbx+0x10]; call qword ptr [rax+0x1e8];
0x00137ae7: mov eax, [rbx+0x10]; call qword ptr [rax+0x1e8];
0x00137aed: add [rax], eax; add [rax-0x77], cl; add ebx, [rax+0x5a]; pop rbx; ret;
0x00137aee: add [rax], al; mov [rbx], rax; pop rax; pop rdx; pop rbx; ret;
0x00137aef: add [rax-0x77], cl; add ebx, [rax+0x5a]; pop rbx; ret;
0x00137af0: mov [rbx], rax; pop rax; pop rdx; pop rbx; ret;
0x00137af1: mov [rbx], eax; pop rax; pop rdx; pop rbx; ret;
0x00137af2: add ebx, [rax+0x5a]; pop rbx; ret;
0x00137af3: pop rax; pop rdx; pop rbx; ret;
0x00137af4: pop rdx; pop rbx; ret;
0x00137b5d: lea rcx, [rdi+0x398]; push 0; mov rdi, r12; push r8; mov r8, rbx; call qword ptr [rax+0x1e8];
0x00137b5e: lea ecx, [rdi+0x398]; push 0; mov rdi, r12; push r8; mov r8, rbx; call qword ptr [rax+0x1e8];
0x00137b61: add eax, [rax]; add [rdx], ch; mov rdi, r12; push r8; mov r8, rbx; call qword ptr [rax+0x1e8];
0x00137b62: add [rax], al; push 0; mov rdi, r12; push r8; mov r8, rbx; call qword ptr [rax+0x1e8];
0x00137b63: add [rdx], ch; mov rdi, r12; push r8; mov r8, rbx; call qword ptr [rax+0x1e8];
0x00137b64: push 0; mov rdi, r12; push r8; mov r8, rbx; call qword ptr [rax+0x1e8];
0x00137b65: add [rcx+rcx*4-0x19], cl; push r8; mov r8, rbx; call qword ptr [rax+0x1e8];
0x00137b66: mov rdi, r12; push r8; mov r8, rbx; call qword ptr [rax+0x1e8];
0x00137b67: mov edi, esp; push r8; mov r8, rbx; call qword ptr [rax+0x1e8];
0x00137b68: out 0x41, eax; push rax; mov r8, rbx; call qword ptr [rax+0x1e8];
0x00137b69: push r8; mov r8, rbx; call qword ptr [rax+0x1e8];
0x00137b6a: push rax; mov r8, rbx; call qword ptr [rax+0x1e8];
0x00137b6b: mov r8, rbx; call qword ptr [rax+0x1e8];
0x00137b6c: mov eax, ebx; call qword ptr [rax+0x1e8];
0x00137b71: add [rax], eax; add [rax-0x77], cl; ret;
0x00137c42: mov rax, [rip+0x86217]; mov r8, rbx; mov rsi, rbp; xor r9d, r9d; mov rdi, r12; call qword ptr [rax+0x1e8];
0x00137c43: mov eax, [rip+0x86217]; mov r8, rbx; mov rsi, rbp; xor r9d, r9d; mov rdi, r12; call qword ptr [rax+0x1e8];
0x00137c44: add eax, 0x86217; mov r8, rbx; mov rsi, rbp; xor r9d, r9d; mov rdi, r12; call qword ptr [rax+0x1e8];
0x00137c47: or [rax], al; mov r8, rbx; mov rsi, rbp; xor r9d, r9d; mov rdi, r12; call qword ptr [rax+0x1e8];
0x00137c48: add [rcx-0x77], cl; fmul st, dword ptr [rax-0x77]; out dx, al; xor r9d, r9d; mov rdi, r12; call qword ptr [rax+0x1e8];
0x00137c49: mov r8, rbx; mov rsi, rbp; xor r9d, r9d; mov rdi, r12; call qword ptr [rax+0x1e8];
0x00137c4a: mov eax, ebx; mov rsi, rbp; xor r9d, r9d; mov rdi, r12; call qword ptr [rax+0x1e8];
0x00137c4b: fmul st, dword ptr [rax-0x77]; out dx, al; xor r9d, r9d; mov rdi, r12; call qword ptr [rax+0x1e8];
0x00137c4c: mov rsi, rbp; xor r9d, r9d; mov rdi, r12; call qword ptr [rax+0x1e8];
0x00137c4d: mov esi, ebp; xor r9d, r9d; mov rdi, r12; call qword ptr [rax+0x1e8];
0x00137c4e: out dx, al; xor r9d, r9d; mov rdi, r12; call qword ptr [rax+0x1e8];
0x00137c4f: xor r9d, r9d; mov rdi, r12; call qword ptr [rax+0x1e8];
0x00137c50: xor ecx, ecx; mov rdi, r12; call qword ptr [rax+0x1e8];
0x00137c51: leave; mov rdi, r12; call qword ptr [rax+0x1e8];
0x00137c52: mov rdi, r12; call qword ptr [rax+0x1e8];
0x00137c53: mov edi, esp; call qword ptr [rax+0x1e8];
0x00137c55: call qword ptr [rax+0x1e8];
0x00137cf3: nop [rax+rax]; call r12;
0x00137cf5: add [rax], r8b; call r12;
0x00137cf6: add [rax], al; call r12;
0x00137d2c: mov dh, 0x83; sbb eax, 0xa000003; test [rip-0x57fffffd], ebx; adc [rdi], cl; test [rsi+rdi*8+0x2949ffff], cl; iretd;
0x00137d2d: sbb dword ptr [rip+0xa000003], 0xffffff85; sbb eax, 0xa8000003; adc [rdi], cl; test [rsi+rdi*8+0x2949ffff], cl; iretd;
0x00137d2e: sbb eax, 0xa000003; test [rip-0x57fffffd], ebx; adc [rdi], cl; test [rsi+rdi*8+0x2949ffff], cl; iretd;
0x00137d2f: add eax, [rax]; add [rdx], cl; test [rip-0x57fffffd], ebx; adc [rdi], cl; test [rsi+rdi*8+0x2949ffff], cl; iretd;
0x00137d31: add [rdx], cl; test [rip-0x57fffffd], ebx; adc [rdi], cl; test [rsi+rdi*8+0x2949ffff], cl; iretd;
0x00137d33: test [rip-0x57fffffd], ebx; adc [rdi], cl; test [rsi+rdi*8+0x2949ffff], cl; iretd;
0x00137d34: sbb eax, 0xa8000003; adc [rdi], cl; test [rsi+rdi*8+0x2949ffff], cl; iretd;
0x00137d39: adc [rdi], cl; test [rsi+rdi*8+0x2949ffff], cl; iretd;
0x00137d3b: test [rsi+rdi*8+0x2949ffff], cl; iretd;
0x00137d3f: dec dword ptr [rcx+0x29]; iretd;
0x00137df1: or [rcx+0x48302474], cl; mov esi, [rsp+0x28]; mov esi, [rsi]; lea r9, [r11+rsi]; mov esi, [rsp+0x1c]; call rax;
0x00137df2: mov [rsp+0x30], esi; mov rsi, [rsp+0x28]; mov esi, [rsi]; lea r9, [r11+rsi]; mov esi, [rsp+0x1c]; call rax;
0x00137df4: and al, 0x30; mov rsi, [rsp+0x28]; mov esi, [rsi]; lea r9, [r11+rsi]; mov esi, [rsp+0x1c]; call rax;
0x00137df6: mov rsi, [rsp+0x28]; mov esi, [rsi]; lea r9, [r11+rsi]; mov esi, [rsp+0x1c]; call rax;
0x00137df7: mov esi, [rsp+0x28]; mov esi, [rsi]; lea r9, [r11+rsi]; mov esi, [rsp+0x1c]; call rax;
0x00137df9: and al, 0x28; mov esi, [rsi]; lea r9, [r11+rsi]; mov esi, [rsp+0x1c]; call rax;
0x00137dfb: mov esi, [rsi]; lea r9, [r11+rsi]; mov esi, [rsp+0x1c]; call rax;
0x00137dfc: lea r9, [r11+rsi]; mov esi, [rsp+0x1c]; call rax;
0x00137dfd: lea r9, [r11+rsi]; mov esi, [rsp+0x1c]; call rax;
0x00137dfe: lea ecx, [rbx+rsi]; mov esi, [rsp+0x1c]; call rax;
0x00137dff: or al, 0x33; mov esi, [rsp+0x1c]; call rax;
0x00137e01: mov esi, [rsp+0x1c]; call rax;
0x00137e03: and al, 0x1c; call rax;
0x00137e46: add [rax-0x75], cl; sub cl, ch; iretd;
0x00137e49: sub cl, ch; iretd;
0x00137e4e: call qword ptr [rax+0x48288b48];
0x00137ee2: xor r10d, r10d; add rdi, 0x1c; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x00137ee3: xor edx, edx; add rdi, 0x1c; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x00137ee5: add rdi, 0x1c; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x00137ee6: add edi, 0x1c; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x00137ee8: sbb al, 0xba; add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; syscall;
0x00137ee9: mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall;
0x00137eea: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; syscall;
0x00137eeb: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; syscall;
0x00137eec: add [rax], al; mov esi, 0x81; mov eax, 0xca; syscall;
0x00137eed: add [rsi+0x81], bh; mov eax, 0xca; syscall;
0x00137eee: mov esi, 0x81; mov eax, 0xca; syscall;
0x00137ef0: add [rax], al; add [rax+0xca], bh; syscall;
0x00137ef1: add [rax], al; mov eax, 0xca; syscall;
0x00137ef2: add [rax+0xca], bh; syscall;
0x00137ef3: mov eax, 0xca; syscall;
0x00137f4e: push rsi; std; jmp qword ptr [rsi+0x66];
0x00137fa0: ret 0xf41;
0x00137fef: add [rax+1], ecx; ror byte ptr [rax-0x77], 1; ret 0xc148;
0x00137ff2: ror byte ptr [rax-0x77], 1; ret 0xc148;
0x00138036: add [rax], al; add [rbp+0xa], dh; add rsp, 0x28; ret;
0x00138038: add [rbp+0xa], dh; add rsp, 0x28; ret;
0x00138047: push rbp; std; jmp qword ptr [rsi+0xf];
0x001381cd: ret 0x8de8;
0x00138251: shl byte ptr [rbp+0x7c], 0x48; mov ecx, [rsp+0x10]; mov rdi, [rsp+0x18]; call rcx;
0x00138254: mov rcx, [rsp+0x10]; mov rdi, [rsp+0x18]; call rcx;
0x00138255: mov ecx, [rsp+0x10]; mov rdi, [rsp+0x18]; call rcx;
0x00138257: and al, 0x10; mov rdi, [rsp+0x18]; call rcx;
0x00138259: mov rdi, [rsp+0x18]; call rcx;
0x0013825a: mov edi, [rsp+0x18]; call rcx;
0x0013825c: and al, 0x18; call rcx;
0x0013825e: call rcx;
0x00138291: add [rax], al; add [rbp+0x51], dh; add rsp, 0x110; mov eax, r12d; pop r12; ret;
0x00138293: add [rbp+0x51], dh; add rsp, 0x110; mov eax, r12d; pop r12; ret;
0x00138295: push rcx; add rsp, 0x110; mov eax, r12d; pop r12; ret;
0x00138296: add rsp, 0x110; mov eax, r12d; pop r12; ret;
0x00138297: add esp, 0x110; mov eax, r12d; pop r12; ret;
0x00138299: adc [rcx], al; add [rax], al; mov eax, r12d; pop r12; ret;
0x0013829a: add [rax], eax; add [rcx+rcx*4-0x20], al; pop r12; ret;
0x0013829b: add [rax], al; mov eax, r12d; pop r12; ret;
0x0013829c: add [rcx+rcx*4-0x20], al; pop r12; ret;
0x0013829d: mov eax, r12d; pop r12; ret;
0x001382a3: nop [rax+rax]; mov qword ptr fs:[r12], 0; mov rax, [rsp+0x10]; mov rdi, [rsp+0x18]; call rax;
0x001382a5: add [rax], r8b; mov qword ptr fs:[r12], 0; mov rax, [rsp+0x10]; mov rdi, [rsp+0x18]; call rax;
0x001382a6: add [rax], al; mov qword ptr fs:[r12], 0; mov rax, [rsp+0x10]; mov rdi, [rsp+0x18]; call rax;
0x001382a8: mov qword ptr fs:[r12], 0; mov rax, [rsp+0x10]; mov rdi, [rsp+0x18]; call rax;
0x001382a9: mov qword ptr [r12], 0; mov rax, [rsp+0x10]; mov rdi, [rsp+0x18]; call rax;
0x001382aa: mov dword ptr [rsp], 0; mov rax, [rsp+0x10]; mov rdi, [rsp+0x18]; call rax;
0x001382ab: add al, 0x24; add [rax], al; add [rax], al; mov rax, [rsp+0x10]; mov rdi, [rsp+0x18]; call rax;
0x001382ac: and al, 0; add [rax], al; add [rax-0x75], cl; and al, 0x10; mov rdi, [rsp+0x18]; call rax;
0x001382ad: add [rax], al; add [rax], al; mov rax, [rsp+0x10]; mov rdi, [rsp+0x18]; call rax;
0x001382ae: add [rax], al; add [rax-0x75], cl; and al, 0x10; mov rdi, [rsp+0x18]; call rax;
0x001382af: add [rax], al; mov rax, [rsp+0x10]; mov rdi, [rsp+0x18]; call rax;
0x001382b0: add [rax-0x75], cl; and al, 0x10; mov rdi, [rsp+0x18]; call rax;
0x001382b1: mov rax, [rsp+0x10]; mov rdi, [rsp+0x18]; call rax;
0x001382b2: mov eax, [rsp+0x10]; mov rdi, [rsp+0x18]; call rax;
0x001382b4: and al, 0x10; mov rdi, [rsp+0x18]; call rax;
0x001382b6: mov rdi, [rsp+0x18]; call rax;
0x001382b7: mov edi, [rsp+0x18]; call rax;
0x001382b9: and al, 0x18; call rax;
0x00138345: add [rbp+9], dh; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret;
0x00138348: add rsp, 0x20; pop rbx; pop rbp; pop r12; ret;
0x00138349: add esp, 0x20; pop rbx; pop rbp; pop r12; ret;
0x0013834b: and [rbx+0x5d], bl; pop r12; ret;
0x00138353: push rdx; std; jmp qword ptr [rsi+0x2e];
0x0013836b: shl rax, cl; shr rdx, 6; and rax, [rdi+rdx*8]; setne al; movzx eax, al; ret;
0x0013836c: shl eax, cl; shr rdx, 6; and rax, [rdi+rdx*8]; setne al; movzx eax, al; ret;
0x0013836e: shr rdx, 6; and rax, [rdi+rdx*8]; setne al; movzx eax, al; ret;
0x0013836f: shr edx, 6; and rax, [rdi+rdx*8]; setne al; movzx eax, al; ret;
0x00138372: and rax, [rdi+rdx*8]; setne al; movzx eax, al; ret;
0x00138373: and eax, [rdi+rdx*8]; setne al; movzx eax, al; ret;
0x00138374: add al, 0xd7; setne al; movzx eax, al; ret;
0x00138375: xlat [rbx]; setne al; movzx eax, al; ret;
0x00138376: setne al; movzx eax, al; ret;
0x00138379: movzx eax, al; ret;
0x0013837a: mov dh, 0xc0; ret;
0x00138387: add [rax+0x63], cl; ror dword ptr [rax-0x2d], 0xe2; shr rax, 6; or [rdi+rax*8], rdx; xor eax, eax; ret;
0x00138388: movsxd rax, ecx; shl rdx, cl; shr rax, 6; or [rdi+rax*8], rdx; xor eax, eax; ret;
0x00138389: movsxd eax, ecx; shl rdx, cl; shr rax, 6; or [rdi+rax*8], rdx; xor eax, eax; ret;
0x0013838a: ror dword ptr [rax-0x2d], 0xe2; shr rax, 6; or [rdi+rax*8], rdx; xor eax, eax; ret;
0x0013838b: shl rdx, cl; shr rax, 6; or [rdi+rax*8], rdx; xor eax, eax; ret;
0x0013838c: shl edx, cl; shr rax, 6; or [rdi+rax*8], rdx; xor eax, eax; ret;
0x0013838e: shr rax, 6; or [rdi+rax*8], rdx; xor eax, eax; ret;
0x0013838f: shr eax, 6; or [rdi+rax*8], rdx; xor eax, eax; ret;
0x00138392: or [rdi+rax*8], rdx; xor eax, eax; ret;
0x00138393: or [rdi+rax*8], edx; xor eax, eax; ret;
0x00138394: adc al, 0xc7; xor eax, eax; ret;
0x001383ab: shl rax, cl; shr rdx, 6; not rax; and [rdi+rdx*8], rax; xor eax, eax; ret;
0x001383ac: shl eax, cl; shr rdx, 6; not rax; and [rdi+rdx*8], rax; xor eax, eax; ret;
0x001383ae: shr rdx, 6; not rax; and [rdi+rdx*8], rax; xor eax, eax; ret;
0x001383af: shr edx, 6; not rax; and [rdi+rdx*8], rax; xor eax, eax; ret;
0x001383b2: not rax; and [rdi+rdx*8], rax; xor eax, eax; ret;
0x001383b3: not eax; and [rdi+rdx*8], rax; xor eax, eax; ret;
0x001383b4: ror byte ptr [rax+0x21], 1; add al, 0xd7; xor eax, eax; ret;
0x001383b5: and [rdi+rdx*8], rax; xor eax, eax; ret;
0x001383b6: and [rdi+rdx*8], eax; xor eax, eax; ret;
0x001383b7: add al, 0xd7; xor eax, eax; ret;
0x001383b8: xlat [rbx]; xor eax, eax; ret;
0x001383ce: movsxd r9, [rax]; add al, ch; or [rax-0x10], esp; jmp qword ptr [rsi+0xf];
0x001383cf: movsxd ecx, [rax]; add al, ch; or [rax-0x10], esp; jmp qword ptr [rsi+0xf];
0x001383d1: add al, ch; or [rax-0x10], esp; jmp qword ptr [rsi+0xf];
0x001383d3: or [rax-0x10], esp; jmp qword ptr [rsi+0xf];
0x001383dd: add [rax], al; add [rax-0x7b], cl; div byte ptr [rbx+rcx-0x17]; xchg esi, eax; or dh, cl; jmp qword ptr [rsi+0xf];
0x001383df: add [rax-0x7b], cl; div byte ptr [rbx+rcx-0x17]; xchg esi, eax; or dh, cl; jmp qword ptr [rsi+0xf];
0x001383e2: div byte ptr [rbx+rcx-0x17]; xchg esi, eax; or dh, cl; jmp qword ptr [rsi+0xf];
0x001383e4: or ebp, ecx; xchg esi, eax; or dh, cl; jmp qword ptr [rsi+0xf];
0x001383e6: xchg esi, eax; or dh, cl; jmp qword ptr [rsi+0xf];
0x001383e7: or dh, cl; jmp qword ptr [rsi+0xf];
0x001383e8: int1; jmp qword ptr [rsi+0xf];
0x001383ea: nop [rax+rax]; mov rax, [rip+0xcaae9]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret;
0x001383eb: nop [rax+rax]; mov rax, [rip+0xcaae9]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret;
0x001383ed: add [rax], r8b; mov rax, [rip+0xcaae9]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret;
0x001383ee: add [rax], al; mov rax, [rip+0xcaae9]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret;
0x001383ef: add [rax-0x75], cl; add eax, 0x85a79; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret;
0x001383f0: mov rax, [rip+0xcaae9]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret;
0x001383f1: mov eax, [rip+0xcaae9]; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret;
0x001383f2: add eax, 0x85a79; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret;
0x001383f4: pop rdx; or [rax], al; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret;
0x001383f5: or [rax], al; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret;
0x001383f7: mov dword ptr fs:[rax], 0x16; xor eax, eax; ret;
0x001383f8: mov dword ptr [rax], 0x16; xor eax, eax; ret;
0x00138457: add [rcx], dh; rol byte ptr [rbx-0x6bf00008], cl; ret 0x1389;
0x00138458: xor edx, edx; cmp eax, 0xffffffff; sete dl; mov [rbx], edx; pop rbx; ret;
0x00138459: rol byte ptr [rbx-0x6bf00008], cl; ret 0x1389;
0x0013845a: cmp eax, 0xffffffff; sete dl; mov [rbx], edx; pop rbx; ret;
0x0013845b: clc; dec dword ptr [rdi]; xchg esp, eax; ret 0x1389;
0x0013845c: dec dword ptr [rdi]; xchg esp, eax; ret 0x1389;
0x0013845d: sete dl; mov [rbx], edx; pop rbx; ret;
0x0013845e: xchg esp, eax; ret 0x1389;
0x0013845f: ret 0x1389;
0x00138460: mov [rbx], edx; pop rbx; ret;
0x00138475: add [rbp+0x481674c0], al; mov eax, [rip+0x8929f]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00138477: shl byte ptr [rsi+rdx+0x48], 0x8b; add eax, 0x8929f; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0013847a: mov rax, [rip+0x8929f]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0013847b: mov eax, [rip+0x8929f]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0013847c: add eax, 0x8929f; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0013847d: lahf; xchg edx, eax; or [rax], al; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x001384a5: add [rbp+0x481674c0], al; mov eax, [rip+0x89277]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x001384a7: shl byte ptr [rsi+rdx+0x48], 0x8b; add eax, 0x89277; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x001384aa: mov rax, [rip+0x89277]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x001384ab: mov eax, [rip+0x89277]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x001384ac: add eax, 0x89277; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x001384d5: add [rbp+0x481674c0], al; mov eax, [rip+0x8924f]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x001384d7: shl byte ptr [rsi+rdx+0x48], 0x8b; add eax, 0x8924f; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x001384da: mov rax, [rip+0x8924f]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x001384db: mov eax, [rip+0x8924f]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x001384dc: add eax, 0x8924f; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x001384dd: xchg r10, rax; or [rax], al; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00138505: add [rbp+0x481674c0], al; mov eax, [rip+0x89227]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00138507: shl byte ptr [rsi+rdx+0x48], 0x8b; add eax, 0x89227; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0013850a: mov rax, [rip+0x89227]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0013850b: mov eax, [rip+0x89227]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0013850c: add eax, 0x89227; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0013850e: xchg edx, eax; or [rax], al; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00138535: add [rbp+0x481674c0], al; mov eax, [rip+0x891ff]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00138537: shl byte ptr [rsi+rdx+0x48], 0x8b; add eax, 0x891ff; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0013853a: mov rax, [rip+0x891ff]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0013853b: mov eax, [rip+0x891ff]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0013853c: add eax, 0x891ff; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0013853d: call qword ptr [rcx-0x3eb7fff8];
0x00138565: add [rbp+0x481674c0], al; mov eax, [rip+0x891d7]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00138567: shl byte ptr [rsi+rdx+0x48], 0x8b; add eax, 0x891d7; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0013856a: mov rax, [rip+0x891d7]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0013856b: mov eax, [rip+0x891d7]; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0013856c: add eax, 0x891d7; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0013856d: xlat [rbx]; xchg ecx, eax; or [rax], al; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0013856e: xchg ecx, eax; or [rax], al; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x0013856f: or [rax], al; ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00138570: add [rax-0x3f], cl; enter 0x6411, 0x48; xor eax, [0x30]; jmp rax;
0x00138571: ror rax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00138572: ror eax, 0x11; xor rax, fs:[0x30]; jmp rax;
0x00138573: enter 0x6411, 0x48; xor eax, [0x30]; jmp rax;
0x00138574: adc [rax+rcx*2+0x33], esp; add al, 0x25; xor [rax], al; add [rax], al; jmp rax;
0x00138575: xor rax, fs:[0x30]; jmp rax;
0x00138576: xor rax, [0x30]; jmp rax;
0x00138577: xor eax, [0x30]; jmp rax;
0x00138578: add al, 0x25; xor [rax], al; add [rax], al; jmp rax;
0x00138579: and eax, 0x30; jmp rax;
0x0013857a: xor [rax], al; add [rax], al; jmp rax;
0x0013857c: add [rax], al; jmp rax;
0x001385a0: adc eax, 0x27b8; add [rdi], cl; add eax, 0x9be; add [rcx+0x3eb8c7], cl; add [rax], al; syscall;
0x001385a1: mov eax, 0x27; syscall;
0x001385a1: mov eax, 0x27; syscall; mov esi, 9; mov edi, eax; mov eax, 0x3e; syscall;
0x001385a3: add [rax], al; add [rdi], cl; add eax, 0x9be; add [rcx+0x3eb8c7], cl; add [rax], al; syscall;
0x001385a4: add [rax], al; syscall; mov esi, 9; mov edi, eax; mov eax, 0x3e; syscall;
0x001385a5: add [rdi], cl; add eax, 0x9be; add [rcx+0x3eb8c7], cl; add [rax], al; syscall;
0x001385a6: syscall; mov esi, 9; mov edi, eax; mov eax, 0x3e; syscall;
0x001385a7: add eax, 0x9be; add [rcx+0x3eb8c7], cl; add [rax], al; syscall;
0x001385a8: mov esi, 9; mov edi, eax; mov eax, 0x3e; syscall;
0x001385a9: or [rax], eax; add [rax], al; mov edi, eax; mov eax, 0x3e; syscall;
0x001385aa: add [rax], al; add [rcx+0x3eb8c7], cl; add [rax], al; syscall;
0x001385ab: add [rax], al; mov edi, eax; mov eax, 0x3e; syscall;
0x001385ac: add [rcx+0x3eb8c7], cl; add [rax], al; syscall;
0x001385ad: mov edi, eax; mov eax, 0x3e; syscall;
0x001385af: mov eax, 0x3e; syscall;
0x001385b4: syscall; mov rax, [rip+0x89233]; mov rdi, r8; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x001385b6: mov rax, [rip+0x89233]; mov rdi, r8; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x001385b7: mov eax, [rip+0x89233]; mov rdi, r8; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x001385b8: add eax, 0x89233; mov rdi, r8; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x001385ba: xchg edx, eax; or [rax], al; mov rdi, r8; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x001385bb: or [rax], al; mov rdi, r8; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x001385bc: add [rcx+rcx*4-0x39], cl; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x001385bd: mov rdi, r8; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x001385be: mov edi, eax; ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x001385c0: ror rax, 0x11; xor rax, fs:[0x30]; call rax;
0x001385c1: ror eax, 0x11; xor rax, fs:[0x30]; call rax;
0x001385c2: enter 0x6411, 0x48; xor eax, [0x30]; call rax;
0x001385c3: adc [rax+rcx*2+0x33], esp; add al, 0x25; xor [rax], al; add [rax], al; call rax;
0x001385c4: xor rax, fs:[0x30]; call rax;
0x001385c5: xor rax, [0x30]; call rax;
0x001385c6: xor eax, [0x30]; call rax;
0x001385c7: add al, 0x25; xor [rax], al; add [rax], al; call rax;
0x001385c8: and eax, 0x30; call rax;
0x001385c9: xor [rax], al; add [rax], al; call rax;
0x001385cb: add [rax], al; call rax;
0x001385ce: rcl byte ptr [rax-0x66fa74b8], 1; pop rax; or [rax], al; mov dword ptr fs:[rax], 0x26; xor eax, eax; ret;
0x001385cf: nop; mov rax, [rip+0x85899]; mov dword ptr fs:[rax], 0x26; xor eax, eax; ret;
0x001385d0: mov rax, [rip+0x85899]; mov dword ptr fs:[rax], 0x26; xor eax, eax; ret;
0x001385d1: mov eax, [rip+0x85899]; mov dword ptr fs:[rax], 0x26; xor eax, eax; ret;
0x001385d2: add eax, 0x85899; mov dword ptr fs:[rax], 0x26; xor eax, eax; ret;
0x001385d3: cdq; pop rax; or [rax], al; mov dword ptr fs:[rax], 0x26; xor eax, eax; ret;
0x001385d4: pop rax; or [rax], al; mov dword ptr fs:[rax], 0x26; xor eax, eax; ret;
0x001385d5: or [rax], al; mov dword ptr fs:[rax], 0x26; xor eax, eax; ret;
0x001385d7: mov dword ptr fs:[rax], 0x26; xor eax, eax; ret;
0x001385d8: mov dword ptr [rax], 0x26; xor eax, eax; ret;
0x00138673: or [rax+0x39], cl; ret 0x5776;
0x001386b5: fisttp word ptr [rcx+rcx*4+5], st; add ebx, [rax-0x3fcefff8]; mov [rip+0x897f2], rsi; ret;
0x001386b6: mov [rip+0x89803], r8; xor eax, eax; mov [rip+0x897f2], rsi; ret;
0x001386b7: mov [rip+0x89803], eax; xor eax, eax; mov [rip+0x897f2], rsi; ret;
0x001386b8: add eax, 0x89803; xor eax, eax; mov [rip+0x897f2], rsi; ret;
0x001386b9: add ebx, [rax-0x3fcefff8]; mov [rip+0x897f2], rsi; ret;
0x001386ba: cwde; or [rax], al; xor eax, eax; mov [rip+0x897f2], rsi; ret;
0x001386bb: or [rax], al; xor eax, eax; mov [rip+0x897f2], rsi; ret;
0x001386bd: xor eax, eax; mov [rip+0x897f2], rsi; ret;
0x001386bf: mov [rip+0x897f2], rsi; ret;
0x001386c0: mov [rip+0x897f2], esi; ret;
0x001386c1: xor eax, 0x897f2; ret;
0x001386c3: xchg edi, eax; or [rax], al; ret;
0x001386c4: or [rax], al; ret;
0x001386c5: add bl, al; nop [rax+rax]; xor eax, eax; ret;
0x001386d7: inc ebx; mov eax, 0xfffffffe; ret;
0x001386d9: mov eax, 0xfffffffe; ret;
0x00138717: add [rax], al; add [rbp+5], dh; add rsp, 0x28; ret;
0x00138719: add [rbp+5], dh; add rsp, 0x28; ret;
0x0013871b: add eax, 0x28c48348; ret;
0x0013871c: add rsp, 0x28; ret;
0x0013871d: add esp, 0x28; ret;
0x00138722: cli; std; jmp qword ptr [rsi+0x2e];
0x0013875a: jmp qword ptr [rax+rcx*2-0x75];
0x001387a6: jmp far fword ptr [rdi];
0x00138832: ror byte ptr [rdi], 0x95; ret 0x8149;
0x00138834: xchg ebp, eax; ret 0x8149;
0x00138835: ret 0x8149;
0x00138841: ret 0x9588;
0x0013897a: ret 0xfffd;
0x00138a0e: pop r12; pop r13; pop r14; pop r15; pop rbp; ret;
0x00138a0f: pop rsp; pop r13; pop r14; pop r15; pop rbp; ret;
0x00138a10: pop r13; pop r14; pop r15; pop rbp; ret;
0x00138a11: pop rbp; pop r14; pop r15; pop rbp; ret;
0x00138a12: pop r14; pop r15; pop rbp; ret;
0x00138a13: pop rsi; pop r15; pop rbp; ret;
0x00138a14: pop r15; pop rbp; ret;
0x00138a15: pop rdi; pop rbp; ret;
0x00138b9e: call qword ptr [rax+0x38858b48];
0x00138cd7: dec dword ptr [rax+0x29]; ret 0x8348;
0x00138cea: dec dword ptr [rax-0x77]; ret 0x394c;
0x00138ced: ret 0x394c;
0x00138d05: ret 0x8801;
0x00138e10: in al, 0x25; iretd;
0x00138eb1: cli; inc dword ptr [rbp-0x727af040]; or [rax], eax; add [rax-0x7d], cl; ret;
0x00138eb2: inc dword ptr [rbp-0x727af040]; or [rax], eax; add [rax-0x7d], cl; ret;
0x00138eb8: or [rax], eax; add [rax-0x7d], cl; ret;
0x00138f97: ret 0xffee;
0x00139034: dec dword ptr [rdi]; mov dh, 0x42; add [rax-0x7d], ecx; ret 0x8401;
0x00139036: mov dh, 0x42; add [rax-0x7d], ecx; ret 0x8401;
0x00139038: add [rax-0x7d], ecx; ret 0x8401;
0x0013903b: ret 0x8401;
0x001393bd: idiv bh; dec dword ptr [rdi]; mov dh, 0x42; add al, [rbx-0x7cb7fd37]; ret 0xe902;
0x001393bf: dec dword ptr [rdi]; mov dh, 0x42; add al, [rbx-0x7cb7fd37]; ret 0xe902;
0x001393c1: mov dh, 0x42; add al, [rbx-0x7cb7fd37]; ret 0xe902;
0x001393c3: add al, [rbx-0x7cb7fd37]; ret 0xe902;
0x001393c5: leave; add cl, [rax-0x7d]; ret 0xe902;
0x001393c6: add cl, [rax-0x7d]; ret 0xe902;
0x001393c9: ret 0xe902;
0x00139469: add [rax], al; add al, ch; iretd;
0x0013946b: add al, ch; iretd;
0x00139493: lodsb [rsi]; idiv edi; jmp qword ptr [rsi+0xf];
0x001394c3: add [rax+0x39], ecx; shl dword ptr [rsi+rax-0x80], 0x78; call far fword ptr [rsp+rsi*2-0xf];
0x001394c6: shl dword ptr [rsi+rax-0x80], 0x78; call far fword ptr [rsp+rsi*2-0xf];
0x0013956c: idiv bh; call qword ptr [rax-0x30c272b8];
0x0013956e: call qword ptr [rax-0x30c272b8];
0x0013976b: call far fword ptr [rsp+rsi*2-0xf];
0x00139795: or al, dh; add bl, [rax+rcx*2-0x7d]; ret 0xf01;
0x00139797: add bl, [rax+rcx*2-0x7d]; ret 0xf01;
0x0013979b: ret 0xf01;
0x001397c3: dec dword ptr [rax-0x77]; ret 0x8949;
0x00139831: mov edi, [rsi*8+0x75c084ff]; iretd;
0x001398a2: dec dword ptr [rax-0x39]; test [rax+0xfffffb], edi; add al, 0; add [rax-0x77], cl; ret;
0x001398a5: test [rax+0xfffffb], edi; add al, 0; add [rax-0x77], cl; ret;
0x001398a6: mov eax, 0xfffffb; add al, 0; add [rax-0x77], cl; ret;
0x001398a9: inc dword ptr [rax]; add al, 0; add [rax-0x77], cl; ret;
0x001398aa: add [rax+rax], al; add [rax-0x77], cl; ret;
0x001398ab: add al, 0; add [rax-0x77], cl; ret;
0x001399ee: dec dword ptr [rax-0x77]; ret 0x8548;
0x00139d43: idiv bh; dec dword ptr [rax-0x77]; iretd;
0x00139d45: dec dword ptr [rax-0x77]; iretd;
0x00139dd5: dec dword ptr [rax-0x77]; ret 0x8b48;
0x00139df0: add [rax], eax; add [rax-0x77], cl; iretd;
0x00139e63: inc dword ptr [rax]; add [rax], al; add [rax-0x77], cl; iretd;
0x00139e65: add [rax], al; add [rax-0x77], cl; iretd;
0x0013a150: mov rdx, rsi; mov eax, 0xcc; mov esi, 0x80; syscall;
0x0013a151: mov edx, esi; mov eax, 0xcc; mov esi, 0x80; syscall;
0x0013a153: mov eax, 0xcc; mov esi, 0x80; syscall;
0x0013a154: int3; add [rax], al; add [rsi+0x80], bh; syscall;
0x0013a186: ret 0xa4e8;
0x0013a188: movsb [rdi], [rsi]; mov al, 0xee; inc dword ptr [rbp+0x31]; ror byte ptr [rax-0x7d], 0xc4; or [rcx+rcx*4-0x40], al; ret;
0x0013a189: mov al, 0xee; inc dword ptr [rbp+0x31]; ror byte ptr [rax-0x7d], 0xc4; or [rcx+rcx*4-0x40], al; ret;
0x0013a18a: out dx, al; inc dword ptr [rbp+0x31]; ror byte ptr [rax-0x7d], 0xc4; or [rcx+rcx*4-0x40], al; ret;
0x0013a18b: inc dword ptr [rbp+0x31]; ror byte ptr [rax-0x7d], 0xc4; or [rcx+rcx*4-0x40], al; ret;
0x0013a18c: xor r8d, r8d; add rsp, 8; mov eax, r8d; ret;
0x0013a18d: xor eax, eax; add rsp, 8; mov eax, r8d; ret;
0x0013a18e: ror byte ptr [rax-0x7d], 0xc4; or [rcx+rcx*4-0x40], al; ret;
0x0013a18f: add rsp, 8; mov eax, r8d; ret;
0x0013a190: add esp, 8; mov eax, r8d; ret;
0x0013a192: or [rcx+rcx*4-0x40], al; ret;
0x0013a1a2: adc eax, 0x83cc9; neg eax; mov r8d, 0xffffffff; mov fs:[rdx], eax; mov eax, r8d; ret;
0x0013a1b4: rol bl, 0x66; nop [rax+rax]; mov rdx, rsi; mov eax, 0xcb; mov esi, 0x80; syscall;
0x0013a1b6: nop [rax+rax]; mov rdx, rsi; mov eax, 0xcb; mov esi, 0x80; syscall;
0x0013a1b7: nop [rax+rax]; mov rdx, rsi; mov eax, 0xcb; mov esi, 0x80; syscall;
0x0013a1b8: nop [rax+rax]; mov rdx, rsi; mov eax, 0xcb; mov esi, 0x80; syscall;
0x0013a1bc: add [rax], al; add [rax], al; mov rdx, rsi; mov eax, 0xcb; mov esi, 0x80; syscall;
0x0013a1be: add [rax], al; mov rdx, rsi; mov eax, 0xcb; mov esi, 0x80; syscall;
0x0013a1c0: mov rdx, rsi; mov eax, 0xcb; mov esi, 0x80; syscall;
0x0013a1c1: mov edx, esi; mov eax, 0xcb; mov esi, 0x80; syscall;
0x0013a1c3: mov eax, 0xcb; mov esi, 0x80; syscall;
0x0013a1c5: add [rax], al; add [rsi+0x80], bh; syscall;
0x0013a1c6: add [rax], al; mov esi, 0x80; syscall;
0x0013a1c7: add [rsi+0x80], bh; syscall;
0x0013a1c8: mov esi, 0x80; syscall;
0x0013a1cb: add [rax], al; syscall;
0x0013a1d6: sub [rcx-0x77], eax; rol byte ptr [rbx+0x1874fff8], 0x64; mov dword ptr [0x38], 0; mov dword ptr fs:[0x40], 0; mov eax, r8d; ret;
0x0013a1d9: rol byte ptr [rbx+0x1874fff8], 0x64; mov dword ptr [0x38], 0; mov dword ptr fs:[0x40], 0; mov eax, r8d; ret;
0x0013a1db: clc; push qword ptr [rax+rbx+0x64]; mov dword ptr [0x38], 0; mov dword ptr fs:[0x40], 0; mov eax, r8d; ret;
0x0013a1dc: push qword ptr [rax+rbx+0x64]; mov dword ptr [0x38], 0; mov dword ptr fs:[0x40], 0; mov eax, r8d; ret;
0x0013a1df: mov dword ptr fs:[0x38], 0; mov dword ptr fs:[0x40], 0; mov eax, r8d; ret;
0x0013a1e0: mov dword ptr [0x38], 0; mov dword ptr fs:[0x40], 0; mov eax, r8d; ret;
0x0013a1e2: and eax, 0x38; add [rax], al; add [rax], al; mov dword ptr fs:[0x40], 0; mov eax, r8d; ret;
0x0013a1e5: add [rax], al; add [rax], al; add [rax], al; mov dword ptr fs:[0x40], 0; mov eax, r8d; ret;
0x0013a1e7: add [rax], al; add [rax], al; mov dword ptr fs:[0x40], 0; mov eax, r8d; ret;
0x0013a1e9: add [rax], al; mov dword ptr fs:[0x40], 0; mov eax, r8d; ret;
0x0013a1ea: add [rdi+rax*8+4], ah; and eax, 0x40; add [rax], al; add [rax], al; mov eax, r8d; ret;
0x0013a1eb: mov dword ptr fs:[0x40], 0; mov eax, r8d; ret;
0x0013a1ec: mov dword ptr [0x40], 0; mov eax, r8d; ret;
0x0013a1ed: add al, 0x25; add [rax], al; add [rax], al; add [rax], al; add [rcx+rcx*4-0x40], al; ret;
0x0013a1ee: and eax, 0x40; add [rax], al; add [rax], al; mov eax, r8d; ret;
0x0013a1f0: add [rax], al; add [rax], al; add [rax], al; add [rcx+rcx*4-0x40], al; ret;
0x0013a1f1: add [rax], al; add [rax], al; add [rax], al; mov eax, r8d; ret;
0x0013a1f2: add [rax], al; add [rax], al; add [rcx+rcx*4-0x40], al; ret;
0x0013a1f3: add [rax], al; add [rax], al; mov eax, r8d; ret;
0x0013a1f4: add [rax], al; add [rcx+rcx*4-0x40], al; ret;
0x0013a1f5: add [rax], al; mov eax, r8d; ret;
0x0013a1f6: add [rcx+rcx*4-0x40], al; ret;
0x0013a200: mov rdx, [rip+0xd8d61]; neg eax; mov r8d, 0xffffffff; mov fs:[rdx], eax; mov eax, r8d; ret;
0x0013a201: mov edx, [rip+0xd8d61]; neg eax; mov r8d, 0xffffffff; mov fs:[rdx], eax; mov eax, r8d; ret;
0x0013a202: adc eax, 0x83c69; neg eax; mov r8d, 0xffffffff; mov fs:[rdx], eax; mov eax, r8d; ret;
0x0013a203: imul edi, [rax+rcx], 0x41d8f700; mov eax, 0xffffffff; mov fs:[rdx], eax; mov eax, r8d; ret;
0x0013a205: or [rax], al; neg eax; mov r8d, 0xffffffff; mov fs:[rdx], eax; mov eax, r8d; ret;
0x0013a207: neg eax; mov r8d, 0xffffffff; mov fs:[rdx], eax; mov eax, r8d; ret;
0x0013a209: mov r8d, 0xffffffff; mov fs:[rdx], eax; mov eax, r8d; ret;
0x0013a20a: mov eax, 0xffffffff; mov fs:[rdx], eax; mov eax, r8d; ret;
0x0013a20e: jmp qword ptr [rcx+rcx*4+2];
0x0013a20f: mov fs:[rdx], eax; mov eax, r8d; ret;
0x0013a210: mov [rdx], eax; mov eax, r8d; ret;
0x0013a211: add al, [rcx+rcx*4-0x40]; ret;
0x0013a212: mov eax, r8d; ret;
0x0013a213: mov eax, eax; ret;
0x0013a23b: add rsp, 0x18; ret;
0x0013a23c: add esp, 0x18; ret;
0x0013a23e: sbb bl, al; mov rax, [rip+0x83c29]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x0013a242: add eax, 0x83c29; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x0013a243: sub [rax+rcx], edi; add [rdi+rax*8], ah; add [rax], al; add [rax-1], bh; ret;
0x0013a25e: add [rax+0x9058b48], dl; cmp al, 8; add [rdi+rax*8], ah; add [rax], al; add [rax-1], bh; ret;
0x0013a262: add eax, 0x83c09; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x0013a263: or [rax+rcx], edi; add [rdi+rax*8], ah; add [rax], al; add [rax-1], bh; ret;
0x0013a264: cmp al, 8; add [rdi+rax*8], ah; add [rax], al; add [rax-1], bh; ret;
0x0013a27e: add [rax-0x16fa74b8], dl; cmp ecx, [rax]; add [rdi+rax*8], ah; add [rax], al; add [rax-1], bh; ret;
0x0013a282: add eax, 0x83be9; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x0013a29e: add [rax-0x36fa74b8], dl; cmp ecx, [rax]; add [rdi+rax*8], ah; add [rax], al; add [rax-1], bh; ret;
0x0013a2a2: add eax, 0x83bc9; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x0013a2a3: leave; cmp ecx, [rax]; add [rdi+rax*8], ah; add [rax], al; add [rax-1], bh; ret;
0x0013a2d0: add rsp, 8; sar eax, 0x1f; ret;
0x0013a2d1: add esp, 8; sar eax, 0x1f; ret;
0x0013a2d4: sar eax, 0x1f; ret;
0x0013a2d8: nop [rax+rax]; mov rax, [rip+0x83b89]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x0013a2dc: add [rax], al; add [rax], al; mov rax, [rip+0x83b89]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x0013a2dd: add [rax], al; add [rax-0x75], cl; add eax, 0x83b89; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x0013a2df: add [rax-0x75], cl; add eax, 0x83b89; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x0013a2e2: add eax, 0x83b89; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x0013a2e3: mov [rbx], edi; or [rax], al; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x0013a2f5: nop [rax+rax]; nop; mov rax, [rip+0x83c09]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x0013a2f6: nop [rax+rax]; nop; mov rax, [rip+0x83c09]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x0013a2f7: nop [rax+rax]; nop; mov rax, [rip+0x83c09]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x0013a2fd: add [rax], al; nop; mov rax, [rip+0x83c09]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x0013a2fe: add [rax+0x69058b48], dl; cmp ecx, [rax]; add [rdi+rax*8], ah; add [rax], al; add [rax-1], bh; ret;
0x0013a2ff: nop; mov rax, [rip+0x1815b9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x0013a302: add eax, 0x83b69; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x0013a303: imul edi, [rbx], 0xc7640008; add [rsi], ah; add [rax], al; add [rax-1], bh; ret;
0x0013a304: cmp ecx, [rax]; add [rdi+rax*8], ah; add [rax], al; add [rax-1], bh; ret;
0x0013a518: hlt; ret 0xfff8;
0x0013a5b5: push rdi; ret 0xfff8;
0x0013a788: rcr byte ptr [rbx+0x5d], 0x41; pop rsp; pop r13; pop r14; pop r15; ret;
0x0013a7a2: jmp qword ptr [rsp+rax*2-0x75];
0x0013a7a6: add bl, ch; ret;
0x0013a7d1: std; jmp qword ptr [rsi+0x2e];
0x0013a7d2: std; jmp qword ptr [rsi+0x2e];
0x0013a7ed: add [rax], al; add cl, ch; stosd [rdi]; insd [rdi], dx; sti; jmp qword ptr [rsi+0x2e];
0x0013a7ef: add cl, ch; stosd [rdi]; insd [rdi], dx; sti; jmp qword ptr [rsi+0x2e];
0x0013a7f1: stosd [rdi]; insd [rdi], dx; sti; jmp qword ptr [rsi+0x2e];
0x0013a7f2: insd [rdi], dx; sti; jmp qword ptr [rsi+0x2e];
0x0013a7f3: sti; jmp qword ptr [rsi+0x2e];
0x0013a882: std; jmp qword ptr [rsi+0x66];
0x0013a8fa: add [rax], al; add [rbp+6], dh; add rsp, 0x10; pop rbx; ret;
0x0013a8fc: add [rbp+6], dh; add rsp, 0x10; pop rbx; ret;
0x0013a8ff: add rsp, 0x10; pop rbx; ret;
0x0013a900: add esp, 0x10; pop rbx; ret;
0x0013a908: std; jmp qword ptr [rsi+0xf];
0x0013a90a: nop [rax+rax]; mov rax, [rip+0xc7f89]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x0013a90b: nop [rax+rax]; mov rax, [rip+0xcf3f9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x0013a90d: add [rax], r8b; mov rax, [rip+0xcf3f9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x0013a90e: add [rax], al; mov rax, [rip+0xcf3f9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x0013a90f: add [rax-0x75], cl; add eax, 0x83559; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x0013a910: mov rax, [rip+0x1815b9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x0013a911: mov eax, [rip+0x1815b9]; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x0013a912: add eax, 0x83559; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x0013a913: pop rcx; xor eax, 0xc7640008; add [rsi], ah; add [rax], al; add [rax-1], bh; ret;
0x0013a914: xor eax, 0xc7640008; add [rsi], ah; add [rax], al; add [rax-1], bh; ret;
0x0013a915: or [rax], al; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x0013a916: add [rdi+rax*8], ah; add [rax], al; add [rax-1], bh; ret;
0x0013a917: mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret;
0x0013a918: mov dword ptr [rax], 0x26; mov eax, 0xffffffff; ret;
0x0013a919: add [rsi], ah; add [rax], al; add [rax-1], bh; ret;
0x0013a91a: add [rax], al; add [rax-1], bh; ret;
0x0013a922: inc ebx; nop [rax+rax]; nop; mov eax, 0xffffffff; ret;
0x0013a925: nop [rax+rax]; nop; mov eax, 0xffffffff; ret;
0x0013a926: nop [rax+rax]; nop; mov eax, 0xffffffff; ret;
0x0013a927: nop [rax+rax]; nop; mov eax, 0xffffffff; ret;
0x0013a929: test [rax], al; add [rax], al; add [rax], al; nop; mov eax, 0xffffffff; ret;
0x0013a92b: add [rax], al; add [rax], al; nop; mov eax, 0xffffffff; ret;
0x0013a92d: add [rax], al; nop; mov eax, 0xffffffff; ret;
0x0013a92e: add [rax-0x48], dl; inc ebx; nop [rax+rax]; mov qword ptr [rcx], 0; mov eax, 0xffffffff; ret;
0x0013a92f: nop; mov eax, 0xffffffff; ret;
0x0013a934: inc ebx; nop [rax+rax]; mov qword ptr [rcx], 0; mov eax, 0xffffffff; ret;
0x0013a936: nop [rax+rax]; mov qword ptr [rcx], 0; mov eax, 0xffffffff; ret;
0x0013a937: nop [rax+rax]; mov qword ptr [rcx], 0; mov eax, 0xffffffff; ret;
0x0013a938: nop [rax+rax]; mov qword ptr [rcx], 0; mov eax, 0xffffffff; ret;
0x0013a93a: test [rax], al; add [rax], al; add [rax], al; mov qword ptr [rcx], 0; mov eax, 0xffffffff; ret;
0x0013a93c: add [rax], al; add [rax], al; mov qword ptr [rcx], 0; mov eax, 0xffffffff; ret;
0x0013a93d: add [rax], al; add [rax-0x39], cl; add [rax], eax; add [rax], al; add [rax-1], bh; ret;
0x0013a93e: add [rax], al; mov qword ptr [rcx], 0; mov eax, 0xffffffff; ret;
0x0013a93f: add [rax-0x39], cl; add [rax], eax; add [rax], al; add [rax-1], bh; ret;
0x0013a940: mov qword ptr [rcx], 0; mov eax, 0xffffffff; ret;
0x0013a941: mov dword ptr [rcx], 0; mov eax, 0xffffffff; ret;
0x0013a942: add [rax], eax; add [rax], al; add [rax-1], bh; ret;
0x0013a943: add [rax], al; add [rax], al; mov eax, 0xffffffff; ret;
0x0013a944: add [rax], al; add [rax-1], bh; ret;
0x0013a945: add [rax], al; mov eax, 0xffffffff; ret;
0x0013a946: add [rax-1], bh; ret;
0x0013a947: mov eax, 0xffffffff; ret;
0x0013a9c2: test dword ptr [rbp+rcx*4+0x48], 0xc929490f; lea r10, [rip+0x4a3af]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0013a9c3: lea r9, [rax+0xf]; sub r9, rcx; lea r10, [rip+0x4a3af]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0013a9c4: lea ecx, [rax+0xf]; sub r9, rcx; lea r10, [rip+0x4a3af]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0013a9c5: cmovns rbp, [rcx]; leave; lea r10, [rip+0x4a3af]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0013a9c6: cmovns ebp, [rcx]; leave; lea r10, [rip+0x4a3af]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0013a9c7: sub r9, rcx; lea r10, [rip+0x4a3af]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0013a9c8: sub ecx, ecx; lea r10, [rip+0x4a3af]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0013a9c9: leave; lea r10, [rip+0x4a3af]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0013a9ca: lea r10, [rip+0x4a3af]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0013a9cb: lea edx, [rip+0x4a3af]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0013a9cc: adc eax, 0x4a3af; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0013a9cd: scasd [rdi]; mov [0x8d4f8a0c634f0004], eax; adc al, 0xa; jmp r10;
0x0013a9ce: mov [0x8d4f8a0c634f0004], eax; adc al, 0xa; jmp r10;
0x0013bb76: nop [rax+rax]; bsf rdx, rdx; movzx ecx, byte ptr [rsi+rdx]; movzx eax, byte ptr [rdi+rdx]; sub eax, ecx; ret;
0x0013bb77: nop [rax+rax]; bsf rdx, rdx; movzx ecx, byte ptr [rsi+rdx]; movzx eax, byte ptr [rdi+rdx]; sub eax, ecx; ret;
0x0013bb78: nop [rax+rax]; bsf rdx, rdx; movzx ecx, byte ptr [rsi+rdx]; movzx eax, byte ptr [rdi+rdx]; sub eax, ecx; ret;
0x0013bc42: test dword ptr [rbp+rcx*4+0x48], 0xc929490f; lea r10, [rip+0x491af]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0013bc43: lea r9, [rax+0xf]; sub r9, rcx; lea r10, [rip+0x491af]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0013bc44: lea ecx, [rax+0xf]; sub r9, rcx; lea r10, [rip+0x491af]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0013bc45: cmovns rbp, [rcx]; leave; lea r10, [rip+0x491af]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0013bc46: cmovns ebp, [rcx]; leave; lea r10, [rip+0x491af]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0013bc47: sub r9, rcx; lea r10, [rip+0x491af]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0013bc48: sub ecx, ecx; lea r10, [rip+0x491af]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0013bc49: leave; lea r10, [rip+0x491af]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0013bc4a: lea r10, [rip+0x491af]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0013bc4b: lea edx, [rip+0x491af]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0013bc4c: adc eax, 0x491af; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0013bc4d: scasd [rdi]; xchg ecx, eax; add al, 0; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0013bc4e: xchg ecx, eax; add al, 0; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0013bc4f: add al, 0; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0013c32e: ret 0xf;
0x0013d217: adc [rsi+0xf], ah; outsd dx, [rsi]; fmul st, qword ptr [rcx-0x7d]; ret 0x7f10;
0x0013d21a: outsd dx, [rsi]; fmul st, qword ptr [rcx-0x7d]; ret 0x7f10;
0x0013d21b: fmul st, qword ptr [rcx-0x7d]; ret 0x7f10;
0x0013d25b: adc [rsi+0xf], ah; outsd dx, [rsi]; fsub st(1), st; imul edi, 0xffffffff; jmp qword ptr [rsi+0x66];
0x0013d25e: outsd dx, [rsi]; fsub st(1), st; imul edi, 0xffffffff; jmp qword ptr [rsi+0x66];
0x0013d25f: fsub st(1), st; imul edi, 0xffffffff; jmp qword ptr [rsi+0x66];
0x0013d261: imul edi, 0xffffffff; jmp qword ptr [rsi+0x66];
0x0013d34c: add eax, 0x4d207700; movsxd ecx, [rbx+rdx*4]; add rsi, rdx; add rdi, rdx; add r9, r11; jmp r9;
0x0013d34d: add [rdi+0x20], dh; movsxd r9, [r11+rdx*4]; add rsi, rdx; add rdi, rdx; add r9, r11; jmp r9;
0x0013d34f: and [rbp+0x63], cl; or al, 0x93; add rsi, rdx; add rdi, rdx; add r9, r11; jmp r9;
0x0013d3a8: test [rbx+0x48000000], al; mov ecx, [rip+0x80f7c]; lea r11, [rip+0x55d85]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9;
0x0013d3ab: add [rax], al; mov rcx, [rip+0x80f7c]; lea r11, [rip+0x55d85]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9;
0x0013d3ac: add [rax-0x75], cl; or eax, 0x80f7c; lea r11, [rip+0x55d85]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9;
0x0013d3ad: mov rcx, [rip+0x80f7c]; lea r11, [rip+0x55d85]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9;
0x0013d3ae: mov ecx, [rip+0x80f7c]; lea r11, [rip+0x55d85]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9;
0x0013d3af: or eax, 0x80f7c; lea r11, [rip+0x55d85]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9;
0x0013d3b2: or [rax], al; lea r11, [rip+0x55d85]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9;
0x0013d3b3: add [rbp+rcx*4+0x1d], cl; test [rbp+5], ebx; add [rdi+0x63], cl; or al, 0x8b; lea r9, [r11+r9]; jmp r9;
0x0013d3b4: lea r11, [rip+0x55d85]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9;
0x0013d3b5: lea ebx, [rip+0x55d85]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9;
0x0013d3b6: sbb eax, 0x55d85; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9;
0x0013d3b7: test [rbp+5], ebx; add [rdi+0x63], cl; or al, 0x8b; lea r9, [r11+r9]; jmp r9;
0x0013d40c: add [rax], al; mov rcx, [rip+0x80f1b]; lea r11, [rip+0x55d64]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9;
0x0013d40d: add [rax-0x75], cl; or eax, 0x80f1b; lea r11, [rip+0x55d64]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9;
0x0013d40e: mov rcx, [rip+0x80f1b]; lea r11, [rip+0x55d64]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9;
0x0013d40f: mov ecx, [rip+0x80f1b]; lea r11, [rip+0x55d64]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9;
0x0013d410: or eax, 0x80f1b; lea r11, [rip+0x55d64]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9;
0x0013d411: sbb ecx, [rdi]; or [rax], al; lea r11, [rip+0x55d64]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9;
0x0013d413: or [rax], al; lea r11, [rip+0x55d64]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9;
0x0013d414: add [rbp+rcx*4+0x1d], cl; pop rbp; add eax, 0xc634f00; mov ecx, [rdi-0x73]; or al, 0xb; jmp r9;
0x0013d415: lea r11, [rip+0x55d64]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9;
0x0013d416: lea ebx, [rip+0x55d64]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9;
0x0013d417: sbb eax, 0x55d64; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9;
0x0013d418: pop rbp; add eax, 0xc634f00; mov ecx, [rdi-0x73]; or al, 0xb; jmp r9;
0x0013d419: pop rbp; add eax, 0xc634f00; mov ecx, [rdi-0x73]; or al, 0xb; jmp r9;
0x0013d48a: sbb eax, 0x55b71; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013d48c: pop rbx; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x0013d545: mov dword ptr [rax+0x48], 0x148d601; xlat [rbx]; lea r11, [rip+0x55b71]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013d547: add rsi, rdx; add rdi, rdx; lea r11, [rip+0x55b71]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013d548: add esi, edx; add rdi, rdx; lea r11, [rip+0x55b71]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013d54a: add rdi, rdx; lea r11, [rip+0x55b71]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013d54b: add edi, edx; lea r11, [rip+0x55b71]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013d54c: xlat [rbx]; lea r11, [rip+0x55b71]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013d54f: sbb eax, 0x55aac; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013d550: lodsb [rsi]; pop rdx; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x0013d551: pop rdx; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x0013d636: add rdi, rdx; add rsi, rdx; lea r11, [rip+0x559bd]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013d637: add edi, edx; add rsi, rdx; lea r11, [rip+0x559bd]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013d638: xlat [rbx]; add rsi, rdx; lea r11, [rip+0x559bd]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013d63e: sbb eax, 0x559bd; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013d63f: mov ebp, 0x49000559; movsxd edx, [rbx+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013d69e: sub rsi, 0x40; sub rdi, 0x40; lea r11, [rip+0x55953]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013d69f: sub esi, 0x40; sub rdi, 0x40; lea r11, [rip+0x55953]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013d6a0: out dx, al; sub rdi, 0x40; lea r11, [rip+0x55953]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013d6a8: sbb eax, 0x55953; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013d6a9: push rbx; pop rcx; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x0013d6aa: pop rcx; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x0013d75c: movdqa [rdi-0x40], xmm1; sub rdi, 0x40; lea r11, [rip+0x55894]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013d75d: movq [rdi-0x40], mm1; sub rdi, 0x40; lea r11, [rip+0x55894]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013d75f: ror byte ptr [r8-0x7d], 0xef; lea r11, [rip+0x55894]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013d760: ror byte ptr [rax-0x7d], 0xef; lea r11, [rip+0x55894]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013d761: sub rdi, 0x40; lea r11, [rip+0x55953]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013d762: sub edi, 0x40; lea r11, [rip+0x55953]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013d763: out dx, eax; lea r11, [rip+0x55953]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013d767: sbb eax, 0x55894; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013d768: xchg esp, eax; pop rax; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x0013d769: pop rax; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x0013d84d: movdqa [rdi-0x20], xmm1; sub rdi, 0x20; lea r11, [rip+0x557a3]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013d84e: movq [rdi-0x20], mm1; sub rdi, 0x20; lea r11, [rip+0x557a3]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013d852: sub rdi, 0x20; lea r11, [rip+0x557a3]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013d853: sub edi, 0x20; lea r11, [rip+0x557a3]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013d854: out dx, eax; and [rbp+rcx*4+0x1d], cl; mov [0x4993146349000557], eax; lea edx, [rbx+rdx]; jmp rdx;
0x0013d855: and [rbp+rcx*4+0x1d], cl; mov [0x4993146349000557], eax; lea edx, [rbx+rdx]; jmp rdx;
0x0013d858: sbb eax, 0x557a3; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013d859: mov [0x4993146349000557], eax; lea edx, [rbx+rdx]; jmp rdx;
0x0013d85a: push rdi; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x0013d904: sbb eax, 0x556f7; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013d905: not dword ptr [rsi+5]; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx;
0x0013d9a2: sbb eax, 0x55659; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013d9a3: pop rcx; push rsi; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x0013d9a4: push rsi; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x0013da54: sbb eax, 0x555a7; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013da55: cmpsd [rsi], [rdi]; push rbp; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x0013daef: add [rbp+rcx*4+0x1d], cl; or [rbp+5], edx; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx;
0x0013daf2: sbb eax, 0x55509; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013daf3: or [rbp+5], edx; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx;
0x0013daf4: push rbp; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x0013dba4: sbb eax, 0x55457; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013dba5: push rdi; push rsp; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x0013dba6: push rsp; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x0013dc3f: add [rbp+rcx*4+0x1d], cl; mov ecx, 0x49000553; movsxd edx, [rbx+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013dc42: sbb eax, 0x553b9; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013dc43: mov ecx, 0x49000553; movsxd edx, [rbx+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013dcf4: sbb eax, 0x55307; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013dcf6: push rbx; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x0013dd8f: add [rbp+rcx*4+0x1d], cl; imul edx, [rdx+5], 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x0013dd92: sbb eax, 0x55269; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013dd93: imul edx, [rdx+5], 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x0013dd94: push rdx; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x0013de44: sbb eax, 0x551b7; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013de45: mov bh, 0x51; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x0013dedf: add [rbp+rcx*4+0x1d], cl; sbb [rcx+5], edx; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx;
0x0013dee2: sbb eax, 0x55119; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013dee3: sbb [rcx+5], edx; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx;
0x0013dee4: push rcx; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x0013df94: sbb eax, 0x55067; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013df96: push rax; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x0013e02f: add [rbp+rcx*4+0x1d], cl; leave; add rax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x0013e032: sbb eax, 0x54fc9; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013e033: leave; add rax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x0013e0e4: sbb eax, 0x54f17; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013e182: sbb eax, 0x54e79; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013e22f: add rdi, rdx; movdqu [r8], xmm0; lea r11, [rip+0x54dc2]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013e230: add edi, edx; movdqu [r8], xmm0; lea r11, [rip+0x54dc2]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013e231: xlat [rbx]; movdqu [r8], xmm0; lea r11, [rip+0x54dc2]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013e236: add [rbp+rcx*4+0x1d], cl; ret 0x54d;
0x0013e239: sbb eax, 0x54dc2; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013e23a: ret 0x54d;
0x0013e2cf: add [rbp+rcx*4+0x1d], cl; sub [rbp+5], ecx; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx;
0x0013e2d2: sbb eax, 0x54d29; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013e2d3: sub [rbp+5], ecx; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx;
0x0013e384: sbb eax, 0x54c77; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013e422: sbb eax, 0x54bd9; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013e4d4: sbb eax, 0x54b27; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013e56f: add [rbp+rcx*4+0x1d], cl; mov [rdx+5], ecx; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx;
0x0013e572: sbb eax, 0x54a89; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013e573: mov [rdx+5], ecx; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx;
0x0013e624: sbb eax, 0x549d7; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013e625: xlat [rbx]; add rax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x0013e6bf: add [rbp+rcx*4+0x1d], cl; cmp [rcx+5], ecx; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx;
0x0013e6c2: sbb eax, 0x54939; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013e6c3: cmp [rcx+5], ecx; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx;
0x0013e774: sbb eax, 0x54887; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013e775: xchg [rax+5], ecx; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx;
0x0013e776: add rax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x0013e812: sbb eax, 0x547e9; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013e8c4: sbb eax, 0x54737; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013e95f: add [rbp+rcx*4+0x1d], cl; cdq; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x0013e962: sbb eax, 0x54699; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013e963: cdq; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x0013ea14: sbb eax, 0x545e7; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013ea15: out 0x45, eax; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x0013eaaf: add [rbp+rcx*4+0x1d], cl; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x0013eab2: sbb eax, 0x54549; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013eb5a: movdqu [r8], xmm0; add rsi, rdx; lea r11, [rip+0x556f7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013eb5b: movq [r8], mm0; add rsi, rdx; lea r11, [rip+0x556f7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013eb5c: movq [rax], mm0; add rsi, rdx; lea r11, [rip+0x556f7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013eb5f: add rsi, rdx; lea r11, [rip+0x559bd]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013eb60: add esi, edx; lea r11, [rip+0x559bd]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013eb64: sbb eax, 0x54497; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013eb65: xchg edi, eax; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x0013ebf7: lea rdx, [rdx+0x40]; movdqu [r8], xmm0; lea r11, [rip+0x55659]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013ebf8: lea edx, [rdx+0x40]; movdqu [r8], xmm0; lea r11, [rip+0x55659]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013ebf9: push rdx; movdqu [r8], xmm0; lea r11, [rip+0x55659]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013ebfb: movdqu [r8], xmm0; lea r11, [rip+0x55659]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013ebfc: movq [r8], mm0; lea r11, [rip+0x55659]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013ebfd: movq [rax], mm0; lea r11, [rip+0x55659]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013ebff: add [rbp+rcx*4+0x1d], cl; stc; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x0013ec02: sbb eax, 0x543f9; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013ec03: stc; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x0013fc03: add rdi, rdx; sfence; lea r11, [rip+0x533f0]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013fc04: add edi, edx; sfence; lea r11, [rip+0x533f0]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013fc05: xlat [rbx]; sfence; lea r11, [rip+0x533f0]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013fc0b: sbb eax, 0x533f0; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013fc0d: xor eax, [rip+0x14634900]; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x0013fcdb: ror byte ptr [rax-0x7d], 0xea; sfence; lea r11, [rip+0x53316]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013fcdc: sub rdx, 0x40; sfence; lea r11, [rip+0x53316]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013fcdd: sub edx, 0x40; sfence; lea r11, [rip+0x53316]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013fce0: sfence; lea r11, [rip+0x533f0]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013fce1: scasb [rdi]; clc; lea r11, [rip+0x533f0]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013fce2: clc; lea r11, [rip+0x533f0]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013fce3: lea r11, [rip+0x55b71]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013fce4: lea ebx, [rip+0x55b71]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013fce5: sbb eax, 0x53316; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013fce7: xor eax, [rip+0x14634900]; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x0013fd2f: add eax, 0x4d1d7700; movsxd ecx, [rbx+rdx*4]; add rsi, rdx; add rdi, rdx; add r9, r11; jmp r9;
0x0013fd30: add [rdi+0x1d], dh; movsxd r9, [r11+rdx*4]; add rsi, rdx; add rdi, rdx; add r9, r11; jmp r9;
0x0013fd32: sbb eax, 0x930c634d; add rsi, rdx; add rdi, rdx; add r9, r11; jmp r9;
0x0013fd33: movsxd r9, [r11+rdx*4]; add rsi, rdx; add rdi, rdx; add r9, r11; jmp r9;
0x0013fd34: movsxd ecx, [rbx+rdx*4]; add rsi, rdx; add rdi, rdx; add r9, r11; jmp r9;
0x0013fd35: or al, 0x93; add rsi, rdx; add rdi, rdx; add r9, r11; jmp r9;
0x0013fd36: xchg ebx, eax; add rsi, rdx; add rdi, rdx; add r9, r11; jmp r9;
0x0013fd37: add rsi, rdx; add rdi, rdx; add r9, r11; jmp r9;
0x0013fd38: add esi, edx; add rdi, rdx; add r9, r11; jmp r9;
0x0013fd3a: add rdi, rdx; add r9, r11; jmp r9;
0x0013fd3b: add edi, edx; add r9, r11; jmp r9;
0x0013fd3c: xlat [rbx]; add r9, r11; jmp r9;
0x0013fd81: pcmpeqb mm7, [rax+rcx*2-0x75]; or eax, 0x7e5a5; lea r11, [rip+0x5356e]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9;
0x0013fd84: mov rcx, [rip+0x7e5a5]; lea r11, [rip+0x5356e]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9;
0x0013fd85: mov ecx, [rip+0x7e5a5]; lea r11, [rip+0x5356e]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9;
0x0013fd86: or eax, 0x7e5a5; lea r11, [rip+0x5356e]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9;
0x0013fd8a: add [rbp+rcx*4+0x1d], cl; outsb dx, [rsi]; xor eax, 0x634f0005; or al, 0x8b; lea r9, [r11+r9]; jmp r9;
0x0013fd8b: lea r11, [rip+0x5356e]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9;
0x0013fd8c: lea ebx, [rip+0x5356e]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9;
0x0013fd8d: sbb eax, 0x5356e; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9;
0x0013fd8e: outsb dx, [rsi]; xor eax, 0x634f0005; or al, 0x8b; lea r9, [r11+r9]; jmp r9;
0x0013fdb7: cmovs esi, [rcx]; iretd;
0x0013fddc: add [rax], al; mov rcx, [rip+0x7e54b]; lea r11, [rip+0x53554]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9;
0x0013fddd: add [rax-0x75], cl; or eax, 0x7e54b; lea r11, [rip+0x53554]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9;
0x0013fdde: mov rcx, [rip+0x7e54b]; lea r11, [rip+0x53554]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9;
0x0013fddf: mov ecx, [rip+0x7e54b]; lea r11, [rip+0x53554]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9;
0x0013fde0: or eax, 0x7e54b; lea r11, [rip+0x53554]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9;
0x0013fde4: add [rbp+rcx*4+0x1d], cl; push rsp; xor eax, 0x634f0005; or al, 0x8b; lea r9, [r11+r9]; jmp r9;
0x0013fde5: lea r11, [rip+0x53554]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9;
0x0013fde6: lea ebx, [rip+0x53554]; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9;
0x0013fde7: sbb eax, 0x53554; movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9;
0x0013fde8: push rsp; xor eax, 0x634f0005; or al, 0x8b; lea r9, [r11+r9]; jmp r9;
0x0013fde9: xor eax, 0x634f0005; or al, 0x8b; lea r9, [r11+r9]; jmp r9;
0x0013fdea: add eax, 0xc634f00; mov ecx, [rdi-0x73]; or al, 0xb; jmp r9;
0x0013fdeb: add [rdi+0x63], cl; or al, 0x8b; lea r9, [r11+r9]; jmp r9;
0x0013fdec: movsxd r9, [r11+r9*4]; lea r9, [r11+r9]; jmp r9;
0x0013fded: movsxd ecx, [rbx+rcx*4]; lea r9, [r11+r9]; jmp r9;
0x0013fdee: or al, 0x8b; lea r9, [r11+r9]; jmp r9;
0x0013fdef: mov ecx, [rdi-0x73]; or al, 0xb; jmp r9;
0x0013fdf0: lea r9, [r11+r9]; jmp r9;
0x0013fdf1: lea ecx, [rbx+rcx]; jmp r9;
0x0013fdf2: or al, 0xb; jmp r9;
0x0013fe5a: sbb eax, 0x53361; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013fe5c: xor eax, [rip+0x14634900]; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x0013ff15: mov dword ptr [rax+0x48], 0x148d601; xlat [rbx]; lea r11, [rip+0x53361]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013ff1f: sbb eax, 0x5329c; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0013ff20: pushfq; xor al, [rip+0x14634900]; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x0013ff21: xor al, [rip+0x14634900]; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x00140006: add rdi, rdx; add rsi, rdx; lea r11, [rip+0x531ad]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00140007: add edi, edx; add rsi, rdx; lea r11, [rip+0x531ad]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00140008: xlat [rbx]; add rsi, rdx; lea r11, [rip+0x531ad]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0014000e: sbb eax, 0x531ad; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0014000f: lodsd [rsi]; xor [rip+0x14634900], eax; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x00140010: xor [rip+0x14634900], eax; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x0014006e: sub rsi, 0x40; sub rdi, 0x40; lea r11, [rip+0x53143]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0014006f: sub esi, 0x40; sub rdi, 0x40; lea r11, [rip+0x53143]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00140070: out dx, al; sub rdi, 0x40; lea r11, [rip+0x53143]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00140078: sbb eax, 0x53143; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0014007a: xor [rip+0x14634900], eax; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x0014012c: movdqa [rdi-0x40], xmm1; sub rdi, 0x40; lea r11, [rip+0x53084]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0014012d: movq [rdi-0x40], mm1; sub rdi, 0x40; lea r11, [rip+0x53084]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0014012f: ror byte ptr [r8-0x7d], 0xef; lea r11, [rip+0x53084]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00140130: ror byte ptr [rax-0x7d], 0xef; lea r11, [rip+0x53084]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00140131: sub rdi, 0x40; lea r11, [rip+0x53143]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00140132: sub edi, 0x40; lea r11, [rip+0x53143]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00140133: out dx, eax; lea r11, [rip+0x53143]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00140137: sbb eax, 0x53084; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00140138: test [rax], dh; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x00140139: xor [rip+0x14634900], al; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x0014015a: cmp ch, 0xff; jmp qword ptr [rsi+0xf];
0x0014021d: movdqa [rdi-0x20], xmm1; sub rdi, 0x20; lea r11, [rip+0x52f93]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0014021e: movq [rdi-0x20], mm1; sub rdi, 0x20; lea r11, [rip+0x52f93]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00140222: sub rdi, 0x20; lea r11, [rip+0x52f93]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00140223: sub edi, 0x20; lea r11, [rip+0x52f93]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00140228: sbb eax, 0x52f93; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001402d4: sbb eax, 0x52ee7; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001402d5: out 0x2e, eax; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x001402fd: push qword ptr [rdx+7]; lea r9, [r9-7]; lea rdx, [rdx-0x40]; jmp r9;
0x0014036f: add [rbp+rcx*4+0x1d], cl; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x00140372: sbb eax, 0x52e49; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00140374: add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x00140424: sbb eax, 0x52d97; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00140425: xchg edi, eax; sub eax, 0x63490005; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx;
0x00140426: sub eax, 0x63490005; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx;
0x001404c2: sbb eax, 0x52cf9; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001404c3: stc; sub al, 5; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx;
0x00140574: sbb eax, 0x52c47; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00140576: sub al, 5; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx;
0x0014060f: add [rbp+rcx*4+0x1d], cl; test eax, 0x4900052b; movsxd edx, [rbx+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00140612: sbb eax, 0x52ba9; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00140613: test eax, 0x4900052b; movsxd edx, [rbx+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00140614: sub eax, [rip+0x14634900]; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x001406c4: sbb eax, 0x52af7; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001406c5: imul dword ptr [rdx]; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x001406c6: sub al, [rip+0x14634900]; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x0014075f: add [rbp+rcx*4+0x1d], cl; pop rcx; sub al, [rip+0x14634900]; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x00140762: sbb eax, 0x52a59; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00140763: pop rcx; sub al, [rip+0x14634900]; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x00140764: sub al, [rip+0x14634900]; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x00140814: sbb eax, 0x529a7; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00140815: cmpsd [rsi], [rdi]; sub [rip+0x14634900], eax; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x00140816: sub [rip+0x14634900], eax; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x001408af: add [rbp+rcx*4+0x1d], cl; or [rcx], ebp; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x001408b2: sbb eax, 0x52909; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001408b3: or [rcx], ebp; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x001408b4: sub [rip+0x14634900], eax; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x00140964: sbb eax, 0x52857; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00140965: push rdi; sub [rip+0x14634900], al; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x00140966: sub [rip+0x14634900], al; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x001409ff: add [rbp+rcx*4+0x1d], cl; mov ecx, 0x49000527; movsxd edx, [rbx+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00140a02: sbb eax, 0x527b9; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00140a03: mov ecx, 0x49000527; movsxd edx, [rbx+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00140ab4: sbb eax, 0x52707; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00140b4f: add [rbp+rcx*4+0x1d], cl; imul esp, [rsi], 0x63490005; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx;
0x00140b52: sbb eax, 0x52669; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00140b53: imul esp, [rsi], 0x63490005; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx;
0x00140b54: add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x00140bd5: ror byte ptr [rdi], 0x29; pop rdi; shl byte ptr [rdx+0x14], 1; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9;
0x00140bd8: pop rdi; shl byte ptr [rdx+0x14], 1; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9;
0x00140bd9: shl byte ptr [rdx+0x14], 1; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9;
0x00140bdb: adc al, 0xf; sub [rdi-0x20], esp; movaps [rdi-0x10], xmm5; jmp r9;
0x00140bff: add rdi, rdx; movdqu [r8], xmm0; lea r11, [rip+0x525b2]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00140c00: add edi, edx; movdqu [r8], xmm0; lea r11, [rip+0x525b2]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00140c01: xlat [rbx]; movdqu [r8], xmm0; lea r11, [rip+0x525b2]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00140c06: add [rbp+rcx*4+0x1d], cl; mov dl, 0x25; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x00140c09: sbb eax, 0x525b2; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00140c0a: mov dl, 0x25; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x00140c9f: add [rbp+rcx*4+0x1d], cl; sbb [rip+0x63490005], esp; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx;
0x00140ca2: sbb eax, 0x52519; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00140ca3: sbb [rip+0x63490005], esp; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx;
0x00140ca4: and eax, 0x63490005; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx;
0x00140d54: sbb eax, 0x52467; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00140d56: and al, 5; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx;
0x00140d7c: div qword ptr [rdx+7]; lea r9, [r9-7]; lea rdx, [rdx-0x40]; jmp r9;
0x00140d7d: div dword ptr [rdx+7]; lea r9, [r9-7]; lea rdx, [rdx-0x40]; jmp r9;
0x00140def: add [rbp+rcx*4+0x1d], cl; leave; and eax, [rip+0x14634900]; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x00140df2: sbb eax, 0x523c9; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00140df3: leave; and eax, [rip+0x14634900]; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x00140df4: and eax, [rip+0x14634900]; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x00140ea4: sbb eax, 0x52317; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00140ea6: and eax, [rip+0x14634900]; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x00140ecd: div byte ptr [rdx+7]; lea r9, [r9-7]; lea rdx, [rdx-0x40]; jmp r9;
0x00140f42: sbb eax, 0x52279; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00140f44: and al, [rip+0x14634900]; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x00140ff4: sbb eax, 0x521c7; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00140ff6: and [rip+0x14634900], eax; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x0014108f: add [rbp+rcx*4+0x1d], cl; sub [rcx], esp; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x00141092: sbb eax, 0x52129; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00141093: sub [rcx], esp; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x00141094: and [rip+0x14634900], eax; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x00141144: sbb eax, 0x52077; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00141146: and [rip+0x14634900], al; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x001411df: add [rbp+rcx*4+0x1d], cl; fstp dword ptr [rdi], st; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x001411e2: sbb eax, 0x51fd9; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001411e3: fstp dword ptr [rdi], st; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x00141294: sbb eax, 0x51f27; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0014132f: add [rbp+rcx*4+0x1d], cl; mov [rsi], ebx; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x00141332: sbb eax, 0x51e89; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00141333: mov [rsi], ebx; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x001413e4: sbb eax, 0x51dd7; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001413e5: xlat [rbx]; sbb eax, 0x63490005; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx;
0x00141435: data16 ret 0x280f;
0x0014147f: add [rbp+rcx*4+0x1d], cl; cmp [rip+0x63490005], ebx; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx;
0x00141482: sbb eax, 0x51d39; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00141483: cmp [rip+0x63490005], ebx; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx;
0x00141484: sbb eax, 0x63490005; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx;
0x00141507: ror byte ptr [rdi], 0x29; pop rdi; shl byte ptr [rdx+0xd], 1; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9;
0x0014150a: pop rdi; shl byte ptr [rdx+0xd], 1; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9;
0x0014150b: shl byte ptr [rdx+0xd], 1; movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9;
0x0014150d: or eax, 0xe067290f; movaps [rdi-0x10], xmm5; jmp r9;
0x0014150e: movaps [rdi-0x20], xmm4; movaps [rdi-0x10], xmm5; jmp r9;
0x0014150f: sub [rdi-0x20], esp; movaps [rdi-0x10], xmm5; jmp r9;
0x00141512: movaps [rdi-0x10], xmm5; jmp r9;
0x00141513: sub [rdi-0x10], ebp; jmp r9;
0x0014152a: movdqu [r8], xmm0; add rsi, rdx; lea r11, [rip+0x52ee7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0014152b: movq [r8], mm0; add rsi, rdx; lea r11, [rip+0x52ee7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0014152c: movq [rax], mm0; add rsi, rdx; lea r11, [rip+0x52ee7]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0014152f: add rsi, rdx; lea r11, [rip+0x531ad]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00141530: add esi, edx; lea r11, [rip+0x531ad]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00141534: sbb eax, 0x51c87; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00141535: xchg [rax*1+0x14634900], ebx; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x00141536: sbb al, 5; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx;
0x00141560: lea r9, [r9-7]; lea rdx, [rdx-0x40]; jmp r9;
0x00141561: lea ecx, [rcx-7]; lea rdx, [rdx-0x40]; jmp r9;
0x00141567: lea rdx, [rdx-0x40]; jmp r9;
0x00141568: lea edx, [rdx-0x40]; jmp r9;
0x001415b5: ror byte ptr [rdi], 0x29; pop rdi; adc [rdx+8], dh; movaps [rdi], xmm4; jmp r9;
0x001415b8: pop rdi; adc [rdx+8], dh; movaps [rdi], xmm4; jmp r9;
0x001415b9: adc [rdx+8], dh; movaps [rdi], xmm4; jmp r9;
0x001415bb: or [rdi], cl; sub [rdi], esp; jmp r9;
0x001415bc: movaps [rdi], xmm4; jmp r9;
0x001415bd: sub [rdi], esp; jmp r9;
0x001415c7: lea rdx, [rdx+0x40]; movdqu [r8], xmm0; lea r11, [rip+0x52e49]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001415c8: lea edx, [rdx+0x40]; movdqu [r8], xmm0; lea r11, [rip+0x52e49]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001415c9: push rdx; movdqu [r8], xmm0; lea r11, [rip+0x52e49]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001415cb: movdqu [r8], xmm0; lea r11, [rip+0x52e49]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001415cc: movq [r8], mm0; lea r11, [rip+0x52e49]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001415cd: movq [rax], mm0; lea r11, [rip+0x52e49]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001415d2: sbb eax, 0x51be9; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001415d4: sbb eax, [rip+0x14634900]; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x0014168e: mov [rdi-0x28], r8; mov [rdi-0x20], r9; mov [rdi-0x18], r10; mov [rdi-0x10], r11; mov [rdi-8], rcx; ret;
0x0014168f: mov [rdi-0x28], eax; mov [rdi-0x20], r9; mov [rdi-0x18], r10; mov [rdi-0x10], r11; mov [rdi-8], rcx; ret;
0x00141692: mov [rdi-0x20], r9; mov [rdi-0x18], r10; mov [rdi-0x10], r11; mov [rdi-8], rcx; ret;
0x00141693: mov [rdi-0x20], ecx; mov [rdi-0x18], r10; mov [rdi-0x10], r11; mov [rdi-8], rcx; ret;
0x00141696: mov [rdi-0x18], r10; mov [rdi-0x10], r11; mov [rdi-8], rcx; ret;
0x00141697: mov [rdi-0x18], edx; mov [rdi-0x10], r11; mov [rdi-8], rcx; ret;
0x0014169a: mov [rdi-0x10], r11; mov [rdi-8], rcx; ret;
0x0014169b: mov [rdi-0x10], ebx; mov [rdi-8], rcx; ret;
0x00141704: mov [rdi-0x28], r8; mov [rdi-0x20], r9; mov [rdi-0x18], r10; mov [rdi-0x10], r11; mov [rdi-8], rdx; ret;
0x00141705: mov [rdi-0x28], eax; mov [rdi-0x20], r9; mov [rdi-0x18], r10; mov [rdi-0x10], r11; mov [rdi-8], rdx; ret;
0x0014172c: mov rdx, [rsi-8]; mov [rdi-0x20], r9; mov [rdi-0x18], r10; mov [rdi-0x10], r11; mov [rdi-8], rdx; ret;
0x0014172d: mov edx, [rsi-8]; mov [rdi-0x20], r9; mov [rdi-0x18], r10; mov [rdi-0x10], r11; mov [rdi-8], rdx; ret;
0x0014172f: clc; mov [rdi-0x20], r9; mov [rdi-0x18], r10; mov [rdi-0x10], r11; mov [rdi-8], rdx; ret;
0x00141730: mov [rdi-0x20], r9; mov [rdi-0x18], r10; mov [rdi-0x10], r11; mov [rdi-8], rdx; ret;
0x00141731: mov [rdi-0x20], ecx; mov [rdi-0x18], r10; mov [rdi-0x10], r11; mov [rdi-8], rdx; ret;
0x00141754: mov r11, [rsi-0x10]; mov rdx, [rsi-8]; mov [rdi-0x18], r10; mov [rdi-0x10], r11; mov [rdi-8], rdx; ret;
0x00141755: mov ebx, [rsi-0x10]; mov rdx, [rsi-8]; mov [rdi-0x18], r10; mov [rdi-0x10], r11; mov [rdi-8], rdx; ret;
0x00141758: mov rdx, [rsi-8]; mov [rdi-0x18], r10; mov [rdi-0x10], r11; mov [rdi-8], rdx; ret;
0x00141759: mov edx, [rsi-8]; mov [rdi-0x18], r10; mov [rdi-0x10], r11; mov [rdi-8], rdx; ret;
0x0014175a: push rsi; clc; mov [rdi-0x18], r10; mov [rdi-0x10], r11; mov [rdi-8], rdx; ret;
0x0014175b: clc; mov [rdi-0x18], r10; mov [rdi-0x10], r11; mov [rdi-8], rdx; ret;
0x0014175c: mov [rdi-0x18], r10; mov [rdi-0x10], r11; mov [rdi-8], rdx; ret;
0x0014175d: mov [rdi-0x18], edx; mov [rdi-0x10], r11; mov [rdi-8], rdx; ret;
0x00141769: nop [rax]; mov r11, [rsi-0x10]; mov rdx, [rsi-8]; mov [rdi-0x10], r11; mov [rdi-8], rdx; ret;
0x0014176e: add [rax], al; mov r11, [rsi-0x10]; mov rdx, [rsi-8]; mov [rdi-0x10], r11; mov [rdi-8], rdx; ret;
0x00141770: mov r11, [rsi-0x10]; mov rdx, [rsi-8]; mov [rdi-0x10], r11; mov [rdi-8], rdx; ret;
0x00141771: mov ebx, [rsi-0x10]; mov rdx, [rsi-8]; mov [rdi-0x10], r11; mov [rdi-8], rdx; ret;
0x00141774: mov rdx, [rsi-8]; mov [rdi-0x10], r11; mov [rdi-8], rdx; ret;
0x00141775: mov edx, [rsi-8]; mov [rdi-0x10], r11; mov [rdi-8], rdx; ret;
0x00141776: push rsi; clc; mov [rdi-0x10], r11; mov [rdi-8], rdx; ret;
0x00141777: clc; mov [rdi-0x10], r11; mov [rdi-8], rdx; ret;
0x00141778: mov [rdi-0x10], r11; mov [rdi-8], rdx; ret;
0x00141779: mov [rdi-0x10], ebx; mov [rdi-8], rdx; ret;
0x001417cf: mov [rdi-0x21], r9; mov [rdi-0x19], r10; mov [rdi-0x11], r11; mov [rdi-9], r8; mov [rdi-4], edx; ret;
0x001417d0: mov [rdi-0x21], ecx; mov [rdi-0x19], r10; mov [rdi-0x11], r11; mov [rdi-9], r8; mov [rdi-4], edx; ret;
0x001417d1: fisttp word ptr [r9+r9*4+0x57], st; out 0x4c, eax; mov [rdi-0x11], ebx; mov [rdi-9], r8; mov [rdi-4], edx; ret;
0x001417d2: fisttp word ptr [rcx+rcx*4+0x57], st; out 0x4c, eax; mov [rdi-0x11], ebx; mov [rdi-9], r8; mov [rdi-4], edx; ret;
0x001417d3: mov [rdi-0x19], r10; mov [rdi-0x11], r11; mov [rdi-9], r8; mov [rdi-4], edx; ret;
0x001417d4: mov [rdi-0x19], edx; mov [rdi-0x11], r11; mov [rdi-9], r8; mov [rdi-4], edx; ret;
0x001417d5: push rdi; out 0x4c, eax; mov [rdi-0x11], ebx; mov [rdi-9], r8; mov [rdi-4], edx; ret;
0x001417d6: out 0x4c, eax; mov [rdi-0x11], ebx; mov [rdi-9], r8; mov [rdi-4], edx; ret;
0x001417d7: mov [rdi-0x11], r11; mov [rdi-9], r8; mov [rdi-4], edx; ret;
0x001417d8: mov [rdi-0x11], ebx; mov [rdi-9], r8; mov [rdi-4], edx; ret;
0x001417d9: pop rdi; out dx, eax; mov [rdi-9], r8; mov [rdi-4], edx; ret;
0x001417da: out dx, eax; mov [rdi-9], r8; mov [rdi-4], edx; ret;
0x001417db: mov [rdi-9], r8; mov [rdi-4], edx; ret;
0x001417dc: mov [rdi-9], eax; mov [rdi-4], edx; ret;
0x001417f2: outsd dx, [rsi]; mov edi, 0x4e6f0ff3; iretd;
0x001417f4: mov edi, 0x4e6f0ff3; iretd;
0x00141810: mov r15d, 0x4f7f0ff3; iretd;
0x00141811: mov edi, 0x4f7f0ff3; iretd;
0x00141872: outsd dx, [rsi]; iretd;
0x0014188d: mov [rdi-0x21], r9; mov [rdi-0x19], r10; mov [rdi-0x11], r11; mov [rdi-9], rcx; mov [rdi-4], edx; ret;
0x0014188e: mov [rdi-0x21], ecx; mov [rdi-0x19], r10; mov [rdi-0x11], r11; mov [rdi-9], rcx; mov [rdi-4], edx; ret;
0x0014188f: fisttp word ptr [r9+r9*4+0x57], st; out 0x4c, eax; mov [rdi-0x11], ebx; mov [rdi-9], rcx; mov [rdi-4], edx; ret;
0x00141890: fisttp word ptr [rcx+rcx*4+0x57], st; out 0x4c, eax; mov [rdi-0x11], ebx; mov [rdi-9], rcx; mov [rdi-4], edx; ret;
0x00141891: mov [rdi-0x19], r10; mov [rdi-0x11], r11; mov [rdi-9], rcx; mov [rdi-4], edx; ret;
0x00141892: mov [rdi-0x19], edx; mov [rdi-0x11], r11; mov [rdi-9], rcx; mov [rdi-4], edx; ret;
0x00141893: push rdi; out 0x4c, eax; mov [rdi-0x11], ebx; mov [rdi-9], rcx; mov [rdi-4], edx; ret;
0x00141894: out 0x4c, eax; mov [rdi-0x11], ebx; mov [rdi-9], rcx; mov [rdi-4], edx; ret;
0x001418f3: mov [rdi-0x21], r9; mov [rdi-0x19], r10; mov [rdi-0x11], r11; mov [rdi-9], rcx; mov [rdi-1], dl; ret;
0x001418f4: mov [rdi-0x21], ecx; mov [rdi-0x19], r10; mov [rdi-0x11], r11; mov [rdi-9], rcx; mov [rdi-1], dl; ret;
0x001418f5: fisttp word ptr [r9+r9*4+0x57], st; out 0x4c, eax; mov [rdi-0x11], ebx; mov [rdi-9], rcx; mov [rdi-1], dl; ret;
0x001418f6: fisttp word ptr [rcx+rcx*4+0x57], st; out 0x4c, eax; mov [rdi-0x11], ebx; mov [rdi-9], rcx; mov [rdi-1], dl; ret;
0x0014191a: test qword ptr [rdx-0x76b300aa], 0xffffffff894ce757; pop rdi; out dx, eax; mov [rdi-9], rcx; mov [rdi-1], dl; ret;
0x0014191b: test dword ptr [rdx-0x76b300aa], 0x894ce757; pop rdi; out dx, eax; mov [rdi-9], rcx; mov [rdi-1], dl; ret;
0x0014191c: mov dl, [rsi-1]; mov [rdi-0x19], r10; mov [rdi-0x11], r11; mov [rdi-9], rcx; mov [rdi-1], dl; ret;
0x0014191e: dec dword ptr [rcx+rcx*4+0x57]; out 0x4c, eax; mov [rdi-0x11], ebx; mov [rdi-9], rcx; mov [rdi-1], dl; ret;
0x0014191f: mov [rdi-0x19], r10; mov [rdi-0x11], r11; mov [rdi-9], rcx; mov [rdi-1], dl; ret;
0x00141920: mov [rdi-0x19], edx; mov [rdi-0x11], r11; mov [rdi-9], rcx; mov [rdi-1], dl; ret;
0x00141921: push rdi; out 0x4c, eax; mov [rdi-0x11], ebx; mov [rdi-9], rcx; mov [rdi-1], dl; ret;
0x00141922: out 0x4c, eax; mov [rdi-0x11], ebx; mov [rdi-9], rcx; mov [rdi-1], dl; ret;
0x00141923: mov [rdi-0x11], r11; mov [rdi-9], rcx; mov [rdi-1], dl; ret;
0x00141924: mov [rdi-0x11], ebx; mov [rdi-9], rcx; mov [rdi-1], dl; ret;
0x00141925: pop rdi; out dx, eax; mov [rdi-9], rcx; mov [rdi-1], dl; ret;
0x00141926: out dx, eax; mov [rdi-9], rcx; mov [rdi-1], dl; ret;
0x00141927: mov [rdi-9], rcx; mov [rdi-1], dl; ret;
0x00141928: mov [rdi-9], ecx; mov [rdi-1], dl; ret;
0x00141934: mov rcx, [rsi-9]; mov edx, [rsi-4]; mov [rdi-0x11], r11; mov [rdi-9], rcx; mov [rdi-4], edx; ret;
0x00141935: mov ecx, [rsi-9]; mov edx, [rsi-4]; mov [rdi-0x11], r11; mov [rdi-9], rcx; mov [rdi-4], edx; ret;
0x00141938: mov edx, [rsi-4]; mov [rdi-0x11], r11; mov [rdi-9], rcx; mov [rdi-4], edx; ret;
0x00141939: push rsi; cld; mov [rdi-0x11], r11; mov [rdi-9], rcx; mov [rdi-4], edx; ret;
0x0014193a: cld; mov [rdi-0x11], r11; mov [rdi-9], rcx; mov [rdi-4], edx; ret;
0x0014193b: mov [rdi-0x11], r11; mov [rdi-9], rcx; mov [rdi-4], edx; ret;
0x0014193c: mov [rdi-0x11], ebx; mov [rdi-9], rcx; mov [rdi-4], edx; ret;
0x0014193d: pop rdi; out dx, eax; mov [rdi-9], rcx; mov [rdi-4], edx; ret;
0x0014193e: out dx, eax; mov [rdi-9], rcx; mov [rdi-4], edx; ret;
0x00141947: nop [rax+rax]; mov rcx, [rsi-9]; mov edx, [rsi-4]; mov [rdi-9], rcx; mov [rdi-4], edx; ret;
0x00141948: nop [rax+rax]; mov rcx, [rsi-9]; mov edx, [rsi-4]; mov [rdi-9], rcx; mov [rdi-4], edx; ret;
0x0014194b: add [rax], al; add [rax], al; add [rax-0x75], cl; test qword ptr [rbx-0x76b703aa], 0x5789f74f; cld; ret;
0x0014194d: add [rax], al; add [rax-0x75], cl; test qword ptr [rbx-0x76b703aa], 0x5789f74f; cld; ret;
0x0014194e: add [rax], al; mov rcx, [rsi-9]; mov edx, [rsi-4]; mov [rdi-9], rcx; mov [rdi-4], edx; ret;
0x0014194f: add [rax-0x75], cl; test qword ptr [rbx-0x76b703aa], 0x5789f74f; cld; ret;
0x00141950: mov rcx, [rsi-9]; mov edx, [rsi-4]; mov [rdi-9], rcx; mov [rdi-4], edx; ret;
0x00141951: mov ecx, [rsi-9]; mov edx, [rsi-4]; mov [rdi-9], rcx; mov [rdi-4], edx; ret;
0x00141952: test qword ptr [rbx-0x76b703aa], 0x5789f74f; cld; ret;
0x00141953: test dword ptr [rbx-0x76b703aa], 0x5789f74f; cld; ret;
0x00141954: mov edx, [rsi-4]; mov [rdi-9], rcx; mov [rdi-4], edx; ret;
0x00141955: push rsi; cld; mov [rdi-9], rcx; mov [rdi-4], edx; ret;
0x00141956: cld; mov [rdi-9], rcx; mov [rdi-4], edx; ret;
0x00141957: mov [rdi-9], rcx; mov [rdi-4], edx; ret;
0x00141958: mov [rdi-9], ecx; mov [rdi-4], edx; ret;
0x0014195f: nop; mov dl, [rsi-1]; mov [rdi-1], dl; ret;
0x00141960: mov dl, [rsi-1]; mov [rdi-1], dl; ret;
0x00141ad3: mov [rdi-0x22], r9; mov [rdi-0x1a], r10; mov [rdi-0x12], r11; mov [rdi-0xa], rcx; mov [rdi-4], edx; ret;
0x00141ad4: mov [rdi-0x22], ecx; mov [rdi-0x1a], r10; mov [rdi-0x12], r11; mov [rdi-0xa], rcx; mov [rdi-4], edx; ret;
0x00141ad5: fimul st, word ptr [r9+r9*4+0x57]; out 0x4c, al; mov [rdi-0x12], ebx; mov [rdi-0xa], rcx; mov [rdi-4], edx; ret;
0x00141ad6: fimul st, word ptr [rcx+rcx*4+0x57]; out 0x4c, al; mov [rdi-0x12], ebx; mov [rdi-0xa], rcx; mov [rdi-4], edx; ret;
0x00141afb: test byte ptr [rbx-0x76b303aa], 0x57; out 0x4c, al; mov [rdi-0x12], ebx; mov [rdi-0xa], rcx; mov [rdi-4], edx; ret;
0x00141afc: mov edx, [rsi-4]; mov [rdi-0x1a], r10; mov [rdi-0x12], r11; mov [rdi-0xa], rcx; mov [rdi-4], edx; ret;
0x00141afe: cld; mov [rdi-0x1a], r10; mov [rdi-0x12], r11; mov [rdi-0xa], rcx; mov [rdi-4], edx; ret;
0x00141aff: mov [rdi-0x1a], r10; mov [rdi-0x12], r11; mov [rdi-0xa], rcx; mov [rdi-4], edx; ret;
0x00141b00: mov [rdi-0x1a], edx; mov [rdi-0x12], r11; mov [rdi-0xa], rcx; mov [rdi-4], edx; ret;
0x00141b01: push rdi; out 0x4c, al; mov [rdi-0x12], ebx; mov [rdi-0xa], rcx; mov [rdi-4], edx; ret;
0x00141b02: out 0x4c, al; mov [rdi-0x12], ebx; mov [rdi-0xa], rcx; mov [rdi-4], edx; ret;
0x00141b14: mov rcx, [rsi-0xa]; mov edx, [rsi-4]; mov [rdi-0x12], r11; mov [rdi-0xa], rcx; mov [rdi-4], edx; ret;
0x00141b15: mov ecx, [rsi-0xa]; mov edx, [rsi-4]; mov [rdi-0x12], r11; mov [rdi-0xa], rcx; mov [rdi-4], edx; ret;
0x00141b17: test byte ptr [rbx-0x76b303aa], 0x5f; out dx, al; mov [rdi-0xa], rcx; mov [rdi-4], edx; ret;
0x00141b18: mov edx, [rsi-4]; mov [rdi-0x12], r11; mov [rdi-0xa], rcx; mov [rdi-4], edx; ret;
0x00141b19: push rsi; cld; mov [rdi-0x12], r11; mov [rdi-0xa], rcx; mov [rdi-4], edx; ret;
0x00141b1a: cld; mov [rdi-0x12], r11; mov [rdi-0xa], rcx; mov [rdi-4], edx; ret;
0x00141b1b: mov [rdi-0x12], r11; mov [rdi-0xa], rcx; mov [rdi-4], edx; ret;
0x00141b1c: mov [rdi-0x12], ebx; mov [rdi-0xa], rcx; mov [rdi-4], edx; ret;
0x00141b1d: pop rdi; out dx, al; mov [rdi-0xa], rcx; mov [rdi-4], edx; ret;
0x00141b1e: out dx, al; mov [rdi-0xa], rcx; mov [rdi-4], edx; ret;
0x00141b27: nop [rax+rax]; mov rcx, [rsi-0xa]; mov edx, [rsi-4]; mov [rdi-0xa], rcx; mov [rdi-4], edx; ret;
0x00141b28: nop [rax+rax]; mov rcx, [rsi-0xa]; mov edx, [rsi-4]; mov [rdi-0xa], rcx; mov [rdi-4], edx; ret;
0x00141b2e: add [rax], al; mov rcx, [rsi-0xa]; mov edx, [rsi-4]; mov [rdi-0xa], rcx; mov [rdi-4], edx; ret;
0x00141b2f: add [rax-0x75], cl; test byte ptr [rbx-0x76b703aa], 0x4f; test byte ptr [rcx-0x6f3c03a9], 0x66; mov edx, [rsi-2]; mov [rdi-2], dx; ret;
0x00141b30: mov rcx, [rsi-0xa]; mov edx, [rsi-4]; mov [rdi-0xa], rcx; mov [rdi-4], edx; ret;
0x00141b31: mov ecx, [rsi-0xa]; mov edx, [rsi-4]; mov [rdi-0xa], rcx; mov [rdi-4], edx; ret;
0x00141b33: test byte ptr [rbx-0x76b703aa], 0x4f; test byte ptr [rcx-0x6f3c03a9], 0x66; mov edx, [rsi-2]; mov [rdi-2], dx; ret;
0x00141b34: mov edx, [rsi-4]; mov [rdi-0xa], rcx; mov [rdi-4], edx; ret;
0x00141b35: push rsi; cld; mov [rdi-0xa], rcx; mov [rdi-4], edx; ret;
0x00141b36: cld; mov [rdi-0xa], rcx; mov [rdi-4], edx; ret;
0x00141b37: mov [rdi-0xa], rcx; mov [rdi-4], edx; ret;
0x00141b38: mov [rdi-0xa], ecx; mov [rdi-4], edx; ret;
0x00141b39: test byte ptr [r9-0x6f3c03a9], 0x66; mov edx, [rsi-2]; mov [rdi-2], dx; ret;
0x00141b3a: test byte ptr [rcx-0x6f3c03a9], 0x66; mov edx, [rsi-2]; mov [rdi-2], dx; ret;
0x00141b3f: nop; mov dx, [rsi-2]; mov [rdi-2], dx; ret;
0x00141b40: mov dx, [rsi-2]; mov [rdi-2], dx; ret;
0x00141b41: mov edx, [rsi-2]; mov [rdi-2], dx; ret;
0x00141cb3: mov [rdi-0x23], r9; mov [rdi-0x1b], r10; mov [rdi-0x13], r11; mov [rdi-0xb], rcx; mov [rdi-4], edx; ret;
0x00141cb4: mov [rdi-0x23], ecx; mov [rdi-0x1b], r10; mov [rdi-0x13], r11; mov [rdi-0xb], rcx; mov [rdi-4], edx; ret;
0x00141cb5: fisttp qword ptr [r9+r9*4+0x57], st; in eax, 0x4c; mov [rdi-0x13], ebx; mov [rdi-0xb], rcx; mov [rdi-4], edx; ret;
0x00141cb6: fisttp qword ptr [rcx+rcx*4+0x57], st; in eax, 0x4c; mov [rdi-0x13], ebx; mov [rdi-0xb], rcx; mov [rdi-4], edx; ret;
0x00141cdc: mov edx, [rsi-4]; mov [rdi-0x1b], r10; mov [rdi-0x13], r11; mov [rdi-0xb], rcx; mov [rdi-4], edx; ret;
0x00141cde: cld; mov [rdi-0x1b], r10; mov [rdi-0x13], r11; mov [rdi-0xb], rcx; mov [rdi-4], edx; ret;
0x00141cdf: mov [rdi-0x1b], r10; mov [rdi-0x13], r11; mov [rdi-0xb], rcx; mov [rdi-4], edx; ret;
0x00141ce0: mov [rdi-0x1b], edx; mov [rdi-0x13], r11; mov [rdi-0xb], rcx; mov [rdi-4], edx; ret;
0x00141ce1: push rdi; in eax, 0x4c; mov [rdi-0x13], ebx; mov [rdi-0xb], rcx; mov [rdi-4], edx; ret;
0x00141ce2: in eax, 0x4c; mov [rdi-0x13], ebx; mov [rdi-0xb], rcx; mov [rdi-4], edx; ret;
0x00141cf4: mov rcx, [rsi-0xb]; mov edx, [rsi-4]; mov [rdi-0x13], r11; mov [rdi-0xb], rcx; mov [rdi-4], edx; ret;
0x00141cf5: mov ecx, [rsi-0xb]; mov edx, [rsi-4]; mov [rdi-0x13], r11; mov [rdi-0xb], rcx; mov [rdi-4], edx; ret;
0x00141cf7: cmc; mov edx, [rsi-4]; mov [rdi-0x13], r11; mov [rdi-0xb], rcx; mov [rdi-4], edx; ret;
0x00141cf8: mov edx, [rsi-4]; mov [rdi-0x13], r11; mov [rdi-0xb], rcx; mov [rdi-4], edx; ret;
0x00141cf9: push rsi; cld; mov [rdi-0x13], r11; mov [rdi-0xb], rcx; mov [rdi-4], edx; ret;
0x00141cfa: cld; mov [rdi-0x13], r11; mov [rdi-0xb], rcx; mov [rdi-4], edx; ret;
0x00141cfb: mov [rdi-0x13], r11; mov [rdi-0xb], rcx; mov [rdi-4], edx; ret;
0x00141cfc: mov [rdi-0x13], ebx; mov [rdi-0xb], rcx; mov [rdi-4], edx; ret;
0x00141cfd: pop rdi; in eax, dx; mov [rdi-0xb], rcx; mov [rdi-4], edx; ret;
0x00141cfe: in eax, dx; mov [rdi-0xb], rcx; mov [rdi-4], edx; ret;
0x00141d07: nop [rax+rax]; mov rcx, [rsi-0xb]; mov edx, [rsi-4]; mov [rdi-0xb], rcx; mov [rdi-4], edx; ret;
0x00141d08: nop [rax+rax]; mov rcx, [rsi-0xb]; mov edx, [rsi-4]; mov [rdi-0xb], rcx; mov [rdi-4], edx; ret;
0x00141d0e: add [rax], al; mov rcx, [rsi-0xb]; mov edx, [rsi-4]; mov [rdi-0xb], rcx; mov [rdi-4], edx; ret;
0x00141d0f: add [rax-0x75], cl; cmc; mov edx, [rsi-4]; mov [rdi-0xb], rcx; mov [rdi-4], edx; ret;
0x00141d10: mov rcx, [rsi-0xb]; mov edx, [rsi-4]; mov [rdi-0xb], rcx; mov [rdi-4], edx; ret;
0x00141d11: mov ecx, [rsi-0xb]; mov edx, [rsi-4]; mov [rdi-0xb], rcx; mov [rdi-4], edx; ret;
0x00141d13: cmc; mov edx, [rsi-4]; mov [rdi-0xb], rcx; mov [rdi-4], edx; ret;
0x00141d14: mov edx, [rsi-4]; mov [rdi-0xb], rcx; mov [rdi-4], edx; ret;
0x00141d15: push rsi; cld; mov [rdi-0xb], rcx; mov [rdi-4], edx; ret;
0x00141d16: cld; mov [rdi-0xb], rcx; mov [rdi-4], edx; ret;
0x00141d17: mov [rdi-0xb], rcx; mov [rdi-4], edx; ret;
0x00141d18: mov [rdi-0xb], ecx; mov [rdi-4], edx; ret;
0x00141d1a: cmc; mov [rdi-4], edx; ret;
0x00141d1f: nop; mov dx, [rsi-3]; mov cx, [rsi-2]; mov [rdi-3], dx; mov [rdi-2], cx; ret;
0x00141e93: mov [rdi-0x24], r9; mov [rdi-0x1c], r10; mov [rdi-0x14], r11; mov [rdi-0xc], rcx; mov [rdi-4], edx; ret;
0x00141e94: mov [rdi-0x24], ecx; mov [rdi-0x1c], r10; mov [rdi-0x14], r11; mov [rdi-0xc], rcx; mov [rdi-4], edx; ret;
0x00141e95: fmul st, qword ptr [r9+r9*4+0x57]; in al, 0x4c; mov [rdi-0x14], ebx; mov [rdi-0xc], rcx; mov [rdi-4], edx; ret;
0x00141e96: fmul st, qword ptr [rcx+rcx*4+0x57]; in al, 0x4c; mov [rdi-0x14], ebx; mov [rdi-0xc], rcx; mov [rdi-4], edx; ret;
0x00141ebc: mov edx, [rsi-4]; mov [rdi-0x1c], r10; mov [rdi-0x14], r11; mov [rdi-0xc], rcx; mov [rdi-4], edx; ret;
0x00141ebe: cld; mov [rdi-0x1c], r10; mov [rdi-0x14], r11; mov [rdi-0xc], rcx; mov [rdi-4], edx; ret;
0x00141ebf: mov [rdi-0x1c], r10; mov [rdi-0x14], r11; mov [rdi-0xc], rcx; mov [rdi-4], edx; ret;
0x00141ec0: mov [rdi-0x1c], edx; mov [rdi-0x14], r11; mov [rdi-0xc], rcx; mov [rdi-4], edx; ret;
0x00141ec1: push rdi; in al, 0x4c; mov [rdi-0x14], ebx; mov [rdi-0xc], rcx; mov [rdi-4], edx; ret;
0x00141ec2: in al, 0x4c; mov [rdi-0x14], ebx; mov [rdi-0xc], rcx; mov [rdi-4], edx; ret;
0x00141ed4: mov rcx, [rsi-0xc]; mov edx, [rsi-4]; mov [rdi-0x14], r11; mov [rdi-0xc], rcx; mov [rdi-4], edx; ret;
0x00141ed5: mov ecx, [rsi-0xc]; mov edx, [rsi-4]; mov [rdi-0x14], r11; mov [rdi-0xc], rcx; mov [rdi-4], edx; ret;
0x00141ed7: hlt; mov edx, [rsi-4]; mov [rdi-0x14], r11; mov [rdi-0xc], rcx; mov [rdi-4], edx; ret;
0x00141ed8: mov edx, [rsi-4]; mov [rdi-0x14], r11; mov [rdi-0xc], rcx; mov [rdi-4], edx; ret;
0x00141ed9: push rsi; cld; mov [rdi-0x14], r11; mov [rdi-0xc], rcx; mov [rdi-4], edx; ret;
0x00141eda: cld; mov [rdi-0x14], r11; mov [rdi-0xc], rcx; mov [rdi-4], edx; ret;
0x00141edb: mov [rdi-0x14], r11; mov [rdi-0xc], rcx; mov [rdi-4], edx; ret;
0x00141edc: mov [rdi-0x14], ebx; mov [rdi-0xc], rcx; mov [rdi-4], edx; ret;
0x00141edd: pop rdi; in al, dx; mov [rdi-0xc], rcx; mov [rdi-4], edx; ret;
0x00141ede: in al, dx; mov [rdi-0xc], rcx; mov [rdi-4], edx; ret;
0x00141ee7: nop [rax+rax]; mov rcx, [rsi-0xc]; mov edx, [rsi-4]; mov [rdi-0xc], rcx; mov [rdi-4], edx; ret;
0x00141ee8: nop [rax+rax]; mov rcx, [rsi-0xc]; mov edx, [rsi-4]; mov [rdi-0xc], rcx; mov [rdi-4], edx; ret;
0x00141eee: add [rax], al; mov rcx, [rsi-0xc]; mov edx, [rsi-4]; mov [rdi-0xc], rcx; mov [rdi-4], edx; ret;
0x00141eef: add [rax-0x75], cl; hlt; mov edx, [rsi-4]; mov [rdi-0xc], rcx; mov [rdi-4], edx; ret;
0x00141ef0: mov rcx, [rsi-0xc]; mov edx, [rsi-4]; mov [rdi-0xc], rcx; mov [rdi-4], edx; ret;
0x00141ef1: mov ecx, [rsi-0xc]; mov edx, [rsi-4]; mov [rdi-0xc], rcx; mov [rdi-4], edx; ret;
0x00141ef3: hlt; mov edx, [rsi-4]; mov [rdi-0xc], rcx; mov [rdi-4], edx; ret;
0x00141ef4: mov edx, [rsi-4]; mov [rdi-0xc], rcx; mov [rdi-4], edx; ret;
0x00141ef5: push rsi; cld; mov [rdi-0xc], rcx; mov [rdi-4], edx; ret;
0x00141ef6: cld; mov [rdi-0xc], rcx; mov [rdi-4], edx; ret;
0x00141ef7: mov [rdi-0xc], rcx; mov [rdi-4], edx; ret;
0x00141ef8: mov [rdi-0xc], ecx; mov [rdi-4], edx; ret;
0x00141efa: hlt; mov [rdi-4], edx; ret;
0x00141eff: nop; mov edx, [rsi-4]; mov [rdi-4], edx; ret;
0x00142074: mov [rdi-0x25], r9; mov [rdi-0x1d], r10; mov [rdi-0x15], r11; mov [rdi-0xd], rcx; mov [rdi-8], rdx; ret;
0x00142075: mov [rdi-0x25], ecx; mov [rdi-0x1d], r10; mov [rdi-0x15], r11; mov [rdi-0xd], rcx; mov [rdi-8], rdx; ret;
0x0014209c: mov rdx, [rsi-8]; mov [rdi-0x1d], r10; mov [rdi-0x15], r11; mov [rdi-0xd], rcx; mov [rdi-8], rdx; ret;
0x0014209d: mov edx, [rsi-8]; mov [rdi-0x1d], r10; mov [rdi-0x15], r11; mov [rdi-0xd], rcx; mov [rdi-8], rdx; ret;
0x0014209f: clc; mov [rdi-0x1d], r10; mov [rdi-0x15], r11; mov [rdi-0xd], rcx; mov [rdi-8], rdx; ret;
0x001420a0: mov [rdi-0x1d], r10; mov [rdi-0x15], r11; mov [rdi-0xd], rcx; mov [rdi-8], rdx; ret;
0x001420a1: mov [rdi-0x1d], edx; mov [rdi-0x15], r11; mov [rdi-0xd], rcx; mov [rdi-8], rdx; ret;
0x001420c4: mov rcx, [rsi-0xd]; mov rdx, [rsi-8]; mov [rdi-0x15], r11; mov [rdi-0xd], rcx; mov [rdi-8], rdx; ret;
0x001420c5: mov ecx, [rsi-0xd]; mov rdx, [rsi-8]; mov [rdi-0x15], r11; mov [rdi-0xd], rcx; mov [rdi-8], rdx; ret;
0x001420c8: mov rdx, [rsi-8]; mov [rdi-0x15], r11; mov [rdi-0xd], rcx; mov [rdi-8], rdx; ret;
0x001420c9: mov edx, [rsi-8]; mov [rdi-0x15], r11; mov [rdi-0xd], rcx; mov [rdi-8], rdx; ret;
0x001420ca: push rsi; clc; mov [rdi-0x15], r11; mov [rdi-0xd], rcx; mov [rdi-8], rdx; ret;
0x001420cb: clc; mov [rdi-0x15], r11; mov [rdi-0xd], rcx; mov [rdi-8], rdx; ret;
0x001420cc: mov [rdi-0x15], r11; mov [rdi-0xd], rcx; mov [rdi-8], rdx; ret;
0x001420cd: mov [rdi-0x15], ebx; mov [rdi-0xd], rcx; mov [rdi-8], rdx; ret;
0x001420d9: nop [rax]; mov rcx, [rsi-0xd]; mov rdx, [rsi-8]; mov [rdi-0xd], rcx; mov [rdi-8], rdx; ret;
0x001420de: add [rax], al; mov rcx, [rsi-0xd]; mov rdx, [rsi-8]; mov [rdi-0xd], rcx; mov [rdi-8], rdx; ret;
0x001420e0: mov rcx, [rsi-0xd]; mov rdx, [rsi-8]; mov [rdi-0xd], rcx; mov [rdi-8], rdx; ret;
0x001420e1: mov ecx, [rsi-0xd]; mov rdx, [rsi-8]; mov [rdi-0xd], rcx; mov [rdi-8], rdx; ret;
0x001420e4: mov rdx, [rsi-8]; mov [rdi-0xd], rcx; mov [rdi-8], rdx; ret;
0x001420e5: mov edx, [rsi-8]; mov [rdi-0xd], rcx; mov [rdi-8], rdx; ret;
0x001420e6: push rsi; clc; mov [rdi-0xd], rcx; mov [rdi-8], rdx; ret;
0x001420e7: clc; mov [rdi-0xd], rcx; mov [rdi-8], rdx; ret;
0x001420e8: mov [rdi-0xd], rcx; mov [rdi-8], rdx; ret;
0x001420e9: mov [rdi-0xd], ecx; mov [rdi-8], rdx; ret;
0x001421a2: outsd dx, [rsi]; ret 0x8b4c;
0x001421a4: ret 0x8b4c;
0x00142274: mov [rdi-0x26], r9; mov [rdi-0x1e], r10; mov [rdi-0x16], r11; mov [rdi-0xe], rcx; mov [rdi-8], rdx; ret;
0x00142275: mov [rdi-0x26], ecx; mov [rdi-0x1e], r10; mov [rdi-0x16], r11; mov [rdi-0xe], rcx; mov [rdi-8], rdx; ret;
0x0014229c: mov rdx, [rsi-8]; mov [rdi-0x1e], r10; mov [rdi-0x16], r11; mov [rdi-0xe], rcx; mov [rdi-8], rdx; ret;
0x0014229d: mov edx, [rsi-8]; mov [rdi-0x1e], r10; mov [rdi-0x16], r11; mov [rdi-0xe], rcx; mov [rdi-8], rdx; ret;
0x0014229f: clc; mov [rdi-0x1e], r10; mov [rdi-0x16], r11; mov [rdi-0xe], rcx; mov [rdi-8], rdx; ret;
0x001422a0: mov [rdi-0x1e], r10; mov [rdi-0x16], r11; mov [rdi-0xe], rcx; mov [rdi-8], rdx; ret;
0x001422a1: mov [rdi-0x1e], edx; mov [rdi-0x16], r11; mov [rdi-0xe], rcx; mov [rdi-8], rdx; ret;
0x001422c4: mov rcx, [rsi-0xe]; mov rdx, [rsi-8]; mov [rdi-0x16], r11; mov [rdi-0xe], rcx; mov [rdi-8], rdx; ret;
0x001422c5: mov ecx, [rsi-0xe]; mov rdx, [rsi-8]; mov [rdi-0x16], r11; mov [rdi-0xe], rcx; mov [rdi-8], rdx; ret;
0x001422c8: mov rdx, [rsi-8]; mov [rdi-0x16], r11; mov [rdi-0xe], rcx; mov [rdi-8], rdx; ret;
0x001422c9: mov edx, [rsi-8]; mov [rdi-0x16], r11; mov [rdi-0xe], rcx; mov [rdi-8], rdx; ret;
0x001422ca: push rsi; clc; mov [rdi-0x16], r11; mov [rdi-0xe], rcx; mov [rdi-8], rdx; ret;
0x001422cb: clc; mov [rdi-0x16], r11; mov [rdi-0xe], rcx; mov [rdi-8], rdx; ret;
0x001422cc: mov [rdi-0x16], r11; mov [rdi-0xe], rcx; mov [rdi-8], rdx; ret;
0x001422cd: mov [rdi-0x16], ebx; mov [rdi-0xe], rcx; mov [rdi-8], rdx; ret;
0x001422d9: nop [rax]; mov rcx, [rsi-0xe]; mov rdx, [rsi-8]; mov [rdi-0xe], rcx; mov [rdi-8], rdx; ret;
0x001422de: add [rax], al; mov rcx, [rsi-0xe]; mov rdx, [rsi-8]; mov [rdi-0xe], rcx; mov [rdi-8], rdx; ret;
0x001422e0: mov rcx, [rsi-0xe]; mov rdx, [rsi-8]; mov [rdi-0xe], rcx; mov [rdi-8], rdx; ret;
0x001422e1: mov ecx, [rsi-0xe]; mov rdx, [rsi-8]; mov [rdi-0xe], rcx; mov [rdi-8], rdx; ret;
0x001422e4: mov rdx, [rsi-8]; mov [rdi-0xe], rcx; mov [rdi-8], rdx; ret;
0x001422e5: mov edx, [rsi-8]; mov [rdi-0xe], rcx; mov [rdi-8], rdx; ret;
0x001422e6: push rsi; clc; mov [rdi-0xe], rcx; mov [rdi-8], rdx; ret;
0x001422e7: clc; mov [rdi-0xe], rcx; mov [rdi-8], rdx; ret;
0x001422e8: mov [rdi-0xe], rcx; mov [rdi-8], rdx; ret;
0x001422e9: mov [rdi-0xe], ecx; mov [rdi-8], rdx; ret;
0x00142474: mov [rdi-0x27], r9; mov [rdi-0x1f], r10; mov [rdi-0x17], r11; mov [rdi-0xf], rcx; mov [rdi-8], rdx; ret;
0x00142475: mov [rdi-0x27], ecx; mov [rdi-0x1f], r10; mov [rdi-0x17], r11; mov [rdi-0xf], rcx; mov [rdi-8], rdx; ret;
0x0014249c: mov rdx, [rsi-8]; mov [rdi-0x1f], r10; mov [rdi-0x17], r11; mov [rdi-0xf], rcx; mov [rdi-8], rdx; ret;
0x0014249d: mov edx, [rsi-8]; mov [rdi-0x1f], r10; mov [rdi-0x17], r11; mov [rdi-0xf], rcx; mov [rdi-8], rdx; ret;
0x0014249f: clc; mov [rdi-0x1f], r10; mov [rdi-0x17], r11; mov [rdi-0xf], rcx; mov [rdi-8], rdx; ret;
0x001424a0: mov [rdi-0x1f], r10; mov [rdi-0x17], r11; mov [rdi-0xf], rcx; mov [rdi-8], rdx; ret;
0x001424a1: mov [rdi-0x1f], edx; mov [rdi-0x17], r11; mov [rdi-0xf], rcx; mov [rdi-8], rdx; ret;
0x001424c4: mov rcx, [rsi-0xf]; mov rdx, [rsi-8]; mov [rdi-0x17], r11; mov [rdi-0xf], rcx; mov [rdi-8], rdx; ret;
0x001424c5: mov ecx, [rsi-0xf]; mov rdx, [rsi-8]; mov [rdi-0x17], r11; mov [rdi-0xf], rcx; mov [rdi-8], rdx; ret;
0x001424c7: int1; mov rdx, [rsi-8]; mov [rdi-0x17], r11; mov [rdi-0xf], rcx; mov [rdi-8], rdx; ret;
0x001424c8: mov rdx, [rsi-8]; mov [rdi-0x17], r11; mov [rdi-0xf], rcx; mov [rdi-8], rdx; ret;
0x001424c9: mov edx, [rsi-8]; mov [rdi-0x17], r11; mov [rdi-0xf], rcx; mov [rdi-8], rdx; ret;
0x001424ca: push rsi; clc; mov [rdi-0x17], r11; mov [rdi-0xf], rcx; mov [rdi-8], rdx; ret;
0x001424cb: clc; mov [rdi-0x17], r11; mov [rdi-0xf], rcx; mov [rdi-8], rdx; ret;
0x001424cc: mov [rdi-0x17], r11; mov [rdi-0xf], rcx; mov [rdi-8], rdx; ret;
0x001424cd: mov [rdi-0x17], ebx; mov [rdi-0xf], rcx; mov [rdi-8], rdx; ret;
0x001424d9: nop [rax]; mov rcx, [rsi-0xf]; mov rdx, [rsi-8]; mov [rdi-0xf], rcx; mov [rdi-8], rdx; ret;
0x001424de: add [rax], al; mov rcx, [rsi-0xf]; mov rdx, [rsi-8]; mov [rdi-0xf], rcx; mov [rdi-8], rdx; ret;
0x001424df: add [rax-0x75], cl; int1; mov rdx, [rsi-8]; mov [rdi-0xf], rcx; mov [rdi-8], rdx; ret;
0x001424e0: mov rcx, [rsi-0xf]; mov rdx, [rsi-8]; mov [rdi-0xf], rcx; mov [rdi-8], rdx; ret;
0x001424e1: mov ecx, [rsi-0xf]; mov rdx, [rsi-8]; mov [rdi-0xf], rcx; mov [rdi-8], rdx; ret;
0x001424e3: int1; mov rdx, [rsi-8]; mov [rdi-0xf], rcx; mov [rdi-8], rdx; ret;
0x001424e4: mov rdx, [rsi-8]; mov [rdi-0xf], rcx; mov [rdi-8], rdx; ret;
0x001424e5: mov edx, [rsi-8]; mov [rdi-0xf], rcx; mov [rdi-8], rdx; ret;
0x001424e6: push rsi; clc; mov [rdi-0xf], rcx; mov [rdi-8], rdx; ret;
0x001424e7: clc; mov [rdi-0xf], rcx; mov [rdi-8], rdx; ret;
0x001424e8: mov [rdi-0xf], rcx; mov [rdi-8], rdx; ret;
0x001424e9: mov [rdi-0xf], ecx; mov [rdi-8], rdx; ret;
0x001424eb: int1; mov [rdi-8], rdx; ret;
0x001425eb: add rdi, rdx; sfence; lea r11, [rip+0x50bc8]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001425ec: add edi, edx; sfence; lea r11, [rip+0x50bc8]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001425ed: xlat [rbx]; sfence; lea r11, [rip+0x50bc8]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001425f3: sbb eax, 0x50bc8; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001425f4: enter 0x50b, 0; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001425f5: or eax, [rip+0x14634900]; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x001426b6: add rsi, rdx; add rdi, rdx; lea r11, [rip+0x53361]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001426b7: add esi, edx; add rdi, rdx; lea r11, [rip+0x53361]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001426b9: add rdi, rdx; lea r11, [rip+0x53361]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001426ba: add edi, edx; lea r11, [rip+0x53361]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001426bb: xlat [rbx]; lea r11, [rip+0x53361]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001426be: sbb eax, 0x50afd; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001426bf: std; or al, [rip+0x14634900]; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x001426c0: or al, [rip+0x14634900]; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x0014279f: ror byte ptr [rax-0x7d], 0xea; sfence; lea r11, [rip+0x50a12]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001427a0: sub rdx, 0x40; sfence; lea r11, [rip+0x50a12]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001427a1: sub edx, 0x40; sfence; lea r11, [rip+0x50a12]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001427a4: sfence; lea r11, [rip+0x50bc8]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001427a5: scasb [rdi]; clc; lea r11, [rip+0x50bc8]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001427a6: clc; lea r11, [rip+0x50bc8]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001427a9: sbb eax, 0x50a12; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001427aa: adc cl, [rdx]; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x001427ab: or al, [rip+0x14634900]; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x0014285b: ror byte ptr [rax-0x73], 0x7f; ror byte ptr [rax-0x7d], 0xea; lea r11, [rip+0x50955]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0014285c: lea rdi, [rdi-0x40]; sub rdx, 0x40; lea r11, [rip+0x50955]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0014285d: lea edi, [rdi-0x40]; sub rdx, 0x40; lea r11, [rip+0x50955]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0014285f: ror byte ptr [rax-0x7d], 0xea; lea r11, [rip+0x50955]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00142860: sub rdx, 0x40; lea r11, [rip+0x50955]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00142861: sub edx, 0x40; lea r11, [rip+0x50955]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00142864: lea r11, [rip+0x53361]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00142865: lea ebx, [rip+0x53361]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00142866: sbb eax, 0x50955; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00142867: push rbp; or [rip+0x14634900], eax; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x00142868: or [rip+0x14634900], eax; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x001428c9: sbb eax, 0x50cf2; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001428cb: or al, 5; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx;
0x001428d9: or ecx, [rbp+rcx*4+0x1d]; lahf; or al, [rip+0x14634900]; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x001428dc: sbb eax, 0x50a9f; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001428dd: lahf; or al, [rip+0x14634900]; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x001428de: or al, [rip+0x14634900]; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x0014292b: add [rax], al; lea r11, [rip+0x50ecc]; sub rdx, 0x80; movsxd r9, [r11+r9*4]; add r9, r11; jmp r9;
0x0014292d: lea r11, [rip+0x50ecc]; sub rdx, 0x80; movsxd r9, [r11+r9*4]; add r9, r11; jmp r9;
0x0014292e: lea ebx, [rip+0x50ecc]; sub rdx, 0x80; movsxd r9, [r11+r9*4]; add r9, r11; jmp r9;
0x0014292f: sbb eax, 0x50ecc; sub rdx, 0x80; movsxd r9, [r11+r9*4]; add r9, r11; jmp r9;
0x0014298d: add [rax], al; lea r11, [rip+0x50eaa]; sub rdx, 0x80; movsxd r9, [r11+r9*4]; add r9, r11; jmp r9;
0x0014298f: lea r11, [rip+0x50eaa]; sub rdx, 0x80; movsxd r9, [r11+r9*4]; add r9, r11; jmp r9;
0x00142990: lea ebx, [rip+0x50eaa]; sub rdx, 0x80; movsxd r9, [r11+r9*4]; add r9, r11; jmp r9;
0x00142991: sbb eax, 0x50eaa; sub rdx, 0x80; movsxd r9, [r11+r9*4]; add r9, r11; jmp r9;
0x00142994: add eax, 0xea814800; add byte ptr [rax], 0; add [rdi+0x63], cl; or al, 0x8b; add r9, r11; jmp r9;
0x00142a3b: sbb eax, 0x50b80; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00142a3c: or byte ptr [rbx], 5; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx;
0x00142a3d: or eax, [rip+0x14634900]; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x00142abc: sbb eax, 0x508bf; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00142abd: mov edi, 0x49000508; movsxd edx, [rbx+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00142abe: or [rip+0x14634900], al; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x00142b78: sbb eax, 0x50a43; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00142b7a: or al, [rip+0x14634900]; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x00142c35: sbb eax, 0x50746; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00142cf8: sbb eax, 0x508c3; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00142cfa: or [rip+0x14634900], al; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x00142db5: sbb eax, 0x505c6; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00142db6: mov byte ptr [rip+0x63490005], 0x14; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x00142e78: sbb eax, 0x50743; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00142f35: sbb eax, 0x50446; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00142ff8: sbb eax, 0x505c3; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00142ffa: add eax, 0x63490005; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx;
0x001430b5: sbb eax, 0x502c6; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001430b6: mov byte ptr [rdx], 5; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx;
0x001430b7: add al, [rip+0x14634900]; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x00143178: sbb eax, 0x50443; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0014317a: add al, 5; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx;
0x00143235: sbb eax, 0x50146; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00143236: add [rip+0x14634900], r8d; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x00143237: add [rip+0x14634900], eax; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x001432f8: sbb eax, 0x502c3; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001432fa: add al, [rip+0x14634900]; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x001433b5: sbb eax, 0x4ffc6; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00143478: sbb eax, 0x50143; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0014347a: add [rip+0x14634900], eax; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x0014347b: add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x00143535: sbb eax, 0x4fe46; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00143536: inc byte ptr [rax+r8]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001435f8: sbb eax, 0x4ffc3; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001435fa: inc dword ptr [rax+rax]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001436b5: sbb eax, 0x4fcc6; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00143778: sbb eax, 0x4fe43; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00143779: inc byte ptr [r8+r8]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0014377a: inc byte ptr [rax+rax]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00143835: sbb eax, 0x4fb46; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001438f8: sbb eax, 0x4fcc3; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001438fa: cld; add al, 0; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001439b5: sbb eax, 0x4f9c6; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00143a78: sbb eax, 0x4fb43; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00143a7a: sti; add al, 0; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00143b35: sbb eax, 0x4f846; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00143bf9: sbb eax, 0x4f9c2; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00143bfa: ret 0x4f9;
0x00143bfb: stc; add al, 0; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00143cb5: sbb eax, 0x4f6c6; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00143d78: sbb eax, 0x4f843; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00143d7a: clc; add al, 0; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00143e35: sbb eax, 0x4f546; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00143ef8: sbb eax, 0x4f6c3; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00143efa: test byte ptr [rax+rax], 0x49; movsxd edx, [rbx+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00143fb5: sbb eax, 0x4f3c6; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00144070: add rdi, rdx; add rsi, rdx; lea r11, [rip+0x50a43]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00144071: add edi, edx; add rsi, rdx; lea r11, [rip+0x50a43]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00144072: xlat [rbx]; add rsi, rdx; lea r11, [rip+0x50a43]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00144073: add rsi, rdx; lea r11, [rip+0x50a43]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00144074: add esi, edx; lea r11, [rip+0x50a43]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00144078: sbb eax, 0x4f543; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0014407a: cmc; add al, 0; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0014412d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip+0x508bf]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0014412e: sub edi, edx; sub rsi, rdx; lea r11, [rip+0x508bf]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0014412f: xlat [rbx]; sub rsi, rdx; lea r11, [rip+0x508bf]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00144130: sub rsi, rdx; lea r11, [rip+0x508bf]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00144131: sub esi, edx; lea r11, [rip+0x508bf]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00144135: sbb eax, 0x4f246; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001442c4: add rsi, rdx; add rdi, rdx; lea r11, [rip+0x50cf2]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001442c5: add esi, edx; add rdi, rdx; lea r11, [rip+0x50cf2]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001442c7: add rdi, rdx; lea r11, [rip+0x50cf2]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001442c8: add edi, edx; lea r11, [rip+0x50cf2]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001442c9: xlat [rbx]; lea r11, [rip+0x50cf2]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001442ca: lea r11, [rip+0x50cf2]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001442cb: lea ebx, [rip+0x50cf2]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001442cc: sbb eax, 0x4f2ef; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00144457: sub rsi, rdx; sub rdi, rdx; lea r11, [rip+0x4ef1c]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00144458: sub esi, edx; sub rdi, rdx; lea r11, [rip+0x4ef1c]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0014445a: sub rdi, rdx; lea r11, [rip+0x4ef1c]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0014445b: sub edi, edx; lea r11, [rip+0x4ef1c]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0014445c: xlat [rbx]; lea r11, [rip+0x4ef1c]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0014445d: lea r11, [rip+0x50a9f]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0014445e: lea ebx, [rip+0x50a9f]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0014445f: sbb eax, 0x4ef1c; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00144460: sbb al, 0xef; add al, 0; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00144461: out dx, eax; add al, 0; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00145394: add [rdi], cl; adc dword ptr [rbp+0x4c000000], 0xffffff8d; sbb eax, 0x4e4de; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00145396: adc dword ptr [rbp+0x4c000000], 0xffffff8d; sbb eax, 0x4e4de; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00145399: add [rax], al; lea r11, [rip+0x4e4de]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0014539a: add [rbp+rcx*4+0x1d], cl; fsubrp st(4), st; add al, 0; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0014539d: sbb eax, 0x4e4de; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0014539e: fsubrp st(4), st; add al, 0; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001453bf: sbb eax, 0x4e6fc; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001453c0: cld; out 4, al; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx;
0x001453c1: out 4, al; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx;
0x00145406: add [rax], al; lea r11, [rip+0x4e8f1]; sub rdx, 0x80; movsxd r9, [r11+r9*4]; add r9, r11; jmp r9;
0x00145408: lea r11, [rip+0x4e8f1]; sub rdx, 0x80; movsxd r9, [r11+r9*4]; add r9, r11; jmp r9;
0x00145409: lea ebx, [rip+0x4e8f1]; sub rdx, 0x80; movsxd r9, [r11+r9*4]; add r9, r11; jmp r9;
0x0014540a: sbb eax, 0x4e8f1; sub rdx, 0x80; movsxd r9, [r11+r9*4]; add r9, r11; jmp r9;
0x00145458: cmovl esi, [rcx]; iretd;
0x0014546d: add [rax], al; lea r11, [rip+0x4e8ca]; sub rdx, 0x80; movsxd r9, [r11+r9*4]; add r9, r11; jmp r9;
0x0014546f: lea r11, [rip+0x4e8ca]; sub rdx, 0x80; movsxd r9, [r11+r9*4]; add r9, r11; jmp r9;
0x00145470: lea ebx, [rip+0x4e8ca]; sub rdx, 0x80; movsxd r9, [r11+r9*4]; add r9, r11; jmp r9;
0x00145471: sbb eax, 0x4e8ca; sub rdx, 0x80; movsxd r9, [r11+r9*4]; add r9, r11; jmp r9;
0x00145474: add al, 0; sub rdx, 0x80; movsxd r9, [r11+r9*4]; add r9, r11; jmp r9;
0x00145476: sub rdx, 0x80; movsxd r9, [r11+r9*4]; add r9, r11; jmp r9;
0x00145477: sub edx, 0x80; movsxd r9, [r11+r9*4]; add r9, r11; jmp r9;
0x00145479: add byte ptr [rax], 0; add [rdi+0x63], cl; or al, 0x8b; add r9, r11; jmp r9;
0x0014547a: add [rax], al; add [rdi+0x63], cl; or al, 0x8b; add r9, r11; jmp r9;
0x0014547b: add [rax], al; movsxd r9, [r11+r9*4]; add r9, r11; jmp r9;
0x0014547c: add [rdi+0x63], cl; or al, 0x8b; add r9, r11; jmp r9;
0x0014547d: movsxd r9, [r11+r9*4]; add r9, r11; jmp r9;
0x0014547e: movsxd ecx, [rbx+rcx*4]; add r9, r11; jmp r9;
0x0014547f: or al, 0x8b; add r9, r11; jmp r9;
0x00145481: add r9, r11; jmp r9;
0x00145482: add ecx, ebx; jmp r9;
0x00145484: jmp r9;
0x00145506: test eax, 0x7f0f41f3; add [rax-0x7f], cl; ret 0x80;
0x0014551b: sbb eax, 0x4e5a0; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0014551c: mov al, [0x49931463490004e5]; lea edx, [rbx+rdx]; jmp rdx;
0x0014551d: in eax, 4; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx;
0x0014559c: sbb eax, 0x4e2df; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00145658: sbb eax, 0x4e463; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00145659: movsxd esp, esp; add al, 0; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0014565a: in al, 4; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx;
0x00145715: sbb eax, 0x4e166; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001457d8: sbb eax, 0x4e2e3; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00145895: sbb eax, 0x4dfe6; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00145896: out 0xdf, al; add al, 0; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00145958: sbb eax, 0x4e163; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00145959: movsxd esp, ecx; add al, 0; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00145a15: sbb eax, 0x4de66; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00145ad8: sbb eax, 0x4dfe3; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00145ada: fild st, word ptr [rax+rax]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00145b95: sbb eax, 0x4dce6; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00145b96: out 0xdc, al; add al, 0; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00145c58: sbb eax, 0x4de63; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00145c59: movsxd ebx, esi; add al, 0; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00145c5a: fiadd st, word ptr [rax+rax]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00145d15: sbb eax, 0x4db66; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00145dd8: sbb eax, 0x4dce3; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00145dda: fadd st, qword ptr [rax+rax]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00145e95: sbb eax, 0x4d9e6; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00145e96: out 0xd9, al; add al, 0; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00145f58: sbb eax, 0x4db63; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00145f59: movsxd ebx, ebx; add al, 0; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00145f5a: fild st, dword ptr [rax+rax]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146015: sbb eax, 0x4d866; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001460d8: sbb eax, 0x4d9e3; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001460da: fld st, dword ptr [rax+rax]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146195: sbb eax, 0x4d6e6; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146196: out 0xd6, al; add al, 0; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146258: sbb eax, 0x4d863; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146259: movsxd ebx, eax; add al, 0; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0014625a: fadd st, dword ptr [rax+rax]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146315: sbb eax, 0x4d566; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001463d8: sbb eax, 0x4d6e3; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146495: sbb eax, 0x4d3e6; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146496: out 0xd3, al; add al, 0; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146558: sbb eax, 0x4d563; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146559: movsxd edx, ebp; add al, 0; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146615: sbb eax, 0x4d266; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001466d9: sbb eax, 0x4d3e2; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001466db: rol dword ptr [rax+rax], cl; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146795: sbb eax, 0x4d0e6; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146796: out 0xd0, al; add al, 0; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146858: sbb eax, 0x4d263; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146859: movsxd edx, edx; add al, 0; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x0014685a: rol byte ptr [rax+rax], cl; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146892: data16 ret;
0x00146915: sbb eax, 0x4cf66; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146916: iret;
0x001469d8: sbb eax, 0x4d0e3; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x001469da: rol byte ptr [rax+rax], 1; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146a12: data16 ret 0xf66;
0x00146a95: sbb eax, 0x4cde6; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146a96: out 0xcd, al; add al, 0; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146a97: int 4; add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx;
0x00146b50: add rdi, rdx; add rsi, rdx; lea r11, [rip+0x4e463]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146b51: add edi, edx; add rsi, rdx; lea r11, [rip+0x4e463]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146b52: xlat [rbx]; add rsi, rdx; lea r11, [rip+0x4e463]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146b53: add rsi, rdx; lea r11, [rip+0x4e463]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146b54: add esi, edx; lea r11, [rip+0x4e463]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146b58: sbb eax, 0x4cf63; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146b59: movsxd ecx, edi; add al, 0; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146bdf: jmp qword ptr [rsi+0x45];
0x00146c0d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip+0x4e2df]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146c0e: sub edi, edx; sub rsi, rdx; lea r11, [rip+0x4e2df]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146c0f: xlat [rbx]; sub rsi, rdx; lea r11, [rip+0x4e2df]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146c10: sub rsi, rdx; lea r11, [rip+0x4e2df]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146c11: sub esi, edx; lea r11, [rip+0x4e2df]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146c15: sbb eax, 0x4cc66; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146d17: xchg esi, eax; add [rax], al; add [rax-0x7f], cl; ret 0x80;
0x00146da7: add byte ptr [rax], 0; add [rdi], cl; cmp dword ptr [rbx-1], 0xffffffff; dec dword ptr [rax-0x7f]; ret 0x80;
0x00146da8: add [rax], al; add [rdi], cl; cmp dword ptr [rbx-1], 0xffffffff; dec dword ptr [rax-0x7f]; ret 0x80;
0x00146daa: add [rdi], cl; cmp dword ptr [rbx-1], 0xffffffff; dec dword ptr [rax-0x7f]; ret 0x80;
0x00146dac: cmp dword ptr [rbx-1], 0xffffffff; dec dword ptr [rax-0x7f]; ret 0x80;
0x00146db0: dec dword ptr [rax-0x7f]; ret 0x80;
0x00146db8: add rsi, rdx; add rdi, rdx; lea r11, [rip+0x4e6fc]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146db9: add esi, edx; add rdi, rdx; lea r11, [rip+0x4e6fc]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146dbb: add rdi, rdx; lea r11, [rip+0x4e6fc]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146dbc: add edi, edx; lea r11, [rip+0x4e6fc]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146dbd: xlat [rbx]; lea r11, [rip+0x4e6fc]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146dbe: lea r11, [rip+0x4e6fc]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146dbf: lea ebx, [rip+0x4e6fc]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146dc0: sbb eax, 0x4ccfb; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146dc1: sti; int3; add al, 0; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146dc2: int3; add al, 0; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146ecb: nop; add [rax], al; add [rax-0x7f], cl; ret 0x80;
0x00146f6b: sub rsi, rdx; sub rdi, rdx; lea r11, [rip+0x4c908]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146f6c: sub esi, edx; sub rdi, rdx; lea r11, [rip+0x4c908]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146f6e: sub rdi, rdx; lea r11, [rip+0x4c908]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146f6f: sub edi, edx; lea r11, [rip+0x4c908]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146f70: xlat [rbx]; lea r11, [rip+0x4c908]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146f71: lea r11, [rip+0x4e4de]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146f72: lea ebx, [rip+0x4e4de]; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146f73: sbb eax, 0x4c908; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146f74: or cl, cl; add al, 0; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146f75: leave; add al, 0; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146f76: add al, 0; movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146f77: add [rcx+0x63], cl; adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx;
0x00146f78: movsxd rdx, [r11+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146f79: movsxd edx, [rbx+rdx*4]; lea rdx, [r11+rdx]; jmp rdx;
0x00146f7a: adc al, 0x93; lea rdx, [r11+rdx]; jmp rdx;
0x00146f7b: xchg ebx, eax; lea rdx, [r11+rdx]; jmp rdx;
0x00146f7c: lea rdx, [r11+rdx]; jmp rdx;
0x00146f7d: lea edx, [rbx+rdx]; jmp rdx;
0x00146f7e: adc al, 0x13; jmp rdx;
0x00146fc7: movdqu [rdi-0x30], xmm0; lddqu xmm0, [rsi-0x20]; movdqu [rdi-0x20], xmm0; lddqu xmm0, [rsi-0x10]; movdqu [rdi-0x10], xmm0; ret;
0x00146fc8: movq [rdi-0x30], mm0; lddqu xmm0, [rsi-0x20]; movdqu [rdi-0x20], xmm0; lddqu xmm0, [rsi-0x10]; movdqu [rdi-0x10], xmm0; ret;
0x00146fcc: lddqu xmm0, [rsi-0x20]; movdqu [rdi-0x20], xmm0; lddqu xmm0, [rsi-0x10]; movdqu [rdi-0x10], xmm0; ret;
0x00146fd1: movdqu [rdi-0x20], xmm0; lddqu xmm0, [rsi-0x10]; movdqu [rdi-0x10], xmm0; ret;
0x00146fd2: movq [rdi-0x20], mm0; lddqu xmm0, [rsi-0x10]; movdqu [rdi-0x10], xmm0; ret;
0x00146fd6: lddqu xmm0, [rsi-0x10]; movdqu [rdi-0x10], xmm0; ret;
0x00146fdb: movdqu [rdi-0x10], xmm0; ret;
0x00146fdc: movq [rdi-0x10], mm0; ret;
0x00147037: movdqu [rdi-0x2f], xmm0; lddqu xmm0, [rsi-0x1f]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x1f], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x00147038: movq [rdi-0x2f], mm0; lddqu xmm0, [rsi-0x1f]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x1f], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x0014703c: lddqu xmm0, [rsi-0x1f]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x1f], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x00147041: lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x1f], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x00147046: movdqu [rdi-0x1f], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x00147047: movq [rdi-0x1f], mm0; movdqu [rdi-0x10], xmm1; ret;
0x0014705c: nop [rax]; mov rdx, [rsi-0xf]; mov rcx, [rsi-8]; mov [rdi-0xf], rdx; mov [rdi-8], rcx; ret;
0x00147060: mov rdx, [rsi-0xf]; mov rcx, [rsi-8]; mov [rdi-0xf], rdx; mov [rdi-8], rcx; ret;
0x00147061: mov edx, [rsi-0xf]; mov rcx, [rsi-8]; mov [rdi-0xf], rdx; mov [rdi-8], rcx; ret;
0x00147062: push rsi; int1; mov rcx, [rsi-8]; mov [rdi-0xf], rdx; mov [rdi-8], rcx; ret;
0x00147063: int1; mov rcx, [rsi-8]; mov [rdi-0xf], rdx; mov [rdi-8], rcx; ret;
0x00147064: mov rcx, [rsi-8]; mov [rdi-0xf], rdx; mov [rdi-8], rcx; ret;
0x00147065: mov ecx, [rsi-8]; mov [rdi-0xf], rdx; mov [rdi-8], rcx; ret;
0x00147067: clc; mov [rdi-0xf], rdx; mov [rdi-8], rcx; ret;
0x00147068: mov [rdi-0xf], rdx; mov [rdi-8], rcx; ret;
0x00147069: mov [rdi-0xf], edx; mov [rdi-8], rcx; ret;
0x0014706a: push rdi; int1; mov [rdi-8], rcx; ret;
0x0014706b: int1; mov [rdi-8], rcx; ret;
0x001470c1: ret 0xff2;
0x001470c7: movdqu [rdi-0x2e], xmm0; lddqu xmm0, [rsi-0x1e]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x1e], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x001470c8: movq [rdi-0x2e], mm0; lddqu xmm0, [rsi-0x1e]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x1e], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x001470cc: lddqu xmm0, [rsi-0x1e]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x1e], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x001470d1: lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x1e], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x001470d6: movdqu [rdi-0x1e], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x001470d7: movq [rdi-0x1e], mm0; movdqu [rdi-0x10], xmm1; ret;
0x001470ec: nop [rax]; mov rdx, [rsi-0xe]; mov rcx, [rsi-8]; mov [rdi-0xe], rdx; mov [rdi-8], rcx; ret;
0x001470f0: mov rdx, [rsi-0xe]; mov rcx, [rsi-8]; mov [rdi-0xe], rdx; mov [rdi-8], rcx; ret;
0x001470f1: mov edx, [rsi-0xe]; mov rcx, [rsi-8]; mov [rdi-0xe], rdx; mov [rdi-8], rcx; ret;
0x001470f4: mov rcx, [rsi-8]; mov [rdi-0xe], rdx; mov [rdi-8], rcx; ret;
0x001470f5: mov ecx, [rsi-8]; mov [rdi-0xe], rdx; mov [rdi-8], rcx; ret;
0x001470f7: clc; mov [rdi-0xe], rdx; mov [rdi-8], rcx; ret;
0x001470f8: mov [rdi-0xe], rdx; mov [rdi-8], rcx; ret;
0x001470f9: mov [rdi-0xe], edx; mov [rdi-8], rcx; ret;
0x00147157: movdqu [rdi-0x2d], xmm0; lddqu xmm0, [rsi-0x1d]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x1d], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x00147158: movq [rdi-0x2d], mm0; lddqu xmm0, [rsi-0x1d]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x1d], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x0014715c: lddqu xmm0, [rsi-0x1d]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x1d], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x00147161: lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x1d], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x00147166: movdqu [rdi-0x1d], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x00147167: movq [rdi-0x1d], mm0; movdqu [rdi-0x10], xmm1; ret;
0x0014717c: nop [rax]; mov rdx, [rsi-0xd]; mov rcx, [rsi-8]; mov [rdi-0xd], rdx; mov [rdi-8], rcx; ret;
0x00147180: mov rdx, [rsi-0xd]; mov rcx, [rsi-8]; mov [rdi-0xd], rdx; mov [rdi-8], rcx; ret;
0x00147181: mov edx, [rsi-0xd]; mov rcx, [rsi-8]; mov [rdi-0xd], rdx; mov [rdi-8], rcx; ret;
0x00147184: mov rcx, [rsi-8]; mov [rdi-0xd], rdx; mov [rdi-8], rcx; ret;
0x00147185: mov ecx, [rsi-8]; mov [rdi-0xd], rdx; mov [rdi-8], rcx; ret;
0x00147187: clc; mov [rdi-0xd], rdx; mov [rdi-8], rcx; ret;
0x00147188: mov [rdi-0xd], rdx; mov [rdi-8], rcx; ret;
0x00147189: mov [rdi-0xd], edx; mov [rdi-8], rcx; ret;
0x0014718c: mov [rdi-8], rcx; ret;
0x0014718d: mov [rdi-8], ecx; ret;
0x001471e7: movdqu [rdi-0x2c], xmm0; lddqu xmm0, [rsi-0x1c]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x1c], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x001471e8: movq [rdi-0x2c], mm0; lddqu xmm0, [rsi-0x1c]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x1c], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x001471ec: lddqu xmm0, [rsi-0x1c]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x1c], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x001471f1: lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x1c], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x001471f6: movdqu [rdi-0x1c], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x001471f7: movq [rdi-0x1c], mm0; movdqu [rdi-0x10], xmm1; ret;
0x001471fa: in al, 0xf3; movq [rdi-0x10], mm1; ret;
0x0014720c: nop [rax]; mov rdx, [rsi-0xc]; mov ecx, [rsi-4]; mov [rdi-0xc], rdx; mov [rdi-4], ecx; ret;
0x00147210: mov rdx, [rsi-0xc]; mov ecx, [rsi-4]; mov [rdi-0xc], rdx; mov [rdi-4], ecx; ret;
0x00147211: mov edx, [rsi-0xc]; mov ecx, [rsi-4]; mov [rdi-0xc], rdx; mov [rdi-4], ecx; ret;
0x00147212: push rsi; hlt; mov ecx, [rsi-4]; mov [rdi-0xc], rdx; mov [rdi-4], ecx; ret;
0x00147213: hlt; mov ecx, [rsi-4]; mov [rdi-0xc], rdx; mov [rdi-4], ecx; ret;
0x00147214: mov ecx, [rsi-4]; mov [rdi-0xc], rdx; mov [rdi-4], ecx; ret;
0x00147216: cld; mov [rdi-0xc], rdx; mov [rdi-4], ecx; ret;
0x00147217: mov [rdi-0xc], rdx; mov [rdi-4], ecx; ret;
0x00147218: mov [rdi-0xc], edx; mov [rdi-4], ecx; ret;
0x00147219: push rdi; hlt; mov [rdi-4], ecx; ret;
0x0014721a: hlt; mov [rdi-4], ecx; ret;
0x00147267: movdqu [rdi-0x2b], xmm0; lddqu xmm0, [rsi-0x1b]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x1b], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x00147268: movq [rdi-0x2b], mm0; lddqu xmm0, [rsi-0x1b]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x1b], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x0014726c: lddqu xmm0, [rsi-0x1b]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x1b], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x00147271: lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x1b], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x00147276: movdqu [rdi-0x1b], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x00147277: movq [rdi-0x1b], mm0; movdqu [rdi-0x10], xmm1; ret;
0x0014727a: in eax, 0xf3; movq [rdi-0x10], mm1; ret;
0x0014728c: nop [rax]; mov rdx, [rsi-0xb]; mov ecx, [rsi-4]; mov [rdi-0xb], rdx; mov [rdi-4], ecx; ret;
0x00147290: mov rdx, [rsi-0xb]; mov ecx, [rsi-4]; mov [rdi-0xb], rdx; mov [rdi-4], ecx; ret;
0x00147291: mov edx, [rsi-0xb]; mov ecx, [rsi-4]; mov [rdi-0xb], rdx; mov [rdi-4], ecx; ret;
0x00147292: push rsi; cmc; mov ecx, [rsi-4]; mov [rdi-0xb], rdx; mov [rdi-4], ecx; ret;
0x00147293: cmc; mov ecx, [rsi-4]; mov [rdi-0xb], rdx; mov [rdi-4], ecx; ret;
0x00147294: mov ecx, [rsi-4]; mov [rdi-0xb], rdx; mov [rdi-4], ecx; ret;
0x00147296: cld; mov [rdi-0xb], rdx; mov [rdi-4], ecx; ret;
0x00147297: mov [rdi-0xb], rdx; mov [rdi-4], ecx; ret;
0x00147298: mov [rdi-0xb], edx; mov [rdi-4], ecx; ret;
0x00147299: push rdi; cmc; mov [rdi-4], ecx; ret;
0x0014729a: cmc; mov [rdi-4], ecx; ret;
0x001472e7: movdqu [rdi-0x2a], xmm0; lddqu xmm0, [rsi-0x1a]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x1a], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x001472e8: movq [rdi-0x2a], mm0; lddqu xmm0, [rsi-0x1a]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x1a], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x001472ec: lddqu xmm0, [rsi-0x1a]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x1a], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x001472f1: lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x1a], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x001472f6: movdqu [rdi-0x1a], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x001472f7: movq [rdi-0x1a], mm0; movdqu [rdi-0x10], xmm1; ret;
0x001472fa: out 0xf3, al; movq [rdi-0x10], mm1; ret;
0x0014730c: nop [rax]; mov rdx, [rsi-0xa]; mov ecx, [rsi-4]; mov [rdi-0xa], rdx; mov [rdi-4], ecx; ret;
0x00147310: mov rdx, [rsi-0xa]; mov ecx, [rsi-4]; mov [rdi-0xa], rdx; mov [rdi-4], ecx; ret;
0x00147311: mov edx, [rsi-0xa]; mov ecx, [rsi-4]; mov [rdi-0xa], rdx; mov [rdi-4], ecx; ret;
0x00147314: mov ecx, [rsi-4]; mov [rdi-0xa], rdx; mov [rdi-4], ecx; ret;
0x00147316: cld; mov [rdi-0xa], rdx; mov [rdi-4], ecx; ret;
0x00147317: mov [rdi-0xa], rdx; mov [rdi-4], ecx; ret;
0x00147318: mov [rdi-0xa], edx; mov [rdi-4], ecx; ret;
0x00147367: movdqu [rdi-0x29], xmm0; lddqu xmm0, [rsi-0x19]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x19], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x00147368: movq [rdi-0x29], mm0; lddqu xmm0, [rsi-0x19]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x19], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x0014736b: xlat [rbx]; lddqu xmm0, [rsi-0x19]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x19], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x0014736c: lddqu xmm0, [rsi-0x19]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x19], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x00147371: lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x19], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x00147376: movdqu [rdi-0x19], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x00147377: movq [rdi-0x19], mm0; movdqu [rdi-0x10], xmm1; ret;
0x0014737a: out 0xf3, eax; movq [rdi-0x10], mm1; ret;
0x0014738c: nop [rax]; mov rdx, [rsi-9]; mov ecx, [rsi-4]; mov [rdi-9], rdx; mov [rdi-4], ecx; ret;
0x0014738f: add [rax-0x75], cl; push rsi; test dword ptr [rbx-0x76b703b2], 0x4f89f757; cld; ret;
0x00147390: mov rdx, [rsi-9]; mov ecx, [rsi-4]; mov [rdi-9], rdx; mov [rdi-4], ecx; ret;
0x00147391: mov edx, [rsi-9]; mov ecx, [rsi-4]; mov [rdi-9], rdx; mov [rdi-4], ecx; ret;
0x00147392: push rsi; test dword ptr [rbx-0x76b703b2], 0x4f89f757; cld; ret;
0x00147393: test dword ptr [rbx-0x76b703b2], 0x4f89f757; cld; ret;
0x00147394: mov ecx, [rsi-4]; mov [rdi-9], rdx; mov [rdi-4], ecx; ret;
0x00147396: cld; mov [rdi-9], rdx; mov [rdi-4], ecx; ret;
0x00147397: mov [rdi-9], rdx; mov [rdi-4], ecx; ret;
0x00147398: mov [rdi-9], edx; mov [rdi-4], ecx; ret;
0x001473e7: movdqu [rdi-0x28], xmm0; lddqu xmm0, [rsi-0x18]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x18], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x001473e8: movq [rdi-0x28], mm0; lddqu xmm0, [rsi-0x18]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x18], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x001473ec: lddqu xmm0, [rsi-0x18]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x18], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x001473f1: lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x18], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x001473f6: movdqu [rdi-0x18], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x001473f7: movq [rdi-0x18], mm0; movdqu [rdi-0x10], xmm1; ret;
0x00147402: nop [rax+rax]; nop [rax]; mov rdx, [rsi-8]; mov [rdi-8], rdx; ret;
0x00147403: nop [rax+rax]; nop [rax]; mov rdx, [rsi-8]; mov [rdi-8], rdx; ret;
0x00147404: nop [rax+rax]; nop [rax]; mov rdx, [rsi-8]; mov [rdi-8], rdx; ret;
0x00147408: add [rax], al; add [rax], al; nop [rax]; mov rdx, [rsi-8]; mov [rdi-8], rdx; ret;
0x0014740a: add [rax], al; nop [rax]; mov rdx, [rsi-8]; mov [rdi-8], rdx; ret;
0x0014740c: nop [rax]; mov rdx, [rsi-8]; mov [rdi-8], rdx; ret;
0x0014740f: add [rax-0x75], cl; push rsi; clc; mov [rdi-8], rdx; ret;
0x00147410: mov rdx, [rsi-8]; mov [rdi-8], rdx; ret;
0x00147411: mov edx, [rsi-8]; mov [rdi-8], rdx; ret;
0x00147412: push rsi; clc; mov [rdi-8], rdx; ret;
0x00147413: clc; mov [rdi-8], rdx; ret;
0x00147414: mov [rdi-8], rdx; ret;
0x00147415: mov [rdi-8], edx; ret;
0x00147416: push rdi; clc; ret;
0x00147467: movdqu [rdi-0x27], xmm0; lddqu xmm0, [rsi-0x17]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x17], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x00147468: movq [rdi-0x27], mm0; lddqu xmm0, [rsi-0x17]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x17], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x0014746c: lddqu xmm0, [rsi-0x17]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x17], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x00147471: lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x17], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x00147476: movdqu [rdi-0x17], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x00147477: movq [rdi-0x17], mm0; movdqu [rdi-0x10], xmm1; ret;
0x0014748c: nop [rax]; mov edx, [rsi-7]; mov ecx, [rsi-4]; mov [rdi-7], edx; mov [rdi-4], ecx; ret;
0x0014748f: add [rbx+0x4e8bf956], cl; cld; mov [rdi-7], edx; mov [rdi-4], ecx; ret;
0x00147490: mov edx, [rsi-7]; mov ecx, [rsi-4]; mov [rdi-7], edx; mov [rdi-4], ecx; ret;
0x00147491: push rsi; stc; mov ecx, [rsi-4]; mov [rdi-7], edx; mov [rdi-4], ecx; ret;
0x00147492: stc; mov ecx, [rsi-4]; mov [rdi-7], edx; mov [rdi-4], ecx; ret;
0x00147493: mov ecx, [rsi-4]; mov [rdi-7], edx; mov [rdi-4], ecx; ret;
0x00147495: cld; mov [rdi-7], edx; mov [rdi-4], ecx; ret;
0x00147496: mov [rdi-7], edx; mov [rdi-4], ecx; ret;
0x00147497: push rdi; stc; mov [rdi-4], ecx; ret;
0x00147498: stc; mov [rdi-4], ecx; ret;
0x001474e7: movdqu [rdi-0x26], xmm0; lddqu xmm0, [rsi-0x16]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x16], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x001474e8: movq [rdi-0x26], mm0; lddqu xmm0, [rsi-0x16]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x16], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x001474ec: lddqu xmm0, [rsi-0x16]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x16], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x001474f1: lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x16], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x001474f6: movdqu [rdi-0x16], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x001474f7: movq [rdi-0x16], mm0; movdqu [rdi-0x10], xmm1; ret;
0x0014750c: nop [rax]; mov edx, [rsi-6]; mov ecx, [rsi-4]; mov [rdi-6], edx; mov [rdi-4], ecx; ret;
0x0014750f: add [rbx+0x4e8bfa56], cl; cld; mov [rdi-6], edx; mov [rdi-4], ecx; ret;
0x00147510: mov edx, [rsi-6]; mov ecx, [rsi-4]; mov [rdi-6], edx; mov [rdi-4], ecx; ret;
0x00147511: push rsi; cli; mov ecx, [rsi-4]; mov [rdi-6], edx; mov [rdi-4], ecx; ret;
0x00147512: cli; mov ecx, [rsi-4]; mov [rdi-6], edx; mov [rdi-4], ecx; ret;
0x00147513: mov ecx, [rsi-4]; mov [rdi-6], edx; mov [rdi-4], ecx; ret;
0x00147515: cld; mov [rdi-6], edx; mov [rdi-4], ecx; ret;
0x00147516: mov [rdi-6], edx; mov [rdi-4], ecx; ret;
0x00147517: push rdi; cli; mov [rdi-4], ecx; ret;
0x00147518: cli; mov [rdi-4], ecx; ret;
0x00147567: movdqu [rdi-0x25], xmm0; lddqu xmm0, [rsi-0x15]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x15], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x00147568: movq [rdi-0x25], mm0; lddqu xmm0, [rsi-0x15]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x15], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x0014756c: lddqu xmm0, [rsi-0x15]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x15], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x00147571: lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x15], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x00147576: movdqu [rdi-0x15], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x00147577: movq [rdi-0x15], mm0; movdqu [rdi-0x10], xmm1; ret;
0x0014758c: nop [rax]; mov edx, [rsi-5]; mov ecx, [rsi-4]; mov [rdi-5], edx; mov [rdi-4], ecx; ret;
0x0014758f: add [rbx+0x4e8bfb56], cl; cld; mov [rdi-5], edx; mov [rdi-4], ecx; ret;
0x00147590: mov edx, [rsi-5]; mov ecx, [rsi-4]; mov [rdi-5], edx; mov [rdi-4], ecx; ret;
0x00147591: push rsi; sti; mov ecx, [rsi-4]; mov [rdi-5], edx; mov [rdi-4], ecx; ret;
0x00147592: sti; mov ecx, [rsi-4]; mov [rdi-5], edx; mov [rdi-4], ecx; ret;
0x00147593: mov ecx, [rsi-4]; mov [rdi-5], edx; mov [rdi-4], ecx; ret;
0x00147595: cld; mov [rdi-5], edx; mov [rdi-4], ecx; ret;
0x00147596: mov [rdi-5], edx; mov [rdi-4], ecx; ret;
0x00147597: push rdi; sti; mov [rdi-4], ecx; ret;
0x00147598: sti; mov [rdi-4], ecx; ret;
0x00147599: mov [rdi-4], ecx; ret;
0x001475e7: movdqu [rdi-0x24], xmm0; lddqu xmm0, [rsi-0x14]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x14], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x001475e8: movq [rdi-0x24], mm0; lddqu xmm0, [rsi-0x14]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x14], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x001475ec: lddqu xmm0, [rsi-0x14]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x14], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x001475f0: in al, dx; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x14], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x001475f1: lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x14], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x001475f6: movdqu [rdi-0x14], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x001475f7: movq [rdi-0x14], mm0; movdqu [rdi-0x10], xmm1; ret;
0x001475fa: in al, dx; movdqu [rdi-0x10], xmm1; ret;
0x00147602: nop [rax+rax]; nop [rax]; mov edx, [rsi-4]; mov [rdi-4], edx; ret;
0x00147603: nop [rax+rax]; nop [rax]; mov edx, [rsi-4]; mov [rdi-4], edx; ret;
0x00147604: nop [rax+rax]; nop [rax]; mov edx, [rsi-4]; mov [rdi-4], edx; ret;
0x00147608: add [rax], al; add [rax], al; nop [rax]; mov edx, [rsi-4]; mov [rdi-4], edx; ret;
0x0014760a: add [rax], al; nop [rax]; mov edx, [rsi-4]; mov [rdi-4], edx; ret;
0x0014760c: nop [rax]; mov edx, [rsi-4]; mov [rdi-4], edx; ret;
0x0014760f: add [rbx+0x5789fc56], cl; cld; ret;
0x00147610: mov edx, [rsi-4]; mov [rdi-4], edx; ret;
0x00147611: push rsi; cld; mov [rdi-4], edx; ret;
0x00147612: cld; mov [rdi-4], edx; ret;
0x00147613: mov [rdi-4], edx; ret;
0x00147614: push rdi; cld; ret;
0x00147667: movdqu [rdi-0x23], xmm0; lddqu xmm0, [rsi-0x13]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x13], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x00147668: movq [rdi-0x23], mm0; lddqu xmm0, [rsi-0x13]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x13], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x0014766c: lddqu xmm0, [rsi-0x13]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x13], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x00147670: in eax, dx; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x13], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x00147671: lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x13], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x00147676: movdqu [rdi-0x13], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x00147677: movq [rdi-0x13], mm0; movdqu [rdi-0x10], xmm1; ret;
0x0014767a: in eax, dx; movdqu [rdi-0x10], xmm1; ret;
0x0014768c: nop [rax]; mov dx, [rsi-3]; mov cx, [rsi-2]; mov [rdi-3], dx; mov [rdi-2], cx; ret;
0x00147690: mov dx, [rsi-3]; mov cx, [rsi-2]; mov [rdi-3], dx; mov [rdi-2], cx; ret;
0x00147691: mov edx, [rsi-3]; mov cx, [rsi-2]; mov [rdi-3], dx; mov [rdi-2], cx; ret;
0x00147692: push rsi; std; mov cx, [rsi-2]; mov [rdi-3], dx; mov [rdi-2], cx; ret;
0x00147693: std; mov cx, [rsi-2]; mov [rdi-3], dx; mov [rdi-2], cx; ret;
0x00147694: mov cx, [rsi-2]; mov [rdi-3], dx; mov [rdi-2], cx; ret;
0x00147695: mov ecx, [rsi-2]; mov [rdi-3], dx; mov [rdi-2], cx; ret;
0x00147698: mov [rdi-3], dx; mov [rdi-2], cx; ret;
0x00147699: mov [rdi-3], edx; mov [rdi-2], cx; ret;
0x0014769a: push rdi; std; mov [rdi-2], cx; ret;
0x0014769b: std; mov [rdi-2], cx; ret;
0x0014769c: mov [rdi-2], cx; ret;
0x0014769d: mov [rdi-2], ecx; ret;
0x001476f7: movdqu [rdi-0x22], xmm0; lddqu xmm0, [rsi-0x12]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x12], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x001476f8: movq [rdi-0x22], mm0; lddqu xmm0, [rsi-0x12]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x12], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x001476fc: lddqu xmm0, [rsi-0x12]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x12], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x00147700: out dx, al; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x12], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x00147701: lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x12], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x00147706: movdqu [rdi-0x12], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x00147707: movq [rdi-0x12], mm0; movdqu [rdi-0x10], xmm1; ret;
0x0014770a: out dx, al; movdqu [rdi-0x10], xmm1; ret;
0x00147712: nop [rax+rax]; nop [rax]; movzx edx, word ptr [rsi-2]; mov [rdi-2], dx; ret;
0x00147713: nop [rax+rax]; nop [rax]; movzx edx, word ptr [rsi-2]; mov [rdi-2], dx; ret;
0x00147714: nop [rax+rax]; nop [rax]; movzx edx, word ptr [rsi-2]; mov [rdi-2], dx; ret;
0x00147718: add [rax], al; add [rax], al; nop [rax]; movzx edx, word ptr [rsi-2]; mov [rdi-2], dx; ret;
0x0014771a: add [rax], al; nop [rax]; movzx edx, word ptr [rsi-2]; mov [rdi-2], dx; ret;
0x0014771c: nop [rax]; movzx edx, word ptr [rsi-2]; mov [rdi-2], dx; ret;
0x00147720: movzx edx, word ptr [rsi-2]; mov [rdi-2], dx; ret;
0x00147724: mov [rdi-2], dx; ret;
0x00147725: mov [rdi-2], edx; ret;
0x00147762: mov edi, 0x477f0ff3; mov edi, 0x46f00ff2; iretd;
0x00147766: mov r15d, 0x46f00ff2; iretd;
0x00147767: mov edi, 0x46f00ff2; iretd;
0x00147777: movdqu [rdi-0x21], xmm0; lddqu xmm0, [rsi-0x11]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x11], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x00147778: movq [rdi-0x21], mm0; lddqu xmm0, [rsi-0x11]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x11], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x0014777c: lddqu xmm0, [rsi-0x11]; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x11], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x00147780: out dx, eax; lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x11], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x00147781: lddqu xmm1, [rsi-0x10]; movdqu [rdi-0x11], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x00147786: movdqu [rdi-0x11], xmm0; movdqu [rdi-0x10], xmm1; ret;
0x00147787: movq [rdi-0x11], mm0; movdqu [rdi-0x10], xmm1; ret;
0x0014778a: out dx, eax; movdqu [rdi-0x10], xmm1; ret;
0x0014778b: movdqu [rdi-0x10], xmm1; ret;
0x0014778c: movq [rdi-0x10], mm1; ret;
0x00147792: nop [rax+rax]; nop [rax]; movzx edx, byte ptr [rsi-1]; mov [rdi-1], dl; ret;
0x00147793: nop [rax+rax]; nop [rax]; movzx edx, byte ptr [rsi-1]; mov [rdi-1], dl; ret;
0x00147794: nop [rax+rax]; nop [rax]; movzx edx, byte ptr [rsi-1]; mov [rdi-1], dl; ret;
0x00147798: add [rax], al; add [rax], al; nop [rax]; movzx edx, byte ptr [rsi-1]; mov [rdi-1], dl; ret;
0x0014779a: add [rax], al; nop [rax]; movzx edx, byte ptr [rsi-1]; mov [rdi-1], dl; ret;
0x0014779c: nop [rax]; movzx edx, byte ptr [rsi-1]; mov [rdi-1], dl; ret;
0x001477a0: movzx edx, byte ptr [rsi-1]; mov [rdi-1], dl; ret;
0x001477a4: mov [rdi-1], dl; ret;
0x001477e7: movdqu [rdi+0x20], xmm0; lddqu xmm0, [rsi+0x10]; movdqu [rdi+0x10], xmm0; lddqu xmm0, [rsi]; movdqu [rdi], xmm0; ret;
0x001477e8: movq [rdi+0x20], mm0; lddqu xmm0, [rsi+0x10]; movdqu [rdi+0x10], xmm0; lddqu xmm0, [rsi]; movdqu [rdi], xmm0; ret;
0x001477ec: lddqu xmm0, [rsi+0x10]; movdqu [rdi+0x10], xmm0; lddqu xmm0, [rsi]; movdqu [rdi], xmm0; ret;
0x001477ef: adc bl, r14b; movq [rdi+0x10], mm0; lddqu xmm0, [rsi]; movdqu [rdi], xmm0; ret;
0x001477f0: adc bl, dh; movq [rdi+0x10], mm0; lddqu xmm0, [rsi]; movdqu [rdi], xmm0; ret;
0x001477f1: movdqu [rdi+0x10], xmm0; lddqu xmm0, [rsi]; movdqu [rdi], xmm0; ret;
0x001477f2: movq [rdi+0x10], mm0; lddqu xmm0, [rsi]; movdqu [rdi], xmm0; ret;
0x001477f6: lddqu xmm0, [rsi]; movdqu [rdi], xmm0; ret;
0x001477fa: movdqu [rdi], xmm0; ret;
0x001477fb: movq [rdi], mm0; ret;
0x00147841: movdqu [rdi+0x1f], xmm0; lddqu xmm0, [rsi+0xf]; lddqu xmm1, [rsi]; movdqu [rdi+0xf], xmm0; movdqu [rdi], xmm1; ret;
0x00147842: movq [rdi+0x1f], mm0; lddqu xmm0, [rsi+0xf]; lddqu xmm1, [rsi]; movdqu [rdi+0xf], xmm0; movdqu [rdi], xmm1; ret;
0x00147846: lddqu xmm0, [rsi+0xf]; lddqu xmm1, [rsi]; movdqu [rdi+0xf], xmm0; movdqu [rdi], xmm1; ret;
0x0014784b: lddqu xmm1, [rsi]; movdqu [rdi+0xf], xmm0; movdqu [rdi], xmm1; ret;
0x0014784f: movdqu [rdi+0xf], xmm0; movdqu [rdi], xmm1; ret;
0x00147850: movq [rdi+0xf], mm0; movdqu [rdi], xmm1; ret;
0x00147859: nop [rax]; mov rdx, [rsi+7]; mov rcx, [rsi]; mov [rdi+7], rdx; mov [rdi], rcx; ret;
0x0014785e: add [rax], al; mov rdx, [rsi+7]; mov rcx, [rsi]; mov [rdi+7], rdx; mov [rdi], rcx; ret;
0x00147860: mov rdx, [rsi+7]; mov rcx, [rsi]; mov [rdi+7], rdx; mov [rdi], rcx; ret;
0x00147861: mov edx, [rsi+7]; mov rcx, [rsi]; mov [rdi+7], rdx; mov [rdi], rcx; ret;
0x00147864: mov rcx, [rsi]; mov [rdi+7], rdx; mov [rdi], rcx; ret;
0x00147865: mov ecx, [rsi]; mov [rdi+7], rdx; mov [rdi], rcx; ret;
0x00147867: mov [rdi+7], rdx; mov [rdi], rcx; ret;
0x00147868: mov [rdi+7], edx; mov [rdi], rcx; ret;
0x001478b1: movdqu [rdi+0x1e], xmm0; lddqu xmm0, [rsi+0xe]; lddqu xmm1, [rsi]; movdqu [rdi+0xe], xmm0; movdqu [rdi], xmm1; ret;
0x001478b2: movq [rdi+0x1e], mm0; lddqu xmm0, [rsi+0xe]; lddqu xmm1, [rsi]; movdqu [rdi+0xe], xmm0; movdqu [rdi], xmm1; ret;
0x001478b6: lddqu xmm0, [rsi+0xe]; lddqu xmm1, [rsi]; movdqu [rdi+0xe], xmm0; movdqu [rdi], xmm1; ret;
0x001478bb: lddqu xmm1, [rsi]; movdqu [rdi+0xe], xmm0; movdqu [rdi], xmm1; ret;
0x001478bf: movdqu [rdi+0xe], xmm0; movdqu [rdi], xmm1; ret;
0x001478c0: movq [rdi+0xe], mm0; movdqu [rdi], xmm1; ret;
0x001478c9: nop [rax]; mov rdx, [rsi+6]; mov rcx, [rsi]; mov [rdi+6], rdx; mov [rdi], rcx; ret;
0x001478ce: add [rax], al; mov rdx, [rsi+6]; mov rcx, [rsi]; mov [rdi+6], rdx; mov [rdi], rcx; ret;
0x001478d0: mov rdx, [rsi+6]; mov rcx, [rsi]; mov [rdi+6], rdx; mov [rdi], rcx; ret;
0x001478d1: mov edx, [rsi+6]; mov rcx, [rsi]; mov [rdi+6], rdx; mov [rdi], rcx; ret;
0x001478d4: mov rcx, [rsi]; mov [rdi+6], rdx; mov [rdi], rcx; ret;
0x001478d5: mov ecx, [rsi]; mov [rdi+6], rdx; mov [rdi], rcx; ret;
0x001478d7: mov [rdi+6], rdx; mov [rdi], rcx; ret;
0x001478d8: mov [rdi+6], edx; mov [rdi], rcx; ret;
0x00147920: sbb eax, 0x477f0ff3; sbb eax, 0x46f00ff2; or eax, 0xef00ff2; movdqu [rdi+0xd], xmm0; movdqu [rdi], xmm1; ret;
0x00147921: movdqu [rdi+0x1d], xmm0; lddqu xmm0, [rsi+0xd]; lddqu xmm1, [rsi]; movdqu [rdi+0xd], xmm0; movdqu [rdi], xmm1; ret;
0x00147922: movq [rdi+0x1d], mm0; lddqu xmm0, [rsi+0xd]; lddqu xmm1, [rsi]; movdqu [rdi+0xd], xmm0; movdqu [rdi], xmm1; ret;
0x00147925: sbb eax, 0x46f00ff2; or eax, 0xef00ff2; movdqu [rdi+0xd], xmm0; movdqu [rdi], xmm1; ret;
0x00147926: lddqu xmm0, [rsi+0xd]; lddqu xmm1, [rsi]; movdqu [rdi+0xd], xmm0; movdqu [rdi], xmm1; ret;
0x0014792a: or eax, 0xef00ff2; movdqu [rdi+0xd], xmm0; movdqu [rdi], xmm1; ret;
0x0014792b: lddqu xmm1, [rsi]; movdqu [rdi+0xd], xmm0; movdqu [rdi], xmm1; ret;
0x0014792f: movdqu [rdi+0xd], xmm0; movdqu [rdi], xmm1; ret;
0x00147930: movq [rdi+0xd], mm0; movdqu [rdi], xmm1; ret;
0x00147933: or eax, 0xf7f0ff3; ret;
0x00147939: nop [rax]; mov rdx, [rsi+5]; mov rcx, [rsi]; mov [rdi+5], rdx; mov [rdi], rcx; ret;
0x0014793e: add [rax], al; mov rdx, [rsi+5]; mov rcx, [rsi]; mov [rdi+5], rdx; mov [rdi], rcx; ret;
0x0014793f: add [rax-0x75], cl; push rsi; add eax, 0x480e8b48; mov [rdi+5], edx; mov [rdi], rcx; ret;
0x00147940: mov rdx, [rsi+5]; mov rcx, [rsi]; mov [rdi+5], rdx; mov [rdi], rcx; ret;
0x00147941: mov edx, [rsi+5]; mov rcx, [rsi]; mov [rdi+5], rdx; mov [rdi], rcx; ret;
0x00147942: push rsi; add eax, 0x480e8b48; mov [rdi+5], edx; mov [rdi], rcx; ret;
0x00147943: add eax, 0x480e8b48; mov [rdi+5], edx; mov [rdi], rcx; ret;
0x00147944: mov rcx, [rsi]; mov [rdi+5], rdx; mov [rdi], rcx; ret;
0x00147945: mov ecx, [rsi]; mov [rdi+5], rdx; mov [rdi], rcx; ret;
0x00147947: mov [rdi+5], rdx; mov [rdi], rcx; ret;
0x00147948: mov [rdi+5], edx; mov [rdi], rcx; ret;
0x00147991: movdqu [rdi+0x1c], xmm0; lddqu xmm0, [rsi+0xc]; lddqu xmm1, [rsi]; movdqu [rdi+0xc], xmm0; movdqu [rdi], xmm1; ret;
0x00147992: movq [rdi+0x1c], mm0; lddqu xmm0, [rsi+0xc]; lddqu xmm1, [rsi]; movdqu [rdi+0xc], xmm0; movdqu [rdi], xmm1; ret;
0x00147996: lddqu xmm0, [rsi+0xc]; lddqu xmm1, [rsi]; movdqu [rdi+0xc], xmm0; movdqu [rdi], xmm1; ret;
0x0014799b: lddqu xmm1, [rsi]; movdqu [rdi+0xc], xmm0; movdqu [rdi], xmm1; ret;
0x0014799f: movdqu [rdi+0xc], xmm0; movdqu [rdi], xmm1; ret;
0x001479a0: movq [rdi+0xc], mm0; movdqu [rdi], xmm1; ret;
0x001479a3: or al, 0xf3; movq [rdi], mm1; ret;
0x001479a9: nop [rax]; mov rdx, [rsi+4]; mov rcx, [rsi]; mov [rdi+4], rdx; mov [rdi], rcx; ret;
0x001479ae: add [rax], al; mov rdx, [rsi+4]; mov rcx, [rsi]; mov [rdi+4], rdx; mov [rdi], rcx; ret;
0x001479b0: mov rdx, [rsi+4]; mov rcx, [rsi]; mov [rdi+4], rdx; mov [rdi], rcx; ret;
0x001479b1: mov edx, [rsi+4]; mov rcx, [rsi]; mov [rdi+4], rdx; mov [rdi], rcx; ret;
0x001479b2: push rsi; add al, 0x48; mov ecx, [rsi]; mov [rdi+4], rdx; mov [rdi], rcx; ret;
0x001479b3: add al, 0x48; mov ecx, [rsi]; mov [rdi+4], rdx; mov [rdi], rcx; ret;
0x001479b4: mov rcx, [rsi]; mov [rdi+4], rdx; mov [rdi], rcx; ret;
0x001479b5: mov ecx, [rsi]; mov [rdi+4], rdx; mov [rdi], rcx; ret;
0x001479b7: mov [rdi+4], rdx; mov [rdi], rcx; ret;
0x001479b8: mov [rdi+4], edx; mov [rdi], rcx; ret;
0x001479b9: push rdi; add al, 0x48; mov [rdi], ecx; ret;
0x001479ba: add al, 0x48; mov [rdi], ecx; ret;
0x00147a01: movdqu [rdi+0x1b], xmm0; lddqu xmm0, [rsi+0xb]; lddqu xmm1, [rsi]; movdqu [rdi+0xb], xmm0; movdqu [rdi], xmm1; ret;
0x00147a02: movq [rdi+0x1b], mm0; lddqu xmm0, [rsi+0xb]; lddqu xmm1, [rsi]; movdqu [rdi+0xb], xmm0; movdqu [rdi], xmm1; ret;
0x00147a06: lddqu xmm0, [rsi+0xb]; lddqu xmm1, [rsi]; movdqu [rdi+0xb], xmm0; movdqu [rdi], xmm1; ret;
0x00147a0b: lddqu xmm1, [rsi]; movdqu [rdi+0xb], xmm0; movdqu [rdi], xmm1; ret;
0x00147a0f: movdqu [rdi+0xb], xmm0; movdqu [rdi], xmm1; ret;
0x00147a10: movq [rdi+0xb], mm0; movdqu [rdi], xmm1; ret;
0x00147a12: or r14d, r11d; movq [rdi], mm1; ret;
0x00147a13: or esi, ebx; movq [rdi], mm1; ret;
0x00147a19: nop [rax]; mov rdx, [rsi+3]; mov rcx, [rsi]; mov [rdi+3], rdx; mov [rdi], rcx; ret;
0x00147a1e: add [rax], al; mov rdx, [rsi+3]; mov rcx, [rsi]; mov [rdi+3], rdx; mov [rdi], rcx; ret;
0x00147a20: mov rdx, [rsi+3]; mov rcx, [rsi]; mov [rdi+3], rdx; mov [rdi], rcx; ret;
0x00147a21: mov edx, [rsi+3]; mov rcx, [rsi]; mov [rdi+3], rdx; mov [rdi], rcx; ret;
0x00147a24: mov rcx, [rsi]; mov [rdi+3], rdx; mov [rdi], rcx; ret;
0x00147a25: mov ecx, [rsi]; mov [rdi+3], rdx; mov [rdi], rcx; ret;
0x00147a27: mov [rdi+3], rdx; mov [rdi], rcx; ret;
0x00147a28: mov [rdi+3], edx; mov [rdi], rcx; ret;
0x00147a71: movdqu [rdi+0x1a], xmm0; lddqu xmm0, [rsi+0xa]; lddqu xmm1, [rsi]; movdqu [rdi+0xa], xmm0; movdqu [rdi], xmm1; ret;
0x00147a72: movq [rdi+0x1a], mm0; lddqu xmm0, [rsi+0xa]; lddqu xmm1, [rsi]; movdqu [rdi+0xa], xmm0; movdqu [rdi], xmm1; ret;
0x00147a76: lddqu xmm0, [rsi+0xa]; lddqu xmm1, [rsi]; movdqu [rdi+0xa], xmm0; movdqu [rdi], xmm1; ret;
0x00147a7b: lddqu xmm1, [rsi]; movdqu [rdi+0xa], xmm0; movdqu [rdi], xmm1; ret;
0x00147a7f: movdqu [rdi+0xa], xmm0; movdqu [rdi], xmm1; ret;
0x00147a80: movq [rdi+0xa], mm0; movdqu [rdi], xmm1; ret;
0x00147a82: or r14b, r11b; movq [rdi], mm1; ret;
0x00147a83: or dh, bl; movq [rdi], mm1; ret;
0x00147a89: nop [rax]; mov rdx, [rsi+2]; mov rcx, [rsi]; mov [rdi+2], rdx; mov [rdi], rcx; ret;
0x00147a8e: add [rax], al; mov rdx, [rsi+2]; mov rcx, [rsi]; mov [rdi+2], rdx; mov [rdi], rcx; ret;
0x00147a90: mov rdx, [rsi+2]; mov rcx, [rsi]; mov [rdi+2], rdx; mov [rdi], rcx; ret;
0x00147a91: mov edx, [rsi+2]; mov rcx, [rsi]; mov [rdi+2], rdx; mov [rdi], rcx; ret;
0x00147a94: mov rcx, [rsi]; mov [rdi+2], rdx; mov [rdi], rcx; ret;
0x00147a95: mov ecx, [rsi]; mov [rdi+2], rdx; mov [rdi], rcx; ret;
0x00147a97: mov [rdi+2], rdx; mov [rdi], rcx; ret;
0x00147a98: mov [rdi+2], edx; mov [rdi], rcx; ret;
0x00147ae1: movdqu [rdi+0x19], xmm0; lddqu xmm0, [rsi+9]; lddqu xmm1, [rsi]; movdqu [rdi+9], xmm0; movdqu [rdi], xmm1; ret;
0x00147ae2: movq [rdi+0x19], mm0; lddqu xmm0, [rsi+9]; lddqu xmm1, [rsi]; movdqu [rdi+9], xmm0; movdqu [rdi], xmm1; ret;
0x00147ae6: lddqu xmm0, [rsi+9]; lddqu xmm1, [rsi]; movdqu [rdi+9], xmm0; movdqu [rdi], xmm1; ret;
0x00147aeb: lddqu xmm1, [rsi]; movdqu [rdi+9], xmm0; movdqu [rdi], xmm1; ret;
0x00147aef: movdqu [rdi+9], xmm0; movdqu [rdi], xmm1; ret;
0x00147af0: movq [rdi+9], mm0; movdqu [rdi], xmm1; ret;
0x00147af2: or r11d, r14d; movq [rdi], mm1; ret;
0x00147af3: or ebx, esi; movq [rdi], mm1; ret;
0x00147af9: nop [rax]; mov rdx, [rsi+1]; mov rcx, [rsi]; mov [rdi+1], rdx; mov [rdi], rcx; ret;
0x00147afe: add [rax], al; mov rdx, [rsi+1]; mov rcx, [rsi]; mov [rdi+1], rdx; mov [rdi], rcx; ret;
0x00147b00: mov rdx, [rsi+1]; mov rcx, [rsi]; mov [rdi+1], rdx; mov [rdi], rcx; ret;
0x00147b01: mov edx, [rsi+1]; mov rcx, [rsi]; mov [rdi+1], rdx; mov [rdi], rcx; ret;
0x00147b04: mov rcx, [rsi]; mov [rdi+1], rdx; mov [rdi], rcx; ret;
0x00147b05: mov ecx, [rsi]; mov [rdi+1], rdx; mov [rdi], rcx; ret;
0x00147b07: mov [rdi+1], rdx; mov [rdi], rcx; ret;
0x00147b08: mov [rdi+1], edx; mov [rdi], rcx; ret;
0x00147b0b: mov [rdi], rcx; ret;
0x00147b51: movdqu [rdi+0x18], xmm0; lddqu xmm0, [rsi+8]; lddqu xmm1, [rsi]; movdqu [rdi+8], xmm0; movdqu [rdi], xmm1; ret;
0x00147b52: movq [rdi+0x18], mm0; lddqu xmm0, [rsi+8]; lddqu xmm1, [rsi]; movdqu [rdi+8], xmm0; movdqu [rdi], xmm1; ret;
0x00147b56: lddqu xmm0, [rsi+8]; lddqu xmm1, [rsi]; movdqu [rdi+8], xmm0; movdqu [rdi], xmm1; ret;
0x00147b5b: lddqu xmm1, [rsi]; movdqu [rdi+8], xmm0; movdqu [rdi], xmm1; ret;
0x00147b5f: movdqu [rdi+8], xmm0; movdqu [rdi], xmm1; ret;
0x00147b60: movq [rdi+8], mm0; movdqu [rdi], xmm1; ret;
0x00147b62: or r11b, r14b; movq [rdi], mm1; ret;
0x00147b63: or bl, dh; movq [rdi], mm1; ret;
0x00147b69: nop [rax]; mov rdx, [rsi]; mov [rdi], rdx; ret;
0x00147b6b: add byte ptr [rax], 0; add [rax], al; mov rdx, [rsi]; mov [rdi], rdx; ret;
0x00147b6c: add [rax], al; add [rax], al; mov rdx, [rsi]; mov [rdi], rdx; ret;
0x00147b6e: add [rax], al; mov rdx, [rsi]; mov [rdi], rdx; ret;
0x00147b70: mov rdx, [rsi]; mov [rdi], rdx; ret;
0x00147b71: mov edx, [rsi]; mov [rdi], rdx; ret;
0x00147b73: mov [rdi], rdx; ret;
0x00147bc1: movdqu [rdi+0x17], xmm0; lddqu xmm0, [rsi+7]; lddqu xmm1, [rsi]; movdqu [rdi+7], xmm0; movdqu [rdi], xmm1; ret;
0x00147bc2: movq [rdi+0x17], mm0; lddqu xmm0, [rsi+7]; lddqu xmm1, [rsi]; movdqu [rdi+7], xmm0; movdqu [rdi], xmm1; ret;
0x00147bc6: lddqu xmm0, [rsi+7]; lddqu xmm1, [rsi]; movdqu [rdi+7], xmm0; movdqu [rdi], xmm1; ret;
0x00147bcb: lddqu xmm1, [rsi]; movdqu [rdi+7], xmm0; movdqu [rdi], xmm1; ret;
0x00147bcf: movdqu [rdi+7], xmm0; movdqu [rdi], xmm1; ret;
0x00147bd0: movq [rdi+7], mm0; movdqu [rdi], xmm1; ret;
0x00147bd9: nop [rax]; mov edx, [rsi+3]; mov ecx, [rsi]; mov [rdi+3], edx; mov [rdi], ecx; ret;
0x00147bdd: add [rax], al; add [rbx+0xe8b0356], cl; mov [rdi+3], edx; mov [rdi], ecx; ret;
0x00147bde: add [rax], al; mov edx, [rsi+3]; mov ecx, [rsi]; mov [rdi+3], edx; mov [rdi], ecx; ret;
0x00147bdf: add [rbx+0xe8b0356], cl; mov [rdi+3], edx; mov [rdi], ecx; ret;
0x00147be0: mov edx, [rsi+3]; mov ecx, [rsi]; mov [rdi+3], edx; mov [rdi], ecx; ret;
0x00147be1: push rsi; add ecx, [rbx+0x357890e]; mov [rdi], ecx; ret;
0x00147be2: add ecx, [rbx+0x357890e]; mov [rdi], ecx; ret;
0x00147be3: mov ecx, [rsi]; mov [rdi+3], edx; mov [rdi], ecx; ret;
0x00147be5: mov [rdi+3], edx; mov [rdi], ecx; ret;
0x00147c31: movdqu [rdi+0x16], xmm0; lddqu xmm0, [rsi+6]; lddqu xmm1, [rsi]; movdqu [rdi+6], xmm0; movdqu [rdi], xmm1; ret;
0x00147c32: movq [rdi+0x16], mm0; lddqu xmm0, [rsi+6]; lddqu xmm1, [rsi]; movdqu [rdi+6], xmm0; movdqu [rdi], xmm1; ret;
0x00147c36: lddqu xmm0, [rsi+6]; lddqu xmm1, [rsi]; movdqu [rdi+6], xmm0; movdqu [rdi], xmm1; ret;
0x00147c3b: lddqu xmm1, [rsi]; movdqu [rdi+6], xmm0; movdqu [rdi], xmm1; ret;
0x00147c3f: movdqu [rdi+6], xmm0; movdqu [rdi], xmm1; ret;
0x00147c40: movq [rdi+6], mm0; movdqu [rdi], xmm1; ret;
0x00147c49: nop [rax]; mov edx, [rsi+2]; mov ecx, [rsi]; mov [rdi+2], edx; mov [rdi], ecx; ret;
0x00147c4d: add [rax], al; add [rbx+0xe8b0256], cl; mov [rdi+2], edx; mov [rdi], ecx; ret;
0x00147c4e: add [rax], al; mov edx, [rsi+2]; mov ecx, [rsi]; mov [rdi+2], edx; mov [rdi], ecx; ret;
0x00147c4f: add [rbx+0xe8b0256], cl; mov [rdi+2], edx; mov [rdi], ecx; ret;
0x00147c50: mov edx, [rsi+2]; mov ecx, [rsi]; mov [rdi+2], edx; mov [rdi], ecx; ret;
0x00147c51: push rsi; add cl, [rbx+0x257890e]; mov [rdi], ecx; ret;
0x00147c52: add cl, [rbx+0x257890e]; mov [rdi], ecx; ret;
0x00147c53: mov ecx, [rsi]; mov [rdi+2], edx; mov [rdi], ecx; ret;
0x00147c55: mov [rdi+2], edx; mov [rdi], ecx; ret;
0x00147ca0: adc eax, 0x477f0ff3; adc eax, 0x46f00ff2; add eax, 0xef00ff2; movdqu [rdi+5], xmm0; movdqu [rdi], xmm1; ret;
0x00147ca1: movdqu [rdi+0x15], xmm0; lddqu xmm0, [rsi+5]; lddqu xmm1, [rsi]; movdqu [rdi+5], xmm0; movdqu [rdi], xmm1; ret;
0x00147ca2: movq [rdi+0x15], mm0; lddqu xmm0, [rsi+5]; lddqu xmm1, [rsi]; movdqu [rdi+5], xmm0; movdqu [rdi], xmm1; ret;
0x00147ca5: adc eax, 0x46f00ff2; add eax, 0xef00ff2; movdqu [rdi+5], xmm0; movdqu [rdi], xmm1; ret;
0x00147ca6: lddqu xmm0, [rsi+5]; lddqu xmm1, [rsi]; movdqu [rdi+5], xmm0; movdqu [rdi], xmm1; ret;
0x00147caa: add eax, 0xef00ff2; movdqu [rdi+5], xmm0; movdqu [rdi], xmm1; ret;
0x00147cab: lddqu xmm1, [rsi]; movdqu [rdi+5], xmm0; movdqu [rdi], xmm1; ret;
0x00147caf: movdqu [rdi+5], xmm0; movdqu [rdi], xmm1; ret;
0x00147cb0: movq [rdi+5], mm0; movdqu [rdi], xmm1; ret;
0x00147cb3: add eax, 0xf7f0ff3; ret;
0x00147cb9: nop [rax]; mov edx, [rsi+1]; mov ecx, [rsi]; mov [rdi+1], edx; mov [rdi], ecx; ret;
0x00147cbd: add [rax], al; add [rbx+0xe8b0156], cl; mov [rdi+1], edx; mov [rdi], ecx; ret;
0x00147cbe: add [rax], al; mov edx, [rsi+1]; mov ecx, [rsi]; mov [rdi+1], edx; mov [rdi], ecx; ret;
0x00147cbf: add [rbx+0xe8b0156], cl; mov [rdi+1], edx; mov [rdi], ecx; ret;
0x00147cc0: mov edx, [rsi+1]; mov ecx, [rsi]; mov [rdi+1], edx; mov [rdi], ecx; ret;
0x00147cc1: push rsi; add [rbx+0x157890e], ecx; mov [rdi], ecx; ret;
0x00147cc2: add [rbx+0x157890e], ecx; mov [rdi], ecx; ret;
0x00147cc3: mov ecx, [rsi]; mov [rdi+1], edx; mov [rdi], ecx; ret;
0x00147cc5: mov [rdi+1], edx; mov [rdi], ecx; ret;
0x00147d11: movdqu [rdi+0x14], xmm0; lddqu xmm0, [rsi+4]; lddqu xmm1, [rsi]; movdqu [rdi+4], xmm0; movdqu [rdi], xmm1; ret;
0x00147d12: movq [rdi+0x14], mm0; lddqu xmm0, [rsi+4]; lddqu xmm1, [rsi]; movdqu [rdi+4], xmm0; movdqu [rdi], xmm1; ret;
0x00147d16: lddqu xmm0, [rsi+4]; lddqu xmm1, [rsi]; movdqu [rdi+4], xmm0; movdqu [rdi], xmm1; ret;
0x00147d1b: lddqu xmm1, [rsi]; movdqu [rdi+4], xmm0; movdqu [rdi], xmm1; ret;
0x00147d1f: movdqu [rdi+4], xmm0; movdqu [rdi], xmm1; ret;
0x00147d20: movq [rdi+4], mm0; movdqu [rdi], xmm1; ret;
0x00147d23: add al, 0xf3; movq [rdi], mm1; ret;
0x00147d29: nop [rax]; mov edx, [rsi]; mov [rdi], edx; ret;
0x00147d2b: add byte ptr [rax], 0; add [rax], al; mov edx, [rsi]; mov [rdi], edx; ret;
0x00147d2c: add [rax], al; add [rax], al; mov edx, [rsi]; mov [rdi], edx; ret;
0x00147d2e: add [rax], al; mov edx, [rsi]; mov [rdi], edx; ret;
0x00147d30: mov edx, [rsi]; mov [rdi], edx; ret;
0x00147d81: movdqu [rdi+0x13], xmm0; lddqu xmm0, [rsi+3]; lddqu xmm1, [rsi]; movdqu [rdi+3], xmm0; movdqu [rdi], xmm1; ret;
0x00147d82: movq [rdi+0x13], mm0; lddqu xmm0, [rsi+3]; lddqu xmm1, [rsi]; movdqu [rdi+3], xmm0; movdqu [rdi], xmm1; ret;
0x00147d86: lddqu xmm0, [rsi+3]; lddqu xmm1, [rsi]; movdqu [rdi+3], xmm0; movdqu [rdi], xmm1; ret;
0x00147d8b: lddqu xmm1, [rsi]; movdqu [rdi+3], xmm0; movdqu [rdi], xmm1; ret;
0x00147d8f: movdqu [rdi+3], xmm0; movdqu [rdi], xmm1; ret;
0x00147d90: movq [rdi+3], mm0; movdqu [rdi], xmm1; ret;
0x00147d92: add r14d, r11d; movq [rdi], mm1; ret;
0x00147d93: add esi, ebx; movq [rdi], mm1; ret;
0x00147d99: nop [rax]; mov dx, [rsi+1]; mov cx, [rsi]; mov [rdi+1], dx; mov [rdi], cx; ret;
0x00147d9e: add [rax], al; mov dx, [rsi+1]; mov cx, [rsi]; mov [rdi+1], dx; mov [rdi], cx; ret;
0x00147da0: mov dx, [rsi+1]; mov cx, [rsi]; mov [rdi+1], dx; mov [rdi], cx; ret;
0x00147da1: mov edx, [rsi+1]; mov cx, [rsi]; mov [rdi+1], dx; mov [rdi], cx; ret;
0x00147da4: mov cx, [rsi]; mov [rdi+1], dx; mov [rdi], cx; ret;
0x00147da5: mov ecx, [rsi]; mov [rdi+1], dx; mov [rdi], cx; ret;
0x00147da7: mov [rdi+1], dx; mov [rdi], cx; ret;
0x00147da8: mov [rdi+1], edx; mov [rdi], cx; ret;
0x00147dab: mov [rdi], cx; ret;
0x00147dac: mov [rdi], ecx; ret;
0x00147df1: movdqu [rdi+0x12], xmm0; lddqu xmm0, [rsi+2]; lddqu xmm1, [rsi]; movdqu [rdi+2], xmm0; movdqu [rdi], xmm1; ret;
0x00147df2: movq [rdi+0x12], mm0; lddqu xmm0, [rsi+2]; lddqu xmm1, [rsi]; movdqu [rdi+2], xmm0; movdqu [rdi], xmm1; ret;
0x00147df6: lddqu xmm0, [rsi+2]; lddqu xmm1, [rsi]; movdqu [rdi+2], xmm0; movdqu [rdi], xmm1; ret;
0x00147dfb: lddqu xmm1, [rsi]; movdqu [rdi+2], xmm0; movdqu [rdi], xmm1; ret;
0x00147dff: movdqu [rdi+2], xmm0; movdqu [rdi], xmm1; ret;
0x00147e00: movq [rdi+2], mm0; movdqu [rdi], xmm1; ret;
0x00147e02: add r14b, r11b; movq [rdi], mm1; ret;
0x00147e03: add dh, bl; movq [rdi], mm1; ret;
0x00147e09: nop [rax]; movzx edx, word ptr [rsi]; mov [rdi], dx; ret;
0x00147e0b: add byte ptr [rax], 0; add [rax], al; movzx edx, word ptr [rsi]; mov [rdi], dx; ret;
0x00147e0c: add [rax], al; add [rax], al; movzx edx, word ptr [rsi]; mov [rdi], dx; ret;
0x00147e0d: add [rax], al; add [rdi], cl; mov bh, 0x16; mov [rdi], dx; ret;
0x00147e0e: add [rax], al; movzx edx, word ptr [rsi]; mov [rdi], dx; ret;
0x00147e0f: add [rdi], cl; mov bh, 0x16; mov [rdi], dx; ret;
0x00147e10: movzx edx, word ptr [rsi]; mov [rdi], dx; ret;
0x00147e11: mov bh, 0x16; mov [rdi], dx; ret;
0x00147e13: mov [rdi], dx; ret;
0x00147e14: mov [rdi], edx; ret;
0x00147e61: movdqu [rdi+0x11], xmm0; lddqu xmm0, [rsi+1]; lddqu xmm1, [rsi]; movdqu [rdi+1], xmm0; movdqu [rdi], xmm1; ret;
0x00147e62: movq [rdi+0x11], mm0; lddqu xmm0, [rsi+1]; lddqu xmm1, [rsi]; movdqu [rdi+1], xmm0; movdqu [rdi], xmm1; ret;
0x00147e66: lddqu xmm0, [rsi+1]; lddqu xmm1, [rsi]; movdqu [rdi+1], xmm0; movdqu [rdi], xmm1; ret;
0x00147e6b: lddqu xmm1, [rsi]; movdqu [rdi+1], xmm0; movdqu [rdi], xmm1; ret;
0x00147e6f: movdqu [rdi+1], xmm0; movdqu [rdi], xmm1; ret;
0x00147e70: movq [rdi+1], mm0; movdqu [rdi], xmm1; ret;
0x00147e72: add r11d, r14d; movq [rdi], mm1; ret;
0x00147e73: add ebx, esi; movq [rdi], mm1; ret;
0x00147e74: movdqu [rdi], xmm1; ret;
0x00147e75: movq [rdi], mm1; ret;
0x00147e79: nop [rax]; movzx edx, byte ptr [rsi]; mov [rdi], dl; ret;
0x00147e7b: add byte ptr [rax], 0; add [rax], al; movzx edx, byte ptr [rsi]; mov [rdi], dl; ret;
0x00147e7c: add [rax], al; add [rax], al; movzx edx, byte ptr [rsi]; mov [rdi], dl; ret;
0x00147e7d: add [rax], al; add [rdi], cl; mov dh, 0x16; mov [rdi], dl; ret;
0x00147e7e: add [rax], al; movzx edx, byte ptr [rsi]; mov [rdi], dl; ret;
0x00147e7f: add [rdi], cl; mov dh, 0x16; mov [rdi], dl; ret;
0x00147e80: movzx edx, byte ptr [rsi]; mov [rdi], dl; ret;
0x00147e81: mov dh, 0x16; mov [rdi], dl; ret;
0x00147e83: mov [rdi], dl; ret;
0x00147f92: test dword ptr [rbp+rcx*4+0x48], 0xc929490f; lea r10, [rip+0x3cedf]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x00147f93: lea r9, [rax+0xf]; sub r9, rcx; lea r10, [rip+0x3cedf]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x00147f94: lea ecx, [rax+0xf]; sub r9, rcx; lea r10, [rip+0x3cedf]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x00147f95: cmovns rbp, [rcx]; leave; lea r10, [rip+0x3cedf]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x00147f96: cmovns ebp, [rcx]; leave; lea r10, [rip+0x3cedf]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x00147f97: sub r9, rcx; lea r10, [rip+0x3cedf]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x00147f98: sub ecx, ecx; lea r10, [rip+0x3cedf]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x00147f99: leave; lea r10, [rip+0x3cedf]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x00147f9a: lea r10, [rip+0x3cedf]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x00147f9b: lea edx, [rip+0x3cedf]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x00147f9c: adc eax, 0x3cedf; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x00147f9d: fxch st, st(6); add eax, [rax]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x00149fae: adc eax, 0x2750d; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret;
0x00149faf: or eax, 0x8b000275; or al, 0x8a; mov eax, [rdx+rax*4]; sub eax, ecx; ret;
0x00149fc8: adc eax, 0x274f3; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret;
0x0014a102: test dword ptr [rbp+rcx*4+0x48], 0xc929490f; lea r10, [rip+0x3adef]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0014a103: lea r9, [rax+0xf]; sub r9, rcx; lea r10, [rip+0x3adef]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0014a104: lea ecx, [rax+0xf]; sub r9, rcx; lea r10, [rip+0x3adef]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0014a105: cmovns rbp, [rcx]; leave; lea r10, [rip+0x3adef]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0014a106: cmovns ebp, [rcx]; leave; lea r10, [rip+0x3adef]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0014a107: sub r9, rcx; lea r10, [rip+0x3adef]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0014a108: sub ecx, ecx; lea r10, [rip+0x3adef]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0014a109: leave; lea r10, [rip+0x3adef]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0014a10a: lea r10, [rip+0x3adef]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0014a10b: lea edx, [rip+0x3adef]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0014a10c: adc eax, 0x3adef; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0014a10d: out dx, eax; lodsd [rsi]; add eax, [rax]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0014a10e: lodsd [rsi]; add eax, [rax]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0014a10f: add eax, [rax]; movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0014a110: add [rdi+0x63], cl; or al, 0x8a; lea r10, [r10+r9]; jmp r10;
0x0014a111: movsxd r9, [r10+r9*4]; lea r10, [r10+r9]; jmp r10;
0x0014a112: movsxd ecx, [rdx+rcx*4]; lea r10, [r10+r9]; jmp r10;
0x0014a113: or al, 0x8a; lea r10, [r10+r9]; jmp r10;
0x0014a114: mov cl, [rdi-0x73]; adc al, 0xa; jmp r10;
0x0014a4b6: xlat [rbx]; shl bh, 1; ret 0xfffe;
0x0014a4b7: shl bh, 1; ret 0xfffe;
0x0014a6f6: xlat [rbx]; shl bh, 1; ret 0xfffc;
0x0014a6f7: shl bh, 1; ret 0xfffc;
0x0014a6f9: ret 0xfffc;
0x0014a936: xlat [rbx]; shl bh, 1; ret 0xfff8;
0x0014a937: shl bh, 1; ret 0xfff8;
0x0014a939: ret 0xfff8;
0x0014ab76: xlat [rbx]; shl bh, 1; ret 0xfff0;
0x0014ab77: shl bh, 1; ret 0xfff0;
0x0014ab79: ret 0xfff0;
0x0014adb6: xlat [rbx]; shl bh, 1; ret 0xffe0;
0x0014adb7: shl bh, 1; ret 0xffe0;
0x0014adb9: ret 0xffe0;
0x0014aff6: xlat [rbx]; shl bh, 1; ret 0xffc0;
0x0014aff7: shl bh, 1; ret 0xffc0;
0x0014aff9: ret 0xffc0;
0x0014b236: xlat [rbx]; shl bh, 1; ret 0xff80;
0x0014b237: shl bh, 1; ret 0xff80;
0x0014b239: ret 0xff80;
0x0014b476: xlat [rbx]; shl bh, 1; ret 0xff00;
0x0014b477: shl bh, 1; ret 0xff00;
0x0014b479: ret 0xff00;
0x0014b6b6: xlat [rbx]; shl bh, 1; ret 0xfe00;
0x0014b6b7: shl bh, 1; ret 0xfe00;
0x0014b6b9: ret 0xfe00;
0x0014b8f6: xlat [rbx]; shl bh, 1; ret 0xfc00;
0x0014b8f7: shl bh, 1; ret 0xfc00;
0x0014b8f9: ret 0xfc00;
0x0014bb36: xlat [rbx]; shl bh, 1; ret 0xf800;
0x0014bb37: shl bh, 1; ret 0xf800;
0x0014bb39: ret 0xf800;
0x0014bd76: xlat [rbx]; shl bh, 1; ret 0xf000;
0x0014bd77: shl bh, 1; ret 0xf000;
0x0014bd79: ret 0xf000;
0x0014bfb6: xlat [rbx]; shl bh, 1; ret 0xe000;
0x0014bfb7: shl bh, 1; ret 0xe000;
0x0014bfb9: ret 0xe000;
0x0014c1f6: xlat [rbx]; shl bh, 1; ret 0xc000;
0x0014c1f7: shl bh, 1; ret 0xc000;
0x0014c1f9: ret 0xc000;
0x0014c38d: adc [rsi+0xf], ah; outsd dx, [rsi]; fmul st, qword ptr [rcx-0x7d]; ret 0xf10;
0x0014c390: outsd dx, [rsi]; fmul st, qword ptr [rcx-0x7d]; ret 0xf10;
0x0014c391: fmul st, qword ptr [rcx-0x7d]; ret 0xf10;
0x0014c436: xlat [rbx]; shl bh, 1; ret 0x8000;
0x0014c437: shl bh, 1; ret 0x8000;
0x0014c439: ret 0x8000;
0x0014c503: adc eax, 0x24fb8; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret;
0x0014c504: mov eax, 0x8b00024f; or al, 0x8a; mov eax, [rdx+rax*4]; sub eax, ecx; ret;
0x0014c528: adc eax, 0x24f93; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret;
0x0014c529: xchg ebx, eax; add r8b, [r8]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret;
0x0014c52a: add r8b, [r8]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret;
0x0014c52b: add al, [rax]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret;
0x0014db63: nop [rax+rax]; nop [rax]; mov rax, [rcx]; mov [rdx], rax; mov rax, rdi; ret;
0x0014db64: nop [rax+rax]; nop [rax]; mov rax, [rcx]; mov [rdx], rax; mov rax, rdi; ret;
0x0014db65: nop [rax+rax]; nop [rax]; mov rax, [rcx]; mov [rdx], rax; mov rax, rdi; ret;
0x0014db6b: add [rax], al; nop [rax]; mov rax, [rcx]; mov [rdx], rax; mov rax, rdi; ret;
0x0014db6d: nop [rax]; mov rax, [rcx]; mov [rdx], rax; mov rax, rdi; ret;
0x0014dbbe: add [rax+0x48018b48], dl; mov [rdx], eax; mov rax, [rcx+8]; mov [rdx+8], rax; mov rax, rdi; ret;
0x0014dbd3: nop [rax+rax]; nop [rax]; mov al, [rcx]; mov [rdx], al; mov rax, rdi; ret;
0x0014dbd4: nop [rax+rax]; nop [rax]; mov al, [rcx]; mov [rdx], al; mov rax, rdi; ret;
0x0014dbd5: nop [rax+rax]; nop [rax]; mov al, [rcx]; mov [rdx], al; mov rax, rdi; ret;
0x0014dbdb: add [rax], al; nop [rax]; mov al, [rcx]; mov [rdx], al; mov rax, rdi; ret;
0x0014dbdd: nop [rax]; mov al, [rcx]; mov [rdx], al; mov rax, rdi; ret;
0x0014dbdf: add [rdx+0x48028801], cl; mov eax, edi; ret;
0x0014dbe0: mov al, [rcx]; mov [rdx], al; mov rax, rdi; ret;
0x0014dbe1: add [rax-0x776b7fe], ecx; ret;
0x0014dbe2: mov [rdx], al; mov rax, rdi; ret;
0x0014dbe8: nop [rax+rax]; mov ax, [rcx]; mov [rdx], ax; mov rax, rdi; ret;
0x0014dbec: add [rax], al; add [rax], al; mov ax, [rcx]; mov [rdx], ax; mov rax, rdi; ret;
0x0014dbed: add [rax], al; add [rsi-0x75], ah; add [rsi-0x77], esp; add cl, [rax-0x77]; clc; ret;
0x0014dbee: add [rax], al; mov ax, [rcx]; mov [rdx], ax; mov rax, rdi; ret;
0x0014dbef: add [rsi-0x75], ah; add [rsi-0x77], esp; add cl, [rax-0x77]; clc; ret;
0x0014dbf0: mov ax, [rcx]; mov [rdx], ax; mov rax, rdi; ret;
0x0014dbf1: mov eax, [rcx]; mov [rdx], ax; mov rax, rdi; ret;
0x0014dbf2: add [rsi-0x77], esp; add cl, [rax-0x77]; clc; ret;
0x0014dbf3: mov [rdx], ax; mov rax, rdi; ret;
0x0014dbff: add [rsi-0x75], ah; add [rsi-0x77], esp; add cl, [rdx+0x42880241]; add cl, [rax-0x77]; clc; ret;
0x0014dc00: mov ax, [rcx]; mov [rdx], ax; mov al, [rcx+2]; mov [rdx+2], al; mov rax, rdi; ret;
0x0014dc01: mov eax, [rcx]; mov [rdx], ax; mov al, [rcx+2]; mov [rdx+2], al; mov rax, rdi; ret;
0x0014dc02: add [rsi-0x77], esp; add cl, [rdx+0x42880241]; add cl, [rax-0x77]; clc; ret;
0x0014dc03: mov [rdx], ax; mov al, [rcx+2]; mov [rdx+2], al; mov rax, rdi; ret;
0x0014dc04: mov [rdx], eax; mov al, [rcx+2]; mov [rdx+2], al; mov rax, rdi; ret;
0x0014dc05: add cl, [rdx+0x42880241]; add cl, [rax-0x77]; clc; ret;
0x0014dc06: mov al, [rcx+2]; mov [rdx+2], al; mov rax, rdi; ret;
0x0014dc07: add cl, [r8-0x76b7fdbe]; clc; ret;
0x0014dc08: add cl, [rax-0x76b7fdbe]; clc; ret;
0x0014dc09: mov [rdx+2], al; mov rax, rdi; ret;
0x0014dc1d: add [rax], al; add [rbx-0x75fd76ff], cl; add al, 0x88; add al, 0x48; mov eax, edi; ret;
0x0014dc1f: add [rbx-0x75fd76ff], cl; add al, 0x88; add al, 0x48; mov eax, edi; ret;
0x0014dc20: mov eax, [rcx]; mov [rdx], eax; mov al, [rcx+4]; mov [rdx+4], al; mov rax, rdi; ret;
0x0014dc21: add [rcx+0x4418a02], ecx; mov [rdx+4], al; mov rax, rdi; ret;
0x0014dc22: mov [rdx], eax; mov al, [rcx+4]; mov [rdx+4], al; mov rax, rdi; ret;
0x0014dc23: add cl, [rdx+0x42880441]; add al, 0x48; mov eax, edi; ret;
0x0014dc24: mov al, [rcx+4]; mov [rdx+4], al; mov rax, rdi; ret;
0x0014dc26: add al, 0x88; add al, 0x48; mov eax, edi; ret;
0x0014dc27: mov [rdx+4], al; mov rax, rdi; ret;
0x0014dc30: mov eax, [rcx]; mov [rdx], eax; mov ax, [rcx+4]; mov [rdx+4], ax; mov rax, rdi; ret;
0x0014dc31: add [rcx+0x418b6602], ecx; add al, 0x66; mov [rdx+4], eax; mov rax, rdi; ret;
0x0014dc32: mov [rdx], eax; mov ax, [rcx+4]; mov [rdx+4], ax; mov rax, rdi; ret;
0x0014dc33: add ah, [rsi-0x75]; add al, 0x66; mov [rdx+4], eax; mov rax, rdi; ret;
0x0014dc34: mov ax, [rcx+4]; mov [rdx+4], ax; mov rax, rdi; ret;
0x0014dc35: mov eax, [rcx+4]; mov [rdx+4], ax; mov rax, rdi; ret;
0x0014dc37: add al, 0x66; mov [rdx+4], eax; mov rax, rdi; ret;
0x0014dc38: mov [rdx+4], ax; mov rax, rdi; ret;
0x0014dc39: mov [rdx+4], eax; mov rax, rdi; ret;
0x0014dc3b: add al, 0x48; mov eax, edi; ret;
0x0014dc40: mov eax, [rcx]; mov [rdx], eax; mov eax, [rcx+3]; mov [rdx+3], eax; mov rax, rdi; ret;
0x0014dc41: add [rcx+0x3418b02], ecx; mov [rdx+3], eax; mov rax, rdi; ret;
0x0014dc42: mov [rdx], eax; mov eax, [rcx+3]; mov [rdx+3], eax; mov rax, rdi; ret;
0x0014dc43: add cl, [rbx+0x42890341]; add ecx, [rax-0x77]; clc; ret;
0x0014dc44: mov eax, [rcx+3]; mov [rdx+3], eax; mov rax, rdi; ret;
0x0014dc45: add ecx, [r9-0x76b7fcbe]; clc; ret;
0x0014dc46: add ecx, [rcx-0x76b7fcbe]; clc; ret;
0x0014dc47: mov [rdx+3], eax; mov rax, rdi; ret;
0x0014dc49: add ecx, [rax-0x77]; clc; ret;
0x0014dc50: mov rax, [rcx]; mov [rdx], rax; mov eax, [rcx+5]; mov [rdx+5], eax; mov rax, rdi; ret;
0x0014dc51: mov eax, [rcx]; mov [rdx], rax; mov eax, [rcx+5]; mov [rdx+5], eax; mov rax, rdi; ret;
0x0014dc53: mov [rdx], rax; mov eax, [rcx+5]; mov [rdx+5], eax; mov rax, rdi; ret;
0x0014dc54: mov [rdx], eax; mov eax, [rcx+5]; mov [rdx+5], eax; mov rax, rdi; ret;
0x0014dc56: mov eax, [rcx+5]; mov [rdx+5], eax; mov rax, rdi; ret;
0x0014dc58: add eax, 0x48054289; mov eax, edi; ret;
0x0014dc60: mov rax, [rcx]; mov [rdx], rax; mov eax, [rcx+6]; mov [rdx+6], eax; mov rax, rdi; ret;
0x0014dc61: mov eax, [rcx]; mov [rdx], rax; mov eax, [rcx+6]; mov [rdx+6], eax; mov rax, rdi; ret;
0x0014dc63: mov [rdx], rax; mov eax, [rcx+6]; mov [rdx+6], eax; mov rax, rdi; ret;
0x0014dc64: mov [rdx], eax; mov eax, [rcx+6]; mov [rdx+6], eax; mov rax, rdi; ret;
0x0014dc66: mov eax, [rcx+6]; mov [rdx+6], eax; mov rax, rdi; ret;
0x0014dc70: mov rax, [rcx]; mov [rdx], rax; mov eax, [rcx+7]; mov [rdx+7], eax; mov rax, rdi; ret;
0x0014dc71: mov eax, [rcx]; mov [rdx], rax; mov eax, [rcx+7]; mov [rdx+7], eax; mov rax, rdi; ret;
0x0014dc73: mov [rdx], rax; mov eax, [rcx+7]; mov [rdx+7], eax; mov rax, rdi; ret;
0x0014dc74: mov [rdx], eax; mov eax, [rcx+7]; mov [rdx+7], eax; mov rax, rdi; ret;
0x0014dc76: mov eax, [rcx+7]; mov [rdx+7], eax; mov rax, rdi; ret;
0x0014dc90: mov rax, [rcx]; mov [rdx], rax; mov rax, [rcx+5]; mov [rdx+5], rax; mov rax, rdi; ret;
0x0014dc91: mov eax, [rcx]; mov [rdx], rax; mov rax, [rcx+5]; mov [rdx+5], rax; mov rax, rdi; ret;
0x0014dc92: add [rax-0x77], ecx; add cl, [rax-0x75]; add eax, 0x5428948; mov rax, rdi; ret;
0x0014dc93: mov [rdx], rax; mov rax, [rcx+5]; mov [rdx+5], rax; mov rax, rdi; ret;
0x0014dc94: mov [rdx], eax; mov rax, [rcx+5]; mov [rdx+5], rax; mov rax, rdi; ret;
0x0014dc95: add cl, [rax-0x75]; add eax, 0x5428948; mov rax, rdi; ret;
0x0014dc96: mov rax, [rcx+5]; mov [rdx+5], rax; mov rax, rdi; ret;
0x0014dc97: mov eax, [rcx+5]; mov [rdx+5], rax; mov rax, rdi; ret;
0x0014dc99: add eax, 0x5428948; mov rax, rdi; ret;
0x0014dc9a: mov [rdx+5], rax; mov rax, rdi; ret;
0x0014dc9b: mov [rdx+5], eax; mov rax, rdi; ret;
0x0014dcb0: mov rax, [rcx]; mov [rdx], rax; mov rax, [rcx+6]; mov [rdx+6], rax; mov rax, rdi; ret;
0x0014dcb1: mov eax, [rcx]; mov [rdx], rax; mov rax, [rcx+6]; mov [rdx+6], rax; mov rax, rdi; ret;
0x0014dcb3: mov [rdx], rax; mov rax, [rcx+6]; mov [rdx+6], rax; mov rax, rdi; ret;
0x0014dcb4: mov [rdx], eax; mov rax, [rcx+6]; mov [rdx+6], rax; mov rax, rdi; ret;
0x0014dcb6: mov rax, [rcx+6]; mov [rdx+6], rax; mov rax, rdi; ret;
0x0014dcb7: mov eax, [rcx+6]; mov [rdx+6], rax; mov rax, rdi; ret;
0x0014dcba: mov [rdx+6], rax; mov rax, rdi; ret;
0x0014dcbb: mov [rdx+6], eax; mov rax, rdi; ret;
0x0014f7f4: adc [rax-0x73], cl; adc [rdi], cl; test [rcx+5], eax; add [rax], al; ret;
0x0014f7f8: adc [rdi], cl; test [rcx+5], eax; add [rax], al; ret;
0x0014f7fa: test [rcx+5], eax; add [rax], al; ret;
0x0014f9ea: add [rax-0x73], ecx; add [rdi], rcx; test [rbx+3], ecx; add [rax], al; ret;
0x0014f9ed: add [rdi], rcx; test [rbx+3], ecx; add [rax], al; ret;
0x0014f9ee: add [rdi], ecx; test [rbx+3], ecx; add [rax], al; ret;
0x0014f9f0: test [rbx+3], ecx; add [rax], al; ret;
0x0014fa13: sub [rbx], eax; add [rax], al; ret;
0x0014fa39: add eax, [rbx]; add [rax], al; ret;
0x0014fa73: add rax, 0x2c5850f; add [rax], al; ret;
0x0014fa74: add eax, 0x2c5850f; add [rax], al; ret;
0x0014fab7: test [rdx], eax; add [rax], al; ret;
0x0014fad2: or [rax-0x73], ecx; or [rdi], rcx; test [rbx+2], esp; add [rax], al; ret;
0x0014fad5: or [rdi], rcx; test [rbx+2], esp; add [rax], al; ret;
0x0014fad6: or [rdi], ecx; test [rbx+2], esp; add [rax], al; ret;
0x0014fad8: test [rbx+2], esp; add [rax], al; ret;
0x0014fad9: movsxd eax, [rdx]; add [rax], al; ret;
0x0014faf2: or cl, [rax-0x73]; or cl, [rdi]; test [rbx+2], eax; add [rax], al; ret;
0x0014faf6: or cl, [rdi]; test [rbx+2], eax; add [rax], al; ret;
0x0014faf8: test [rbx+2], eax; add [rax], al; ret;
0x0014fb19: and eax, [rdx]; add [rax], al; ret;
0x0014fb39: add eax, [rdx]; add [rax], al; ret;
0x0014fb57: or rax, 0x1e1850f; add [rax], al; ret;
0x0014fb58: or eax, 0x1e1850f; add [rax], al; ret;
0x0014fb94: cmovs ecx, [rbp-0x7af0f0b6]; mov eax, [0x2e6666c3c3000001]; nop [rax+rax]; nop [rax]; mov [rcx], dl; ret;
0x0014fb9a: test [rcx-0x3cffffff], esp; ret;
0x0014fb9b: mov eax, [0x2e6666c3c3000001]; nop [rax+rax]; nop [rax]; mov [rcx], dl; ret;
0x0014fb9c: add [rax], eax; add bl, al; ret;
0x0014fb9e: add bl, al; ret;
0x0014fe58: mov rax, [rcx]; mov [rdx], rax; mov rax, [rcx+7]; mov [rdx+7], rax; mov rax, rdi; ret;
0x0014fe59: mov eax, [rcx]; mov [rdx], rax; mov rax, [rcx+7]; mov [rdx+7], rax; mov rax, rdi; ret;
0x0014fe5b: mov [rdx], rax; mov rax, [rcx+7]; mov [rdx+7], rax; mov rax, rdi; ret;
0x0014fe5c: mov [rdx], eax; mov rax, [rcx+7]; mov [rdx+7], rax; mov rax, rdi; ret;
0x0014fe5e: mov rax, [rcx+7]; mov [rdx+7], rax; mov rax, rdi; ret;
0x0014fe5f: mov eax, [rcx+7]; mov [rdx+7], rax; mov rax, rdi; ret;
0x0014fe62: mov [rdx+7], rax; mov rax, rdi; ret;
0x0014fe63: mov [rdx+7], eax; mov rax, rdi; ret;
0x0014fef0: inc dword ptr [rax+0xf000679]; test [rbp+0x48fffffb], ah; mov eax, [rcx]; mov [rdx], rax; mov rax, rdi; ret;
0x0014fef4: add [rdi], cl; test [rbp+0x48fffffb], ah; mov eax, [rcx]; mov [rdx], rax; mov rax, rdi; ret;
0x0014fef6: test [rbp+0x48fffffb], ah; mov eax, [rcx]; mov [rdx], rax; mov rax, rdi; ret;
0x0014fefa: dec dword ptr [rax-0x75]; add [rax-0x77], ecx; add cl, [rax-0x77]; clc; ret;
0x00150a42: xlat [rbx]; ror byte ptr [rax-0x73], 0x76; adc [rax-0x7b], cl; ror byte ptr [rdi], 0x85; call qword ptr [rbx];
0x00150a43: ror byte ptr [rax-0x73], 0x76; adc [rax-0x7b], cl; ror byte ptr [rdi], 0x85; call qword ptr [rbx];
0x00150a47: adc [rax-0x7b], cl; ror byte ptr [rdi], 0x85; call qword ptr [rbx];
0x00150a4a: ror byte ptr [rdi], 0x85; call qword ptr [rbx];
0x00150a7e: xlat [rbx]; ror byte ptr [rax-0x73], 0x76; adc [rax-0x7b], cl; ror byte ptr [rdi], 0x85; ret;
0x00150a7f: ror byte ptr [rax-0x73], 0x76; adc [rax-0x7b], cl; ror byte ptr [rdi], 0x85; ret;
0x00150a83: adc [rax-0x7b], cl; ror byte ptr [rdi], 0x85; ret;
0x00150c28: jmp qword ptr [r14+0xf];
0x00151c7e: enter 0x8d48, 0x49; dec byte ptr [rax+0x29]; ret 0x280f;
0x00151c81: dec byte ptr [r8+0x29]; ret 0x280f;
0x00151c82: dec byte ptr [rax+0x29]; ret 0x280f;
0x00151dbe: enter 0x8d48, 0x49; dec dword ptr [rax+0x29]; ret 0x280f;
0x00151dc1: dec qword ptr [r8+0x29]; ret 0x280f;
0x00151dc2: dec dword ptr [rax+0x29]; ret 0x280f;
0x00151e93: nop [rax+rax]; nop [rax]; mov rax, [rcx]; mov [rdx], rax; lea rax, [rdx+7]; ret;
0x00151e94: nop [rax+rax]; nop [rax]; mov rax, [rcx]; mov [rdx], rax; lea rax, [rdx+7]; ret;
0x00151e95: nop [rax+rax]; nop [rax]; mov rax, [rcx]; mov [rdx], rax; lea rax, [rdx+7]; ret;
0x00151e9b: add [rax], al; nop [rax]; mov rax, [rcx]; mov [rdx], rax; lea rax, [rdx+7]; ret;
0x00151e9d: nop [rax]; mov rax, [rcx]; mov [rdx], rax; lea rax, [rdx+7]; ret;
0x00151ea0: mov rax, [rcx]; mov [rdx], rax; lea rax, [rdx+7]; ret;
0x00151ea1: mov eax, [rcx]; mov [rdx], rax; lea rax, [rdx+7]; ret;
0x00151ea3: mov [rdx], rax; lea rax, [rdx+7]; ret;
0x00151ea4: mov [rdx], eax; lea rax, [rdx+7]; ret;
0x00151ea6: lea rax, [rdx+7]; ret;
0x00151ea7: lea eax, [rdx+7]; ret;
0x00151eee: add [rax+0x48018b48], dl; mov [rdx], eax; mov rax, [rcx+8]; mov [rdx+8], rax; lea rax, [rdx+0xf]; ret;
0x00151ef0: mov rax, [rcx]; mov [rdx], rax; mov rax, [rcx+8]; mov [rdx+8], rax; lea rax, [rdx+0xf]; ret;
0x00151ef1: mov eax, [rcx]; mov [rdx], rax; mov rax, [rcx+8]; mov [rdx+8], rax; lea rax, [rdx+0xf]; ret;
0x00151ef3: mov [rdx], rax; mov rax, [rcx+8]; mov [rdx+8], rax; lea rax, [rdx+0xf]; ret;
0x00151ef4: mov [rdx], eax; mov rax, [rcx+8]; mov [rdx+8], rax; lea rax, [rdx+0xf]; ret;
0x00151ef6: mov rax, [rcx+8]; mov [rdx+8], rax; lea rax, [rdx+0xf]; ret;
0x00151ef7: mov eax, [rcx+8]; mov [rdx+8], rax; lea rax, [rdx+0xf]; ret;
0x00151efa: mov [rdx+8], rax; lea rax, [rdx+0xf]; ret;
0x00151efb: mov [rdx+8], eax; lea rax, [rdx+0xf]; ret;
0x00151efe: lea rax, [rdx+0xf]; ret;
0x00151eff: lea eax, [rdx+0xf]; ret;
0x00151f04: nop [rax+rax]; xchg ax, ax; mov al, [rcx]; mov [rdx], al; lea rax, [rdx]; ret;
0x00151f05: nop [rax+rax]; xchg ax, ax; mov al, [rcx]; mov [rdx], al; lea rax, [rdx]; ret;
0x00151f06: nop [rax+rax]; xchg ax, ax; mov al, [rcx]; mov [rdx], al; lea rax, [rdx]; ret;
0x00151f0b: add [rax], al; add [rsi-0x70], ah; mov al, [rcx]; mov [rdx], al; lea rax, [rdx]; ret;
0x00151f0c: add [rax], al; xchg ax, ax; mov al, [rcx]; mov [rdx], al; lea rax, [rdx]; ret;
0x00151f0d: add [rsi-0x70], ah; mov al, [rcx]; mov [rdx], al; lea rax, [rdx]; ret;
0x00151f0e: xchg ax, ax; mov al, [rcx]; mov [rdx], al; lea rax, [rdx]; ret;
0x00151f0f: nop; mov al, [rcx]; mov [rdx], al; lea rax, [rdx]; ret;
0x00151f10: mov al, [rcx]; mov [rdx], al; lea rax, [rdx]; ret;
0x00151f11: add [rax+0x28d4802], ecx; ret;
0x00151f12: mov [rdx], al; lea rax, [rdx]; ret;
0x00151f14: lea rax, [rdx]; ret;
0x00151f15: lea eax, [rdx]; ret;
0x00151f16: add al, bl; nop [rax+rax]; mov ax, [rcx]; mov [rdx], ax; lea rax, [rdx+1]; ret;
0x00151f18: nop [rax+rax]; mov ax, [rcx]; mov [rdx], ax; lea rax, [rdx+1]; ret;
0x00151f1c: add [rax], al; add [rax], al; mov ax, [rcx]; mov [rdx], ax; lea rax, [rdx+1]; ret;
0x00151f1e: add [rax], al; mov ax, [rcx]; mov [rdx], ax; lea rax, [rdx+1]; ret;
0x00151f20: mov ax, [rcx]; mov [rdx], ax; lea rax, [rdx+1]; ret;
0x00151f21: mov eax, [rcx]; mov [rdx], ax; lea rax, [rdx+1]; ret;
0x00151f23: mov [rdx], ax; lea rax, [rdx+1]; ret;
0x00151f24: mov [rdx], eax; lea rax, [rdx+1]; ret;
0x00151f26: lea rax, [rdx+1]; ret;
0x00151f27: lea eax, [rdx+1]; ret;
0x00151f30: mov ax, [rcx]; mov [rdx], ax; mov al, [rcx+2]; mov [rdx+2], al; lea rax, [rdx+2]; ret;
0x00151f31: mov eax, [rcx]; mov [rdx], ax; mov al, [rcx+2]; mov [rdx+2], al; lea rax, [rdx+2]; ret;
0x00151f33: mov [rdx], ax; mov al, [rcx+2]; mov [rdx+2], al; lea rax, [rdx+2]; ret;
0x00151f34: mov [rdx], eax; mov al, [rcx+2]; mov [rdx+2], al; lea rax, [rdx+2]; ret;
0x00151f36: mov al, [rcx+2]; mov [rdx+2], al; lea rax, [rdx+2]; ret;
0x00151f39: mov [rdx+2], al; lea rax, [rdx+2]; ret;
0x00151f3c: lea rax, [rdx+2]; ret;
0x00151f3d: lea eax, [rdx+2]; ret;
0x00151f42: nop [rax+rax]; nop [rax]; mov eax, [rcx]; mov [rdx], eax; lea rax, [rdx+3]; ret;
0x00151f43: nop [rax+rax]; nop [rax]; mov eax, [rcx]; mov [rdx], eax; lea rax, [rdx+3]; ret;
0x00151f44: nop [rax+rax]; nop [rax]; mov eax, [rcx]; mov [rdx], eax; lea rax, [rdx+3]; ret;
0x00151f4a: add [rax], al; nop [rax]; mov eax, [rcx]; mov [rdx], eax; lea rax, [rdx+3]; ret;
0x00151f4c: nop [rax]; mov eax, [rcx]; mov [rdx], eax; lea rax, [rdx+3]; ret;
0x00151f4f: add [rbx+0x48028901], cl; lea eax, [rdx+3]; ret;
0x00151f50: mov eax, [rcx]; mov [rdx], eax; lea rax, [rdx+3]; ret;
0x00151f52: mov [rdx], eax; lea rax, [rdx+3]; ret;
0x00151f54: lea rax, [rdx+3]; ret;
0x00151f55: lea eax, [rdx+3]; ret;
0x00151f5d: add [rax], al; add [rbx-0x75fd76ff], cl; add al, 0x88; add al, 0x48; lea eax, [rdx+4]; ret;
0x00151f5f: add [rbx-0x75fd76ff], cl; add al, 0x88; add al, 0x48; lea eax, [rdx+4]; ret;
0x00151f60: mov eax, [rcx]; mov [rdx], eax; mov al, [rcx+4]; mov [rdx+4], al; lea rax, [rdx+4]; ret;
0x00151f61: add [rcx+0x4418a02], ecx; mov [rdx+4], al; lea rax, [rdx+4]; ret;
0x00151f62: mov [rdx], eax; mov al, [rcx+4]; mov [rdx+4], al; lea rax, [rdx+4]; ret;
0x00151f63: add cl, [rdx+0x42880441]; add al, 0x48; lea eax, [rdx+4]; ret;
0x00151f64: mov al, [rcx+4]; mov [rdx+4], al; lea rax, [rdx+4]; ret;
0x00151f66: add al, 0x88; add al, 0x48; lea eax, [rdx+4]; ret;
0x00151f67: mov [rdx+4], al; lea rax, [rdx+4]; ret;
0x00151f69: add al, 0x48; lea eax, [rdx+4]; ret;
0x00151f6a: lea rax, [rdx+4]; ret;
0x00151f6b: lea eax, [rdx+4]; ret;
0x00151f70: mov eax, [rcx]; mov [rdx], eax; mov ax, [rcx+4]; mov [rdx+4], ax; lea rax, [rdx+5]; ret;
0x00151f71: add [rcx+0x418b6602], ecx; add al, 0x66; mov [rdx+4], eax; lea rax, [rdx+5]; ret;
0x00151f72: mov [rdx], eax; mov ax, [rcx+4]; mov [rdx+4], ax; lea rax, [rdx+5]; ret;
0x00151f73: add ah, [rsi-0x75]; add al, 0x66; mov [rdx+4], eax; lea rax, [rdx+5]; ret;
0x00151f74: mov ax, [rcx+4]; mov [rdx+4], ax; lea rax, [rdx+5]; ret;
0x00151f75: mov eax, [rcx+4]; mov [rdx+4], ax; lea rax, [rdx+5]; ret;
0x00151f77: add al, 0x66; mov [rdx+4], eax; lea rax, [rdx+5]; ret;
0x00151f78: mov [rdx+4], ax; lea rax, [rdx+5]; ret;
0x00151f79: mov [rdx+4], eax; lea rax, [rdx+5]; ret;
0x00151f7b: add al, 0x48; lea eax, [rdx+5]; ret;
0x00151f7c: lea rax, [rdx+5]; ret;
0x00151f7d: lea eax, [rdx+5]; ret;
0x00151f90: mov eax, [rcx]; mov [rdx], eax; mov eax, [rcx+3]; mov [rdx+3], eax; lea rax, [rdx+6]; ret;
0x00151f91: add [rcx+0x3418b02], ecx; mov [rdx+3], eax; lea rax, [rdx+6]; ret;
0x00151f92: mov [rdx], eax; mov eax, [rcx+3]; mov [rdx+3], eax; lea rax, [rdx+6]; ret;
0x00151f94: mov eax, [rcx+3]; mov [rdx+3], eax; lea rax, [rdx+6]; ret;
0x00151f97: mov [rdx+3], eax; lea rax, [rdx+6]; ret;
0x00151f9a: lea rax, [rdx+6]; ret;
0x00151f9b: lea eax, [rdx+6]; ret;
0x00151fa0: mov rax, [rcx]; mov [rdx], rax; mov eax, [rcx+5]; mov [rdx+5], eax; lea rax, [rdx+8]; ret;
0x00151fa1: mov eax, [rcx]; mov [rdx], rax; mov eax, [rcx+5]; mov [rdx+5], eax; lea rax, [rdx+8]; ret;
0x00151fa2: add [rax-0x77], ecx; add cl, [rbx+0x42890541]; add eax, 0x8428d48; ret;
0x00151fa3: mov [rdx], rax; mov eax, [rcx+5]; mov [rdx+5], eax; lea rax, [rdx+8]; ret;
0x00151fa4: mov [rdx], eax; mov eax, [rcx+5]; mov [rdx+5], eax; lea rax, [rdx+8]; ret;
0x00151fa5: add cl, [rbx+0x42890541]; add eax, 0x8428d48; ret;
0x00151fa6: mov eax, [rcx+5]; mov [rdx+5], eax; lea rax, [rdx+8]; ret;
0x00151fa8: add eax, 0x48054289; lea eax, [rdx+8]; ret;
0x00151fa9: mov [rdx+5], eax; lea rax, [rdx+8]; ret;
0x00151fab: add eax, 0x8428d48; ret;
0x00151fac: lea rax, [rdx+8]; ret;
0x00151fad: lea eax, [rdx+8]; ret;
0x00151fc0: mov rax, [rcx]; mov [rdx], rax; mov eax, [rcx+6]; mov [rdx+6], eax; lea rax, [rdx+9]; ret;
0x00151fc1: mov eax, [rcx]; mov [rdx], rax; mov eax, [rcx+6]; mov [rdx+6], eax; lea rax, [rdx+9]; ret;
0x00151fc3: mov [rdx], rax; mov eax, [rcx+6]; mov [rdx+6], eax; lea rax, [rdx+9]; ret;
0x00151fc4: mov [rdx], eax; mov eax, [rcx+6]; mov [rdx+6], eax; lea rax, [rdx+9]; ret;
0x00151fc6: mov eax, [rcx+6]; mov [rdx+6], eax; lea rax, [rdx+9]; ret;
0x00151fc9: mov [rdx+6], eax; lea rax, [rdx+9]; ret;
0x00151fcc: lea rax, [rdx+9]; ret;
0x00151fcd: lea eax, [rdx+9]; ret;
0x00151fe0: mov rax, [rcx]; mov [rdx], rax; mov eax, [rcx+7]; mov [rdx+7], eax; lea rax, [rdx+0xa]; ret;
0x00151fe1: mov eax, [rcx]; mov [rdx], rax; mov eax, [rcx+7]; mov [rdx+7], eax; lea rax, [rdx+0xa]; ret;
0x00151fe3: mov [rdx], rax; mov eax, [rcx+7]; mov [rdx+7], eax; lea rax, [rdx+0xa]; ret;
0x00151fe4: mov [rdx], eax; mov eax, [rcx+7]; mov [rdx+7], eax; lea rax, [rdx+0xa]; ret;
0x00151fe6: mov eax, [rcx+7]; mov [rdx+7], eax; lea rax, [rdx+0xa]; ret;
0x00151fe9: mov [rdx+7], eax; lea rax, [rdx+0xa]; ret;
0x00151fec: lea rax, [rdx+0xa]; ret;
0x00151fed: lea eax, [rdx+0xa]; ret;
0x00152000: mov rax, [rcx]; mov [rdx], rax; mov eax, [rcx+8]; mov [rdx+8], eax; lea rax, [rdx+0xb]; ret;
0x00152001: mov eax, [rcx]; mov [rdx], rax; mov eax, [rcx+8]; mov [rdx+8], eax; lea rax, [rdx+0xb]; ret;
0x00152003: mov [rdx], rax; mov eax, [rcx+8]; mov [rdx+8], eax; lea rax, [rdx+0xb]; ret;
0x00152004: mov [rdx], eax; mov eax, [rcx+8]; mov [rdx+8], eax; lea rax, [rdx+0xb]; ret;
0x00152006: mov eax, [rcx+8]; mov [rdx+8], eax; lea rax, [rdx+0xb]; ret;
0x00152009: mov [rdx+8], eax; lea rax, [rdx+0xb]; ret;
0x0015200c: lea rax, [rdx+0xb]; ret;
0x0015200d: lea eax, [rdx+0xb]; ret;
0x0015201f: add [rax-0x75], cl; add [rax-0x77], ecx; add cl, [rax-0x75]; add eax, 0x5428948; lea rax, [rdx+0xc]; ret;
0x00152020: mov rax, [rcx]; mov [rdx], rax; mov rax, [rcx+5]; mov [rdx+5], rax; lea rax, [rdx+0xc]; ret;
0x00152021: mov eax, [rcx]; mov [rdx], rax; mov rax, [rcx+5]; mov [rdx+5], rax; lea rax, [rdx+0xc]; ret;
0x00152022: add [rax-0x77], ecx; add cl, [rax-0x75]; add eax, 0x5428948; lea rax, [rdx+0xc]; ret;
0x00152023: mov [rdx], rax; mov rax, [rcx+5]; mov [rdx+5], rax; lea rax, [rdx+0xc]; ret;
0x00152024: mov [rdx], eax; mov rax, [rcx+5]; mov [rdx+5], rax; lea rax, [rdx+0xc]; ret;
0x00152025: add cl, [rax-0x75]; add eax, 0x5428948; lea rax, [rdx+0xc]; ret;
0x00152026: mov rax, [rcx+5]; mov [rdx+5], rax; lea rax, [rdx+0xc]; ret;
0x00152027: mov eax, [rcx+5]; mov [rdx+5], rax; lea rax, [rdx+0xc]; ret;
0x00152029: add eax, 0x5428948; lea rax, [rdx+0xc]; ret;
0x0015202a: mov [rdx+5], rax; lea rax, [rdx+0xc]; ret;
0x0015202b: mov [rdx+5], eax; lea rax, [rdx+0xc]; ret;
0x0015202d: add eax, 0xc428d48; ret;
0x0015202e: lea rax, [rdx+0xc]; ret;
0x0015202f: lea eax, [rdx+0xc]; ret;
0x00152040: mov rax, [rcx]; mov [rdx], rax; mov rax, [rcx+6]; mov [rdx+6], rax; lea rax, [rdx+0xd]; ret;
0x00152041: mov eax, [rcx]; mov [rdx], rax; mov rax, [rcx+6]; mov [rdx+6], rax; lea rax, [rdx+0xd]; ret;
0x00152043: mov [rdx], rax; mov rax, [rcx+6]; mov [rdx+6], rax; lea rax, [rdx+0xd]; ret;
0x00152044: mov [rdx], eax; mov rax, [rcx+6]; mov [rdx+6], rax; lea rax, [rdx+0xd]; ret;
0x00152046: mov rax, [rcx+6]; mov [rdx+6], rax; lea rax, [rdx+0xd]; ret;
0x00152047: mov eax, [rcx+6]; mov [rdx+6], rax; lea rax, [rdx+0xd]; ret;
0x0015204a: mov [rdx+6], rax; lea rax, [rdx+0xd]; ret;
0x0015204b: mov [rdx+6], eax; lea rax, [rdx+0xd]; ret;
0x0015204e: lea rax, [rdx+0xd]; ret;
0x0015204f: lea eax, [rdx+0xd]; ret;
0x00152060: mov rax, [rcx]; mov [rdx], rax; mov rax, [rcx+7]; mov [rdx+7], rax; lea rax, [rdx+0xe]; ret;
0x00152061: mov eax, [rcx]; mov [rdx], rax; mov rax, [rcx+7]; mov [rdx+7], rax; lea rax, [rdx+0xe]; ret;
0x00152063: mov [rdx], rax; mov rax, [rcx+7]; mov [rdx+7], rax; lea rax, [rdx+0xe]; ret;
0x00152064: mov [rdx], eax; mov rax, [rcx+7]; mov [rdx+7], rax; lea rax, [rdx+0xe]; ret;
0x00152066: mov rax, [rcx+7]; mov [rdx+7], rax; lea rax, [rdx+0xe]; ret;
0x00152067: mov eax, [rcx+7]; mov [rdx+7], rax; lea rax, [rdx+0xe]; ret;
0x0015206a: mov [rdx+7], rax; lea rax, [rdx+0xe]; ret;
0x0015206b: mov [rdx+7], eax; lea rax, [rdx+0xe]; ret;
0x0015206e: lea rax, [rdx+0xe]; ret;
0x0015206f: lea eax, [rdx+0xe]; ret;
0x00152364: ret 0x8d4d;
0x0015236d: sar bh, 0xff; jmp qword ptr [rsi+0x66];
0x00152520: ror byte ptr [rdi], 0x28; jmp qword ptr [r14+0x66];
0x00152523: jmp qword ptr [r14+0x66];
0x00153896: enter 0x8d48, 0x49; dec byte ptr [rax+0x29]; ret 0x149;
0x00153899: dec byte ptr [r8+0x29]; ret 0x149;
0x0015389a: dec byte ptr [rax+0x29]; ret 0x149;
0x00153a16: enter 0x8d48, 0x49; dec dword ptr [rax+0x29]; ret 0x149;
0x00153a19: dec qword ptr [r8+0x29]; ret 0x149;
0x00153a1a: dec dword ptr [rax+0x29]; ret 0x149;
0x00153a1d: ret 0x149;
0x00153b21: or [rdi], cl; test [rax+6], ebp; add [rax], al; cmp byte ptr [rax], 1; sbb rax, 0xffffffffffffffff; ret;
0x00153b23: test [rax+6], ebp; add [rax], al; cmp byte ptr [rax], 1; sbb rax, 0xffffffffffffffff; ret;
0x00153b24: push 0xffffffff80000006; cmp [rcx], al; sbb rax, 0xffffffffffffffff; ret;
0x00153b8c: add [rsi], al; add [rax], al; cmp byte ptr [rax], 1; sbb rax, 0xffffffffffffffff; ret;
0x00153d8d: add [rdi], rcx; test ebx, edi; add eax, [rax]; add [rax-0x7cb7fec8], al; fdivr st, st(7); ret;
0x00153d8e: add [rdi], ecx; test ebx, edi; add eax, [rax]; add [rax-0x7cb7fec8], al; fdivr st, st(7); ret;
0x00153d90: test ebx, edi; add eax, [rax]; add [rax-0x7cb7fec8], al; fdivr st, st(7); ret;
0x00153d91: sti; add eax, [rax]; add [rax-0x7cb7fec8], al; fdivr st, st(7); ret;
0x00153db1: add cl, [rdi]; test eax, ebx; add eax, [rax]; add [rax-0x7cb7fec8], al; fdivr st, st(7); ret;
0x00153db3: test eax, ebx; add eax, [rax]; add [rax-0x7cb7fec8], al; fdivr st, st(7); ret;
0x00153db4: fadd st, dword ptr [rbx]; add [rax], al; cmp byte ptr [rax], 1; sbb rax, 0xffffffffffffffff; ret;
0x00153dd3: add ecx, [rax-0x73]; add rcx, [rdi]; test [rdx-0x7ffffffd], esi; cmp [rcx], al; sbb rax, 0xffffffffffffffff; ret;
0x00153dd6: add rcx, [rdi]; test [rdx-0x7ffffffd], esi; cmp [rcx], al; sbb rax, 0xffffffffffffffff; ret;
0x00153dd7: add ecx, [rdi]; test [rdx-0x7ffffffd], esi; cmp [rcx], al; sbb rax, 0xffffffffffffffff; ret;
0x00153dd9: test [rdx-0x7ffffffd], esi; cmp [rcx], al; sbb rax, 0xffffffffffffffff; ret;
0x00153dda: mov dl, 3; add [rax], al; cmp byte ptr [rax], 1; sbb rax, 0xffffffffffffffff; ret;
0x00153dff: add al, 0xf; test [rdx-0x7ffffffd], ecx; cmp [rcx], al; sbb rax, 0xffffffffffffffff; ret;
0x00153e01: test [rdx-0x7ffffffd], ecx; cmp [rcx], al; sbb rax, 0xffffffffffffffff; ret;
0x00153e02: mov al, [rbx]; add [rax], al; cmp byte ptr [rax], 1; sbb rax, 0xffffffffffffffff; ret;
0x00153e24: add rax, 0x364850f; add [rax], al; cmp byte ptr [rax], 1; sbb rax, 0xffffffffffffffff; ret;
0x00153e25: add eax, 0x364850f; add [rax], al; cmp byte ptr [rax], 1; sbb rax, 0xffffffffffffffff; ret;
0x00153e27: test [rbx+rax], esp; add [rax-0x7cb7fec8], al; fdivr st, st(7); ret;
0x00153e28: add eax, fs:[rax]; add [rax-0x7cb7fec8], al; fdivr st, st(7); ret;
0x00153e59: test [rdx], esi; add eax, [rax]; add [rax-0x7cb7fec8], al; fdivr st, st(7); ret;
0x00153e5a: xor al, [rbx]; add [rax], al; cmp byte ptr [rax], 1; sbb rax, 0xffffffffffffffff; ret;
0x00153e87: test [rbx+rax], eax; add [rax], al; cmp byte ptr [rax], 1; sbb rax, 0xffffffffffffffff; ret;
0x00153e88: add al, 3; add [rax], al; cmp byte ptr [rax], 1; sbb rax, 0xffffffffffffffff; ret;
0x00153e89: add eax, [rax]; add [rax-0x7cb7fec8], al; fdivr st, st(7); ret;
0x00153eb6: or [rdi], rcx; test edx, edx; add al, [rax]; add [rax-0x7cb7fec8], al; fdivr st, st(7); ret;
0x00153eb7: or [rdi], ecx; test edx, edx; add al, [rax]; add [rax-0x7cb7fec8], al; fdivr st, st(7); ret;
0x00153eb9: test edx, edx; add al, [rax]; add [rax-0x7cb7fec8], al; fdivr st, st(7); ret;
0x00153eba: rol byte ptr [rdx], cl; add [rax], al; cmp byte ptr [rax], 1; sbb rax, 0xffffffffffffffff; ret;
0x00153ee3: or cl, [rax-0x73]; or cl, [rdi]; test [rdx-0x7ffffffe], esp; cmp [rcx], al; sbb rax, 0xffffffffffffffff; ret;
0x00153ee7: or cl, [rdi]; test [rdx-0x7ffffffe], esp; cmp [rcx], al; sbb rax, 0xffffffffffffffff; ret;
0x00153ee9: test [rdx-0x7ffffffe], esp; cmp [rcx], al; sbb rax, 0xffffffffffffffff; ret;
0x00153eea: mov [0x8348013880000002], al; fdivr st, st(7); ret;
0x00153f16: or rcx, [rdi]; test [rdx+2], esi; add [rax], al; cmp byte ptr [rax], 1; sbb rax, 0xffffffffffffffff; ret;
0x00153f17: or ecx, [rdi]; test [rdx+2], esi; add [rax], al; cmp byte ptr [rax], 1; sbb rax, 0xffffffffffffffff; ret;
0x00153f19: test [rdx+2], esi; add [rax], al; cmp byte ptr [rax], 1; sbb rax, 0xffffffffffffffff; ret;
0x00153f47: or al, 0xf; test [rdx+2], eax; add [rax], al; cmp byte ptr [rax], 1; sbb rax, 0xffffffffffffffff; ret;
0x00153f49: test [rdx+2], eax; add [rax], al; cmp byte ptr [rax], 1; sbb rax, 0xffffffffffffffff; ret;
0x00153f78: or rax, 0x210850f; add [rax], al; cmp byte ptr [rax], 1; sbb rax, 0xffffffffffffffff; ret;
0x00153f79: or eax, 0x210850f; add [rax], al; cmp byte ptr [rax], 1; sbb rax, 0xffffffffffffffff; ret;
0x00153f7b: test [rax], edx; add al, [rax]; add [rax-0x7cb7fec8], al; fdivr st, st(7); ret;
0x00153f7c: adc [rdx], al; add [rax], al; cmp byte ptr [rax], 1; sbb rax, 0xffffffffffffffff; ret;
0x00153f7d: add al, [rax]; add [rax-0x7cb7fec8], al; fdivr st, st(7); ret;
0x00153fab: test eax, esp; add [rax], eax; add [rax-0x7cb7fec8], al; fdivr st, st(7); ret;
0x00153fd5: cmovs ecx, [rbp-0x7af0f0b6]; mov al, 1; add [rax], al; cmp byte ptr [rax], 1; sbb rax, 0xffffffffffffffff; ret;
0x00153fdb: test [rax-0x7fffffff], esi; cmp [rcx], al; sbb rax, 0xffffffffffffffff; ret;
0x00153fdc: mov al, 1; add [rax], al; cmp byte ptr [rax], 1; sbb rax, 0xffffffffffffffff; ret;
0x00153fdd: add [rax], eax; add [rax-0x7cb7fec8], al; fdivr st, st(7); ret;
0x00153fde: add [rax], al; cmp byte ptr [rax], 1; sbb rax, 0xffffffffffffffff; ret;
0x00153fdf: add [rax-0x7cb7fec8], al; fdivr st, st(7); ret;
0x00153fe6: inc ebx; nop [rax+rax]; ret;
0x00153fe8: nop [rax+rax]; ret;
0x00153fea: test [rax], al; add [rax], al; add [rax], al; ret;
0x00153fed: add [rax], al; add bl, al; nop [rax+rax]; nop [rax]; mov [rcx], dl; ret;
0x00153fef: add bl, al; nop [rax+rax]; nop [rax]; mov [rcx], dl; ret;
0x00153ff2: nop [rax+rax]; nop [rax]; mov [rcx], dl; ret;
0x00153ff3: nop [rax+rax]; nop [rax]; mov [rcx], dl; ret;
0x00153ff4: nop [rax+rax]; nop [rax]; mov [rcx], dl; ret;
0x00153ff6: test [rax], al; add [rax], al; add [rax], al; nop [rax]; mov [rcx], dl; ret;
0x00153ff8: add [rax], al; add [rax], al; nop [rax]; mov [rcx], dl; ret;
0x00153ffa: add [rax], al; nop [rax]; mov [rcx], dl; ret;
0x00153ffc: nop [rax]; mov [rcx], dl; ret;
0x00153fff: add [rax+0x6666c311], cl; nop [rax+rax]; xchg ax, ax; mov [rcx], dx; ret;
0x00154000: mov [rcx], dl; ret;
0x00154001: adc ebx, eax; nop [rax+rax]; xchg ax, ax; mov [rcx], dx; ret;
0x00154004: nop [rax+rax]; xchg ax, ax; mov [rcx], dx; ret;
0x00154005: nop [rax+rax]; xchg ax, ax; mov [rcx], dx; ret;
0x00154006: nop [rax+rax]; xchg ax, ax; mov [rcx], dx; ret;
0x00154008: test [rax], al; add [rax], al; add [rax], al; xchg ax, ax; mov [rcx], dx; ret;
0x00154009: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov [rcx], dx; ret;
0x0015400a: add [rax], al; add [rax], al; xchg ax, ax; mov [rcx], dx; ret;
0x0015400b: add [rax], al; add [rsi-0x70], ah; mov [rcx], dx; ret;
0x0015400c: add [rax], al; xchg ax, ax; mov [rcx], dx; ret;
0x0015400d: add [rsi-0x70], ah; mov [rcx], dx; ret;
0x0015400e: xchg ax, ax; mov [rcx], dx; ret;
0x0015400f: nop; mov [rcx], dx; ret;
0x00154010: mov [rcx], dx; ret;
0x00154012: adc ebx, eax; nop [rax+rax]; nop; mov [rcx], dx; mov [rcx+2], dl; ret;
0x00154015: nop [rax+rax]; nop; mov [rcx], dx; mov [rcx+2], dl; ret;
0x00154016: nop [rax+rax]; nop; mov [rcx], dx; mov [rcx+2], dl; ret;
0x00154017: nop [rax+rax]; nop; mov [rcx], dx; mov [rcx+2], dl; ret;
0x0015401b: add [rax], al; add [rax], al; nop; mov [rcx], dx; mov [rcx+2], dl; ret;
0x0015401d: add [rax], al; nop; mov [rcx], dx; mov [rcx+2], dl; ret;
0x0015401e: add [rax-0x77ee769a], dl; push rcx; add al, bl; nop [rax+rax]; mov [rcx], edx; ret;
0x0015401f: nop; mov [rcx], dx; mov [rcx+2], dl; ret;
0x00154020: mov [rcx], dx; mov [rcx+2], dl; ret;
0x00154021: mov [rcx], edx; mov [rcx+2], dl; ret;
0x00154022: adc [rax+0x66c30251], ecx; nop [rax+rax]; mov [rcx], edx; ret;
0x00154023: mov [rcx+2], dl; ret;
0x00154024: push rcx; add al, bl; nop [rax+rax]; mov [rcx], edx; ret;
0x00154025: add al, bl; nop [rax+rax]; mov [rcx], edx; ret;
0x00154027: nop [rax+rax]; mov [rcx], edx; ret;
0x00154028: nop [rax+rax]; mov [rcx], edx; ret;
0x0015402a: test [rax], al; add [rax], al; add [rax], al; mov [rcx], edx; ret;
0x0015402c: add [rax], al; add [rax], al; mov [rcx], edx; ret;
0x0015402e: add [rax], al; mov [rcx], edx; ret;
0x0015402f: add [rcx+0x6666c311], cl; nop [rax+rax]; xchg ax, ax; mov [rcx], edx; mov [rcx+4], dl; ret;
0x00154031: adc ebx, eax; nop [rax+rax]; xchg ax, ax; mov [rcx], edx; mov [rcx+4], dl; ret;
0x00154034: nop [rax+rax]; xchg ax, ax; mov [rcx], edx; mov [rcx+4], dl; ret;
0x00154035: nop [rax+rax]; xchg ax, ax; mov [rcx], edx; mov [rcx+4], dl; ret;
0x00154036: nop [rax+rax]; xchg ax, ax; mov [rcx], edx; mov [rcx+4], dl; ret;
0x00154039: add [rax], al; add [rax], al; add [rsi-0x70], ah; mov [rcx], edx; mov [rcx+4], dl; ret;
0x0015403a: add [rax], al; add [rax], al; xchg ax, ax; mov [rcx], edx; mov [rcx+4], dl; ret;
0x0015403b: add [rax], al; add [rsi-0x70], ah; mov [rcx], edx; mov [rcx+4], dl; ret;
0x0015403c: add [rax], al; xchg ax, ax; mov [rcx], edx; mov [rcx+4], dl; ret;
0x0015403d: add [rsi-0x70], ah; mov [rcx], edx; mov [rcx+4], dl; ret;
0x0015403e: xchg ax, ax; mov [rcx], edx; mov [rcx+4], dl; ret;
0x0015403f: nop; mov [rcx], edx; mov [rcx+4], dl; ret;
0x00154040: mov [rcx], edx; mov [rcx+4], dl; ret;
0x00154041: adc [rax+0x66c30451], ecx; nop [rax+rax]; mov [rcx], edx; mov [rcx+4], dx; ret;
0x00154042: mov [rcx+4], dl; ret;
0x00154043: push rcx; add al, 0xc3; nop [rax+rax]; mov [rcx], edx; mov [rcx+4], dx; ret;
0x00154044: add al, 0xc3; nop [rax+rax]; mov [rcx], edx; mov [rcx+4], dx; ret;
0x00154046: nop [rax+rax]; mov [rcx], edx; mov [rcx+4], dx; ret;
0x00154047: nop [rax+rax]; mov [rcx], edx; mov [rcx+4], dx; ret;
0x00154048: nop [rax+rax]; mov [rcx], edx; mov [rcx+4], dx; ret;
0x0015404a: test [rax], al; add [rax], al; add [rax], al; mov [rcx], edx; mov [rcx+4], dx; ret;
0x0015404c: add [rax], al; add [rax], al; mov [rcx], edx; mov [rcx+4], dx; ret;
0x0015404e: add [rax], al; mov [rcx], edx; mov [rcx+4], dx; ret;
0x0015404f: add [rcx+0x51896611], cl; add al, 0xc3; nop [rax+rax]; mov [rcx], edx; mov [rcx+3], edx; ret;
0x00154050: mov [rcx], edx; mov [rcx+4], dx; ret;
0x00154052: mov [rcx+4], dx; ret;
0x00154053: mov [rcx+4], edx; ret;
0x00154054: push rcx; add al, 0xc3; nop [rax+rax]; mov [rcx], edx; mov [rcx+3], edx; ret;
0x00154055: add al, 0xc3; nop [rax+rax]; mov [rcx], edx; mov [rcx+3], edx; ret;
0x00154057: nop [rax+rax]; mov [rcx], edx; mov [rcx+3], edx; ret;
0x00154058: nop [rax+rax]; mov [rcx], edx; mov [rcx+3], edx; ret;
0x0015405a: test [rax], al; add [rax], al; add [rax], al; mov [rcx], edx; mov [rcx+3], edx; ret;
0x0015405b: add [rax], al; add [rax], al; add [rcx+0x3518911], cl; ret;
0x0015405c: add [rax], al; add [rax], al; mov [rcx], edx; mov [rcx+3], edx; ret;
0x0015405d: add [rax], al; add [rcx+0x3518911], cl; ret;
0x0015405e: add [rax], al; mov [rcx], edx; mov [rcx+3], edx; ret;
0x0015405f: add [rcx+0x3518911], cl; ret;
0x00154060: mov [rcx], edx; mov [rcx+3], edx; ret;
0x00154061: adc [rcx+0x66c30351], ecx; nop [rax+rax]; mov [rcx], rdx; ret;
0x00154062: mov [rcx+3], edx; ret;
0x00154063: push rcx; add eax, ebx; nop [rax+rax]; mov [rcx], rdx; ret;
0x00154064: add eax, ebx; nop [rax+rax]; mov [rcx], rdx; ret;
0x00154066: nop [rax+rax]; mov [rcx], rdx; ret;
0x00154067: nop [rax+rax]; mov [rcx], rdx; ret;
0x00154068: nop [rax+rax]; mov [rcx], rdx; ret;
0x0015406a: test [rax], al; add [rax], al; add [rax], al; mov [rcx], rdx; ret;
0x0015406c: add [rax], al; add [rax], al; mov [rcx], rdx; ret;
0x0015406e: add [rax], al; mov [rcx], rdx; ret;
0x00154070: mov [rcx], rdx; ret;
0x00154071: mov [rcx], edx; ret;
0x00154072: adc ebx, eax; nop [rax+rax]; nop; mov [rcx], rdx; mov [rcx+8], dl; ret;
0x00154075: nop [rax+rax]; nop; mov [rcx], rdx; mov [rcx+8], dl; ret;
0x00154076: nop [rax+rax]; nop; mov [rcx], rdx; mov [rcx+8], dl; ret;
0x00154077: nop [rax+rax]; nop; mov [rcx], rdx; mov [rcx+8], dl; ret;
0x0015407b: add [rax], al; add [rax], al; nop; mov [rcx], rdx; mov [rcx+8], dl; ret;
0x0015407d: add [rax], al; nop; mov [rcx], rdx; mov [rcx+8], dl; ret;
0x0015407f: nop; mov [rcx], rdx; mov [rcx+8], dl; ret;
0x00154080: mov [rcx], rdx; mov [rcx+8], dl; ret;
0x00154081: mov [rcx], edx; mov [rcx+8], dl; ret;
0x00154082: adc [rax+0x66c30851], ecx; nop [rax+rax]; mov [rcx], rdx; mov [rcx+8], dx; ret;
0x00154083: mov [rcx+8], dl; ret;
0x00154084: push rcx; or bl, al; nop [rax+rax]; mov [rcx], rdx; mov [rcx+8], dx; ret;
0x00154085: or bl, al; nop [rax+rax]; mov [rcx], rdx; mov [rcx+8], dx; ret;
0x00154087: nop [rax+rax]; mov [rcx], rdx; mov [rcx+8], dx; ret;
0x00154088: nop [rax+rax]; mov [rcx], rdx; mov [rcx+8], dx; ret;
0x0015408a: test [rax], al; add [rax], al; add [rax], al; mov [rcx], rdx; mov [rcx+8], dx; ret;
0x0015408c: add [rax], al; add [rax], al; mov [rcx], rdx; mov [rcx+8], dx; ret;
0x0015408e: add [rax], al; mov [rcx], rdx; mov [rcx+8], dx; ret;
0x00154090: mov [rcx], rdx; mov [rcx+8], dx; ret;
0x00154091: mov [rcx], edx; mov [rcx+8], dx; ret;
0x00154093: mov [rcx+8], dx; ret;
0x00154095: push rcx; or bl, al; nop [rax+rax]; mov [rcx], rdx; mov [rcx+7], edx; ret;
0x00154096: or bl, al; nop [rax+rax]; mov [rcx], rdx; mov [rcx+7], edx; ret;
0x00154098: nop [rax+rax]; mov [rcx], rdx; mov [rcx+7], edx; ret;
0x0015409a: test [rax], al; add [rax], al; add [rax], al; mov [rcx], rdx; mov [rcx+7], edx; ret;
0x0015409c: add [rax], al; add [rax], al; mov [rcx], rdx; mov [rcx+7], edx; ret;
0x0015409e: add [rax], al; mov [rcx], rdx; mov [rcx+7], edx; ret;
0x0015409f: add [rax-0x77], cl; adc [rcx+0x66c30751], ecx; nop [rax+rax]; mov [rcx], rdx; mov [rcx+8], edx; ret;
0x001540a0: mov [rcx], rdx; mov [rcx+7], edx; ret;
0x001540a1: mov [rcx], edx; mov [rcx+7], edx; ret;
0x001540a2: adc [rcx+0x66c30751], ecx; nop [rax+rax]; mov [rcx], rdx; mov [rcx+8], edx; ret;
0x001540a7: nop [rax+rax]; mov [rcx], rdx; mov [rcx+8], edx; ret;
0x001540a8: nop [rax+rax]; mov [rcx], rdx; mov [rcx+8], edx; ret;
0x001540aa: test [rax], al; add [rax], al; add [rax], al; mov [rcx], rdx; mov [rcx+8], edx; ret;
0x001540ac: add [rax], al; add [rax], al; mov [rcx], rdx; mov [rcx+8], edx; ret;
0x001540ae: add [rax], al; mov [rcx], rdx; mov [rcx+8], edx; ret;
0x001540af: add [rax-0x77], cl; adc [rcx+0x66c30851], ecx; nop [rax+rax]; mov [rcx], rdx; mov [rcx+5], rdx; ret;
0x001540b0: mov [rcx], rdx; mov [rcx+8], edx; ret;
0x001540b1: mov [rcx], edx; mov [rcx+8], edx; ret;
0x001540b2: adc [rcx+0x66c30851], ecx; nop [rax+rax]; mov [rcx], rdx; mov [rcx+5], rdx; ret;
0x001540b4: push rcx; or bl, al; nop [rax+rax]; mov [rcx], rdx; mov [rcx+5], rdx; ret;
0x001540b5: or bl, al; nop [rax+rax]; mov [rcx], rdx; mov [rcx+5], rdx; ret;
0x001540b7: nop [rax+rax]; mov [rcx], rdx; mov [rcx+5], rdx; ret;
0x001540b8: nop [rax+rax]; mov [rcx], rdx; mov [rcx+5], rdx; ret;
0x001540ba: test [rax], al; add [rax], al; add [rax], al; mov [rcx], rdx; mov [rcx+5], rdx; ret;
0x001540bc: add [rax], al; add [rax], al; mov [rcx], rdx; mov [rcx+5], rdx; ret;
0x001540be: add [rax], al; mov [rcx], rdx; mov [rcx+5], rdx; ret;
0x001540c0: mov [rcx], rdx; mov [rcx+5], rdx; ret;
0x001540c1: mov [rcx], edx; mov [rcx+5], rdx; ret;
0x001540c3: mov [rcx+5], rdx; ret;
0x001540c4: mov [rcx+5], edx; ret;
0x001540c8: nop [rax+rax]; mov [rcx], rdx; mov [rcx+6], rdx; ret;
0x001540ca: test [rax], al; add [rax], al; add [rax], al; mov [rcx], rdx; mov [rcx+6], rdx; ret;
0x001540cc: add [rax], al; add [rax], al; mov [rcx], rdx; mov [rcx+6], rdx; ret;
0x001540ce: add [rax], al; mov [rcx], rdx; mov [rcx+6], rdx; ret;
0x001540d0: mov [rcx], rdx; mov [rcx+6], rdx; ret;
0x001540d1: mov [rcx], edx; mov [rcx+6], rdx; ret;
0x001540d3: mov [rcx+6], rdx; ret;
0x001540d4: mov [rcx+6], edx; ret;
0x001540d8: nop [rax+rax]; mov [rcx], rdx; mov [rcx+7], rdx; ret;
0x001540da: test [rax], al; add [rax], al; add [rax], al; mov [rcx], rdx; mov [rcx+7], rdx; ret;
0x001540dc: add [rax], al; add [rax], al; mov [rcx], rdx; mov [rcx+7], rdx; ret;
0x001540de: add [rax], al; mov [rcx], rdx; mov [rcx+7], rdx; ret;
0x001540e0: mov [rcx], rdx; mov [rcx+7], rdx; ret;
0x001540e1: mov [rcx], edx; mov [rcx+7], rdx; ret;
0x001540e3: mov [rcx+7], rdx; ret;
0x001540e4: mov [rcx+7], edx; ret;
0x001540e8: nop [rax+rax]; mov [rcx], rdx; mov [rcx+8], rdx; ret;
0x001540ea: test [rax], al; add [rax], al; add [rax], al; mov [rcx], rdx; mov [rcx+8], rdx; ret;
0x001540ec: add [rax], al; add [rax], al; mov [rcx], rdx; mov [rcx+8], rdx; ret;
0x001540ee: add [rax], al; mov [rcx], rdx; mov [rcx+8], rdx; ret;
0x001540f0: mov [rcx], rdx; mov [rcx+8], rdx; ret;
0x001540f1: mov [rcx], edx; mov [rcx+8], rdx; ret;
0x001540f3: mov [rcx+8], rdx; ret;
0x001540f4: mov [rcx+8], edx; ret;
0x001542ae: mov rax, [rcx+7]; mov [rdx+7], rax; lea rax, [rdx+0xe]; cmp byte ptr [rax], 1; sbb rax, 0xffffffffffffffff; ret;
0x001542af: mov eax, [rcx+7]; mov [rdx+7], rax; lea rax, [rdx+0xe]; cmp byte ptr [rax], 1; sbb rax, 0xffffffffffffffff; ret;
0x001542b2: mov [rdx+7], rax; lea rax, [rdx+0xe]; cmp byte ptr [rax], 1; sbb rax, 0xffffffffffffffff; ret;
0x001542b3: mov [rdx+7], eax; lea rax, [rdx+0xe]; cmp byte ptr [rax], 1; sbb rax, 0xffffffffffffffff; ret;
0x001542b6: lea rax, [rdx+0xe]; cmp byte ptr [rax], 1; sbb rax, 0xffffffffffffffff; ret;
0x001542b7: lea eax, [rdx+0xe]; cmp byte ptr [rax], 1; sbb rax, 0xffffffffffffffff; ret;
0x0015435b: mov rax, [rcx]; mov [rdx], rax; lea rax, [rdx+7]; cmp byte ptr [rax], 1; sbb rax, 0xffffffffffffffff; ret;
0x0015435c: mov eax, [rcx]; mov [rdx], rax; lea rax, [rdx+7]; cmp byte ptr [rax], 1; sbb rax, 0xffffffffffffffff; ret;
0x0015435e: mov [rdx], rax; lea rax, [rdx+7]; cmp byte ptr [rax], 1; sbb rax, 0xffffffffffffffff; ret;
0x0015435f: mov [rdx], eax; lea rax, [rdx+7]; cmp byte ptr [rax], 1; sbb rax, 0xffffffffffffffff; ret;
0x00154361: lea rax, [rdx+7]; cmp byte ptr [rax], 1; sbb rax, 0xffffffffffffffff; ret;
0x00154362: lea eax, [rdx+7]; cmp byte ptr [rax], 1; sbb rax, 0xffffffffffffffff; ret;
0x00154365: cmp byte ptr [rax], 1; sbb rax, 0xffffffffffffffff; ret;
0x00154366: cmp [rcx], al; sbb rax, 0xffffffffffffffff; ret;
0x00154367: add [rax-0x7d], ecx; fdivr st, st(7); ret;
0x00154368: sbb rax, 0xffffffffffffffff; ret;
0x001543c9: dec dword ptr [rax-0x7b]; ror byte ptr [rdi], 0x85; in eax, dx; idiv bh; jmp qword ptr [rsi+0xf];
0x001543cc: ror byte ptr [rdi], 0x85; in eax, dx; idiv bh; jmp qword ptr [rsi+0xf];
0x001543ce: test ebp, ebp; idiv bh; jmp qword ptr [rsi+0xf];
0x001543cf: in eax, dx; idiv bh; jmp qword ptr [rsi+0xf];
0x001543f1: test edx, ecx; idiv bh; jmp qword ptr [rsi+0xf];
0x0015440f: dec dword ptr [rax-0x7b]; ror byte ptr [rdi], 0x85; cmpsd [rsi], [rdi]; idiv bh; jmp qword ptr [rsi+0xf];
0x00154412: ror byte ptr [rdi], 0x85; cmpsd [rsi], [rdi]; idiv bh; jmp qword ptr [rsi+0xf];
0x00154415: cmpsd [rsi], [rdi]; idiv bh; jmp qword ptr [rsi+0xf];
0x0015442e: outsb dx, [rsi]; idiv edi; jmp qword ptr [rsi+0x66];
0x001544be: call qword ptr [rax+0x416f0ff3];
0x001544de: call qword ptr [rax+0x44318b48];
0x001544f5: add [rax], al; add [rdi], cl; test [rdx-0x1600000a], esp; in eax, dx; idiv edi; jmp qword ptr [rsi+0x66];
0x001544f7: add [rdi], cl; test [rdx-0x1600000a], esp; in eax, dx; idiv edi; jmp qword ptr [rsi+0x66];
0x001544f9: test [rdx-0x1600000a], esp; in eax, dx; idiv edi; jmp qword ptr [rsi+0x66];
0x001544ff: in eax, dx; idiv edi; jmp qword ptr [rsi+0x66];
0x00154530: idiv edi; jmp qword ptr [rsi+0x66];
0x00154e33: sar bh, 0xff; jmp qword ptr [rsi+0xf];
0x00154e64: fsub st, dword ptr [rsi+0xf]; xlat [rbx]; ret;
0x00155235: ret 0x280f;
0x001552cb: add [rbp+0x32], esi; mov rax, [rcx]; mov [rdx], rax; mov rax, rdi; ret;
0x001552cd: xor cl, [rax-0x75]; add [rax-0x77], ecx; add cl, [rax-0x77]; clc; ret;
0x001552f7: nop [rax+rax]; mov eax, [rcx]; mov [rdx], eax; mov rax, rdi; ret;
0x001552f8: nop [rax+rax]; mov eax, [rcx]; mov [rdx], eax; mov rax, rdi; ret;
0x001552fb: add [rax], al; add [rax], al; add [rbx+0x48028901], cl; mov eax, edi; ret;
0x001552fc: add [rax], al; add [rax], al; mov eax, [rcx]; mov [rdx], eax; mov rax, rdi; ret;
0x001552fd: add [rax], al; add [rbx+0x48028901], cl; mov eax, edi; ret;
0x001552fe: add [rax], al; mov eax, [rcx]; mov [rdx], eax; mov rax, rdi; ret;
0x001552ff: add [rbx+0x48028901], cl; mov eax, edi; ret;
0x00155300: mov eax, [rcx]; mov [rdx], eax; mov rax, rdi; ret;
0x00155301: add [rcx-0x776b7fe], ecx; ret;
0x00155308: nop [rax+rax]; mov rax, [rcx]; mov [rdx], rax; mov rax, rdi; ret;
0x0015530c: add [rax], al; add [rax], al; mov rax, [rcx]; mov [rdx], rax; mov rax, rdi; ret;
0x0015530d: add [rax], al; add [rax-0x75], cl; add [rax-0x77], ecx; add cl, [rax-0x77]; clc; ret;
0x0015530e: add [rax], al; mov rax, [rcx]; mov [rdx], rax; mov rax, rdi; ret;
0x0015530f: add [rax-0x75], cl; add [rax-0x77], ecx; add cl, [rax-0x77]; clc; ret;
0x00155310: mov rax, [rcx]; mov [rdx], rax; mov rax, rdi; ret;
0x00155311: mov eax, [rcx]; mov [rdx], rax; mov rax, rdi; ret;
0x00155312: add [rax-0x77], ecx; add cl, [rax-0x77]; clc; ret;
0x00155313: mov [rdx], rax; mov rax, rdi; ret;
0x00155314: mov [rdx], eax; mov rax, rdi; ret;
0x00155315: add cl, [rax-0x77]; clc; ret;
0x0015531f: add [rax-0x75], cl; add [rax-0x77], ecx; add cl, [rbx+0x42890841]; or [rax-0x77], cl; clc; ret;
0x00155320: mov rax, [rcx]; mov [rdx], rax; mov eax, [rcx+8]; mov [rdx+8], eax; mov rax, rdi; ret;
0x00155321: mov eax, [rcx]; mov [rdx], rax; mov eax, [rcx+8]; mov [rdx+8], eax; mov rax, rdi; ret;
0x00155322: add [rax-0x77], ecx; add cl, [rbx+0x42890841]; or [rax-0x77], cl; clc; ret;
0x00155323: mov [rdx], rax; mov eax, [rcx+8]; mov [rdx+8], eax; mov rax, rdi; ret;
0x00155324: mov [rdx], eax; mov eax, [rcx+8]; mov [rdx+8], eax; mov rax, rdi; ret;
0x00155325: add cl, [rbx+0x42890841]; or [rax-0x77], cl; clc; ret;
0x00155326: mov eax, [rcx+8]; mov [rdx+8], eax; mov rax, rdi; ret;
0x00155327: or [r9-0x76b7f7be], cl; clc; ret;
0x00155328: or [rcx-0x76b7f7be], cl; clc; ret;
0x00155330: mov rax, [rcx]; mov [rdx], rax; mov rax, [rcx+8]; mov [rdx+8], rax; mov rax, rdi; ret;
0x00155331: mov eax, [rcx]; mov [rdx], rax; mov rax, [rcx+8]; mov [rdx+8], rax; mov rax, rdi; ret;
0x00155332: add [rax-0x77], ecx; add cl, [rax-0x75]; or [r8-0x77], cl; or [rax-0x77], cl; clc; ret;
0x00155333: mov [rdx], rax; mov rax, [rcx+8]; mov [rdx+8], rax; mov rax, rdi; ret;
0x00155334: mov [rdx], eax; mov rax, [rcx+8]; mov [rdx+8], rax; mov rax, rdi; ret;
0x00155335: add cl, [rax-0x75]; or [r8-0x77], cl; or [rax-0x77], cl; clc; ret;
0x00155336: mov rax, [rcx+8]; mov [rdx+8], rax; mov rax, rdi; ret;
0x00155337: mov eax, [rcx+8]; mov [rdx+8], rax; mov rax, rdi; ret;
0x00155338: or [r8-0x77], cl; or [rax-0x77], cl; clc; ret;
0x00155339: or [rax-0x77], cl; or [rax-0x77], cl; clc; ret;
0x0015533a: mov [rdx+8], rax; mov rax, rdi; ret;
0x0015533b: mov [rdx+8], eax; mov rax, rdi; ret;
0x0015533d: or [rax-0x77], cl; clc; ret;
0x0015533e: mov rax, rdi; ret;
0x0015533f: mov eax, edi; ret;
0x001553d3: sub r9, rcx; lea r10, [rip+0x3d8a3]; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x001553d4: sub ecx, ecx; lea r10, [rip+0x3d8a3]; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x001553d5: leave; lea r10, [rip+0x3d8a3]; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x001553d6: lea r10, [rip+0x3d8a3]; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x001553d7: lea edx, [rip+0x3d8a3]; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x001553d8: adc eax, 0x3d8a3; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x001553d9: mov [0x668a0c634f0003d8], eax; pcmpeqb mm0, mm1; lea r10, [r10+r9]; jmp r10;
0x001553da: fadd st, dword ptr [rbx]; add [rdi+0x63], cl; or al, 0x8a; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x0015550a: movsxd eax, [rsi+rdx]; sbb cl, [rdi]; xchg [rbx+rcx-0x7cb80000], cl; ret 0xeb10;
0x0015550b: add al, 0x16; sbb cl, [rdi]; xchg [rbx+rcx-0x7cb80000], cl; ret 0xeb10;
0x0015550d: sbb cl, [rdi]; xchg [rbx+rcx-0x7cb80000], cl; ret 0xeb10;
0x0015550f: xchg [rbx+rcx-0x7cb80000], cl; ret 0xeb10;
0x001555b6: movsxd eax, [rsi+rdx]; sbb cl, [rdi]; xchg al, ah; or al, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x001555b7: add al, 0x16; sbb cl, [rdi]; xchg al, ah; or al, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x001555b9: sbb cl, [rdi]; xchg al, ah; or al, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x001555bb: xchg al, ah; or al, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x001555da: movsxd eax, [rsi+rdx]; sbb cl, [rdi]; xchg [rdx+rcx-0x7cb80000], bh; ret 0xeb10;
0x001555db: add al, 0x16; sbb cl, [rdi]; xchg [rdx+rcx-0x7cb80000], bh; ret 0xeb10;
0x001555dd: sbb cl, [rdi]; xchg [rdx+rcx-0x7cb80000], bh; ret 0xeb10;
0x001555df: xchg [rdx+rcx-0x7cb80000], bh; ret 0xeb10;
0x0015567c: movsxd eax, [rsi+rdx]; sbb cl, [rdi]; xchg [rdx], bl; or al, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x0015567d: add al, 0x16; sbb cl, [rdi]; xchg [rdx], bl; or al, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x0015567f: sbb cl, [rdi]; xchg [rdx], bl; or al, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x00155681: xchg [rdx], bl; or al, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x001556a0: movsxd eax, [rsi+rdx]; sbb cl, [rdi]; xchg dh, dh; or [rax], eax; add [rax-0x7d], cl; ret 0xeb10;
0x001556a1: add al, 0x16; sbb cl, [rdi]; xchg dh, dh; or [rax], eax; add [rax-0x7d], cl; ret 0xeb10;
0x001556a3: sbb cl, [rdi]; xchg dh, dh; or [rax], eax; add [rax-0x7d], cl; ret 0xeb10;
0x001556a5: xchg dh, dh; or [rax], eax; add [rax-0x7d], cl; ret 0xeb10;
0x001556a6: test byte ptr [rcx], 0; add [rax-0x7d], cl; ret 0xeb10;
0x0015574c: push rax; or [rax], eax; add [rax-0x7d], cl; ret 0x4910;
0x0015581c: or byte ptr [rax], 0; add [rax-0x7d], cl; ret 0x4910;
0x00155836: add eax, 0x633a0f66; add al, 0x16; sbb cl, [rdi]; xchg [rax+rcx], bl; add [rax-0x7d], cl; ret 0xeb10;
0x0015583a: movsxd eax, [rsi+rdx]; sbb cl, [rdi]; xchg [rax+rcx], bl; add [rax-0x7d], cl; ret 0xeb10;
0x0015583b: add al, 0x16; sbb cl, [rdi]; xchg [rax+rcx], bl; add [rax-0x7d], cl; ret 0xeb10;
0x0015583d: sbb cl, [rdi]; xchg [rax+rcx], bl; add [rax-0x7d], cl; ret 0xeb10;
0x0015583f: xchg [rax+rcx], bl; add [rax-0x7d], cl; ret 0xeb10;
0x00155840: pop rsp; or [rax], al; add [rax-0x7d], cl; ret 0xeb10;
0x0015590a: movsxd eax, [rsi+rdx]; sbb cl, [rdi]; xchg [rdi+rax-0x7cb80000], cl; ret 0xeb10;
0x0015590b: add al, 0x16; sbb cl, [rdi]; xchg [rdi+rax-0x7cb80000], cl; ret 0xeb10;
0x0015590d: sbb cl, [rdi]; xchg [rdi+rax-0x7cb80000], cl; ret 0xeb10;
0x0015590f: xchg [rdi+rax-0x7cb80000], cl; ret 0xeb10;
0x001559da: movsxd eax, [rsi+rdx]; sbb cl, [rdi]; xchg [rsi+rax-0x7cb80000], bh; ret 0xeb10;
0x001559db: add al, 0x16; sbb cl, [rdi]; xchg [rsi+rax-0x7cb80000], bh; ret 0xeb10;
0x001559dd: sbb cl, [rdi]; xchg [rsi+rax-0x7cb80000], bh; ret 0xeb10;
0x001559df: xchg [rsi+rax-0x7cb80000], bh; ret 0xeb10;
0x00155aaa: movsxd eax, [rsi+rdx]; sbb cl, [rdi]; xchg ah, ch; add eax, 0x83480000; ret 0xeb10;
0x00155aab: add al, 0x16; sbb cl, [rdi]; xchg ah, ch; add eax, 0x83480000; ret 0xeb10;
0x00155aad: sbb cl, [rdi]; xchg ah, ch; add eax, 0x83480000; ret 0xeb10;
0x00155aaf: xchg ah, ch; add eax, 0x83480000; ret 0xeb10;
0x00155ab0: in al, dx; add eax, 0x83480000; ret 0xeb10;
0x00155b7a: movsxd eax, [rsi+rdx]; sbb cl, [rdi]; xchg [rax*1-0x7cb80000], bl; ret 0xeb10;
0x00155b7b: add al, 0x16; sbb cl, [rdi]; xchg [rax*1-0x7cb80000], bl; ret 0xeb10;
0x00155b7d: sbb cl, [rdi]; xchg [rax*1-0x7cb80000], bl; ret 0xeb10;
0x00155b7f: xchg [rax*1-0x7cb80000], bl; ret 0xeb10;
0x00155c4a: movsxd eax, [rsi+rdx]; sbb cl, [rdi]; xchg [rsp+rax], cl; add [rax-0x7d], cl; ret 0xeb10;
0x00155c4b: add al, 0x16; sbb cl, [rdi]; xchg [rsp+rax], cl; add [rax-0x7d], cl; ret 0xeb10;
0x00155c4d: sbb cl, [rdi]; xchg [rsp+rax], cl; add [rax-0x7d], cl; ret 0xeb10;
0x00155c4f: xchg [rsp+rax], cl; add [rax-0x7d], cl; ret 0xeb10;
0x00155d1a: movsxd eax, [rsi+rdx]; sbb cl, [rdi]; xchg [rbx+rax], bh; add [rax-0x7d], cl; ret 0xeb10;
0x00155d1b: add al, 0x16; sbb cl, [rdi]; xchg [rbx+rax], bh; add [rax-0x7d], cl; ret 0xeb10;
0x00155d1d: sbb cl, [rdi]; xchg [rbx+rax], bh; add [rax-0x7d], cl; ret 0xeb10;
0x00155d1f: xchg [rbx+rax], bh; add [rax-0x7d], cl; ret 0xeb10;
0x00155dc6: movsxd eax, [rsi+rdx]; sbb cl, [rdi]; xchg al, dl; add al, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x00155dc7: add al, 0x16; sbb cl, [rdi]; xchg al, dl; add al, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x00155dc9: sbb cl, [rdi]; xchg al, dl; add al, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x00155dcb: xchg al, dl; add al, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x00155dea: movsxd eax, [rsi+rdx]; sbb cl, [rdi]; xchg [rdx+rax-0x7cb80000], ch; ret 0xeb10;
0x00155deb: add al, 0x16; sbb cl, [rdi]; xchg [rdx+rax-0x7cb80000], ch; ret 0xeb10;
0x00155ded: sbb cl, [rdi]; xchg [rdx+rax-0x7cb80000], ch; ret 0xeb10;
0x00155def: xchg [rdx+rax-0x7cb80000], ch; ret 0xeb10;
0x00155df0: lodsb [rsi]; add al, [rax]; add [rax-0x7d], cl; ret 0xeb10;
0x00155e96: movsxd eax, [rsi+rdx]; sbb cl, [rdi]; xchg [rax], al; add al, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x00155e97: add al, 0x16; sbb cl, [rdi]; xchg [rax], al; add al, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x00155e99: sbb cl, [rdi]; xchg [rax], al; add al, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x00155e9b: xchg [rax], al; add al, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x00155eba: movsxd eax, [rsi+rdx]; sbb cl, [rdi]; xchg ah, bl; add [rax], eax; add [rax-0x7d], cl; ret 0xeb10;
0x00155ebb: add al, 0x16; sbb cl, [rdi]; xchg ah, bl; add [rax], eax; add [rax-0x7d], cl; ret 0xeb10;
0x00155ebd: sbb cl, [rdi]; xchg ah, bl; add [rax], eax; add [rax-0x7d], cl; ret 0xeb10;
0x00155ebf: xchg ah, bl; add [rax], eax; add [rax-0x7d], cl; ret 0xeb10;
0x00155f66: movsxd eax, [rsi+rdx]; sbb cl, [rdi]; xchg [rax], dh; add [rax], eax; add [rax-0x7d], cl; ret 0x4910;
0x00155f67: add al, 0x16; sbb cl, [rdi]; xchg [rax], dh; add [rax], eax; add [rax-0x7d], cl; ret 0x4910;
0x00155f69: sbb cl, [rdi]; xchg [rax], dh; add [rax], eax; add [rax-0x7d], cl; ret 0x4910;
0x00155f6b: xchg [rax], dh; add [rax], eax; add [rax-0x7d], cl; ret 0x4910;
0x0015601b: add [rax], al; add [rax], al; add [rcx-0x7d], cl; ret 0x7f10;
0x0015601d: add [rax], al; add [rcx-0x7d], cl; ret 0x7f10;
0x0015601f: add [rcx-0x7d], cl; ret 0x7f10;
0x001560ca: test dword ptr [rdi], 0x441f; bsf rdx, rdx; movzx ecx, byte ptr [rsi+rdx]; movzx eax, byte ptr [rdi+rdx]; sub eax, ecx; ret;
0x001560cb: nop [rax+rax]; bsf rdx, rdx; movzx ecx, byte ptr [rsi+rdx]; movzx eax, byte ptr [rdi+rdx]; sub eax, ecx; ret;
0x001560cd: add [rax], r8b; bsf rdx, rdx; movzx ecx, byte ptr [rsi+rdx]; movzx eax, byte ptr [rdi+rdx]; sub eax, ecx; ret;
0x001560ce: add [rax], al; bsf rdx, rdx; movzx ecx, byte ptr [rsi+rdx]; movzx eax, byte ptr [rdi+rdx]; sub eax, ecx; ret;
0x001560d0: bsf rdx, rdx; movzx ecx, byte ptr [rsi+rdx]; movzx eax, byte ptr [rdi+rdx]; sub eax, ecx; ret;
0x001560d1: bsf edx, edx; movzx ecx, byte ptr [rsi+rdx]; movzx eax, byte ptr [rdi+rdx]; sub eax, ecx; ret;
0x001560e3: nop [rax+rax]; nop [rax]; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret;
0x001560e4: nop [rax+rax]; nop [rax]; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret;
0x001560e5: nop [rax+rax]; nop [rax]; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret;
0x001560eb: add [rax], al; nop [rax]; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret;
0x001560ed: nop [rax]; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret;
0x001561a3: sub r9, rcx; lea r10, [rip+0x3cb13]; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x001561a4: sub ecx, ecx; lea r10, [rip+0x3cb13]; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x001561a5: leave; lea r10, [rip+0x3cb13]; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x001561a6: lea r10, [rip+0x3cb13]; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x001561a7: lea edx, [rip+0x3cb13]; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x001561a8: adc eax, 0x3cb13; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x001561a9: adc ecx, ebx; add eax, [rax]; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x0015625d: add [rax], al; lea rcx, [rdx+rcx-0x10]; movzx eax, byte ptr [rdi+rcx]; movzx edx, byte ptr [rsi+rcx]; sub eax, edx; ret;
0x0015625e: add [rax-0x73], cl; or r14b, al; movzx eax, byte ptr [rdi+rcx]; movzx edx, byte ptr [rsi+rcx]; sub eax, edx; ret;
0x0015625f: lea rcx, [rdx+rcx-0x10]; movzx eax, byte ptr [rdi+rcx]; movzx edx, byte ptr [rsi+rcx]; sub eax, edx; ret;
0x00156260: lea ecx, [rdx+rcx-0x10]; movzx eax, byte ptr [rdi+rcx]; movzx edx, byte ptr [rsi+rcx]; sub eax, edx; ret;
0x00156261: or r14b, al; movzx eax, byte ptr [rdi+rcx]; movzx edx, byte ptr [rsi+rcx]; sub eax, edx; ret;
0x00156262: or dh, al; movzx eax, byte ptr [rdi+rcx]; movzx edx, byte ptr [rsi+rcx]; sub eax, edx; ret;
0x00156264: movzx eax, byte ptr [rdi+rcx]; movzx edx, byte ptr [rsi+rcx]; sub eax, edx; ret;
0x00156266: add al, 0xf; movzx edx, byte ptr [rsi+rcx]; sub eax, edx; ret;
0x00156268: movzx edx, byte ptr [rsi+rcx]; sub eax, edx; ret;
0x0015626a: adc al, 0xe; sub eax, edx; ret;
0x001562f3: adc [rdi], cl; xchg dl, cl; or eax, 0x83480000; ret 0x4910;
0x001562f5: xchg dl, cl; or eax, 0x83480000; ret 0x4910;
0x00156321: adc [rdi], cl; xchg [rbp+rcx-0x7cb80000], bl; ret 0xeb10;
0x00156323: xchg [rbp+rcx-0x7cb80000], bl; ret 0xeb10;
0x00156324: pushfq; or eax, 0x83480000; ret 0xeb10;
0x00156325: or eax, 0x83480000; ret 0xeb10;
0x001563dc: mov al, [0xf10eb834900000c]; xchg dl, bl; or al, 0; add [rax-0x7d], cl; ret 0x4910;
0x001563e3: adc [rdi], cl; xchg dl, bl; or al, 0; add [rax-0x7d], cl; ret 0x4910;
0x001563e5: xchg dl, bl; or al, 0; add [rax-0x7d], cl; ret 0x4910;
0x001563e6: fimul st, dword ptr [rax+rax]; add [rax-0x7d], cl; ret 0x4910;
0x00156411: adc [rdi], cl; xchg [rsp+rcx-0x7cb80000], ch; ret 0xeb10;
0x00156413: xchg [rsp+rcx-0x7cb80000], ch; ret 0xeb10;
0x00156414: lodsb [rsi]; or al, 0; add [rax-0x7d], cl; ret 0xeb10;
0x00156415: or al, 0; add [rax-0x7d], cl; ret 0xeb10;
0x001564d3: adc [rdi], cl; xchg dl, ch; or eax, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x001564d5: xchg dl, ch; or eax, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x00156501: adc [rdi], cl; xchg [rbx+rcx-0x7cb80000], bh; ret 0xeb10;
0x00156503: xchg [rbx+rcx-0x7cb80000], bh; ret 0xeb10;
0x00156505: or eax, [rax]; add [rax-0x7d], cl; ret 0xeb10;
0x001565c3: adc [rdi], cl; xchg dl, bh; or al, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x001565c5: xchg dl, bh; or al, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x001565c6: cli; or al, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x001565f1: adc [rdi], cl; xchg ah, cl; or al, [rax]; add [rax-0x7d], cl; ret 0xeb10;
0x001565f3: xchg ah, cl; or al, [rax]; add [rax-0x7d], cl; ret 0xeb10;
0x001565f4: int3; or al, [rax]; add [rax-0x7d], cl; ret 0xeb10;
0x001565f5: or al, [rax]; add [rax-0x7d], cl; ret 0xeb10;
0x001566b3: adc [rdi], cl; xchg [rdx], cl; or al, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x001566b5: xchg [rdx], cl; or al, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x001566da: mov [0xf10eb8349000009], al; xchg ah, bl; or [rax], eax; add [rax-0x7d], cl; ret 0xeb10;
0x001566e1: adc [rdi], cl; xchg ah, bl; or [rax], eax; add [rax-0x7d], cl; ret 0xeb10;
0x001566e3: xchg ah, bl; or [rax], eax; add [rax-0x7d], cl; ret 0xeb10;
0x001566e5: or [rax], eax; add [rax-0x7d], cl; ret 0xeb10;
0x001567a3: adc [rdi], cl; xchg [rdx], bl; or [rax], eax; add [rax-0x7d], cl; ret 0x4910;
0x001567a5: xchg [rdx], bl; or [rax], eax; add [rax-0x7d], cl; ret 0x4910;
0x001567d1: adc [rdi], cl; xchg ah, ch; or [rax], al; add [rax-0x7d], cl; ret 0xeb10;
0x001567d3: xchg ah, ch; or [rax], al; add [rax-0x7d], cl; ret 0xeb10;
0x001567d4: in al, dx; or [rax], al; add [rax-0x7d], cl; ret 0xeb10;
0x001567d5: or [rax], al; add [rax-0x7d], cl; ret 0xeb10;
0x00156893: adc [rdi], cl; xchg [rdx], ch; or [rax], al; add [rax-0x7d], cl; ret 0x4910;
0x00156895: xchg [rdx], ch; or [rax], al; add [rax-0x7d], cl; ret 0x4910;
0x001568ba: ret 7;
0x00156b66: pop rdx; add eax, 0x83480000; ret 0x4910;
0x00156b91: adc [rdi], cl; xchg [rax*1-0x7cb80000], ch; ret 0xeb10;
0x00156b93: xchg [rax*1-0x7cb80000], ch; ret 0xeb10;
0x00156b95: add eax, 0x83480000; ret 0xeb10;
0x00156c85: add al, 0; add [rax-0x7d], cl; ret 0xeb10;
0x00156d71: adc [rdi], cl; xchg [rbx+rax], cl; add [rax-0x7d], cl; ret 0xeb10;
0x00156d73: xchg [rbx+rax], cl; add [rax-0x7d], cl; ret 0xeb10;
0x00156d74: add r8, [rax]; add [rax-0x7d], cl; ret 0xeb10;
0x00156d75: add eax, [rax]; add [rax-0x7d], cl; ret 0xeb10;
0x00156e61: adc [rdi], cl; xchg [rdx+rax], bl; add [rax-0x7d], cl; ret 0xeb10;
0x00156e63: xchg [rdx+rax], bl; add [rax-0x7d], cl; ret 0xeb10;
0x00156e64: pop rsp; add al, [rax]; add [rax-0x7d], cl; ret 0xeb10;
0x00156e65: add al, [rax]; add [rax-0x7d], cl; ret 0xeb10;
0x00156f51: adc [rdi], cl; xchg [rcx+rax], ch; add [rax-0x7d], cl; ret 0xeb10;
0x00156f53: xchg [rcx+rax], ch; add [rax-0x7d], cl; ret 0xeb10;
0x00156f54: insb [rdi], dx; add [rax], eax; add [rax-0x7d], cl; ret 0xeb10;
0x00156f55: add [rax], eax; add [rax-0x7d], cl; ret 0xeb10;
0x00157012: scasb [rdi]; add [rax], al; add [rax-0x7d], cl; ret 0x4910;
0x00157039: adc [rdi], cl; xchg [rax+rax-0x7cb80000], al; ret 0xeb10;
0x0015703b: xchg [rax+rax-0x7cb80000], al; ret 0xeb10;
0x0015703d: add [rax], al; add [rax-0x7d], cl; ret 0xeb10;
0x0015703f: add [rax-0x7d], cl; ret 0xeb10;
0x00157042: ret 0xeb10;
0x0015709c: xchg edx, eax; sub eax, edx; ret;
0x001570af: test dword ptr [rax+0xf], 0x2949d2bc; shl dword ptr [rsi+0xb], cl; movzx ecx, byte ptr [rsi+rdx]; movzx eax, byte ptr [rdi+rdx]; sub eax, ecx; ret;
0x001570b3: ror byte ptr [rcx+0x29], cl; shl dword ptr [rsi+0xb], cl; movzx ecx, byte ptr [rsi+rdx]; movzx eax, byte ptr [rdi+rdx]; sub eax, ecx; ret;
0x001570b6: shl dword ptr [rsi+0xb], cl; movzx ecx, byte ptr [rsi+rdx]; movzx eax, byte ptr [rdi+rdx]; sub eax, ecx; ret;
0x001570b9: movzx ecx, byte ptr [rsi+rdx]; movzx eax, byte ptr [rdi+rdx]; sub eax, ecx; ret;
0x001570bb: or al, 0x16; movzx eax, byte ptr [rdi+rdx]; sub eax, ecx; ret;
0x001570bd: movzx eax, byte ptr [rdi+rdx]; sub eax, ecx; ret;
0x001570bf: add al, 0x17; sub eax, ecx; ret;
0x001570c5: rol bl, 0x66; nop [rax+rax]; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret;
0x001570c7: nop [rax+rax]; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret;
0x001570c8: nop [rax+rax]; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret;
0x001570cc: add [rax], al; add [rax], al; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret;
0x001570cd: add [rax], al; add [rdi], cl; mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret;
0x001570ce: add [rax], al; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret;
0x001570cf: add [rdi], cl; mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret;
0x001570d0: movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret;
0x001570d1: mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret;
0x001570d3: movzx eax, byte ptr [rdi]; sub eax, ecx; ret;
0x001570d4: mov dh, 7; sub eax, ecx; ret;
0x001571e3: sub r9, rcx; lea r10, [rip+0x3bb13]; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x001571e4: sub ecx, ecx; lea r10, [rip+0x3bb13]; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x001571e5: leave; lea r10, [rip+0x3bb13]; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x001571e6: lea r10, [rip+0x3bb13]; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x001571e7: lea edx, [rip+0x3bb13]; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x001571e8: adc eax, 0x3bb13; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x001571e9: adc edi, [rbx+0x634f0003]; or al, 0x8a; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x001571ea: mov ebx, 0x634f0003; or al, 0x8a; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x0015734c: mov dh, 4; pi2fd mm6, [rsi-0x72b7f1ec]; mov ax, [0x91148b81048b0001]; sub eax, edx; ret;
0x0015734e: pi2fd mm6, [rsi-0x72b7f1ec]; mov ax, [0x91148b81048b0001]; sub eax, edx; ret;
0x00157355: or eax, 0x1a166; mov eax, [rcx+rax*4]; mov edx, [rcx+rdx*4]; sub eax, edx; ret;
0x00157356: mov ax, [0x91148b81048b0001]; sub eax, edx; ret;
0x00157357: mov eax, [0x91148b81048b0001]; sub eax, edx; ret;
0x0015766a: cmp ah, [rbx-0x3f]; sbb cl, [rdi]; xchg [rbp+rdx-0x7cb80000], bl; ret 0xe910;
0x0015766b: movsxd eax, ecx; sbb cl, [rdi]; xchg [rbp+rdx-0x7cb80000], bl; ret 0xe910;
0x0015766c: rcr dword ptr [rdx], 0xf; xchg [rbp+rdx-0x7cb80000], bl; ret 0xe910;
0x0015766d: sbb cl, [rdi]; xchg [rbp+rdx-0x7cb80000], bl; ret 0xe910;
0x0015766f: xchg [rbp+rdx-0x7cb80000], bl; ret 0xe910;
0x00157670: pushfq; adc eax, 0x83480000; ret 0xe910;
0x0015779e: outsb dx, [rsi]; adc al, 0; add [rax-0x7d], cl; ret 0x4910;
0x00157940: cmp ah, [rbx-0x3f]; sbb cl, [rdi]; xchg dh, al; adc al, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x00157941: movsxd eax, ecx; sbb cl, [rdi]; xchg dh, al; adc al, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x00157942: rcr dword ptr [rdx], 0xf; xchg dh, al; adc al, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x00157943: sbb cl, [rdi]; xchg dh, al; adc al, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x00157945: xchg dh, al; adc al, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x001579aa: cmp ah, [rbx-0x3f]; sbb cl, [rdi]; xchg [rdx+rdx], bl; add [rax-0x7d], cl; ret 0xe910;
0x001579ab: movsxd eax, ecx; sbb cl, [rdi]; xchg [rdx+rdx], bl; add [rax-0x7d], cl; ret 0xe910;
0x001579ac: rcr dword ptr [rdx], 0xf; xchg [rdx+rdx], bl; add [rax-0x7d], cl; ret 0xe910;
0x001579ad: sbb cl, [rdi]; xchg [rdx+rdx], bl; add [rax-0x7d], cl; ret 0xe910;
0x001579af: xchg [rdx+rdx], bl; add [rax-0x7d], cl; ret 0xe910;
0x001579b0: pop rsp; adc al, [rax]; add [rax-0x7d], cl; ret 0xe910;
0x00157ae0: cmp ah, [rbx-0x3f]; sbb cl, [rdi]; xchg [rsi], ah; adc [rax], eax; add [rax-0x7d], cl; ret 0x4910;
0x00157ae1: movsxd eax, ecx; sbb cl, [rdi]; xchg [rsi], ah; adc [rax], eax; add [rax-0x7d], cl; ret 0x4910;
0x00157ae2: rcr dword ptr [rdx], 0xf; xchg [rsi], ah; adc [rax], eax; add [rax-0x7d], cl; ret 0x4910;
0x00157ae3: sbb cl, [rdi]; xchg [rsi], ah; adc [rax], eax; add [rax-0x7d], cl; ret 0x4910;
0x00157ae5: xchg [rsi], ah; adc [rax], eax; add [rax-0x7d], cl; ret 0x4910;
0x00157ae6: adc [rax], eax; add [rax-0x7d], cl; ret 0x4910;
0x00157b4a: cmp ah, [rbx-0x3f]; sbb cl, [rdi]; xchg [rax+rdx-0x7cb80000], bh; ret 0xe910;
0x00157b4b: movsxd eax, ecx; sbb cl, [rdi]; xchg [rax+rdx-0x7cb80000], bh; ret 0xe910;
0x00157b4c: rcr dword ptr [rdx], 0xf; xchg [rax+rdx-0x7cb80000], bh; ret 0xe910;
0x00157b4d: sbb cl, [rdi]; xchg [rax+rdx-0x7cb80000], bh; ret 0xe910;
0x00157b4f: xchg [rax+rdx-0x7cb80000], bh; ret 0xe910;
0x00157e20: cmp ah, [rbx-0x3f]; sbb cl, [rdi]; xchg dh, ah; or eax, 0x83480000; ret 0x4910;
0x00157e21: movsxd eax, ecx; sbb cl, [rdi]; xchg dh, ah; or eax, 0x83480000; ret 0x4910;
0x00157e22: rcr dword ptr [rdx], 0xf; xchg dh, ah; or eax, 0x83480000; ret 0x4910;
0x00157e23: sbb cl, [rdi]; xchg dh, ah; or eax, 0x83480000; ret 0x4910;
0x00157e25: xchg dh, ah; or eax, 0x83480000; ret 0x4910;
0x00157e8a: cmp ah, [rbx-0x3f]; sbb cl, [rdi]; xchg [rbp+rcx], bh; add [rax-0x7d], cl; ret 0xe910;
0x00157e8b: movsxd eax, ecx; sbb cl, [rdi]; xchg [rbp+rcx], bh; add [rax-0x7d], cl; ret 0xe910;
0x00157e8c: rcr dword ptr [rdx], 0xf; xchg [rbp+rcx], bh; add [rax-0x7d], cl; ret 0xe910;
0x00157e8d: sbb cl, [rdi]; xchg [rbp+rcx], bh; add [rax-0x7d], cl; ret 0xe910;
0x00157e8f: xchg [rbp+rcx], bh; add [rax-0x7d], cl; ret 0xe910;
0x0015802a: cmp ah, [rbx-0x3f]; sbb cl, [rdi]; xchg ah, bl; or eax, [rax]; add [rax-0x7d], cl; ret 0xe910;
0x0015802b: movsxd eax, ecx; sbb cl, [rdi]; xchg ah, bl; or eax, [rax]; add [rax-0x7d], cl; ret 0xe910;
0x0015802c: rcr dword ptr [rdx], 0xf; xchg ah, bl; or eax, [rax]; add [rax-0x7d], cl; ret 0xe910;
0x0015802d: sbb cl, [rdi]; xchg ah, bl; or eax, [rax]; add [rax-0x7d], cl; ret 0xe910;
0x0015802f: xchg ah, bl; or eax, [rax]; add [rax-0x7d], cl; ret 0xe910;
0x00158166: cmpsb [rsi], [rdi]; or al, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x00158300: cmp ah, [rbx-0x3f]; sbb cl, [rdi]; xchg [rsi], al; or [rax], eax; add [rax-0x7d], cl; ret 0x4910;
0x00158301: movsxd eax, ecx; sbb cl, [rdi]; xchg [rsi], al; or [rax], eax; add [rax-0x7d], cl; ret 0x4910;
0x00158302: rcr dword ptr [rdx], 0xf; xchg [rsi], al; or [rax], eax; add [rax-0x7d], cl; ret 0x4910;
0x00158303: sbb cl, [rdi]; xchg [rsi], al; or [rax], eax; add [rax-0x7d], cl; ret 0x4910;
0x00158305: xchg [rsi], al; or [rax], eax; add [rax-0x7d], cl; ret 0x4910;
0x0015836a: cmp ah, [rbx-0x3f]; sbb cl, [rdi]; xchg [rax+rcx-0x7cb80000], bl; ret 0xe910;
0x0015836b: movsxd eax, ecx; sbb cl, [rdi]; xchg [rax+rcx-0x7cb80000], bl; ret 0xe910;
0x0015836c: rcr dword ptr [rdx], 0xf; xchg [rax+rcx-0x7cb80000], bl; ret 0xe910;
0x0015836d: sbb cl, [rdi]; xchg [rax+rcx-0x7cb80000], bl; ret 0xe910;
0x0015836f: xchg [rax+rcx-0x7cb80000], bl; ret 0xe910;
0x00158370: pushfq; or [rax], al; add [rax-0x7d], cl; ret 0xe910;
0x00158640: cmp ah, [rbx-0x3f]; sbb cl, [rdi]; xchg dh, al; add eax, 0x83480000; ret 0x4910;
0x00158641: movsxd eax, ecx; sbb cl, [rdi]; xchg dh, al; add eax, 0x83480000; ret 0x4910;
0x00158642: rcr dword ptr [rdx], 0xf; xchg dh, al; add eax, 0x83480000; ret 0x4910;
0x00158643: sbb cl, [rdi]; xchg dh, al; add eax, 0x83480000; ret 0x4910;
0x00158645: xchg dh, al; add eax, 0x83480000; ret 0x4910;
0x00158646: mov byte ptr [rip-0x7cb80000], 0xc2; adc [rcx-0x7d], cl; ret 0x7f10;
0x001586aa: cmp ah, [rbx-0x3f]; sbb cl, [rdi]; xchg [rbp+rax], bl; add [rax-0x7d], cl; ret 0xe910;
0x001586ab: movsxd eax, ecx; sbb cl, [rdi]; xchg [rbp+rax], bl; add [rax-0x7d], cl; ret 0xe910;
0x001586ac: rcr dword ptr [rdx], 0xf; xchg [rbp+rax], bl; add [rax-0x7d], cl; ret 0xe910;
0x001586ad: sbb cl, [rdi]; xchg [rbp+rax], bl; add [rax-0x7d], cl; ret 0xe910;
0x001586af: xchg [rbp+rax], bl; add [rax-0x7d], cl; ret 0xe910;
0x001586b0: pop rsp; add eax, 0x83480000; ret 0xe910;
0x001587e0: cmp ah, [rbx-0x3f]; sbb cl, [rdi]; xchg [rsi], ah; add al, 0; add [rax-0x7d], cl; ret 0x4910;
0x001587e1: movsxd eax, ecx; sbb cl, [rdi]; xchg [rsi], ah; add al, 0; add [rax-0x7d], cl; ret 0x4910;
0x001587e2: rcr dword ptr [rdx], 0xf; xchg [rsi], ah; add al, 0; add [rax-0x7d], cl; ret 0x4910;
0x001587e3: sbb cl, [rdi]; xchg [rsi], ah; add al, 0; add [rax-0x7d], cl; ret 0x4910;
0x0015884a: cmp ah, [rbx-0x3f]; sbb cl, [rdi]; xchg [rbx+rax-0x7cb80000], bh; ret 0xe910;
0x0015884b: movsxd eax, ecx; sbb cl, [rdi]; xchg [rbx+rax-0x7cb80000], bh; ret 0xe910;
0x0015884c: rcr dword ptr [rdx], 0xf; xchg [rbx+rax-0x7cb80000], bh; ret 0xe910;
0x0015884d: sbb cl, [rdi]; xchg [rbx+rax-0x7cb80000], bh; ret 0xe910;
0x0015884f: xchg [rbx+rax-0x7cb80000], bh; ret 0xe910;
0x00158b20: cmp ah, [rbx-0x3f]; sbb cl, [rdi]; xchg dh, ah; add [rax], al; add [rax-0x7d], cl; ret 0x4910;
0x00158b21: movsxd eax, ecx; sbb cl, [rdi]; xchg dh, ah; add [rax], al; add [rax-0x7d], cl; ret 0x4910;
0x00158b22: rcr dword ptr [rdx], 0xf; xchg dh, ah; add [rax], al; add [rax-0x7d], cl; ret 0x4910;
0x00158b23: sbb cl, [rdi]; xchg dh, ah; add [rax], al; add [rax-0x7d], cl; ret 0x4910;
0x00158b25: xchg dh, ah; add [rax], al; add [rax-0x7d], cl; ret 0x4910;
0x00158b8a: cmp ah, [rbx-0x3f]; sbb cl, [rdi]; xchg [rax+rax], bh; add [rax-0x7d], cl; ret 0xe910;
0x00158b8b: movsxd eax, ecx; sbb cl, [rdi]; xchg [rax+rax], bh; add [rax-0x7d], cl; ret 0xe910;
0x00158b8c: rcr dword ptr [rdx], 0xf; xchg [rax+rax], bh; add [rax-0x7d], cl; ret 0xe910;
0x00158b8d: sbb cl, [rdi]; xchg [rax+rax], bh; add [rax-0x7d], cl; ret 0xe910;
0x00158b8f: xchg [rax+rax], bh; add [rax-0x7d], cl; ret 0xe910;
0x00158c2a: or eax, 0x18891; mov edx, [rcx+rdx*4]; mov eax, [rcx+rax*4]; sub eax, edx; ret;
0x00158c5e: adc eax, 0x1885d; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret;
0x00158c78: adc eax, 0x18843; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret;
0x00158db3: sub r9, rcx; lea r10, [rip+0x39f83]; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x00158db4: sub ecx, ecx; lea r10, [rip+0x39f83]; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x00158db5: leave; lea r10, [rip+0x39f83]; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x00158db6: lea r10, [rip+0x39f83]; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x00158db7: lea edx, [rip+0x39f83]; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x00158db8: adc eax, 0x39f83; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x00158dba: lahf; add eax, [rax]; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x00158dbb: add eax, [rax]; movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x00158dbc: add [rdi+0x63], cl; or al, 0x8a; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x00158dbd: movsxd r9, [r10+r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x00158dbe: movsxd ecx, [rdx+rcx*4]; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x00158dbf: or al, 0x8a; pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x00158dc1: pcmpeqb xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x00158dc2: pcmpeqb mm0, mm1; lea r10, [r10+r9]; jmp r10;
0x00158f5e: or eax, 0x1855d; mov eax, [rcx+rax*4]; mov edx, [rcx+rdx*4]; sub eax, edx; ret;
0x00158f5f: pop rbp; test [rcx], eax; add [rbx+0x148b8104], cl; xchg ecx, eax; sub eax, edx; ret;
0x00158f60: test [rcx], eax; add [rbx+0x148b8104], cl; xchg ecx, eax; sub eax, edx; ret;
0x00159090: popfq; sbb eax, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x00159091: sbb eax, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x00159109: sbb eax, [rax]; add [rax-0x7d], cl; ret 0xe910;
0x00159271: sbb [rax], eax; add [rax-0x7d], cl; ret 0x4910;
0x001592e8: sbb [r8], r8d; add [rax-0x7d], cl; ret 0xe910;
0x001592e9: sbb [rax], eax; add [rax-0x7d], cl; ret 0xe910;
0x00159698: xchg ebp, eax; adc eax, 0x83480000; ret 0xe910;
0x00159879: adc eax, [rax]; add [rax-0x7d], cl; ret 0xe910;
0x001599e0: adc r8b, [r8]; add [rax-0x7d], cl; ret 0x4910;
0x001599e1: adc al, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x00159a55: adc [rdi], cl; xchg ch, dl; adc [rax], eax; add [rax-0x7d], cl; ret 0xe910;
0x00159a57: xchg ch, dl; adc [rax], eax; add [rax-0x7d], cl; ret 0xe910;
0x00159bc0: insd [rdi], dx; adc [rax], al; add [rax-0x7d], cl; ret 0x4910;
0x00159f80: lodsd [rsi]; or al, 0; add [rax-0x7d], cl; ret 0x4910;
0x0015a15d: adc [rdi], cl; xchg ch, cl; or al, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x0015a15f: xchg ch, cl; or al, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x0015a1d8: push rbp; or al, [rax]; add [rax-0x7d], cl; ret 0xe910;
0x0015a33d: adc [rdi], cl; xchg ch, ch; or [rax], al; add [rax-0x7d], cl; ret 0x4910;
0x0015a33f: xchg ch, ch; or [rax], al; add [rax-0x7d], cl; ret 0x4910;
0x0015a340: in eax, dx; or [rax], al; add [rax-0x7d], cl; ret 0x4910;
0x0015a8e0: add r8, [r8]; add [rax-0x7d], cl; ret 0x4910;
0x0015a955: adc [rdi], cl; xchg ch, dl; add al, [rax]; add [rax-0x7d], cl; ret 0xe910;
0x0015a957: xchg ch, dl; add al, [rax]; add [rax-0x7d], cl; ret 0xe910;
0x0015aac0: insd [rdi], dx; add [rax], eax; add [rax-0x7d], cl; ret 0x4910;
0x0015aac7: adc [rcx-0x7d], cl; ret 0xf10;
0x0015ab35: adc [rdi], cl; xchg ch, dh; add [rax], al; add [rax-0x7d], cl; ret 0xe910;
0x0015ab37: xchg ch, dh; add [rax], al; add [rax-0x7d], cl; ret 0xe910;
0x0015ab38: cmc; add [rax], al; add [rax-0x7d], cl; ret 0xe910;
0x0015abeb: add [rdx-0x33f272b8], edx; push 0x148b0001; xchg ecx, eax; mov eax, [rcx+rax*4]; sub eax, edx; ret;
0x0015abef: or eax, 0x168cc; mov edx, [rcx+rdx*4]; mov eax, [rcx+rax*4]; sub eax, edx; ret;
0x0015abf0: int3; push 0x148b0001; xchg ecx, eax; mov eax, [rcx+rax*4]; sub eax, edx; ret;
0x0015abf1: push 0x148b0001; xchg ecx, eax; mov eax, [rcx+rax*4]; sub eax, edx; ret;
0x0015ac23: adc eax, 0x16898; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret;
0x0015ac24: cwde; push 0xc8b0001; mov cl, [rbx-0x37d67dfc]; ret;
0x0015ac48: adc eax, 0x16873; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret;
0x0015ac4a: push 0xc8b0001; mov cl, [rbx-0x37d67dfc]; ret;
0x0015aca3: adc [rsi+0xf], esp; outsd dx, [rsi]; add [rsi+0xf], ah; cmp [rax], al; ret 0xf66;
0x0015aca6: outsd dx, [rsi]; add [rsi+0xf], ah; cmp [rax], al; ret 0xf66;
0x0015aca7: add [rsi+0xf], ah; cmp [rax], al; ret 0xf66;
0x0015acaa: cmp [rax], al; ret 0xf66;
0x0015acca: movsxd rax, ecx; ret;
0x0015accb: movsxd eax, ecx; ret;
0x0015acf5: test byte ptr [rbp+0x48d674d2], 0x63; leave; add rax, rcx; sub rax, rdi; ret;
0x0015acf7: shl byte ptr [rsi+rdx*8+0x48], cl; movsxd ecx, ecx; add rax, rcx; sub rax, rdi; ret;
0x0015ad6d: nop [rax]; pcmpistri xmm3, xmm3, 0x3a; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret;
0x0015ad70: pcmpistri xmm3, xmm3, 0x3a; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret;
0x0015ad72: cmp ah, [rbx-0x25]; cmp cl, [rax+0x63]; leave; add rax, rcx; sub rax, rdi; ret;
0x0015ad73: movsxd ebx, ebx; cmp cl, [rax+0x63]; leave; add rax, rcx; sub rax, rdi; ret;
0x0015ad74: fstp tbyte ptr [rdx], st; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret;
0x0015ad75: cmp cl, [rax+0x63]; leave; add rax, rcx; sub rax, rdi; ret;
0x0015ad8b: rol esi, 0xf4; call qword ptr [rax+0xf003e80];
0x0015adc7: add [rax+0x63], cl; ret 0x8348;
0x0015ae34: xchg edx, eax; ret 0xf40;
0x0015ae35: ret 0xf40;
0x0015aea5: nop [rax]; movsxd rax, ecx; add rax, rdi; ret;
0x0015aea7: add [rax+0x63], cl; ror dword ptr [rax+1], 0xf8; ret;
0x0015aea8: movsxd rax, ecx; add rax, rdi; ret;
0x0015aea9: movsxd eax, ecx; add rax, rdi; ret;
0x0015aeaa: ror dword ptr [rax+1], 0xf8; ret;
0x0015aebb: xor esi, eax; hlt; call qword ptr [rax+0xf003e80];
0x0015aebd: hlt; call qword ptr [rax+0xf003e80];
0x0015aebe: call qword ptr [rax+0xf003e80];
0x0015af1f: ret 0xe7f;
0x0015af6c: jmp qword ptr [rsi+0x41];
0x0015afb6: cmp ah, [rbx]; adc dh, [rbx-0xc]; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret;
0x0015afb7: movsxd eax, [rax]; adc dh, [rbx-0xc]; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret;
0x0015afb9: adc dh, [rbx-0xc]; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret;
0x0015afbb: hlt; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret;
0x0015afbc: movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret;
0x0015afbd: movsxd ecx, ecx; add rax, rcx; sub rax, rdi; ret;
0x0015afbe: leave; add rax, rcx; sub rax, rdi; ret;
0x0015afbf: add rax, rcx; sub rax, rdi; ret;
0x0015afc0: add eax, ecx; sub rax, rdi; ret;
0x0015afc1: enter 0x2948, 0xf8; ret;
0x0015afc2: sub rax, rdi; ret;
0x0015afc3: sub eax, edi; ret;
0x0015afed: hlt; call qword ptr [rax-0x2dce0777];
0x0015afee: call qword ptr [rax-0x2dce0777];
0x0015b03e: add [rax-0x2e43f00d], dl; movzx eax, byte ptr [rdi+rdx+0x20]; movzx edx, byte ptr [rsi+rdx+0x20]; sub eax, edx; vzeroupper; ret;
0x0015b040: tzcnt edx, ecx; movzx eax, byte ptr [rdi+rdx+0x20]; movzx edx, byte ptr [rsi+rdx+0x20]; sub eax, edx; vzeroupper; ret;
0x0015b041: bsf edx, ecx; movzx eax, byte ptr [rdi+rdx+0x20]; movzx edx, byte ptr [rsi+rdx+0x20]; sub eax, edx; vzeroupper; ret;
0x0015b044: movzx eax, byte ptr [rdi+rdx+0x20]; movzx edx, byte ptr [rsi+rdx+0x20]; sub eax, edx; vzeroupper; ret;
0x0015b049: movzx edx, byte ptr [rsi+rdx+0x20]; sub eax, edx; vzeroupper; ret;
0x0015b05e: add [rax-0x2e43f00d], dl; movzx eax, byte ptr [rdi+rdx+0x40]; movzx edx, byte ptr [rsi+rdx+0x40]; sub eax, edx; vzeroupper; ret;
0x0015b060: tzcnt edx, ecx; movzx eax, byte ptr [rdi+rdx+0x40]; movzx edx, byte ptr [rsi+rdx+0x40]; sub eax, edx; vzeroupper; ret;
0x0015b061: bsf edx, ecx; movzx eax, byte ptr [rdi+rdx+0x40]; movzx edx, byte ptr [rsi+rdx+0x40]; sub eax, edx; vzeroupper; ret;
0x0015b064: movzx eax, byte ptr [rdi+rdx+0x40]; movzx edx, byte ptr [rsi+rdx+0x40]; sub eax, edx; vzeroupper; ret;
0x0015b069: movzx edx, byte ptr [rsi+rdx+0x40]; sub eax, edx; vzeroupper; ret;
0x0015b07e: add [rax-0x2e43f00d], dl; movzx eax, byte ptr [rdi+rdx+0x60]; movzx edx, byte ptr [rsi+rdx+0x60]; sub eax, edx; vzeroupper; ret;
0x0015b080: tzcnt edx, ecx; movzx eax, byte ptr [rdi+rdx+0x60]; movzx edx, byte ptr [rsi+rdx+0x60]; sub eax, edx; vzeroupper; ret;
0x0015b081: bsf edx, ecx; movzx eax, byte ptr [rdi+rdx+0x60]; movzx edx, byte ptr [rsi+rdx+0x60]; sub eax, edx; vzeroupper; ret;
0x0015b084: movzx eax, byte ptr [rdi+rdx+0x60]; movzx edx, byte ptr [rsi+rdx+0x60]; sub eax, edx; vzeroupper; ret;
0x0015b089: movzx edx, byte ptr [rsi+rdx+0x60]; sub eax, edx; vzeroupper; ret;
0x0015b1a2: sbb eax, 0xcfbc0ff3; movzx eax, byte ptr [rax+rcx]; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; vzeroupper; ret;
0x0015b1a3: tzcnt ecx, edi; movzx eax, byte ptr [rax+rcx]; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; vzeroupper; ret;
0x0015b1cc: tzcnt edi, ecx; movzx eax, byte ptr [rax+rdi+0x20]; movzx edx, byte ptr [rdx+rdi+0x20]; sub eax, edx; vzeroupper; ret;
0x0015b1cd: bsf edi, ecx; movzx eax, byte ptr [rax+rdi+0x20]; movzx edx, byte ptr [rdx+rdi+0x20]; sub eax, edx; vzeroupper; ret;
0x0015b1ce: mov esp, 0x44b60ff9; cmp [rax], ah; movzx edx, byte ptr [rdx+rdi+0x20]; sub eax, edx; vzeroupper; ret;
0x0015b1cf: stc; movzx eax, byte ptr [rax+rdi+0x20]; movzx edx, byte ptr [rdx+rdi+0x20]; sub eax, edx; vzeroupper; ret;
0x0015b1d0: movzx eax, byte ptr [rax+rdi+0x20]; movzx edx, byte ptr [rdx+rdi+0x20]; sub eax, edx; vzeroupper; ret;
0x0015b1d1: mov dh, 0x44; cmp [rax], ah; movzx edx, byte ptr [rdx+rdi+0x20]; sub eax, edx; vzeroupper; ret;
0x0015b1d2: cmp [rax], r12b; movzx edx, byte ptr [rdx+rdi+0x20]; sub eax, edx; vzeroupper; ret;
0x0015b1d3: cmp [rax], ah; movzx edx, byte ptr [rdx+rdi+0x20]; sub eax, edx; vzeroupper; ret;
0x0015b1d4: and [rdi], cl; mov dh, 0x54; cmp ah, [rax]; sub eax, edx; vzeroupper; ret;
0x0015b1d5: movzx edx, byte ptr [rdx+rdi+0x20]; sub eax, edx; vzeroupper; ret;
0x0015b1d6: mov dh, 0x54; cmp ah, [rax]; sub eax, edx; vzeroupper; ret;
0x0015b1d7: push rsp; cmp ah, [rax]; sub eax, edx; vzeroupper; ret;
0x0015b1d8: cmp ah, [rax]; sub eax, edx; vzeroupper; ret;
0x0015b1ec: tzcnt edi, ecx; movzx eax, byte ptr [rax+rdi+0x40]; movzx edx, byte ptr [rdx+rdi+0x40]; sub eax, edx; vzeroupper; ret;
0x0015b1ed: bsf edi, ecx; movzx eax, byte ptr [rax+rdi+0x40]; movzx edx, byte ptr [rdx+rdi+0x40]; sub eax, edx; vzeroupper; ret;
0x0015b1ef: stc; movzx eax, byte ptr [rax+rdi+0x40]; movzx edx, byte ptr [rdx+rdi+0x40]; sub eax, edx; vzeroupper; ret;
0x0015b1f0: movzx eax, byte ptr [rax+rdi+0x40]; movzx edx, byte ptr [rdx+rdi+0x40]; sub eax, edx; vzeroupper; ret;
0x0015b1f5: movzx edx, byte ptr [rdx+rdi+0x40]; sub eax, edx; vzeroupper; ret;
0x0015b208: tzcnt ecx, esi; movzx eax, byte ptr [rax+rcx+0x60]; movzx edx, byte ptr [rdx+rcx+0x60]; sub eax, edx; vzeroupper; ret;
0x0015b209: bsf ecx, esi; movzx eax, byte ptr [rax+rcx+0x60]; movzx edx, byte ptr [rdx+rcx+0x60]; sub eax, edx; vzeroupper; ret;
0x0015b20c: movzx eax, byte ptr [rax+rcx+0x60]; movzx edx, byte ptr [rdx+rcx+0x60]; sub eax, edx; vzeroupper; ret;
0x0015b211: movzx edx, byte ptr [rdx+rcx+0x60]; sub eax, edx; vzeroupper; ret;
0x0015b272: tzcnt rcx, rdi; movzx eax, byte ptr [rax+rcx]; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; vzeroupper; ret;
0x0015b273: bsf rcx, rdi; movzx eax, byte ptr [rax+rcx]; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; vzeroupper; ret;
0x0015b274: bsf ecx, edi; movzx eax, byte ptr [rax+rcx]; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; vzeroupper; ret;
0x0015b2ee: ror dword ptr [rcx+rax-0x3f], 1; movzx eax, byte ptr [rax+rcx+0x40]; movzx edx, byte ptr [rdx+rcx+0x40]; sub eax, edx; vzeroupper; ret;
0x0015b2ef: add rcx, r8; movzx eax, byte ptr [rax+rcx+0x40]; movzx edx, byte ptr [rdx+rcx+0x40]; sub eax, edx; vzeroupper; ret;
0x0015b2f0: add ecx, eax; movzx eax, byte ptr [rax+rcx+0x40]; movzx edx, byte ptr [rdx+rcx+0x40]; sub eax, edx; vzeroupper; ret;
0x0015b2f2: movzx eax, byte ptr [rax+rcx+0x40]; movzx edx, byte ptr [rdx+rcx+0x40]; sub eax, edx; vzeroupper; ret;
0x0015b2f7: movzx edx, byte ptr [rdx+rcx+0x40]; sub eax, edx; vzeroupper; ret;
0x0015b30f: add [rcx], ch; enter 0x1d75, 0x83; ret 0x8101;
0x0015b311: enter 0x1d75, 0x83; ret 0x8101;
0x0015b32c: shl byte ptr [rbp-0x1f], 0x29; enter 0xf8c5, 0x77; ret;
0x0015b346: tzcnt edx, ecx; movzx eax, byte ptr [rdi+rdx]; movzx edx, byte ptr [rsi+rdx]; sub eax, edx; vzeroupper; ret;
0x0015b347: bsf edx, ecx; movzx eax, byte ptr [rdi+rdx]; movzx edx, byte ptr [rsi+rdx]; sub eax, edx; vzeroupper; ret;
0x0015b417: ret 0xf04;
0x0015b47d: or dword ptr [rsi+0xf000003], 0xffffffb6; add al, 0x17; movzx edx, byte ptr [rsi+rdx]; sub eax, edx; vzeroupper; ret;
0x0015b4df: add [rax], al; movzx eax, byte ptr [rdi+rdx]; movzx edx, byte ptr [rsi+rdx]; sub eax, edx; vzeroupper; ret;
0x0015b589: add dword ptr [rdx], 0; add [rax+5], cl; add byte ptr [rax], 0; add [rax-0x7f], cl; ret 0x80;
0x0015b685: add [rax], al; movzx eax, byte ptr [rax+rdi]; movzx edx, byte ptr [rdx+rdi]; sub eax, edx; vzeroupper; ret;
0x0015b687: movzx eax, byte ptr [rax+rdi]; movzx edx, byte ptr [rdx+rdi]; sub eax, edx; vzeroupper; ret;
0x0015b689: add al, 0x38; movzx edx, byte ptr [rdx+rdi]; sub eax, edx; vzeroupper; ret;
0x0015b68b: movzx edx, byte ptr [rdx+rdi]; sub eax, edx; vzeroupper; ret;
0x0015b68d: adc al, 0x3a; sub eax, edx; vzeroupper; ret;
0x0015b703: adc al, ah; mov eax, [0xdafdc520124c7465]; ret 0xf5c5;
0x0015b705: mov eax, [0xdafdc520124c7465]; ret 0xf5c5;
0x0015b70e: ret 0xf5c5;
0x0015b73e: add [rax], al; movzx eax, byte ptr [rax+rcx]; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; vzeroupper; ret;
0x0015b7b6: pop rcx; movzx eax, byte ptr [rax+rcx]; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; vzeroupper; ret;
0x0015b7b7: movzx eax, byte ptr [rax+rcx]; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; vzeroupper; ret;
0x0015b7b9: add al, 8; movzx edx, byte ptr [rdx+rcx]; sub eax, edx; vzeroupper; ret;
0x0015b7bb: movzx edx, byte ptr [rdx+rcx]; sub eax, edx; vzeroupper; ret;
0x0015b7bd: adc al, 0xa; sub eax, edx; vzeroupper; ret;
0x0015b7db: add [rax], al; add [rax], al; add [rcx], ch; enter 0x2275, 0x83; ret 0x8101;
0x0015b7dd: add [rax], al; add [rcx], ch; enter 0x2275, 0x83; ret 0x8101;
0x0015b7df: add [rcx], ch; enter 0x2275, 0x83; ret 0x8101;
0x0015b7e1: enter 0x2275, 0x83; ret 0x8101;
0x0015b7e5: ret 0x8101;
0x0015b801: shl byte ptr [rbp-0x24], 0x29; enter 0xf8c5, 0x77; ret;
0x0015b803: fsubr st, qword ptr [rcx]; enter 0xf8c5, 0x77; ret;
0x0015b80a: nop [rax+rax]; xor eax, eax; vzeroupper; ret;
0x0015b80b: nop [rax+rax]; xor eax, eax; vzeroupper; ret;
0x0015b80d: add [rax], r8b; xor eax, eax; vzeroupper; ret;
0x0015b816: nop [rax+rax]; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; vzeroupper; ret;
0x0015b817: nop [rax+rax]; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; vzeroupper; ret;
0x0015b818: nop [rax+rax]; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; vzeroupper; ret;
0x0015b81e: add [rax], al; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; vzeroupper; ret;
0x0015b81f: add [rdi], cl; mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; vzeroupper; ret;
0x0015b820: movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; vzeroupper; ret;
0x0015b821: mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; vzeroupper; ret;
0x0015b823: movzx eax, byte ptr [rdi]; sub eax, ecx; vzeroupper; ret;
0x0015b824: mov dh, 7; sub eax, ecx; vzeroupper; ret;
0x0015b83f: fidiv st, dword ptr [rbx-0x32]; movzx eax, byte ptr [rdi+rdx]; movzx edx, byte ptr [rsi+rdx]; sub eax, edx; vzeroupper; ret;
0x0015b842: movzx eax, byte ptr [rdi+rdx]; movzx edx, byte ptr [rsi+rdx]; sub eax, edx; vzeroupper; ret;
0x0015b844: add al, 0x17; movzx edx, byte ptr [rsi+rdx]; sub eax, edx; vzeroupper; ret;
0x0015b846: movzx edx, byte ptr [rsi+rdx]; sub eax, edx; vzeroupper; ret;
0x0015b848: adc al, 0x16; sub eax, edx; vzeroupper; ret;
0x0015b8a5: ret 0x8310;
0x0015b8e3: ret 0x8308;
0x0015b91e: ret 0x4c04;
0x0015b93d: test [rsi+0x29fffffe], ebx; enter 0xf8c5, 0x77; ret;
0x0015bc62: shl byte ptr [rbx+rbx-0xd], 0xf; mov esp, 0xf80148c0; add rax, rcx; vzeroupper; ret;
0x0015bc64: sbb esi, ebx; bsf eax, eax; add rax, rdi; add rax, rcx; vzeroupper; ret;
0x0015bc65: tzcnt eax, eax; add rax, rdi; add rax, rcx; vzeroupper; ret;
0x0015bc66: bsf eax, eax; add rax, rdi; add rax, rcx; vzeroupper; ret;
0x0015bc67: mov esp, 0xf80148c0; add rax, rcx; vzeroupper; ret;
0x0015bc68: ror byte ptr [rax+1], 0xf8; add rax, rcx; vzeroupper; ret;
0x0015bcf6: cmp [rax-0x7f], ecx; mov dword ptr [rax-0x15000000], 0xbc0ff3d0; ror byte ptr [rax+1], 0xf8; vzeroupper; ret;
0x0015bcf9: mov dword ptr [rax-0x15000000], 0xbc0ff3d0; ror byte ptr [rax+1], 0xf8; vzeroupper; ret;
0x0015bcfd: add bl, ch; shl bl, 1; bsf eax, eax; add rax, rdi; vzeroupper; ret;
0x0015bcff: shl bl, 1; bsf eax, eax; add rax, rdi; vzeroupper; ret;
0x0015bd97: and [rax-0x7d], cl; ret 0x4820;
0x0015bd9a: ret 0x4820;
0x0015be6c: ror byte ptr [rdi], 0x85; sub eax, 0xc5000001; std; xlat [rbx]; ret;
0x0015be6e: test [rip-0x3affffff], ebp; std; xlat [rbx]; ret;
0x0015be6f: sub eax, 0xc5000001; std; xlat [rbx]; ret;
0x0015be70: add [rax], eax; add ch, al; std; xlat [rbx]; ret;
0x0015be72: add ch, al; std; xlat [rbx]; ret;
0x0015be7a: test [rcx], edx; add [rax], eax; add ch, al; std; xlat [rbx]; ret 0xc085;
0x0015be7c: add [rax], eax; add ch, al; std; xlat [rbx]; ret 0xc085;
0x0015be7e: add ch, al; std; xlat [rbx]; ret 0xc085;
0x0015be89: add [rax], al; vpmovmskb eax, ymm1; bsr eax, eax; add rax, rdi; vzeroupper; ret;
0x0015be8b: vpmovmskb eax, ymm1; bsr eax, eax; add rax, rdi; vzeroupper; ret;
0x0015be8c: std; xlat [rbx]; ror dword ptr [rdi], 0xbd; ror byte ptr [rax+1], 0xf8; vzeroupper; ret;
0x0015be8d: xlat [rbx]; ror dword ptr [rdi], 0xbd; ror byte ptr [rax+1], 0xf8; vzeroupper; ret;
0x0015be8e: ror dword ptr [rdi], 0xbd; ror byte ptr [rax+1], 0xf8; vzeroupper; ret;
0x0015bed0: pop rdi; and ch, al; std; xlat [rbx]; ret;
0x0015bed1: and ch, al; std; xlat [rbx]; ret;
0x0015bef4: add [rax], al; add [rdi], cl; mov ebp, 0xea8148c0; add byte ptr [rax], 0; add [rax+1], cl; ret 0x8c0f;
0x0015bef6: add [rdi], cl; mov ebp, 0xea8148c0; add byte ptr [rax], 0; add [rax+1], cl; ret 0x8c0f;
0x0015bef8: mov ebp, 0xea8148c0; add byte ptr [rax], 0; add [rax+1], cl; ret 0x8c0f;
0x0015bef9: ror byte ptr [rax-0x7f], 0xea; add byte ptr [rax], 0; add [rax+1], cl; ret 0x8c0f;
0x0015befd: add byte ptr [rax], 0; add [rax+1], cl; ret 0x8c0f;
0x0015befe: add [rax], al; add [rax+1], cl; ret 0x8c0f;
0x0015bf00: add [rax+1], cl; ret 0x8c0f;
0x0015bf05: mov esi, fs; add [rax], al; add [rax+1], cl; clc; vzeroupper; ret;
0x0015bf06: out 0, al; add [rax], al; add rax, rdi; vzeroupper; ret;
0x0015bf07: add [rax], al; add [rax+1], cl; clc; vzeroupper; ret;
0x0015bf08: add [rax], al; add rax, rdi; vzeroupper; ret;
0x0015bf09: add [rax+1], cl; clc; vzeroupper; ret;
0x0015bf54: ret 0x8c0f;
0x0015bf56: mov [rbp-0x7d000000], ss; rol byte ptr [rax+0x48], 1; clc; vzeroupper; ret;
0x0015bf57: xchg ebp, eax; add [rax], al; add [rbx+0x14840c0], al; clc; vzeroupper; ret;
0x0015bf58: add [rax], al; add [rbx+0x14840c0], al; clc; vzeroupper; ret;
0x0015bf59: add [rax], al; add eax, 0x40; add rax, rdi; vzeroupper; ret;
0x0015bf5a: add [rbx+0x14840c0], al; clc; vzeroupper; ret;
0x0015bf66: nop [rax+rax]; bsr eax, eax; add rax, rdi; vzeroupper; ret;
0x0015bf67: nop [rax+rax]; bsr eax, eax; add rax, rdi; vzeroupper; ret;
0x0015bf68: nop [rax+rax]; bsr eax, eax; add rax, rdi; vzeroupper; ret;
0x0015bf6b: add [rax], al; add [rax], al; add [rdi], cl; mov ebp, 0xf80148c0; vzeroupper; ret;
0x0015bf6c: add [rax], al; add [rax], al; bsr eax, eax; add rax, rdi; vzeroupper; ret;
0x0015bf6d: add [rax], al; add [rdi], cl; mov ebp, 0xf80148c0; vzeroupper; ret;
0x0015bf6e: add [rax], al; bsr eax, eax; add rax, rdi; vzeroupper; ret;
0x0015bf6f: add [rdi], cl; mov ebp, 0xf80148c0; vzeroupper; ret;
0x0015bf7a: nop [rax+rax]; bsr eax, eax; add eax, 0x20; add rax, rdi; vzeroupper; ret;
0x0015bf7b: nop [rax+rax]; bsr eax, eax; add eax, 0x20; add rax, rdi; vzeroupper; ret;
0x0015bf7d: add [rax], r8b; bsr eax, eax; add eax, 0x20; add rax, rdi; vzeroupper; ret;
0x0015bf7e: add [rax], al; bsr eax, eax; add eax, 0x20; add rax, rdi; vzeroupper; ret;
0x0015bf7f: add [rdi], cl; mov ebp, 0x20c083c0; add rax, rdi; vzeroupper; ret;
0x0015bf80: bsr eax, eax; add eax, 0x20; add rax, rdi; vzeroupper; ret;
0x0015bf81: mov ebp, 0x20c083c0; add rax, rdi; vzeroupper; ret;
0x0015bf82: rol byte ptr [rbx+0x14820c0], 0xf8; vzeroupper; ret;
0x0015bf8d: nop [rax]; bsr eax, eax; add eax, 0x40; add rax, rdi; vzeroupper; ret;
0x0015bf8f: add [rdi], cl; mov ebp, 0x40c083c0; add rax, rdi; vzeroupper; ret;
0x0015bf90: bsr eax, eax; add eax, 0x40; add rax, rdi; vzeroupper; ret;
0x0015bf91: mov ebp, 0x40c083c0; add rax, rdi; vzeroupper; ret;
0x0015bf92: rol byte ptr [rbx+0x14840c0], 0xf8; vzeroupper; ret;
0x0015bf9d: nop [rax]; bsr eax, eax; add eax, 0x60; add rax, rdi; ret;
0x0015bf9f: add [rdi], cl; mov ebp, 0x60c083c0; add rax, rdi; ret;
0x0015bfa0: bsr eax, eax; add eax, 0x60; add rax, rdi; ret;
0x0015bfa1: mov ebp, 0x60c083c0; add rax, rdi; ret;
0x0015bfa2: rol byte ptr [rbx+0x14860c0], 0xf8; ret;
0x0015bfa3: add eax, 0x60; add rax, rdi; ret;
0x0015bfa4: shl byte ptr [rax+0x48], 1; clc; ret;
0x0015bfa6: add rax, rdi; ret;
0x0015bfa7: add eax, edi; ret;
0x0015bfb9: ret 0x347c;
0x0015bfbb: xor al, 0x83; shl byte ptr [rax], 0x48; add eax, edi; vzeroupper; ret;
0x0015bfcb: add [rax], al; add [rax], al; add [rdi], cl; mov ebp, 0xea8348c0; and [rax+1], cl; ret 0x147c;
0x0015bfcd: add [rax], al; add [rdi], cl; mov ebp, 0xea8348c0; and [rax+1], cl; ret 0x147c;
0x0015bfcf: add [rdi], cl; mov ebp, 0xea8348c0; and [rax+1], cl; ret 0x147c;
0x0015bfd1: mov ebp, 0xea8348c0; and [rax+1], cl; ret 0x147c;
0x0015bfd2: ror byte ptr [rax-0x7d], 0xea; and [rax+1], cl; ret 0x147c;
0x0015bfd6: and [rax+1], cl; ret 0x147c;
0x0015bfd9: ret 0x147c;
0x0015bfdb: adc al, 0x83; shl byte ptr [rax+0x48], 1; clc; vzeroupper; ret;
0x0015bfe6: nop [rax+rax]; vzeroupper; xor eax, eax; ret;
0x0015bfe7: nop [rax+rax]; vzeroupper; xor eax, eax; ret;
0x0015bfe8: nop [rax+rax]; vzeroupper; xor eax, eax; ret;
0x0015bfea: test [rax], al; add [rax], al; add [rax], al; vzeroupper; xor eax, eax; ret;
0x0015bfec: add [rax], al; add [rax], al; vzeroupper; xor eax, eax; ret;
0x0015bfee: add [rax], al; vzeroupper; xor eax, eax; ret;
0x0015c017: rol byte ptr [rbp+0xfd474c0], 1; mov ebp, 0xf80148c0; vzeroupper; ret;
0x0015c019: shl byte ptr [rsp+rdx*8+0xf], 0xbd; ror byte ptr [rax+1], 0xf8; vzeroupper; ret;
0x0015c01c: bsr eax, eax; add rax, rdi; vzeroupper; ret;
0x0015c01d: mov ebp, 0xf80148c0; vzeroupper; ret;
0x0015c031: ret 0x8520;
0x0015c03d: ret 0xce89;
0x0015c063: add [rcx], esp; rol byte ptr [rbp+0xf8674c0], 1; mov ebp, 0xf80148c0; add rax, r8; vzeroupper; ret;
0x0015c065: rol byte ptr [rbp+0xf8674c0], 1; mov ebp, 0xf80148c0; add rax, r8; vzeroupper; ret;
0x0015c067: shl byte ptr [rsi+rax*4+0xf], 0xbd; ror byte ptr [rax+1], 0xf8; add rax, r8; vzeroupper; ret;
0x0015c069: xchg [rdi], cl; mov ebp, 0xf80148c0; add rax, r8; vzeroupper; ret;
0x0015c0b3: dec dword ptr [rdi]; mov ebp, 0xf80148c0; add rax, r8; vzeroupper; ret;
0x0015c0b4: bsr eax, eax; add rax, rdi; add rax, r8; vzeroupper; ret;
0x0015c0b5: mov ebp, 0xf80148c0; add rax, r8; vzeroupper; ret;
0x0015c0b6: ror byte ptr [rax+1], 0xf8; add rax, r8; vzeroupper; ret;
0x0015c0b7: add rax, rdi; add rax, r8; vzeroupper; ret;
0x0015c0b8: add eax, edi; add rax, r8; vzeroupper; ret;
0x0015c0b9: clc; add rax, r8; vzeroupper; ret;
0x0015c0ba: add rax, r8; vzeroupper; ret;
0x0015c0bb: add eax, eax; vzeroupper; ret;
0x0015c196: adc dword ptr [rbp+0x31000002], 0xffffffc0; vzeroupper; ret;
0x0015c1e0: tzcnt ecx, eax; movzx eax, byte ptr [rdi+rcx]; movzx edx, byte ptr [rsi+rcx]; sub eax, edx; vzeroupper; ret;
0x0015c1e1: bsf ecx, eax; movzx eax, byte ptr [rdi+rcx]; movzx edx, byte ptr [rsi+rcx]; sub eax, edx; vzeroupper; ret;
0x0015c1e4: movzx eax, byte ptr [rdi+rcx]; movzx edx, byte ptr [rsi+rcx]; sub eax, edx; vzeroupper; ret;
0x0015c1e6: add al, 0xf; movzx edx, byte ptr [rsi+rcx]; sub eax, edx; vzeroupper; ret;
0x0015c1e8: movzx edx, byte ptr [rsi+rcx]; sub eax, edx; vzeroupper; ret;
0x0015c1ea: adc al, 0xe; sub eax, edx; vzeroupper; ret;
0x0015c227: sbb eax, eax; or eax, 1; ret;
0x0015c229: or eax, 1; ret;
0x0015c22b: add ebx, eax; nop [rax]; ret;
0x0015c24c: bswap eax; bswap ecx; mov al, [rdi+rdx-1]; mov cl, [rsi+rdx-1]; sub eax, ecx; ret;
0x0015c24e: bswap ecx; mov al, [rdi+rdx-1]; mov cl, [rsi+rdx-1]; sub eax, ecx; ret;
0x0015c24f: leave; mov al, [rdi+rdx-1]; mov cl, [rsi+rdx-1]; sub eax, ecx; ret;
0x0015c250: mov al, [rdi+rdx-1]; mov cl, [rsi+rdx-1]; sub eax, ecx; ret;
0x0015c254: mov cl, [rsi+rdx-1]; sub eax, ecx; ret;
0x0015c259: enter 0xfc3, 0x1f; add [rax], r8b; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret;
0x0015c25b: nop [rax+rax]; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret;
0x0015c25d: add [rax], r8b; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret;
0x0015c267: enter 0xfc3, 0x1f; add byte ptr [rax], 0; add [rax], al; xor eax, eax; ret;
0x0015c314: enter 0xfffe, 0xff; ret;
0x0015c436: dec dword ptr [rdi]; test [rbx-0x3a000003], esp; std; xlat [rbx]; ret 0xe883;
0x0015c438: test [rbx-0x3a000003], esp; std; xlat [rbx]; ret 0xe883;
0x0015c456: tzcnt ecx, eax; movzx eax, byte ptr [rdi+rcx+0x60]; movzx edx, byte ptr [rsi+rcx+0x60]; sub eax, edx; vzeroupper; ret;
0x0015c457: bsf ecx, eax; movzx eax, byte ptr [rdi+rcx+0x60]; movzx edx, byte ptr [rsi+rcx+0x60]; sub eax, edx; vzeroupper; ret;
0x0015c45a: movzx eax, byte ptr [rdi+rcx+0x60]; movzx edx, byte ptr [rsi+rcx+0x60]; sub eax, edx; vzeroupper; ret;
0x0015c45f: movzx edx, byte ptr [rsi+rcx+0x60]; sub eax, edx; vzeroupper; ret;
0x0015c470: tzcnt ecx, eax; movzx eax, byte ptr [rdi+rcx+0x20]; movzx edx, byte ptr [rsi+rcx+0x20]; sub eax, edx; vzeroupper; ret;
0x0015c471: bsf ecx, eax; movzx eax, byte ptr [rdi+rcx+0x20]; movzx edx, byte ptr [rsi+rcx+0x20]; sub eax, edx; vzeroupper; ret;
0x0015c474: movzx eax, byte ptr [rdi+rcx+0x20]; movzx edx, byte ptr [rsi+rcx+0x20]; sub eax, edx; vzeroupper; ret;
0x0015c479: movzx edx, byte ptr [rsi+rcx+0x20]; sub eax, edx; vzeroupper; ret;
0x0015c48e: add [rax-0x3743f00d], dl; movzx eax, byte ptr [rdi+rcx+0x40]; movzx edx, byte ptr [rsi+rcx+0x40]; sub eax, edx; vzeroupper; ret;
0x0015c490: tzcnt ecx, eax; movzx eax, byte ptr [rdi+rcx+0x40]; movzx edx, byte ptr [rsi+rcx+0x40]; sub eax, edx; vzeroupper; ret;
0x0015c491: bsf ecx, eax; movzx eax, byte ptr [rdi+rcx+0x40]; movzx edx, byte ptr [rsi+rcx+0x40]; sub eax, edx; vzeroupper; ret;
0x0015c494: movzx eax, byte ptr [rdi+rcx+0x40]; movzx edx, byte ptr [rsi+rcx+0x40]; sub eax, edx; vzeroupper; ret;
0x0015c499: movzx edx, byte ptr [rsi+rcx+0x40]; sub eax, edx; vzeroupper; ret;
0x0015c593: sub r9, rcx; lea r10, [rip+0x377e3]; movsxd r9, [r10+r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x0015c594: sub ecx, ecx; lea r10, [rip+0x377e3]; movsxd r9, [r10+r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x0015c595: leave; lea r10, [rip+0x377e3]; movsxd r9, [r10+r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x0015c596: lea r10, [rip+0x377e3]; movsxd r9, [r10+r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x0015c597: lea edx, [rip+0x377e3]; movsxd r9, [r10+r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x0015c598: adc eax, 0x377e3; movsxd r9, [r10+r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x0015c6a5: or eax, 0x14e16; mov eax, [rcx+rax*4]; mov edx, [rcx+rdx*4]; sub eax, edx; ret;
0x0015c6a7: add [rax], r8; mov eax, [rcx+rax*4]; mov edx, [rcx+rdx*4]; sub eax, edx; ret;
0x0015c778: movsxd eax, ecx; sbb cl, [rdi]; xchg [rdi], bl; adc eax, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x0015c779: rcr dword ptr [rdx], 0xf; xchg [rdi], bl; adc eax, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x0015c77a: sbb cl, [rdi]; xchg [rdi], bl; adc eax, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x0015c77c: xchg [rdi], bl; adc eax, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x0015c7c9: movsxd eax, ecx; sbb cl, [rdi]; xchg dh, cl; adc al, [rax]; add [rax-0x7d], cl; ret 0xe910;
0x0015c7ca: rcr dword ptr [rdx], 0xf; xchg dh, cl; adc al, [rax]; add [rax-0x7d], cl; ret 0xe910;
0x0015c7cb: sbb cl, [rdi]; xchg dh, cl; adc al, [rax]; add [rax-0x7d], cl; ret 0xe910;
0x0015c7cd: xchg dh, cl; adc al, [rax]; add [rax-0x7d], cl; ret 0xe910;
0x0015c8c8: movsxd eax, ecx; sbb cl, [rdi]; xchg bh, cl; adc [rax], eax; add [rax-0x7d], cl; ret 0x4910;
0x0015c8c9: rcr dword ptr [rdx], 0xf; xchg bh, cl; adc [rax], eax; add [rax-0x7d], cl; ret 0x4910;
0x0015c8ca: sbb cl, [rdi]; xchg bh, cl; adc [rax], eax; add [rax-0x7d], cl; ret 0x4910;
0x0015c8cc: xchg bh, cl; adc [rax], eax; add [rax-0x7d], cl; ret 0x4910;
0x0015ca1b: adc dword ptr [rax], 0x83480000; ret 0x4910;
0x0015ca67: movsxd eax, ecx; sbb cl, [rdi]; xchg [rax], dh; adc [rax], al; add [rax-0x7d], cl; ret 0xe910;
0x0015ca68: rcr dword ptr [rdx], 0xf; xchg [rax], dh; adc [rax], al; add [rax-0x7d], cl; ret 0xe910;
0x0015ca69: sbb cl, [rdi]; xchg [rax], dh; adc [rax], al; add [rax-0x7d], cl; ret 0xe910;
0x0015ca6b: xchg [rax], dh; adc [rax], al; add [rax-0x7d], cl; ret 0xe910;
0x0015ca6d: adc [rax], al; add [rax-0x7d], cl; ret 0xe910;
0x0015ccb8: movsxd eax, ecx; sbb cl, [rdi]; xchg bh, bl; or eax, 0x83480000; ret 0x4910;
0x0015ccb9: rcr dword ptr [rdx], 0xf; xchg bh, bl; or eax, 0x83480000; ret 0x4910;
0x0015ccba: sbb cl, [rdi]; xchg bh, bl; or eax, 0x83480000; ret 0x4910;
0x0015ccbc: xchg bh, bl; or eax, 0x83480000; ret 0x4910;
0x0015ccbd: fisttp word ptr [rip-0x7cb80000], st; ret 0x4910;
0x0015cd0f: or eax, 0x83480000; ret 0xe910;
0x0015ce0e: or al, 0; add [rax-0x7d], cl; ret 0x4910;
0x0015ce59: movsxd eax, ecx; sbb cl, [rdi]; xchg [rsi], bh; or al, 0; add [rax-0x7d], cl; ret 0xe910;
0x0015ce5a: rcr dword ptr [rdx], 0xf; xchg [rsi], bh; or al, 0; add [rax-0x7d], cl; ret 0xe910;
0x0015ce5b: sbb cl, [rdi]; xchg [rsi], bh; or al, 0; add [rax-0x7d], cl; ret 0xe910;
0x0015ce5d: xchg [rsi], bh; or al, 0; add [rax-0x7d], cl; ret 0xe910;
0x0015ce5e: or al, 0; add [rax-0x7d], cl; ret 0xe910;
0x0015cf58: movsxd eax, ecx; sbb cl, [rdi]; xchg [rdi], bh; or eax, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x0015cf59: rcr dword ptr [rdx], 0xf; xchg [rdi], bh; or eax, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x0015cf5a: sbb cl, [rdi]; xchg [rdi], bh; or eax, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x0015cf5c: xchg [rdi], bh; or eax, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x0015cfa9: movsxd eax, ecx; sbb cl, [rdi]; xchg dh, ch; or al, [rax]; add [rax-0x7d], cl; ret 0xe910;
0x0015cfaa: rcr dword ptr [rdx], 0xf; xchg dh, ch; or al, [rax]; add [rax-0x7d], cl; ret 0xe910;
0x0015cfab: sbb cl, [rdi]; xchg dh, ch; or al, [rax]; add [rax-0x7d], cl; ret 0xe910;
0x0015cfad: xchg dh, ch; or al, [rax]; add [rax-0x7d], cl; ret 0xe910;
0x0015cfae: out dx, al; or al, [rax]; add [rax-0x7d], cl; ret 0xe910;
0x0015cfaf: or al, [rax]; add [rax-0x7d], cl; ret 0xe910;
0x0015d0a8: movsxd eax, ecx; sbb cl, [rdi]; xchg bh, ch; or [rax], eax; add [rax-0x7d], cl; ret 0x4910;
0x0015d0a9: rcr dword ptr [rdx], 0xf; xchg bh, ch; or [rax], eax; add [rax-0x7d], cl; ret 0x4910;
0x0015d0aa: sbb cl, [rdi]; xchg bh, ch; or [rax], eax; add [rax-0x7d], cl; ret 0x4910;
0x0015d0ac: xchg bh, ch; or [rax], eax; add [rax-0x7d], cl; ret 0x4910;
0x0015d0ad: out dx, eax; or [rax], eax; add [rax-0x7d], cl; ret 0x4910;
0x0015d0ae: or [rax], eax; add [rax-0x7d], cl; ret 0x4910;
0x0015d0fe: sahf; or [rax], eax; add [rax-0x7d], cl; ret 0xe910;
0x0015d1fd: lahf; or [rax], al; add [rax-0x7d], cl; ret 0x4910;
0x0015d24e: or [rax], r8b; add [rax-0x7d], cl; ret 0xe910;
0x0015d498: movsxd eax, ecx; sbb cl, [rdi]; xchg bh, bh; add eax, 0x83480000; ret 0x4910;
0x0015d499: rcr dword ptr [rdx], 0xf; xchg bh, bh; add eax, 0x83480000; ret 0x4910;
0x0015d49a: sbb cl, [rdi]; xchg bh, bh; add eax, 0x83480000; ret 0x4910;
0x0015d49c: xchg bh, bh; add eax, 0x83480000; ret 0x4910;
0x0015d49d: inc dword ptr [rip-0x7cb80000]; ret 0x4910;
0x0015d4ee: scasb [rdi]; add eax, 0x83480000; ret 0xe910;
0x0015d5ed: scasd [rdi]; add al, 0; add [rax-0x7d], cl; ret 0x4910;
0x0015d63e: pop rsi; add al, 0; add [rax-0x7d], cl; ret 0xe910;
0x0015d63f: add al, 0; add [rax-0x7d], cl; ret 0xe910;
0x0015d73d: pop rdi; add eax, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x0015d73e: add eax, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x0015d789: movsxd eax, ecx; sbb cl, [rdi]; xchg [rsi], cl; add eax, [rax]; add [rax-0x7d], cl; ret 0xe910;
0x0015d78a: rcr dword ptr [rdx], 0xf; xchg [rsi], cl; add eax, [rax]; add [rax-0x7d], cl; ret 0xe910;
0x0015d78b: sbb cl, [rdi]; xchg [rsi], cl; add eax, [rax]; add [rax-0x7d], cl; ret 0xe910;
0x0015d78d: xchg [rsi], cl; add eax, [rax]; add [rax-0x7d], cl; ret 0xe910;
0x0015d888: movsxd eax, ecx; sbb cl, [rdi]; xchg [rdi], cl; add al, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x0015d889: rcr dword ptr [rdx], 0xf; xchg [rdi], cl; add al, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x0015d88a: sbb cl, [rdi]; xchg [rdi], cl; add al, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x0015d88c: xchg [rdi], cl; add al, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x0015d88d: lar eax, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x0015d8df: add [rax], eax; add [rax-0x7d], cl; ret 0xe910;
0x0015d9de: add [rax], al; add [rax-0x7d], cl; ret 0x4910;
0x0015daba: or eax, 0x13a01; mov edx, [rcx+rdx*4]; mov eax, [rcx+rax*4]; sub eax, edx; ret;
0x0015dabb: add [rdx], edi; add [rax], eax; mov edx, [rcx+rdx*4]; mov eax, [rcx+rax*4]; sub eax, edx; ret;
0x0015daee: adc eax, 0x139cd; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret;
0x0015daef: int 0x39; add [rax], eax; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret;
0x0015db08: adc eax, 0x139b3; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret;
0x0015db09: mov bl, 0x39; add [rax], eax; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret;
0x0015dc23: sub r9, rcx; lea r10, [rip+0x36193]; movsxd r9, [r10+r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x0015dc24: sub ecx, ecx; lea r10, [rip+0x36193]; movsxd r9, [r10+r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x0015dc25: leave; lea r10, [rip+0x36193]; movsxd r9, [r10+r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x0015dc26: lea r10, [rip+0x36193]; movsxd r9, [r10+r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x0015dc27: lea edx, [rip+0x36193]; movsxd r9, [r10+r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x0015dc28: adc eax, 0x36193; movsxd r9, [r10+r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x0015dc2b: add eax, [rax]; movsxd r9, [r10+r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x0015dc2c: add [rdi+0x63], cl; or al, 0x8a; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x0015dc2d: movsxd r9, [r10+r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x0015dc2e: movsxd ecx, [rdx+rcx*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x0015dc2f: or al, 0x8a; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x0015dc31: vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10+r9]; jmp r10;
0x0015dc35: lea r10, [r10+r9]; jmp r10;
0x0015dc36: lea edx, [rdx+rcx]; jmp r10;
0x0015dc37: adc al, 0xa; jmp r10;
0x0015dc39: jmp r10;
0x0015dc3a: jmp rdx;
0x0015dd77: pi2fd mm6, [rsi-0x72b7f1ec]; cmp eax, 0x8b000137; add al, 0x81; mov edx, [rcx+rdx*4]; sub eax, edx; ret;
0x0015dd78: movzx edx, byte ptr [rsi+rcx]; lea rcx, [rip+0x1a166]; mov eax, [rcx+rax*4]; mov edx, [rcx+rdx*4]; sub eax, edx; ret;
0x0015dd7a: adc al, 0xe; lea rcx, [rip+0x1a166]; mov eax, [rcx+rax*4]; mov edx, [rcx+rdx*4]; sub eax, edx; ret;
0x0015dd7c: lea rcx, [rip+0x1a166]; mov eax, [rcx+rax*4]; mov edx, [rcx+rdx*4]; sub eax, edx; ret;
0x0015dd7d: lea ecx, [rip+0x1a166]; mov eax, [rcx+rax*4]; mov edx, [rcx+rdx*4]; sub eax, edx; ret;
0x0015dd7e: or eax, 0x1373d; mov eax, [rcx+rax*4]; mov edx, [rcx+rdx*4]; sub eax, edx; ret;
0x0015dd7f: cmp eax, 0x8b000137; add al, 0x81; mov edx, [rcx+rdx*4]; sub eax, edx; ret;
0x0015dd81: add [rax], eax; mov eax, [rcx+rax*4]; mov edx, [rcx+rdx*4]; sub eax, edx; ret;
0x0015dd82: add [rbx+0x148b8104], cl; xchg ecx, eax; sub eax, edx; ret;
0x0015dd83: mov eax, [rcx+rax*4]; mov edx, [rcx+rdx*4]; sub eax, edx; ret;
0x0015dd84: add al, 0x81; mov edx, [rcx+rdx*4]; sub eax, edx; ret;
0x0015dd86: mov edx, [rcx+rdx*4]; sub eax, edx; ret;
0x0015dd87: adc al, 0x91; sub eax, edx; ret;
0x0015dd88: xchg ecx, eax; sub eax, edx; ret;
0x0015decf: adc [rdi], cl; xchg bl, cl; adc eax, 0x83480000; ret 0xe910;
0x0015ded1: xchg bl, cl; adc eax, 0x83480000; ret 0xe910;
0x0015ded3: adc eax, 0x83480000; ret 0xe910;
0x0015dff7: cmpsb [rsi], [rdi]; adc al, 0; add [rax-0x7d], cl; ret 0x4910;
0x0015dff8: adc al, 0; add [rax-0x7d], cl; ret 0x4910;
0x0015e053: adc al, 0; add [rax-0x7d], cl; ret 0xe910;
0x0015e16c: adc [rdi], cl; xchg [rsi], ch; adc eax, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x0015e16e: xchg [rsi], ch; adc eax, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x0015e16f: adc eax, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x0015e170: adc eax, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x0015e1c7: adc [rdi], cl; xchg bl, dl; adc al, [rax]; add [rax-0x7d], cl; ret 0xe910;
0x0015e1c9: xchg bl, dl; adc al, [rax]; add [rax-0x7d], cl; ret 0xe910;
0x0015e1cb: adc al, [rax]; add [rax-0x7d], cl; ret 0xe910;
0x0015e2f7: cmpsb [rsi], [rdi]; adc [rax], eax; add [rax-0x7d], cl; ret 0x4910;
0x0015e2f8: adc [rax], eax; add [rax-0x7d], cl; ret 0x4910;
0x0015e352: adc [r8], rax; add [rax-0x7d], cl; ret 0xe910;
0x0015e353: adc [rax], eax; add [rax-0x7d], cl; ret 0xe910;
0x0015e474: adc [rdi], cl; xchg [rsi], ah; adc [rax], al; add [rax-0x7d], cl; ret 0x4910;
0x0015e476: xchg [rsi], ah; adc [rax], al; add [rax-0x7d], cl; ret 0x4910;
0x0015e477: adc [rax], al; add [rax-0x7d], cl; ret 0x4910;
0x0015e478: adc [rax], al; add [rax-0x7d], cl; ret 0x4910;
0x0015e774: adc [rdi], cl; xchg [rsi], ah; or eax, 0x83480000; ret 0x4910;
0x0015e776: xchg [rsi], ah; or eax, 0x83480000; ret 0x4910;
0x0015e777: or eax, 0x83480000; ret 0x4910;
0x0015e778: or eax, 0x83480000; ret 0x4910;
0x0015e7cf: adc [rdi], cl; xchg bl, cl; or al, 0; add [rax-0x7d], cl; ret 0xe910;
0x0015e7d1: xchg bl, cl; or al, 0; add [rax-0x7d], cl; ret 0xe910;
0x0015e7d3: or al, 0; add [rax-0x7d], cl; ret 0xe910;
0x0015e8f7: cmpsb [rsi], [rdi]; or eax, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x0015e8f8: or eax, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x0015e952: or rax, [r8]; add [rax-0x7d], cl; ret 0xe910;
0x0015e953: or eax, [rax]; add [rax-0x7d], cl; ret 0xe910;
0x0015ea74: adc [rdi], cl; xchg [rsi], ah; or al, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x0015ea76: xchg [rsi], ah; or al, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x0015ea77: or al, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x0015ea78: or al, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x0015eacf: adc [rdi], cl; xchg bl, cl; or [rax], eax; add [rax-0x7d], cl; ret 0xe910;
0x0015ead1: xchg bl, cl; or [rax], eax; add [rax-0x7d], cl; ret 0xe910;
0x0015ead3: or [rax], eax; add [rax-0x7d], cl; ret 0xe910;
0x0015ebf7: cmpsb [rsi], [rdi]; or [rax], al; add [rax-0x7d], cl; ret 0x4910;
0x0015ebf8: or [rax], al; add [rax-0x7d], cl; ret 0x4910;
0x0015ec52: or [r8], al; add [rax-0x7d], cl; ret 0xe910;
0x0015ec53: or [rax], al; add [rax-0x7d], cl; ret 0xe910;
0x0015eef7: cmpsb [rsi], [rdi]; add eax, 0x83480000; ret 0x4910;
0x0015eef8: add eax, 0x83480000; ret 0x4910;
0x0015ef52: add rax, 0xffffffff83480000; ret 0xe910;
0x0015ef53: add eax, 0x83480000; ret 0xe910;
0x0015f074: adc [rdi], cl; xchg [rsi], ah; add al, 0; add [rax-0x7d], cl; ret 0x4910;
0x0015f076: xchg [rsi], ah; add al, 0; add [rax-0x7d], cl; ret 0x4910;
0x0015f077: add al, 0; add [rax-0x7d], cl; ret 0x4910;
0x0015f078: add al, 0; add [rax-0x7d], cl; ret 0x4910;
0x0015f0cf: adc [rdi], cl; xchg bl, cl; add eax, [rax]; add [rax-0x7d], cl; ret 0xe910;
0x0015f0d1: xchg bl, cl; add eax, [rax]; add [rax-0x7d], cl; ret 0xe910;
0x0015f0d3: add eax, [rax]; add [rax-0x7d], cl; ret 0xe910;
0x0015f1f7: cmpsb [rsi], [rdi]; add al, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x0015f1f8: add al, [rax]; add [rax-0x7d], cl; ret 0x4910;
0x0015f252: add al, [r8]; add [rax-0x7d], cl; ret 0xe910;
0x0015f253: add al, [rax]; add [rax-0x7d], cl; ret 0xe910;
0x0015f25e: call qword ptr [rax+0xea8149];
0x0015f31b: add [rax], al; add [rax], al; add [rcx-0x7d], cl; ret 0xf10;
0x0015f31d: add [rax], al; add [rcx-0x7d], cl; ret 0xf10;
0x0015f31f: add [rcx-0x7d], cl; ret 0xf10;
0x0015f322: ret 0xf10;
0x0015f374: adc [rdi], cl; xchg [rsi], ah; add [rax], eax; add [rax-0x7d], cl; ret 0x4910;
0x0015f376: xchg [rsi], ah; add [rax], eax; add [rax-0x7d], cl; ret 0x4910;
0x0015f377: add [rax], eax; add [rax-0x7d], cl; ret 0x4910;
0x0015f378: add [rax], eax; add [rax-0x7d], cl; ret 0x4910;
0x0015f37a: add [rax-0x7d], cl; ret 0x4910;
0x0015f37d: ret 0x4910;
0x0015f37e: adc [rcx-0x7d], cl; ret 0x7f10;
0x0015f381: ret 0x7f10;
0x0015f3cb: adc [rdi], cl; xchg bh, cl; add [rax], al; add [rax-0x7d], cl; ret 0xe910;
0x0015f3cd: xchg bh, cl; add [rax], al; add [rax-0x7d], cl; ret 0xe910;
0x0015f3cf: add [rax], al; add [rax-0x7d], cl; ret 0xe910;
0x0015f3d1: add [rax-0x7d], cl; ret 0xe910;
0x0015f3d4: ret 0xe910;
0x0015f459: shl byte ptr [rcx+rax-0x6e], 0x48; lea ecx, [rip+0x18891]; mov edx, [rcx+rdx*4]; mov eax, [rcx+rax*4]; sub eax, edx; ret;
0x0015f45c: xchg edx, eax; lea rcx, [rip+0x18891]; mov edx, [rcx+rdx*4]; mov eax, [rcx+rax*4]; sub eax, edx; ret;
0x0015f45d: lea rcx, [rip+0x18891]; mov edx, [rcx+rdx*4]; mov eax, [rcx+rax*4]; sub eax, edx; ret;
0x0015f45e: lea ecx, [rip+0x18891]; mov edx, [rcx+rdx*4]; mov eax, [rcx+rax*4]; sub eax, edx; ret;
0x0015f45f: or eax, 0x1205c; mov edx, [rcx+rdx*4]; mov eax, [rcx+rax*4]; sub eax, edx; ret;
0x0015f462: add [rax], eax; mov edx, [rcx+rdx*4]; mov eax, [rcx+rax*4]; sub eax, edx; ret;
0x0015f464: mov edx, [rcx+rdx*4]; mov eax, [rcx+rax*4]; sub eax, edx; ret;
0x0015f465: adc al, 0x91; mov eax, [rcx+rax*4]; sub eax, edx; ret;
0x0015f466: xchg ecx, eax; mov eax, [rcx+rax*4]; sub eax, edx; ret;
0x0015f467: mov eax, [rcx+rax*4]; sub eax, edx; ret;
0x0015f468: add al, 0x81; sub eax, edx; ret;
0x0015f48d: movzx eax, byte ptr [rdi+rdx]; lea rdx, [rip+0xd6a3d]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret;
0x0015f48f: add al, 0x17; lea rdx, [rip+0xd6a3d]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret;
0x0015f493: adc eax, 0x12028; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret;
0x0015f494: sub [rax], ah; add [rax], eax; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret;
0x0015f49f: enter 0x31c3, 0xc0; ret;
0x0015f4b3: movzx eax, byte ptr [rdi]; lea rdx, [rip+0xd6a23]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret;
0x0015f4b4: mov dh, 7; lea rdx, [rip+0xd6a23]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret;
0x0015f4b6: lea rdx, [rip+0xd6a3d]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret;
0x0015f4b7: lea edx, [rip+0xd6a3d]; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret;
0x0015f4b8: adc eax, 0x12003; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret;
0x0015f4b9: add esp, [rax]; add [rax], eax; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret;
0x0015f4bb: add [rax], eax; mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret;
0x0015f4bd: mov ecx, [rdx+rcx*4]; mov eax, [rdx+rax*4]; sub eax, ecx; ret;
0x0015f4be: or al, 0x8a; mov eax, [rdx+rax*4]; sub eax, ecx; ret;
0x0015f4bf: mov cl, [rbx-0x37d67dfc]; ret;
0x0015f4c0: mov eax, [rdx+rax*4]; sub eax, ecx; ret;
0x0015f4c1: add al, 0x82; sub eax, ecx; ret;
0x0015f549: enter 0xd231, 0x48; lea eax, [rdi+rax]; cmp sil, [rax]; cmovne rax, rdx; vzeroupper; ret;
0x0015f662: mov esp, 0x48d231c0; lea eax, [rdi+rax]; cmp sil, [rax]; cmovne rax, rdx; vzeroupper; ret;
0x0015f663: shl byte ptr [rcx], 0xd2; lea rax, [rdi+rax]; cmp sil, [rax]; cmovne rax, rdx; vzeroupper; ret;
0x0015f664: xor edx, edx; lea rax, [rdi+rax]; cmp sil, [rax]; cmovne rax, rdx; vzeroupper; ret;
0x0015f665: ror byte ptr [rax-0x73], cl; add al, 7; cmp sil, [rax]; cmovne rax, rdx; vzeroupper; ret;
0x0015f666: lea rax, [rdi+rax]; cmp sil, [rax]; cmovne rax, rdx; vzeroupper; ret;
0x0015f667: lea eax, [rdi+rax]; cmp sil, [rax]; cmovne rax, rdx; vzeroupper; ret;
0x0015f668: add al, 7; cmp sil, [rax]; cmovne rax, rdx; vzeroupper; ret;
0x0015f682: mov esp, 0x48d231c0; lea eax, [rdi+rax+0x20]; cmp sil, [rax]; cmovne rax, rdx; vzeroupper; ret;
0x0015f683: shl byte ptr [rcx], 0xd2; lea rax, [rdi+rax+0x20]; cmp sil, [rax]; cmovne rax, rdx; vzeroupper; ret;
0x0015f684: xor edx, edx; lea rax, [rdi+rax+0x20]; cmp sil, [rax]; cmovne rax, rdx; vzeroupper; ret;
0x0015f686: lea rax, [rdi+rax+0x20]; cmp sil, [rax]; cmovne rax, rdx; vzeroupper; ret;
0x0015f687: lea eax, [rdi+rax+0x20]; cmp sil, [rax]; cmovne rax, rdx; vzeroupper; ret;
0x0015f68a: and [rax+0x3a], al; xor [rax+0xf], cl; ret 0xf8c5;
0x0015f6a2: mov esp, 0x48d231c0; lea eax, [rdi+rax+0x40]; cmp sil, [rax]; cmovne rax, rdx; vzeroupper; ret;
0x0015f6a3: shl byte ptr [rcx], 0xd2; lea rax, [rdi+rax+0x40]; cmp sil, [rax]; cmovne rax, rdx; vzeroupper; ret;
0x0015f6a4: xor edx, edx; lea rax, [rdi+rax+0x40]; cmp sil, [rax]; cmovne rax, rdx; vzeroupper; ret;
0x0015f6a6: lea rax, [rdi+rax+0x40]; cmp sil, [rax]; cmovne rax, rdx; vzeroupper; ret;
0x0015f6a7: lea eax, [rdi+rax+0x40]; cmp sil, [rax]; cmovne rax, rdx; vzeroupper; ret;
0x0015f6e0: mov esp, 0x48d231c0; lea eax, [rdi+rax+0x60]; cmp sil, [rax]; cmovne rax, rdx; vzeroupper; ret;
0x0015f6e1: shl byte ptr [rcx], 0xd2; lea rax, [rdi+rax+0x60]; cmp sil, [rax]; cmovne rax, rdx; vzeroupper; ret;
0x0015f6e2: xor edx, edx; lea rax, [rdi+rax+0x60]; cmp sil, [rax]; cmovne rax, rdx; vzeroupper; ret;
0x0015f6e4: lea rax, [rdi+rax+0x60]; cmp sil, [rax]; cmovne rax, rdx; vzeroupper; ret;
0x0015f6e5: lea eax, [rdi+rax+0x60]; cmp sil, [rax]; cmovne rax, rdx; vzeroupper; ret;
0x0015f6e9: cmp sil, [rax]; cmovne rax, rdx; vzeroupper; ret;
0x0015f6ea: cmp dh, [rax]; cmovne rax, rdx; vzeroupper; ret;
0x0015f770: shl byte ptr [rbp+rbx-0xd], 0xf; mov esp, 0xc80148c0; add rax, rdi; vzeroupper; ret;
0x0015f772: sbb eax, 0xc0bc0ff3; add rax, rcx; add rax, rdi; vzeroupper; ret;
0x0015f773: tzcnt eax, eax; add rax, rcx; add rax, rdi; vzeroupper; ret;
0x0015f774: bsf eax, eax; add rax, rcx; add rax, rdi; vzeroupper; ret;
0x0015f775: mov esp, 0xc80148c0; add rax, rdi; vzeroupper; ret;
0x0015f776: ror byte ptr [rax+1], 0xc8; add rax, rdi; vzeroupper; ret;
0x0015f777: add rax, rcx; add rax, rdi; vzeroupper; ret;
0x0015f778: add eax, ecx; add rax, rdi; vzeroupper; ret;
0x0015f779: enter 0x148, 0xf8; vzeroupper; ret;
0x0015f883: nop [rax+rax]; nop [rax]; tzcnt eax, eax; add rax, rdi; vzeroupper; ret;
0x0015f884: nop [rax+rax]; nop [rax]; tzcnt eax, eax; add rax, rdi; vzeroupper; ret;
0x0015f885: nop [rax+rax]; nop [rax]; tzcnt eax, eax; add rax, rdi; vzeroupper; ret;
0x0015f88b: add [rax], al; nop [rax]; tzcnt eax, eax; add rax, rdi; vzeroupper; ret;
0x0015f88d: nop [rax]; tzcnt eax, eax; add rax, rdi; vzeroupper; ret;
0x0015f943: test [rip-0x76ffffff], edi; ret 0x8948;
0x0015f944: cmp eax, 0x89000001; ret 0x8948;
0x0015fa27: test [rax+rax-0x2f770000], al; mov rdi, rsi; bsr eax, eax; lea rax, [rdi+rax-0x20]; vzeroupper; ret;
0x0015fa29: add [rax], al; add [rcx-0x876b730], cl; bsr eax, eax; lea rax, [rdi+rax-0x20]; vzeroupper; ret;
0x0015fa2b: add [rcx-0x876b730], cl; bsr eax, eax; lea rax, [rdi+rax-0x20]; vzeroupper; ret;
0x0015fa2c: mov eax, edx; mov rdi, rsi; bsr eax, eax; lea rax, [rdi+rax-0x20]; vzeroupper; ret;
0x0015fa2e: mov rdi, rsi; bsr eax, eax; lea rax, [rdi+rax-0x20]; vzeroupper; ret;
0x0015fa2f: mov edi, esi; bsr eax, eax; lea rax, [rdi+rax-0x20]; vzeroupper; ret;
0x0015faa3: nop [rax+rax]; nop [rax]; xor eax, eax; vzeroupper; ret;
0x0015faa4: nop [rax+rax]; nop [rax]; xor eax, eax; vzeroupper; ret;
0x0015faa5: nop [rax+rax]; nop [rax]; xor eax, eax; vzeroupper; ret;
0x0015faa9: add [rax], al; add [rax], al; nop [rax]; xor eax, eax; vzeroupper; ret;
0x0015faab: add [rax], al; nop [rax]; xor eax, eax; vzeroupper; ret;
0x0015fb02: shl byte ptr [rbx+rbx-0xd], 0xf; mov esp, 0xf80148c0; add rax, rcx; sub rax, rdx; vzeroupper; ret;
0x0015fb05: tzcnt eax, eax; add rax, rdi; add rax, rcx; sub rax, rdx; vzeroupper; ret;
0x0015fb06: bsf eax, eax; add rax, rdi; add rax, rcx; sub rax, rdx; vzeroupper; ret;
0x0015fb07: mov esp, 0xf80148c0; add rax, rcx; sub rax, rdx; vzeroupper; ret;
0x0015fb08: ror byte ptr [rax+1], 0xf8; add rax, rcx; sub rax, rdx; vzeroupper; ret;
0x0015fbbc: add [rax], al; add [rax-0x3f43f00d], dl; add rax, rdi; sub rax, rdx; vzeroupper; ret;
0x0015fbbe: add [rax-0x3f43f00d], dl; add rax, rdi; sub rax, rdx; vzeroupper; ret;
0x0015fc76: ror byte ptr [rdi], 0x85; ret;
0x0015fcd0: add [rax], al; add rax, rdi; add rax, rcx; sub rax, rdx; vzeroupper; ret;
0x0015fcd1: add [rax+1], cl; clc; add rax, rcx; sub rax, rdx; vzeroupper; ret;
0x0015fcd2: add rax, rdi; add rax, rcx; sub rax, rdx; vzeroupper; ret;
0x0015fcd3: add eax, edi; add rax, rcx; sub rax, rdx; vzeroupper; ret;
0x0015fcd4: clc; add rax, rcx; sub rax, rdx; vzeroupper; ret;
0x0015fcd5: add rax, rcx; sub rax, rdx; vzeroupper; ret;
0x0015fcd6: add eax, ecx; sub rax, rdx; vzeroupper; ret;
0x0015fcd7: enter 0x2948, 0xd0; vzeroupper; ret;
0x0015fdf6: xlat [rbx]; rol dword ptr [rbp-0x5f7af040], 0; add [rax], al; mov rax, r8; vzeroupper; ret;
0x0015fdf7: rol dword ptr [rbp-0x5f7af040], 0; add [rax], al; mov rax, r8; vzeroupper; ret;
0x0015fdfb: test [rax+0x4c000000], esp; mov eax, eax; vzeroupper; ret;
0x0015fe32: shl byte ptr [rbp+0x2b], 0x4c; mov eax, eax; vzeroupper; ret;
0x0015fe34: sub ecx, [rcx+rcx*4-0x40]; vzeroupper; ret;
0x0015fe68: push rdi; add rax, 0x20; add rax, rdi; sub rax, rdx; vzeroupper; ret;
0x0015feb7: nop [rax+rax]; mov rax, r8; vzeroupper; ret;
0x0015feb8: nop [rax+rax]; mov rax, r8; vzeroupper; ret;
0x0015feba: test [rax], al; add [rax], al; add [rax], al; mov rax, r8; vzeroupper; ret;
0x0015febb: add [rax], al; add [rax], al; add [rcx+rcx*4-0x40], cl; vzeroupper; ret;
0x0015febc: add [rax], al; add [rax], al; mov rax, r8; vzeroupper; ret;
0x0015febd: add [rax], al; add [rcx+rcx*4-0x40], cl; vzeroupper; ret;
0x0015febe: add [rax], al; mov rax, r8; vzeroupper; ret;
0x0015febf: add [rcx+rcx*4-0x40], cl; vzeroupper; ret;
0x0015fec0: mov rax, r8; vzeroupper; ret;
0x0015fec1: mov eax, eax; vzeroupper; ret;
0x0015fec7: nop [rax+rax]; xor eax, eax; ret;
0x0015fec8: nop [rax+rax]; xor eax, eax; ret;
0x0015feca: test [rax], al; add [rax], al; add [rax], al; xor eax, eax; ret;
0x0015fedd: add [rsi-0x70], ah; tzcnt eax, eax; add rax, rdi; sub rax, rdx; vzeroupper; ret;
0x0015fede: xchg ax, ax; tzcnt eax, eax; add rax, rdi; sub rax, rdx; vzeroupper; ret;
0x0015fedf: nop; tzcnt eax, eax; add rax, rdi; sub rax, rdx; vzeroupper; ret;
0x0015fee0: tzcnt eax, eax; add rax, rdi; sub rax, rdx; vzeroupper; ret;
0x0015fee1: bsf eax, eax; add rax, rdi; sub rax, rdx; vzeroupper; ret;
0x0015fee2: mov esp, 0xf80148c0; sub rax, rdx; vzeroupper; ret;
0x0015fee3: ror byte ptr [rax+1], 0xf8; sub rax, rdx; vzeroupper; ret;
0x0015fef0: tzcnt eax, eax; add rax, 0x20; add rax, rdi; sub rax, rdx; vzeroupper; ret;
0x0015fef1: bsf eax, eax; add rax, 0x20; add rax, rdi; sub rax, rdx; vzeroupper; ret;
0x0015fef2: mov esp, 0xc08348c0; and [rax+1], cl; clc; sub rax, rdx; vzeroupper; ret;
0x0015fef3: ror byte ptr [rax-0x7d], 0xc0; and [rax+1], cl; clc; sub rax, rdx; vzeroupper; ret;
0x0015fef4: add rax, 0x20; add rax, rdi; sub rax, rdx; vzeroupper; ret;
0x0015fef5: add eax, 0x20; add rax, rdi; sub rax, rdx; vzeroupper; ret;
0x0015fef6: shl byte ptr [rax], 0x48; add eax, edi; sub rax, rdx; vzeroupper; ret;
0x0015fef7: and [rax+1], cl; clc; sub rax, rdx; vzeroupper; ret;
0x0015ff10: tzcnt eax, eax; add rax, 0x40; add rax, rdi; sub rax, rdx; vzeroupper; ret;
0x0015ff11: bsf eax, eax; add rax, 0x40; add rax, rdi; sub rax, rdx; vzeroupper; ret;
0x0015ff12: mov esp, 0xc08348c0; add rax, rdi; sub rax, rdx; vzeroupper; ret;
0x0015ff13: ror byte ptr [rax-0x7d], 0xc0; add rax, rdi; sub rax, rdx; vzeroupper; ret;
0x0015ff14: add rax, 0x40; add rax, rdi; sub rax, rdx; vzeroupper; ret;
0x0015ff15: add eax, 0x40; add rax, rdi; sub rax, rdx; vzeroupper; ret;
0x0015ff16: rol byte ptr [rax+0x48], 1; clc; sub rax, rdx; vzeroupper; ret;
0x0015ff5c: tzcnt eax, eax; add rax, 0x60; add rax, rdi; sub rax, rdx; vzeroupper; ret;
0x0015ff5d: bsf eax, eax; add rax, 0x60; add rax, rdi; sub rax, rdx; vzeroupper; ret;
0x0015ff60: add rax, 0x60; add rax, rdi; sub rax, rdx; vzeroupper; ret;
0x0015ff61: add eax, 0x60; add rax, rdi; sub rax, rdx; vzeroupper; ret;
0x0015ff62: shl byte ptr [rax+0x48], 1; clc; sub rax, rdx; vzeroupper; ret;
0x0015ff64: add rax, rdi; sub rax, rdx; vzeroupper; ret;
0x0015ff65: add eax, edi; sub rax, rdx; vzeroupper; ret;
0x0015ff66: clc; sub rax, rdx; vzeroupper; ret;
0x0015ff67: sub rax, rdx; vzeroupper; ret;
0x0015ff68: sub eax, edx; vzeroupper; ret;
0x00160be1: cmp eax, [rcx]; add [rax], al; mov byte ptr [rdi], 0; vzeroupper; ret;
0x00160be3: add [rax], al; mov byte ptr [rdi], 0; vzeroupper; ret;
0x00160d14: add [rax], al; nop [rax+rax]; movzx edx, word ptr [rsi]; mov [rdi], dx; vzeroupper; ret;
0x00160d15: add [rsi+0x2e], ah; nop [rax+rax]; movzx edx, word ptr [rsi]; mov [rdi], dx; vzeroupper; ret;
0x00160d16: nop [rax+rax]; movzx edx, word ptr [rsi]; mov [rdi], dx; vzeroupper; ret;
0x00160d17: nop [rax+rax]; movzx edx, word ptr [rsi]; mov [rdi], dx; vzeroupper; ret;
0x00160d18: nop [rax+rax]; movzx edx, word ptr [rsi]; mov [rdi], dx; vzeroupper; ret;
0x00160db8: nop [rax+rax]; movzx edx, byte ptr [rsi]; mov [rdi], dl; mov byte ptr [rdi+1], 0; vzeroupper; ret;
0x00160dbe: add [rax], al; movzx edx, byte ptr [rsi]; mov [rdi], dl; mov byte ptr [rdi+1], 0; vzeroupper; ret;
0x00160dbf: add [rdi], cl; mov dh, 0x16; mov [rdi], dl; mov byte ptr [rdi+1], 0; vzeroupper; ret;
0x00160dc0: movzx edx, byte ptr [rsi]; mov [rdi], dl; mov byte ptr [rdi+1], 0; vzeroupper; ret;
0x00160dc1: mov dh, 0x16; mov [rdi], dl; mov byte ptr [rdi+1], 0; vzeroupper; ret;
0x00160dc3: mov [rdi], dl; mov byte ptr [rdi+1], 0; vzeroupper; ret;
0x00160dc5: mov byte ptr [rdi+1], 0; vzeroupper; ret;
0x00160dc6: add [r8], r8d; vzeroupper; ret;
0x00160dc7: add [rax], eax; vzeroupper; ret;
0x00160dcd: nop [rax]; movzx edx, word ptr [rsi]; mov [rdi], dx; mov byte ptr [rdi+2], 0; vzeroupper; ret;
0x00160dcf: add [rdi], cl; mov bh, 0x16; mov [rdi], dx; mov byte ptr [rdi+2], 0; vzeroupper; ret;
0x00160dd0: movzx edx, word ptr [rsi]; mov [rdi], dx; mov byte ptr [rdi+2], 0; vzeroupper; ret;
0x00160dd1: mov bh, 0x16; mov [rdi], dx; mov byte ptr [rdi+2], 0; vzeroupper; ret;
0x00160dd3: mov [rdi], dx; mov byte ptr [rdi+2], 0; vzeroupper; ret;
0x00160dd4: mov [rdi], edx; mov byte ptr [rdi+2], 0; vzeroupper; ret;
0x00160de3: movzx edx, word ptr [rsi+r8-2]; mov [rdi], cx; mov [rdi+r8-2], dx; mov byte ptr [rdi+r8], 0; vzeroupper; ret;
0x00160de4: movzx edx, word ptr [rsi+rax-2]; mov [rdi], cx; mov [rdi+r8-2], dx; mov byte ptr [rdi+r8], 0; vzeroupper; ret;
0x00160de9: mov [rdi], cx; mov [rdi+r8-2], dx; mov byte ptr [rdi+r8], 0; vzeroupper; ret;
0x00160dea: mov [rdi], ecx; mov [rdi+r8-2], dx; mov byte ptr [rdi+r8], 0; vzeroupper; ret;
0x00160dec: mov [rdi+r8-2], dx; mov byte ptr [rdi+r8], 0; vzeroupper; ret;
0x00160ded: mov [rdi+r8-2], edx; mov byte ptr [rdi+r8], 0; vzeroupper; ret;
0x00160dee: mov [rdi+rax-2], edx; mov byte ptr [rdi+r8], 0; vzeroupper; ret;
0x00160e02: mov edx, [rsi+r8-4]; mov [rdi], ecx; mov [rdi+r8-4], edx; mov byte ptr [rdi+r8], 0; vzeroupper; ret;
0x00160e03: mov edx, [rsi+rax-4]; mov [rdi], ecx; mov [rdi+r8-4], edx; mov byte ptr [rdi+r8], 0; vzeroupper; ret;
0x00160e06: cld; mov [rdi], ecx; mov [rdi+r8-4], edx; mov byte ptr [rdi+r8], 0; vzeroupper; ret;
0x00160e07: mov [rdi], ecx; mov [rdi+r8-4], edx; mov byte ptr [rdi+r8], 0; vzeroupper; ret;
0x00160e08: cmovb ecx, [rcx+0x42fc0754]; mov byte ptr [rdi+rax], 0; vzeroupper; ret;
0x00160e09: mov [rdi+r8-4], edx; mov byte ptr [rdi+r8], 0; vzeroupper; ret;
0x00160e0a: mov [rdi+rax-4], edx; mov byte ptr [rdi+r8], 0; vzeroupper; ret;
0x00160e0d: cld; mov byte ptr [rdi+r8], 0; vzeroupper; ret;
0x00160e23: mov rdx, [rsi+r8-8]; mov [rdi], rcx; mov [rdi+r8-8], rdx; mov byte ptr [rdi+r8], 0; vzeroupper; ret;
0x00160e24: mov edx, [rsi+rax-8]; mov [rdi], rcx; mov [rdi+r8-8], rdx; mov byte ptr [rdi+r8], 0; vzeroupper; ret;
0x00160e27: clc; mov [rdi], rcx; mov [rdi+r8-8], rdx; mov byte ptr [rdi+r8], 0; vzeroupper; ret;
0x00160e28: mov [rdi], rcx; mov [rdi+r8-8], rdx; mov byte ptr [rdi+r8], 0; vzeroupper; ret;
0x00160e29: mov [rdi], ecx; mov [rdi+r8-8], rdx; mov byte ptr [rdi+r8], 0; vzeroupper; ret;
0x00160e2a: cmovp ecx, [rcx+0x42f80754]; mov byte ptr [rdi+rax], 0; vzeroupper; ret;
0x00160e2b: mov [rdi+r8-8], rdx; mov byte ptr [rdi+r8], 0; vzeroupper; ret;
0x00160e2c: mov [rdi+rax-8], edx; mov byte ptr [rdi+r8], 0; vzeroupper; ret;
0x00160e2f: clc; mov byte ptr [rdi+r8], 0; vzeroupper; ret;
0x00160e44: vmovdqu xmm3, [rsi+r8-0x10]; vmovdqu [rdi], xmm2; vmovdqu [rdi+r8-0x10], xmm3; mov byte ptr [rdi+r8], 0; vzeroupper; ret;
0x00160e4b: vmovdqu [rdi], xmm2; vmovdqu [rdi+r8-0x10], xmm3; mov byte ptr [rdi+r8], 0; vzeroupper; ret;
0x00160e4f: vmovdqu [rdi+r8-0x10], xmm3; mov byte ptr [rdi+r8], 0; vzeroupper; ret;
0x00160e64: vmovdqu ymm3, [rsi+r8-0x20]; vmovdqu [rdi], ymm2; vmovdqu [rdi+r8-0x20], ymm3; mov byte ptr [rdi+r8], 0; vzeroupper; ret;
0x00160e6b: vmovdqu [rdi], ymm2; vmovdqu [rdi+r8-0x20], ymm3; mov byte ptr [rdi+r8], 0; vzeroupper; ret;
0x00160e6f: vmovdqu [rdi+r8-0x20], ymm3; mov byte ptr [rdi+r8], 0; vzeroupper; ret;
0x00160e76: mov byte ptr [rdi+r8], 0; vzeroupper; ret;
0x00160e77: mov byte ptr [rdi+rax], 0; vzeroupper; ret;
0x00160e8c: vmovdqu [rdi], ymm2; vmovdqu [rdi+0x20], ymm3; mov [rdi+0x40], cl; mov byte ptr [rdi+0x41], 0; vzeroupper; ret;
0x00160e90: vmovdqu [rdi+0x20], ymm3; mov [rdi+0x40], cl; mov byte ptr [rdi+0x41], 0; vzeroupper; ret;
0x00160e95: mov [rdi+0x40], cl; mov byte ptr [rdi+0x41], 0; vzeroupper; ret;
0x00160e98: mov byte ptr [rdi+0x41], 0; vzeroupper; ret;
0x00160ee6: vmovdqu [rdi+0x60], ymm7; mov byte ptr [rdi+0x80], 0; vzeroupper; ret;
0x00160eeb: mov byte ptr [rdi+0x80], 0; vzeroupper; ret;
0x00160eec: xchg [rax], eax; vzeroupper; ret;
0x00160eed: add byte ptr [rax], 0; add [rax], al; vzeroupper; ret;
0x00160fd7: nop [rax+rax]; vzeroupper; ret;
0x00160fd8: nop [rax+rax]; vzeroupper; ret;
0x00160fda: test [rax], al; add [rax], al; add [rax], al; vzeroupper; ret;
0x00160fdc: add [rax], al; add [rax], al; vzeroupper; ret;
0x00161241: add [rax], al; add [rbx-0x7cf0fb06], al; ret;
0x00161243: add [rbx-0x7cf0fb06], al; ret;
0x00161261: mov byte ptr [rdi], 0; vzeroupper; ret;
0x001612d2: mov dword ptr [rax-0x17], 0xffffff50; nop [rax]; movzx edx, word ptr [rsi]; mov [rdi], dx; vzeroupper; ret;
0x001612ea: nop [rax+rax]; movzx ecx, word ptr [rsi]; mov [rdi], cx; mov byte ptr [rdi+2], 0; vzeroupper; ret;
0x001612eb: nop [rax+rax]; movzx ecx, word ptr [rsi]; mov [rdi], cx; mov byte ptr [rdi+2], 0; vzeroupper; ret;
0x001612ed: add [rax], r8b; movzx ecx, word ptr [rsi]; mov [rdi], cx; mov byte ptr [rdi+2], 0; vzeroupper; ret;
0x001612ee: add [rax], al; movzx ecx, word ptr [rsi]; mov [rdi], cx; mov byte ptr [rdi+2], 0; vzeroupper; ret;
0x001612ef: add [rdi], cl; mov bh, 0xe; mov [rdi], cx; mov byte ptr [rdi+2], 0; vzeroupper; ret;
0x001612f0: movzx ecx, word ptr [rsi]; mov [rdi], cx; mov byte ptr [rdi+2], 0; vzeroupper; ret;
0x001612f1: mov bh, 0xe; mov [rdi], cx; mov byte ptr [rdi+2], 0; vzeroupper; ret;
0x001612f3: mov [rdi], cx; mov byte ptr [rdi+2], 0; vzeroupper; ret;
0x001612f4: mov [rdi], ecx; mov byte ptr [rdi+2], 0; vzeroupper; ret;
0x001612f5: shufps xmm0, [rdi+2], 0; vzeroupper; ret;
0x001612f6: mov byte ptr [rdi+2], 0; vzeroupper; ret;
0x001612f7: add r8b, [r8]; vzeroupper; ret;
0x001612f8: add al, [rax]; vzeroupper; ret;
0x001612fe: xchg ax, ax; mov edx, [rsi]; mov [rdi], edx; vzeroupper; ret;
0x001612ff: nop; mov edx, [rsi]; mov [rdi], edx; vzeroupper; ret;
0x00161300: mov edx, [rsi]; mov [rdi], edx; vzeroupper; ret;
0x00161310: mov ecx, [rsi]; mov [rdi], ecx; mov ecx, [rsi+rdx-3]; mov [rdi+rdx-3], ecx; vzeroupper; ret;
0x00161312: mov [rdi], ecx; mov ecx, [rsi+rdx-3]; mov [rdi+rdx-3], ecx; vzeroupper; ret;
0x00161314: mov ecx, [rsi+rdx-3]; mov [rdi+rdx-3], ecx; vzeroupper; ret;
0x00161317: std; mov [rdi+rdx-3], ecx; vzeroupper; ret;
0x00161318: mov [rdi+rdx-3], ecx; vzeroupper; ret;
0x0016131b: std; vzeroupper; ret;
0x00161320: mov rcx, [rsi]; mov r9, [rsi+rdx-7]; mov [rdi], rcx; mov [rdi+rdx-7], r9; vzeroupper; ret;
0x00161321: mov ecx, [rsi]; mov r9, [rsi+rdx-7]; mov [rdi], rcx; mov [rdi+rdx-7], r9; vzeroupper; ret;
0x00161323: mov r9, [rsi+rdx-7]; mov [rdi], rcx; mov [rdi+rdx-7], r9; vzeroupper; ret;
0x00161324: mov ecx, [rsi+rdx-7]; mov [rdi], rcx; mov [rdi+rdx-7], r9; vzeroupper; ret;
0x00161327: stc; mov [rdi], rcx; mov [rdi+rdx-7], r9; vzeroupper; ret;
0x00161328: mov [rdi], rcx; mov [rdi+rdx-7], r9; vzeroupper; ret;
0x00161329: mov [rdi], ecx; mov [rdi+rdx-7], r9; vzeroupper; ret;
0x0016132b: mov [rdi+rdx-7], r9; vzeroupper; ret;
0x0016132c: mov [rdi+rdx-7], ecx; vzeroupper; ret;
0x0016132f: stc; vzeroupper; ret;
0x0016133e: add [rax+0x166ffac5], dl; vmovdqu xmm3, [rsi+rdx-0xf]; vmovdqu [rdi], xmm2; vmovdqu [rdi+rdx-0xf], xmm3; vzeroupper; ret;
0x00161340: vmovdqu xmm2, [rsi]; vmovdqu xmm3, [rsi+rdx-0xf]; vmovdqu [rdi], xmm2; vmovdqu [rdi+rdx-0xf], xmm3; vzeroupper; ret;
0x00161344: vmovdqu xmm3, [rsi+rdx-0xf]; vmovdqu [rdi], xmm2; vmovdqu [rdi+rdx-0xf], xmm3; vzeroupper; ret;
0x00161349: int1; vmovdqu [rdi], xmm2; vmovdqu [rdi+rdx-0xf], xmm3; vzeroupper; ret;
0x0016134a: vmovdqu [rdi], xmm2; vmovdqu [rdi+rdx-0xf], xmm3; vzeroupper; ret;
0x0016134e: vmovdqu [rdi+rdx-0xf], xmm3; vzeroupper; ret;
0x00161353: int1; vzeroupper; ret;
0x00161360: vmovdqu ymm2, [rsi]; vmovdqu ymm3, [rsi+rdx-0x1f]; vmovdqu [rdi], ymm2; vmovdqu [rdi+rdx-0x1f], ymm3; vzeroupper; ret;
0x00161364: vmovdqu ymm3, [rsi+rdx-0x1f]; vmovdqu [rdi], ymm2; vmovdqu [rdi+rdx-0x1f], ymm3; vzeroupper; ret;
0x0016136a: vmovdqu [rdi], ymm2; vmovdqu [rdi+rdx-0x1f], ymm3; vzeroupper; ret;
0x0016136e: vmovdqu [rdi+rdx-0x1f], ymm3; vzeroupper; ret;
0x001613b6: ret 0x21;
0x0016161a: ret 4;
0x00161717: and ecx, ebp; ret;
0x00161881: add ecx, [rdi]; test [rax+2], ebx; add [rax], al; vzeroupper; ret;
0x00161883: test [rax+2], ebx; add [rax], al; vzeroupper; ret;
0x001618ca: adc al, [rdx]; add [rax], al; vzeroupper; ret;
0x001618fe: fiadd st, word ptr [rcx]; add [rax], al; vzeroupper; ret;
0x0016195f: add [rdi], ecx; test [rdx+1], edi; add [rax], al; vzeroupper; ret;
0x00161961: test [rdx+1], edi; add [rax], al; vzeroupper; ret;
0x0016196a: nop [rax+rax]; movzx edx, byte ptr [rsi]; mov [rdi], dl; vzeroupper; ret;
0x0016196b: nop [rax+rax]; movzx edx, byte ptr [rsi]; mov [rdi], dl; vzeroupper; ret;
0x0016196d: add [rax], r8b; movzx edx, byte ptr [rsi]; mov [rdi], dl; vzeroupper; ret;
0x0016196e: add [rax], al; movzx edx, byte ptr [rsi]; mov [rdi], dl; vzeroupper; ret;
0x0016196f: add [rdi], cl; mov dh, 0x16; mov [rdi], dl; vzeroupper; ret;
0x00161970: movzx edx, byte ptr [rsi]; mov [rdi], dl; vzeroupper; ret;
0x00161971: mov dh, 0x16; mov [rdi], dl; vzeroupper; ret;
0x00161979: nop [rax]; movzx edx, word ptr [rsi]; mov [rdi], dx; vzeroupper; ret;
0x0016197b: add byte ptr [rax], 0; add [rax], al; movzx edx, word ptr [rsi]; mov [rdi], dx; vzeroupper; ret;
0x0016197c: add [rax], al; add [rax], al; movzx edx, word ptr [rsi]; mov [rdi], dx; vzeroupper; ret;
0x0016197d: add [rax], al; add [rdi], cl; mov bh, 0x16; mov [rdi], dx; vzeroupper; ret;
0x0016197e: add [rax], al; movzx edx, word ptr [rsi]; mov [rdi], dx; vzeroupper; ret;
0x0016197f: add [rdi], cl; mov bh, 0x16; mov [rdi], dx; vzeroupper; ret;
0x00161980: movzx edx, word ptr [rsi]; mov [rdi], dx; vzeroupper; ret;
0x00161981: mov bh, 0x16; mov [rdi], dx; vzeroupper; ret;
0x00161990: movzx ecx, word ptr [rsi]; movzx edx, word ptr [rsi+r8-2]; mov [rdi], cx; mov [rdi+r8-2], dx; vzeroupper; ret;
0x00161991: mov bh, 0xe; movzx edx, word ptr [rsi+r8-2]; mov [rdi], cx; mov [rdi+r8-2], dx; vzeroupper; ret;
0x00161993: movzx edx, word ptr [rsi+r8-2]; mov [rdi], cx; mov [rdi+r8-2], dx; vzeroupper; ret;
0x00161994: movzx edx, word ptr [rsi+rax-2]; mov [rdi], cx; mov [rdi+r8-2], dx; vzeroupper; ret;
0x00161999: mov [rdi], cx; mov [rdi+r8-2], dx; vzeroupper; ret;
0x0016199a: mov [rdi], ecx; mov [rdi+r8-2], dx; vzeroupper; ret;
0x001619b0: mov ecx, [rsi]; mov edx, [rsi+r8-4]; mov [rdi], ecx; mov [rdi+r8-4], edx; vzeroupper; ret;
0x001619b2: mov edx, [rsi+r8-4]; mov [rdi], ecx; mov [rdi+r8-4], edx; vzeroupper; ret;
0x001619b3: mov edx, [rsi+rax-4]; mov [rdi], ecx; mov [rdi+r8-4], edx; vzeroupper; ret;
0x001619b6: cld; mov [rdi], ecx; mov [rdi+r8-4], edx; vzeroupper; ret;
0x001619b7: mov [rdi], ecx; mov [rdi+r8-4], edx; vzeroupper; ret;
0x001619d0: mov rcx, [rsi]; mov rdx, [rsi+r8-8]; mov [rdi], rcx; mov [rdi+r8-8], rdx; vzeroupper; ret;
0x001619d1: mov ecx, [rsi]; mov rdx, [rsi+r8-8]; mov [rdi], rcx; mov [rdi+r8-8], rdx; vzeroupper; ret;
0x001619d3: mov rdx, [rsi+r8-8]; mov [rdi], rcx; mov [rdi+r8-8], rdx; vzeroupper; ret;
0x001619d4: mov edx, [rsi+rax-8]; mov [rdi], rcx; mov [rdi+r8-8], rdx; vzeroupper; ret;
0x001619d7: clc; mov [rdi], rcx; mov [rdi+r8-8], rdx; vzeroupper; ret;
0x001619d8: mov [rdi], rcx; mov [rdi+r8-8], rdx; vzeroupper; ret;
0x001619d9: mov [rdi], ecx; mov [rdi+r8-8], rdx; vzeroupper; ret;
0x001619ee: add [rax+0x166ffac5], dl; vmovdqu xmm3, [rsi+r8-0x10]; vmovdqu [rdi], xmm2; vmovdqu [rdi+r8-0x10], xmm3; vzeroupper; ret;
0x001619f0: vmovdqu xmm2, [rsi]; vmovdqu xmm3, [rsi+r8-0x10]; vmovdqu [rdi], xmm2; vmovdqu [rdi+r8-0x10], xmm3; vzeroupper; ret;
0x001619f4: vmovdqu xmm3, [rsi+r8-0x10]; vmovdqu [rdi], xmm2; vmovdqu [rdi+r8-0x10], xmm3; vzeroupper; ret;
0x001619fb: vmovdqu [rdi], xmm2; vmovdqu [rdi+r8-0x10], xmm3; vzeroupper; ret;
0x001619ff: vmovdqu [rdi+r8-0x10], xmm3; vzeroupper; ret;
0x00161a00: mov eax, [0x77f8c5f0075c7f7a]; ret;
0x00161a10: vmovdqu ymm2, [rsi]; vmovdqu ymm3, [rsi+r8-0x20]; vmovdqu [rdi], ymm2; vmovdqu [rdi+r8-0x20], ymm3; vzeroupper; ret;
0x00161a14: vmovdqu ymm3, [rsi+r8-0x20]; vmovdqu [rdi], ymm2; vmovdqu [rdi+r8-0x20], ymm3; vzeroupper; ret;
0x00161a1b: vmovdqu [rdi], ymm2; vmovdqu [rdi+r8-0x20], ymm3; vzeroupper; ret;
0x00161a1f: vmovdqu [rdi+r8-0x20], ymm3; vzeroupper; ret;
0x00161a20: mov eax, [0x77f8c5e0075c7f7e]; ret;
0x00161a39: mov cl, [rsi+0x40]; vmovdqu [rdi], ymm2; vmovdqu [rdi+0x20], ymm3; mov [rdi+0x40], cl; vzeroupper; ret;
0x00161a3c: vmovdqu [rdi], ymm2; vmovdqu [rdi+0x20], ymm3; mov [rdi+0x40], cl; vzeroupper; ret;
0x00161a40: vmovdqu [rdi+0x20], ymm3; mov [rdi+0x40], cl; vzeroupper; ret;
0x00161a45: mov [rdi+0x40], cl; vzeroupper; ret;
0x00161a4c: nop [rax]; mov [rdi], dl; vzeroupper; ret;
0x00161a4f: add [rax+0x77f8c517], cl; ret;
0x00161be6: vmovdqu [rdi+0x60], ymm7; vzeroupper; ret;
0x00161cc5: nop [rax+rax]; nop; mov rax, rdi; vzeroupper; ret;
0x00161cc6: nop [rax+rax]; nop; mov rax, rdi; vzeroupper; ret;
0x00161cc7: nop [rax+rax]; nop; mov rax, rdi; vzeroupper; ret;
0x00161ccb: add [rax], al; add [rax], al; nop; mov rax, rdi; vzeroupper; ret;
0x00161ccd: add [rax], al; nop; mov rax, rdi; vzeroupper; ret;
0x00161ccf: nop; mov rax, rdi; vzeroupper; ret;
0x00161d2b: add [rax], al; add [rax], al; add [rax+0x29], cl; iretd;
0x00161d2d: add [rax], al; add [rax+0x29], cl; iretd;
0x00161f51: mov byte ptr [rdi], 0; lea rax, [rdi]; vzeroupper; ret;
0x00161f54: lea rax, [rdi]; vzeroupper; ret;
0x00161f55: lea eax, [rdi]; vzeroupper; ret;
0x00161fc9: nop [rax]; movzx edx, word ptr [rsi]; mov [rdi], dx; lea rax, [rdi+1]; vzeroupper; ret;
0x00161fce: add [rax], al; movzx edx, word ptr [rsi]; mov [rdi], dx; lea rax, [rdi+1]; vzeroupper; ret;
0x00161fcf: add [rdi], cl; mov bh, 0x16; mov [rdi], dx; lea rax, [rdi+1]; vzeroupper; ret;
0x00161fd0: movzx edx, word ptr [rsi]; mov [rdi], dx; lea rax, [rdi+1]; vzeroupper; ret;
0x00161fd1: mov bh, 0x16; mov [rdi], dx; lea rax, [rdi+1]; vzeroupper; ret;
0x00161fd3: mov [rdi], dx; lea rax, [rdi+1]; vzeroupper; ret;
0x00161fd4: mov [rdi], edx; lea rax, [rdi+1]; vzeroupper; ret;
0x00161fe0: movzx ecx, word ptr [rsi]; mov [rdi], cx; mov byte ptr [rdi+2], 0; lea rax, [rdi+2]; vzeroupper; ret;
0x00161fe1: mov bh, 0xe; mov [rdi], cx; mov byte ptr [rdi+2], 0; lea rax, [rdi+2]; vzeroupper; ret;
0x00161fe3: mov [rdi], cx; mov byte ptr [rdi+2], 0; lea rax, [rdi+2]; vzeroupper; ret;
0x00161fe4: mov [rdi], ecx; mov byte ptr [rdi+2], 0; lea rax, [rdi+2]; vzeroupper; ret;
0x00161fe5: shufps xmm0, [rdi+2], 0; lea rax, [rdi+2]; vzeroupper; ret;
0x00161fe6: mov byte ptr [rdi+2], 0; lea rax, [rdi+2]; vzeroupper; ret;
0x00161fe7: add r8b, [r8]; lea rax, [rdi+2]; vzeroupper; ret;
0x00161fe8: add al, [rax]; lea rax, [rdi+2]; vzeroupper; ret;
0x00161ffd: nop [rax]; mov edx, [rsi]; mov [rdi], edx; lea rax, [rdi+3]; vzeroupper; ret;
0x00161fff: add [rbx+0x48178916], cl; lea eax, [rdi+3]; vzeroupper; ret;
0x00162000: mov edx, [rsi]; mov [rdi], edx; lea rax, [rdi+3]; vzeroupper; ret;
0x00162002: mov [rdi], edx; lea rax, [rdi+3]; vzeroupper; ret;
0x00162004: lea rax, [rdi+3]; vzeroupper; ret;
0x00162005: lea eax, [rdi+3]; vzeroupper; ret;
0x00162012: mov [rdi], ecx; mov ecx, [rsi+rdx-3]; mov [rdi+rdx-3], ecx; lea rax, [rdi+rdx]; vzeroupper; ret;
0x00162014: mov ecx, [rsi+rdx-3]; mov [rdi+rdx-3], ecx; lea rax, [rdi+rdx]; vzeroupper; ret;
0x00162017: std; mov [rdi+rdx-3], ecx; lea rax, [rdi+rdx]; vzeroupper; ret;
0x00162018: mov [rdi+rdx-3], ecx; lea rax, [rdi+rdx]; vzeroupper; ret;
0x0016201b: std; lea rax, [rdi+rdx]; vzeroupper; ret;
0x00162033: mov r9, [rsi+rdx-7]; mov [rdi], rcx; mov [rdi+rdx-7], r9; lea rax, [rdi+rdx]; vzeroupper; ret;
0x00162034: mov ecx, [rsi+rdx-7]; mov [rdi], rcx; mov [rdi+rdx-7], r9; lea rax, [rdi+rdx]; vzeroupper; ret;
0x00162037: stc; mov [rdi], rcx; mov [rdi+rdx-7], r9; lea rax, [rdi+rdx]; vzeroupper; ret;
0x00162038: mov [rdi], rcx; mov [rdi+rdx-7], r9; lea rax, [rdi+rdx]; vzeroupper; ret;
0x00162039: mov [rdi], ecx; mov [rdi+rdx-7], r9; lea rax, [rdi+rdx]; vzeroupper; ret;
0x0016203a: cmovl ecx, [rcx+0x48f9174c]; lea eax, [rdi+rdx]; vzeroupper; ret;
0x0016203b: mov [rdi+rdx-7], r9; lea rax, [rdi+rdx]; vzeroupper; ret;
0x0016203c: mov [rdi+rdx-7], ecx; lea rax, [rdi+rdx]; vzeroupper; ret;
0x0016203f: stc; lea rax, [rdi+rdx]; vzeroupper; ret;
0x00162054: vmovdqu xmm3, [rsi+rdx-0xf]; vmovdqu [rdi], xmm2; vmovdqu [rdi+rdx-0xf], xmm3; lea rax, [rdi+rdx]; vzeroupper; ret;
0x00162059: int1; vmovdqu [rdi], xmm2; vmovdqu [rdi+rdx-0xf], xmm3; lea rax, [rdi+rdx]; vzeroupper; ret;
0x0016205a: vmovdqu [rdi], xmm2; vmovdqu [rdi+rdx-0xf], xmm3; lea rax, [rdi+rdx]; vzeroupper; ret;
0x0016205e: vmovdqu [rdi+rdx-0xf], xmm3; lea rax, [rdi+rdx]; vzeroupper; ret;
0x00162063: int1; lea rax, [rdi+rdx]; vzeroupper; ret;
0x00162074: vmovdqu ymm3, [rsi+rdx-0x1f]; vmovdqu [rdi], ymm2; vmovdqu [rdi+rdx-0x1f], ymm3; lea rax, [rdi+rdx]; vzeroupper; ret;
0x0016207a: vmovdqu [rdi], ymm2; vmovdqu [rdi+rdx-0x1f], ymm3; lea rax, [rdi+rdx]; vzeroupper; ret;
0x0016207e: vmovdqu [rdi+rdx-0x1f], ymm3; lea rax, [rdi+rdx]; vzeroupper; ret;
0x00162084: lea rax, [rdi+rdx]; vzeroupper; ret;
0x00162085: lea eax, [rdi+rdx]; vzeroupper; ret;
0x00162086: add al, 0x17; vzeroupper; ret;
0x001620c3: ret 0x20;
0x001620df: push rsi; and ch, al; std; xlat [rbx]; ror byte ptr [rcx-0x7d], cl; ret 0x4d20;
0x001620e0: and ch, al; std; xlat [rbx]; ror byte ptr [rcx-0x7d], cl; ret 0x4d20;
0x001620e2: std; xlat [rbx]; ror byte ptr [rcx-0x7d], cl; ret 0x4d20;
0x001620e3: xlat [rbx]; ror byte ptr [rcx-0x7d], cl; ret 0x4d20;
0x001620e4: ror byte ptr [rcx-0x7d], cl; ret 0x4d20;
0x001620e7: ret 0x4d20;
0x001623c7: add [rdi], ecx; test [rdx+4], eax; add [rax], al; vzeroupper; ret;
0x001623c9: test [rdx+4], eax; add [rax], al; vzeroupper; ret;
0x001624e7: ret 0x2920;
0x00162528: and [rax+1], cl; iretd;
0x00162591: add cl, [rdi]; test [rax+2], edi; add [rax], al; vzeroupper; ret;
0x00162593: test [rax+2], edi; add [rax], al; vzeroupper; ret;
0x001625d2: cmp al, [rdx]; add [rax], al; vzeroupper; ret;
0x00162632: fiadd st, dword ptr [rcx]; add [rax], al; vzeroupper; ret;
0x00162693: add [rdi], ecx; test [rsi+1], esi; add [rax], al; vzeroupper; ret;
0x00162695: test [rsi+1], esi; add [rax], al; vzeroupper; ret;
0x0016269e: xchg ax, ax; movzx edx, byte ptr [rsi]; mov [rdi], dl; lea rax, [rdi+1]; vzeroupper; ret;
0x0016269f: nop; movzx edx, byte ptr [rsi]; mov [rdi], dl; lea rax, [rdi+1]; vzeroupper; ret;
0x001626a0: movzx edx, byte ptr [rsi]; mov [rdi], dl; lea rax, [rdi+1]; vzeroupper; ret;
0x001626a1: mov dh, 0x16; mov [rdi], dl; lea rax, [rdi+1]; vzeroupper; ret;
0x001626a3: mov [rdi], dl; lea rax, [rdi+1]; vzeroupper; ret;
0x001626a5: lea rax, [rdi+1]; vzeroupper; ret;
0x001626a6: lea eax, [rdi+1]; vzeroupper; ret;
0x001626ad: nop [rax]; movzx edx, word ptr [rsi]; mov [rdi], dx; lea rax, [rdi+2]; vzeroupper; ret;
0x001626af: add [rdi], cl; mov bh, 0x16; mov [rdi], dx; lea rax, [rdi+2]; vzeroupper; ret;
0x001626b0: movzx edx, word ptr [rsi]; mov [rdi], dx; lea rax, [rdi+2]; vzeroupper; ret;
0x001626b1: mov bh, 0x16; mov [rdi], dx; lea rax, [rdi+2]; vzeroupper; ret;
0x001626b3: mov [rdi], dx; lea rax, [rdi+2]; vzeroupper; ret;
0x001626b4: mov [rdi], edx; lea rax, [rdi+2]; vzeroupper; ret;
0x001626b6: lea rax, [rdi+2]; vzeroupper; ret;
0x001626b7: lea eax, [rdi+2]; vzeroupper; ret;
0x001626c3: movzx edx, word ptr [rsi+r8-2]; mov [rdi], cx; mov [rdi+r8-2], dx; lea rax, [rdi+r8]; vzeroupper; ret;
0x001626c4: movzx edx, word ptr [rsi+rax-2]; mov [rdi], cx; mov [rdi+r8-2], dx; lea rax, [rdi+r8]; vzeroupper; ret;
0x001626c9: mov [rdi], cx; mov [rdi+r8-2], dx; lea rax, [rdi+r8]; vzeroupper; ret;
0x001626ca: mov [rdi], ecx; mov [rdi+r8-2], dx; lea rax, [rdi+r8]; vzeroupper; ret;
0x001626cc: mov [rdi+r8-2], dx; lea rax, [rdi+r8]; vzeroupper; ret;
0x001626cd: mov [rdi+r8-2], edx; lea rax, [rdi+r8]; vzeroupper; ret;
0x001626ce: mov [rdi+rax-2], edx; lea rax, [rdi+r8]; vzeroupper; ret;
0x001626d1: dec byte ptr [rdx-0x73]; add al, 7; vzeroupper; ret;
0x001626e2: mov edx, [rsi+r8-4]; mov [rdi], ecx; mov [rdi+r8-4], edx; lea rax, [rdi+r8]; vzeroupper; ret;
0x001626e3: mov edx, [rsi+rax-4]; mov [rdi], ecx; mov [rdi+r8-4], edx; lea rax, [rdi+r8]; vzeroupper; ret;
0x001626e6: cld; mov [rdi], ecx; mov [rdi+r8-4], edx; lea rax, [rdi+r8]; vzeroupper; ret;
0x001626e7: mov [rdi], ecx; mov [rdi+r8-4], edx; lea rax, [rdi+r8]; vzeroupper; ret;
0x001626e8: cmovb ecx, [rcx+0x4afc0754]; lea eax, [rdi+rax]; vzeroupper; ret;
0x001626e9: mov [rdi+r8-4], edx; lea rax, [rdi+r8]; vzeroupper; ret;
0x001626ea: mov [rdi+rax-4], edx; lea rax, [rdi+r8]; vzeroupper; ret;
0x001626ed: cld; lea rax, [rdi+r8]; vzeroupper; ret;
0x00162703: mov rdx, [rsi+r8-8]; mov [rdi], rcx; mov [rdi+r8-8], rdx; lea rax, [rdi+r8]; vzeroupper; ret;
0x00162704: mov edx, [rsi+rax-8]; mov [rdi], rcx; mov [rdi+r8-8], rdx; lea rax, [rdi+r8]; vzeroupper; ret;
0x00162707: clc; mov [rdi], rcx; mov [rdi+r8-8], rdx; lea rax, [rdi+r8]; vzeroupper; ret;
0x00162708: mov [rdi], rcx; mov [rdi+r8-8], rdx; lea rax, [rdi+r8]; vzeroupper; ret;
0x00162709: mov [rdi], ecx; mov [rdi+r8-8], rdx; lea rax, [rdi+r8]; vzeroupper; ret;
0x0016270a: cmovp ecx, [rcx+0x4af80754]; lea eax, [rdi+rax]; vzeroupper; ret;
0x0016270b: mov [rdi+r8-8], rdx; lea rax, [rdi+r8]; vzeroupper; ret;
0x0016270c: mov [rdi+rax-8], edx; lea rax, [rdi+r8]; vzeroupper; ret;
0x0016270f: clc; lea rax, [rdi+r8]; vzeroupper; ret;
0x00162724: vmovdqu xmm3, [rsi+r8-0x10]; vmovdqu [rdi], xmm2; vmovdqu [rdi+r8-0x10], xmm3; lea rax, [rdi+r8]; vzeroupper; ret;
0x0016272b: vmovdqu [rdi], xmm2; vmovdqu [rdi+r8-0x10], xmm3; lea rax, [rdi+r8]; vzeroupper; ret;
0x0016272f: vmovdqu [rdi+r8-0x10], xmm3; lea rax, [rdi+r8]; vzeroupper; ret;
0x00162744: vmovdqu ymm3, [rsi+r8-0x20]; vmovdqu [rdi], ymm2; vmovdqu [rdi+r8-0x20], ymm3; lea rax, [rdi+r8]; vzeroupper; ret;
0x0016274b: vmovdqu [rdi], ymm2; vmovdqu [rdi+r8-0x20], ymm3; lea rax, [rdi+r8]; vzeroupper; ret;
0x0016274f: vmovdqu [rdi+r8-0x20], ymm3; lea rax, [rdi+r8]; vzeroupper; ret;
0x00162756: lea rax, [rdi+r8]; vzeroupper; ret;
0x00162757: lea eax, [rdi+rax]; vzeroupper; ret;
0x00162758: add al, 7; vzeroupper; ret;
0x0016276c: vmovdqu [rdi], ymm2; vmovdqu [rdi+0x20], ymm3; mov [rdi+0x40], cl; lea rax, [rdi+0x41]; vzeroupper; ret;
0x00162770: vmovdqu [rdi+0x20], ymm3; mov [rdi+0x40], cl; lea rax, [rdi+0x41]; vzeroupper; ret;
0x00162775: mov [rdi+0x40], cl; lea rax, [rdi+0x41]; vzeroupper; ret;
0x00162778: lea rax, [rdi+0x41]; vzeroupper; ret;
0x00162779: lea eax, [rdi+0x41]; vzeroupper; ret;
0x00162780: mov [rdi], dl; vzeroupper; ret;
0x00162786: nop [rax+rax]; mov [rdi], dx; vzeroupper; ret;
0x00162787: nop [rax+rax]; mov [rdi], dx; vzeroupper; ret;
0x00162788: nop [rax+rax]; mov [rdi], dx; vzeroupper; ret;
0x0016278a: test [rax], al; add [rax], al; add [rax], al; mov [rdi], dx; vzeroupper; ret;
0x0016278c: add [rax], al; add [rax], al; mov [rdi], dx; vzeroupper; ret;
0x0016278e: add [rax], al; mov [rdi], dx; vzeroupper; ret;
0x00162790: mov [rdi], dx; vzeroupper; ret;
0x00162791: mov [rdi], edx; vzeroupper; ret;
0x00162797: nop [rax+rax]; mov [rdi], dx; mov [rdi+r8-2], dx; vzeroupper; ret;
0x00162798: nop [rax+rax]; mov [rdi], dx; mov [rdi+r8-2], dx; vzeroupper; ret;
0x0016279c: add [rax], al; add [rax], al; mov [rdi], dx; mov [rdi+r8-2], dx; vzeroupper; ret;
0x0016279e: add [rax], al; mov [rdi], dx; mov [rdi+r8-2], dx; vzeroupper; ret;
0x001627a0: mov [rdi], dx; mov [rdi+r8-2], dx; vzeroupper; ret;
0x001627a1: mov [rdi], edx; mov [rdi+r8-2], dx; vzeroupper; ret;
0x001627a3: mov [rdi+r8-2], dx; vzeroupper; ret;
0x001627a4: mov [rdi+r8-2], edx; vzeroupper; ret;
0x001627a5: mov [rdi+rax-2], edx; vzeroupper; ret;
0x001627ad: nop [rax]; mov [rdi], edx; mov [rdi+r8-4], edx; vzeroupper; ret;
0x001627b0: mov [rdi], edx; mov [rdi+r8-4], edx; vzeroupper; ret;
0x001627b2: mov [rdi+r8-4], edx; vzeroupper; ret;
0x001627b3: mov [rdi+rax-4], edx; vzeroupper; ret;
0x001627bb: nop [rax+rax]; mov [rdi], rdx; mov [rdi+r8-8], rdx; vzeroupper; ret;
0x001627bd: add [rax], r8b; mov [rdi], rdx; mov [rdi+r8-8], rdx; vzeroupper; ret;
0x001627be: add [rax], al; mov [rdi], rdx; mov [rdi+r8-8], rdx; vzeroupper; ret;
0x001627c0: mov [rdi], rdx; mov [rdi+r8-8], rdx; vzeroupper; ret;
0x001627c1: mov [rdi], edx; mov [rdi+r8-8], rdx; vzeroupper; ret;
0x001627c3: mov [rdi+r8-8], rdx; vzeroupper; ret;
0x001627c4: mov [rdi+rax-8], edx; vzeroupper; ret;
0x001627cc: nop [rax]; vmovdqu [rdi], xmm0; vmovdqu [rdi+r8-0x10], xmm0; vzeroupper; ret;
0x001627d0: vmovdqu [rdi], xmm0; vmovdqu [rdi+r8-0x10], xmm0; vzeroupper; ret;
0x001627d4: vmovdqu [rdi+r8-0x10], xmm0; vzeroupper; ret;
0x001627d5: mov eax, [0x77f8c5f007447f7a]; ret;
0x00162916: vmovdqu [rdi+0x60], ymm7; lea rax, [rdi+0x80]; vzeroupper; ret;
0x0016291b: lea rax, [rdi+0x80]; vzeroupper; ret;
0x0016291c: lea eax, [rdi+0x80]; vzeroupper; ret;
0x00162920: add [rax], al; vzeroupper; ret;
0x001629ad: ret 0x820f;
0x001629f3: add [rdi], ecx; xchg [rsi+0xffffffc], esi; test [rax+0x48fffffc], ah; mov eax, edi; vzeroupper; ret;
0x001629f5: xchg [rsi+0xffffffc], esi; test [rax+0x48fffffc], ah; mov eax, edi; vzeroupper; ret;
0x001629f9: dec dword ptr [rdi]; test [rax+0x48fffffc], ah; mov eax, edi; vzeroupper; ret;
0x001629fb: test [rax+0x48fffffc], ah; mov eax, edi; vzeroupper; ret;
0x001629ff: dec dword ptr [rax-0x77]; clc; vzeroupper; ret;
0x00162a07: nop [rax+rax]; mov rax, rdi; vzeroupper; ret;
0x00162a08: nop [rax+rax]; mov rax, rdi; vzeroupper; ret;
0x00162a0a: test [rax], al; add [rax], al; add [rax], al; mov rax, rdi; vzeroupper; ret;
0x00162a0b: add [rax], al; add [rax], al; add [rax-0x77], cl; clc; vzeroupper; ret;
0x00162a0c: add [rax], al; add [rax], al; mov rax, rdi; vzeroupper; ret;
0x00162a0d: add [rax], al; add [rax-0x77], cl; clc; vzeroupper; ret;
0x00162a0e: add [rax], al; mov rax, rdi; vzeroupper; ret;
0x00162a0f: add [rax-0x77], cl; clc; vzeroupper; ret;
0x00162a10: mov rax, rdi; vzeroupper; ret;
0x00162a11: mov eax, edi; vzeroupper; ret;
0x00162b28: cmp esi, [rdx+5]; movzx ecx, byte ptr [rsi]; mov [rdi], cl; ret;
0x00162bd6: vmovdqu [rdi+rdx-0x20], ymm4; vmovdqu [rdi+rdx-0x40], ymm5; vmovdqu [rdi+rdx-0x60], ymm6; vmovdqu [rdi+rdx-0x80], ymm7; vzeroupper; ret;
0x00162bdc: vmovdqu [rdi+rdx-0x40], ymm5; vmovdqu [rdi+rdx-0x60], ymm6; vmovdqu [rdi+rdx-0x80], ymm7; vzeroupper; ret;
0x00162be2: vmovdqu [rdi+rdx-0x60], ymm6; vmovdqu [rdi+rdx-0x80], ymm7; vzeroupper; ret;
0x00162be8: vmovdqu [rdi+rdx-0x80], ymm7; vzeroupper; ret;
0x00162c07: vmovdqu [rdi], ymm0; vmovdqu [rdi+0x20], ymm1; vmovdqu [rdi+rdx-0x20], ymm2; vmovdqu [rdi+rdx-0x40], ymm3; vzeroupper; ret;
0x00162c0b: vmovdqu [rdi+0x20], ymm1; vmovdqu [rdi+rdx-0x20], ymm2; vmovdqu [rdi+rdx-0x40], ymm3; vzeroupper; ret;
0x00162c10: vmovdqu [rdi+rdx-0x20], ymm2; vmovdqu [rdi+rdx-0x40], ymm3; vzeroupper; ret;
0x00162c16: vmovdqu [rdi+rdx-0x40], ymm3; vzeroupper; ret;
0x00162def: vmovdqu [rcx-0x20], ymm6; vmovdqu [rcx-0x40], ymm7; vmovdqu [rcx-0x60], ymm8; vmovdqu [r11], ymm4; vzeroupper; ret;
0x00162df4: vmovdqu [rcx-0x40], ymm7; vmovdqu [rcx-0x60], ymm8; vmovdqu [r11], ymm4; vzeroupper; ret;
0x00162df9: vmovdqu [rcx-0x60], ymm8; vmovdqu [r11], ymm4; vzeroupper; ret;
0x00162dfd: mov al, [0x77f8c5237f7ec1c4]; ret;
0x00162dfe: vmovdqu [r11], ymm4; vzeroupper; ret;
0x00162dff: sar dword ptr [rsi+0x7f], 0x23; vzeroupper; ret;
0x00162e7f: vmovdqu [rdi+0x20], ymm5; vmovdqu [rdi+0x40], ymm6; vmovdqu [rdi+0x60], ymm7; vmovdqu [r11], ymm8; vzeroupper; ret;
0x00162e84: vmovdqu [rdi+0x40], ymm6; vmovdqu [rdi+0x60], ymm7; vmovdqu [r11], ymm8; vzeroupper; ret;
0x00162e89: vmovdqu [rdi+0x60], ymm7; vmovdqu [r11], ymm8; vzeroupper; ret;
0x00162e8e: vmovdqu [r11], ymm8; vzeroupper; ret;
0x00162f7c: vmovdqu [rdi], ymm0; vmovdqu [rdi+0x20], ymm0; vmovdqu [rdi+rdx-0x20], ymm0; vmovdqu [rdi+rdx-0x40], ymm0; vzeroupper; ret;
0x00162f80: vmovdqu [rdi+0x20], ymm0; vmovdqu [rdi+rdx-0x20], ymm0; vmovdqu [rdi+rdx-0x40], ymm0; vzeroupper; ret;
0x00162f85: vmovdqu [rdi+rdx-0x20], ymm0; vmovdqu [rdi+rdx-0x40], ymm0; vzeroupper; ret;
0x00162f8b: vmovdqu [rdi+rdx-0x40], ymm0; vzeroupper; ret;
0x00163012: sub al, 0x72; add cl, [rax+0x77f8c50f]; ret;
0x0016311a: and dword ptr [rcx], 2; add [rax], al; xor eax, eax; vzeroupper; ret;
0x0016311b: and [rdx], eax; add [rax], al; xor eax, eax; vzeroupper; ret;
0x00163159: push qword ptr [rbp+4]; vzeroupper; ret;
0x00163165: ror byte ptr [rbx+0x143b0f14], 0xe; setl al; neg eax; or eax, 1; vzeroupper; ret;
0x00163169: cmp edx, [rsi+rcx]; setl al; neg eax; or eax, 1; vzeroupper; ret;
0x0016316a: adc al, 0xe; setl al; neg eax; or eax, 1; vzeroupper; ret;
0x0016317b: add [rax], al; add [rax], al; add [rcx], dh; ror byte ptr [rbx+0x75163b17], 0xe4; ret;
0x0016317d: add [rax], al; add [rcx], dh; ror byte ptr [rbx+0x75163b17], 0xe4; ret;
0x0016317f: add [rcx], dh; ror byte ptr [rbx+0x75163b17], 0xe4; ret;
0x00163181: ror byte ptr [rbx+0x75163b17], 0xe4; ret;
0x00163187: in al, 0xc3; nop [rax]; xor eax, eax; ret;
0x00163189: nop [rax]; xor eax, eax; ret;
0x0016318b: add byte ptr [rax], 0; add [rax], al; xor eax, eax; ret;
0x0016318c: add [rax], al; add [rax], al; xor eax, eax; ret;
0x001631d8: rol ebp, 1; stc; xlat [rbx]; ret 0xff2d;
0x0016321a: stc; xlat [rbx]; ret 0xff2d;
0x0016321b: xlat [rbx]; ret 0xff2d;
0x0016321c: ret 0xff2d;
0x0016334c: inc ebp; std; xlat [rbx]; ret 0xe883;
0x0016334e: std; xlat [rbx]; ret 0xe883;
0x0016334f: xlat [rbx]; ret 0xe883;
0x00163350: ret 0xe883;
0x00163355: sub al, ch; std; xlat [rbx]; ret;
0x0016343b: ret 0x860f;
0x0016343e: fiadd st, word ptr [rcx]; add [rax], al; add rax, rdi; add rax, rcx; vzeroupper; ret;
0x0016343f: add [rax], eax; add [rax+1], cl; clc; add rax, rcx; vzeroupper; ret;
0x00163440: add [rax], al; add rax, rdi; add rax, rcx; vzeroupper; ret;
0x00163441: add [rax+1], cl; clc; add rax, rcx; vzeroupper; ret;
0x00163442: add rax, rdi; add rax, rcx; vzeroupper; ret;
0x00163443: add eax, edi; add rax, rcx; vzeroupper; ret;
0x00163444: clc; add rax, rcx; vzeroupper; ret;
0x00163445: add rax, rcx; vzeroupper; ret;
0x00163446: add eax, ecx; vzeroupper; ret;
0x0016351c: ret 0x7e40;
0x00163562: xlat [rbx]; rol dword ptr [rbp-0x6b7af040], 0; add [rax], al; xor eax, eax; vzeroupper; ret;
0x00163563: rol dword ptr [rbp-0x6b7af040], 0; add [rax], al; xor eax, eax; vzeroupper; ret;
0x00163567: test [rax+rax-0x3fcf0000], edx; vzeroupper; ret;
0x0016356a: add [rax], al; xor eax, eax; vzeroupper; ret;
0x00163581: ret 0xc540;
0x0016359b: and r13b, r8b; std; xlat [rbx]; rol dword ptr [rbp+0x311b75c0], 0xc0; vzeroupper; ret;
0x0016359c: and ch, al; std; xlat [rbx]; rol dword ptr [rbp+0x311b75c0], 0xc0; vzeroupper; ret;
0x0016359e: std; xlat [rbx]; rol dword ptr [rbp+0x311b75c0], 0xc0; vzeroupper; ret;
0x0016359f: xlat [rbx]; rol dword ptr [rbp+0x311b75c0], 0xc0; vzeroupper; ret;
0x001635a0: rol dword ptr [rbp+0x311b75c0], 0xc0; vzeroupper; ret;
0x001635b6: ret 0x6776;
0x001635c6: ret 0x5776;
0x001635c8: push rdi; add rax, 0x20; add rax, rdi; vzeroupper; ret;
0x001635e6: ret 0x3776;
0x00163606: ret 0x1776;
0x00163615: nop [rax+rax]; nop; vzeroupper; xor eax, eax; ret;
0x00163616: nop [rax+rax]; nop; vzeroupper; xor eax, eax; ret;
0x00163617: nop [rax+rax]; nop; vzeroupper; xor eax, eax; ret;
0x0016361b: add [rax], al; add [rax], al; nop; vzeroupper; xor eax, eax; ret;
0x0016361d: add [rax], al; nop; vzeroupper; xor eax, eax; ret;
0x0016361f: nop; vzeroupper; xor eax, eax; ret;
0x00163620: vzeroupper; xor eax, eax; ret;
0x00163624: rol bl, 0x66; nop [rax+rax]; tzcnt eax, eax; add rax, rdi; vzeroupper; ret;
0x00163626: nop [rax+rax]; tzcnt eax, eax; add rax, rdi; vzeroupper; ret;
0x00163627: nop [rax+rax]; tzcnt eax, eax; add rax, rdi; vzeroupper; ret;
0x00163628: nop [rax+rax]; tzcnt eax, eax; add rax, rdi; vzeroupper; ret;
0x0016362c: add [rax], al; add [rax], al; tzcnt eax, eax; add rax, rdi; vzeroupper; ret;
0x0016362d: add [rax], al; add bl, dh; bsf eax, eax; add rax, rdi; vzeroupper; ret;
0x0016362e: add [rax], al; tzcnt eax, eax; add rax, rdi; vzeroupper; ret;
0x0016362f: add bl, dh; bsf eax, eax; add rax, rdi; vzeroupper; ret;
0x00163630: tzcnt eax, eax; add rax, rdi; vzeroupper; ret;
0x00163631: bsf eax, eax; add rax, rdi; vzeroupper; ret;
0x00163632: mov esp, 0xf80148c0; vzeroupper; ret;
0x00163633: ror byte ptr [rax+1], 0xf8; vzeroupper; ret;
0x0016363b: nop [rax+rax]; tzcnt eax, eax; add rax, 0x20; add rax, rdi; vzeroupper; ret;
0x0016363d: add [rax], r8b; tzcnt eax, eax; add rax, 0x20; add rax, rdi; vzeroupper; ret;
0x0016363e: add [rax], al; tzcnt eax, eax; add rax, 0x20; add rax, rdi; vzeroupper; ret;
0x0016363f: add bl, dh; bsf eax, eax; add rax, 0x20; add rax, rdi; vzeroupper; ret;
0x00163640: tzcnt eax, eax; add rax, 0x20; add rax, rdi; vzeroupper; ret;
0x00163641: bsf eax, eax; add rax, 0x20; add rax, rdi; vzeroupper; ret;
0x00163642: mov esp, 0xc08348c0; and [rax+1], cl; clc; vzeroupper; ret;
0x00163643: ror byte ptr [rax-0x7d], 0xc0; and [rax+1], cl; clc; vzeroupper; ret;
0x00163644: add rax, 0x20; add rax, rdi; vzeroupper; ret;
0x00163645: add eax, 0x20; add rax, rdi; vzeroupper; ret;
0x00163646: shl byte ptr [rax], 0x48; add eax, edi; vzeroupper; ret;
0x00163647: and [rax+1], cl; clc; vzeroupper; ret;
0x0016364f: nop; tzcnt eax, eax; add rax, 0x40; add rax, rdi; vzeroupper; ret;
0x00163650: tzcnt eax, eax; add rax, 0x40; add rax, rdi; vzeroupper; ret;
0x00163651: bsf eax, eax; add rax, 0x40; add rax, rdi; vzeroupper; ret;
0x00163652: mov esp, 0xc08348c0; add rax, rdi; vzeroupper; ret;
0x00163653: ror byte ptr [rax-0x7d], 0xc0; add rax, rdi; vzeroupper; ret;
0x00163654: add rax, 0x40; add rax, rdi; vzeroupper; ret;
0x00163655: add eax, 0x40; add rax, rdi; vzeroupper; ret;
0x00163656: rol byte ptr [rax+0x48], 1; clc; vzeroupper; ret;
0x00163661: std; xlat [rbx]; rol dword ptr [rbp-0x3a378a40], 0xfd; xlat [rbx]; ret 0xc085;
0x00163662: xlat [rbx]; rol dword ptr [rbp-0x3a378a40], 0xfd; xlat [rbx]; ret 0xc085;
0x00163663: rol dword ptr [rbp-0x3a378a40], 0xfd; xlat [rbx]; ret 0xc085;
0x00163665: shl byte ptr [rbp-0x38], 0xc5; std; xlat [rbx]; ret 0xc085;
0x00163667: enter 0xfdc5, 0xd7; ret 0xc085;
0x0016366d: shl byte ptr [rbp-0x30], 0xc5; std; xlat [rbx]; ret;
0x0016366f: rol ch, 1; std; xlat [rbx]; ret;
0x0016367c: test eax, eax; tzcnt eax, eax; add rax, 0x60; add rax, rdi; vzeroupper; ret;
0x0016367e: tzcnt eax, eax; add rax, 0x60; add rax, rdi; vzeroupper; ret;
0x0016367f: bsf eax, eax; add rax, 0x60; add rax, rdi; vzeroupper; ret;
0x00163682: add rax, 0x60; add rax, rdi; vzeroupper; ret;
0x00163683: add eax, 0x60; add rax, rdi; vzeroupper; ret;
0x00163684: shl byte ptr [rax+0x48], 1; clc; vzeroupper; ret;
0x00163686: add rax, rdi; vzeroupper; ret;
0x00163687: add eax, edi; vzeroupper; ret;
0x00163688: clc; vzeroupper; ret;
0x001636ed: and [rbp-0x1f], dh; vzeroupper; ret;
0x001637cb: add [rax], al; add [rax], al; add [rax+5], cl; add byte ptr [rax], 0; add [rax-0x7f], cl; ret 0x80;
0x001637cd: add [rax], al; add [rax+5], cl; add byte ptr [rax], 0; add [rax-0x7f], cl; ret 0x80;
0x001639ef: add [rcx], bh; enter 0x2c75, 0x83; ret 0x8104;
0x00163a0a: shl byte ptr [rbp-0x1d], 0x29; enter 0xf8c5, 0x77; ret;
0x00163ab2: ret 0x8b10;
0x00163b34: or [rdi], cl; pushfq; shl bh, 0xd8; or eax, 1; vzeroupper; ret;
0x00163b53: ror dword ptr [rax-0x7d], 1; ret 0x4c20;
0x00163b56: ret 0x4c20;
0x00163b73: ror dword ptr [rax-0x7d], 1; ret 0x4c40;
0x00163b76: ret 0x4c40;
0x00163b8a: stosb [rdi]; vzeroupper; ret;
0x00163b93: ror dword ptr [rax-0x7d], 1; ret 0x4c60;
0x00163b96: ret 0x4c60;
0x00163c48: xchg bl, al; add al, [rax]; add [rax+5], cl; add byte ptr [rax], 0; add [rax-0x7f], cl; ret 0x80;
0x00163c4a: add al, [rax]; add [rax+5], cl; add byte ptr [rax], 0; add [rax-0x7f], cl; ret 0x80;
0x00163c4c: add [rax+5], cl; add byte ptr [rax], 0; add [rax-0x7f], cl; ret 0x80;
0x00163c4f: add byte ptr [rax], 0; add [rax-0x7f], cl; ret 0x80;
0x00163c50: add [rax], al; add [rax-0x7f], cl; ret 0x80;
0x00163c52: add [rax-0x7f], cl; ret 0x80;
0x00163c55: ret 0x80;
0x00163ddf: ret 0xe2c4;
0x00163ebe: call qword ptr [rax+0x2c75c839];
0x00163ec1: enter 0x2c75, 0x83; ret 0x8104;
0x00163ec3: sub al, 0x83; ret 0x8104;
0x00163ec5: ret 0x8104;
0x00163edf: shl byte ptr [rbp-0x22], 0x29; enter 0xf8c5, 0x77; ret;
0x00163ee1: fisubr st, word ptr [rcx]; enter 0xf8c5, 0x77; ret;
0x00163eef: add [rax], bh; setl al; neg eax; or eax, 1; vzeroupper; ret;
0x00163ef0: mov eax, 0; setl al; neg eax; or eax, 1; vzeroupper; ret;
0x00163ef3: add [rax], al; setl al; neg eax; or eax, 1; vzeroupper; ret;
0x00163ef4: add [rdi], cl; pushfq; shl bh, 0xd8; or eax, 1; vzeroupper; ret;
0x00163ef5: setl al; neg eax; or eax, 1; vzeroupper; ret;
0x00163ef6: pushfq; shl bh, 0xd8; or eax, 1; vzeroupper; ret;
0x00163ef7: shl bh, 0xd8; or eax, 1; vzeroupper; ret;
0x00163ef8: neg eax; or eax, 1; vzeroupper; ret;
0x00163efa: or eax, 1; vzeroupper; ret;
0x00163f02: nop [rax+rax]; nop [rax]; xor eax, eax; vzeroupper; ret;
0x00163f03: nop [rax+rax]; nop [rax]; xor eax, eax; vzeroupper; ret;
0x00163f04: nop [rax+rax]; nop [rax]; xor eax, eax; vzeroupper; ret;
0x00163f08: add [rax], al; add [rax], al; nop [rax]; xor eax, eax; vzeroupper; ret;
0x00163f0a: add [rax], al; nop [rax]; xor eax, eax; vzeroupper; ret;
0x00163f0c: nop [rax]; xor eax, eax; vzeroupper; ret;
0x00163f83: ret 0x8320;
0x00163fbb: ret 0x4c10;
0x00163fdd: sub eax, ecx; vzeroupper; ret;
0x00163fde: enter 0xf8c5, 0x77; ret;
0x00164069: enter 0xd231, 0x48; lea eax, [rdi+rax]; cmp esi, [rax]; cmovne rax, rdx; vzeroupper; ret;
0x00164182: mov esp, 0x48d231c0; lea eax, [rdi+rax]; cmp esi, [rax]; cmovne rax, rdx; vzeroupper; ret;
0x00164183: shl byte ptr [rcx], 0xd2; lea rax, [rdi+rax]; cmp esi, [rax]; cmovne rax, rdx; vzeroupper; ret;
0x00164184: xor edx, edx; lea rax, [rdi+rax]; cmp esi, [rax]; cmovne rax, rdx; vzeroupper; ret;
0x00164185: ror byte ptr [rax-0x73], cl; add al, 7; cmp esi, [rax]; cmovne rax, rdx; vzeroupper; ret;
0x00164186: lea rax, [rdi+rax]; cmp esi, [rax]; cmovne rax, rdx; vzeroupper; ret;
0x00164187: lea eax, [rdi+rax]; cmp esi, [rax]; cmovne rax, rdx; vzeroupper; ret;
0x00164188: add al, 7; cmp esi, [rax]; cmovne rax, rdx; vzeroupper; ret;
0x001641a2: mov esp, 0x48d231c0; lea eax, [rdi+rax+0x20]; cmp esi, [rax]; cmovne rax, rdx; vzeroupper; ret;
0x001641a3: shl byte ptr [rcx], 0xd2; lea rax, [rdi+rax+0x20]; cmp esi, [rax]; cmovne rax, rdx; vzeroupper; ret;
0x001641a4: xor edx, edx; lea rax, [rdi+rax+0x20]; cmp esi, [rax]; cmovne rax, rdx; vzeroupper; ret;
0x001641a6: lea rax, [rdi+rax+0x20]; cmp esi, [rax]; cmovne rax, rdx; vzeroupper; ret;
0x001641a7: lea eax, [rdi+rax+0x20]; cmp esi, [rax]; cmovne rax, rdx; vzeroupper; ret;
0x001641aa: and [rbx], bh; xor [rax+0xf], cl; ret 0xf8c5;
0x001641c2: mov esp, 0x48d231c0; lea eax, [rdi+rax+0x40]; cmp esi, [rax]; cmovne rax, rdx; vzeroupper; ret;
0x001641c3: shl byte ptr [rcx], 0xd2; lea rax, [rdi+rax+0x40]; cmp esi, [rax]; cmovne rax, rdx; vzeroupper; ret;
0x001641c4: xor edx, edx; lea rax, [rdi+rax+0x40]; cmp esi, [rax]; cmovne rax, rdx; vzeroupper; ret;
0x001641c6: lea rax, [rdi+rax+0x40]; cmp esi, [rax]; cmovne rax, rdx; vzeroupper; ret;
0x001641c7: lea eax, [rdi+rax+0x40]; cmp esi, [rax]; cmovne rax, rdx; vzeroupper; ret;
0x001641df: add ch, al; std; xlat [rbx]; rol dword ptr [rbp-0x3a678a40], 0xfd; xlat [rbx]; ret 0xc085;
0x001641e1: std; xlat [rbx]; rol dword ptr [rbp-0x3a678a40], 0xfd; xlat [rbx]; ret 0xc085;
0x001641e2: xlat [rbx]; rol dword ptr [rbp-0x3a678a40], 0xfd; xlat [rbx]; ret 0xc085;
0x001641e3: rol dword ptr [rbp-0x3a678a40], 0xfd; xlat [rbx]; ret 0xc085;
0x001641e5: shl byte ptr [rbp-0x68], 0xc5; std; xlat [rbx]; ret 0xc085;
0x001641ed: shl byte ptr [rbp-0x50], 0xc5; std; xlat [rbx]; ret;
0x001641ef: mov al, 0xc5; std; xlat [rbx]; ret;
0x00164200: mov esp, 0x48d231c0; lea eax, [rdi+rax+0x60]; cmp esi, [rax]; cmovne rax, rdx; vzeroupper; ret;
0x00164201: shl byte ptr [rcx], 0xd2; lea rax, [rdi+rax+0x60]; cmp esi, [rax]; cmovne rax, rdx; vzeroupper; ret;
0x00164202: xor edx, edx; lea rax, [rdi+rax+0x60]; cmp esi, [rax]; cmovne rax, rdx; vzeroupper; ret;
0x00164204: lea rax, [rdi+rax+0x60]; cmp esi, [rax]; cmovne rax, rdx; vzeroupper; ret;
0x00164205: lea eax, [rdi+rax+0x60]; cmp esi, [rax]; cmovne rax, rdx; vzeroupper; ret;
0x00164209: cmp esi, [rax]; cmovne rax, rdx; vzeroupper; ret;
0x0016420a: xor [rax+0xf], cl; ret 0xf8c5;
0x0016420b: cmovne rax, rdx; vzeroupper; ret;
0x0016420c: cmovne eax, edx; vzeroupper; ret;
0x0016420e: ret 0xf8c5;
0x001642a4: std; xlat [rbx]; rol ch, cl; std; xlat [rbx]; ret;
0x001642a5: xlat [rbx]; rol ch, cl; std; xlat [rbx]; ret;
0x001642a6: rol ch, cl; std; xlat [rbx]; ret;
0x001642d9: ret 0x8d48;
0x0016435b: add [rcx-0x876b730], cl; and eax, 0x11111111; bsr eax, eax; lea rax, [rdi+rax-0x20]; vzeroupper; ret;
0x0016435d: ror byte ptr [rax-0x77], 1; mul dword ptr [rip+0x11111111]; bsr eax, eax; lea rax, [rdi+rax-0x20]; vzeroupper; ret;
0x0016435e: mov rdi, rsi; and eax, 0x11111111; bsr eax, eax; lea rax, [rdi+rax-0x20]; vzeroupper; ret;
0x0016435f: mov edi, esi; and eax, 0x11111111; bsr eax, eax; lea rax, [rdi+rax-0x20]; vzeroupper; ret;
0x00164360: mul dword ptr [rip+0x11111111]; bsr eax, eax; lea rax, [rdi+rax-0x20]; vzeroupper; ret;
0x00164361: and eax, 0x11111111; bsr eax, eax; lea rax, [rdi+rax-0x20]; vzeroupper; ret;
0x00164362: adc [rcx], edx; adc [rcx], edx; bsr eax, eax; lea rax, [rdi+rax-0x20]; vzeroupper; ret;
0x00164364: adc [rcx], edx; bsr eax, eax; lea rax, [rdi+rax-0x20]; vzeroupper; ret;
0x001643bb: cwde; bsr eax, eax; lea rax, [rdi+rax-0x20]; vzeroupper; ret;
0x001643cb: add [rax], al; add [rax], al; add [rax+1], cl; iretd;
0x001643cd: add [rax], al; add [rax+1], cl; iretd;
0x001643cf: add [rax+1], cl; iretd;
0x001643f1: bsr eax, eax; lea rax, [rdi+rax-0x20]; vzeroupper; ret;
0x001643f4: lea rax, [rdi+rax-0x20]; vzeroupper; ret;
0x001643f5: lea eax, [rdi+rax-0x20]; vzeroupper; ret;
0x001643fd: nop [rax]; xor eax, eax; vzeroupper; ret;
0x00164400: xor eax, eax; vzeroupper; ret;
0x00164457: mov esp, 0xf80148c0; add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper; ret;
0x00164458: ror byte ptr [rax+1], 0xf8; add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper; ret;
0x00164642: add rax, rdi; add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper; ret;
0x00164643: add eax, edi; add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper; ret;
0x00164644: clc; add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper; ret;
0x00164645: add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper; ret;
0x00164646: add eax, ecx; sub rax, rdx; shr rax, 2; vzeroupper; ret;
0x00164647: enter 0x2948, 0xd0; shr rax, 2; vzeroupper; ret;
0x0016468a: ror byte ptr [rdi], 0x85; iretd;
0x0016477a: rol dword ptr [rbp-0x627af040], 0; add [rax], al; mov rax, r8; shr rax, 2; vzeroupper; ret;
0x0016477e: test [rbp+0x4c000000], ebx; mov eax, eax; shr rax, 2; vzeroupper; ret;
0x0016477f: popfq; add [rax], al; add [rcx+rcx*4-0x40], cl; shr rax, 2; vzeroupper; ret;
0x00164780: add [rax], al; add [rcx+rcx*4-0x40], cl; shr rax, 2; vzeroupper; ret;
0x001647b2: shl byte ptr [rbp+0x2b], 0x4c; mov eax, eax; shr rax, 2; vzeroupper; ret;
0x001647b4: sub ecx, [rcx+rcx*4-0x40]; shr rax, 2; vzeroupper; ret;
0x0016483b: nop [rax+rax]; mov rax, r8; shr rax, 2; vzeroupper; ret;
0x0016483d: add [rax], r8b; mov rax, r8; shr rax, 2; vzeroupper; ret;
0x0016483e: add [rax], al; mov rax, r8; shr rax, 2; vzeroupper; ret;
0x0016483f: add [rcx+rcx*4-0x40], cl; shr rax, 2; vzeroupper; ret;
0x00164840: mov rax, r8; shr rax, 2; vzeroupper; ret;
0x00164841: mov eax, eax; shr rax, 2; vzeroupper; ret;
0x00164860: tzcnt eax, eax; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret;
0x00164861: bsf eax, eax; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret;
0x00164862: mov esp, 0xf80148c0; sub rax, rdx; shr rax, 2; vzeroupper; ret;
0x00164863: ror byte ptr [rax+1], 0xf8; sub rax, rdx; shr rax, 2; vzeroupper; ret;
0x00164884: add rax, 0x20; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret;
0x00164885: add eax, 0x20; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret;
0x00164886: shl byte ptr [rax], 0x48; add eax, edi; sub rax, rdx; shr rax, 2; vzeroupper; ret;
0x00164887: and [rax+1], cl; clc; sub rax, rdx; shr rax, 2; vzeroupper; ret;
0x001648a2: mov esp, 0xc08348c0; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret;
0x001648a3: ror byte ptr [rax-0x7d], 0xc0; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret;
0x001648a4: add rax, 0x40; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret;
0x001648a5: add eax, 0x40; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret;
0x001648a6: rol byte ptr [rax+0x48], 1; clc; sub rax, rdx; shr rax, 2; vzeroupper; ret;
0x001648cf: rol ch, cl; std; xlat [rbx]; ret 0xc085;
0x001648d1: std; xlat [rbx]; ret 0xc085;
0x001648d2: xlat [rbx]; ret 0xc085;
0x001648d3: ret 0xc085;
0x001648db: fcmovnb st, st(5); std; xlat [rbx]; ret;
0x001648dd: std; xlat [rbx]; ret;
0x001648de: xlat [rbx]; ret;
0x001648f0: add rax, 0x60; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret;
0x001648f1: add eax, 0x60; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret;
0x001648f2: shl byte ptr [rax+0x48], 1; clc; sub rax, rdx; shr rax, 2; vzeroupper; ret;
0x001648f4: add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret;
0x001648f5: add eax, edi; sub rax, rdx; shr rax, 2; vzeroupper; ret;
0x001648f6: clc; sub rax, rdx; shr rax, 2; vzeroupper; ret;
0x001648f7: sub rax, rdx; shr rax, 2; vzeroupper; ret;
0x001648f8: sub eax, edx; shr rax, 2; vzeroupper; ret;
0x001648fa: shr rax, 2; vzeroupper; ret;
0x001648fb: shr eax, 2; vzeroupper; ret;
0x00164928: sbb eax, 0x2e453; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx;
0x00164929: push rbx; in al, 2; add [rcx+0x63], cl; or al, 0x93; add rcx, r11; jmp rcx;
0x0016492a: in al, 2; add [rcx+0x63], cl; or al, 0x93; add rcx, r11; jmp rcx;
0x00164938: nop [rax+rax]; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret;
0x0016493c: add [rax], al; add [rax], al; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret;
0x0016493d: add [rax], al; add [rdi], cl; mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret;
0x0016493e: add [rax], al; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret;
0x0016493f: add [rdi], cl; mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret;
0x00164940: movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret;
0x00164941: mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret;
0x00164943: movzx ecx, byte ptr [rsi]; sub eax, ecx; ret;
0x00164944: mov dh, 0xe; sub eax, ecx; ret;
0x00164a37: sbb eax, 0x2e344; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx;
0x00164b68: sbb eax, 0x2e213; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx;
0x00164b69: adc esp, edx; add al, [rax]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx;
0x00164d64: sbb eax, 0x2e017; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx;
0x00164dfb: sbb eax, 0x2df80; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx;
0x00164dfc: sbb bh, 2; add [rcx+0x63], cl; or al, 0x93; add rcx, r11; jmp rcx;
0x00164e6c: mov [0x48d6014840c28348], eax; add edi, edx; lea r11, [rip+0x2df02]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx;
0x00164e79: sbb eax, 0x2df02; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx;
0x00164e7a: add bl, bh; add al, [rax]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx;
0x00164e7b: fild st, word ptr [rdx]; add [rcx+0x63], cl; or al, 0x93; add rcx, r11; jmp rcx;
0x00164f3f: sbb eax, 0x2de3c; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx;
0x00164f40: cmp al, 0xde; add al, [rax]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx;
0x00164f41: fiadd st, word ptr [rdx]; add [rcx+0x63], cl; or al, 0x93; add rcx, r11; jmp rcx;
0x00165071: sbb eax, 0x2dd0a; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx;
0x00165072: or bl, ch; add al, [rax]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx;
0x00165073: fld st, qword ptr [rdx]; add [rcx+0x63], cl; or al, 0x93; add rcx, r11; jmp rcx;
0x0016527c: sbb eax, 0x2daff; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx;
0x0016530b: sbb eax, 0x2da70; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx;
0x0016530d: fiadd st, dword ptr [rdx]; add [rcx+0x63], cl; or al, 0x93; add rcx, r11; jmp rcx;
0x0016537d: add rsi, rdx; add rdi, rdx; lea r11, [rip+0x2e453]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx;
0x0016537e: add esi, edx; add rdi, rdx; lea r11, [rip+0x2e453]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx;
0x00165380: add rdi, rdx; lea r11, [rip+0x2e453]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx;
0x00165381: add edi, edx; lea r11, [rip+0x2e453]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx;
0x00165382: xlat [rbx]; lea r11, [rip+0x2e453]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx;
0x00165383: lea r11, [rip+0x2e453]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx;
0x00165384: lea ebx, [rip+0x2e453]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx;
0x00165385: sbb eax, 0x2d9f6; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx;
0x00165386: neg cl; add al, [rax]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx;
0x00165387: fld st, dword ptr [rdx]; add [rcx+0x63], cl; or al, 0x93; add rcx, r11; jmp rcx;
0x001654e0: ror dword ptr [rdi], 0x85; sub al, 0xa; add [rax], al; xor eax, eax; ret;
0x001654e2: test [rdx+rcx], ebp; add [rax], al; xor eax, eax; ret;
0x001654e3: sub al, 0xa; add [rax], al; xor eax, eax; ret;
0x00165508: ror dword ptr [rdi], 0x85; adc [rdx], cl; add [rax], al; xor eax, eax; ret;
0x0016550b: adc [rdx], cl; add [rax], al; xor eax, eax; ret;
0x00165524: mov edi, 0x566f0ff3; mov edi, 0xf66bfb2; out dx, eax; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x00165528: push rsi; mov edi, 0xf66bfb2; out dx, eax; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x00165529: mov edi, 0xf66bfb2; out dx, eax; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x00165536: cmp dword ptr [rbp-0xcfffff7], 0xf; outsd dx, [rsi]; iretq;
0x0016553d: outsd dx, [rsi]; iretq;
0x0016553e: iretq;
0x00165542: outsd dx, [rsi]; push rsi; iretd;
0x00165543: push rsi; iretd;
0x0016555d: outsd dx, [rsi]; push rsi; fbstp tbyte ptr [rdx-0x10f09921], st; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x0016555e: push rsi; fbstp tbyte ptr [rdx-0x10f09921], st; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x0016555f: fbstp tbyte ptr [rdx-0x10f09921], st; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x00165561: fbld st, tbyte ptr [rsi+0xf]; out dx, eax; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x0016558e: test [rax+0xf000009], eax; mov dh, 0x47; dec dword ptr [rdi]; mov dh, 0x56; jmp far fword ptr [rcx];
0x0016558f: or byte ptr [rcx], 0; add [rdi], cl; mov dh, 0x47; dec dword ptr [rdi]; mov dh, 0x56; jmp far fword ptr [rcx];
0x001655bd: test [rcx+9], edx; add [rax], al; xor eax, eax; ret;
0x001655d9: test [rcx+9], eax; add [rax], al; movzx eax, byte ptr [rdi-1]; movzx edx, byte ptr [rsi-1]; sub eax, edx; ret;
0x001655da: or [r8], eax; add [rdi], cl; mov dh, 0x47; dec dword ptr [rdi]; mov dh, 0x56; jmp far fword ptr [rcx];
0x001655db: or [rax], eax; add [rdi], cl; mov dh, 0x47; dec dword ptr [rdi]; mov dh, 0x56; jmp far fword ptr [rcx];
0x001655dc: add [rax], al; movzx eax, byte ptr [rdi-1]; movzx edx, byte ptr [rsi-1]; sub eax, edx; ret;
0x001655dd: add [rdi], cl; mov dh, 0x47; dec dword ptr [rdi]; mov dh, 0x56; jmp far fword ptr [rcx];
0x001655de: movzx eax, byte ptr [rdi-1]; movzx edx, byte ptr [rsi-1]; sub eax, edx; ret;
0x001655df: mov dh, 0x47; dec dword ptr [rdi]; mov dh, 0x56; jmp far fword ptr [rcx];
0x001655e0: dec dword ptr [r15]; mov dh, 0x56; jmp far fword ptr [rcx];
0x001655e1: dec dword ptr [rdi]; mov dh, 0x56; jmp far fword ptr [rcx];
0x001655e2: movzx edx, byte ptr [rsi-1]; sub eax, edx; ret;
0x001655e3: mov dh, 0x56; jmp far fword ptr [rcx];
0x001655e4: push rsi; jmp far fword ptr [rcx];
0x001655f4: mov esi, 0x566f0ff3; mov esi, 0xf66beb2; out dx, eax; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x001655f8: push rsi; mov esi, 0xf66beb2; out dx, eax; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x001655f9: mov esi, 0xf66beb2; out dx, eax; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x0016562d: outsd dx, [rsi]; push rsi; fidiv st, word ptr [rdx-0x10f09922]; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x0016562e: push rsi; fidiv st, word ptr [rdx-0x10f09922]; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x0016562f: fidiv st, word ptr [rdx-0x10f09922]; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x00165631: fisub st, word ptr [rsi+0xf]; out dx, eax; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x0016566c: enter 0x850f, 0xcd; or [rax], al; add [rip+0xffff], ah; and ecx, 0xffff; sub eax, ecx; ret;
0x0016566e: test ebp, ecx; or [rax], al; add [rip+0xffff], ah; and ecx, 0xffff; sub eax, ecx; ret;
0x0016566f: int 8; add [rax], al; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret;
0x00165670: or [rax], al; add [rip+0xffff], ah; and ecx, 0xffff; sub eax, ecx; ret;
0x00165672: add [rip+0xffff], ah; and ecx, 0xffff; sub eax, ecx; ret;
0x001656ad: test [rcx+8], esp; add [rax], al; xor eax, eax; ret;
0x001656d7: enter 0x850f, 0x62; or [rax], al; add [rip+0xffff], ah; and ecx, 0xffff; sub eax, ecx; ret;
0x001656d9: test [rdx+8], esp; add [rax], al; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret;
0x001656db: or [rax], al; add [rip+0xffff], ah; and ecx, 0xffff; sub eax, ecx; ret;
0x001656dc: add [rax], al; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret;
0x001656dd: add [rip+0xffff], ah; and ecx, 0xffff; sub eax, ecx; ret;
0x001656f4: mov ebp, 0x4e6f0ff3; mov ebp, 0xf66bdb2; out dx, eax; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x001656f7: outsd dx, [rsi]; mov rbp, 0xf66d1ef0f66bdb2; cmp [rdi], dl; ret 0x830f;
0x001656f8: mov rbp, 0xf66d1ef0f66bdb2; cmp [rdi], dl; ret 0x830f;
0x001656f9: mov ebp, 0xf66bdb2; out dx, eax; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x0016572d: outsd dx, [rsi]; push rdi; fnsave [rdx-0x10f09923]; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x0016572e: push rdi; fnsave [rdx-0x10f09923]; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x0016572f: fnsave [rdx-0x10f09923]; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x00165731: frstor [rsi+0xf]; out dx, eax; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x0016579d: test [rcx+7], esi; add [rax], al; xor eax, eax; ret;
0x001657c7: test [rbx+7], edx; add [rax], al; xor eax, eax; ret;
0x001657db: test [rdx+7], ecx; add [rax], al; movzx eax, byte ptr [rdi-1]; movzx ecx, byte ptr [rsi-1]; sub eax, ecx; ret;
0x00165863: ror dword ptr [rdi], 0x85; mov ch, 6; add [rax], al; xor eax, eax; ret;
0x00165866: mov ch, 6; add [rax], al; xor eax, eax; ret;
0x00165874: mov ebx, 0x576f0ff3; mov ebx, 0xf66bbb2; out dx, eax; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x00165878: push rdi; mov ebx, 0xf66bbb2; out dx, eax; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x00165879: mov ebx, 0xf66bbb2; out dx, eax; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x001658f4: mov edx, 0x576f0ff3; mov edx, 0xf66bab2; out dx, eax; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x001658f8: push rdi; mov edx, 0xf66bab2; out dx, eax; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x001658f9: mov edx, 0xf66bab2; out dx, eax; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x0016592d: outsd dx, [rsi]; push rdi; fidiv st, dword ptr [rdx-0x10f09926]; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x0016592e: push rdi; fidiv st, dword ptr [rdx-0x10f09926]; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x0016592f: fidiv st, dword ptr [rdx-0x10f09926]; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x00165931: fisub st, dword ptr [rsi+0xf]; out dx, eax; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x00165966: ror dword ptr [rdi], 0x85; cmpsb [rsi], [rdi]; add eax, 0xc0310000; ret;
0x00165969: cmpsb [rsi], [rdi]; add eax, 0xc0310000; ret;
0x00165974: mov ecx, 0x576f0ff3; mov ecx, 0xf66b9b2; out dx, eax; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x00165978: push rdi; mov ecx, 0xf66b9b2; out dx, eax; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x00165979: mov ecx, 0xf66b9b2; out dx, eax; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x001659ad: outsd dx, [rsi]; fnstenv [rdx-0x10f09927]; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x001659af: fnstenv [rdx-0x10f09927]; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x001659b1: fldenv [rsi+0xf]; out dx, eax; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x001659e6: ror dword ptr [rdi], 0x85; add eax, 0xc0310000; ret;
0x001659e8: test [rsi], esp; add eax, 0xc0310000; ret;
0x001659e9: add eax, 0xc0310000; ret;
0x001659ea: add eax, 0xc0310000; ret;
0x00165ae9: add al, 0; add [rdi], cl; mov dh, 0x47; dec dword ptr [rdi]; mov dh, 0x4e; jmp far fword ptr [rcx];
0x00165aea: add al, 0; add [rdi], cl; mov dh, 0x47; dec dword ptr [rdi]; mov dh, 0x4e; jmp far fword ptr [rcx];
0x00165aeb: add [rax], al; movzx eax, byte ptr [rdi-1]; movzx ecx, byte ptr [rsi-1]; sub eax, ecx; ret;
0x00165aec: add [rdi], cl; mov dh, 0x47; dec dword ptr [rdi]; mov dh, 0x4e; jmp far fword ptr [rcx];
0x00165aed: movzx eax, byte ptr [rdi-1]; movzx ecx, byte ptr [rsi-1]; sub eax, ecx; ret;
0x00165aee: mov dh, 0x47; dec dword ptr [rdi]; mov dh, 0x4e; jmp far fword ptr [rcx];
0x00165aef: dec dword ptr [r15]; mov dh, 0x4e; jmp far fword ptr [rcx];
0x00165af0: dec dword ptr [rdi]; mov dh, 0x4e; jmp far fword ptr [rcx];
0x00165af1: movzx ecx, byte ptr [rsi-1]; sub eax, ecx; ret;
0x00165af2: mov dh, 0x4e; jmp far fword ptr [rcx];
0x00165af4: jmp far fword ptr [rcx];
0x00165b32: ret 3;
0x00165c14: ror dword ptr [rdi], 0x85; add al, 3; add [rax], al; xor eax, eax; ret;
0x00165c16: test [rbx+rax], eax; add [rax], al; xor eax, eax; ret;
0x00165c17: add al, 3; add [rax], al; xor eax, eax; ret;
0x00165cc6: sub dword ptr [rip-0xcfffffe], 0xf; outsd dx, [rsi]; push rdi; ret;
0x00165ccd: outsd dx, [rsi]; push rdi; ret;
0x00165cce: push rdi; ret;
0x00165cd2: outsd dx, [rsi]; ret;
0x00165ced: outsd dx, [rsi]; shl qword ptr [rdx-0x10f0992d], cl; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x00165cee: shl qword ptr [rdx-0x10f0992d], cl; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x00165cef: shl dword ptr [rdx-0x10f0992d], cl; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x00165cf1: shl dword ptr [rsi+0xf], cl; out dx, eax; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x00165d66: or dword ptr [rbp-0xcffffff], 0xf; outsd dx, [rsi]; push rdi; ret 0xff3;
0x00165d6d: outsd dx, [rsi]; push rdi; ret 0xff3;
0x00165d6e: push rdi; ret 0xff3;
0x00165d6f: ret 0xff3;
0x00165d72: outsd dx, [rsi]; ret 0xc2b2;
0x00165d74: ret 0xc2b2;
0x00165d76: ret 0xf66;
0x00165d8d: outsd dx, [rsi]; shl byte ptr [rdx-0x10f0992e], cl; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x00165d8f: shl byte ptr [rdx-0x10f0992e], cl; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x00165d91: shl byte ptr [rsi+0xf], cl; out dx, eax; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x00165e16: shl dword ptr [rsi+0xf], 0xef; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x00165e2d: outsd dx, [rsi]; shl qword ptr [rdx-0x10f0992f], 1; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x00165e2e: shl qword ptr [rdx-0x10f0992f], 1; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x00165e2f: shl dword ptr [rdx-0x10f0992f], 1; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x00165e31: shl dword ptr [rsi+0xf], 1; out dx, eax; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x00165f2d: adc ah, [rip+0xffff]; and ecx, 0xffff; sub eax, ecx; ret;
0x00165f2e: and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret;
0x00165f31: add [rax], al; and ecx, 0xffff; sub eax, ecx; ret;
0x00165f33: and ecx, 0xffff; sub eax, ecx; ret;
0x00165f38: add [rcx], ch; enter 0xfc3, 0x1f; add [rip+0xff], spl; and ecx, 0xff; sub eax, ecx; ret;
0x00165f3a: enter 0xfc3, 0x1f; add [rip+0xff], spl; and ecx, 0xff; sub eax, ecx; ret;
0x00165f3c: nop [rax]; and eax, 0xff; and ecx, 0xff; sub eax, ecx; ret;
0x00165f3e: add [rip+0xff], spl; and ecx, 0xff; sub eax, ecx; ret;
0x00165f3f: add [rip+0xff], ah; and ecx, 0xff; sub eax, ecx; ret;
0x00165f40: and eax, 0xff; and ecx, 0xff; sub eax, ecx; ret;
0x00165f41: inc dword ptr [rax]; add [rax], al; and ecx, 0xff; sub eax, ecx; ret;
0x00165f43: add [rax], al; and ecx, 0xff; sub eax, ecx; ret;
0x00165f45: and ecx, 0xff; sub eax, ecx; ret;
0x00165f47: inc dword ptr [rax]; add [rax], al; sub eax, ecx; ret;
0x00165f49: add [rax], al; sub eax, ecx; ret;
0x00165f4b: sub eax, ecx; ret;
0x00165f66: sbb eax, 0x2cf55; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx;
0x00165f67: push rbp; iretd;
0x00166067: sbb eax, 0x2ce54; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx;
0x00166198: sbb eax, 0x2cd23; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx;
0x00166199: and ecx, ebp; add al, [rax]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx;
0x0016619a: int 2; add [rcx+0x63], cl; or al, 0x93; add rcx, r11; jmp rcx;
0x00166394: sbb eax, 0x2cb27; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx;
0x0016642b: sbb eax, 0x2ca90; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx;
0x0016649c: mov [0x48d6014840c28348], eax; add edi, edx; lea r11, [rip+0x2ca12]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx;
0x001664a9: sbb eax, 0x2ca12; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx;
0x001664aa: adc cl, dl; add al, [rax]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx;
0x0016656f: sbb eax, 0x2c94c; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx;
0x00166571: leave; add al, [rax]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx;
0x001666a1: sbb eax, 0x2c81a; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx;
0x001666a2: sbb cl, al; add al, [rax]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx;
0x001666a3: enter 2, 0x49; movsxd ecx, [rbx+rdx*4]; add rcx, r11; jmp rcx;
0x001666f3: and [rsi+0xf], ah; out dx, eax; push rsi; and [rsi+0xf], ah; cmp [rdi], dl; ret 0x830f;
0x001666f6: out dx, eax; push rsi; and [rsi+0xf], ah; cmp [rdi], dl; ret 0x830f;
0x001666f7: push rsi; and [rsi+0xf], ah; cmp [rdi], dl; ret 0x830f;
0x001666f8: and [rsi+0xf], ah; cmp [rdi], dl; ret 0x830f;
0x00166708: xor [rsi+0xf], ah; out dx, eax; push rsi; xor [rsi+0xf], ah; cmp [rdi], dl; ret 0x830f;
0x0016670b: out dx, eax; push rsi; xor [rsi+0xf], ah; cmp [rdi], dl; ret 0x830f;
0x0016670c: push rsi; xor [rsi+0xf], ah; cmp [rdi], dl; ret 0x830f;
0x0016670d: xor [rsi+0xf], ah; cmp [rdi], dl; ret 0x830f;
0x00166777: out dx, eax; xchg esi, eax; add byte ptr [rax], 0; add [rsi+0xf], ah; cmp [rdi], dl; ret 0x830f;
0x00166778: xchg esi, eax; add byte ptr [rax], 0; add [rsi+0xf], ah; cmp [rdi], dl; ret 0x830f;
0x00166779: add byte ptr [rax], 0; add [rsi+0xf], ah; cmp [rdi], dl; ret 0x830f;
0x00166793: xchg esi, eax; nop; add [rax], al; add [rsi+0xf], ah; cmp [rdi], dl; ret 0x830f;
0x00166794: nop; add [rax], al; add [rsi+0xf], ah; cmp [rdi], dl; ret 0x830f;
0x001667a6: xchg edi, eax; mov al, [0xa096ef0f66000000]; add [rax], al; add [rsi+0xf], ah; cmp [rdi], dl; ret 0x830f;
0x001667a7: mov al, [0xa096ef0f66000000]; add [rax], al; add [rsi+0xf], ah; cmp [rdi], dl; ret 0x830f;
0x001667e3: out dx, eax; xchg esi, eax; rol byte ptr [rax], 0; add [rsi+0xf], ah; cmp [rdi], dl; ret 0x830f;
0x001667e4: xchg esi, eax; rol byte ptr [rax], 0; add [rsi+0xf], ah; cmp [rdi], dl; ret 0x830f;
0x001667e5: rol byte ptr [rax], 0; add [rsi+0xf], ah; cmp [rdi], dl; ret 0x830f;
0x00166837: add [rax], al; add [rsi+0xf], ah; cmp [rdi], dl; ret 0x830f;
0x00166839: add [rsi+0xf], ah; cmp [rdi], dl; ret 0x830f;
0x00166887: adc [rsi+0xf], ah; out dx, eax; push rsi; adc [rsi+0xf], ah; cmp [rdi], dl; ret 0x830f;
0x0016688a: out dx, eax; push rsi; adc [rsi+0xf], ah; cmp [rdi], dl; ret 0x830f;
0x0016688b: push rsi; adc [rsi+0xf], ah; cmp [rdi], dl; ret 0x830f;
0x001668ac: sbb eax, 0x2c60f; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx;
0x001668ad: shufps xmm0, [rdx], 0; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx;
0x001668ae: mov byte ptr [rdx], 0; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx;
0x001668d2: ret 0x7677;
0x0016693b: sbb eax, 0x2c580; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx;
0x0016693c: add ch, 2; add [rcx+0x63], cl; or al, 0x93; add rcx, r11; jmp rcx;
0x001669ab: ret 0x4840;
0x001669ad: add rsi, rdx; add rdi, rdx; lea r11, [rip+0x2cf55]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx;
0x001669ae: add esi, edx; add rdi, rdx; lea r11, [rip+0x2cf55]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx;
0x001669b0: add rdi, rdx; lea r11, [rip+0x2cf55]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx;
0x001669b1: add edi, edx; lea r11, [rip+0x2cf55]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx;
0x001669b2: xlat [rbx]; lea r11, [rip+0x2cf55]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx;
0x001669b3: lea r11, [rip+0x2cf55]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx;
0x001669b4: lea ebx, [rip+0x2cf55]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx;
0x001669b5: sbb eax, 0x2c506; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx;
0x001669b8: add al, [rax]; movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx;
0x001669b9: add [rcx+0x63], cl; or al, 0x93; add rcx, r11; jmp rcx;
0x001669ba: movsxd rcx, [r11+rdx*4]; add rcx, r11; jmp rcx;
0x001669bb: movsxd ecx, [rbx+rdx*4]; add rcx, r11; jmp rcx;
0x001669bc: or al, 0x93; add rcx, r11; jmp rcx;
0x001669bd: xchg ebx, eax; add rcx, r11; jmp rcx;
0x001669be: add rcx, r11; jmp rcx;
0x001669d7: adc [rsi+0xf], ah; cmp [rdi], dl; ret 0x830f;
0x001669ea: adc [rsi+0xf], ah; cmp [rdi], dl; ret;
0x001669ed: cmp [rdi], dl; ret;
0x00166b10: ror dword ptr [rdi], 0x85; cmp al, 2; add [rax], al; xor eax, eax; ret;
0x00166b12: test [rdx+rax], edi; add [rax], al; xor eax, eax; ret;
0x00166b13: cmp al, 2; add [rax], al; xor eax, eax; ret;
0x00166b39: sub [rdx], eax; add [rax], al; xor eax, eax; ret;
0x00166b44: mov esp, 0x4e6f0ff3; mov esp, 0xf66bcb2; out dx, eax; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x00166b47: outsd dx, [rsi]; mov rsp, 0xf66d1ef0f66bcb2; cmp [rdi], dl; ret 0x830f;
0x00166b48: mov rsp, 0xf66d1ef0f66bcb2; cmp [rdi], dl; ret 0x830f;
0x00166b49: mov esp, 0xf66bcb2; out dx, eax; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x00166b72: ret 1;
0x00166b7d: outsd dx, [rsi]; fdiv st, qword ptr [rdx-0x10f09924]; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x00166b7f: fdiv st, qword ptr [rdx-0x10f09924]; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x00166b81: fsub st, qword ptr [rsi+0xf]; out dx, eax; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x00166bc4: mov eax, 0x576f0ff3; mov eax, 0xf66b8b2; out dx, eax; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x00166bc8: push rdi; mov eax, 0xf66b8b2; out dx, eax; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x00166bc9: mov eax, 0xf66b8b2; out dx, eax; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x00166be6: enter 0xf66, 0xef; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x00166bfd: outsd dx, [rsi]; fdiv st, dword ptr [rdx-0x10f09928]; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x00166bff: fdiv st, dword ptr [rdx-0x10f09928]; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x00166c01: fsub st, dword ptr [rsi+0xf]; out dx, eax; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x00166c72: ret 0;
0x00166c9f: out dx, eax; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x00166ca0: shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x830f;
0x00166ca3: cmp [rdi], dl; ret 0x830f;
0x00166cdb: shl byte ptr [rsi+0xf], 0xef; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x5173;
0x00166cde: out dx, eax; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x5173;
0x00166cdf: shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x5173;
0x00166ce2: cmp [rdi], dl; ret 0x5173;
0x00166ce4: ret 0x5173;
0x00166cee: outsd dx, [rsi]; shl byte ptr [rdx-0x10f09930], 1; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x3a73;
0x00166cf0: shl byte ptr [rdx-0x10f09930], 1; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x3a73;
0x00166cf2: shl byte ptr [rsi+0xf], 1; out dx, eax; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x3a73;
0x00166cf5: out dx, eax; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x3a73;
0x00166cf6: shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x3a73;
0x00166cf9: cmp [rdi], dl; ret 0x3a73;
0x00166cfb: ret 0x3a73;
0x00166d0c: out dx, eax; shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x2373;
0x00166d0d: shl dword ptr [rsi+0xf], 1; cmp [rdi], dl; ret 0x2373;
0x00166d10: cmp [rdi], dl; ret 0x2373;
0x00166d12: ret 0x2373;
0x00166d68: add [rax], al; add [rbx+rax-9], bh; fadd st, st(3); ret;
0x00166d6a: add [rbx+rax-9], bh; fadd st, st(3); ret;
0x00166d6c: add esi, edi; fadd st, st(3); ret;
0x00166d6e: fadd st, st(3); ret;
0x00166e26: vmovups [rdi+0xc0], zmm3; vmovups [r9-0x100], zmm4; vmovups [r9-0xc0], zmm5; vmovups [r9-0x80], zmm6; vmovups [r9-0x40], zmm7; ret;
0x00166e29: adc [rdi+3], rbx; vmovups [r9-0x100], zmm4; vmovups [r9-0xc0], zmm5; vmovups [r9-0x80], zmm6; vmovups [r9-0x40], zmm7; ret;
0x00166e2a: adc [rdi+3], ebx; vmovups [r9-0x100], zmm4; vmovups [r9-0xc0], zmm5; vmovups [r9-0x80], zmm6; vmovups [r9-0x40], zmm7; ret;
0x00166e2d: vmovups [r9-0x100], zmm4; vmovups [r9-0xc0], zmm5; vmovups [r9-0x80], zmm6; vmovups [r9-0x40], zmm7; ret;
0x00166e30: adc [rcx-4], rsp; vmovups [r9-0xc0], zmm5; vmovups [r9-0x80], zmm6; vmovups [r9-0x40], zmm7; ret;
0x00166e31: adc [rcx-4], esp; vmovups [r9-0xc0], zmm5; vmovups [r9-0x80], zmm6; vmovups [r9-0x40], zmm7; ret;
0x00166e33: cld; vmovups [r9-0xc0], zmm5; vmovups [r9-0x80], zmm6; vmovups [r9-0x40], zmm7; ret;
0x00166e34: vmovups [r9-0xc0], zmm5; vmovups [r9-0x80], zmm6; vmovups [r9-0x40], zmm7; ret;
0x00166e35: sar dword ptr [rax+rcx*2+0x11], 1; imul edi, ebp, 0x487cd162; adc [rcx-2], esi; vmovups [r9-0x40], zmm7; ret;
0x00166e37: adc [rcx-3], rbp; vmovups [r9-0x80], zmm6; vmovups [r9-0x40], zmm7; ret;
0x00166e38: adc [rcx-3], ebp; vmovups [r9-0x80], zmm6; vmovups [r9-0x40], zmm7; ret;
0x00166e39: imul edi, ebp, 0x487cd162; adc [rcx-2], esi; vmovups [r9-0x40], zmm7; ret;
0x00166e3a: std; vmovups [r9-0x80], zmm6; vmovups [r9-0x40], zmm7; ret;
0x00166e3b: vmovups [r9-0x80], zmm6; vmovups [r9-0x40], zmm7; ret;
0x00166e3e: adc [rcx-2], rsi; vmovups [r9-0x40], zmm7; ret;
0x00166e3f: adc [rcx-2], esi; vmovups [r9-0x40], zmm7; ret;
0x00166e42: vmovups [r9-0x40], zmm7; ret;
0x00166e63: vmovups zmm3, [rcx-0x40]; vmovups [rdi], zmm0; vmovups [rdi+0x40], zmm1; vmovups [r9-0x80], zmm2; vmovups [r9-0x40], zmm3; ret;
0x00166e67: adc [rcx-1], bl; vmovups [rdi], zmm0; vmovups [rdi+0x40], zmm1; vmovups [r9-0x80], zmm2; vmovups [r9-0x40], zmm3; ret;
0x00166e68: pop rcx; jmp qword ptr [rdx-0xf];
0x00166e6a: vmovups [rdi], zmm0; vmovups [rdi+0x40], zmm1; vmovups [r9-0x80], zmm2; vmovups [r9-0x40], zmm3; ret;
0x00166e6d: adc [rdi], rax; vmovups [rdi+0x40], zmm1; vmovups [r9-0x80], zmm2; vmovups [r9-0x40], zmm3; ret;
0x00166e6e: adc [rdi], eax; vmovups [rdi+0x40], zmm1; vmovups [r9-0x80], zmm2; vmovups [r9-0x40], zmm3; ret;
0x00166e70: vmovups [rdi+0x40], zmm1; vmovups [r9-0x80], zmm2; vmovups [r9-0x40], zmm3; ret;
0x00166e73: adc [rdi+1], rcx; vmovups [r9-0x80], zmm2; vmovups [r9-0x40], zmm3; ret;
0x00166e74: adc [rdi+1], ecx; vmovups [r9-0x80], zmm2; vmovups [r9-0x40], zmm3; ret;
0x00166e77: vmovups [r9-0x80], zmm2; vmovups [r9-0x40], zmm3; ret;
0x00166e7a: adc [rcx-2], rdx; vmovups [r9-0x40], zmm3; ret;
0x00166e7b: adc [rcx-2], edx; vmovups [r9-0x40], zmm3; ret;
0x00166e7e: vmovups [r9-0x40], zmm3; ret;
0x00166e81: adc [rcx-1], rbx; ret;
0x00166e82: adc [rcx-1], ebx; ret;
0x00166e99: vmovdqu ymm3, [rcx-0x20]; vmovdqu [rdi], ymm0; vmovdqu [rdi+0x20], ymm1; vmovdqu [r9-0x40], ymm2; vmovdqu [r9-0x20], ymm3; ret;
0x00166e9e: vmovdqu [rdi], ymm0; vmovdqu [rdi+0x20], ymm1; vmovdqu [r9-0x40], ymm2; vmovdqu [r9-0x20], ymm3; ret;
0x00166ea2: vmovdqu [rdi+0x20], ymm1; vmovdqu [r9-0x40], ymm2; vmovdqu [r9-0x20], ymm3; ret;
0x00166ea7: vmovdqu [r9-0x40], ymm2; vmovdqu [r9-0x20], ymm3; ret;
0x00166ead: vmovdqu [r9-0x20], ymm3; ret;
0x00166eb6: and [rdx+0x14], dh; vmovdqu ymm0, [rsi]; vmovdqu ymm1, [rcx-0x20]; vmovdqu [rdi], ymm0; vmovdqu [r9-0x20], ymm1; ret;
0x00166eb9: vmovdqu ymm0, [rsi]; vmovdqu ymm1, [rcx-0x20]; vmovdqu [rdi], ymm0; vmovdqu [r9-0x20], ymm1; ret;
0x00166ebd: vmovdqu ymm1, [rcx-0x20]; vmovdqu [rdi], ymm0; vmovdqu [r9-0x20], ymm1; ret;
0x00166ec2: vmovdqu [rdi], ymm0; vmovdqu [r9-0x20], ymm1; ret;
0x00166ec6: vmovdqu [r9-0x20], ymm1; ret;
0x00166ecd: vmovdqu xmm0, [rsi]; vmovdqu xmm1, [rcx-0x10]; vmovdqu [rdi], xmm0; vmovdqu [r9-0x10], xmm1; ret;
0x00166ed1: vmovdqu xmm1, [rcx-0x10]; vmovdqu [rdi], xmm0; vmovdqu [r9-0x10], xmm1; ret;
0x00166ed6: vmovdqu [rdi], xmm0; vmovdqu [r9-0x10], xmm1; ret;
0x00166eda: vmovdqu [r9-0x10], xmm1; ret;
0x00166ee3: or [rdx+0xf], dh; mov rsi, [rsi]; mov rcx, [rcx-8]; mov [rdi], rsi; mov [r9-8], rcx; ret;
0x00166ee5: cmovs ecx, [rbx+0x498b4836]; clc; mov [rdi], rsi; mov [r9-8], rcx; ret;
0x00166ee6: mov rsi, [rsi]; mov rcx, [rcx-8]; mov [rdi], rsi; mov [r9-8], rcx; ret;
0x00166ee7: mov esi, [rsi]; mov rcx, [rcx-8]; mov [rdi], rsi; mov [r9-8], rcx; ret;
0x00166ee8: mov rcx, [rcx-8]; mov [rdi], rsi; mov [r9-8], rcx; ret;
0x00166ee9: mov rcx, [rcx-8]; mov [rdi], rsi; mov [r9-8], rcx; ret;
0x00166eea: mov ecx, [rcx-8]; mov [rdi], rsi; mov [r9-8], rcx; ret;
0x00166eec: clc; mov [rdi], rsi; mov [r9-8], rcx; ret;
0x00166eed: mov [rdi], rsi; mov [r9-8], rcx; ret;
0x00166eee: mov [rdi], esi; mov [r9-8], rcx; ret;
0x00166ef0: mov [r9-8], rcx; ret;
0x00166ef1: mov [rcx-8], ecx; ret;
0x00166ef7: add al, 0x72; or al, 0x8b; mov ecx, [rcx-4]; mov [rdi], esi; mov [r9-4], ecx; ret;
0x00166ef9: or al, 0x8b; mov ecx, [rcx-4]; mov [rdi], esi; mov [r9-4], ecx; ret;
0x00166efa: mov esi, [rsi]; mov ecx, [rcx-4]; mov [rdi], esi; mov [r9-4], ecx; ret;
0x00166efb: mov ecx, [rcx-4]; mov [rdi], esi; mov [r9-4], ecx; ret;
0x00166efc: mov ecx, [rcx-4]; mov [rdi], esi; mov [r9-4], ecx; ret;
0x00166efe: cld; mov [rdi], esi; mov [r9-4], ecx; ret;
0x00166eff: mov [rdi], esi; mov [r9-4], ecx; ret;
0x00166f01: mov [r9-4], ecx; ret;
0x00166f02: mov [rcx-4], ecx; ret;
0x00166f08: add dh, [rdx+0x10]; mov si, [rsi]; mov cx, [rcx-2]; mov [rdi], si; mov [r9-2], cx; ret;
0x00166f0a: adc [rsi-0x75], ah; mov cx, [rcx-2]; mov [rdi], si; mov [r9-2], cx; ret;
0x00166f0b: mov si, [rsi]; mov cx, [rcx-2]; mov [rdi], si; mov [r9-2], cx; ret;
0x00166f0c: mov esi, [rsi]; mov cx, [rcx-2]; mov [rdi], si; mov [r9-2], cx; ret;
0x00166f0d: mov cx, [rcx-2]; mov [rdi], si; mov [r9-2], cx; ret;
0x00166f0e: mov cx, [rcx-2]; mov [rdi], si; mov [r9-2], cx; ret;
0x00166f0f: mov ecx, [rcx-2]; mov [rdi], si; mov [r9-2], cx; ret;
0x00166f12: mov [rdi], si; mov [r9-2], cx; ret;
0x00166f13: mov [rdi], esi; mov [r9-2], cx; ret;
0x00166f15: mov [r9-2], cx; ret;
0x00166f16: mov [r9-2], ecx; ret;
0x00166f17: mov [rcx-2], ecx; ret;
0x00166f1c: cli; add [rdx+4], esi; mov cl, [rsi]; mov [rdi], cl; ret;
0x00166f1d: add [rdx+4], esi; mov cl, [rsi]; mov [rdi], cl; ret;
0x00166f20: mov cl, [rsi]; mov [rdi], cl; ret;
0x00166f2e: ret 0x830f;
0x00167060: vmovups [r9-0x140], zmm11; vmovups [r9-0x100], zmm12; vmovups [r9-0xc0], zmm13; vmovups [r9-0x80], zmm14; vmovups [r9-0x40], zmm15; ret;
0x00167063: adc [rcx-5], rbx; vmovups [r9-0x100], zmm12; vmovups [r9-0xc0], zmm13; vmovups [r9-0x80], zmm14; vmovups [r9-0x40], zmm15; ret;
0x00167064: adc [rcx-5], ebx; vmovups [r9-0x100], zmm12; vmovups [r9-0xc0], zmm13; vmovups [r9-0x80], zmm14; vmovups [r9-0x40], zmm15; ret;
0x00167066: sti; vmovups [r9-0x100], zmm12; vmovups [r9-0xc0], zmm13; vmovups [r9-0x80], zmm14; vmovups [r9-0x40], zmm15; ret;
0x00167067: vmovups [r9-0x100], zmm12; vmovups [r9-0xc0], zmm13; vmovups [r9-0x80], zmm14; vmovups [r9-0x40], zmm15; ret;
0x0016706a: adc [rcx-4], rsp; vmovups [r9-0xc0], zmm13; vmovups [r9-0x80], zmm14; vmovups [r9-0x40], zmm15; ret;
0x0016706b: adc [rcx-4], esp; vmovups [r9-0xc0], zmm13; vmovups [r9-0x80], zmm14; vmovups [r9-0x40], zmm15; ret;
0x0016706d: cld; vmovups [r9-0xc0], zmm13; vmovups [r9-0x80], zmm14; vmovups [r9-0x40], zmm15; ret;
0x0016706e: vmovups [r9-0xc0], zmm13; vmovups [r9-0x80], zmm14; vmovups [r9-0x40], zmm15; ret;
0x00167071: adc [rcx-3], rbp; vmovups [r9-0x80], zmm14; vmovups [r9-0x40], zmm15; ret;
0x00167072: adc [rcx-3], ebp; vmovups [r9-0x80], zmm14; vmovups [r9-0x40], zmm15; ret;
0x00167073: imul edi, ebp, 0x487c5162; adc [rcx-2], esi; vmovups [r9-0x40], zmm15; ret;
0x00167074: std; vmovups [r9-0x80], zmm14; vmovups [r9-0x40], zmm15; ret;
0x00167075: vmovups [r9-0x80], zmm14; vmovups [r9-0x40], zmm15; ret;
0x00167078: adc [rcx-2], rsi; vmovups [r9-0x40], zmm15; ret;
0x00167079: adc [rcx-2], esi; vmovups [r9-0x40], zmm15; ret;
0x0016707c: vmovups [r9-0x40], zmm15; ret;
0x0016707f: adc [rcx-1], rdi; ret;
0x00167080: adc [rcx-1], edi; ret;
0x001671b2: jmp qword ptr [rdx+0x51];
0x001671c7: vmovups [r9+0xc0], zmm11; vmovups [r9+0x100], zmm12; vmovups [r9+0x140], zmm13; vmovups [r9+0x180], zmm14; vmovups [r9+0x1c0], zmm15; ret;
0x001671ca: adc [rcx+3], rbx; vmovups [r9+0x100], zmm12; vmovups [r9+0x140], zmm13; vmovups [r9+0x180], zmm14; vmovups [r9+0x1c0], zmm15; ret;
0x001671cb: adc [rcx+3], ebx; vmovups [r9+0x100], zmm12; vmovups [r9+0x140], zmm13; vmovups [r9+0x180], zmm14; vmovups [r9+0x1c0], zmm15; ret;
0x001671ce: vmovups [r9+0x100], zmm12; vmovups [r9+0x140], zmm13; vmovups [r9+0x180], zmm14; vmovups [r9+0x1c0], zmm15; ret;
0x001671d1: adc [rcx+4], rsp; vmovups [r9+0x140], zmm13; vmovups [r9+0x180], zmm14; vmovups [r9+0x1c0], zmm15; ret;
0x001671d2: adc [rcx+4], esp; vmovups [r9+0x140], zmm13; vmovups [r9+0x180], zmm14; vmovups [r9+0x1c0], zmm15; ret;
0x001671d5: vmovups [r9+0x140], zmm13; vmovups [r9+0x180], zmm14; vmovups [r9+0x1c0], zmm15; ret;
0x001671d8: adc [rcx+5], rbp; vmovups [r9+0x180], zmm14; vmovups [r9+0x1c0], zmm15; ret;
0x001671d9: adc [rcx+5], ebp; vmovups [r9+0x180], zmm14; vmovups [r9+0x1c0], zmm15; ret;
0x001671db: add eax, 0x487c5162; adc [rcx+6], esi; vmovups [r9+0x1c0], zmm15; ret;
0x001671dc: vmovups [r9+0x180], zmm14; vmovups [r9+0x1c0], zmm15; ret;
0x001671df: adc [rcx+6], rsi; vmovups [r9+0x1c0], zmm15; ret;
0x001671e0: adc [rcx+6], esi; vmovups [r9+0x1c0], zmm15; ret;
0x001671e3: vmovups [r9+0x1c0], zmm15; ret;
0x001671e6: adc [rcx+7], rdi; ret;
0x001671e7: adc [rcx+7], edi; ret;
0x001672cd: sar dword ptr [rax+rcx*2+0x11], 1; jmp qword ptr [r10-0x2f];
0x00167319: jmp qword ptr [r10+0x71];
0x0016731a: jmp qword ptr [rdx+0x71];
0x00167329: vmovups [rdi-0x100], zmm11; vmovups [rdi-0x140], zmm12; vmovups [rdi-0x180], zmm13; vmovups [rdi-0x1c0], zmm14; vmovups [rdi-0x200], zmm15; ret;
0x0016732c: adc [rdi-4], rbx; vmovups [rdi-0x140], zmm12; vmovups [rdi-0x180], zmm13; vmovups [rdi-0x1c0], zmm14; vmovups [rdi-0x200], zmm15; ret;
0x0016732d: adc [rdi-4], ebx; vmovups [rdi-0x140], zmm12; vmovups [rdi-0x180], zmm13; vmovups [rdi-0x1c0], zmm14; vmovups [rdi-0x200], zmm15; ret;
0x0016732f: cld; vmovups [rdi-0x140], zmm12; vmovups [rdi-0x180], zmm13; vmovups [rdi-0x1c0], zmm14; vmovups [rdi-0x200], zmm15; ret;
0x00167330: vmovups [rdi-0x140], zmm12; vmovups [rdi-0x180], zmm13; vmovups [rdi-0x1c0], zmm14; vmovups [rdi-0x200], zmm15; ret;
0x00167333: adc [rdi-5], rsp; vmovups [rdi-0x180], zmm13; vmovups [rdi-0x1c0], zmm14; vmovups [rdi-0x200], zmm15; ret;
0x00167334: adc [rdi-5], esp; vmovups [rdi-0x180], zmm13; vmovups [rdi-0x1c0], zmm14; vmovups [rdi-0x200], zmm15; ret;
0x00167336: sti; vmovups [rdi-0x180], zmm13; vmovups [rdi-0x1c0], zmm14; vmovups [rdi-0x200], zmm15; ret;
0x00167337: vmovups [rdi-0x180], zmm13; vmovups [rdi-0x1c0], zmm14; vmovups [rdi-0x200], zmm15; ret;
0x0016733a: adc [rdi-6], rbp; vmovups [rdi-0x1c0], zmm14; vmovups [rdi-0x200], zmm15; ret;
0x0016733b: adc [rdi-6], ebp; vmovups [rdi-0x1c0], zmm14; vmovups [rdi-0x200], zmm15; ret;
0x0016733c: outsd dx, [rsi]; cli; vmovups [rdi-0x1c0], zmm14; vmovups [rdi-0x200], zmm15; ret;
0x0016733d: cli; vmovups [rdi-0x1c0], zmm14; vmovups [rdi-0x200], zmm15; ret;
0x0016733e: vmovups [rdi-0x1c0], zmm14; vmovups [rdi-0x200], zmm15; ret;
0x00167341: adc [rdi-7], rsi; vmovups [rdi-0x200], zmm15; ret;
0x00167342: adc [rdi-7], esi; vmovups [rdi-0x200], zmm15; ret;
0x00167344: stc; vmovups [rdi-0x200], zmm15; ret;
0x00167345: vmovups [rdi-0x200], zmm15; ret;
0x00167348: adc [rdi-8], rdi; ret;
0x00167349: adc [rdi-8], edi; ret;
0x0016737c: ret 0x180f;
0x0016743f: ret 0x14d;
0x00167476: xchg ecx, eax; sar ch, 0xff; jmp qword ptr [rdx-0xf];
0x00167477: sar ch, 0xff; jmp qword ptr [rdx-0xf];
0x00167491: int1; dec byte ptr [rax+0x6f]; pop rcx; jmp qword ptr [rdx-0x2f];
0x00167492: dec byte ptr [rax+0x6f]; pop rcx; jmp qword ptr [rdx-0x2f];
0x00167494: outsd dx, [rsi]; pop rcx; jmp qword ptr [rdx-0x2f];
0x00167495: pop rcx; jmp qword ptr [rdx-0x2f];
0x0016754e: vmovups [rdi+0xc0], zmm2; vmovups [rsi-0x100], zmm2; vmovups [rsi-0xc0], zmm2; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret;
0x00167551: adc [rdi+3], rdx; vmovups [rsi-0x100], zmm2; vmovups [rsi-0xc0], zmm2; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret;
0x00167552: adc [rdi+3], edx; vmovups [rsi-0x100], zmm2; vmovups [rsi-0xc0], zmm2; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret;
0x00167577: vmovups [rdi], zmm2; vmovups [rdi+0x40], zmm2; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret;
0x0016757a: adc [rdi], rdx; vmovups [rdi+0x40], zmm2; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret;
0x0016757b: adc [rdi], edx; vmovups [rdi+0x40], zmm2; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret;
0x0016757d: vmovups [rdi+0x40], zmm2; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret;
0x00167580: adc [rdi+1], rdx; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret;
0x00167581: adc [rdi+1], edx; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret;
0x00167598: vmovups [rdi], zmm2; vmovups [rsi-0x40], zmm2; ret;
0x0016759b: adc [rdi], rdx; vmovups [rsi-0x40], zmm2; ret;
0x0016759c: adc [rdi], edx; vmovups [rsi-0x40], zmm2; ret;
0x001675a7: cli; and [rdx+0xa], dh; vmovdqu [rdi], ymm2; vmovdqu [rsi-0x20], ymm2; ret;
0x001675a8: and [rdx+0xa], dh; vmovdqu [rdi], ymm2; vmovdqu [rsi-0x20], ymm2; ret;
0x001675ab: vmovdqu [rdi], ymm2; vmovdqu [rsi-0x20], ymm2; ret;
0x001675af: vmovdqu [rsi-0x20], ymm2; ret;
0x001675b5: vmovdqu [rdi], xmm0; vmovdqu [rsi-0x10], xmm0; ret;
0x001675b9: vmovdqu [rsi-0x10], xmm0; ret;
0x001675c0: cli; or [rdx+0xa], dh; vmovq [rdi], xmm0; vmovq [rsi-8], xmm0; ret;
0x001675c1: or [rdx+0xa], dh; vmovq [rdi], xmm0; vmovq [rsi-8], xmm0; ret;
0x001675c4: vmovq [rdi], xmm0; vmovq [rsi-8], xmm0; ret;
0x001675c8: vmovq [rsi-8], xmm0; ret;
0x001675cc: clc; ret;
0x001675d7: mov [rdi], ecx; mov [rsi-4], ecx; ret;
0x001675d9: mov [rsi-4], ecx; ret;
0x001675db: cld; ret;
0x001675de: cli; add dh, [rdx+8]; mov [rdi], cx; mov [rsi-2], cx; ret;
0x001675df: add dh, [rdx+8]; mov [rdi], cx; mov [rsi-2], cx; ret;
0x001675e1: or [rsi-0x77], ah; pcmpgtd mm1, [rcx-0x7f3c01b2]; cli; add [rdx+2], esi; mov [rdi], cl; ret;
0x001675e2: mov [rdi], cx; mov [rsi-2], cx; ret;
0x001675e3: mov [rdi], ecx; mov [rsi-2], cx; ret;
0x001675e4: pcmpgtd mm1, [rcx-0x7f3c01b2]; cli; add [rdx+2], esi; mov [rdi], cl; ret;
0x001675e5: mov [rsi-2], cx; ret;
0x001675e6: mov [rsi-2], ecx; ret;
0x001675eb: cli; add [rdx+2], esi; mov [rdi], cl; ret;
0x001675ec: add [rdx+2], esi; mov [rdi], cl; ret;
0x00167657: vmovups [rsi-0x140], zmm2; vmovups [rsi-0x100], zmm2; vmovups [rsi-0xc0], zmm2; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret;
0x0016765a: adc [rsi-5], rdx; vmovups [rsi-0x100], zmm2; vmovups [rsi-0xc0], zmm2; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret;
0x0016765b: adc [rsi-5], edx; vmovups [rsi-0x100], zmm2; vmovups [rsi-0xc0], zmm2; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret;
0x0016765d: sti; vmovups [rsi-0x100], zmm2; vmovups [rsi-0xc0], zmm2; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret;
0x0016765e: vmovups [rsi-0x100], zmm2; vmovups [rsi-0xc0], zmm2; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret;
0x00167661: adc [rsi-4], rdx; vmovups [rsi-0xc0], zmm2; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret;
0x00167662: adc [rsi-4], edx; vmovups [rsi-0xc0], zmm2; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret;
0x00167663: push rsi; cld; vmovups [rsi-0xc0], zmm2; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret;
0x00167664: cld; vmovups [rsi-0xc0], zmm2; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret;
0x00167665: vmovups [rsi-0xc0], zmm2; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret;
0x00167668: adc [rsi-3], rdx; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret;
0x00167669: adc [rsi-3], edx; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret;
0x0016766a: push rsi; std; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret;
0x0016766b: std; vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret;
0x0016766c: vmovups [rsi-0x80], zmm2; vmovups [rsi-0x40], zmm2; ret;
0x0016766f: adc [rsi-2], rdx; vmovups [rsi-0x40], zmm2; ret;
0x00167670: adc [rsi-2], edx; vmovups [rsi-0x40], zmm2; ret;
0x00167673: vmovups [rsi-0x40], zmm2; ret;
0x00167676: adc [rsi-1], rdx; ret;
0x00167677: adc [rsi-1], edx; ret;
0x001676b4: div dword ptr [rdx-0x27]; vmovups [rsi], zmm2; vmovups [rsi+0x40], zmm2; vmovups [rsi+0x80], zmm2; vmovups [rsi+0xc0], zmm2; ret;
0x001676b7: vmovups [rsi], zmm2; vmovups [rsi+0x40], zmm2; vmovups [rsi+0x80], zmm2; vmovups [rsi+0xc0], zmm2; ret;
0x001676ba: adc [rsi], rdx; vmovups [rsi+0x40], zmm2; vmovups [rsi+0x80], zmm2; vmovups [rsi+0xc0], zmm2; ret;
0x001676bb: adc [rsi], edx; vmovups [rsi+0x40], zmm2; vmovups [rsi+0x80], zmm2; vmovups [rsi+0xc0], zmm2; ret;
0x001676bd: vmovups [rsi+0x40], zmm2; vmovups [rsi+0x80], zmm2; vmovups [rsi+0xc0], zmm2; ret;
0x001676c0: adc [rsi+1], rdx; vmovups [rsi+0x80], zmm2; vmovups [rsi+0xc0], zmm2; ret;
0x001676c1: adc [rsi+1], edx; vmovups [rsi+0x80], zmm2; vmovups [rsi+0xc0], zmm2; ret;
0x001676c4: vmovups [rsi+0x80], zmm2; vmovups [rsi+0xc0], zmm2; ret;
0x001676c7: adc [rsi+2], rdx; vmovups [rsi+0xc0], zmm2; ret;
0x001676c8: adc [rsi+2], edx; vmovups [rsi+0xc0], zmm2; ret;
0x001676cb: vmovups [rsi+0xc0], zmm2; ret;
0x001676ce: adc [rsi+3], rdx; ret;
0x001676cf: adc [rsi+3], edx; ret;
0x0016774c: vmovups [rsi+0xc0], zmm2; vmovups [rsi+0x100], zmm2; vmovups [rsi+0x140], zmm2; vmovups [rsi+0x180], zmm2; vmovups [rsi+0x1c0], zmm2; ret;
0x0016774f: adc [rsi+3], rdx; vmovups [rsi+0x100], zmm2; vmovups [rsi+0x140], zmm2; vmovups [rsi+0x180], zmm2; vmovups [rsi+0x1c0], zmm2; ret;
0x00167750: adc [rsi+3], edx; vmovups [rsi+0x100], zmm2; vmovups [rsi+0x140], zmm2; vmovups [rsi+0x180], zmm2; vmovups [rsi+0x1c0], zmm2; ret;
0x00167753: vmovups [rsi+0x100], zmm2; vmovups [rsi+0x140], zmm2; vmovups [rsi+0x180], zmm2; vmovups [rsi+0x1c0], zmm2; ret;
0x00167756: adc [rsi+4], rdx; vmovups [rsi+0x140], zmm2; vmovups [rsi+0x180], zmm2; vmovups [rsi+0x1c0], zmm2; ret;
0x00167757: adc [rsi+4], edx; vmovups [rsi+0x140], zmm2; vmovups [rsi+0x180], zmm2; vmovups [rsi+0x1c0], zmm2; ret;
0x0016775a: vmovups [rsi+0x140], zmm2; vmovups [rsi+0x180], zmm2; vmovups [rsi+0x1c0], zmm2; ret;
0x0016775d: adc [rsi+5], rdx; vmovups [rsi+0x180], zmm2; vmovups [rsi+0x1c0], zmm2; ret;
0x0016775e: adc [rsi+5], edx; vmovups [rsi+0x180], zmm2; vmovups [rsi+0x1c0], zmm2; ret;
0x0016775f: push rsi; add eax, 0x487cf162; adc [rsi+6], edx; vmovups [rsi+0x1c0], zmm2; ret;
0x00167760: add eax, 0x487cf162; adc [rsi+6], edx; vmovups [rsi+0x1c0], zmm2; ret;
0x00167761: vmovups [rsi+0x180], zmm2; vmovups [rsi+0x1c0], zmm2; ret;
0x00167764: adc [rsi+6], rdx; vmovups [rsi+0x1c0], zmm2; ret;
0x00167765: adc [rsi+6], edx; vmovups [rsi+0x1c0], zmm2; ret;
0x00167768: vmovups [rsi+0x1c0], zmm2; ret;
0x0016776b: adc [rsi+7], rdx; ret;
0x0016776c: adc [rsi+7], edx; ret;
0x00167826: vmovdqu64 zmm0, [rsi]; vmovdqu64 zmm1, [rsi+rdx-0x40]; vmovdqu64 [rdi], zmm0; vmovdqu64 [rdi+rdx-0x40], zmm1; vzeroupper; ret;
0x0016782c: vmovdqu64 zmm1, [rsi+rdx-0x40]; vmovdqu64 [rdi], zmm0; vmovdqu64 [rdi+rdx-0x40], zmm1; vzeroupper; ret;
0x00167834: vmovdqu64 [rdi], zmm0; vmovdqu64 [rdi+rdx-0x40], zmm1; vzeroupper; ret;
0x0016783a: vmovdqu64 [rdi+rdx-0x40], zmm1; vzeroupper; ret;
0x0016787a: nop; add [rax], al; add [rax-0x77], cl; shl ebx, 1; movsb [rdi], [rsi]; ret;
0x0016787b: add [rax], al; add [rax-0x77], cl; shl ebx, 1; movsb [rdi], [rsi]; ret;
0x0016787d: add [rax-0x77], cl; shl ebx, 1; movsb [rdi], [rsi]; ret;
0x00167880: shl ebx, 1; movsb [rdi], [rsi]; ret;
0x00167882: movsb [rdi], [rsi]; ret;
0x0016789f: movzx ecx, byte ptr [rsi]; mov [rdi], cl; ret;
0x001678a0: mov dh, 0xe; mov [rdi], cl; ret;
0x001678a2: mov [rdi], cl; ret;
0x001678a5: vmovdqu ymm0, [rsi]; vmovdqu ymm1, [rsi+rdx-0x20]; vmovdqu [rdi], ymm0; vmovdqu [rdi+rdx-0x20], ymm1; vzeroupper; ret;
0x001678a9: vmovdqu ymm1, [rsi+rdx-0x20]; vmovdqu [rdi], ymm0; vmovdqu [rdi+rdx-0x20], ymm1; vzeroupper; ret;
0x001678af: vmovdqu [rdi], ymm0; vmovdqu [rdi+rdx-0x20], ymm1; vzeroupper; ret;
0x001678b3: vmovdqu [rdi+rdx-0x20], ymm1; vzeroupper; ret;
0x001678bd: vmovdqu xmm0, [rsi]; vmovdqu xmm1, [rsi+rdx-0x10]; vmovdqu [rdi], xmm0; vmovdqu [rdi+rdx-0x10], xmm1; ret;
0x001678c1: vmovdqu xmm1, [rsi+rdx-0x10]; vmovdqu [rdi], xmm0; vmovdqu [rdi+rdx-0x10], xmm1; ret;
0x001678c7: vmovdqu [rdi], xmm0; vmovdqu [rdi+rdx-0x10], xmm1; ret;
0x001678cb: vmovdqu [rdi+rdx-0x10], xmm1; ret;
0x001678d2: mov rcx, [rsi+rdx-8]; mov rsi, [rsi]; mov [rdi+rdx-8], rcx; mov [rdi], rsi; ret;
0x001678d3: mov ecx, [rsi+rdx-8]; mov rsi, [rsi]; mov [rdi+rdx-8], rcx; mov [rdi], rsi; ret;
0x001678d6: clc; mov rsi, [rsi]; mov [rdi+rdx-8], rcx; mov [rdi], rsi; ret;
0x001678d7: mov rsi, [rsi]; mov [rdi+rdx-8], rcx; mov [rdi], rsi; ret;
0x001678d8: mov esi, [rsi]; mov [rdi+rdx-8], rcx; mov [rdi], rsi; ret;
0x001678d9: mov [rdi+rdx-8], rcx; mov [rdi], rsi; ret;
0x001678da: mov [rdi+rdx-8], rcx; mov [rdi], rsi; ret;
0x001678db: mov [rdi+rdx-8], ecx; mov [rdi], rsi; ret;
0x001678de: clc; mov [rdi], rsi; ret;
0x001678df: mov [rdi], rsi; ret;
0x001678e3: mov ecx, [rsi+rdx-4]; mov esi, [rsi]; mov [rdi+rdx-4], ecx; mov [rdi], esi; ret;
0x001678e6: cld; mov esi, [rsi]; mov [rdi+rdx-4], ecx; mov [rdi], esi; ret;
0x001678e7: mov esi, [rsi]; mov [rdi+rdx-4], ecx; mov [rdi], esi; ret;
0x001678e8: mov [rdi+rdx-4], ecx; mov [rdi], esi; ret;
0x001678e9: mov [rdi+rdx-4], ecx; mov [rdi], esi; ret;
0x001678ec: cld; mov [rdi], esi; ret;
0x001678f0: movzx ecx, word ptr [rsi+rdx-2]; movzx esi, word ptr [rsi]; mov [rdi+rdx-2], cx; mov [rdi], si; ret;
0x001678f4: dec byte ptr [rdi]; mov bh, 0x36; mov [rdi+rdx-2], cx; mov [rdi], si; ret;
0x001678f5: movzx esi, word ptr [rsi]; mov [rdi+rdx-2], cx; mov [rdi], si; ret;
0x001678f6: mov bh, 0x36; mov [rdi+rdx-2], cx; mov [rdi], si; ret;
0x001678f7: mov [rdi+rdx-2], cx; mov [rdi], si; ret;
0x001678f8: mov [rdi+rdx-2], cx; mov [rdi], si; ret;
0x001678f9: mov [rdi+rdx-2], ecx; mov [rdi], si; ret;
0x001678fd: mov [rdi], si; ret;
0x001678fe: mov [rdi], esi; ret;
0x0016797a: vmovdqu64 [rdi+rdx-0x40], zmm4; vmovdqu64 [rdi+rdx-0x80], zmm5; vmovdqu64 [rdi+rdx-0xc0], zmm6; vmovdqu64 [rdi+rdx-0x100], zmm7; vzeroupper; ret;
0x00167982: vmovdqu64 [rdi+rdx-0x80], zmm5; vmovdqu64 [rdi+rdx-0xc0], zmm6; vmovdqu64 [rdi+rdx-0x100], zmm7; vzeroupper; ret;
0x0016798a: vmovdqu64 [rdi+rdx-0xc0], zmm6; vmovdqu64 [rdi+rdx-0x100], zmm7; vzeroupper; ret;
0x00167991: std; vmovdqu64 [rdi+rdx-0x100], zmm7; vzeroupper; ret;
0x00167992: vmovdqu64 [rdi+rdx-0x100], zmm7; vzeroupper; ret;
0x00167999: cld; vzeroupper; ret;
0x001679bb: vmovdqu64 [rdi], zmm0; vmovdqu64 [rdi+0x40], zmm1; vmovdqu64 [rdi+rdx-0x40], zmm2; vmovdqu64 [rdi+rdx-0x80], zmm3; vzeroupper; ret;
0x001679c1: vmovdqu64 [rdi+0x40], zmm1; vmovdqu64 [rdi+rdx-0x40], zmm2; vmovdqu64 [rdi+rdx-0x80], zmm3; vzeroupper; ret;
0x001679c8: vmovdqu64 [rdi+rdx-0x40], zmm2; vmovdqu64 [rdi+rdx-0x80], zmm3; vzeroupper; ret;
0x001679d0: vmovdqu64 [rdi+rdx-0x80], zmm3; vzeroupper; ret;
0x00167af2: ret 0x3b48;
0x00167afc: add [rax], eax; add [rdx-0xf], ah; dec byte ptr [rax+0x6f]; add [rdx-0xf], esp; dec byte ptr [rax+0x6f]; jmp qword ptr [r10-0xf];
0x00167afd: add [rax], eax; add [rdx-0xf], ah; dec byte ptr [rax+0x6f]; add [rdx-0xf], esp; dec byte ptr [rax+0x6f]; jmp qword ptr [r10-0xf];
0x00167aff: add [rdx-0xf], ah; dec byte ptr [rax+0x6f]; add [rdx-0xf], esp; dec byte ptr [rax+0x6f]; jmp qword ptr [r10-0xf];
0x00167c1f: vmovdqu64 [rcx-0x40], zmm6; vmovdqu64 [rcx-0x80], zmm7; vmovdqu64 [rcx-0xc0], zmm8; vmovdqu64 [r11], zmm4; vzeroupper; ret;
0x00167c26: vmovdqu64 [rcx-0x80], zmm7; vmovdqu64 [rcx-0xc0], zmm8; vmovdqu64 [r11], zmm4; vzeroupper; ret;
0x00167c2d: vmovdqu64 [rcx-0xc0], zmm8; vmovdqu64 [r11], zmm4; vzeroupper; ret;
0x00167c2f: dec byte ptr [rax+0x7f]; std; vmovdqu64 [r11], zmm4; vzeroupper; ret;
0x00167c33: std; vmovdqu64 [r11], zmm4; vzeroupper; ret;
0x00167c34: vmovdqu64 [r11], zmm4; vzeroupper; ret;
0x00167c84: int1; dec byte ptr [rax+0x6f]; add [rdx-0xf], esp; dec byte ptr [rax+0x6f]; jmp qword ptr [r10-0xf];
0x00167c85: dec byte ptr [rax+0x6f]; add [rdx-0xf], esp; dec byte ptr [rax+0x6f]; jmp qword ptr [r10-0xf];
0x00167c87: outsd dx, [rsi]; add [rdx-0xf], esp; dec byte ptr [rax+0x6f]; jmp qword ptr [r10-0xf];
0x00167c88: add [rdx-0xf], esp; dec byte ptr [rax+0x6f]; jmp qword ptr [r10-0xf];
0x00167c8a: int1; dec byte ptr [rax+0x6f]; jmp qword ptr [r10-0xf];
0x00167c8b: dec byte ptr [rax+0x6f]; jmp qword ptr [r10-0xf];
0x00167c8d: outsd dx, [rsi]; jmp qword ptr [r10-0xf];
0x00167c8e: jmp qword ptr [r10-0xf];
0x00167cb3: sar dword ptr [rbp+0x48], 1; out 0x49, eax; jmp qword ptr [rdx-0x2f];
0x00167cb6: out 0x49, eax; jmp qword ptr [rdx-0x2f];
0x00167cb7: jmp qword ptr [r10-0x2f];
0x00167cb8: jmp qword ptr [rdx-0x2f];
0x00167ce4: vmovdqu64 [rdi+0x40], zmm5; vmovdqu64 [rdi+0x80], zmm6; vmovdqu64 [rdi+0xc0], zmm7; vmovdqu64 [r11], zmm8; vzeroupper; ret;
0x00167ceb: vmovdqu64 [rdi+0x80], zmm6; vmovdqu64 [rdi+0xc0], zmm7; vmovdqu64 [r11], zmm8; vzeroupper; ret;
0x00167cf2: vmovdqu64 [rdi+0xc0], zmm7; vmovdqu64 [r11], zmm8; vzeroupper; ret;
0x00167cf9: vmovdqu64 [r11], zmm8; vzeroupper; ret;
0x00167d75: xchg [rax], eax; add [rax], al; vmovdqu64 [rdi+rdx-0x40], zmm0; vmovdqu64 [rdi], zmm0; vzeroupper; ret;
0x00167d77: add [rax], al; vmovdqu64 [rdi+rdx-0x40], zmm0; vmovdqu64 [rdi], zmm0; vzeroupper; ret;
0x00167d9e: stosb [rdi]; mov rax, rdx; ret;
0x00167d9f: mov rax, rdx; ret;
0x00167da0: mov eax, edx; ret;
0x00167ddf: add byte ptr [rax], 0; add [rdi+0x12], dh; vmovdqu64 [rdi+rdx-0x40], zmm0; vmovdqu64 [rdi], zmm0; vzeroupper; ret;
0x00167de0: add [rax], al; add [rdi+0x12], dh; vmovdqu64 [rdi+rdx-0x40], zmm0; vmovdqu64 [rdi], zmm0; vzeroupper; ret;
0x00167de2: add [rdi+0x12], dh; vmovdqu64 [rdi+rdx-0x40], zmm0; vmovdqu64 [rdi], zmm0; vzeroupper; ret;
0x00167de5: vmovdqu64 [rdi+rdx-0x40], zmm0; vmovdqu64 [rdi], zmm0; vzeroupper; ret;
0x00167ded: vmovdqu64 [rdi], zmm0; vzeroupper; ret;
0x00167e09: vmovdqu64 [rdi], zmm0; vmovdqu64 [rdi+0x40], zmm0; vmovdqu64 [rdi+rdx-0x40], zmm0; vmovdqu64 [rdi+rdx-0x80], zmm0; vzeroupper; ret;
0x00167e0f: vmovdqu64 [rdi+0x40], zmm0; vmovdqu64 [rdi+rdx-0x40], zmm0; vmovdqu64 [rdi+rdx-0x80], zmm0; vzeroupper; ret;
0x00167e16: vmovdqu64 [rdi+rdx-0x40], zmm0; vmovdqu64 [rdi+rdx-0x80], zmm0; vzeroupper; ret;
0x00167e1e: vmovdqu64 [rdi+rdx-0x80], zmm0; vzeroupper; ret;
0x00167e45: jmp qword ptr [rdx-0xf];
0x00167ec3: add al, 0x73; xor eax, 0x7701fa80; cmp dh, [rdx+2]; mov [rdi], cl; vzeroupper; ret;
0x00167ec5: xor eax, 0x7701fa80; cmp dh, [rdx+2]; mov [rdi], cl; vzeroupper; ret;
0x00167eca: cmp dh, [rdx+2]; mov [rdi], cl; vzeroupper; ret;
0x00167ecc: add cl, [rax+0x77f8c50f]; ret;
0x00167ecd: mov [rdi], cl; vzeroupper; ret;
0x00167ed3: vmovdqu [rdi+rdx-0x20], ymm0; vmovdqu [rdi], ymm0; vzeroupper; ret;
0x00167ed9: vmovdqu [rdi], ymm0; vzeroupper; ret;
0x00167ee1: vmovdqu [rdi+rdx-0x10], xmm0; vmovdqu [rdi], xmm0; vzeroupper; ret;
0x00167ee7: vmovdqu [rdi], xmm0; vzeroupper; ret;
0x00167eef: mov [rdi+rdx-8], rcx; mov [rdi], rcx; vzeroupper; ret;
0x00167ef0: mov [rdi+rdx-8], ecx; mov [rdi], rcx; vzeroupper; ret;
0x00167ef3: clc; mov [rdi], rcx; vzeroupper; ret;
0x00167ef4: mov [rdi], rcx; vzeroupper; ret;
0x00167efb: mov [rdi+rdx-4], ecx; mov [rdi], ecx; vzeroupper; ret;
0x00167efe: cld; mov [rdi], ecx; vzeroupper; ret;
0x00167f05: mov [rdi+rdx-2], cx; mov [rdi], cx; vzeroupper; ret;
0x00167f06: mov [rdi+rdx-2], ecx; mov [rdi], cx; vzeroupper; ret;
0x00167f0a: mov [rdi], cx; vzeroupper; ret;
0x00167f0b: mov [rdi], ecx; vzeroupper; ret;
0x00167f0c: pextrw edi, mm0, 0x77; ret;
0x00167f0d: vzeroupper; ret;
0x00167f7b: shl dword ptr [rsi+0xf], 0x74; fisub st, dword ptr [rsi+0xf]; xlat [rbx]; shl byte ptr [rsi+0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074;
0x00167f7f: fisub st, dword ptr [rsi+0xf]; xlat [rbx]; shl byte ptr [rsi+0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074;
0x00167f82: xlat [rbx]; shl byte ptr [rsi+0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074;
0x00167f83: shl byte ptr [rsi+0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074;
0x00167f86: xlat [rbx]; ror dword ptr [rcx], cl; ret 0xe074;
0x00167f87: ror dword ptr [rcx], cl; ret 0xe074;
0x00167f89: ret 0xe074;
0x00167f8e: xlat [rbx]; rol dword ptr [rbp+0x661075c0], cl; nop [rax+rax]; nop; xor rax, rax; ret;
0x00167f8f: rol dword ptr [rbp+0x661075c0], cl; nop [rax+rax]; nop; xor rax, rax; ret;
0x00167f91: shl byte ptr [rbp+0x10], 0x66; nop [rax+rax]; nop; xor rax, rax; ret;
0x00167f93: adc [rsi+0x66], ah; nop [rax+rax]; nop; xor rax, rax; ret;
0x00167f95: nop [rax+rax]; nop; xor rax, rax; ret;
0x00167f96: nop [rax+rax]; nop; xor rax, rax; ret;
0x00167f97: nop [rax+rax]; nop; xor rax, rax; ret;
0x00167f99: test [rax], al; add [rax], al; add [rax], al; nop; xor rax, rax; ret;
0x00167f9b: add [rax], al; add [rax], al; nop; xor rax, rax; ret;
0x00167f9d: add [rax], al; nop; xor rax, rax; ret;
0x00167f9f: nop; xor rax, rax; ret;
0x00167fa0: xor rax, rax; ret;
0x00167fc1: fisubr st, word ptr [rax-0x297af0f0]; add [rax], eax; add dh, dh; ret 0x7510;
0x00167fc3: adc [rdi], cl; test esi, edx; add [rax], eax; add dh, dh; ret 0x7510;
0x00167fc5: test esi, edx; add [rax], eax; add dh, dh; ret 0x7510;
0x00167fc7: add [rax], eax; add dh, dh; ret 0x7510;
0x00167fc9: add dh, dh; ret 0x7510;
0x00167fce: shr dword ptr [rax-0x267af0e0], 1; add [rax], eax; add dh, dh; ret 0x7520;
0x00167fd0: and [rdi], cl; test ecx, ebx; add [rax], eax; add dh, dh; ret 0x7520;
0x00167fd2: test ecx, ebx; add [rax], eax; add dh, dh; ret 0x7520;
0x00167fd4: add [rax], eax; add dh, dh; ret 0x7520;
0x00167fd6: add dh, dh; ret 0x7520;
0x00167fdf: test esp, ebx; add [rax], eax; add dh, dh; ret 0x7540;
0x00167fe1: add [rax], eax; add dh, dh; ret 0x7540;
0x00167fe3: add dh, dh; ret 0x7540;
0x00167fe8: mov bh, 0x48; lea eax, [rdi+7]; ret;
0x00167ff4: push 0xfffffffff6000001; ret 0x7501;
0x00167ff5: add [rax], eax; add dh, dh; ret 0x7501;
0x00168001: imul eax, [rcx], 0; add dh, dh; ret 0x7502;
0x00168002: add [rax], eax; add dh, dh; ret 0x7502;
0x00168004: add dh, dh; ret 0x7502;
0x0016800e: outsb dx, [rsi]; add [rax], eax; add dh, dh; ret 0x7504;
0x0016800f: add [rax], eax; add dh, dh; ret 0x7504;
0x00168011: add dh, dh; ret 0x7504;
0x001680fa: add [rax], al; lea rax, [rdi+7]; ret;
0x001680fc: lea rax, [rdi+7]; ret;
0x001680fd: lea eax, [rdi+7]; ret;
0x0016814d: add [rax], al; lea rax, [rdi+0xf]; ret;
0x0016814e: add [rax-0x73], cl; movnti [r14+0x66], r12d; nop [rax+rax]; nop; lea rax, [rdi]; ret;
0x0016814f: lea rax, [rdi+0xf]; ret;
0x00168150: lea eax, [rdi+0xf]; ret;
0x00168151: movnti [r14+0x66], r12d; nop [rax+rax]; nop; lea rax, [rdi]; ret;
0x00168152: movnti [rsi+0x66], esp; nop [rax+rax]; nop; lea rax, [rdi]; ret;
0x00168155: nop [rax+rax]; nop; lea rax, [rdi]; ret;
0x00168156: nop [rax+rax]; nop; lea rax, [rdi]; ret;
0x00168157: nop [rax+rax]; nop; lea rax, [rdi]; ret;
0x00168159: test [rax], al; add [rax], al; add [rax], al; nop; lea rax, [rdi]; ret;
0x0016815b: add [rax], al; add [rax], al; nop; lea rax, [rdi]; ret;
0x0016815c: add [rax], al; add [rax-0x3cf872b8], dl; nop [rax+rax]; nop; lea rax, [rdi+1]; ret;
0x0016815d: add [rax], al; nop; lea rax, [rdi]; ret;
0x0016815e: add [rax-0x3cf872b8], dl; nop [rax+rax]; nop; lea rax, [rdi+1]; ret;
0x0016815f: nop; lea rax, [rdi]; ret;
0x00168160: lea rax, [rdi]; ret;
0x00168161: lea eax, [rdi]; ret;
0x00168165: nop [rax+rax]; nop; lea rax, [rdi+1]; ret;
0x00168166: nop [rax+rax]; nop; lea rax, [rdi+1]; ret;
0x00168167: nop [rax+rax]; nop; lea rax, [rdi+1]; ret;
0x00168169: test [rax], al; add [rax], al; add [rax], al; nop; lea rax, [rdi+1]; ret;
0x0016816a: add [rax], al; add [rax], al; add [rax+0x1478d48], dl; ret;
0x0016816b: add [rax], al; add [rax], al; nop; lea rax, [rdi+1]; ret;
0x0016816c: add [rax], al; add [rax+0x1478d48], dl; ret;
0x0016816d: add [rax], al; nop; lea rax, [rdi+1]; ret;
0x0016816e: add [rax+0x1478d48], dl; ret;
0x0016816f: nop; lea rax, [rdi+1]; ret;
0x00168170: lea rax, [rdi+1]; ret;
0x00168171: lea eax, [rdi+1]; ret;
0x00168172: add r11d, r8d; nop [rax+rax]; lea rax, [rdi+2]; ret;
0x00168173: add ebx, eax; nop [rax+rax]; lea rax, [rdi+2]; ret;
0x00168176: nop [rax+rax]; lea rax, [rdi+2]; ret;
0x00168177: nop [rax+rax]; lea rax, [rdi+2]; ret;
0x00168178: nop [rax+rax]; lea rax, [rdi+2]; ret;
0x0016817a: test [rax], al; add [rax], al; add [rax], al; lea rax, [rdi+2]; ret;
0x0016817c: add [rax], al; add [rax], al; lea rax, [rdi+2]; ret;
0x0016817d: add [rax], al; add [rax-0x73], cl; add r8b, r11b; nop [rax+rax]; lea rax, [rdi+3]; ret;
0x0016817e: add [rax], al; lea rax, [rdi+2]; ret;
0x0016817f: add [rax-0x73], cl; add r8b, r11b; nop [rax+rax]; lea rax, [rdi+3]; ret;
0x00168180: lea rax, [rdi+2]; ret;
0x00168181: lea eax, [rdi+2]; ret;
0x00168182: add r8b, r11b; nop [rax+rax]; lea rax, [rdi+3]; ret;
0x00168183: add al, bl; nop [rax+rax]; lea rax, [rdi+3]; ret;
0x00168186: nop [rax+rax]; lea rax, [rdi+3]; ret;
0x00168187: nop [rax+rax]; lea rax, [rdi+3]; ret;
0x00168188: nop [rax+rax]; lea rax, [rdi+3]; ret;
0x0016818a: test [rax], al; add [rax], al; add [rax], al; lea rax, [rdi+3]; ret;
0x0016818c: add [rax], al; add [rax], al; lea rax, [rdi+3]; ret;
0x0016818d: add [rax], al; add [rax-0x73], cl; add r8d, r11d; nop [rax+rax]; lea rax, [rdi+4]; ret;
0x0016818e: add [rax], al; lea rax, [rdi+3]; ret;
0x0016818f: add [rax-0x73], cl; add r8d, r11d; nop [rax+rax]; lea rax, [rdi+4]; ret;
0x00168190: lea rax, [rdi+3]; ret;
0x00168191: lea eax, [rdi+3]; ret;
0x00168192: add r8d, r11d; nop [rax+rax]; lea rax, [rdi+4]; ret;
0x00168193: add eax, ebx; nop [rax+rax]; lea rax, [rdi+4]; ret;
0x00168196: nop [rax+rax]; lea rax, [rdi+4]; ret;
0x00168197: nop [rax+rax]; lea rax, [rdi+4]; ret;
0x00168198: nop [rax+rax]; lea rax, [rdi+4]; ret;
0x0016819a: test [rax], al; add [rax], al; add [rax], al; lea rax, [rdi+4]; ret;
0x0016819c: add [rax], al; add [rax], al; lea rax, [rdi+4]; ret;
0x0016819d: add [rax], al; add [rax-0x73], cl; add al, 0xc3; nop [rax+rax]; lea rax, [rdi+5]; ret;
0x0016819e: add [rax], al; lea rax, [rdi+4]; ret;
0x0016819f: add [rax-0x73], cl; add al, 0xc3; nop [rax+rax]; lea rax, [rdi+5]; ret;
0x001681a0: lea rax, [rdi+4]; ret;
0x001681a1: lea eax, [rdi+4]; ret;
0x001681a3: add al, 0xc3; nop [rax+rax]; lea rax, [rdi+5]; ret;
0x001681a6: nop [rax+rax]; lea rax, [rdi+5]; ret;
0x001681a7: nop [rax+rax]; lea rax, [rdi+5]; ret;
0x001681a8: nop [rax+rax]; lea rax, [rdi+5]; ret;
0x001681aa: test [rax], al; add [rax], al; add [rax], al; lea rax, [rdi+5]; ret;
0x001681ac: add [rax], al; add [rax], al; lea rax, [rdi+5]; ret;
0x001681ad: add [rax], al; add [rax-0x73], cl; add eax, 0x2e6666c3; nop [rax+rax]; lea rax, [rdi+6]; ret;
0x001681ae: add [rax], al; lea rax, [rdi+5]; ret;
0x001681af: add [rax-0x73], cl; add eax, 0x2e6666c3; nop [rax+rax]; lea rax, [rdi+6]; ret;
0x001681b0: lea rax, [rdi+5]; ret;
0x001681b1: lea eax, [rdi+5]; ret;
0x001681b3: add eax, 0x2e6666c3; nop [rax+rax]; lea rax, [rdi+6]; ret;
0x001681b6: nop [rax+rax]; lea rax, [rdi+6]; ret;
0x001681b7: nop [rax+rax]; lea rax, [rdi+6]; ret;
0x001681b8: nop [rax+rax]; lea rax, [rdi+6]; ret;
0x001681ba: test [rax], al; add [rax], al; add [rax], al; lea rax, [rdi+6]; ret;
0x001681bc: add [rax], al; add [rax], al; lea rax, [rdi+6]; ret;
0x001681be: add [rax], al; lea rax, [rdi+6]; ret;
0x001681c0: lea rax, [rdi+6]; ret;
0x001681c1: lea eax, [rdi+6]; ret;
0x001681c6: nop [rax+rax]; lea rax, [rdi+8]; ret;
0x001681c7: nop [rax+rax]; lea rax, [rdi+8]; ret;
0x001681c8: nop [rax+rax]; lea rax, [rdi+8]; ret;
0x001681ca: test [rax], al; add [rax], al; add [rax], al; lea rax, [rdi+8]; ret;
0x001681cc: add [rax], al; add [rax], al; lea rax, [rdi+8]; ret;
0x001681cd: add [rax], al; add [rax-0x73], cl; or r11b, r8b; nop [rax+rax]; lea rax, [rdi+9]; ret;
0x001681ce: add [rax], al; lea rax, [rdi+8]; ret;
0x001681cf: add [rax-0x73], cl; or r11b, r8b; nop [rax+rax]; lea rax, [rdi+9]; ret;
0x001681d0: lea rax, [rdi+8]; ret;
0x001681d1: lea eax, [rdi+8]; ret;
0x001681d2: or r11b, r8b; nop [rax+rax]; lea rax, [rdi+9]; ret;
0x001681d3: or bl, al; nop [rax+rax]; lea rax, [rdi+9]; ret;
0x001681d6: nop [rax+rax]; lea rax, [rdi+9]; ret;
0x001681d7: nop [rax+rax]; lea rax, [rdi+9]; ret;
0x001681d8: nop [rax+rax]; lea rax, [rdi+9]; ret;
0x001681da: test [rax], al; add [rax], al; add [rax], al; lea rax, [rdi+9]; ret;
0x001681dc: add [rax], al; add [rax], al; lea rax, [rdi+9]; ret;
0x001681dd: add [rax], al; add [rax-0x73], cl; or r11d, r8d; nop [rax+rax]; lea rax, [rdi+0xa]; ret;
0x001681de: add [rax], al; lea rax, [rdi+9]; ret;
0x001681df: add [rax-0x73], cl; or r11d, r8d; nop [rax+rax]; lea rax, [rdi+0xa]; ret;
0x001681e0: lea rax, [rdi+9]; ret;
0x001681e1: lea eax, [rdi+9]; ret;
0x001681e2: or r11d, r8d; nop [rax+rax]; lea rax, [rdi+0xa]; ret;
0x001681e3: or ebx, eax; nop [rax+rax]; lea rax, [rdi+0xa]; ret;
0x001681e6: nop [rax+rax]; lea rax, [rdi+0xa]; ret;
0x001681e7: nop [rax+rax]; lea rax, [rdi+0xa]; ret;
0x001681e8: nop [rax+rax]; lea rax, [rdi+0xa]; ret;
0x001681ea: test [rax], al; add [rax], al; add [rax], al; lea rax, [rdi+0xa]; ret;
0x001681ec: add [rax], al; add [rax], al; lea rax, [rdi+0xa]; ret;
0x001681ed: add [rax], al; add [rax-0x73], cl; or r8b, r11b; nop [rax+rax]; lea rax, [rdi+0xb]; ret;
0x001681ee: add [rax], al; lea rax, [rdi+0xa]; ret;
0x001681ef: add [rax-0x73], cl; or r8b, r11b; nop [rax+rax]; lea rax, [rdi+0xb]; ret;
0x001681f0: lea rax, [rdi+0xa]; ret;
0x001681f1: lea eax, [rdi+0xa]; ret;
0x001681f2: or r8b, r11b; nop [rax+rax]; lea rax, [rdi+0xb]; ret;
0x001681f3: or al, bl; nop [rax+rax]; lea rax, [rdi+0xb]; ret;
0x001681f6: nop [rax+rax]; lea rax, [rdi+0xb]; ret;
0x001681f7: nop [rax+rax]; lea rax, [rdi+0xb]; ret;
0x001681f8: nop [rax+rax]; lea rax, [rdi+0xb]; ret;
0x001681fa: test [rax], al; add [rax], al; add [rax], al; lea rax, [rdi+0xb]; ret;
0x001681fc: add [rax], al; add [rax], al; lea rax, [rdi+0xb]; ret;
0x001681fd: add [rax], al; add [rax-0x73], cl; or r8d, r11d; nop [rax+rax]; lea rax, [rdi+0xc]; ret;
0x001681fe: add [rax], al; lea rax, [rdi+0xb]; ret;
0x001681ff: add [rax-0x73], cl; or r8d, r11d; nop [rax+rax]; lea rax, [rdi+0xc]; ret;
0x00168200: lea rax, [rdi+0xb]; ret;
0x00168201: lea eax, [rdi+0xb]; ret;
0x00168202: or r8d, r11d; nop [rax+rax]; lea rax, [rdi+0xc]; ret;
0x00168203: or eax, ebx; nop [rax+rax]; lea rax, [rdi+0xc]; ret;
0x00168206: nop [rax+rax]; lea rax, [rdi+0xc]; ret;
0x00168207: nop [rax+rax]; lea rax, [rdi+0xc]; ret;
0x00168208: nop [rax+rax]; lea rax, [rdi+0xc]; ret;
0x0016820a: test [rax], al; add [rax], al; add [rax], al; lea rax, [rdi+0xc]; ret;
0x0016820c: add [rax], al; add [rax], al; lea rax, [rdi+0xc]; ret;
0x0016820d: add [rax], al; add [rax-0x73], cl; or al, 0xc3; nop [rax+rax]; lea rax, [rdi+0xd]; ret;
0x0016820e: add [rax], al; lea rax, [rdi+0xc]; ret;
0x0016820f: add [rax-0x73], cl; or al, 0xc3; nop [rax+rax]; lea rax, [rdi+0xd]; ret;
0x00168210: lea rax, [rdi+0xc]; ret;
0x00168211: lea eax, [rdi+0xc]; ret;
0x00168213: or al, 0xc3; nop [rax+rax]; lea rax, [rdi+0xd]; ret;
0x00168216: nop [rax+rax]; lea rax, [rdi+0xd]; ret;
0x00168217: nop [rax+rax]; lea rax, [rdi+0xd]; ret;
0x00168218: nop [rax+rax]; lea rax, [rdi+0xd]; ret;
0x0016821a: test [rax], al; add [rax], al; add [rax], al; lea rax, [rdi+0xd]; ret;
0x0016821c: add [rax], al; add [rax], al; lea rax, [rdi+0xd]; ret;
0x0016821d: add [rax], al; add [rax-0x73], cl; or eax, 0x2e6666c3; nop [rax+rax]; lea rax, [rdi+0xe]; ret;
0x0016821e: add [rax], al; lea rax, [rdi+0xd]; ret;
0x0016821f: add [rax-0x73], cl; or eax, 0x2e6666c3; nop [rax+rax]; lea rax, [rdi+0xe]; ret;
0x00168220: lea rax, [rdi+0xd]; ret;
0x00168221: lea eax, [rdi+0xd]; ret;
0x00168223: or eax, 0x2e6666c3; nop [rax+rax]; lea rax, [rdi+0xe]; ret;
0x00168226: nop [rax+rax]; lea rax, [rdi+0xe]; ret;
0x00168227: nop [rax+rax]; lea rax, [rdi+0xe]; ret;
0x00168228: nop [rax+rax]; lea rax, [rdi+0xe]; ret;
0x0016822a: test [rax], al; add [rax], al; add [rax], al; lea rax, [rdi+0xe]; ret;
0x0016822c: add [rax], al; add [rax], al; lea rax, [rdi+0xe]; ret;
0x0016822e: add [rax], al; lea rax, [rdi+0xe]; ret;
0x00168230: lea rax, [rdi+0xe]; ret;
0x00168231: lea eax, [rdi+0xe]; ret;
0x00168897: or eax, gs:[rax]; add [rax-0x7d], cl; mov byte ptr [rip+0x48ce0148], 1; iretd;
0x00168898: or eax, [rax]; add [rax-0x7d], cl; mov byte ptr [rip+0x48ce0148], 1; iretd;
0x0016889a: add [rax-0x7d], cl; mov byte ptr [rip+0x48ce0148], 1; iretd;
0x0016889d: mov byte ptr [rip+0x48ce0148], 1; iretd;
0x00168a3a: ret 9;
0x0016941b: mov byte ptr [rdx+rdx*8+0xac840f], 0; add dh, dh; ret 0x7501;
0x00169420: lodsb [rsi]; add [rax], al; add dh, dh; ret 0x7501;
0x00169421: add [rax], al; add dh, dh; ret 0x7501;
0x00169423: add dh, dh; ret 0x7501;
0x00169425: ret 0x7501;
0x0016942a: ret 0x7502;
0x0016942f: ret 0x7504;
0x00169434: ret 0x7508;
0x00169439: ret 0x7510;
0x0016943c: movsxd esi, esi; ret 0x7520;
0x0016943e: ret 0x7520;
0x00169443: ret 0x7540;
0x00169453: nop [rax+rax]; nop [rax]; movzx eax, byte ptr [rdi-0x10]; movzx edx, byte ptr [rsi-0x10]; sub eax, edx; ret;
0x00169454: nop [rax+rax]; nop [rax]; movzx eax, byte ptr [rdi-0x10]; movzx edx, byte ptr [rsi-0x10]; sub eax, edx; ret;
0x00169455: nop [rax+rax]; nop [rax]; movzx eax, byte ptr [rdi-0x10]; movzx edx, byte ptr [rsi-0x10]; sub eax, edx; ret;
0x0016945b: add [rax], al; nop [rax]; movzx eax, byte ptr [rdi-0x10]; movzx edx, byte ptr [rsi-0x10]; sub eax, edx; ret;
0x0016945d: nop [rax]; movzx eax, byte ptr [rdi-0x10]; movzx edx, byte ptr [rsi-0x10]; sub eax, edx; ret;
0x00169460: movzx eax, byte ptr [rdi-0x10]; movzx edx, byte ptr [rsi-0x10]; sub eax, edx; ret;
0x00169464: movzx edx, byte ptr [rsi-0x10]; sub eax, edx; ret;
0x00169469: rol bl, 1; nop [rax+rax]; movzx eax, byte ptr [rdi-0xf]; movzx edx, byte ptr [rsi-0xf]; sub eax, edx; ret;
0x0016946b: nop [rax+rax]; movzx eax, byte ptr [rdi-0xf]; movzx edx, byte ptr [rsi-0xf]; sub eax, edx; ret;
0x0016946d: add [rax], r8b; movzx eax, byte ptr [rdi-0xf]; movzx edx, byte ptr [rsi-0xf]; sub eax, edx; ret;
0x0016946e: add [rax], al; movzx eax, byte ptr [rdi-0xf]; movzx edx, byte ptr [rsi-0xf]; sub eax, edx; ret;
0x0016946f: add [rdi], cl; mov dh, 0x47; int1; movzx edx, byte ptr [rsi-0xf]; sub eax, edx; ret;
0x00169470: movzx eax, byte ptr [rdi-0xf]; movzx edx, byte ptr [rsi-0xf]; sub eax, edx; ret;
0x00169471: mov dh, 0x47; int1; movzx edx, byte ptr [rsi-0xf]; sub eax, edx; ret;
0x00169473: int1; movzx edx, byte ptr [rsi-0xf]; sub eax, edx; ret;
0x00169474: movzx edx, byte ptr [rsi-0xf]; sub eax, edx; ret;
0x00169475: mov dh, 0x56; int1; sub eax, edx; ret;
0x00169476: push rsi; int1; sub eax, edx; ret;
0x00169477: int1; sub eax, edx; ret;
0x00169479: rol bl, 1; nop [rax+rax]; movzx eax, byte ptr [rdi-0xe]; movzx edx, byte ptr [rsi-0xe]; sub eax, edx; ret;
0x0016947b: nop [rax+rax]; movzx eax, byte ptr [rdi-0xe]; movzx edx, byte ptr [rsi-0xe]; sub eax, edx; ret;
0x0016947d: add [rax], r8b; movzx eax, byte ptr [rdi-0xe]; movzx edx, byte ptr [rsi-0xe]; sub eax, edx; ret;
0x0016947e: add [rax], al; movzx eax, byte ptr [rdi-0xe]; movzx edx, byte ptr [rsi-0xe]; sub eax, edx; ret;
0x00169480: movzx eax, byte ptr [rdi-0xe]; movzx edx, byte ptr [rsi-0xe]; sub eax, edx; ret;
0x00169484: movzx edx, byte ptr [rsi-0xe]; sub eax, edx; ret;
0x00169489: rol bl, 1; nop [rax+rax]; movzx eax, byte ptr [rdi-0xd]; movzx edx, byte ptr [rsi-0xd]; sub eax, edx; ret;
0x0016948b: nop [rax+rax]; movzx eax, byte ptr [rdi-0xd]; movzx edx, byte ptr [rsi-0xd]; sub eax, edx; ret;
0x0016948d: add [rax], r8b; movzx eax, byte ptr [rdi-0xd]; movzx edx, byte ptr [rsi-0xd]; sub eax, edx; ret;
0x0016948e: add [rax], al; movzx eax, byte ptr [rdi-0xd]; movzx edx, byte ptr [rsi-0xd]; sub eax, edx; ret;
0x00169490: movzx eax, byte ptr [rdi-0xd]; movzx edx, byte ptr [rsi-0xd]; sub eax, edx; ret;
0x00169494: movzx edx, byte ptr [rsi-0xd]; sub eax, edx; ret;
0x00169499: rol bl, 1; nop [rax+rax]; movzx eax, byte ptr [rdi-0xc]; movzx edx, byte ptr [rsi-0xc]; sub eax, edx; ret;
0x0016949b: nop [rax+rax]; movzx eax, byte ptr [rdi-0xc]; movzx edx, byte ptr [rsi-0xc]; sub eax, edx; ret;
0x0016949d: add [rax], r8b; movzx eax, byte ptr [rdi-0xc]; movzx edx, byte ptr [rsi-0xc]; sub eax, edx; ret;
0x0016949e: add [rax], al; movzx eax, byte ptr [rdi-0xc]; movzx edx, byte ptr [rsi-0xc]; sub eax, edx; ret;
0x0016949f: add [rdi], cl; mov dh, 0x47; hlt; movzx edx, byte ptr [rsi-0xc]; sub eax, edx; ret;
0x001694a0: movzx eax, byte ptr [rdi-0xc]; movzx edx, byte ptr [rsi-0xc]; sub eax, edx; ret;
0x001694a1: mov dh, 0x47; hlt; movzx edx, byte ptr [rsi-0xc]; sub eax, edx; ret;
0x001694a3: hlt; movzx edx, byte ptr [rsi-0xc]; sub eax, edx; ret;
0x001694a4: movzx edx, byte ptr [rsi-0xc]; sub eax, edx; ret;
0x001694a5: mov dh, 0x56; hlt; sub eax, edx; ret;
0x001694a6: push rsi; hlt; sub eax, edx; ret;
0x001694a7: hlt; sub eax, edx; ret;
0x001694a9: rol bl, 1; nop [rax+rax]; movzx eax, byte ptr [rdi-0xb]; movzx edx, byte ptr [rsi-0xb]; sub eax, edx; ret;
0x001694ab: nop [rax+rax]; movzx eax, byte ptr [rdi-0xb]; movzx edx, byte ptr [rsi-0xb]; sub eax, edx; ret;
0x001694ad: add [rax], r8b; movzx eax, byte ptr [rdi-0xb]; movzx edx, byte ptr [rsi-0xb]; sub eax, edx; ret;
0x001694ae: add [rax], al; movzx eax, byte ptr [rdi-0xb]; movzx edx, byte ptr [rsi-0xb]; sub eax, edx; ret;
0x001694af: add [rdi], cl; mov dh, 0x47; cmc; movzx edx, byte ptr [rsi-0xb]; sub eax, edx; ret;
0x001694b0: movzx eax, byte ptr [rdi-0xb]; movzx edx, byte ptr [rsi-0xb]; sub eax, edx; ret;
0x001694b1: mov dh, 0x47; cmc; movzx edx, byte ptr [rsi-0xb]; sub eax, edx; ret;
0x001694b3: cmc; movzx edx, byte ptr [rsi-0xb]; sub eax, edx; ret;
0x001694b4: movzx edx, byte ptr [rsi-0xb]; sub eax, edx; ret;
0x001694b5: mov dh, 0x56; cmc; sub eax, edx; ret;
0x001694b6: push rsi; cmc; sub eax, edx; ret;
0x001694b7: cmc; sub eax, edx; ret;
0x001694b9: rol bl, 1; nop [rax+rax]; movzx eax, byte ptr [rdi-0xa]; movzx edx, byte ptr [rsi-0xa]; sub eax, edx; ret;
0x001694bb: nop [rax+rax]; movzx eax, byte ptr [rdi-0xa]; movzx edx, byte ptr [rsi-0xa]; sub eax, edx; ret;
0x001694bd: add [rax], r8b; movzx eax, byte ptr [rdi-0xa]; movzx edx, byte ptr [rsi-0xa]; sub eax, edx; ret;
0x001694be: add [rax], al; movzx eax, byte ptr [rdi-0xa]; movzx edx, byte ptr [rsi-0xa]; sub eax, edx; ret;
0x001694c0: movzx eax, byte ptr [rdi-0xa]; movzx edx, byte ptr [rsi-0xa]; sub eax, edx; ret;
0x001694c4: movzx edx, byte ptr [rsi-0xa]; sub eax, edx; ret;
0x001694f7: mov byte ptr [rax+0x75], 0xc5; movzx eax, byte ptr [rdi-9]; movzx edx, byte ptr [rsi-9]; sub eax, edx; ret;
0x001694fb: movzx eax, byte ptr [rdi-9]; movzx edx, byte ptr [rsi-9]; sub eax, edx; ret;
0x001694ff: movzx edx, byte ptr [rsi-9]; sub eax, edx; ret;
0x00169503: sub eax, edx; ret;
0x001695b9: test [rcx+rax-0x67d0000], al; adc [rdi], ecx; test [rbx], bl; add al, [rax]; add [rbx-0x7bf0ed07], al; ret 2;
0x001695bf: stc; adc [rdi], ecx; test [rbx], bl; add al, [rax]; add [rbx-0x7bf0ed07], al; ret 2;
0x001695c0: adc [rdi], ecx; test [rbx], bl; add al, [rax]; add [rbx-0x7bf0ed07], al; ret 2;
0x001695c2: test [rbx], bl; add al, [rax]; add [rbx-0x7bf0ed07], al; ret 2;
0x001695c4: add al, [rax]; add [rbx-0x7bf0ed07], al; ret 2;
0x001695c6: add [rbx-0x7bf0ed07], al; ret 2;
0x00169820: dec dword ptr [rdi]; test [rsi+1], ebp; add [rax], al; xor eax, eax; ret;
0x00169822: test [rsi+1], ebp; add [rax], al; xor eax, eax; ret;
0x001698de: mov bl, 0; add [rax], al; xor eax, eax; ret;
0x00169978: push qword ptr [rbp+0x1a]; xor eax, eax; ret;
0x0016998e: adc [rax], bh; enter 0x275, 0x39; enter 0xc019, 0x83; fdivr st, st(7); ret;
0x00169990: enter 0x275, 0x39; enter 0xc019, 0x83; fdivr st, st(7); ret;
0x00169992: add bh, [rcx]; enter 0xc019, 0x83; fdivr st, st(7); ret;
0x00169993: cmp eax, ecx; sbb eax, eax; sbb eax, 0xffffffff; ret;
0x00169994: enter 0xc019, 0x83; fdivr st, st(7); ret;
0x00169995: sbb eax, eax; sbb eax, 0xffffffff; ret;
0x00169996: rol byte ptr [rbx+0xfc3ffd8], 0x1f; add [rax], r8b; xor eax, eax; ret;
0x00169997: sbb eax, 0xffffffff; ret;
0x00169998: fdivr st, st(7); ret;
0x00169999: inc ebx; nop [rax+rax]; xor eax, eax; ret;
0x0016999b: nop [rax+rax]; xor eax, eax; ret;
0x0016999d: add [rax], r8b; xor eax, eax; ret;
0x0016999e: add [rax], al; xor eax, eax; ret;
0x00169e97: test [rcx+rax], edx; add [rax], al; ret;
0x00169e98: adc al, 1; add [rax], al; ret;
0x00169ead: inc dword ptr [rax]; add [rax], al; ret;
0x00169ec8: in al, 0; add [rax], al; ret;
0x00169fb2: add [rax], al; add [rdi+9], bh; neg eax; ret;
0x00169fb4: add [rdi+9], bh; neg eax; ret;
0x00169fb6: or edi, esi; fadd st, st(3); nop [rax+rax]; ret;
0x00169fb7: neg eax; ret;
0x00169fb8: fadd st, st(3); nop [rax+rax]; ret;
0x00169fbf: add bl, al; nop [rax+rax]; nop [rax]; xor eax, eax; ret;
0x00169fc2: nop [rax+rax]; nop [rax]; xor eax, eax; ret;
0x00169fc3: nop [rax+rax]; nop [rax]; xor eax, eax; ret;
0x00169fc4: nop [rax+rax]; nop [rax]; xor eax, eax; ret;
0x00169fc6: test [rax], al; add [rax], al; add [rax], al; nop [rax]; xor eax, eax; ret;
0x00169fc8: add [rax], al; add [rax], al; nop [rax]; xor eax, eax; ret;
0x00169fca: add [rax], al; nop [rax]; xor eax, eax; ret;
0x00169fcc: nop [rax]; xor eax, eax; ret;
0x00169fd0: xor eax, eax; ret;
0x0016a01a: mov rdi, 0xf0f0f0f0f0f0f0f; and rax, rdi; mov rdi, 0x101010101010101; imul rax, rdi; shr rax, 0x38; ret;
0x0016a023: cmovs esp, [rcx]; clc; mov rdi, 0x101010101010101; imul rax, rdi; shr rax, 0x38; ret;
0x0016a024: and rax, rdi; mov rdi, 0x101010101010101; imul rax, rdi; shr rax, 0x38; ret;
0x0016a025: and eax, edi; mov rdi, 0x101010101010101; imul rax, rdi; shr rax, 0x38; ret;
0x0016a026: clc; mov rdi, 0x101010101010101; imul rax, rdi; shr rax, 0x38; ret;
0x0016a027: mov rdi, 0x101010101010101; imul rax, rdi; shr rax, 0x38; ret;
0x0016a028: mov edi, 0x1010101; add [rcx], eax; add [rcx], eax; imul rax, rdi; shr rax, 0x38; ret;
0x0016a02b: add [rcx], eax; add [rcx], eax; add [rcx], eax; imul rax, rdi; shr rax, 0x38; ret;
0x0016a02d: add [rcx], eax; add [rcx], eax; imul rax, rdi; shr rax, 0x38; ret;
0x0016a02f: add [rcx], eax; imul rax, rdi; shr rax, 0x38; ret;
0x0016a031: imul rax, rdi; shr rax, 0x38; ret;
0x0016a032: imul eax, edi; shr rax, 0x38; ret;
0x0016a035: shr rax, 0x38; ret;
0x0016a036: shr eax, 0x38; ret;
0x0016a5ef: add [rax+0x29], cl; iretd;
0x0016a6e2: ret 6;
0x0016a768: and [rax], al; add [rdi], cl; xchg esp, eax; ret 0x2044;
0x0016a76a: add [rdi], cl; xchg esp, eax; ret 0x2044;
0x0016a76c: xchg esp, eax; ret 0x2044;
0x0016a76d: ret 0x2044;
0x0016a8ef: dec dword ptr [rax-0x77]; ret 0x8948;
0x0016aa33: xchg ebp, eax; ret 0x3145;
0x0016aa34: ret 0x3145;
0x0016acf0: add cl, ch; xor ch, 0xff; jmp qword ptr [rsi+0x2e];
0x0016acf2: xor ch, 0xff; jmp qword ptr [rsi+0x2e];
0x0016ad9e: idiv dil; jmp qword ptr [rsi+0xf];
0x0016aea9: add [rax], al; add cl, ch; ret;
0x0016aeab: add cl, ch; ret;
0x0016af38: dec dword ptr [rbp-0x7b]; dec dword ptr [rdi]; test [rcx], dl; add [rax], eax; add [rax-0x77], cl; ret 0xc148;
0x0016af3b: dec dword ptr [rdi]; test [rcx], dl; add [rax], eax; add [rax-0x77], cl; ret 0xc148;
0x0016af3d: test [rcx], dl; add [rax], eax; add [rax-0x77], cl; ret 0xc148;
0x0016afc7: test [rdx+rax], al; add [rcx-0x7d], al; test dword ptr [rcx], 0x40003d; add [rdi], cl; xchg esp, eax; ret 0x8441;
0x0016afc8: add r8b, [rax]; add [rcx-0x7d], al; test dword ptr [rcx], 0x40003d; add [rdi], cl; xchg esp, eax; ret 0x8441;
0x0016afc9: add al, [rax]; add [rcx-0x7d], al; test dword ptr [rcx], 0x40003d; add [rdi], cl; xchg esp, eax; ret 0x8441;
0x0016afcb: add [rcx-0x7d], al; test dword ptr [rcx], 0x40003d; add [rdi], cl; xchg esp, eax; ret 0x8441;
0x0016afce: test dword ptr [rcx], 0x40003d; add [rdi], cl; xchg esp, eax; ret 0x8441;
0x0016afd1: add [rax], al; add [rdi], cl; xchg esp, eax; ret 0x8441;
0x0016afd4: add [rdi], cl; xchg esp, eax; ret 0x8441;
0x0016afd6: xchg esp, eax; ret 0x8441;
0x0016afd7: ret 0x8441;
0x0016b0bd: ret 0x872;
0x0016b0d2: ret 0xb848;
0x0016b0e8: ret 0xc149;
0x0016b416: mov edi, eax; movsxd rax, [rdx+rbx*4]; xor edi, r12d; movzx r12d, dil; add rax, rdx; jmp rax;
0x0016b418: movsxd rax, [rdx+rbx*4]; xor edi, r12d; movzx r12d, dil; add rax, rdx; jmp rax;
0x0016b419: movsxd eax, [rdx+rbx*4]; xor edi, r12d; movzx r12d, dil; add rax, rdx; jmp rax;
0x0016b41a: add al, 0x9a; xor edi, r12d; movzx r12d, dil; add rax, rdx; jmp rax;
0x0016b41c: xor edi, r12d; movzx r12d, dil; add rax, rdx; jmp rax;
0x0016b41d: xor edi, esp; movzx r12d, dil; add rax, rdx; jmp rax;
0x0016b41e: out 0x44, eax; movzx esp, bh; add rax, rdx; jmp rax;
0x0016b41f: movzx r12d, dil; add rax, rdx; jmp rax;
0x0016b420: movzx esp, bh; add rax, rdx; jmp rax;
0x0016b421: mov dh, 0xe7; add rax, rdx; jmp rax;
0x0016b4d0: xchg [rbx+2], ebx; add [rax], al; lea r9, [rip+0x28958]; movsxd rcx, [r9+rbx*4]; add rcx, r9; jmp rcx;
0x0016b4d3: add [rax], al; lea r9, [rip+0x28958]; movsxd rcx, [r9+rbx*4]; add rcx, r9; jmp rcx;
0x0016b4d5: lea r9, [rip+0x28958]; movsxd rcx, [r9+rbx*4]; add rcx, r9; jmp rcx;
0x0016b4d6: lea ecx, [rip+0x28958]; movsxd rcx, [r9+rbx*4]; add rcx, r9; jmp rcx;
0x0016b4d7: or eax, 0x28958; movsxd rcx, [r9+rbx*4]; add rcx, r9; jmp rcx;
0x0016b4d8: pop rax; mov [rdx], eax; add [rcx+0x63], cl; or al, 0x99; add rcx, r9; jmp rcx;
0x0016b4d9: mov [rdx], eax; add [rcx+0x63], cl; or al, 0x99; add rcx, r9; jmp rcx;
0x0016b4da: add al, [rax]; movsxd rcx, [r9+rbx*4]; add rcx, r9; jmp rcx;
0x0016b4db: add [rcx+0x63], cl; or al, 0x99; add rcx, r9; jmp rcx;
0x0016b4dc: movsxd rcx, [r9+rbx*4]; add rcx, r9; jmp rcx;
0x0016b4dd: movsxd ecx, [rcx+rbx*4]; add rcx, r9; jmp rcx;
0x0016b4de: or al, 0x99; add rcx, r9; jmp rcx;
0x0016b4df: cdq; add rcx, r9; jmp rcx;
0x0016b4e0: add rcx, r9; jmp rcx;
0x0016b4e1: add ecx, ecx; jmp rcx;
0x0016b4e2: leave; jmp rcx;
0x0016b627: or rbx, 1; mov edi, eax; movsxd rax, [rdx+rbx*4]; xor edi, r12d; add rax, rdx; jmp rax;
0x0016b628: or ebx, 1; mov edi, eax; movsxd rax, [rdx+rbx*4]; xor edi, r12d; add rax, rdx; jmp rax;
0x0016b62b: mov edi, eax; movsxd rax, [rdx+rbx*4]; xor edi, r12d; add rax, rdx; jmp rax;
0x0016b62d: movsxd rax, [rdx+rbx*4]; xor edi, r12d; add rax, rdx; jmp rax;
0x0016b62e: movsxd eax, [rdx+rbx*4]; xor edi, r12d; add rax, rdx; jmp rax;
0x0016b62f: add al, 0x9a; xor edi, r12d; add rax, rdx; jmp rax;
0x0016b631: xor edi, r12d; add rax, rdx; jmp rax;
0x0016b632: xor edi, esp; add rax, rdx; jmp rax;
0x0016b633: out 0x48, eax; add eax, edx; jmp rax;
0x0016b665: or ecx, [rdi]; xchg [rbx+0x48000001], ebp; lea ecx, [rip+0x2882d]; movsxd rbx, [rcx+rbx*4]; add rcx, rbx; jmp rcx;
0x0016b667: xchg [rbx+0x48000001], ebp; lea ecx, [rip+0x2882d]; movsxd rbx, [rcx+rbx*4]; add rcx, rbx; jmp rcx;
0x0016b669: add [rax], eax; add [rax-0x73], cl; or eax, 0x2882d; movsxd rbx, [rcx+rbx*4]; add rcx, rbx; jmp rcx;
0x0016b66a: add [rax], al; lea rcx, [rip+0x2882d]; movsxd rbx, [rcx+rbx*4]; add rcx, rbx; jmp rcx;
0x0016b66b: add [rax-0x73], cl; or eax, 0x2882d; movsxd rbx, [rcx+rbx*4]; add rcx, rbx; jmp rcx;
0x0016b66c: lea rcx, [rip+0x2882d]; movsxd rbx, [rcx+rbx*4]; add rcx, rbx; jmp rcx;
0x0016b66d: lea ecx, [rip+0x2882d]; movsxd rbx, [rcx+rbx*4]; add rcx, rbx; jmp rcx;
0x0016b66e: or eax, 0x2882d; movsxd rbx, [rcx+rbx*4]; add rcx, rbx; jmp rcx;
0x0016b66f: sub eax, 0x48000288; movsxd ebx, [rcx+rbx*4]; add rcx, rbx; jmp rcx;
0x0016b670: mov [rdx], al; add [rax+0x63], cl; sbb al, 0x99; add rcx, rbx; jmp rcx;
0x0016b671: add al, [rax]; movsxd rbx, [rcx+rbx*4]; add rcx, rbx; jmp rcx;
0x0016b672: add [rax+0x63], cl; sbb al, 0x99; add rcx, rbx; jmp rcx;
0x0016b673: movsxd rbx, [rcx+rbx*4]; add rcx, rbx; jmp rcx;
0x0016b674: movsxd ebx, [rcx+rbx*4]; add rcx, rbx; jmp rcx;
0x0016b675: sbb al, 0x99; add rcx, rbx; jmp rcx;
0x0016b676: cdq; add rcx, rbx; jmp rcx;
0x0016b677: add rcx, rbx; jmp rcx;
0x0016b678: add ecx, ebx; jmp rcx;
0x0016b67a: jmp rcx;
0x0016b70e: call qword ptr [rax+0x7fffba];
0x0016b96d: ret 2;
0x0016ba15: ret 0x8341;
0x0016bc3e: call qword ptr [rax-0x36ce3877];
0x0016bd03: idiv edi; jmp qword ptr [rsi+0x2e];
0x0016be3e: call qword ptr [rax+0x3eec148];
0x0016bfca: test [rcx], ah; add eax, [rax]; add [rcx-0x77], cl; ret 0x8166;
0x0016bfcc: add eax, [rax]; add [rcx-0x77], cl; ret 0x8166;
0x0016bfce: add [rcx-0x77], cl; ret 0x8166;
0x0016bfd1: ret 0x8166;
0x0016c000: ret 0xc031;
0x0016c019: inc dword ptr [rax]; add [rax-0x77], cl; iretd;
0x0016c01b: add [rax-0x77], cl; iretd;
0x0016c08b: xchg [rax+rax-0x72b80000], ebp; adc eax, 0x27e39; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x0016c08d: add [rax], al; add [rax-0x73], cl; adc eax, 0x27e39; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x0016c08e: add [rax], al; lea rdx, [rip+0x27e39]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x0016c08f: add [rax-0x73], cl; adc eax, 0x27e39; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x0016c090: lea rdx, [rip+0x27e39]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x0016c091: lea edx, [rip+0x27e39]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x0016c092: adc eax, 0x27e39; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x0016c093: cmp [rsi+2], edi; add [rax+0x63], cl; add al, 0x82; add rax, rdx; jmp rax;
0x0016c095: add al, [rax]; movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x0016c096: add [rax+0x63], cl; add al, 0x82; add rax, rdx; jmp rax;
0x0016c097: movsxd rax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x0016c098: movsxd eax, [rdx+rax*4]; add rax, rdx; jmp rax;
0x0016c099: add al, 0x82; add rax, rdx; jmp rax;
0x0016c09b: add rax, rdx; jmp rax;
0x0016c09c: add eax, edx; jmp rax;
0x0016c09e: jmp rax;
0x0016c16e: xchg edx, eax; ret 0x148;
0x0016c16f: ret 0x148;
0x0016c17b: rol dword ptr [rcx+0xf], cl; xchg edx, eax; ret;
0x0016c17e: xchg edx, eax; ret;
0x0016c19d: ror byte ptr [rbp+1], cl; ror dword ptr [rdi], 0x92; ret 0x894d;
0x0016c1a0: ror dword ptr [rdi], 0x92; ret 0x894d;
0x0016c1a2: xchg edx, eax; ret 0x894d;
0x0016c1ac: ret 0x894c;
0x0016c49e: call qword ptr [rax+0x1b9];
0x0016c4f7: ret 0x4804;
0x0016c509: ret 0xe283;
0x0016c822: ret 0xf749;
0x0016c8c0: ret 0x8349;
0x0016c8fb: idiv edi; jmp qword ptr [rsi-0x70];
0x0016c968: ret 0x8348;
0x0016c96b: ret 0x4808;
0x0016ca23: adc [rax-0x77], cl; ret 0x8948;
0x0016cb54: inc dword ptr [rdi]; add [rax+0x21], cl; ret 0x8548;
0x0016cb56: add [rax+0x21], cl; ret 0x8548;
0x0016cb59: ret 0x8548;
0x0016cbd8: ror byte ptr [rdi], cl; xchg ebp, eax; ret 0xd348;
0x0016cbda: xchg ebp, eax; ret 0xd348;
0x0016cbdb: ret 0xd348;
0x0016cce0: ret 0xc748;
0x0016cd84: add eax, 0x94c0000; ret;
0x0016cdf6: ret 0xe5e9;
0x0016ce9a: ret 8;
0x0016cf16: add [rax-0x77], cl; ret 0x8949;
0x0016cf19: ret 0x8949;
0x0016cfa9: add [rax-0x3f], cl; out dx, al; add ecx, [rax-0x77]; ret 0xc148;
0x0016cfac: out dx, al; add ecx, [rax-0x77]; ret 0xc148;
0x0016cfad: add ecx, [rax-0x77]; ret 0xc148;
0x0016cffe: call qword ptr [rax+0x3145f631];
0x0016d149: and [rax], al; add [rdi], cl; xchg esp, eax; ret 0x2040;
0x0016d14b: add [rdi], cl; xchg esp, eax; ret 0x2040;
0x0016d14d: xchg esp, eax; ret 0x2040;
0x0016d14e: ret 0x2040;
0x0016d207: dec dword ptr [rax-0x77]; ret;
0x0016d26b: cmp [rbx+0x5d], bl; pop r12; pop r13; pop r14; pop r15; ret;
0x0016d26d: pop rbp; pop r12; pop r13; pop r14; pop r15; ret;
0x0016d26e: pop r12; pop r13; pop r14; pop r15; ret;
0x0016d26f: pop rsp; pop r13; pop r14; pop r15; ret;
0x0016d270: pop r13; pop r14; pop r15; ret;
0x0016d271: pop rbp; pop r14; pop r15; ret;
0x0016d272: pop r14; pop r15; ret;
0x0016d273: pop rsi; pop r15; ret;
0x0016d274: pop r15; ret;
0x0016d275: pop rdi; ret;
0x0016d2df: add [rax-0x77], cl; ret 0x8948;
0x0016d2eb: ret 0xf48;
0x0016d38f: xor ecx, [rdi]; or dword ptr [rbp-4], 0xffffffff; dec dword ptr [rcx-0x7d]; ret;
0x0016d391: or dword ptr [rbp-4], 0xffffffff; dec dword ptr [rcx-0x7d]; ret;
0x0016d395: dec dword ptr [rcx-0x7d]; ret;
0x0016d3ac: add [rax-0x77], ecx; ret 0xc148;
0x0016d3f4: ret 0xc931;
0x0016d40f: add [rbp-0x76b23fb6], cl; ret 0xd349;
0x0016d506: idiv r15; jmp qword ptr [rsi+0xf];
0x0016d507: idiv edi; jmp qword ptr [rsi+0xf];
0x0016d585: ret 0x894d;
0x0016d591: ret 0xe783;
0x0016d74d: add [rax-0x77], ecx; shr ecx, 0x7a; idiv bh; jmp qword ptr [rsi+0x2e];
0x0016d750: shr ecx, 0x7a; idiv bh; jmp qword ptr [rsi+0x2e];
0x0016d753: idiv bh; jmp qword ptr [rsi+0x2e];
0x0016d75b: add [rax], al; add [rax], al; add [rax-0x77], cl; ret;
0x0016d75d: add [rax], al; add [rax-0x77], cl; ret;
0x0016d75f: add [rax-0x77], cl; ret;
0x0016d776: dec dword ptr [rax-0x77]; ret 0xc148;
0x0016d7bd: add [rax], al; add [rbp-0x76b63fb6], cl; ret 0xd349;
0x0016d7bf: add [rbp-0x76b63fb6], cl; ret 0xd349;
0x0016d7ee: call qword ptr [rax-0x47eb7];
0x0016d8ec: imul cl; int1; idiv bh; jmp qword ptr [rsi+0xf];
0x0016d8ee: int1; idiv bh; jmp qword ptr [rsi+0xf];
0x0016d8ef: idiv bh; jmp qword ptr [rsi+0xf];
0x0016d90f: test dh, ah; add [rax], al; add [rax-0x77], cl; ret 0xc148;
0x0016d911: add [rax], al; add [rax-0x77], cl; ret 0xc148;
0x0016d928: add [rdi], cl; test al, bl; add [rax], al; add [rcx-0x77], cl; ret;
0x0016d92a: test al, bl; add [rax], al; add [rcx-0x77], cl; ret;
0x0016d95d: dec dword ptr [rbp-0x76b63fb6]; ret 0xd349;
0x0016d963: ret 0xd349;
0x0016d9a1: add [rax], al; add [rdi], cl; xchg esp, eax; ret 0xf583;
0x0016d9a4: add [rdi], cl; xchg esp, eax; ret 0xf583;
0x0016d9a6: xchg esp, eax; ret 0xf583;
0x0016d9a7: ret 0xf583;
0x0016da29: test ch, bh; add [rax], al; add [rcx-0x77], cl; ret;
0x0016da2a: std; add [rax], al; add [rcx-0x77], cl; ret;
0x0016da2b: add [rax], al; add [rcx-0x77], cl; ret;
0x0016da2d: add [rcx-0x77], cl; ret;
0x0016da9f: push rdx; add [rax], eax; add [rax-0x77], cl; ret 0xc148;
0x0016daa0: add [rax], eax; add [rax-0x77], cl; ret 0xc148;
0x0016daa2: add [rax-0x77], cl; ret 0xc148;
0x0016db0a: ret 0xfff2;
0x0016dbaa: call far fword ptr [rdi];
0x0016dcf2: and al, 0xe8; or [rax], rax; add [rax-0x75], cl; add al, 0x24; add rsp, 0x38; ret;
0x0016dcf4: or [rax], rax; add [rax-0x75], cl; add al, 0x24; add rsp, 0x38; ret;
0x0016dcf5: or [rax], eax; add [rax-0x75], cl; add al, 0x24; add rsp, 0x38; ret;
0x0016dcf6: add [rax], al; mov rax, [rsp]; add rsp, 0x38; ret;
0x0016dcf7: add [rax-0x75], cl; add al, 0x24; add rsp, 0x38; ret;
0x0016dcf8: mov rax, [rsp]; add rsp, 0x38; ret;
0x0016dcf9: mov eax, [rsp]; add rsp, 0x38; ret;
0x0016dcfa: add al, 0x24; add rsp, 0x38; ret;
0x0016dcfb: and al, 0x48; add esp, 0x38; ret;
0x0016ddeb: add rsp, 0x38; ret;
0x0016ddec: add esp, 0x38; ret;
0x0016de32: add [rax], al; add cl, ch; ret 0xfffe;
0x0016de34: add cl, ch; ret 0xfffe;
0x0016de36: ret 0xfffe;
0x0016debb: inc dword ptr [rax]; add [rax+0x21], cl; iretd;
0x0016debd: add [rax+0x21], cl; iretd;
0x0016df0a: mov rdx, rsi; and rdx, r8; or rdx, rax; mov [rsp-0x10], rdx; movdqa xmm0, [rsp-0x18]; ret;
0x0016df0b: mov edx, esi; and rdx, r8; or rdx, rax; mov [rsp-0x10], rdx; movdqa xmm0, [rsp-0x18]; ret;
0x0016df0d: and rdx, r8; or rdx, rax; mov [rsp-0x10], rdx; movdqa xmm0, [rsp-0x18]; ret;
0x0016df0e: and edx, eax; or rdx, rax; mov [rsp-0x10], rdx; movdqa xmm0, [rsp-0x18]; ret;
0x0016df0f: ret 0x948;
0x0016df10: or rdx, rax; mov [rsp-0x10], rdx; movdqa xmm0, [rsp-0x18]; ret;
0x0016df11: or edx, eax; mov [rsp-0x10], rdx; movdqa xmm0, [rsp-0x18]; ret;
0x0016df12: ret 0x8948;
0x0016df13: mov [rsp-0x10], rdx; movdqa xmm0, [rsp-0x18]; ret;
0x0016df14: mov [rsp-0x10], edx; movdqa xmm0, [rsp-0x18]; ret;
0x0016df15: push rsp; and al, 0xf0; movdqa xmm0, [rsp-0x18]; ret;
0x0016df16: and al, 0xf0; movdqa xmm0, [rsp-0x18]; ret;
0x0016df18: movdqa xmm0, [rsp-0x18]; ret;
0x0016df19: movq mm0, [rsp-0x18]; ret;
0x0016df1a: outsd dx, [rsi]; and al, 0xe8; ret;
0x0016df1c: and al, 0xe8; ret;
0x0016df71: sbb [rcx+0x21], cl; ror dword ptr [rax-0x3f], cl; out dx, eax; xor [rax-0x77], cl; ret 0x2148;
0x0016df74: ror dword ptr [rax-0x3f], cl; out dx, eax; xor [rax-0x77], cl; ret 0x2148;
0x0016df77: out dx, eax; xor [rax-0x77], cl; ret 0x2148;
0x0016df78: xor [rax-0x77], cl; ret 0x2148;
0x0016df7b: ret 0x2148;
0x0016e0a0: add [rbp-0x7b], al; shl byte ptr [rbp+0x4d], cl; add rsp, 0x38; pop rbx; pop r14; ret;
0x0016e0a3: shl byte ptr [rbp+0x4d], cl; add rsp, 0x38; pop rbx; pop r14; ret;
0x0016e0fc: add eax, 0x8b480000; add al, 0x24; add rsp, 0x38; pop rbx; pop r14; ret;
0x0016e1cc: adc [rcx-0x77], cl; ret;
0x0016e258: xchg ebp, eax; ret 0x145;
0x0016e259: ret 0x145;
0x0016e2a2: add [rbp-0x7b], eax; shl byte ptr [rbp+0x29], cl; add rsp, 0x38; pop rbx; pop r14; ret;
0x0016e2a5: shl byte ptr [rbp+0x29], cl; add rsp, 0x38; pop rbx; pop r14; ret;
0x0016e2db: add [rax], al; mov rax, [rsp]; add rsp, 0x38; pop rbx; pop r14; ret;
0x0016e2dc: add [rax-0x75], cl; add al, 0x24; add rsp, 0x38; pop rbx; pop r14; ret;
0x0016e2dd: mov rax, [rsp]; add rsp, 0x38; pop rbx; pop r14; ret;
0x0016e2de: mov eax, [rsp]; add rsp, 0x38; pop rbx; pop r14; ret;
0x0016e2df: add al, 0x24; add rsp, 0x38; pop rbx; pop r14; ret;
0x0016e2e0: and al, 0x48; add esp, 0x38; pop rbx; pop r14; ret;
0x0016e307: fild st, dword ptr [rcx+0xf]; xchg ebp, eax; ret 0x94c;
0x0016e30a: xchg ebp, eax; ret 0x94c;
0x0016e30b: ret 0x94c;
0x0016e33c: add [rbp-0x7b], al; shl byte ptr [rbp-0x71], cl; add rsp, 0x38; pop rbx; pop r14; ret;
0x0016e33f: shl byte ptr [rbp-0x71], cl; add rsp, 0x38; pop rbx; pop r14; ret;
0x0016e342: add rsp, 0x38; pop rbx; pop r14; ret;
0x0016e343: add esp, 0x38; pop rbx; pop r14; ret;
0x0016e345: cmp [rbx+0x41], bl; pop rsi; ret;
0x0016e346: pop rbx; pop r14; ret;
0x0016e347: pop r14; ret;
0x0016e348: pop rsi; ret;
0x0016e35d: jmp qword ptr [rsi-0x70];
0x0016e46a: iretd;
0x0016e4ad: add [rbp-0x7b], al; shl byte ptr [rbp+0x77], cl; add rsp, 0x30; mov rax, r12; pop r12; ret;
0x0016e4b0: shl byte ptr [rbp+0x77], cl; add rsp, 0x30; mov rax, r12; pop r12; ret;
0x0016e4cd: xchg ebp, eax; ret 0xf45;
0x0016e4ce: ret 0xf45;
0x0016e530: add [rax], al; add rsp, 0x30; mov rax, r12; pop r12; ret;
0x0016e532: add rsp, 0x30; mov rax, r12; pop r12; ret;
0x0016e533: add esp, 0x30; mov rax, r12; pop r12; ret;
0x0016e535: xor [rcx+rcx*4-0x20], cl; pop r12; ret;
0x0016e536: mov rax, r12; pop r12; ret;
0x0016e537: mov eax, esp; pop r12; ret;
0x0016e5c3: add [rax], al; add [rbp+0x39], cl; ret;
0x0016e5c5: add [rbp+0x39], cl; ret;
0x0016e5fd: add [rax], al; add [rax-0x48], cl; add [rax], al; add [rax], al; add [rax-0x7ab70000], al; ret;
0x0016e5ff: add [rax-0x48], cl; add [rax], al; add [rax], al; add [rax-0x7ab70000], al; ret;
0x0016e601: mov eax, 0; add [rax-0x7ab70000], al; ret;
0x0016e602: add [rax], al; add [rax], al; add [rax-0x7ab70000], al; ret;
0x0016e604: add [rax], al; add [rax-0x7ab70000], al; ret;
0x0016e606: add [rax-0x7ab70000], al; ret;
0x0016e609: add [rcx-0x7b], cl; ret;
0x0016e62b: add [rax], al; add [rax], al; add [rbp-0x77], cl; ret 0x94d;
0x0016e62d: add [rax], al; add [rbp-0x77], cl; ret 0x94d;
0x0016e62f: add [rbp-0x77], cl; ret 0x94d;
0x0016e632: ret 0x94d;
0x0016e6a5: and [rax+rdx-0xd], dh; movups xmm0, [rip+0x24558]; divss xmm0, [rip+0x2585c]; ret;
0x0016e6a7: adc bl, dh; movups xmm0, [rip+0x24558]; divss xmm0, [rip+0x2585c]; ret;
0x0016e6a8: movss xmm0, [rip+0x24558]; divss xmm0, [rip+0x2585c]; ret;
0x0016e6a9: movups xmm0, [rip+0x24558]; divss xmm0, [rip+0x2585c]; ret;
0x0016e6aa: adc [rip+0x24558], al; divss xmm0, [rip+0x2585c]; ret;
0x0016e6ab: add eax, 0x24558; divss xmm0, [rip+0x2585c]; ret;
0x0016e6ac: pop rax; add r8b, [r8]; divss xmm0, [rip+0x2585c]; ret;
0x0016e6ad: add r8b, [r8]; divss xmm0, [rip+0x2585c]; ret;
0x0016e6ae: add al, [rax]; divss xmm0, [rip+0x2585c]; ret;
0x0016e6af: add bl, dh; divps xmm0, [rip+0x2585c]; ret;
0x0016e6b0: divss xmm0, [rip+0x2585c]; ret;
0x0016e6b1: divps xmm0, [rip+0x2585c]; ret;
0x0016e6b2: pop rsi; add eax, 0x2585c; ret;
0x0016e6b3: add eax, 0x2585c; ret;
0x0016e6b4: pop rsp; pop rax; add al, [rax]; ret;
0x0016e6b5: pop rax; add al, [rax]; ret;
0x0016e6b6: add al, [rax]; ret;
0x0016e70f: mov rdi, [r13+0x10]; add rdi, rbx; call r12;
0x0016e710: mov edi, [rbp+0x10]; add rdi, rbx; call r12;
0x0016e713: add rdi, rbx; call r12;
0x0016e714: add edi, ebx; call r12;
0x0016e716: call r12;
0x0016e717: call rsp;
0x0016e720: add [rax-0x7d], ecx; ret;
0x0016e752: ret 0xeb6b;
0x0016e770: jmp qword ptr [rsi+0x66];
0x0016e7c6: out 0x5b, al; ret;
0x0016e820: mov edi, 0x1f0ffff8; add [rax], r8b; add rsp, 8; ret;
0x0016e823: nop [rax+rax]; add rsp, 8; ret;
0x0016e825: add [rax], r8b; add rsp, 8; ret;
0x0016e84c: enter 0xeb6a, 0xff; ret;
0x0016e879: or ebx, [rsi]; add eax, 0xa36ee900; clc; jmp qword ptr [rsi+0xf];
0x0016e87b: add eax, 0xa36ee900; clc; jmp qword ptr [rsi+0xf];
0x0016e87c: add cl, ch; outsb dx, [rsi]; mov [0x441f0f66fff8], eax; ret;
0x0016e87e: outsb dx, [rsi]; mov [0x441f0f66fff8], eax; ret;
0x0016e87f: mov [0x441f0f66fff8], eax; ret;
0x0016e880: clc; jmp qword ptr [rsi+0xf];
0x0016e881: jmp qword ptr [rsi+0xf];
0x0016e882: nop [rax+rax]; ret;
0x0016e883: nop [rax+rax]; ret;
0x0016e885: add [rax], r8b; ret;
0x0016e892: push 0xffffffffffffffeb; jmp qword ptr [rsi+0x2e];
0x0016e8d4: mov esi, 0xc748fff8; add eax, 0x51db6; add [rax], al; add [rax], al; add rsp, 8; ret;
0x0016e8d6: dec dword ptr [rax-0x39]; add eax, 0x51db6; add [rax], al; add [rax], al; add rsp, 8; ret;
0x0016e8d7: mov qword ptr [rip+0x51db6], 0; add rsp, 8; ret;
0x0016e8d8: mov dword ptr [rip+0x51db6], 0; add rsp, 8; ret;
0x0016e8d9: add eax, 0x51db6; add [rax], al; add [rax], al; add rsp, 8; ret;
0x0016e93a: add eax, 0x348b4c00; fmul st, dword ptr [rax+0x63]; ret;
0x0016e93b: add [rbx+rcx*4+0x34], cl; fmul st, dword ptr [rax+0x63]; ret;
0x0016e93f: fmul st, dword ptr [rax+0x63]; ret;
0x0016e946: ret 0x2974;
0x0016e9bb: add [rax+rcx*2-0x75], ah; adc [rax-0x7d], cl; ret;
0x0016e9bf: adc [rax-0x7d], cl; ret;
0x0016ea27: add [rax-0x7d], cl; ret;
0x0016ea45: call rax;
0x0016ea7e: mov ds, [rip+0x39480005]; ret;
0x0016ea7f: sbb eax, 0x39480005; ret;
0x0016eaeb: adc [rbx+0x2ce80001], dh; pop rbx; in al, dx; jmp qword ptr [rsi+0x2e];
0x0016eaec: mov bl, 1; add al, ch; sub al, 0x5b; in al, dx; jmp qword ptr [rsi+0x2e];
0x0016eaee: add al, ch; sub al, 0x5b; in al, dx; jmp qword ptr [rsi+0x2e];
0x0016eaf0: sub al, 0x5b; in al, dx; jmp qword ptr [rsi+0x2e];
0x0016eaf1: pop rbx; in al, dx; jmp qword ptr [rsi+0x2e];
0x0016eaf2: in al, dx; jmp qword ptr [rsi+0x2e];
0x0016ec37: push qword ptr [rbp+rax-0x18]; xchg ecx, eax; mov ebp, ebx; dec dword ptr [rax-0x7d]; ret;
0x0016ec39: add eax, 0xeb8b91e8; dec dword ptr [rax-0x7d]; ret;
0x0016ec3b: xchg ecx, eax; mov ebp, ebx; dec dword ptr [rax-0x7d]; ret;
0x0016ec3c: mov ebp, ebx; dec dword ptr [rax-0x7d]; ret;
0x0016ec3e: dec dword ptr [rax-0x7d]; ret;
0x0016ec56: ret 0x8b48;
0x0016ec6d: ret 0xa5e8;
0x0016ec9d: adc al, ch; lahf; clc; call far fword ptr [rbx+0x4c];
0x0016eca0: lahf; clc; call far fword ptr [rbx+0x4c];
0x0016eca1: clc; call far fword ptr [rbx+0x4c];
0x0016ecae: call qword ptr [rax+0x243c8b49];
0x0016ecb8: call far fword ptr [rbx+0x4c];
0x0016ece9: mov edx, 0xc748fff8; add eax, 0x51dc9; add [rax], al; add [rax], al; add rsp, 8; ret;
0x0016eceb: dec dword ptr [rax-0x39]; add eax, 0x51dc9; add [rax], al; add [rax], al; add rsp, 8; ret;
0x0016ecec: mov qword ptr [rip+0x51dc9], 0; add rsp, 8; ret;
0x0016eced: mov dword ptr [rip+0x51dc9], 0; add rsp, 8; ret;
0x0016ecee: add eax, 0x51dc9; add [rax], al; add [rax], al; add rsp, 8; ret;
0x0016ecef: leave; sbb eax, 5; add [rax], al; add rsp, 8; ret;
0x0016ecf0: sbb eax, 5; add [rax], al; add rsp, 8; ret;
0x0016ee29: sub dword ptr [rip+0x529ef], 1; pop rbx; ret;
0x0016ee2a: sub dword ptr [rip+0x13c6ca], 1; pop rbx; ret;
0x0016ee2f: add [rcx], al; pop rbx; ret;
0x0016ee6d: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x13c7f6]; syscall;
0x0016ee6e: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x13c7f6]; syscall;
0x0016ee6f: sar byte ptr [rdx+1], cl; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x13c7f6]; syscall;
0x0016ee70: mov edx, 1; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x13c7f6]; syscall;
0x0016ee71: add [rax], eax; add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x13c7f6]; syscall;
0x0016ee72: add [rax], al; add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x13c7f6]; syscall;
0x0016ee73: add [rax], al; mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x13c7f6]; syscall;
0x0016ee74: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x13c7f6]; syscall;
0x0016ee74: add [rsi+0x81], bh; mov eax, 0xca; lea rdi, [rip+0x13c69a]; syscall; pop rbx; ret;
0x0016ee75: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x13c7f6]; syscall;
0x0016ee75: mov esi, 0x81; mov eax, 0xca; lea rdi, [rip+0x13c69a]; syscall; pop rbx; ret;
0x0016ee76: add dword ptr [rax], 0xcab80000; add [rax], al; add [rax-0x73], cl; cmp eax, 0x5299a; syscall;
0x0016ee77: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0x13c69a]; syscall; pop rbx; ret;
0x0016ee77: add [rax], al; add [rax+0xca], bh; lea rdi, [rip+0x13c7f6]; syscall;
0x0016ee78: add [rax], al; mov eax, 0xca; lea rdi, [rip+0x13c7f6]; syscall;
0x0016ee78: add [rax], al; mov eax, 0xca; lea rdi, [rip+0x13c69a]; syscall; pop rbx; ret;
0x0016ee79: add [rax+0xca], bh; lea rdi, [rip+0x13c69a]; syscall; pop rbx; ret;
0x0016ee79: add [rax+0xca], bh; lea rdi, [rip+0x13c7f6]; syscall;
0x0016ee7a: mov eax, 0xca; lea rdi, [rip+0x13c69a]; syscall; pop rbx; ret;
0x0016ee7a: mov eax, 0xca; lea rdi, [rip+0x13c7f6]; syscall;
0x0016ee7c: add [rax], al; add [rax-0x73], cl; cmp eax, 0x5299a; syscall;
0x0016ee7c: add [rax], al; add [rax-0x73], cl; cmp eax, 0x5299a; syscall; pop rbx; ret;
0x0016ee7d: add [rax], al; lea rdi, [rip+0x13c69a]; syscall; pop rbx; ret;
0x0016ee7d: add [rax], al; lea rdi, [rip+0x13c7f6]; syscall;
0x0016ee7e: add [rax-0x73], cl; cmp eax, 0x5299a; syscall;
0x0016ee7e: add [rax-0x73], cl; cmp eax, 0x5299a; syscall; pop rbx; ret;
0x0016ee7f: lea rdi, [rip+0x13c69a]; syscall; pop rbx; ret;
0x0016ee7f: lea rdi, [rip+0x13c7f6]; syscall;
0x0016ee80: lea edi, [rip+0x13c7f6]; syscall;
0x0016ee80: lea edi, [rip+0x13c69a]; syscall; pop rbx; ret;
0x0016ee81: cmp eax, 0x5299a; syscall; pop rbx; ret;
0x0016ee81: cmp eax, 0x5299a; syscall;
0x0016ee83: sub [rip+0x5b050f00], eax; ret;
0x0016ee84: add eax, 0x5b050f00; ret;
0x0016ee86: syscall;
0x0016ee86: syscall; pop rbx; ret;
0x0016ee92: cmp eax, 0x530a8; add [rsi+rax-0x17], dh; adc [rax], eax; add [rax], al; nop; ret;
0x0016ee97: add [rsi+rax-0x17], dh; adc [rax], eax; add [rax], al; nop; ret;
0x0016ee9b: adc [rax], eax; add [rax], al; nop; ret;
0x0016ee9d: add [rax], al; nop; ret;
0x0016ee9f: nop; ret;
0x0016eeca: ret 0x509;
0x0016eee4: nop [rax]; call qword ptr [rbx];
0x0016eee6: add dil, dil; adc ecx, [rax-0x7d]; ret;
0x0016eee7: add bh, bh; adc ecx, [rax-0x7d]; ret;
0x0016eee8: call qword ptr [rbx];
0x0016eee9: adc ecx, [rax-0x7d]; ret;
0x0016ef1e: add [rax+0x39], cl; ret;
0x0016ef2e: add ecx, [rax-0x73]; insb [rdi], dx; ret;
0x0016ef31: insb [rdi], dx; ret;
0x0016ef37: add [rax-0x75], cl; cmp ecx, [rax-0x7d]; ret;
0x0016ef3a: cmp ecx, [rax-0x7d]; ret;
0x0016ef43: dec dword ptr [rax+0x39]; fnsave [rbp-0x11]; add rsp, 8; pop rbx; pop rbp; ret;
0x0016ef46: fnsave [rbp-0x11]; add rsp, 8; pop rbx; pop rbp; ret;
0x0016ef48: out dx, eax; add rsp, 8; pop rbx; pop rbp; ret;
0x0016ef49: add rsp, 8; pop rbx; pop rbp; ret;
0x0016ef4a: add esp, 8; pop rbx; pop rbp; ret;
0x0016ef4c: or [rbx+0x5d], bl; ret;
0x0016ef4d: pop rbx; pop rbp; ret;
0x0016ef4e: pop rbp; ret;
0x0016ef8d: add al, ch; test [rbx-0x15], esp; call far fword ptr [rbx+0x48];
0x0016ef8f: test [rbx-0x15], esp; call far fword ptr [rbx+0x48];
0x0016ef90: movsxd ebp, ebx; call far fword ptr [rbx+0x48];
0x0016ef92: call far fword ptr [rbx+0x48];
0x0016ef93: pop rbx; mov qword ptr [rip+0x531f1], 0; ret;
0x0016ef94: mov qword ptr [rip+0x531f1], 0; ret;
0x0016ef95: mov dword ptr [rip+0x531f1], 0; ret;
0x0016ef96: add eax, 0x531f1; add [rax], al; add [rax], al; ret;
0x0016efed: dec dword ptr [rax-0x39]; add eax, 0x5360f; add [rax], al; add [rax], al; add rsp, 8; ret;
0x0016efee: mov qword ptr [rip+0x5360f], 0; add rsp, 8; ret;
0x0016efef: mov dword ptr [rip+0x5360f], 0; add rsp, 8; ret;
0x0016eff0: add eax, 0x5360f; add [rax], al; add [rax], al; add rsp, 8; ret;
0x0016eff5: add [rax], al; add [rax], al; add rsp, 8; ret;
0x0016eff7: add [rax], al; add rsp, 8; ret;
0x0016f065: nop [rax]; add rsp, 8; ret;
0x0016f068: add rsp, 8; ret;
0x0016f069: add esp, 8; ret;
0x0016f09d: mov esp, edi; call far fword ptr [rbp+0x48];
0x0016f09e: cld; call far fword ptr [rbp+0x48];
0x0016f09f: call far fword ptr [rbp+0x48];
0x0016f0a0: pop rbp; mov qword ptr [rip+0x53ec4], 0; ret;
0x0016f0a1: mov qword ptr [rip+0x53ec4], 0; ret;
0x0016f0a2: mov dword ptr [rip+0x53ec4], 0; ret;
0x0016f0a3: add eax, 0x53ec4; add [rax], al; add [rax], al; ret;
0x0016f0a5: add eax, 0; add bl, al; nop [rax]; ret;
0x0016f0a6: add eax, 0; add bl, al; nop [rax]; ret;
0x0016f0a7: add [rax], al; add [rax], al; add bl, al; nop [rax]; ret;
0x0016f0a8: add [rax], al; add [rax], al; ret;
0x0016f0a9: add [rax], al; add bl, al; nop [rax]; ret;
0x0016f0aa: add [rax], al; ret;
0x0016f0ab: add bl, al; nop [rax]; ret;
0x0016f13a: dec dword ptr [rax-0x39]; add eax, 0x54a1a; add [rax], al; add [rax], al; pop rbx; ret;
0x0016f13b: mov qword ptr [rip+0x54a1a], 0; pop rbx; ret;
0x0016f13c: mov dword ptr [rip+0x54a1a], 0; pop rbx; ret;
0x0016f13d: add eax, 0x54a1a; add [rax], al; add [rax], al; pop rbx; ret;
0x0016f142: add [rax], al; add [rax], al; pop rbx; ret;
0x0016f144: add [rax], al; pop rbx; ret;
0x0016f146: pop rbx; ret;
0x0016f14b: add [rax], al; add [rax], al; add al, ch; ret;
0x0016f14d: add [rax], al; add al, ch; ret;
0x0016f14f: add al, ch; ret;
0x0016f15b: add bl, ch; test eax, 0xfaeb9de8; jmp qword ptr [rsi+0x2e];
0x0016f15d: test eax, 0xfaeb9de8; jmp qword ptr [rsi+0x2e];
0x0016f161: cli; jmp qword ptr [rsi+0x2e];
0x0016f162: jmp qword ptr [rsi+0x2e];
0x0016f18c: nop [rax]; ret;
0x0016f20c: nop [rax]; pop rbx; pop rbp; pop r12; ret;
0x0016f20f: add [rbx+0x5d], bl; pop r12; ret;
0x0016f210: pop rbx; pop rbp; pop r12; ret;
0x0016f211: pop rbp; pop r12; ret;
0x0016f31d: nop [rax]; ret;
0x0016f37b: ret 0xc148;
0x0016f388: xor r12d, r12d; add rsp, 8; mov eax, r12d; pop rbx; pop r12; ret;
0x0016f389: xor esp, esp; add rsp, 8; mov eax, r12d; pop rbx; pop r12; ret;
0x0016f38a: in al, 0x48; add esp, 8; mov eax, r12d; pop rbx; pop r12; ret;
0x0016f3a5: mov qword ptr [rbx], 0; add rsp, 8; mov eax, r12d; pop rbx; pop r12; ret;
0x0016f3a6: mov dword ptr [rbx], 0; add rsp, 8; mov eax, r12d; pop rbx; pop r12; ret;
0x0016f3aa: add [rax], al; add rsp, 8; mov eax, r12d; pop rbx; pop r12; ret;
0x0016f3ac: add rsp, 8; mov eax, r12d; pop rbx; pop r12; ret;
0x0016f3ad: add esp, 8; mov eax, r12d; pop rbx; pop r12; ret;
0x0016f3af: or [rcx+rcx*4-0x20], al; pop rbx; pop r12; ret;
0x0016f3b0: mov eax, r12d; pop rbx; pop r12; ret;
0x0016f3b1: mov eax, esp; pop rbx; pop r12; ret;
0x0016f3b3: pop rbx; pop r12; ret;
0x0016f3b4: pop r12; ret;
0x0016f3b5: pop rsp; ret;
0x0016f3b6: ret;
